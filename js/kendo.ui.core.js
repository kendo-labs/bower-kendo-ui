/**
 * Copyright 2023 Progress Software Corporation and/or one of its subsidiaries or affiliates. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :
    typeof define === 'function' && define.amd ? define(['jquery'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoui = global.kendoui || {}, global.kendoui.core = global.kendoui.core || {}, global.kendoui.core.js = factory()));
})(this, (function () {
    var breakpoints;
    var EVENT = "change";

    var defaultBreakpoints = {
        small: "(max-width: 500px)",
        medium: "(min-width: 500.1px) and (max-width: 768px)",
        large: "(min-width: 768.1px)",
    };

    function createMediaQuery(query) {
        var mediaQueryList = window.matchMedia(query);
        var onEnterCallbacks = [];
        var onLeaveCallbacks = [];
        var onChangeHandlers = [];
        var kendoMediaQuery = { mediaQueryList: mediaQueryList };

        var onChangeHandler = function (ev) {
            onChangeHandlers.forEach(function (cb) { return cb(ev); });

            if (ev.matches) {
                onEnterCallbacks.forEach(function (cb) { return cb(ev); });
            } else {
                onLeaveCallbacks.forEach(function (cb) { return cb(ev); });
            }
        };

        mediaQueryList.addEventListener(EVENT, onChangeHandler);

        var onChange = function (cb) {
            onChangeHandlers.push(cb);
            return kendoMediaQuery;
        };

        var onEnter = function (cb) {
            onEnterCallbacks.push(cb);

            if (mediaQueryList.matches) {
                var media = mediaQueryList.media;
                var matches = true;

                var ev = new MediaQueryListEvent(EVENT, {
                    media: media,
                    matches: matches,
                });

                cb(ev);
            }

            return kendoMediaQuery;
        };

        var onLeave = function (cb) {
            onLeaveCallbacks.push(cb);
            return kendoMediaQuery;
        };

        var destroy = function () {
            if (mediaQueryList) {
                mediaQueryList.removeEventListener(EVENT, onChangeHandler);
            }
            onEnterCallbacks = null;
            onLeaveCallbacks = null;
            onChangeHandlers = null;
            mediaQueryList = null;
            kendoMediaQuery = null;
        };

        kendoMediaQuery.onChange = onChange;
        kendoMediaQuery.onEnter = onEnter;
        kendoMediaQuery.onLeave = onLeave;
        kendoMediaQuery.destroy = destroy;

        return kendoMediaQuery;
    }

    function mediaQuery(query) {
        if (!query) {
            return;
        }

        breakpoints =
            breakpoints ||
            Object.assign({}, defaultBreakpoints, kendo.defaults.breakpoints);

        if (query in breakpoints) {
            query = breakpoints[query];
        }

        return createMediaQuery(query);
    }

    var __meta__$15 = {
        id: "core",
        name: "Core",
        category: "framework",
        description: "The core of the Kendo framework."
    };

    var packageMetadata = {
        name: '@progress/kendo-ui',
        productName: 'Kendo UI',
        productCodes: ['KENDOUICOMPLETE', 'KENDOUI', 'UIASPCORE', 'KENDOMVC', 'KENDOUIMVC'],
        publishDate: 0,
        version: 'undefined'.replace(/^\s+|\s+$/g, ''),
        licensingDocsUrl: 'https://docs.telerik.com/kendo-ui/intro/installation/using-license-code?utm_medium=product&utm_source=kendojquery&utm_campaign=kendo-ui-jquery-purchase-license-keys-warning'
    };


    (function($, window, undefined$1) {
        var kendo = window.kendo = window.kendo || { cultures: {} },
            extend = $.extend,
            each = $.each,
            isArray = Array.isArray,
            noop = $.noop,
            math = Math,
            Template,
            JSON = window.JSON || {},
            support = {},
            percentRegExp = /%/,
            formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
            boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
            numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
            MONTH = "month",
            HOUR = "hour",
            ZONE = "zone",
            WEEKDAY = "weekday",
            QUARTER = "quarter",
            DATE_FIELD_MAP = {
                "G": "era",
                "y": "year",
                "q": QUARTER,
                "Q": QUARTER,
                "M": MONTH,
                "L": MONTH,
                "d": "day",
                "E": WEEKDAY,
                "c": WEEKDAY,
                "e": WEEKDAY,
                "h": HOUR,
                "H": HOUR,
                "k": HOUR,
                "K": HOUR,
                "m": "minute",
                "s": "second",
                "a": "dayperiod",
                "t": "dayperiod",
                "x": ZONE,
                "X": ZONE,
                "z": ZONE,
                "Z": ZONE
            },
            NAME_TYPES = {
                month: {
                    type: "months",
                    minLength: 3,
                    standAlone: "L"
                },

                quarter: {
                    type: "quarters",
                    minLength: 3,
                    standAlone: "q"
                },

                weekday: {
                    type: "days",
                    minLength: {
                        E: 0,
                        c: 3,
                        e: 3
                    },
                    standAlone: "c"
                },

                dayperiod: {
                    type: "dayPeriods",
                    minLength: 0
                },

                era: {
                    type: "eras",
                    minLength: 0
                }
            },
            FUNCTION = "function",
            STRING = "string",
            NUMBER = "number",
            OBJECT = "object",
            NULL = "null",
            BOOLEAN = "boolean",
            UNDEFINED = "undefined",
            PREFIX = "prefix",
            ARIA_LABELLEDBY = "aria-labelledby",
            ARIA_LABEL = "aria-label",
            LABELIDPART = "_label",
            getterCache = {},
            setterCache = {},
            slice = [].slice,
            cssPropertiesNames = [ "themeColor", "fillMode", "shape", "size", "rounded", "positionMode" ],
            // avoid extending the depricated properties in latest verions of jQuery
            noDepricateExtend = function() {
                var arguments$1 = arguments;

                var src, copyIsArray, copy, name, options, clone,
                    target = arguments[ 0 ] || {},
                    i = 1,
                    length = arguments.length,
                    deep = false;

                // Handle a deep copy situation
                if ( typeof target === "boolean" ) {
                    deep = target;

                    // skip the boolean and the target
                    target = arguments[ i ] || {};
                    i++;
                }

                // Handle case when target is a string or something (possible in deep copy)
                if ( typeof target !== "object" && typeof target !== "function") {
                    target = {};
                }

                // extend jQuery itself if only one argument is passed
                if ( i === length ) {
                    target = this;
                    i--;
                }

                for ( ; i < length; i++ ) {

                    // Only deal with non-null/undefined values
                    if ( ( options = arguments$1[ i ] ) != null ) {

                        // Extend the base object
                        for ( name in options ) {
                            // filters, concat and : properties are depricated in the jQuery 3.3.0
                            // accessing these properties throw a warning when jQuery migrate is included
                            if (name == "filters" || name == "concat" || name == ":") {
                                continue;
                            }
                            src = target[ name ];
                            copy = options[ name ];

                            // Prevent never-ending loop
                            if ( target === copy ) {
                                continue;
                            }

                            // Recurse if we're merging plain objects or arrays
                            if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
                                ( copyIsArray = Array.isArray( copy ) ) ) ) {

                                if ( copyIsArray ) {
                                    copyIsArray = false;
                                    clone = src && Array.isArray( src ) ? src : [];

                                } else {
                                    clone = src && jQuery.isPlainObject( src ) ? src : {};
                                }

                                // Never move original objects, clone them
                                target[ name ] = noDepricateExtend( deep, clone, copy );

                            // Don't bring in undefined values
                            } else if ( copy !== undefined$1 ) {
                                target[ name ] = copy;
                            }
                        }
                    }
                }

                // Return the modified object
                return target;
            };

        kendo.version = "undefined".replace(/^\s+|\s+$/g, '');

        function Class() {}

        Class.extend = function(proto) {
            var base = function() {},
                member,
                that = this,
                subclass = proto && proto.init ? proto.init : function() {
                    that.apply(this, arguments);
                },
                fn;

            base.prototype = that.prototype;
            fn = subclass.fn = subclass.prototype = new base();

            for (member in proto) {
                if (proto[member] != null && proto[member].constructor === Object) {
                    // Merge object members
                    fn[member] = extend(true, {}, base.prototype[member], proto[member]);
                } else {
                    fn[member] = proto[member];
                }
            }

            fn.constructor = subclass;
            subclass.extend = that.extend;

            return subclass;
        };

        Class.prototype._initOptions = function(options) {
            this.options = deepExtend({}, this.options, options);
        };

        var isPresent = kendo.isPresent = function (value) { return value !== null && value !== undefined$1; };
        var isBlank = kendo.isBlank = function (value) { return value === null || value === undefined$1; };
        var isString = kendo.isString = function (value) { return typeof value === 'string'; };
        var isNumeric = kendo.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
        var isDate = kendo.isDate = function (value) { return value && value.getTime; };
        var isFunction = kendo.isFunction = function (value) { return typeof value === 'function'; };

        var preventDefault = function() {
            this._defaultPrevented = true;
        };

        var isDefaultPrevented = function() {
            return this._defaultPrevented === true;
        };

        var Observable = Class.extend({
            init: function() {
                this._events = {};
            },

            bind: function(eventName, handlers, one) {
                var that = this,
                    idx,
                    eventNames = typeof eventName === STRING ? [eventName] : eventName,
                    length,
                    original,
                    handler,
                    handlersIsFunction = typeof handlers === FUNCTION,
                    events;

                if (handlers === undefined$1) {
                    for (idx in eventName) {
                        that.bind(idx, eventName[idx]);
                    }
                    return that;
                }

                for (idx = 0, length = eventNames.length; idx < length; idx++) {
                    eventName = eventNames[idx];

                    handler = handlersIsFunction ? handlers : handlers[eventName];

                    if (handler) {
                        if (one) {
                            original = handler;
                            handler = function() {
                                that.unbind(eventName, handler);
                                original.apply(that, arguments);
                            };
                            handler.original = original;
                        }
                        events = that._events[eventName] = that._events[eventName] || [];
                        events.push(handler);
                    }
                }

                return that;
            },

            one: function(eventNames, handlers) {
                return this.bind(eventNames, handlers, true);
            },

            first: function(eventName, handlers) {
                var that = this,
                    idx,
                    eventNames = typeof eventName === STRING ? [eventName] : eventName,
                    length,
                    handler,
                    handlersIsFunction = typeof handlers === FUNCTION,
                    events;

                for (idx = 0, length = eventNames.length; idx < length; idx++) {
                    eventName = eventNames[idx];

                    handler = handlersIsFunction ? handlers : handlers[eventName];

                    if (handler) {
                        events = that._events[eventName] = that._events[eventName] || [];
                        events.unshift(handler);
                    }
                }

                return that;
            },

            trigger: function(eventName, e) {
                var that = this,
                    events = that._events[eventName],
                    idx,
                    length;

                if (events) {
                    e = e || {};

                    e.sender = that;

                    e._defaultPrevented = false;

                    e.preventDefault = preventDefault;

                    e.isDefaultPrevented = isDefaultPrevented;

                    events = events.slice();

                    for (idx = 0, length = events.length; idx < length; idx++) {
                        events[idx].call(that, e);
                    }

                    return e._defaultPrevented === true;
                }

                return false;
            },

            unbind: function(eventName, handler) {
                var that = this,
                    events = that._events[eventName],
                    idx;

                if (eventName === undefined$1) {
                    that._events = {};
                } else if (events) {
                    if (handler) {
                        for (idx = events.length - 1; idx >= 0; idx--) {
                            if (events[idx] === handler || events[idx].original === handler) {
                                events.splice(idx, 1);
                            }
                        }
                    } else {
                        that._events[eventName] = [];
                    }
                }

                return that;
            }
        });


         function compilePart(part, stringPart) {
             if (stringPart) {
                 return "'" +
                     part.split("'").join("\\'")
                         .split('\\"').join('\\\\\\"')
                         .replace(/\n/g, "\\n")
                         .replace(/\r/g, "\\r")
                         .replace(/\t/g, "\\t") + "'";
             } else {
                 var first = part.charAt(0),
                     rest = part.substring(1);

                 if (first === "=") {
                     return "+(" + rest + ")+";
                 } else if (first === ":") {
                     return "+$kendoHtmlEncode(" + rest + ")+";
                 } else {
                     return ";" + part + ";$kendoOutput+=";
                 }
             }
         }

        var argumentNameRegExp = /^\w+/,
            encodeRegExp = /\$\{([^}]*)\}/g,
            escapedCurlyRegExp = /\\\}/g,
            curlyRegExp = /__CURLY__/g,
            escapedSharpRegExp = /\\#/g,
            sharpRegExp = /__SHARP__/g,
            zeros = ["", "0", "00", "000", "0000"];

        Template = {
            paramName: "data", // name of the parameter of the generated template
            useWithBlock: true, // whether to wrap the template in a with() block
            render: function(template, data) {
                var idx,
                    length,
                    html = "";

                for (idx = 0, length = data.length; idx < length; idx++) {
                    html += template(data[idx]);
                }

                return html;
            },
            compile: function(template, options) {
                var settings = extend({}, this, options),
                    paramName = settings.paramName,
                    argumentName = paramName.match(argumentNameRegExp)[0],
                    useWithBlock = settings.useWithBlock,
                    functionBody = "var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;",
                    fn,
                    parts,
                    idx;

                if (isFunction(template)) {
                    return template;
                }

                functionBody += useWithBlock ? "with(" + paramName + "){" : "";

                functionBody += "$kendoOutput=";

                parts = template
                    .replace(escapedCurlyRegExp, "__CURLY__")
                    .replace(encodeRegExp, "#=$kendoHtmlEncode($1)#")
                    .replace(curlyRegExp, "}")
                    .replace(escapedSharpRegExp, "__SHARP__")
                    .split("#");

                for (idx = 0; idx < parts.length; idx ++) {
                    functionBody += compilePart(parts[idx], idx % 2 === 0);
                }

                functionBody += useWithBlock ? ";}" : ";";

                functionBody += "return $kendoOutput;";

                functionBody = functionBody.replace(sharpRegExp, "#");

                try {
                    // This function evaluation is required for legacy support of the Kendo Template syntax - non CSP compliant.
                    fn = new Function(argumentName, functionBody);
                    fn._slotCount = Math.floor(parts.length / 2);
                    return fn;
                } catch (e) {
                    if (kendo.debugTemplates) {
                        window.console.warn(("Invalid template:'" + template + "' Generated code:'" + functionBody + "'"));
                    } else {
                        throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
                    }
                }
            }
        };

    function pad(number, digits, end) {
        number = number + "";
        digits = digits || 2;
        end = digits - number.length;

        if (end) {
            return zeros[digits].substring(0, end) + number;
        }

        return number;
    }

        //JSON stringify
    (function() {
        var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap,
            indent,
            meta = {
                "\b": "\\b",
                "\t": "\\t",
                "\n": "\\n",
                "\f": "\\f",
                "\r": "\\r",
                "\"": '\\"',
                "\\": "\\\\"
            },
            rep,
            toString = {}.toString;


        if (typeof Date.prototype.toJSON !== FUNCTION) {

            Date.prototype.toJSON = function() {
                var that = this;

                return isFinite(that.valueOf()) ?
                    pad(that.getUTCFullYear(), 4) + "-" +
                    pad(that.getUTCMonth() + 1) + "-" +
                    pad(that.getUTCDate()) + "T" +
                    pad(that.getUTCHours()) + ":" +
                    pad(that.getUTCMinutes()) + ":" +
                    pad(that.getUTCSeconds()) + "Z" : null;
            };

            String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
                return this.valueOf();
            };
        }

        function quote(string) {
            escapable.lastIndex = 0;
            return escapable.test(string) ? "\"" + string.replace(escapable, function(a) {
                var c = meta[a];
                return typeof c === STRING ? c :
                    "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
            }) + "\"" : "\"" + string + "\"";
        }

        function str(key, holder) {
            var i,
                k,
                v,
                length,
                mind = gap,
                partial,
                value = holder[key],
                type;

            if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
                value = value.toJSON(key);
            }

            if (typeof rep === FUNCTION) {
                value = rep.call(holder, key, value);
            }

            type = typeof value;
            if (type === STRING) {
                return quote(value);
            } else if (type === NUMBER) {
                return isFinite(value) ? String(value) : NULL;
            } else if (type === BOOLEAN || type === NULL) {
                return String(value);
            } else if (type === OBJECT) {
                if (!value) {
                    return NULL;
                }
                gap += indent;
                partial = [];
                if (toString.apply(value) === "[object Array]") {
                    length = value.length;
                    for (i = 0; i < length; i++) {
                        partial[i] = str(i, value) || NULL;
                    }
                    v = partial.length === 0 ? "[]" : gap ?
                        "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
                        "[" + partial.join(",") + "]";
                    gap = mind;
                    return v;
                }
                if (rep && typeof rep === OBJECT) {
                    length = rep.length;
                    for (i = 0; i < length; i++) {
                        if (typeof rep[i] === STRING) {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                } else {
                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ": " : ":") + v);
                            }
                        }
                    }
                }

                v = partial.length === 0 ? "{}" : gap ?
                    "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
                    "{" + partial.join(",") + "}";
                gap = mind;
                return v;
            }
        }

        if (typeof JSON.stringify !== FUNCTION) {
            JSON.stringify = function(value, replacer, space) {
                var i;
                gap = "";
                indent = "";

                if (typeof space === NUMBER) {
                    for (i = 0; i < space; i += 1) {
                        indent += " ";
                    }

                } else if (typeof space === STRING) {
                    indent = space;
                }

                rep = replacer;
                if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
                    throw new Error("JSON.stringify");
                }

                return str("", { "": value });
            };
        }
    })();

    // Date and Number formatting
    (function() {
        var dateFormatRegExp = /EEEE|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g,
            standardFormatRegExp = /^(n|c|p|e)(\d*)$/i,
            literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
            commaRegExp = /\,/g,
            EMPTY = "",
            POINT = ".",
            COMMA = ",",
            SHARP = "#",
            ZERO = "0",
            PLACEHOLDER = "??",
            EN = "en-US",
            objectToString = {}.toString;

        //cultures
        kendo.cultures = kendo.cultures || {}; // Ensure cultures object exists
        kendo.cultures["en-US"] = {
            name: EN,
            numberFormat: {
                pattern: ["-n"],
                decimals: 2,
                ",": ",",
                ".": ".",
                groupSize: [3],
                percent: {
                    pattern: ["-n %", "n %"],
                    decimals: 2,
                    ",": ",",
                    ".": ".",
                    groupSize: [3],
                    symbol: "%"
                },
                currency: {
                    name: "US Dollar",
                    abbr: "USD",
                    pattern: ["($n)", "$n"],
                    decimals: 2,
                    ",": ",",
                    ".": ".",
                    groupSize: [3],
                    symbol: "$"
                }
            },
            calendars: {
                standard: {
                    days: {
                        names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                        namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                        namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
                    },
                    months: {
                        names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                        namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
                    },
                    AM: [ "AM", "am", "AM" ],
                    PM: [ "PM", "pm", "PM" ],
                    patterns: {
                        d: "M/d/yyyy",
                        D: "dddd, MMMM dd, yyyy",
                        F: "dddd, MMMM dd, yyyy h:mm:ss tt",
                        g: "M/d/yyyy h:mm tt",
                        G: "M/d/yyyy h:mm:ss tt",
                        m: "MMMM dd",
                        M: "MMMM dd",
                        s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
                        t: "h:mm tt",
                        T: "h:mm:ss tt",
                        u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
                        y: "MMMM, yyyy",
                        Y: "MMMM, yyyy"
                    },
                    "/": "/",
                    ":": ":",
                    firstDay: 0,
                    twoDigitYearMax: 2029
                }
            }
        };


         function findCulture(culture) {
            if (culture) {
                if (culture.numberFormat) {
                    return culture;
                }

                if (typeof culture === STRING) {
                    var cultures = kendo.cultures;
                    return cultures[culture] || cultures[culture.split("-")[0]] || null;
                }

                return null;
            }

            return null;
        }

        function getCulture(culture) {
            if (culture) {
                culture = findCulture(culture);
            }

            return culture || kendo.cultures.current;
        }

        kendo.culture = function(cultureName) {
            var cultures = kendo.cultures, culture;

            if (cultureName !== undefined$1) {
                culture = findCulture(cultureName) || cultures[EN];
                culture.calendar = culture.calendars.standard;
                cultures.current = culture;
            } else {
                return cultures.current;
            }
        };

        kendo.findCulture = findCulture;
        kendo.getCulture = getCulture;

        //set current culture to en-US.
        kendo.culture(EN);

        function formatDate(date, format, culture) {
            culture = getCulture(culture);

            var calendar = culture.calendars.standard,
                days = calendar.days,
                months = calendar.months;

            format = format.pattern || calendar.patterns[format] || format;

            return format.replace(dateFormatRegExp, function(match) {
                var minutes;
                var result;
                var sign;

                if (match === "d") {
                    result = date.getDate();
                } else if (match === "dd") {
                    result = pad(date.getDate());
                } else if (match === "ddd") {
                    result = days.namesAbbr[date.getDay()];
                } else if (match === "dddd" || match === "EEEE") {
                    result = days.names[date.getDay()];
                } else if (match === "M") {
                    result = date.getMonth() + 1;
                } else if (match === "MM") {
                    result = pad(date.getMonth() + 1);
                } else if (match === "MMM") {
                    result = months.namesAbbr[date.getMonth()];
                } else if (match === "MMMM") {
                    result = months.names[date.getMonth()];
                } else if (match === "yy") {
                    result = pad(date.getFullYear() % 100);
                } else if (match === "yyyy") {
                    result = pad(date.getFullYear(), 4);
                } else if (match === "h" ) {
                    result = date.getHours() % 12 || 12;
                } else if (match === "hh") {
                    result = pad(date.getHours() % 12 || 12);
                } else if (match === "H") {
                    result = date.getHours();
                } else if (match === "HH") {
                    result = pad(date.getHours());
                } else if (match === "m") {
                    result = date.getMinutes();
                } else if (match === "mm") {
                    result = pad(date.getMinutes());
                } else if (match === "s") {
                    result = date.getSeconds();
                } else if (match === "ss") {
                    result = pad(date.getSeconds());
                } else if (match === "f") {
                    result = math.floor(date.getMilliseconds() / 100);
                } else if (match === "ff") {
                    result = date.getMilliseconds();
                    if (result > 99) {
                        result = math.floor(result / 10);
                    }
                    result = pad(result);
                } else if (match === "fff") {
                    result = pad(date.getMilliseconds(), 3);
                } else if (match === "tt" || match === "aa") {
                    result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
                } else if (match === "zzz") {
                    minutes = date.getTimezoneOffset();
                    sign = minutes < 0;

                    result = math.abs(minutes / 60).toString().split(".")[0];
                    minutes = math.abs(minutes) - (result * 60);

                    result = (sign ? "+" : "-") + pad(result);
                    result += ":" + pad(minutes);
                } else if (match === "zz" || match === "z") {
                    result = date.getTimezoneOffset() / 60;
                    sign = result < 0;

                    result = math.abs(result).toString().split(".")[0];
                    result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
                }

                return result !== undefined$1 ? result : match.slice(1, match.length - 1);
            });
        }

        //number formatting
        function formatNumber(number, format, culture) {
            culture = getCulture(culture);

            var numberFormat = culture.numberFormat,
                decimal = numberFormat[POINT],
                precision = numberFormat.decimals,
                pattern = numberFormat.pattern[0],
                literals = [],
                symbol,
                isCurrency, isPercent,
                customPrecision,
                formatAndPrecision,
                negative = number < 0,
                integer,
                fraction,
                integerLength,
                fractionLength,
                replacement = EMPTY,
                value = EMPTY,
                idx,
                length,
                ch,
                hasGroup,
                hasNegativeFormat,
                decimalIndex,
                sharpIndex,
                zeroIndex,
                hasZero, hasSharp,
                percentIndex,
                currencyIndex,
                startZeroIndex,
                start = -1,
                end;

            //return empty string if no number
            if (number === undefined$1) {
                return EMPTY;
            }

            if (!isFinite(number)) {
                return number;
            }

            //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
            if (!format) {
                return culture.name.length ? number.toLocaleString() : number.toString();
            }

            formatAndPrecision = standardFormatRegExp.exec(format);

            // standard formatting
            if (formatAndPrecision) {
                format = formatAndPrecision[1].toLowerCase();

                isCurrency = format === "c";
                isPercent = format === "p";

                if (isCurrency || isPercent) {
                    //get specific number format information if format is currency or percent
                    numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
                    decimal = numberFormat[POINT];
                    precision = numberFormat.decimals;
                    symbol = numberFormat.symbol;
                    pattern = numberFormat.pattern[negative ? 0 : 1];
                }

                customPrecision = formatAndPrecision[2];

                if (customPrecision) {
                    precision = +customPrecision;
                }

                //return number in exponential format
                if (format === "e") {
                    var exp = customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.

                    return exp.replace(POINT, numberFormat[POINT]);
                }

                // multiply if format is percent
                if (isPercent) {
                    number *= 100;
                }

                number = round(number, precision);
                negative = number < 0;
                number = number.split(POINT);

                integer = number[0];
                fraction = number[1];

                //exclude "-" if number is negative.
                if (negative) {
                    integer = integer.substring(1);
                }

                value = groupInteger(integer, 0, integer.length, numberFormat);

                if (fraction) {
                    value += decimal + fraction;
                }

                if (format === "n" && !negative) {
                    return value;
                }

                number = EMPTY;

                for (idx = 0, length = pattern.length; idx < length; idx++) {
                    ch = pattern.charAt(idx);

                    if (ch === "n") {
                        number += value;
                    } else if (ch === "$" || ch === "%") {
                        number += symbol;
                    } else {
                        number += ch;
                    }
                }

                return number;
            }

            //custom formatting
            //
            //separate format by sections.

            if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
                format = format.replace(literalRegExp, function(match) {
                    var quoteChar = match.charAt(0).replace("\\", ""),
                        literal = match.slice(1).replace(quoteChar, "");

                    literals.push(literal);

                    return PLACEHOLDER;
                });
            }

            format = format.split(";");
            if (negative && format[1]) {
                //get negative format
                format = format[1];
                hasNegativeFormat = true;
            } else if (number === 0 && format[2]) {
                //format for zeros
                format = format[2];
                if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
                    //return format if it is string constant.
                    return format;
                }
            } else {
                format = format[0];
            }

            percentIndex = format.indexOf("%");
            currencyIndex = format.indexOf("$");

            isPercent = percentIndex != -1;
            isCurrency = currencyIndex != -1;

            //multiply number if the format has percent
            if (isPercent) {
                number *= 100;
            }

            if (isCurrency && format[currencyIndex - 1] === "\\") {
                format = format.split("\\").join("");
                isCurrency = false;
            }

            if (isCurrency || isPercent) {
                //get specific number format information if format is currency or percent
                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
                decimal = numberFormat[POINT];
                precision = numberFormat.decimals;
                symbol = numberFormat.symbol;
            }

            hasGroup = format.indexOf(COMMA) > -1;
            if (hasGroup) {
                format = format.replace(commaRegExp, EMPTY);
            }

            decimalIndex = format.indexOf(POINT);
            length = format.length;

            if (decimalIndex != -1) {
                fraction = number.toString().split("e");
                if (fraction[1]) {
                    fraction = round(number, Math.abs(fraction[1]));
                } else {
                    fraction = fraction[0];
                }
                fraction = fraction.split(POINT)[1] || EMPTY;
                zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
                sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
                hasZero = zeroIndex > -1;
                hasSharp = sharpIndex > -1;
                idx = fraction.length;

                if (!hasZero && !hasSharp) {
                    format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
                    length = format.length;
                    decimalIndex = -1;
                    idx = 0;
                }

                if (hasZero && zeroIndex > sharpIndex) {
                    idx = zeroIndex;
                } else if (sharpIndex > zeroIndex) {
                    if (hasSharp && idx > sharpIndex) {
                        var rounded = round(number, sharpIndex, negative);

                        while (rounded.charAt(rounded.length - 1) === ZERO && sharpIndex > 0 && sharpIndex > zeroIndex) {
                            sharpIndex--;

                            rounded = round(number, sharpIndex, negative);
                        }

                        idx = sharpIndex;
                    } else if (hasZero && idx < zeroIndex) {
                        idx = zeroIndex;
                    }
                }
            }

            number = round(number, idx, negative);

            sharpIndex = format.indexOf(SHARP);
            startZeroIndex = zeroIndex = format.indexOf(ZERO);

            //define the index of the first digit placeholder
            if (sharpIndex == -1 && zeroIndex != -1) {
                start = zeroIndex;
            } else if (sharpIndex != -1 && zeroIndex == -1) {
                start = sharpIndex;
            } else {
                start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
            }

            sharpIndex = format.lastIndexOf(SHARP);
            zeroIndex = format.lastIndexOf(ZERO);

            //define the index of the last digit placeholder
            if (sharpIndex == -1 && zeroIndex != -1) {
                end = zeroIndex;
            } else if (sharpIndex != -1 && zeroIndex == -1) {
                end = sharpIndex;
            } else {
                end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
            }

            if (start == length) {
                end = start;
            }

            if (start != -1) {
                value = number.toString().split(POINT);
                integer = value[0];
                fraction = value[1] || EMPTY;

                integerLength = integer.length;
                fractionLength = fraction.length;

                if (negative && (number * -1) >= 0) {
                    negative = false;
                }

                number = format.substring(0, start);

                if (negative && !hasNegativeFormat) {
                    number += "-";
                }

                for (idx = start; idx < length; idx++) {
                    ch = format.charAt(idx);

                    if (decimalIndex == -1) {
                        if (end - idx < integerLength) {
                            number += integer;
                            break;
                        }
                    } else {
                        if (zeroIndex != -1 && zeroIndex < idx) {
                            replacement = EMPTY;
                        }

                        if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
                            number += integer;
                            idx = decimalIndex;
                        }

                        if (decimalIndex === idx) {
                            number += (fraction ? decimal : EMPTY) + fraction;
                            idx += end - decimalIndex + 1;
                            continue;
                        }
                    }

                    if (ch === ZERO) {
                        number += ch;
                        replacement = ch;
                    } else if (ch === SHARP) {
                        number += replacement;
                    }
                }

                if (hasGroup) {
                    number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, (integerLength + start)), numberFormat);
                }

                if (end >= start) {
                    number += format.substring(end + 1);
                }

                //replace symbol placeholders
                if (isCurrency || isPercent) {
                    value = EMPTY;
                    for (idx = 0, length = number.length; idx < length; idx++) {
                        ch = number.charAt(idx);
                        value += (ch === "$" || ch === "%") ? symbol : ch;
                    }
                    number = value;
                }

                length = literals.length;

                if (length) {
                    for (idx = 0; idx < length; idx++) {
                        number = number.replace(PLACEHOLDER, literals[idx]);
                    }
                }
            }

            return number;
        }

        var groupInteger = function(number, start, end, numberFormat) {
            var decimalIndex = number.indexOf(numberFormat[POINT]);
            var groupSizes = numberFormat.groupSize.slice();
            var groupSize = groupSizes.shift();
            var integer, integerLength;
            var idx, parts, value;
            var newGroupSize;

            end = decimalIndex !== -1 ? decimalIndex : end + 1;

            integer = number.substring(start, end);
            integerLength = integer.length;

            if (integerLength >= groupSize) {
                idx = integerLength;
                parts = [];

                while (idx > -1) {
                    value = integer.substring(idx - groupSize, idx);
                    if (value) {
                        parts.push(value);
                    }
                    idx -= groupSize;
                    newGroupSize = groupSizes.shift();
                    groupSize = newGroupSize !== undefined$1 ? newGroupSize : groupSize;

                    if (groupSize === 0) {
                        if (idx > 0) {
                            parts.push(integer.substring(0, idx));
                        }
                        break;
                    }
                }

                integer = parts.reverse().join(numberFormat[COMMA]);
                number = number.substring(0, start) + integer + number.substring(end);
            }

            return number;
        };

        var round = function(value, precision, negative) {
            precision = precision || 0;

            value = value.toString().split('e');
            value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));

            if (negative) {
                value = -value;
            }

            value = value.toString().split('e');
            value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));

            return value.toFixed(Math.min(precision, 20));
        };

        var toString = function(value, fmt, culture) {
            if (fmt) {
                if (objectToString.call(value) === "[object Date]") {
                    return formatDate(value, fmt, culture);
                } else if (typeof value === NUMBER) {
                    return formatNumber(value, fmt, culture);
                }
            }

            return value !== undefined$1 ? value : "";
        };

        kendo.format = function(fmt) {
            var values = arguments;

            return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {
                var value = values[parseInt(index, 10) + 1];

                return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
            });
        };

        kendo._extractFormat = function(format) {
            if (format.slice(0,3) === "{0:") {
                format = format.slice(3, format.length - 1);
            }

            return format;
        };

        kendo._activeElement = function() {
            try {
                return document.activeElement;
            } catch (e) {
                return document.documentElement.activeElement;
            }
        };

        kendo._round = round;
        kendo._outerWidth = function(element, includeMargin) { return $(element).outerWidth(includeMargin || false) || 0; };
        kendo._outerHeight = function(element, includeMargin) { return $(element).outerHeight(includeMargin || false) || 0; };
        kendo.toString = toString;
    })();


    (function() {
        var nonBreakingSpaceRegExp = /\u00A0/g,
            spaceRegExp = /\s/g,
            exponentRegExp = /[eE][\-+]?[0-9]+/,
            shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
            longTimeZoneRegExp = /[+|\-]\d{1,2}:?\d{2}/,
            dateRegExp = /^\/Date\((.*?)\)\/$/,
            offsetRegExp = /[+-]\d*/,
            FORMATS_SEQUENCE = [ [], [ "G", "g", "F" ], [ "D", "d", "y", "m", "T", "t" ] ],
            STANDARD_FORMATS = [
                [
                "yyyy-MM-ddTHH:mm:ss.fffffffzzz",
                "yyyy-MM-ddTHH:mm:ss.fffffff",
                "yyyy-MM-ddTHH:mm:ss.fffzzz",
                "yyyy-MM-ddTHH:mm:ss.fff",
                "ddd MMM dd yyyy HH:mm:ss",
                "yyyy-MM-ddTHH:mm:sszzz",
                "yyyy-MM-ddTHH:mmzzz",
                "yyyy-MM-ddTHH:mmzz",
                "yyyy-MM-ddTHH:mm:ss",
                "yyyy-MM-dd HH:mm:ss",
                "yyyy/MM/dd HH:mm:ss"
                ], [
                "yyyy-MM-ddTHH:mm",
                "yyyy-MM-dd HH:mm",
                "yyyy/MM/dd HH:mm"
                ], [
                "yyyy/MM/dd",
                "yyyy-MM-dd",
                "HH:mm:ss",
                "HH:mm"
                ]
            ],
            numberRegExp = {
                2: /^\d{1,2}/,
                3: /^\d{1,3}/,
                4: /^\d{4}/
            },
            objectToString = {}.toString;

        function outOfRange(value, start, end) {
            return !(value >= start && value <= end);
        }

        function designatorPredicate(designator) {
            return designator.charAt(0);
        }

        function mapDesignators(designators) {
            return $.map(designators, designatorPredicate);
        }

        //if date's day is different than the typed one - adjust
        function adjustDST(date, hours) {
            if (!hours && date.getHours() === 23) {
                date.setHours(date.getHours() + 2);
            }
        }

        function lowerArray(data) {
            var idx = 0,
                length = data.length,
                array = [];

            for (; idx < length; idx++) {
                array[idx] = (data[idx] + "").toLowerCase();
            }

            return array;
        }

        function lowerLocalInfo(localInfo) {
            var newLocalInfo = {}, property;

            for (property in localInfo) {
                newLocalInfo[property] = lowerArray(localInfo[property]);
            }

            return newLocalInfo;
        }

        function unpadZero(value) {
            return value.replace(/^0*/, '');
        }

        function parseExact(value, format, culture, strict, shouldUnpadZeros) {
            if (!value) {
                return null;
            }

            var lookAhead = function(match) {
                    var i = 0;
                    while (format[idx] === match) {
                        i++;
                        idx++;
                    }
                    if (i > 0) {
                        idx -= 1;
                    }
                    return i;
                },
                getNumber = function(size) {
                    var rg, match, part = "";
                    if (size === 2) {
                        for (var i = 0; i <= size; i++) {
                            part += value[valueIdx + i] || "";
                        }
                    }

                    // If the value comes in the form of 021, 022, 023 we must trim the leading zero otherwise the result will be 02 in all three cases instead of 21/22/23.
                    if (shouldUnpadZeros && part.length === 3 && Number.isInteger(Number(part)) && Number(part) > 0) {
                        part = unpadZero(part);
                    } else {
                        part = value.substr(valueIdx, size);
                    }

                    rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}');
                    match = part.match(rg);

                    if (match) {
                        match = match[0];
                        valueIdx += match.length;
                        return parseInt(match, 10);
                    }
                    return null;
                },
                getIndexByName = function(names, lower) {
                    var i = 0,
                        length = names.length,
                        name, nameLength,
                        matchLength = 0,
                        matchIdx = 0,
                        subValue;

                    for (; i < length; i++) {
                        name = names[i];
                        nameLength = name.length;
                        subValue = value.substr(valueIdx, nameLength);

                        if (lower) {
                            subValue = subValue.toLowerCase();
                        }

                        if (subValue == name && nameLength > matchLength) {
                            matchLength = nameLength;
                            matchIdx = i;
                        }
                    }

                    if (matchLength) {
                        valueIdx += matchLength;
                        return matchIdx + 1;
                    }

                    return null;
                },
                checkLiteral = function() {
                    var result = false;
                    if (value.charAt(valueIdx) === format[idx]) {
                        valueIdx++;
                        result = true;
                    }
                    return result;
                },
                calendar = culture.calendars.standard,
                year = null,
                month = null,
                day = null,
                hours = null,
                minutes = null,
                seconds = null,
                milliseconds = null,
                idx = 0,
                valueIdx = 0,
                literal = false,
                date = new Date(),
                twoDigitYearMax = calendar.twoDigitYearMax || 2029,
                defaultYear = date.getFullYear(),
                ch, count, length, pattern,
                pmHour, UTC, matches,
                amDesignators, pmDesignators,
                hoursOffset, minutesOffset,
                hasTime, match;

            if (!format) {
                format = "d"; //shord date format
            }

            //if format is part of the patterns get real format
            pattern = calendar.patterns[format];
            if (pattern) {
                format = pattern;
            }

            format = format.split("");
            length = format.length;

            for (; idx < length; idx++) {
                ch = format[idx];

                if (literal) {
                    if (ch === "'") {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    if (ch === "d") {
                        count = lookAhead("d");
                        if (!calendar._lowerDays) {
                            calendar._lowerDays = lowerLocalInfo(calendar.days);
                        }

                        if (day !== null && count > 2) {
                            continue;
                        }

                        day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);

                        if (day === null || outOfRange(day, 1, 31)) {
                            return null;
                        }
                    } else if (ch === "M") {
                        count = lookAhead("M");
                        if (!calendar._lowerMonths) {
                            calendar._lowerMonths = lowerLocalInfo(calendar.months);
                        }
                        month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);

                        if (month === null || outOfRange(month, 1, 12)) {
                            return null;
                        }
                        month -= 1; //because month is zero based
                    } else if (ch === "y") {
                        count = lookAhead("y");
                        year = getNumber(count);

                        if (year === null) {
                            return null;
                        }

                        if (count == 2) {
                            if (typeof twoDigitYearMax === "string") {
                                twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
                            }

                            year = (defaultYear - defaultYear % 100) + year;
                            if (year > twoDigitYearMax) {
                                year -= 100;
                            }
                        }
                    } else if (ch === "h" ) {
                        lookAhead("h");
                        hours = getNumber(2);
                        if (hours == 12) {
                            hours = 0;
                        }
                        if (hours === null || outOfRange(hours, 0, 11)) {
                            return null;
                        }
                    } else if (ch === "H") {
                        lookAhead("H");
                        hours = getNumber(2);
                        if (hours === null || outOfRange(hours, 0, 23)) {
                            return null;
                        }
                    } else if (ch === "m") {
                        lookAhead("m");
                        minutes = getNumber(2);
                        if (minutes === null || outOfRange(minutes, 0, 59)) {
                            return null;
                        }
                    } else if (ch === "s") {
                        lookAhead("s");
                        seconds = getNumber(2);
                        if (seconds === null || outOfRange(seconds, 0, 59)) {
                            return null;
                        }
                    } else if (ch === "f") {
                        count = lookAhead("f");

                        match = value.substr(valueIdx, count).match(numberRegExp[3]);
                        milliseconds = getNumber(count); //move value index position

                        if (milliseconds !== null) {
                            milliseconds = parseFloat("0." + match[0], 10);
                            milliseconds = kendo._round(milliseconds, 3);
                            milliseconds *= 1000;
                        }

                        if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
                            return null;
                        }

                    } else if (ch === "t") {
                        count = lookAhead("t");
                        amDesignators = calendar.AM;
                        pmDesignators = calendar.PM;

                        if (count === 1) {
                            amDesignators = mapDesignators(amDesignators);
                            pmDesignators = mapDesignators(pmDesignators);
                        }

                        pmHour = getIndexByName(pmDesignators);
                        if (!pmHour && !getIndexByName(amDesignators)) {
                            return null;
                        }
                    }
                    else if (ch === "z") {
                        UTC = true;
                        count = lookAhead("z");

                        if (value.substr(valueIdx, 1) === "Z") {
                            checkLiteral();
                            continue;
                        }

                        matches = value.substr(valueIdx, 6)
                                       .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

                        if (!matches) {
                            return null;
                        }

                        matches = matches[0].split(":");

                        hoursOffset = matches[0];
                        minutesOffset = matches[1];

                        if (!minutesOffset && hoursOffset.length > 3) { //(+|-)[hh][mm] format is used
                            valueIdx = hoursOffset.length - 2;
                            minutesOffset = hoursOffset.substring(valueIdx);
                            hoursOffset = hoursOffset.substring(0, valueIdx);
                        }

                        hoursOffset = parseInt(hoursOffset, 10);
                        if (outOfRange(hoursOffset, -12, 13)) {
                            return null;
                        }

                        if (count > 2) {
                            minutesOffset = matches[0][0] + minutesOffset;
                            minutesOffset = parseInt(minutesOffset, 10);
                            if (isNaN(minutesOffset) || outOfRange(minutesOffset, -59, 59)) {
                                return null;
                            }
                        }
                    } else if (ch === "'") {
                        literal = true;
                        checkLiteral();
                    } else if (!checkLiteral()) {
                        return null;
                    }
                }
            }

            // if more characters follow, assume wrong format
            // https://github.com/telerik/kendo-ui-core/issues/3476
            if (strict && !/^\s*$/.test(value.substr(valueIdx))) {
                return null;
            }

            hasTime = hours !== null || minutes !== null || seconds || null;

            if (year === null && month === null && day === null && hasTime) {
                year = defaultYear;
                month = date.getMonth();
                day = date.getDate();
            } else {
                if (year === null) {
                    year = defaultYear;
                }

                if (day === null) {
                    day = 1;
                }
            }

            if (pmHour && hours < 12) {
                hours += 12;
            }

            if (UTC) {
                if (hoursOffset) {
                    hours += -hoursOffset;
                }

                if (minutesOffset) {
                    minutes += -minutesOffset;
                }

                value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
            } else {
                value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
                adjustDST(value, hours);
            }

            if (year < 100) {
                value.setFullYear(year);
            }

            if (value.getDate() !== day && UTC === undefined$1) {
                return null;
            }

            return value;
        }

        function parseMicrosoftFormatOffset(offset) {
            var sign = offset.substr(0, 1) === "-" ? -1 : 1;

            offset = offset.substring(1);
            offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);

            return sign * offset;
        }

        function getDefaultFormats(culture) {
            var length = math.max(FORMATS_SEQUENCE.length, STANDARD_FORMATS.length);
            var calendar = culture.calendar || culture.calendars.standard;
            var patterns = calendar.patterns;
            var cultureFormats, formatIdx, idx;
            var formats = [];

            for (idx = 0; idx < length; idx++) {
                cultureFormats = FORMATS_SEQUENCE[idx];
                for (formatIdx = 0; formatIdx < cultureFormats.length; formatIdx++) {
                    formats.push(patterns[cultureFormats[formatIdx]]);
                }
                formats = formats.concat(STANDARD_FORMATS[idx]);
            }

            return formats;
        }

        function internalParseDate(value, formats, culture, strict, shouldUnpadZeros) {
            if (objectToString.call(value) === "[object Date]") {
                return value;
            }

            var idx = 0;
            var date = null;
            var length;
            var tzoffset;

            if (value && value.indexOf("/D") === 0) {
                date = dateRegExp.exec(value);
                if (date) {
                    date = date[1];
                    tzoffset = offsetRegExp.exec(date.substring(1));

                    date = new Date(parseInt(date, 10));

                    if (tzoffset) {
                        tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);
                        date = kendo.timezone.apply(date, 0);
                        date = kendo.timezone.convert(date, 0, -1 * tzoffset);
                    }

                    return date;
                }
            }

            culture = kendo.getCulture(culture);

            if (!formats) {
                formats = getDefaultFormats(culture);
            }

            formats = isArray(formats) ? formats : [formats];
            length = formats.length;

            for (; idx < length; idx++) {
                date = parseExact(value, formats[idx], culture, strict, shouldUnpadZeros);
                if (date) {
                    return date;
                }
            }

            return date;
        }

        kendo.parseDate = function(value, formats, culture, shouldUnpadZeros) {
            return internalParseDate(value, formats, culture, false, shouldUnpadZeros);
        };

        kendo.parseExactDate = function(value, formats, culture) {
            return internalParseDate(value, formats, culture, true);
        };

        kendo.parseInt = function(value, culture) {
            var result = kendo.parseFloat(value, culture);
            if (result) {
                result = result | 0;
            }
            return result;
        };

        kendo.parseFloat = function(value, culture, format) {
            if (!value && value !== 0) {
               return null;
            }

            if (typeof value === NUMBER) {
               return value;
            }

            value = value.toString();
            culture = kendo.getCulture(culture);

            var number = culture.numberFormat,
                percent = number.percent,
                currency = number.currency,
                symbol = currency.symbol,
                percentSymbol = percent.symbol,
                negative = value.indexOf("-"),
                parts, isPercent;

            //handle exponential number
            if (exponentRegExp.test(value)) {
                value = parseFloat(value.replace(number["."], "."));
                if (isNaN(value)) {
                    value = null;
                }
                return value;
            }

            if (negative > 0) {
                return null;
            } else {
                negative = negative > -1;
            }

            if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
                number = currency;
                parts = number.pattern[0].replace("$", symbol).split("n");
                if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
                    value = value.replace(parts[0], "").replace(parts[1], "");
                    negative = true;
                }
            } else if (value.indexOf(percentSymbol) > -1) {
                isPercent = true;
                number = percent;
                symbol = percentSymbol;
            }

            value = value.replace("-", "")
                         .replace(symbol, "")
                         .replace(nonBreakingSpaceRegExp, " ")
                         .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
                         .replace(spaceRegExp, "")
                         .replace(number["."], ".");

            value = parseFloat(value);

            if (isNaN(value)) {
                value = null;
            } else if (negative) {
                value *= -1;
            }

            if (value && isPercent) {
                value /= 100;
            }

            return value;
        };
    })();

        function getShadows(element) {
            var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
                radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],
                blur = math.max((+radius[3]), +(radius[4] || 0));

            return {
                left: (-radius[1]) + blur,
                right: (+radius[1]) + blur,
                bottom: (+radius[2]) + blur
            };
        }

        function wrap(element, autosize, resize, shouldCorrectWidth) {
            if ( shouldCorrectWidth === void 0 ) shouldCorrectWidth = true;

            var percentage,
                outerWidth = kendo._outerWidth,
                outerHeight = kendo._outerHeight,
                parent = element.parent(),
                windowOuterWidth = outerWidth(window);

            parent.parent().removeClass("k-animation-container-sm");

            if (!parent.hasClass("k-child-animation-container")) {
                var width = element[0].style.width,
                    height = element[0].style.height,
                    percentWidth = percentRegExp.test(width),
                    percentHeight = percentRegExp.test(height),
                    forceWidth = element.hasClass("k-tooltip") || element.is(".k-menu-horizontal.k-context-menu");

                percentage = percentWidth || percentHeight;

                if (!percentWidth && (!autosize || (autosize && width) || forceWidth)) { width = autosize ? outerWidth(element) + 1 : outerWidth(element); }
                if (!percentHeight && (!autosize || (autosize && height)) || element.is(".k-menu-horizontal.k-context-menu")) { height = outerHeight(element); }

                element.wrap(
                    $("<div/>")
                    .addClass("k-child-animation-container")
                    .css({
                        width: width,
                        height: height
                    }));
                parent = element.parent();

                parent.wrap(
                             $("<div/>")
                             .addClass("k-animation-container")
                             .attr("role", "region")
                            );

                if (percentage) {
                    element.css({
                        width: "100%",
                        height: "100%"
                    });
                }
            } else {
                wrapResize(element, autosize, shouldCorrectWidth);
            }

            parent = parent.parent();

            if (windowOuterWidth < outerWidth(parent)) {
                parent.addClass("k-animation-container-sm");
                resize = true;
            }

            if (resize) {
                wrapResize(element, autosize, shouldCorrectWidth);
            }

            return parent;
        }

        function wrapResize(element, autosize, shouldCorrectWidth) {
            var percentage,
                outerWidth = kendo._outerWidth,
                outerHeight = kendo._outerHeight,
                parent = element.parent(),
                wrapper = element.closest(".k-animation-container"),
                visible = element.is(":visible"),
                wrapperStyle = parent[0].style,
                elementHeight = element[0].style.height;

            if (wrapper.is(":hidden")) {
                wrapper.css({
                    display: "",
                    position: ""
                });
            }

            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

            if (!percentage) {
                if (!visible) {
                    element.add(parent).show();
                }
                if (shouldCorrectWidth) {
                    parent.css("width", ""); // Needed to get correct width dimensions
                }
                parent.css({
                    width: autosize ? outerWidth(element) + 1 : outerWidth(element),
                });

                if (elementHeight === "auto") {
                    element.css({ height: outerHeight(parent) });
                } else {
                    parent.css({
                        height: outerHeight(element)
                    });
                }

                if (!visible) {
                    element.hide();
                }
            }
        }

        function deepExtend(destination) {
            var arguments$1 = arguments;

            var i = 1,
                length = arguments.length;

            for (i = 1; i < length; i++) {
                deepExtendOne(destination, arguments$1[i]);
            }

            return destination;
        }

        function deepExtendOne(destination, source) {
            var ObservableArray = kendo.data.ObservableArray,
                LazyObservableArray = kendo.data.LazyObservableArray,
                DataSource = kendo.data.DataSource,
                HierarchicalDataSource = kendo.data.HierarchicalDataSource,
                property,
                propValue,
                propType,
                propInit,
                destProp;

            for (property in source) {
                propValue = source[property];
                propType = typeof propValue;

                if (propType === OBJECT && propValue !== null) {
                    propInit = propValue.constructor;
                } else {
                    propInit = null;
                }

                if (propInit &&
                    propInit !== Array && propInit !== ObservableArray && propInit !== LazyObservableArray &&
                    propInit !== DataSource && propInit !== HierarchicalDataSource && propInit !== RegExp &&
                    (!kendo.isFunction(window.ArrayBuffer) || propInit !== ArrayBuffer) && !(propValue instanceof HTMLElement)) {

                    if (propValue instanceof Date) {
                        destination[property] = new Date(propValue.getTime());
                    } else if (isFunction(propValue.clone)) {
                        destination[property] = propValue.clone();
                    } else {
                        destProp = destination[property];
                        if (typeof (destProp) === OBJECT) {
                            destination[property] = destProp || {};
                        } else {
                            destination[property] = {};
                        }
                        deepExtendOne(destination[property], propValue);
                    }
                } else if (propType !== UNDEFINED) {
                    destination[property] = propValue;
                }
            }

            return destination;
        }

        function testRx(agent, rxs, dflt) {
            for (var rx in rxs) {
                if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
                    return rx;
                }
            }
            return dflt !== undefined$1 ? dflt : agent;
        }

        function toHyphens(str) {
            return str.replace(/([a-z][A-Z])/g, function(g) {
                return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
            });
        }

        function toCamelCase(str) {
            return str.replace(/\-(\w)/g, function(strMatch, g1) {
                return g1.toUpperCase();
            });
        }

        function getComputedStyles(element, properties) {
            var styles = {}, computedStyle;

            if (document.defaultView && document.defaultView.getComputedStyle) {
                computedStyle = document.defaultView.getComputedStyle(element, "");

                if (properties) {
                    $.each(properties, function(idx, value) {
                        styles[value] = computedStyle.getPropertyValue(value);
                    });
                }
            } else {
                computedStyle = element.currentStyle;

                if (properties) {
                    $.each(properties, function(idx, value) {
                        styles[value] = computedStyle[toCamelCase(value)];
                    });
                }
            }

            if (!kendo.size(styles)) {
                styles = computedStyle;
            }

            return styles;
        }

        function isScrollable(element) {
            if (element.dataset[kendo.ns + "scrollable"] === "false") {
                return false;
            }

            if (element && element.className && typeof(element.className) === "string" && element.className.indexOf("k-auto-scrollable") > -1) {
                return true;
            }

            var overflow = getComputedStyles(element, ["overflow"]).overflow;
            return overflow.indexOf("auto") > -1 || overflow.indexOf("scroll") > -1;
        }

        function scrollLeft(element, value) {
            var webkit = support.browser.webkit;
            var mozila = support.browser.mozilla;
            var browserVersion = support.browser.version;
            var el, isRtl;

            if (element instanceof $ && value !== undefined$1) {
                element.each(function(i, e) {
                    scrollLeft(e, value);
                });

                return;
            } else {
                el = element instanceof $ ? element[0] : element;
            }

            if (!el) {
                return;
            }

            isRtl = support.isRtl(element);

            // After updating browser detection,
            // Test in which if should the Safari browsers go
            if (value !== undefined$1) {
                if (isRtl && webkit && (browserVersion < 85 || support.browser.safari)) {
                    el.scrollLeft = el.scrollWidth - el.clientWidth - value;
                } else if (isRtl && (mozila || webkit) && value > 0) {
                    el.scrollLeft = -value;
                } else {
                    el.scrollLeft = value;
                }
            } else {
                if (isRtl && webkit && (browserVersion < 85 || support.browser.safari)) {
                    return el.scrollWidth - el.clientWidth - el.scrollLeft;
                } else {
                    return Math.abs(el.scrollLeft);
                }
            }
        }

        (function() {
            support._scrollbar = undefined$1;

            support.scrollbar = function(refresh) {
                if (!isNaN(support._scrollbar) && !refresh) {
                    return support._scrollbar;
                } else {
                    var div = document.createElement("div"),
                        result;

                    div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
                    div.innerHTML = "&nbsp;";
                    document.body.appendChild(div);

                    support._scrollbar = result = div.offsetWidth - div.scrollWidth;

                    document.body.removeChild(div);

                    return result;
                }
            };

            support.isRtl = function(element) {
                return $(element).closest(".k-rtl").length > 0;
            };

            var table = document.createElement("table");

            // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
            try {
                table.innerHTML = "<tr><td></td></tr>";

                support.tbodyInnerHtml = true;
            } catch (e) {
                support.tbodyInnerHtml = false;
            }

            support.touch = "ontouchstart" in window;

            var docStyle = document.documentElement.style;
            var transitions = support.transitions = false,
                transforms = support.transforms = false,
                elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];

            support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in docStyle || "msPerspective" in docStyle;
            support.cssFlexbox = ("flexWrap" in docStyle) || ("WebkitFlexWrap" in docStyle) || ("msFlexWrap" in docStyle);

            each([ "Moz", "webkit", "O", "ms" ], function() {
                var prefix = this.toString(),
                    hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

                if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
                    var lowPrefix = prefix.toLowerCase();

                    transforms = {
                        css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
                        prefix: prefix,
                        event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
                    };

                    if (hasTransitions) {
                        transitions = transforms;
                        transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
                    }

                    return false;
                }
            });

            table = null;

            support.transforms = transforms;
            support.transitions = transitions;

            support.devicePixelRatio = window.devicePixelRatio === undefined$1 ? 1 : window.devicePixelRatio;

            try {
                support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
                support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
            } catch (e$1) {
                //window.outerWidth throws error when in IE showModalDialog.
                support.screenWidth = window.screen.availWidth;
                support.screenHeight = window.screen.availHeight;
            }

            support.detectOS = function(ua) {
                var os = false, minorVersion, match = [],
                    notAndroidPhone = !/mobile safari/i.test(ua),
                    agentRxs = {
                        wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
                        fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
                        android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.?(\d+(\.\d+)?)?/,
                        iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
                        ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
                        meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
                        webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
                        blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
                        playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
                        windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
                        tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
                        sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
                        ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
                    },
                    osRxs = {
                        ios: /^i(phone|pad|pod)$/i,
                        android: /^android|fire$/i,
                        blackberry: /^blackberry|playbook/i,
                        windows: /windows/,
                        wp: /wp/,
                        flat: /sailfish|ffos|tizen/i,
                        meego: /meego/
                    },
                    formFactorRxs = {
                        tablet: /playbook|ipad|fire/i
                    },
                    browserRxs = {
                        omini: /Opera\sMini/i,
                        omobile: /Opera\sMobi/i,
                        firefox: /Firefox|Fennec/i,
                        mobilesafari: /version\/.*safari/i,
                        ie: /MSIE|Windows\sPhone/i,
                        chrome: /chrome|crios/i,
                        webkit: /webkit/i
                    };

                for (var agent in agentRxs) {
                    if (agentRxs.hasOwnProperty(agent)) {
                        match = ua.match(agentRxs[agent]);
                        if (match) {
                            if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

                            os = {};
                            os.device = agent;
                            os.tablet = testRx(agent, formFactorRxs, false);
                            os.browser = testRx(ua, browserRxs, "default");
                            os.name = testRx(agent, osRxs);
                            os[os.name] = true;
                            os.majorVersion = match[2];
                            os.minorVersion = (match[3] || "0").replace("_", ".");
                            minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
                            os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
                            os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
                            os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.

                            if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
                                os.tablet = agent;
                            }

                            break;
                        }
                    }
                }
                return os;
            };

            var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);

            support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;

            support.hasNativeScrolling = false;

            if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
                support.hasNativeScrolling = mobileOS;
            }

            support.delayedClick = function() {

                // only the mobile devices with touch events do this.
                if (support.touch) {
                    // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),
                    // delay their click events.
                    if (mobileOS.ios) {
                        return true;
                    }

                    if (mobileOS.android) {

                        if (!support.browser.chrome) { // older webkits and webviews delay the click
                            return true;
                        }

                        // from here on, we deal with Chrome on Android.
                        if (support.browser.version < 32) {
                            return false;
                        }

                        // Chrome 32+ does conditional fast clicks if the view port is not user scalable.
                        return !($("meta[name=viewport]").attr("content") || "").match(/user-scalable=no/i);
                    }
                }

                return false;
            };

            support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);

            support.detectBrowser = function(ua) {
                var browser = false,
                    match = [],
                    chromiumEdgeMatch = [],
                    browserRxs = {
                        edge: /(edge)[ \/]([\w.]+)/i,
                        webkit: /(chrome|crios)[ \/]([\w.]+)/i,
                        safari: /(webkit)[ \/]([\w.]+)/i,
                        opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
                        msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
                        mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
                    };

                for (var agent in browserRxs) {
                    if (browserRxs.hasOwnProperty(agent)) {
                        match = ua.match(browserRxs[agent]);
                        if (match) {
                            browser = {};
                            browser[agent] = true;
                            browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
                            browser.version = parseInt(document.documentMode || match[2], 10);

                            if (browser.chrome) {
                                chromiumEdgeMatch = ua.match(/(edg)[ \/]([\w.]+)/i);

                                if (chromiumEdgeMatch) {
                                    browser.chromiumEdge = true;
                                }
                            }

                            break;
                        }
                    }
                }

                return browser;
            };

            support.browser = support.detectBrowser(navigator.userAgent);

            if (!mobileOS && support.touch && support.browser.safari) {
                mobileOS = support.mobileOS = {
                    ios: true,
                    tablet: "tablet",
                    device: "ipad",
                    majorVersion: 13
                };
            }

            support.detectClipboardAccess = function() {
                var commands = {
                    copy: document.queryCommandSupported ? document.queryCommandSupported("copy") : false,
                    cut: document.queryCommandSupported ? document.queryCommandSupported("cut") : false,
                    paste: document.queryCommandSupported ? document.queryCommandSupported("paste") : false
                };

                if (support.browser.chrome) {
                    //not using queryCommandSupported due to chromium issues 476508 and 542948
                    commands.paste = false;
                    if (support.browser.version >= 43) {
                        commands.copy = true;
                        commands.cut = true;
                    }
                }

                return commands;
            };

            support.clipboard = support.detectClipboardAccess();

            support.zoomLevel = function() {
                try {
                    var browser = support.browser;
                    var ie11WidthCorrection = 0;
                    var docEl = document.documentElement;

                    if (browser.msie && browser.version == 11 && docEl.scrollHeight > docEl.clientHeight && !support.touch) {
                        ie11WidthCorrection = support.scrollbar();
                    }

                    return support.touch ? (docEl.clientWidth / window.innerWidth) :
                           browser.msie && browser.version >= 10 ? (((top || window).document.documentElement.offsetWidth + ie11WidthCorrection) / (top || window).innerWidth) : 1;
                } catch (e) {
                    return 1;
                }
            };

            (function(browser) {
                // add browser-specific CSS class
                var cssClass = "",
                    docElement = $(document.documentElement),
                    majorVersion = parseInt(browser.version, 10);

                if (browser.msie) {
                    cssClass = "ie";
                } else if (browser.mozilla) {
                    cssClass = "ff";
                } else if (browser.safari) {
                    cssClass = "safari";
                } else if (browser.webkit) {
                    cssClass = "webkit";
                } else if (browser.opera) {
                    cssClass = "opera";
                } else if (browser.edge) {
                    cssClass = "edge";
                }

                if (cssClass) {
                    cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
                }
                if (support.mobileOS) {
                    cssClass += " k-mobile";
                }

                if (!support.cssFlexbox) {
                    cssClass += " k-no-flexbox";
                }

                docElement.addClass(cssClass);
            })(support.browser);

            support.eventCapture = document.documentElement.addEventListener;

            var input = document.createElement("input");

            support.placeholder = "placeholder" in input;
            support.propertyChangeEvent = "onpropertychange" in input;

            support.input = (function() {
                var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
                var length = types.length;
                var value = "test";
                var result = {};
                var idx = 0;
                var type;

                for (;idx < length; idx++) {
                    type = types[idx];
                    input.setAttribute("type", type);
                    input.value = value;

                    result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
                }

                return result;
            })();

            input.style.cssText = "float:left;";

            support.cssFloat = !!input.style.cssFloat;

            input = null;

            support.stableSort = (function() {
                // Chrome sort is not stable for more than *10* items
                // IE9+ sort is not stable for than *512* items
                var threshold = 513;

                var sorted = [{
                    index: 0,
                    field: "b"
                }];

                for (var i = 1; i < threshold; i++) {
                    sorted.push({
                        index: i,
                        field: "a"
                    });
                }

                sorted.sort(function(a, b) {
                    return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
                });

                return sorted[0].index === 1;
            })();

            support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
                                      elementProto.msMatchesSelector || elementProto.oMatchesSelector ||
                                      elementProto.matchesSelector || elementProto.matches ||
              function( selector ) {
                  var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),
                      i = nodeList.length;

                  while (i--) {
                      if (nodeList[i] == this) {
                          return true;
                      }
                  }

                  return false;
              };

            support.matchMedia = "matchMedia" in window;

            support.pushState = window.history && window.history.pushState;

            support.hashChange = "onhashchange" in window;

            support.customElements = "registerElement" in window.document;

            var chrome = support.browser.chrome,
                mobileChrome = support.browser.crios,
                mozilla = support.browser.mozilla,
                safari = support.browser.safari;
            support.msPointers = !chrome && window.MSPointerEvent;
            support.pointers = !chrome && !mobileChrome && !mozilla && !safari && window.PointerEvent;
            support.kineticScrollNeeded = mobileOS && (mobileOS.device !== "ipad" || mobileOS.majorVersion < 13) && (support.touch || support.msPointers || support.pointers);
        })();


        function size(obj) {
            var result = 0, key;
            for (key in obj) {
                if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
                    result++;
                }
            }

            return result;
        }

        function getOffset(element, type, positioned) {
            if (!type) {
                type = "offset";
            }

            var offset = element[type]();
            // clone ClientRect object to JS object (jQuery3)
            var result = {
                top: offset.top,
                right: offset.right,
                bottom: offset.bottom,
                left: offset.left
            };

            // IE10 touch zoom is living in a separate viewport
            if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
                var sign = support.isRtl(element) ? 1 : -1;

                result.top -= (window.pageYOffset - (document.documentElement.scrollTop));
                result.left -= (window.pageXOffset + (sign * document.documentElement.scrollLeft));
            }

            return result;
        }

        var directions = {
            left: { reverse: "right" },
            right: { reverse: "left" },
            down: { reverse: "up" },
            up: { reverse: "down" },
            top: { reverse: "bottom" },
            bottom: { reverse: "top" },
            "in": { reverse: "out" },
            out: { reverse: "in" }
        };

        function parseEffects(input) {
            var effects = {};

            each((typeof input === "string" ? input.split(" ") : input), function(idx) {
                effects[idx] = this;
            });

            return effects;
        }

        function fx(element) {
            return new kendo.effects.Element(element);
        }

        var effects = {};

        $.extend(effects, {
            enabled: true,
            Element: function(element) {
                this.element = $(element);
            },

            promise: function(element, options) {
                if (!element.is(":visible")) {
                    element.css({ display: element.data("olddisplay") || "block" }).css("display");
                }

                if (options.hide) {
                    element.data("olddisplay", element.css("display")).hide();
                }

                if (options.init) {
                    options.init();
                }

                if (options.completeCallback) {
                    options.completeCallback(element); // call the external complete callback with the element
                }

                element.dequeue();
            },

            disable: function() {
                this.enabled = false;
                this.promise = this.promiseShim;
            },

            enable: function() {
                this.enabled = true;
                this.promise = this.animatedPromise;
            }
        });

        effects.promiseShim = effects.promise;

        function prepareAnimationOptions(options, duration, reverse, complete) {
            if (typeof options === STRING) {
                // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

                // only callback is provided e.g. animate(element, options, function() {});
                if (isFunction(duration)) {
                    complete = duration;
                    duration = 400;
                    reverse = false;
                }

                if (isFunction(reverse)) {
                    complete = reverse;
                    reverse = false;
                }

                if (typeof duration === BOOLEAN) {
                    reverse = duration;
                    duration = 400;
                }

                options = {
                    effects: options,
                    duration: duration,
                    reverse: reverse,
                    complete: complete
                };
            }

            return extend({
                //default options
                effects: {},
                duration: 400, //jQuery default duration
                reverse: false,
                init: noop,
                teardown: noop,
                hide: false
            }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

        }

        function animate(element, options, duration, reverse, complete) {
            var idx = 0,
                length = element.length,
                instance;

            for (; idx < length; idx ++) {
                instance = $(element[idx]);
                instance.queue(function() {
                    effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
                });
            }

            return element;
        }

        function toggleClass(element, classes, options, add) {
            if (classes) {
                classes = classes.split(" ");

                each(classes, function(idx, value) {
                    element.toggleClass(value, add);
                });
            }

            return element;
        }

        if (!("kendoAnimate" in $.fn)) {
            extend($.fn, {
                kendoStop: function(clearQueue, gotoEnd) {
                    return this.stop(clearQueue, gotoEnd);
                },

                kendoAnimate: function(options, duration, reverse, complete) {
                    return animate(this, options, duration, reverse, complete);
                },

                kendoAddClass: function(classes, options) {
                    return kendo.toggleClass(this, classes, options, true);
                },

                kendoRemoveClass: function(classes, options) {
                    return kendo.toggleClass(this, classes, options, false);
                },
                kendoToggleClass: function(classes, options, toggle) {
                    return kendo.toggleClass(this, classes, options, toggle);
                }
            });
        }

        var ampRegExp = /&/g,
            ltRegExp = /</g,
            quoteRegExp = /"/g,
            aposRegExp = /'/g,
            gtRegExp = />/g;
        function htmlEncode(value) {
            return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
        }

        function unescape(value) {
            var template;

            try {
                template = window.decodeURIComponent(value);
            } catch (error) {
                // If the string contains Unicode characters
                // the decodeURIComponent() will throw an error.
                // Therefore: convert to UTF-8 character
                template = value.replace(/%u([\dA-F]{4})|%([\dA-F]{2})/gi, function(_, m1, m2) {
                    return String.fromCharCode(parseInt("0x" + (m1 || m2), 16));
                });
            }

            return template;
        }

        var eventTarget = function(e) {
            return e.target;
        };

        if (support.touch) {

            eventTarget = function(e) {
                var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

                return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
            };

            each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function(m, value) {
                $.fn[value] = function(callback) {
                    return this.on(value, callback);
                };
            });
        }

        if (support.touch) {
            if (!support.mobileOS) {
                support.mousedown = "mousedown touchstart";
                support.mouseup = "mouseup touchend";
                support.mousemove = "mousemove touchmove";
                support.mousecancel = "mouseleave touchcancel";
                support.click = "click";
                support.resize = "resize";
            } else {
                support.mousedown = "touchstart";
                support.mouseup = "touchend";
                support.mousemove = "touchmove";
                support.mousecancel = "touchcancel";
                support.click = "touchend";
                support.resize = "orientationchange";
            }
        } else if (support.pointers) {
            support.mousemove = "pointermove";
            support.mousedown = "pointerdown";
            support.mouseup = "pointerup";
            support.mousecancel = "pointercancel";
            support.click = "pointerup";
            support.resize = "orientationchange resize";
        } else if (support.msPointers) {
            support.mousemove = "MSPointerMove";
            support.mousedown = "MSPointerDown";
            support.mouseup = "MSPointerUp";
            support.mousecancel = "MSPointerCancel";
            support.click = "MSPointerUp";
            support.resize = "orientationchange resize";
        } else {
            support.mousemove = "mousemove";
            support.mousedown = "mousedown";
            support.mouseup = "mouseup";
            support.mousecancel = "mouseleave";
            support.click = "click";
            support.resize = "resize";
        }

        var wrapExpression = function(members, paramName) {
            var result = paramName || "d",
                index,
                idx,
                length,
                member,
                count = 1;

            for (idx = 0, length = members.length; idx < length; idx++) {
                member = members[idx];
                if (member !== "") {
                    index = member.indexOf("[");

                    if (index !== 0) {
                        if (index == -1) {
                            member = "." + member;
                        } else {
                            count++;
                            member = "." + member.substring(0, index) + " || {})" + member.substring(index);
                        }
                    }

                    count++;
                    result += member + ((idx < length - 1) ? " || {})" : ")");
                }
            }
            return new Array(count).join("(") + result;
        },
        localUrlRe = /^([a-z]+:)?\/\//i;

        extend(kendo, {
            widgets: [],
            _widgetRegisteredCallbacks: [],
            ui: kendo.ui || {},
            fx: kendo.fx || fx,
            effects: kendo.effects || effects,
            mobile: kendo.mobile || { },
            data: kendo.data || {},
            dataviz: kendo.dataviz || {},
            drawing: kendo.drawing || {},
            spreadsheet: { messages: {} },
            keys: {
                INSERT: 45,
                DELETE: 46,
                BACKSPACE: 8,
                TAB: 9,
                ENTER: 13,
                ESC: 27,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                END: 35,
                HOME: 36,
                SPACEBAR: 32,
                PAGEUP: 33,
                PAGEDOWN: 34,
                F2: 113,
                F10: 121,
                F12: 123,
                NUMPAD_PLUS: 107,
                NUMPAD_MINUS: 109,
                NUMPAD_DOT: 110
            },
            support: kendo.support || support,
            animate: kendo.animate || animate,
            ns: "",
            attr: function(value) {
                return "data-" + kendo.ns + value;
            },
            getShadows: getShadows,
            wrap: wrap,
            deepExtend: deepExtend,
            getComputedStyles: getComputedStyles,
            isScrollable: isScrollable,
            scrollLeft: scrollLeft,
            size: size,
            toCamelCase: toCamelCase,
            toHyphens: toHyphens,
            getOffset: kendo.getOffset || getOffset,
            parseEffects: kendo.parseEffects || parseEffects,
            toggleClass: kendo.toggleClass || toggleClass,
            directions: kendo.directions || directions,
            Observable: Observable,
            Class: Class,
            Template: Template,
            template: Template.compile.bind(Template),
            render: Template.render.bind(Template),
            stringify: JSON.stringify.bind(JSON),
            eventTarget: eventTarget,
            htmlEncode: htmlEncode,
            unescape: unescape,
            isLocalUrl: function(url) {
                return url && !localUrlRe.test(url);
            },
            mediaQuery: mediaQuery,

            expr: function(expression, safe, paramName) {
                expression = expression || "";

                if (typeof safe == STRING) {
                    paramName = safe;
                    safe = false;
                }

                paramName = paramName || "d";

                if (expression && expression.charAt(0) !== "[") {
                    expression = "." + expression;
                }

                if (safe) {
                    expression = expression.replace(/"([^.]*)\.([^"]*)"/g,'"$1_$DOT$_$2"');
                    expression = expression.replace(/'([^.]*)\.([^']*)'/g,"'$1_$DOT$_$2'");
                    expression = wrapExpression(expression.split("."), paramName);
                    expression = expression.replace(/_\$DOT\$_/g, ".");
                } else {
                    expression = paramName + expression;
                }

                return expression;
            },

            exprToArray: function (expression, safe) {
                expression = expression || "";

                return expression.indexOf(".") >= 0 || expression.indexOf("[") >= 0 ?
                    expression.split(/[[\].]/).map(function (v) { return v.replace(/["']/g, ''); }).filter(function (v) { return v; }) :
                    expression === "" ? [] : [expression];
            },

            getter: function(expression, safe) {
                var key = expression + safe;

                return getterCache[key] = getterCache[key] || (function (obj) {
                    var fields = kendo.exprToArray(expression, safe);

                    var result = obj;
                    for (var idx = 0; idx < fields.length; idx++) {
                        result = result[fields[idx]];
                        if (!kendo.isPresent(result) && safe) {
                            return result;
                        }
                    }

                    return result;
                });
            },

            setter: function(expression) {
                return setterCache[expression] = setterCache[expression] || (function (obj, value) {
                    var fields = kendo.exprToArray(expression);

                    var innerSetter = function (ref) {
                        var parent = ref.parent;
                        var val = ref.val;
                        var prop = ref.prop;
                        var props = ref.props;

                        if (props.length) {
                            parent = parent[props.shift()];
                            innerSetter({ parent: parent, val: val, prop: prop, props: props });
                        } else {
                            parent[prop] = val;
                        }
                    };

                    innerSetter({
                        parent: obj,
                        val: value,
                        prop: fields.pop(),
                        props: fields
                    });
                });
            },

            accessor: function(expression) {
                return {
                    get: kendo.getter(expression),
                    set: kendo.setter(expression)
                };
            },

            guid: function() {
                var id = "", i, random, chars = "abcdef";

                id += chars[Math.floor(Math.random() * Math.floor(chars.length))];

                for (i = 1; i < 32; i++) {
                    random = math.random() * 16 | 0;

                    if (i == 8 || i == 12 || i == 16 || i == 20) {
                        id += "-";
                    }
                    id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
                }

                return id;
            },

            roleSelector: function(role) {
                return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
            },

            directiveSelector: function(directives) {
                var selectors = directives.split(" ");

                if (selectors) {
                    for (var i = 0; i < selectors.length; i++) {
                        if (selectors[i] != "view") {
                            selectors[i] = selectors[i].replace(/(\w*)(view|bar|strip|over)$/, "$1-$2");
                        }
                    }
                }

                return selectors.join(" ").replace(/(\S+)/g, "kendo-mobile-$1,").slice(0, -1);
            },

            triggeredByInput: function(e) {
                return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
            },

            onWidgetRegistered: function(callback) {
                for (var i = 0, len = kendo.widgets.length; i < len; i++) {
                    callback(kendo.widgets[i]);
                }

                kendo._widgetRegisteredCallbacks.push(callback);
            },

            logToConsole: function(message, type) {
                var console = window.console;

                if (!kendo.suppressLog && typeof(console) != "undefined" && console.log) {
                    console[type || "log"](message);
                }
            }
        });

        var Widget = Observable.extend( {
            init: function(element, options) {
                var that = this;

                if (!validatePackage()) {
                    that._showWatermarkOverlay = addWatermarkOverlay;
                }

                that.element = kendo.jQuery(element).handler(that);

                Observable.fn.init.call(that);

                var dataSource = options ? options.dataSource : null;
                var props;

                if (options) {
                    props = (that.componentTypes || {})[(options || {}).componentType];
                }

                if (dataSource) {
                    // avoid deep cloning the data source
                    options = extend({}, options, { dataSource: {} });
                }

                options = that.options = extend(true, {}, that.options, that.defaults, props || {}, options);

                if (dataSource) {
                    options.dataSource = dataSource;
                }

                if (!that.element.attr(kendo.attr("role"))) {
                    that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
                }

                that.element.data("kendo" + options.prefix + options.name, that);

                that.bind(that.events, options);
            },

            events: [],

            options: {
                prefix: ""
            },

            _hasBindingTarget: function() {
                return !!this.element[0].kendoBindingTarget;
            },

            _tabindex: function(target) {
                target = target || this.wrapper;

                var element = this.element,
                    TABINDEX = "tabindex",
                    tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);

                element.removeAttr(TABINDEX);

                target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
            },

            setOptions: function(options) {
                this._clearCssClasses(options);
                this._setEvents(options);
                $.extend(this.options, options);
                this._applyCssClasses();
            },

            _setEvents: function(options) {
                var that = this,
                    idx = 0,
                    length = that.events.length,
                    e;

                for (; idx < length; idx ++) {
                    e = that.events[idx];
                    if (that.options[e] && options[e]) {
                        that.unbind(e, that.options[e]);
                        if (that._events && that._events[e]) {
                            delete that._events[e];
                        }
                    }
                }

                that.bind(that.events, options);
            },

            resize: function(force) {
                var size = this.getSize(),
                    currentSize = this._size;

                if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
                    this._size = size;
                    this._resize(size, force);
                    this.trigger("resize", size);
                }
            },

            getSize: function() {
                return kendo.dimensions(this.element);
            },

            size: function(size) {
                if (!size) {
                    return this.getSize();
                } else {
                    this.setSize(size);
                }
            },

            setSize: $.noop,
            _resize: $.noop,

            destroy: function() {
                var that = this;

                that.element.removeData("kendo" + that.options.prefix + that.options.name);
                that.element.removeData("handler");
                that.unbind();
            },
            _destroy: function() {
                this.destroy();
            },

            _applyCssClasses: function(element) {
                var protoOptions = this.__proto__.options,
                    options = this.options,
                    el = element || this.wrapper || this.element,
                    classes = [],
                    i, prop, validFill, widgetName;

                if (!kendo.cssProperties.propertyDictionary[protoOptions.name]) {
                    return;
                }

                for (i = 0; i < cssPropertiesNames.length; i++) {
                    prop = cssPropertiesNames[i];
                    widgetName = this.options._altname || protoOptions.name;

                    if (protoOptions.hasOwnProperty(prop)) {
                        if (prop === "themeColor") {
                            validFill = kendo.cssProperties.getValidClass({
                                widget: widgetName,
                                propName: "fillMode",
                                value: options.fillMode
                            });

                            if (validFill && validFill.length) {
                                classes.push(kendo.cssProperties.getValidClass({
                                    widget: widgetName,
                                    propName: prop,
                                    value: options[prop],
                                    fill: options.fillMode
                                }));
                            }
                        } else {
                            classes.push(kendo.cssProperties.getValidClass({
                                widget: widgetName,
                                propName: prop,
                                value: options[prop]
                            }));
                        }
                    }
                }

                el.addClass(classes.join(" "));
            },

            _ariaLabel: function(target) {
                var that = this,
                    inputElm = that.element,
                    inputId = inputElm.attr("id"),
                    labelElm = $("label[for=\"" + inputId + "\"]"),
                    ariaLabel = inputElm.attr(ARIA_LABEL),
                    ariaLabelledBy = inputElm.attr(ARIA_LABELLEDBY),
                    labelId;

                if (target[0] === inputElm[0]) {
                    return;
                }

                if (ariaLabel) {
                    target.attr(ARIA_LABEL, ariaLabel);
                } else if (ariaLabelledBy) {
                    target.attr(ARIA_LABELLEDBY, ariaLabelledBy);
                } else if (labelElm.length) {
                    labelId = labelElm.attr("id") || that._generateLabelId(labelElm, inputId || kendo.guid());
                    target.attr(ARIA_LABELLEDBY, labelId);
                }
            },

            _clearCssClasses: function(newOptions, element) {
                var protoOptions = this.__proto__.options,
                    currentOptions = this.options,
                    el = element || this.wrapper || this.element,
                    i, prop, widgetName;

                if (!kendo.cssProperties.propertyDictionary[protoOptions.name]) {
                    return;
                }

                for (i = 0; i < cssPropertiesNames.length; i++) {
                    prop = cssPropertiesNames[i];
                    widgetName = this.options._altname || protoOptions.name;

                    if (protoOptions.hasOwnProperty(prop) && newOptions.hasOwnProperty(prop)) {
                        if (prop === "themeColor") {
                            el.removeClass(kendo.cssProperties.getValidClass({
                                widget: widgetName,
                                propName: prop,
                                value: currentOptions[prop],
                                fill: currentOptions.fillMode
                            }));
                        } else {
                            if (prop === "fillMode") {
                                el.removeClass(kendo.cssProperties.getValidClass({
                                    widget: widgetName,
                                    propName: "themeColor",
                                    value: currentOptions.themeColor,
                                    fill: currentOptions.fillMode
                                }));
                            }

                            el.removeClass(kendo.cssProperties.getValidClass({
                                widget: widgetName,
                                propName: prop,
                                value: currentOptions[prop]
                            }));
                        }
                    }
                }
            },

            _generateLabelId: function(label, inputId) {
                var labelId = inputId + LABELIDPART;

                label.attr("id", labelId);

                return labelId;
            },
        });

        var DataBoundWidget = Widget.extend({
            dataItems: function() {
                return this.dataSource.flatView();
            }
        });

        kendo.dimensions = function(element, dimensions) {
            var domElement = element[0];

            if (dimensions) {
                element.css(dimensions);
            }

            return { width: domElement.offsetWidth, height: domElement.offsetHeight };
        };

        kendo.notify = noop;

        var templateRegExp = /template$/i,
            jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
            jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]+\]$/,
            dashRegExp = /([A-Z])/g;

        function parseOption(element, option) {
            var value;

            if (option.indexOf("data") === 0) {
                option = option.substring(4);
                option = option.charAt(0).toLowerCase() + option.substring(1);
            }

            option = option.replace(dashRegExp, "-$1");
            value = element.getAttribute("data-" + kendo.ns + option);

            if (value === null) {
                value = undefined$1;
            } else if (value === "null") {
                value = null;
            } else if (value === "true") {
                value = true;
            } else if (value === "false") {
                value = false;
            } else if (numberRegExp.test(value) && option != "mask" && option != "format") {
                value = parseFloat(value);
            } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
                try {
                    value = JSON.parse(value);
                } catch (error) {
                    // Fallback to function eval for legacy reason - non CSP compliant
                    value = new Function("return (" + value + ")")();
                }
            }

            return value;
        }

        function parseOptions(element, options, source) {
            var result = {},
                option,
                value,
                role = element.getAttribute("data-" + kendo.ns + "role");

            for (option in options) {
                value = parseOption(element, option);

                if (value !== undefined$1) {

                    if (templateRegExp.test(option) && role != "drawer") {
                        if (typeof value === "string") {
                            if ($("#" + value).length) {
                                value = kendo.template($("#" + value).html());
                            } else if (source) {
                                value = kendo.template(source[value]);
                            }
                        } else {
                            value = element.getAttribute(option);
                        }
                    }

                    result[option] = value;
                }
            }

            return result;
        }

        kendo.initWidget = function(element, options, roles) {
            var result,
                option,
                widget,
                idx,
                length,
                role,
                value,
                dataSource,
                fullPath,
                widgetKeyRegExp;

            // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
            if (!roles) {
                roles = kendo.ui.roles;
            } else if (roles.roles) {
                roles = roles.roles;
            }

            element = element.nodeType ? element : element[0];

            role = element.getAttribute("data-" + kendo.ns + "role");

            if (!role) {
                return;
            }

            fullPath = role.indexOf(".") === -1;

            // look for any widget that may be already instantiated based on this role.
            // The prefix used is unknown, hence the regexp
            //

            if (fullPath) {
                widget = roles[role];
            } else { // full namespace path - like kendo.ui.Widget
                widget = kendo.getter(role)(window);
            }

            var data = $(element).data(),
                widgetKey = widget ? "kendo" + widget.fn.options.prefix + widget.fn.options.name : "";

            if (fullPath) {
                widgetKeyRegExp = new RegExp("^kendo.*" + role + "$", "i");
            } else { // full namespace path - like kendo.ui.Widget
                widgetKeyRegExp = new RegExp("^" + widgetKey + "$", "i");
            }

            for (var key in data) {
                if (key.match(widgetKeyRegExp)) {
                    // we have detected a widget of the same kind - save its reference, we will set its options
                    if (key === widgetKey) {
                        result = data[key];
                    } else {
                        return data[key];
                    }
                }
            }

            if (!widget) {
                return;
            }

            dataSource = parseOption(element, "dataSource");

            options = $.extend({}, parseOptions(element, $.extend({}, widget.fn.options, widget.fn.defaults) ), options);

            if (dataSource) {
                if (typeof dataSource === STRING) {
                    options.dataSource = kendo.getter(dataSource)(window);
                } else {
                    options.dataSource = dataSource;
                }
            }

            for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
                option = widget.fn.events[idx];

                value = parseOption(element, option);

                if (value !== undefined$1) {
                    options[option] = kendo.getter(value)(window);
                }
            }

            if (!result) {
                result = new widget(element, options);
            } else if (!$.isEmptyObject(options)) {
                result.setOptions(options);
            }

            return result;
        };

        kendo.rolesFromNamespaces = function(namespaces) {
            var roles = [],
                idx,
                length;

            if (!namespaces[0]) {
                namespaces = [kendo.ui, kendo.dataviz.ui];
            }

            for (idx = 0, length = namespaces.length; idx < length; idx ++) {
                roles[idx] = namespaces[idx].roles;
            }

            return extend.apply(null, [{}].concat(roles.reverse()));
        };

        kendo.init = function(element) {
            var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));

            $(element).find("[data-" + kendo.ns + "role]").addBack().each(function() {
                kendo.initWidget(this, {}, roles);
            });
        };

        kendo.destroy = function(element) {
            $(element).find("[data-" + kendo.ns + "role]").addBack().each(function() {
                var data = $(this).data();

                for (var key in data) {
                    if (key.indexOf("kendo") === 0 && typeof data[key].destroy === FUNCTION) {
                        data[key].destroy();
                    }
                }
            });
        };

        function containmentComparer(a, b) {
            return $.contains(a, b) ? -1 : 1;
        }

        function resizableWidget() {
            var widget = $(this);
            return ($.inArray(widget.attr("data-" + kendo.ns + "role"), ["slider", "rangeslider", "breadcrumb"]) > -1) || widget.is(":visible");
        }

        kendo.resize = function(element, force) {
            var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);

            if (!widgets.length) {
                return;
            }

            // sort widgets based on their parent-child relation
            var widgetsArray = $.makeArray(widgets);
            widgetsArray.sort(containmentComparer);

            // resize widgets
            $.each(widgetsArray, function() {
                var widget = kendo.widgetInstance($(this));
                if (widget) {
                    widget.resize(force);
                }
            });
        };

        kendo.parseOptions = parseOptions;

        extend(kendo.ui, {
            Widget: Widget,
            DataBoundWidget: DataBoundWidget,
            roles: {},
            progress: function(container, toggle, options) {
                var mask = container.find(".k-loading-mask"),
                    support = kendo.support,
                    browser = support.browser,
                    isRtl, leftRight, webkitCorrection, containerScrollLeft, cssClass;

                    options = $.extend({}, {
                        width: "100%",
                        height: "100%",
                        top: container.scrollTop(),
                        opacity: false
                    }, options);

                    cssClass = options.opacity ? 'k-loading-mask k-opaque' : 'k-loading-mask';

                if (toggle) {
                    if (!mask.length) {
                        isRtl = support.isRtl(container);
                        leftRight = isRtl ? "right" : "left";
                        containerScrollLeft = kendo.scrollLeft(container);
                        webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;

                        mask = $(kendo.format("<div class='{0}'><span role='alert' aria-live='polite' class='k-loading-text'>{1}</span><div class='k-loading-image'></div><div class='k-loading-color'></div></div>", cssClass, kendo.ui.progress.messages.loading))
                            .width(options.width).height(options.height)
                            .css("top", options.top)
                            .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
                            .prependTo(container);
                    }
                } else if (mask) {
                    mask.remove();
                }
            },
            plugin: function(widget, register, prefix) {
                var name = widget.fn.options.name,
                    getter;

                register = register || kendo.ui;
                prefix = prefix || "";

                register[name] = widget;

                register.roles[name.toLowerCase()] = widget;

                getter = "getKendo" + prefix + name;
                name = "kendo" + prefix + name;

                var widgetEntry = { name: name, widget: widget, prefix: prefix || "" };
                kendo.widgets.push(widgetEntry);

                for (var i = 0, len = kendo._widgetRegisteredCallbacks.length; i < len; i++) {
                    kendo._widgetRegisteredCallbacks[i](widgetEntry);
                }

                $.fn[name] = function(options) {
                    var value = this,
                        args;

                    if (typeof options === STRING) {
                        args = slice.call(arguments, 1);

                        this.each(function() {
                            var widget = $.data(this, name),
                                method,
                                result;

                            if (!widget) {
                                throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
                            }

                            method = widget[options];

                            if (typeof method !== FUNCTION) {
                                throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
                            }

                            result = method.apply(widget, args);

                            if (result !== undefined$1) {
                                value = result;
                                return false;
                            }
                        });
                    } else {
                        this.each(function() {
                            return new widget(this, options);
                        });
                    }

                    return value;
                };

                $.fn[name].widget = widget;

                $.fn[getter] = function() {
                    return this.data(name);
                };
            }
        });

        kendo.ui.progress.messages = {
            loading: "Loading..."
        };

        var ContainerNullObject = { bind: function() { return this; }, nullObject: true, options: {} };

        var MobileWidget = Widget.extend({
            init: function(element, options) {
                Widget.fn.init.call(this, element, options);
                this.element.autoApplyNS();
                this.wrapper = this.element;
                this.element.addClass("km-widget");
            },

            destroy: function() {
                Widget.fn.destroy.call(this);
                this.element.kendoDestroy();
            },

            options: {
                prefix: "Mobile"
            },

            events: [],

            view: function() {
                var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
                return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
            },

            viewHasNativeScrolling: function() {
                var view = this.view();
                return view && view.options.useNativeScrolling;
            },

            container: function() {
                var element = this.element.closest(kendo.roleSelector("view layout modalview drawer splitview"));
                return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;
            }
        });

        extend(kendo.mobile, {
            init: function(element) {
                kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
            },

            roles: {},

            ui: {
                Widget: MobileWidget,
                DataBoundWidget: DataBoundWidget.extend(MobileWidget.prototype),
                roles: {},
                plugin: function(widget) {
                    kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
                }
            }
        });

        deepExtend(kendo.dataviz, {
            init: function(element) {
                kendo.init(element, kendo.dataviz.ui);
            },
            ui: {
                roles: {},
                themes: {},
                views: [],
                plugin: function(widget) {
                    kendo.ui.plugin(widget, kendo.dataviz.ui);
                }
            },
            roles: {}
        });

        kendo.touchScroller = function(elements, options) {
            // return the first touch scroller
            if (!options) { options = {}; }

            options.useNative = true;

            return $(elements).map(function(idx, element) {
                element = $(element);
                if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
                    element.kendoMobileScroller(options);
                    return element.data("kendoMobileScroller");
                } else {
                    return false;
                }
            })[0];
        };

        kendo.preventDefault = function(e) {
            e.preventDefault();
        };

        kendo.widgetInstance = function(element, suites) {
            var role = element.data(kendo.ns + "role"),
                widgets = [], i, length,
                elementData = element.data("kendoView");

            if (role) {
                // HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
                if (role === "content") {
                    role = "scroller";
                }

                // kendo.View is not a ui plugin

                if (role === "view" && elementData) {
                    return elementData;
                }

                if (suites) {
                    if (suites[0]) {
                        for (i = 0, length = suites.length; i < length; i ++) {
                            widgets.push(suites[i].roles[role]);
                        }
                    } else {
                        widgets.push(suites.roles[role]);
                    }
                }
                else {
                    widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role], kendo.mobile.ui.roles[role] ];
                }

                if (role.indexOf(".") >= 0) {
                    widgets = [ kendo.getter(role)(window) ];
                }

                for (i = 0, length = widgets.length; i < length; i ++) {
                    var widget = widgets[i];
                    if (widget) {
                        var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
                        if (instance) {
                            return instance;
                        }
                    }
                }
            }
        };

        kendo.onResize = function(callback) {
            var handler = callback;
            if (support.mobileOS.android) {
                handler = function() { setTimeout(callback, 600); };
            }

            $(window).on(support.resize, handler);
            return handler;
        };

        kendo.unbindResize = function(callback) {
            $(window).off(support.resize, callback);
        };

        kendo.attrValue = function(element, key) {
            return element.data(kendo.ns + key);
        };

        kendo.days = {
            Sunday: 0,
            Monday: 1,
            Tuesday: 2,
            Wednesday: 3,
            Thursday: 4,
            Friday: 5,
            Saturday: 6
        };

        function focusable(element, isTabIndexNotNaN) {
            var nodeName = element.nodeName.toLowerCase();

            return (/input|select|textarea|button|object/.test(nodeName) ?
                    !element.disabled :
                    nodeName === "a" ?
                    element.href || isTabIndexNotNaN :
                    isTabIndexNotNaN
                   ) &&
                visible(element);
        }

        function visible(element) {
            return $.expr.pseudos.visible(element) &&
                !$(element).parents().addBack().filter(function() {
                    return $.css(this,"visibility") === "hidden";
                }).length;
        }

        $.extend($.expr.pseudos, {
            kendoFocusable: function(element) {
                var idx = $.attr(element, "tabindex");
                return focusable(element, !isNaN(idx) && idx > -1);
            }
        });

        var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
        var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";

        var MouseEventNormalizer = {
            setupMouseMute: function() {
                var idx = 0,
                    length = MOUSE_EVENTS.length,
                    element = document.documentElement;

                if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
                    return;
                }

                MouseEventNormalizer.mouseTrap = true;

                MouseEventNormalizer.bustClick = false;
                MouseEventNormalizer.captureMouse = false;

                var handler = function(e) {
                    if (MouseEventNormalizer.captureMouse) {
                        if (e.type === "click") {
                            if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        } else {
                            e.stopPropagation();
                        }
                    }
                };

                for (; idx < length; idx++) {
                    element.addEventListener(MOUSE_EVENTS[idx], handler, true);
                }
            },

            muteMouse: function(e) {
                MouseEventNormalizer.captureMouse = true;
                if (e.data.bustClick) {
                    MouseEventNormalizer.bustClick = true;
                }
                clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
            },

            unMuteMouse: function() {
                clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
                MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {
                    MouseEventNormalizer.captureMouse = false;
                    MouseEventNormalizer.bustClick = false;
                }, 400);
            }
        };

        var eventMap = {
            down: "touchstart mousedown",
            move: "mousemove touchmove",
            up: "mouseup touchend touchcancel",
            cancel: "mouseleave touchcancel"
        };

        if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
            eventMap = {
                down: "touchstart",
                move: "touchmove",
                up: "touchend touchcancel",
                cancel: "touchcancel"
            };
        } else if (support.pointers) {
            eventMap = {
                down: "pointerdown",
                move: "pointermove",
                up: "pointerup",
                cancel: "pointercancel pointerleave"
            };
        } else if (support.msPointers) {
            eventMap = {
                down: "MSPointerDown",
                move: "MSPointerMove",
                up: "MSPointerUp",
                cancel: "MSPointerCancel MSPointerLeave"
            };
        }

        if (support.msPointers && !("onmspointerenter" in window)) { // IE10
            // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
            $.each({
                MSPointerEnter: "MSPointerOver",
                MSPointerLeave: "MSPointerOut"
            }, function( orig, fix ) {
                $.event.special[ orig ] = {
                    delegateType: fix,
                    bindType: fix,

                    handle: function( event ) {
                        var ret,
                            target = this,
                            related = event.relatedTarget,
                            handleObj = event.handleObj;

                        // For mousenter/leave call the handler if related is outside the target.
                        // NB: No relatedTarget if the mouse left/entered the browser window
                        if ( !related || (related !== target && !$.contains( target, related )) ) {
                            event.type = handleObj.origType;
                            ret = handleObj.handler.apply( this, arguments );
                            event.type = fix;
                        }
                        return ret;
                    }
                };
            });
        }


        var getEventMap = function(e) { return (eventMap[e] || e); },
            eventRegEx = /([^ ]+)/g;

        kendo.applyEventMap = function(events, ns) {
            events = events.replace(eventRegEx, getEventMap);

            if (ns) {
                events = events.replace(eventRegEx, "$1." + ns);
            }

            return events;
        };

        kendo.keyDownHandler = function(e, widget) {
            var events = widget._events.kendoKeydown;

            if (!events) {
                return true;
            }

            events = events.slice();
            e.sender = widget;
            e.preventKendoKeydown = false;
            for (var idx = 0, length = events.length; idx < length; idx++) {
                events[idx].call(widget, e);
            }

            return !e.preventKendoKeydown;
        };

        var on = $.fn.on;

        function kendoJQuery(selector, context) {
            return new kendoJQuery.fn.init(selector, context);
        }

        noDepricateExtend(true, kendoJQuery, $);

        kendoJQuery.fn = kendoJQuery.prototype = new $();

        kendoJQuery.fn.constructor = kendoJQuery;

        kendoJQuery.fn.init = function(selector, context) {
            if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
                context = kendoJQuery(context);
            }

            return $.fn.init.call(this, selector, context, rootjQuery);
        };

        kendoJQuery.fn.init.prototype = kendoJQuery.fn;

        var rootjQuery = kendoJQuery(document);

        extend(kendoJQuery.fn, {
            handler: function(handler) {
                this.data("handler", handler);
                return this;
            },

            autoApplyNS: function(ns) {
                this.data("kendoNS", ns || kendo.guid());
                return this;
            },

            on: function() {
                var that = this,
                    ns = that.data("kendoNS");

                // support for event map signature
                if (arguments.length === 1) {
                    return on.call(that, arguments[0]);
                }

                var context = that,
                    args = slice.call(arguments);

                if (typeof args[args.length - 1] === UNDEFINED) {
                    args.pop();
                }

                var callback = args[args.length - 1],
                    events = kendo.applyEventMap(args[0], ns);

                // setup mouse trap
                if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
                    MouseEventNormalizer.setupMouseMute();

                    var selector = args.length === 2 ? null : args[1],
                        bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;

                    on.call(this,
                        {
                            touchstart: MouseEventNormalizer.muteMouse,
                            touchend: MouseEventNormalizer.unMuteMouse
                        },
                        selector,
                        {
                            bustClick: bustClick
                        });
                }

                if (arguments[0].indexOf("keydown") !== -1 && args[1] && args[1].options) {
                    args[0] = events;
                    var widget = args[1];
                    var keyDownCallBack = args[args.length - 1];
                    args[args.length - 1] = function(e) {
                        if (kendo.keyDownHandler(e, widget)) {
                           return keyDownCallBack.apply(this, [e]);
                        }
                    };
                    on.apply(that, args);
                    return that;
                }

                if (typeof callback === STRING) {
                    context = that.data("handler");
                    callback = context[callback];

                    args[args.length - 1] = function(e) {
                        callback.call(context, e);
                    };
                }

                args[0] = events;

                on.apply(that, args);

                return that;
            },

            kendoDestroy: function(ns) {
                ns = ns || this.data("kendoNS");

                if (ns) {
                    this.off("." + ns);
                }

                return this;
            }
        });

        kendo.jQuery = kendoJQuery;
        kendo.eventMap = eventMap;

        kendo.timezone = (function() {
            var months = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
            var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };

            function ruleToDate(year, rule) {
                var date;
                var targetDay;
                var ourDay;
                var month = rule[3];
                var on = rule[4];
                var time = rule[5];
                var cache = rule[8];

                if (!cache) {
                    rule[8] = cache = {};
                }

                if (cache[year]) {
                    return cache[year];
                }

                if (!isNaN(on)) {
                    date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
                } else if (on.indexOf("last") === 0) {
                    date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));

                    targetDay = days[on.substr(4, 3)];
                    ourDay = date.getUTCDay();

                    date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
                } else if (on.indexOf(">=") >= 0) {
                    date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

                    targetDay = days[on.substr(0, 3)];
                    ourDay = date.getUTCDay();

                    date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
                } else if (on.indexOf("<=") >= 0) {
                    date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

                    targetDay = days[on.substr(0, 3)];
                    ourDay = date.getUTCDay();

                    date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
                }

                return cache[year] = date;
            }

            function findRule(utcTime, rules, zone) {
                rules = rules[zone];

                if (!rules) {
                    var time = zone.split(":");
                    var offset = 0;

                    if (time.length > 1) {
                        offset = time[0] * 60 + Number(time[1]);
                    }

                    return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
                }

                var year = new Date(utcTime).getUTCFullYear();

                rules = jQuery.grep(rules, function(rule) {
                    var from = rule[0];
                    var to = rule[1];

                    return from <= year && (to >= year || (from == year && to == "only") || to == "max");
                });

                rules.push(utcTime);

                rules.sort(function(a, b) {
                    if (typeof a != "number") {
                        a = Number(ruleToDate(year, a));
                    }

                    if (typeof b != "number") {
                        b = Number(ruleToDate(year, b));
                    }

                    return a - b;
                });

                var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];

                return isNaN(rule) ? rule : null;
            }

            function findZone(utcTime, zones, timezone) {
                var zoneRules = zones[timezone];

                if (typeof zoneRules === "string") {
                    zoneRules = zones[zoneRules];
                }

                if (!zoneRules) {
                    throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
                }

                for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
                    var until = zoneRules[idx][3];

                    if (until && utcTime > until) {
                        break;
                    }
                }

                var zone = zoneRules[idx + 1];

                if (!zone) {
                    throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
                }

                return zone;
            }

            function zoneAndRule(utcTime, zones, rules, timezone) {
                if (typeof utcTime != NUMBER) {
                    utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
                        utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
                        utcTime.getSeconds(), utcTime.getMilliseconds());
                }

                var zone = findZone(utcTime, zones, timezone);

                return {
                    zone: zone,
                    rule: findRule(utcTime, rules, zone[1])
                };
            }

            function offset(utcTime, timezone) {
                if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
                    return 0;
                }

                var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
                var zone = info.zone;
                var rule = info.rule;

                return kendo.parseFloat(rule ? zone[0] - rule[6] : zone[0]);
            }

            function abbr(utcTime, timezone) {
                var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
                var zone = info.zone;
                var rule = info.rule;

                var base = zone[2];

                if (base.indexOf("/") >= 0) {
                    return base.split("/")[rule && +rule[6] ? 1 : 0];
                } else if (base.indexOf("%s") >= 0) {
                    return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
                }

                return base;
            }

            function convert(date, fromOffset, toOffset) {
                var tempToOffset = toOffset;
                var diff;

                if (typeof fromOffset == STRING) {
                    fromOffset = this.offset(date, fromOffset);
                }

                if (typeof toOffset == STRING) {
                    toOffset = this.offset(date, toOffset);
                }

                var fromLocalOffset = date.getTimezoneOffset();

                date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);

                var toLocalOffset = date.getTimezoneOffset();

                if (typeof tempToOffset == STRING) {
                    tempToOffset = this.offset(date, tempToOffset);
                }

                diff = (toLocalOffset - fromLocalOffset) + (toOffset - tempToOffset);

                return new Date(date.getTime() + diff * 60000);
            }

            function apply(date, timezone) {
               return this.convert(date, date.getTimezoneOffset(), timezone);
            }

            function remove(date, timezone) {
               return this.convert(date, timezone, date.getTimezoneOffset());
            }

            function toLocalDate(time) {
                return this.apply(new Date(time), "Etc/UTC");
            }

            return {
               zones: {},
               rules: {},
               offset: offset,
               convert: convert,
               apply: apply,
               remove: remove,
               abbr: abbr,
               toLocalDate: toLocalDate
            };
        })();

        kendo.date = (function() {
            var MS_PER_MINUTE = 60000,
                MS_PER_DAY = 86400000;

            function adjustDST(date, hours) {
                if (hours === 0 && date.getHours() === 23) {
                    date.setHours(date.getHours() + 2);
                    return true;
                }

                return false;
            }

            function setDayOfWeek(date, day, dir) {
                var hours = date.getHours();

                dir = dir || 1;
                day = ((day - date.getDay()) + (7 * dir)) % 7;

                date.setDate(date.getDate() + day);
                adjustDST(date, hours);
            }

            function dayOfWeek(date, day, dir) {
                date = new Date(date);
                setDayOfWeek(date, day, dir);
                return date;
            }

            function firstDayOfMonth(date) {
                return new Date(
                    date.getFullYear(),
                    date.getMonth(),
                    1
                );
            }

            function lastDayOfMonth(date) {
                var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
                    first = firstDayOfMonth(date),
                    timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

                if (timeOffset) {
                    last.setHours(first.getHours() + (timeOffset / 60));
                }

                return last;
            }

            function firstDayOfYear(date) {
                return new Date(date.getFullYear(), 0, 1);
            }

            function lastDayOfYear(date) {
                return new Date(date.getFullYear(), 11, 31);
            }

            function moveDateToWeekStart(date, weekStartDay) {
                if (weekStartDay !== 1) {
                    return addDays(dayOfWeek(date, weekStartDay, -1), 4);
                }

                return addDays(date, (4 - (date.getDay() || 7)));
            }

            function calcWeekInYear(date, weekStartDay) {
                var firstWeekInYear = new Date(date.getFullYear(), 0, 1, -6);

                var newDate = moveDateToWeekStart(date, weekStartDay);

                var diffInMS = newDate.getTime() - firstWeekInYear.getTime();

                var days = Math.floor(diffInMS / MS_PER_DAY);

                return 1 + Math.floor(days / 7);
            }

            function weekInYear(date, weekStartDay) {
                if (weekStartDay === undefined$1) {
                    weekStartDay = kendo.culture().calendar.firstDay;
                }

                var prevWeekDate = addDays(date, -7);
                var nextWeekDate = addDays(date, 7);

                var weekNumber = calcWeekInYear(date, weekStartDay);

                if (weekNumber === 0) {
                    return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
                }

                if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
                    return 1;
                }

                return weekNumber;
            }

            function getDate(date) {
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
                adjustDST(date, 0);
                return date;
            }

            function toUtcTime(date) {
                return Date.UTC(date.getFullYear(), date.getMonth(),
                            date.getDate(), date.getHours(), date.getMinutes(),
                            date.getSeconds(), date.getMilliseconds());
            }

            function getMilliseconds(date) {
                return toInvariantTime(date).getTime() - getDate(toInvariantTime(date));
            }

            function isInTimeRange(value, min, max) {
                var msMin = getMilliseconds(min),
                    msMax = getMilliseconds(max),
                    msValue;

                if (!value || msMin == msMax) {
                    return true;
                }

                if (min >= max) {
                    max += MS_PER_DAY;
                }

                msValue = getMilliseconds(value);

                if (msMin > msValue) {
                    msValue += MS_PER_DAY;
                }

                if (msMax < msMin) {
                    msMax += MS_PER_DAY;
                }

                return msValue >= msMin && msValue <= msMax;
            }

            function isInDateRange(value, min, max) {
                var msMin = min.getTime(),
                    msMax = max.getTime(),
                    msValue;

                if (msMin >= msMax) {
                    msMax += MS_PER_DAY;
                }

                msValue = value.getTime();

                return msValue >= msMin && msValue <= msMax;
            }

            function addDays(date, offset) {
                var hours = date.getHours();
                    date = new Date(date);

                setTime(date, offset * MS_PER_DAY);
                adjustDST(date, hours);
                return date;
            }

            function setTime(date, milliseconds, ignoreDST) {
                var offset = date.getTimezoneOffset();
                var difference;

                date.setTime(date.getTime() + milliseconds);

                if (!ignoreDST) {
                    difference = date.getTimezoneOffset() - offset;
                    date.setTime(date.getTime() + difference * MS_PER_MINUTE);
                }
            }

            function setHours(date, time) {
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());
                adjustDST(date, time.getHours());
                return date;
            }

            function today() {
                return getDate(new Date());
            }

            function isToday(date) {
               return getDate(date).getTime() == today().getTime();
            }

            function toInvariantTime(date) {
                var staticDate = new Date(1980, 1, 1, 0, 0, 0);

                if (date) {
                    staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
                }

                return staticDate;
            }

            function addYear(date, offset) {
                var currentDate = new Date(date);

                return new Date(currentDate.setFullYear(currentDate.getFullYear() + offset));
            }

            function addLiteral(parts, value) {
                var lastPart = parts[parts.length - 1];
                if (lastPart && lastPart.type === "LITERAL") {
                    lastPart.pattern += value;
                } else {
                    parts.push({
                        type: "literal",
                        pattern: value
                    });
                }
            }

            function isHour12(pattern) {
                return pattern === "h" || pattern === "K";
            }

            function dateNameType(formatLength) {
                var nameType;
                if (formatLength <= 3) {
                    nameType = "abbreviated";
                } else if (formatLength === 4) {
                    nameType = "wide";
                } else if (formatLength === 5) {
                    nameType = "narrow";
                }

                return nameType;
            }

            function startsWith(text, searchString, position) {
                position = position || 0;
                return text.indexOf(searchString, position) === position;
            }

            function datePattern(format, info) {
                var calendar = info.calendar;
                var result;
                if (typeof format === "string") {
                    if (calendar.patterns[format]) {
                        result = calendar.patterns[format];
                    } else {
                        result = format;
                    }
                }

                if (!result) {
                    result = calendar.patterns.d;
                }

                return result;
            }

            function splitDateFormat(format) {
                var info = kendo.culture();
                var pattern = datePattern(format, info).replace("dddd", "EEEE").replace("tt", "aa");
                var parts = [];
                var dateFormatRegExp = /d{1,2}|E{1,6}|e{1,6}|c{3,6}|c{1}|M{1,5}|L{1,5}|y{1,4}|H{1,2}|h{1,2}|k{1,2}|K{1,2}|m{1,2}|a{1,5}|s{1,2}|S{1,3}|t{1,2}|z{1,4}|Z{1,5}|x{1,5}|X{1,5}|G{1,5}|q{1,5}|Q{1,5}|"[^"]*"|'[^']*'/g;

                var lastIndex = dateFormatRegExp.lastIndex = 0;
                var match = dateFormatRegExp.exec(pattern);
                var specifier;
                var type;
                var part;
                var names;
                var minLength;
                var patternLength;

                while (match) {
                    var value = match[0];

                    if (lastIndex < match.index) {
                        addLiteral(parts, pattern.substring(lastIndex, match.index));
                    }

                    if (startsWith(value, '"') || startsWith(value, "'")) {
                        addLiteral(parts, value);
                    } else {
                        specifier = value[0];
                        type = DATE_FIELD_MAP[specifier];
                        part = {
                            type: type,
                            pattern: value
                        };

                        if (type === "hour") {
                            part.hour12 = isHour12(value);
                        }

                        names = NAME_TYPES[type];

                        if (names) {
                            minLength = typeof names.minLength === "number" ? names.minLength : names.minLength[specifier];
                            patternLength = value.length;

                            if (patternLength >= minLength && value !== "aa") {
                                part.names = {
                                    type: names.type,
                                    nameType: dateNameType(patternLength),
                                    standAlone: names.standAlone === specifier
                                };
                            }
                        }

                        parts.push(part);
                    }

                    lastIndex = dateFormatRegExp.lastIndex;
                    match = dateFormatRegExp.exec(pattern);
                }

                if (lastIndex < pattern.length) {
                    addLiteral(parts, pattern.substring(lastIndex));
                }

                return parts;
            }

            function dateFormatNames(options) {
                var type = options.type;
                var nameType = options.nameType;
                var info = kendo.culture();
                if (nameType === "wide") {
                    nameType = "names";
                }
                if (nameType === "abbreviated") {
                    nameType = "namesAbbr";
                }
                if (nameType === "narrow") {
                    nameType = "namesShort";
                }
                var result = info.calendar[type][nameType];
                if (!result) {
                    result = info.calendar[type]["name"];
                }
                return result;
            }

            function dateFieldName(options) {
                var info = kendo.culture();
                var dateFields = info.calendar.dateFields;
                var fieldNameInfo = dateFields[options.type] || {};

                return fieldNameInfo[options.nameType];
            }

            return {
                adjustDST: adjustDST,
                dayOfWeek: dayOfWeek,
                setDayOfWeek: setDayOfWeek,
                getDate: getDate,
                isInDateRange: isInDateRange,
                isInTimeRange: isInTimeRange,
                isToday: isToday,
                nextDay: function(date) {
                    return addDays(date, 1);
                },
                previousDay: function(date) {
                    return addDays(date, -1);
                },
                toUtcTime: toUtcTime,
                MS_PER_DAY: MS_PER_DAY,
                MS_PER_HOUR: 60 * MS_PER_MINUTE,
                MS_PER_MINUTE: MS_PER_MINUTE,
                setTime: setTime,
                setHours: setHours,
                addDays: addDays,
                today: today,
                toInvariantTime: toInvariantTime,
                firstDayOfMonth: firstDayOfMonth,
                splitDateFormat: splitDateFormat,
                dateFieldName: dateFieldName,
                dateFormatNames: dateFormatNames,
                lastDayOfMonth: lastDayOfMonth,
                weekInYear: weekInYear,
                getMilliseconds: getMilliseconds,
                firstDayOfYear: firstDayOfYear,
                lastDayOfYear: lastDayOfYear,
                nextYear: function(date) {
                    return addYear(date, 1);
                },
                previousYear: function(date) {
                    return addYear(date, -1);
                }
            };
        })();


        kendo.stripWhitespace = function(element) {
            if (document.createNodeIterator) {
                var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {
                        return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
                    }, false);

                while (iterator.nextNode()) {
                    if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
                        iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
                    }
                }
            } else { // IE7/8 support
                for (var i = 0; i < element.childNodes.length; i++) {
                    var child = element.childNodes[i];

                    if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
                        element.removeChild(child);
                        i--;
                    }

                    if (child.nodeType == 1) {
                        kendo.stripWhitespace(child);
                    }
                }
            }
        };

        var animationFrame = window.requestAnimationFrame ||
                              window.webkitRequestAnimationFrame ||
                              window.mozRequestAnimationFrame ||
                              window.oRequestAnimationFrame ||
                              window.msRequestAnimationFrame ||
                              function(callback) { setTimeout(callback, 1000 / 60); };

        kendo.animationFrame = function(callback) {
            animationFrame.call(window, callback);
        };

        var animationQueue = [];

        kendo.queueAnimation = function(callback) {
            animationQueue[animationQueue.length] = callback;
            if (animationQueue.length === 1) {
                kendo.runNextAnimation();
            }
        };

        kendo.runNextAnimation = function() {
            kendo.animationFrame(function() {
                if (animationQueue[0]) {
                    animationQueue.shift()();
                    if (animationQueue[0]) {
                        kendo.runNextAnimation();
                    }
                }
            });
        };

        kendo.parseQueryStringParams = function(url) {
            var queryString = url.split('?')[1] || "",
                params = {},
                paramParts = queryString.split(/&|=/),
                length = paramParts.length,
                idx = 0;

            for (; idx < length; idx += 2) {
                if (paramParts[idx] !== "") {
                    params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
                }
            }

            return params;
        };

        kendo.elementUnderCursor = function(e) {
            if (typeof e.x.client != "undefined") {
                return document.elementFromPoint(e.x.client, e.y.client);
            }
        };

        kendo.wheelDeltaY = function(jQueryEvent) {
            var e = jQueryEvent.originalEvent,
                deltaY = e.wheelDeltaY,
                delta;

                if (e.wheelDelta) { // Webkit and IE
                    if (deltaY === undefined$1 || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
                        delta = e.wheelDelta;
                    }
                } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
                    delta = (-e.detail) * 10;
                }

            return delta;
        };

        kendo.throttle = function(fn, delay) {
            var timeout;
            var lastExecTime = 0;

            if (!delay || delay <= 0) {
                return fn;
            }

            var throttled = function() {
                var that = this;
                var elapsed = +new Date() - lastExecTime;
                var args = arguments;

                function exec() {
                    fn.apply(that, args);
                    lastExecTime = +new Date();
                }

                // first execution
                if (!lastExecTime) {
                    return exec();
                }

                if (timeout) {
                    clearTimeout(timeout);
                }

                if (elapsed > delay) {
                    exec();
                } else {
                    timeout = setTimeout(exec, delay - elapsed);
                }
            };

            throttled.cancel = function() {
                clearTimeout(timeout);
            };

            return throttled;
        };


        kendo.caret = function(element, start, end) {
            var rangeElement;
            var isPosition = start !== undefined$1;

            if (end === undefined$1) {
                end = start;
            }

            if (element[0]) {
                element = element[0];
            }

            if (isPosition && element.disabled) {
                return;
            }

            try {
                if (element.selectionStart !== undefined$1) {
                    if (isPosition) {
                        element.focus();
                        var mobile = support.mobileOS;
                        if (mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input
                            setTimeout(function() { element.setSelectionRange(start, end); }, 0);
                        }
                        else {
                            element.setSelectionRange(start, end);
                        }
                    } else {
                        start = [element.selectionStart, element.selectionEnd];
                    }
                } else if (document.selection) {
                    if ($(element).is(":visible")) {
                        element.focus();
                    }

                    rangeElement = element.createTextRange();

                    if (isPosition) {
                        rangeElement.collapse(true);
                        rangeElement.moveStart("character", start);
                        rangeElement.moveEnd("character", end - start);
                        rangeElement.select();
                    } else {
                        var rangeDuplicated = rangeElement.duplicate(),
                            selectionStart, selectionEnd;

                            rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
                            rangeDuplicated.setEndPoint('EndToStart', rangeElement);
                            selectionStart = rangeDuplicated.text.length;
                            selectionEnd = selectionStart + rangeElement.text.length;

                        start = [selectionStart, selectionEnd];
                    }
                }
            } catch (e) {
                /* element is not focused or it is not in the DOM */
                start = [];
            }

            return start;
        };

        kendo.antiForgeryTokens = function() {
            var tokens = { },
                csrf_token = $("meta[name=csrf-token],meta[name=_csrf]").attr("content"),
                csrf_param = $("meta[name=csrf-param],meta[name=_csrf_header]").attr("content");

            $("input[name^='__RequestVerificationToken']").each(function() {
                tokens[this.name] = this.value;
            });

            if (csrf_param !== undefined$1 && csrf_token !== undefined$1) {
              tokens[csrf_param] = csrf_token;
            }

            return tokens;
        };

        kendo.cycleForm = function(form) {
            var firstElement = form.find("input, .k-widget, .k-dropdownlist, .k-combobox").first();
            var lastElement = form.find("button, .k-button").last();

            function focus(el) {
                var widget = kendo.widgetInstance(el);

                if (widget && widget.focus) {
                  widget.focus();
                } else {
                  el.trigger("focus");
                }
            }

            lastElement.on("keydown", function(e) {
              if (e.keyCode == kendo.keys.TAB && !e.shiftKey) {
                e.preventDefault();
                focus(firstElement);
              }
            });

            firstElement.on("keydown", function(e) {
              if (e.keyCode == kendo.keys.TAB && e.shiftKey) {
                e.preventDefault();
                focus(lastElement);
              }
            });
        };

        kendo.focusElement = function(element) {
            var scrollTopPositions = [];
            var scrollableParents = element.parentsUntil("body")
                    .filter(function(index, element) {
                        var computedStyle = kendo.getComputedStyles(element, ["overflow"]);
                        return computedStyle.overflow !== "visible";
                    })
                    .add(window);

            scrollableParents.each(function(index, parent) {
                scrollTopPositions[index] = $(parent).scrollTop();
            });

            try {
                //The setActive method does not cause the document to scroll to the active object in the current page
                element[0].setActive();
            } catch (e) {
                element[0].focus();
            }

            scrollableParents.each(function(index, parent) {
                $(parent).scrollTop(scrollTopPositions[index]);
            });
        };

        kendo.focusNextElement = function() {
            if (document.activeElement) {
                var focussable = $(":kendoFocusable");
                var index = focussable.index(document.activeElement);

                if (index > -1) {
                   var nextElement = focussable[index + 1] || focussable[0];
                   nextElement.focus();
                }
            }
        };

        kendo.trim = function(value) {
            if (!!value) {
                return value.toString().trim();
            } else {
                return "";
            }
        };

        kendo.getWidgetFocusableElement = function(element) {
            var nextFocusable = element.closest(":kendoFocusable"),
                widgetInstance = kendo.widgetInstance(element),
                target;

            if (nextFocusable.length) {
                target = nextFocusable;
            } else if (widgetInstance) {
                target = widgetInstance.options.name === 'Editor' ?
                    $(widgetInstance.body) :
                    widgetInstance.wrapper.find(":kendoFocusable").first();
            } else {
                target = element;
            }

            return target;
        };

        kendo.addAttribute = function(element, attribute, value) {
            var current = element.attr(attribute) || "";

            if (current.indexOf(value) < 0) {
                element.attr(attribute, (current + " " + value).trim());
            }
        };

        kendo.removeAttribute = function(element, attribute, value) {
            var current = element.attr(attribute) || "";

            element.attr(attribute, current.replace(value, "").trim());
        };

        kendo.toggleAttribute = function(element, attribute, value) {
            var current = element.attr(attribute) || "";

            if (current.indexOf(value) < 0) {
                kendo.addAttribute(element, attribute, value);
            } else {
                kendo.removeAttribute(element, attribute, value);
            }
        };

        kendo.matchesMedia = function(mediaQuery) {
            var media = kendo._bootstrapToMedia(mediaQuery) || mediaQuery;
            return support.matchMedia && window.matchMedia(media).matches;
        };

        kendo._bootstrapToMedia = function(bootstrapMedia) {
            return {
                "xs": "(max-width: 576px)",
                "sm": "(min-width: 576px)",
                "md": "(min-width: 768px)",
                "lg": "(min-width: 992px)",
                "xl": "(min-width: 1200px)"
            }[bootstrapMedia];
        };

        kendo.fileGroupMap = {
            audio: [".aif", ".iff", ".m3u", ".m4a", ".mid", ".mp3", ".mpa", ".wav", ".wma", ".ogg", ".wav", ".wma", ".wpl"],
            video: [".3g2", ".3gp", ".avi", ".asf", ".flv", ".m4u", ".rm", ".h264", ".m4v", ".mkv", ".mov", ".mp4", ".mpg",
                    ".rm", ".swf", ".vob", ".wmv"],
            image: [".ai", ".dds", ".heic", ".jpe", "jfif", ".jif", ".jp2", ".jps", ".eps", ".bmp", ".gif", ".jpeg",
                    ".jpg", ".png", ".ps", ".psd", ".svg", ".svgz", ".tif", ".tiff"],
            txt: [".doc", ".docx", ".log", ".pages", ".tex", ".wpd", ".wps", ".odt", ".rtf", ".text", ".txt", ".wks"],
            presentation: [".key", ".odp", ".pps", ".ppt", ".pptx"],
            data: [".xlr", ".xls", ".xlsx"],
            programming: [".tmp", ".bak", ".msi", ".cab", ".cpl", ".cur", ".dll", ".dmp", ".drv", ".icns", ".ico", ".link",
                          ".sys", ".cfg", ".ini", ".asp", ".aspx", ".cer", ".csr", ".css", ".dcr", ".htm", ".html", ".js",
                          ".php", ".rss", ".xhtml"],
            pdf: [".pdf"],
            config: [".apk", ".app", ".bat", ".cgi", ".com", ".exe", ".gadget", ".jar", ".wsf"],
            zip: [".7z", ".cbr", ".gz", ".sitx", ".arj", ".deb", ".pkg", ".rar", ".rpm", ".tar.gz", ".z", ".zip", ".zipx"],
            "disc-image": [".dmg", ".iso", ".toast", ".vcd", ".bin", ".cue", ".mdf"]
        };

        kendo.getFileGroup = function(extension, withPrefix) {
            var fileTypeMap = kendo.fileGroupMap;
            var groups = Object.keys(fileTypeMap);
            var type = "file";

            if (extension === undefined$1 || !extension.length) {
                return type;
            }

            for (var i = 0; i < groups.length; i += 1) {
                var extensions = fileTypeMap[groups[i]];

                if (extensions.indexOf(extension.toLowerCase()) > -1) {
                   return withPrefix ? "file-" + groups[i] : groups[i];
                }
            }

            return type;
        };

        kendo.getFileSizeMessage = function(size) {
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];

            if (size === 0) {
                return '0 Byte';
            }

            var i = parseInt(Math.floor(Math.log(size) / Math.log(1024)), 10);
            return Math.round(size / Math.pow(1024, i), 2) + ' ' + sizes[i];
        };

        kendo.selectorFromClasses = function(classes) {
            return "." + classes.split(" ").join(".");
        };

        // Standardized Properties and CSS classes

        var themeColorValues = ['base', 'primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse'];
        var fillValues = ['solid', 'outline', 'flat'];
        //var postitionValues = ['edge', 'outside', 'inside'];
        var shapeValues = ['rectangle', 'square'];
        var sizeValues = [ ['small', 'sm'], ['medium', 'md'], ['large', 'lg'] ];
        var roundedValues = [ ['small', 'sm'], ['medium', 'md'], ['large', 'lg'] ];
        //var alignValues = [ ['top start', 'top-start'], ['top end', 'top-end'], ['bottom start', 'bottom-start'], ['bottom end', 'bottom-end'] ];
        var positionModeValues = [ 'fixed', 'static', 'sticky', 'absolute' ];
        var resizeValues = [ ['both', 'resize'], ['horizontal', 'resize-x'], ['vertical', 'resize-y'] ];
        var overflowValues = [ 'auto', 'hidden', 'visible', 'scroll', 'clip' ];

        kendo.cssProperties = (function() {
            var defaultValues = {},
                propertyDictionary = {};

            function registerPrefix(widget, prefix) {
                var dict = kendo.cssProperties.propertyDictionary;

                if (!dict[widget]) {
                    dict[widget] = {};
                }

                dict[widget][PREFIX] = prefix;
            }

            function registerValues(widget, args) {
                var dict = kendo.cssProperties.propertyDictionary,
                    i, j, prop, values, newValues, currentValue;

                for (i = 0; i < args.length; i++) {
                    prop = args[i].prop;
                    newValues = args[i].values;

                    if (!dict[widget][prop]) {
                        dict[widget][prop] = {};
                    }

                    values = dict[widget][prop];

                    for (j = 0; j < newValues.length; j++) {
                        currentValue = newValues[j];

                        if (isArray(newValues[j])) {
                            values[currentValue[0]] = currentValue[1];
                        } else {
                            values[currentValue] = currentValue;
                        }
                    }
                }
            }

            function registerCssClass(propName, value, shorthand) {
                if (!defaultValues[propName]) {
                    defaultValues[propName] = {};
                }

                defaultValues[propName][value] = shorthand || value;
            }

            function registerCssClasses(propName, arr) {
                for (var i = 0; i < arr.length; i++) {
                    if (isArray(arr[i])) {
                        registerCssClass(propName, arr[i][0], arr[i][1]);
                    } else {
                        registerCssClass(propName, arr[i]);
                    }
                }
            }

            function getValidClass(args) {
                var widget = args.widget,
                    propName = args.propName,
                    value = args.value,
                    fill = args.fill,
                    cssProperties = kendo.cssProperties,
                    defaultValues = cssProperties.defaultValues[propName],
                    widgetProperties = cssProperties.propertyDictionary[widget],
                    overridePrefix = args.prefix,
                    widgetValues, validValue, prefix;

                if (!widgetProperties) {
                    return "";
                }

                widgetValues = widgetProperties[propName];
                validValue = widgetValues ? widgetValues[value] || defaultValues[value] : defaultValues[value];

                if (validValue) {
                    if (propName === "themeColor") {
                        prefix = widgetProperties[PREFIX] + fill + "-";
                    } else if (propName === "positionMode") {
                        prefix = "k-pos-";
                    } else if (propName === "rounded") {
                        prefix = "k-rounded-";
                    } else if (propName === "resize") {
                        prefix = "k-";
                    } else if (propName === "overflow") {
                        prefix = "k-overflow-";
                    } else {
                        prefix = widgetProperties[PREFIX];
                    }

                    prefix = overridePrefix || prefix;

                    return prefix + validValue;
                } else {
                    return "";
                }
            }

            registerCssClasses("themeColor", themeColorValues);
            registerCssClasses("fillMode", fillValues);
            registerCssClasses("shape", shapeValues);
            registerCssClasses("size", sizeValues);
            registerCssClasses("positionMode", positionModeValues);
            registerCssClasses("rounded", roundedValues);
            registerCssClasses("resize", resizeValues);
            registerCssClasses("overflow", overflowValues);

            return {
                positionModeValues: positionModeValues,
                roundedValues: roundedValues,
                sizeValues: sizeValues,
                shapeValues: shapeValues,
                fillModeValues: fillValues,
                themeColorValues: themeColorValues,

                defaultValues: defaultValues,
                propertyDictionary: propertyDictionary,

                registerValues: registerValues,
                getValidClass: getValidClass,
                registerPrefix: registerPrefix
            };
        }());

        //To do: delete below after implementing new styles and classes for BottomNavigation
        kendo.registerCssClass = function(propName, value, shorthand) {
            if (!kendo.propertyToCssClassMap[propName]) {
                kendo.propertyToCssClassMap[propName] = {};
            }

            kendo.propertyToCssClassMap[propName][value] = shorthand || value;
        };

        kendo.registerCssClasses = function(propName, arr) {
            for (var i = 0; i < arr.length; i++) {
                if (isArray(arr[i])) {
                    kendo.registerCssClass(propName, arr[i][0], arr[i][1]);
                } else {
                    kendo.registerCssClass(propName, arr[i]);
                }
            }
        };

        kendo.getValidCssClass = function(prefix, propName, value) {
            var validValue = kendo.propertyToCssClassMap[propName][value];

            if (validValue) {
                return prefix + validValue;
            }
        };

        kendo.propertyToCssClassMap = {};

        kendo.registerCssClasses("themeColor", themeColorValues);
        kendo.registerCssClasses("fill", fillValues);
        //kendo.registerCssClasses("postition", postitionValues);
        kendo.registerCssClasses("shape", shapeValues);
        kendo.registerCssClasses("size", sizeValues);
        //kendo.registerCssClasses("align", alignValues);
        kendo.registerCssClasses("positionMode", positionModeValues);

        kendo.applyStylesFromKendoAttributes = function(element, styleProps) {
            var selector = styleProps.map(function (styleProp){ return ("[" + (kendo.attr(("style-" + styleProp))) + "]"); }).join(',');
            element.find(selector).addBack(selector).each(function (_, currentElement) {
                var $currentElement = $(currentElement);
                styleProps.forEach(function(styleProp) {
                    var kendoAttr = kendo.attr(("style-" + styleProp));
                    if ($currentElement.attr(kendoAttr)) {
                        $currentElement.css(styleProp, $currentElement.attr(kendoAttr));
                        $currentElement.removeAttr(kendoAttr);
                    }
                });
            });
        };

        // jQuery deferred helpers

        // influenced from: https://gist.github.com/fearphage/4341799
        kendo.whenAll = function(array) {
            var resolveValues = arguments.length == 1 && Array.isArray(array) ? array : Array.prototype.slice.call(arguments),
                length = resolveValues.length,
                remaining = length,
                deferred = $.Deferred(),
                i = 0,
                failed = 0,
                rejectContexts = Array(length),
                rejectValues = Array(length),
                resolveContexts = Array(length),
                value;

            function updateFunc(index, contexts, values) {
                return function() {
                    if (values != resolveValues) {
                        failed++;
                    }

                    deferred.notifyWith(
                        contexts[index] = this,
                        values[index] = Array.prototype.slice.call(arguments)
                    );

                    if (!(--remaining)) {
                        deferred[(!failed ? 'resolve' : 'reject') + 'With'](contexts, values);
                    }
                };
            }

            for (; i < length; i++) {
                if ((value = resolveValues[i]) && kendo.isFunction(value.promise)) {
                    value.promise()
                        .done(updateFunc(i, resolveContexts, resolveValues))
                        .fail(updateFunc(i, rejectContexts, rejectValues));
                }

                else {
                    deferred.notifyWith(this, value);
                    --remaining;
                }
            }

            if (!remaining) {
                deferred.resolveWith(resolveContexts, resolveValues);
            }

            return deferred.promise();
        };

        // kendo.saveAs -----------------------------------------------
        (function() {
            function postToProxy(dataURI, fileName, proxyURL, proxyTarget) {
                var form = $("<form>").attr({
                    action: proxyURL,
                    method: "POST",
                    target: proxyTarget
                });

                var data = kendo.antiForgeryTokens();
                data.fileName = fileName;

                var parts = dataURI.split(";base64,");
                data.contentType = parts[0].replace("data:", "");
                data.base64 = parts[1];

                for (var name in data) {
                    if (data.hasOwnProperty(name)) {
                        $('<input>').attr({
                            value: data[name],
                            name: name,
                            type: "hidden"
                        }).appendTo(form);
                    }
                }

                form.appendTo("body").submit().remove();
            }

            var fileSaver = document.createElement("a");
            var downloadAttribute = "download" in fileSaver && !kendo.support.browser.edge;

            function saveAsBlob(dataURI, fileName) {
                var blob = dataURI; // could be a Blob object

                if (typeof dataURI == "string") {
                    var parts = dataURI.split(";base64,");
                    var contentType = parts[0];
                    var base64 = atob(parts[1]);
                    var array = new Uint8Array(base64.length);

                    for (var idx = 0; idx < base64.length; idx++) {
                        array[idx] = base64.charCodeAt(idx);
                    }
                    blob = new Blob([array.buffer], { type: contentType });
                }

                navigator.msSaveBlob(blob, fileName);
            }

            function saveAsDataURI(dataURI, fileName) {
                if (window.Blob && dataURI instanceof Blob) {
                    dataURI = URL.createObjectURL(dataURI);
                }

                fileSaver.download = fileName;
                fileSaver.href = dataURI;

                var e = document.createEvent("MouseEvents");
                e.initMouseEvent("click", true, false, window,
                    0, 0, 0, 0, 0, false, false, false, false, 0, null);

                fileSaver.dispatchEvent(e);
                setTimeout(function() {
                    URL.revokeObjectURL(dataURI);
                });
            }

            kendo.saveAs = function(options) {
                var save = postToProxy;

                if (!options.forceProxy) {
                    if (downloadAttribute) {
                        save = saveAsDataURI;
                    } else if (navigator.msSaveBlob) {
                        save = saveAsBlob;
                    }
                }

                save(options.dataURI, options.fileName, options.proxyURL, options.proxyTarget);
            };
        })();

        // kendo proxySetters
        kendo.proxyModelSetters = function proxyModelSetters(data) {
            var observable = {};

            Object.keys(data || {}).forEach(function(property) {
              Object.defineProperty(observable, property, {
                get: function() {
                  return data[property];
                },
                set: function(value) {
                  data[property] = value;
                  data.dirty = true;
                }
              });
            });

            return observable;
        };

        kendo.getSeriesColors = function() {
            var seriesColorsTemplate = '<div class="k-var--series-a"></div>' +
                    '<div class="k-var--series-b"></div>' +
                    '<div class="k-var--series-c"></div>' +
                    '<div class="k-var--series-d"></div>' +
                    '<div class="k-var--series-e"></div>' +
                    '<div class="k-var--series-f"></div>',
                series = $(seriesColorsTemplate),
                colors = [];

            series.appendTo($('body'));

            series.each(function(i, item) {
                colors.push($(item).css("background-color"));
            });

            series.remove();

            return colors;
        };

        kendo.isElement = function(element) {
            return element instanceof Element || element instanceof HTMLDocument;
        };

        // Kendo defaults
        (function() {

            kendo.defaults = kendo.defaults || {};
            kendo.setDefaults = function(key, value) {
                var path = key.split(".");
                var curr = kendo.defaults;

                key = path.pop();

                path.forEach(function(part) {
                    if (curr[part] === undefined$1) {
                        curr[part] = {};
                    }

                    curr = curr[part];
                });

                if (value.constructor === Object) {
                    curr[key] = deepExtend({}, curr[key], value);
                } else {
                    curr[key] = value;
                }
            };

            // Use external global flags for templates.
            kendo.debugTemplates = window.DEBUG_KENDO_TEMPLATES;

            // Setup default mediaQuery breakpoints
            kendo.setDefaults('breakpoints', defaultBreakpoints);
        })();

        // Implement type() as it has been depricated in jQuery
        (function() {
            kendo.class2type = {};

            jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
                function( _i, name ) {
                    kendo.class2type[ "[object " + name + "]" ] = name.toLowerCase();
                } );

            kendo.type = function(obj) {
                if ( obj == null ) {
                    return obj + "";
                }

                // Support: Android <=2.3 only (functionish RegExp)
                return typeof obj === "object" || typeof obj === "function" ?
                    kendo.class2type[Object.prototype.toString.call(obj)] || "object" :
                    typeof obj;
            };
        }());

        var KendoLicensing = { validatePackage: function() { return true; },setScriptKey: function() {} };

        window.KendoLicensing = {
            setScriptKey: KendoLicensing.setScriptKey
        };

        function validatePackage() {
            return KendoLicensing.validatePackage(packageMetadata);
        }

        function addWatermarkOverlay(el) {
            KendoLicensing.addWatermarkOverlay && KendoLicensing.addWatermarkOverlay(el, packageMetadata);
            KendoLicensing.showBanner && KendoLicensing.showBanner(packageMetadata);
        }

    })(jQuery, window);
    var kendo$$ = kendo;

    var __meta__$14 = {
        id: "router",
        name: "Router",
        category: "framework",
        description: "The Router class is responsible for tracking the application state and navigating between the application states.",
        depends: [ "core" ],
        hidden: false
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            CHANGE = "change",
            BACK = "back",
            SAME = "same",
            support = kendo.support,
            location = window.location,
            history = window.history,
            CHECK_URL_INTERVAL = 50,
            BROKEN_BACK_NAV = kendo.support.browser.msie,
            hashStrip = /^#*/,
            document = window.document;

        function absoluteURL(path, pathPrefix) {
            if (!pathPrefix) {
                return path;
            }

            if (path + "/" === pathPrefix) {
                path = pathPrefix;
            }

            var regEx = new RegExp("^" + pathPrefix, "i");

            if (!regEx.test(path)) {
                path = pathPrefix + "/" + path;
            }

            return location.protocol + '//' + (location.host + "/" + path).replace(/\/\/+/g, '/');
        }

        function hashDelimiter(bang) {
            return bang ? "#!" : "#";
        }

        function locationHash(hashDelimiter) {
            var href = location.href;

            // ignore normal anchors if in hashbang mode - however, still return "" if no hash present
            if (hashDelimiter === "#!" && href.indexOf("#") > -1 && href.indexOf("#!") < 0) {
                return null;
            }

            return href.split(hashDelimiter)[1] || "";
        }

        function stripRoot(root, url) {
            if (url.indexOf(root) === 0) {
                return (url.substr(root.length)).replace(/\/\//g, '/');
            } else {
                return url;
            }
        }

        var HistoryAdapter = kendo.Class.extend({
            back: function() {
                if (BROKEN_BACK_NAV) {
                    setTimeout(function() { history.back(); });
                } else {
                    history.back();
                }
            },

            forward: function() {
                if (BROKEN_BACK_NAV) {
                    setTimeout(function() { history.forward(); });
                } else {
                    history.forward();
                }
            },

            length: function() {
                return history.length;
            },

            replaceLocation: function(url) {
                location.replace(url);
            }
        });

        var PushStateAdapter = HistoryAdapter.extend({
            init: function(root) {
                this.root = root;
            },

            navigate: function(to) {
                history.pushState({}, document.title, absoluteURL(to, this.root));
            },

            replace: function(to) {
                history.replaceState({}, document.title, absoluteURL(to, this.root));
            },

            normalize: function(url) {
                return stripRoot(this.root, url);
            },

            current: function() {
                var current = location.pathname;

                if (location.search) {
                    current += location.search;
                }

                return stripRoot(this.root, current);
            },

            change: function(callback) {
                $(window).bind("popstate.kendo", callback);
            },

            stop: function() {
                $(window).unbind("popstate.kendo");
            },

            normalizeCurrent: function(options) {
                var fixedUrl,
                    root = options.root,
                    pathname = location.pathname,
                    hash = locationHash(hashDelimiter(options.hashBang));

                if (root === pathname + "/") {
                    fixedUrl = root;
                }

                if (root === pathname && hash) {
                    fixedUrl = absoluteURL(hash.replace(hashStrip, ''), root);
                }

                if (fixedUrl) {
                    history.pushState({}, document.title, fixedUrl);
                }
            }
        });

        function fixHash(url) {
            return url.replace(/^(#)?/, "#");
        }

        function fixBang(url) {
            return url.replace(/^(#(!)?)?/, "#!");
        }

        var HashAdapter = HistoryAdapter.extend({
            init: function(bang) {
                this._id = kendo.guid();
                this.prefix = hashDelimiter(bang);
                this.fix = bang ? fixBang : fixHash;
            },

            navigate: function(to) {
                location.hash = this.fix(to);
            },

            replace: function(to) {
                this.replaceLocation(this.fix(to));
            },

            normalize: function(url) {
                if (url.indexOf(this.prefix) < 0) {
                   return url;
                } else {
                    return url.split(this.prefix)[1];
                }
            },

            change: function(callback) {
                if (support.hashChange) {
                    $(window).on("hashchange." + this._id, callback);
                } else {
                    this._interval = setInterval(callback, CHECK_URL_INTERVAL);
                }
            },

            stop: function() {
                $(window).off("hashchange." + this._id);
                clearInterval(this._interval);
            },

            current: function() {
                return locationHash(this.prefix);
            },

            normalizeCurrent: function(options) {
                var pathname = location.pathname,
                    root = options.root;

                if (options.pushState && root !== pathname) {
                    this.replaceLocation(root + this.prefix + stripRoot(root, pathname));
                    return true; // browser will reload at this point.
                }

                return false;
            }
        });

        var History = kendo.Observable.extend({
            start: function(options) {
                options = options || {};

                this.bind([CHANGE, BACK, SAME], options);

                if (this._started) {
                    return;
                }

                this._started = true;

                options.root = options.root || "/";

                var adapter = this.createAdapter(options),
                    current;

                // adapter may reload the document
                if (adapter.normalizeCurrent(options)) {
                    return;
                }

                current = adapter.current();

                $.extend(this, {
                    adapter: adapter,
                    root: options.root,
                    historyLength: adapter.length(),
                    current: current,
                    locations: [current]
                });

                adapter.change(this._checkUrl.bind(this));
            },

            createAdapter: function(options) {
               return support.pushState && options.pushState ? new PushStateAdapter(options.root) : new HashAdapter(options.hashBang);
            },

            stop: function() {
                if (!this._started) {
                    return;
                }
                this.adapter.stop();
                this.unbind(CHANGE);
                this._started = false;
            },

            change: function(callback) {
                this.bind(CHANGE, callback);
            },

            replace: function(to, silent) {

                this._navigate(to, silent, function(adapter) {
                    adapter.replace(to);
                    this.locations[this.locations.length - 1] = this.current;
                });
            },

            navigate: function(to, silent) {
                if (to === "#:back") {
                    this.backCalled = true;
                    this.adapter.back();
                    return;
                }

                this._navigate(to, silent, function(adapter) {
                    adapter.navigate(to);
                    this.locations.push(this.current);
                });
            },

            _navigate: function(to, silent, callback) {
                var adapter = this.adapter;

                to = adapter.normalize(to);

                if (this.current === to || this.current === decodeURIComponent(to)) {
                    this.trigger(SAME);
                    return;
                }

                if (!silent) {
                    if (this.trigger(CHANGE, { url: to, decode: false })) {
                        return;
                    }
                }

                this.current = to;

                callback.call(this, adapter);

                this.historyLength = adapter.length();
            },

            _checkUrl: function() {
                var adapter = this.adapter,
                    current = adapter.current(),
                    newLength = adapter.length(),
                    navigatingInExisting = this.historyLength === newLength,
                    back = current === this.locations[this.locations.length - 2] && navigatingInExisting,
                    backCalled = this.backCalled,
                    prev = this.current;

                if (current === null || this.current === current || this.current === decodeURIComponent(current)) {
                    return true;
                }

                this.historyLength = newLength;
                this.backCalled = false;

                this.current = current;

                if (back && this.trigger("back", { url: prev, to: current })) {
                    adapter.forward();
                    this.current = prev;
                    return;
                }

                if (this.trigger(CHANGE, { url: current, backButtonPressed: !backCalled })) {
                    if (back) {
                        adapter.forward();
                    } else {
                        adapter.back();
                        this.historyLength --;
                    }
                    this.current = prev;
                    return;
                }

                if (back) {
                    this.locations.pop();
                } else {
                    this.locations.push(current);
                }
            }
        });

        kendo.History = History;
        kendo.History.HistoryAdapter = HistoryAdapter;
        kendo.History.HashAdapter = HashAdapter;
        kendo.History.PushStateAdapter = PushStateAdapter;
        kendo.absoluteURL = absoluteURL;
        kendo.history = new History();
    })(window.kendo.jQuery);
    var kendo$_ = kendo;

    (function() {
        var kendo = window.kendo,
            history = kendo.history,
            Observable = kendo.Observable,
            INIT = "init",
            ROUTE_MISSING = "routeMissing",
            CHANGE = "change",
            BACK = "back",
            SAME = "same",
            optionalParam = /\((.*?)\)/g,
            namedParam = /(\(\?)?:\w+/g,
            splatParam = /\*\w+/g,
            escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

        function namedParamReplace(match, optional) {
            return optional ? match : '([^\/]+)';
        }

        function routeToRegExp(route, ignoreCase) {
            return new RegExp('^' + route
                .replace(escapeRegExp, '\\$&')
                .replace(optionalParam, '(?:$1)?')
                .replace(namedParam, namedParamReplace)
                .replace(splatParam, '(.*?)') + '$', ignoreCase ? "i" : "");
        }

        function stripUrl(url) {
            return url.replace(/(\?.*)|(#.*)/g, "");
        }

        var Route = kendo.Class.extend({
            init: function(route, callback, ignoreCase) {
                if (!(route instanceof RegExp)) {
                    route = routeToRegExp(route, ignoreCase);
                }

                this.route = route;
                this._callback = callback;
            },

            callback: function(url, back, decode) {
                var params,
                    idx = 0,
                    length,
                    queryStringParams = kendo.parseQueryStringParams(url);
                    queryStringParams._back = back;

                url = stripUrl(url);
                params = this.route.exec(url).slice(1);
                length = params.length;

                if (decode) {
                    for (; idx < length; idx ++) {
                        if (typeof params[idx] !== 'undefined') {
                            params[idx] = decodeURIComponent(params[idx]);
                        }
                    }
                }

                params.push(queryStringParams);

                this._callback.apply(null, params);
            },

            worksWith: function(url, back, decode) {
                if (this.route.test(stripUrl(url))) {
                    this.callback(url, back, decode);
                    return true;
                } else {
                    return false;
                }
            }
        });

        var Router = Observable.extend({
            init: function(options) {
                if (!options) {
                    options = {};
                }

                Observable.fn.init.call(this);

                this.routes = [];
                this.pushState = options.pushState;
                this.hashBang = options.hashBang;
                this.root = options.root;
                this.ignoreCase = options.ignoreCase !== false;

                this.bind([INIT, ROUTE_MISSING, CHANGE, SAME, BACK], options);
            },

            destroy: function() {
                history.unbind(CHANGE, this._urlChangedProxy);
                history.unbind(SAME, this._sameProxy);
                history.unbind(BACK, this._backProxy);
                this.unbind();
            },

            start: function() {
                var that = this,
                    sameProxy = function() { that._same(); },
                    backProxy = function(e) { that._back(e); },
                    urlChangedProxy = function(e) { that._urlChanged(e); };

                history.start({
                    same: sameProxy,
                    change: urlChangedProxy,
                    back: backProxy,
                    pushState: that.pushState,
                    hashBang: that.hashBang,
                    root: that.root
                });

                // eslint-disable-next-line no-undef
                var initEventObject = { url: history.current || "/", preventDefault: $.noop };

                if (!that.trigger(INIT, initEventObject)) {
                    that._urlChanged(initEventObject);
                }

                this._urlChangedProxy = urlChangedProxy;
                this._backProxy = backProxy;
            },

            route: function(route, callback) {
                this.routes.push(new Route(route, callback, this.ignoreCase));
            },

            navigate: function(url, silent) {
                kendo.history.navigate(url, silent);
            },

            replace: function(url, silent) {
                kendo.history.replace(url, silent);
            },

            _back: function(e) {
                if (this.trigger(BACK, { url: e.url, to: e.to })) {
                    e.preventDefault();
                }
            },

            _same: function() {
                this.trigger(SAME);
            },

            _urlChanged: function(e) {
                var url = e.url;
                var decode = !!e.decode;
                var back = e.backButtonPressed;

                if (!url) {
                    url = "/";
                }

                if (this.trigger(CHANGE, { url: e.url, params: kendo.parseQueryStringParams(e.url), backButtonPressed: back })) {
                    e.preventDefault();
                    return;
                }

                var idx = 0,
                    routes = this.routes,
                    route,
                    length = routes.length;

                for (; idx < length; idx ++) {
                     route = routes[idx];

                     if (route.worksWith(url, back, decode)) {
                        return;
                     }
                }

                if (this.trigger(ROUTE_MISSING, { url: url, params: kendo.parseQueryStringParams(url), backButtonPressed: back })) {
                    e.preventDefault();
                }
            }
        });

        kendo.Router = Router;
    })();

    var __meta__$13 = {
        id: "userevents",
        name: "User Events",
        category: "framework",
        depends: [ "core" ],
        hidden: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            support = kendo.support,
            Class = kendo.Class,
            Observable = kendo.Observable,
            now = Date.now,
            extend = $.extend,
            OS = support.mobileOS,
            invalidZeroEvents = OS && OS.android,
            DEFAULT_MIN_HOLD = 800,
            CLICK_DELAY = 300,
            DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.

            // UserEvents events
            PRESS = "press",
            HOLD = "hold",
            SELECT = "select",
            START = "start",
            MOVE = "move",
            END = "end",
            CANCEL = "cancel",
            TAP = "tap",
            DOUBLETAP = "doubleTap",
            RELEASE = "release",
            GESTURESTART = "gesturestart",
            GESTURECHANGE = "gesturechange",
            GESTUREEND = "gestureend",
            GESTURETAP = "gesturetap";

        var THRESHOLD = {
            "api": 0,
            "touch": 0,
            "mouse": 9,
            "pointer": 9
        };

        var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);

        function touchDelta(touch1, touch2) {
            var x1 = touch1.x.location,
                y1 = touch1.y.location,
                x2 = touch2.x.location,
                y2 = touch2.y.location,
                dx = x1 - x2,
                dy = y1 - y2;

            return {
                center: {
                   x: (x1 + x2) / 2,
                   y: (y1 + y2) / 2
                },

                distance: Math.sqrt(dx * dx + dy * dy)
            };
        }

        function getTouches(e) {
            var touches = [],
                originalEvent = e.originalEvent,
                currentTarget = e.currentTarget,
                idx = 0, length,
                changedTouches,
                touch;

            if (e.api) {
                touches.push({
                    id: 2, // hardcoded ID for API call;
                    event: e,
                    target: e.target,
                    currentTarget: e.target,
                    location: e,
                    type: "api"
                });
            }
            else if (e.type.match(/touch/)) {
                changedTouches = originalEvent ? originalEvent.changedTouches : [];
                for (length = changedTouches.length; idx < length; idx ++) {
                    touch = changedTouches[idx];
                    touches.push({
                        location: touch,
                        event: e,
                        target: touch.target,
                        currentTarget: currentTarget,
                        id: touch.identifier,
                        type: "touch"
                    });
                }
            }
            else if (support.pointers || support.msPointers) {
                touches.push({
                    location: originalEvent,
                    event: e,
                    target: e.target,
                    currentTarget: currentTarget,
                    id: originalEvent.pointerId,
                    type: "pointer"
                });
            } else {
                touches.push({
                    id: 1, // hardcoded ID for mouse event;
                    event: e,
                    target: e.target,
                    currentTarget: currentTarget,
                    location: e,
                    type: "mouse"
                });
            }

            return touches;
        }

        var TouchAxis = Class.extend({
            init: function(axis, location) {
                var that = this;

                that.axis = axis;

                that._updateLocationData(location);

                that.startLocation = that.location;
                that.velocity = that.delta = 0;
                that.timeStamp = now();
            },

            move: function(location) {
                var that = this,
                    offset = location["page" + that.axis],
                    timeStamp = now(),
                    timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;

                if (!offset && invalidZeroEvents) {
                    return;
                }

                that.delta = offset - that.location;

                that._updateLocationData(location);

                that.initialDelta = offset - that.startLocation;
                that.velocity = that.delta / timeDelta;
                that.timeStamp = timeStamp;
            },

            _updateLocationData: function(location) {
                var that = this, axis = that.axis;

                that.location = location["page" + axis];
                that.client = location["client" + axis];
                that.screen = location["screen" + axis];
            }
        });

        var Touch = Class.extend({
            init: function(userEvents, target, touchInfo) {
                extend(this, {
                    x: new TouchAxis("X", touchInfo.location),
                    y: new TouchAxis("Y", touchInfo.location),
                    type: touchInfo.type,
                    useClickAsTap: userEvents.useClickAsTap,
                    threshold: userEvents.threshold || THRESHOLD[touchInfo.type],
                    userEvents: userEvents,
                    target: target,
                    currentTarget: touchInfo.currentTarget,
                    initialTouch: touchInfo.target,
                    id: touchInfo.id,
                    pressEvent: touchInfo,
                    _clicks: userEvents._clicks,
                    supportDoubleTap: userEvents.supportDoubleTap,
                    _moved: false,
                    _finished: false
                });
            },

            press: function() {
                this._holdTimeout = setTimeout(this._hold.bind(this), this.userEvents.minHold);
                this._trigger(PRESS, this.pressEvent);
            },

            _tap: function(touchInfo) {
                var that = this;
                that.userEvents._clicks++;
                if (that.userEvents._clicks == 1) {
                    that._clickTimeout = setTimeout(function() {
                        if (that.userEvents._clicks == 1) {
                            that._trigger(TAP, touchInfo);
                        }
                        else {
                            that._trigger(DOUBLETAP, touchInfo);
                        }
                        that.userEvents._clicks = 0;
                    }, CLICK_DELAY);
                }
            },

            _hold: function() {
                this._trigger(HOLD, this.pressEvent);
            },

            move: function(touchInfo) {
                var that = this;
                var preventMove = touchInfo.type !== "api" && that.userEvents._shouldNotMove;

                if (that._finished || preventMove) { return; }

                that.x.move(touchInfo.location);
                that.y.move(touchInfo.location);

                if (!that._moved) {
                    if (that._withinIgnoreThreshold()) {
                        return;
                    }

                    if (!UserEvents.current || UserEvents.current === that.userEvents) {
                        that._start(touchInfo);
                    } else {
                        return that.dispose();
                    }
                }

                // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
                if (!that._finished) {
                    that._trigger(MOVE, touchInfo);
                }
            },

            end: function(touchInfo) {
                this.endTime = now();

                if (this._finished) { return; }

                // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
                this._finished = true;

                this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)

                if (this._moved) {
                    this._trigger(END, touchInfo);
                } else {
                    if (!this.useClickAsTap) {
                        if (this.supportDoubleTap) {
                            this._tap(touchInfo);
                        }
                        else {
                            this._trigger(TAP, touchInfo);
                        }
                    }
                }

                clearTimeout(this._holdTimeout);

                this.dispose();
            },

            dispose: function() {
                var userEvents = this.userEvents,
                    activeTouches = userEvents.touches;

                this._finished = true;
                this.pressEvent = null;
                clearTimeout(this._holdTimeout);

                activeTouches.splice($.inArray(this, activeTouches), 1);
            },

            skip: function() {
                this.dispose();
            },

            cancel: function() {
                this.dispose();
            },

            isMoved: function() {
                return this._moved;
            },

            _start: function(touchInfo) {
                clearTimeout(this._holdTimeout);

                this.startTime = now();
                this._moved = true;
                this._trigger(START, touchInfo);
            },

            _trigger: function(name, touchInfo) {
                var that = this,
                    jQueryEvent = touchInfo.event,
                    data = {
                        touch: that,
                        x: that.x,
                        y: that.y,
                        target: that.target,
                        event: jQueryEvent
                    };

                if (that.userEvents.notify(name, data)) {
                    jQueryEvent.preventDefault();
                }
            },

            _withinIgnoreThreshold: function() {
                var xDelta = this.x.initialDelta,
                    yDelta = this.y.initialDelta;

                return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;
            }
        });

        function withEachUpEvent(callback) {
            var downEvents = kendo.eventMap.up.split(" "),
                idx = 0,
                length = downEvents.length;

            for (; idx < length; idx ++) {
                callback(downEvents[idx]);
            }
        }

        var UserEvents = Observable.extend({
            init: function(element, options) {
                var that = this,
                    filter,
                    ns = kendo.guid();

                options = options || {};
                filter = that.filter = options.filter;
                that.threshold = options.threshold || DEFAULT_THRESHOLD;
                that.minHold = options.minHold || DEFAULT_MIN_HOLD;
                that.touches = [];
                that._maxTouches = options.multiTouch ? 2 : 1;
                that.allowSelection = options.allowSelection;
                that.captureUpIfMoved = options.captureUpIfMoved;
                that.useClickAsTap = !options.fastTap && !support.delayedClick();
                that.eventNS = ns;
                that._clicks = 0;
                that.supportDoubleTap = options.supportDoubleTap;

                element = $(element).handler(that);
                Observable.fn.init.call(that);

                extend(that, {
                    element: element,
                    // the touch events lock to the element anyway, so no need for the global setting
                    surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),
                    stopPropagation: options.stopPropagation,
                    pressed: false
                });

                that.surface.handler(that)
                    .on(kendo.applyEventMap("move", ns), "_move")
                    .on(kendo.applyEventMap("up cancel", ns), "_end");

                element.on(kendo.applyEventMap("down", ns), filter, "_start");

                if (that.useClickAsTap) {
                    element.on(kendo.applyEventMap("click", ns), filter, "_click");
                }

                if (support.pointers || support.msPointers) {
                    //touch-action:none will not work for IE10
                    if (support.browser.version < 11) {
                        var defaultAction = "pinch-zoom double-tap-zoom";
                        element.css("-ms-touch-action", options.touchAction && options.touchAction != "none" ? defaultAction + " " + options.touchAction : defaultAction);
                    } else {
                        element.css("touch-action", options.touchAction || "none");
                    }
                }

                if (options.preventDragEvent) {
                    element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
                }

                element.on(kendo.applyEventMap("mousedown", ns), filter, { root: element }, "_select");

                if (that.captureUpIfMoved && support.eventCapture) {
                    var surfaceElement = that.surface[0],
                        preventIfMovingProxy = that.preventIfMoving.bind(that);

                    withEachUpEvent(function(eventName) {
                        surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
                    });
                }

                that.bind([
                PRESS,
                HOLD,
                TAP,
                DOUBLETAP,
                START,
                MOVE,
                END,
                RELEASE,
                CANCEL,
                GESTURESTART,
                GESTURECHANGE,
                GESTUREEND,
                GESTURETAP,
                SELECT
                ], options);
            },

            preventIfMoving: function(e) {
                if (this._isMoved()) {
                    e.preventDefault();
                }
            },

            destroy: function() {
                var that = this;

                if (that._destroyed) {
                    return;
                }

                that._destroyed = true;

                if (that.captureUpIfMoved && support.eventCapture) {
                    var surfaceElement = that.surface[0];
                    withEachUpEvent(function(eventName) {
                        surfaceElement.removeEventListener(eventName, that.preventIfMoving);
                    });
                }

                that.element.kendoDestroy(that.eventNS);
                that.surface.kendoDestroy(that.eventNS);
                that.element.removeData("handler");
                that.surface.removeData("handler");
                that._disposeAll();

                that.unbind();
                delete that.surface;
                delete that.element;
                delete that.currentTarget;
            },

            capture: function() {
                UserEvents.current = this;
            },

            cancel: function() {
                this._disposeAll();
                this.trigger(CANCEL);
            },

            notify: function(eventName, data) {
                var that = this,
                    touches = that.touches;

                if (this._isMultiTouch()) {
                    switch (eventName) {
                        case MOVE:
                            eventName = GESTURECHANGE;
                            break;
                        case END:
                            eventName = GESTUREEND;
                            break;
                        case TAP:
                            eventName = GESTURETAP;
                            break;
                    }

                    extend(data, { touches: touches }, touchDelta(touches[0], touches[1]));
                }

                return this.trigger(eventName, extend(data, { type: eventName }));
            },

            // API
            press: function(x, y, target) {
                this._apiCall("_start", x, y, target);
            },

            move: function(x, y) {
                this._apiCall("_move", x, y);
            },

            end: function(x, y) {
                this._apiCall("_end", x, y);
            },

            _isMultiTouch: function() {
                return this.touches.length > 1;
            },

            _maxTouchesReached: function() {
                return this.touches.length >= this._maxTouches;
            },

            _disposeAll: function() {
                var touches = this.touches;
                while (touches.length > 0) {
                    touches.pop().dispose();
                }
            },

            _isMoved: function() {
                return $.grep(this.touches, function(touch) {
                    return touch.isMoved();
                }).length;
            },

            _select: function(e) {
               if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
                   e.preventDefault();
               }
            },

            _start: function(e) {
                var that = this,
                    idx = 0,
                    filter = that.filter,
                    target,
                    touches = getTouches(e),
                    length = touches.length,
                    touch,
                    which = e.which;

                if ((which && which > 1) || (that._maxTouchesReached())) {
                    return;
                }

                UserEvents.current = null;

                that.currentTarget = e.currentTarget;

                if (that.stopPropagation) {
                    e.stopPropagation();
                }

                for (; idx < length; idx ++) {
                    if (that._maxTouchesReached()) {
                        break;
                    }

                    touch = touches[idx];

                    if (filter) {
                        target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
                    } else {
                        target = that.element;
                    }

                    if (!target.length) {
                        continue;
                    }

                    touch = new Touch(that, target, touch);
                    that.touches.push(touch);
                    touch.press();

                    if (that._isMultiTouch()) {
                        that.notify("gesturestart", {});
                    }
                }
            },

            _move: function(e) {
                this._eachTouch("move", e);
            },

            _end: function(e) {
                this._eachTouch("end", e);
            },

            _click: function(e) {
                var data = {
                    touch: {
                        initialTouch: e.target,
                        target: $(e.currentTarget),
                        endTime: now(),
                        x: {
                            location: e.pageX,
                            client: e.clientX
                        },
                        y: {
                            location: e.pageY,
                            client: e.clientY
                        }
                    },
                    x: e.pageX,
                    y: e.pageY,
                    target: $(e.currentTarget),
                    event: e,
                    type: "tap"
                };

                if (this.trigger("tap", data)) {
                    e.preventDefault();
                }
            },

            _eachTouch: function(methodName, e) {
                var that = this,
                    dict = {},
                    touches = getTouches(e),
                    activeTouches = that.touches,
                    idx,
                    touch,
                    touchInfo,
                    matchingTouch;

                for (idx = 0; idx < activeTouches.length; idx ++) {
                    touch = activeTouches[idx];
                    dict[touch.id] = touch;
                }

                for (idx = 0; idx < touches.length; idx ++) {
                    touchInfo = touches[idx];
                    matchingTouch = dict[touchInfo.id];

                    if (matchingTouch) {
                        matchingTouch[methodName](touchInfo);
                    }
                }
            },

            _apiCall: function(type, x, y, target) {
                this[type]({
                    api: true,
                    pageX: x,
                    pageY: y,
                    clientX: x,
                    clientY: y,
                    target: $(target || this.element)[0],
                    stopPropagation: $.noop,
                    preventDefault: $.noop
                });
            }
        });

        var ClickMoveClick = Observable.extend({
            init: function(element, options) {
                var that = this,
                    filter,
                    ns = kendo.guid();

                options = options || {};
                filter = that.filter = options.filter;
                that.touches = [];
                that._maxTouches = 1;
                that.eventNS = ns;
                that._downStarted = 0;

                element = $(element).handler(that);
                Observable.fn.init.call(that);

                extend(that, {
                    element: element,
                    // the touch events lock to the element anyway, so no need for the global setting
                    surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),
                    stopPropagation: options.stopPropagation,
                    pressed: false
                });

                that.surface.handler(that)
                    .on(kendo.applyEventMap("move", ns), "_move")
                    .on(kendo.applyEventMap("cancel up", ns), "cancel");

                element.on(kendo.applyEventMap("down", ns), filter, "_down")
                    .on(kendo.applyEventMap("up", ns), filter, "_up");

                that.bind([
                    START,
                    MOVE,
                    END,
                    HOLD,
                    CANCEL,
                    SELECT
                ], options);
            },

            _down: function(e) {
                if (e.which && e.which > 1) {
                    this.cancel();
                } else {
                    this._downStarted = new Date().getTime();
                    this._downTarget = e.target;
                }
            },

            _up: function(e) {
                var currentMilestone = new Date().getTime(),
                    currentTarget = e.target;

                if ((!e.which || e.which === 1) &&
                    currentMilestone < this._downStarted + CLICK_DELAY &&
                    currentTarget === this._downTarget) {
                        if (this.touches && this.touches.length > 0) {
                            this._end(e);
                        } else {
                            this._start(e);
                        }

                        this._preventCancel = true;
                } else {
                    this.cancel();
                }

                this._downStarted = 0;
                this._downTarget = null;
            },

            destroy: function() {
                var that = this;

                if (that._destroyed) {
                    return;
                }

                that._destroyed = true;

                that.element.kendoDestroy(that.eventNS);
                that.surface.kendoDestroy(that.eventNS);
                that.element.removeData("handler");
                that.surface.removeData("handler");
                that._disposeAll();

                that.unbind();
                delete that.surface;
                delete that.element;
                delete that.currentTarget;
            },

            capture: function() {
                ClickMoveClick.current = this;
            },

            cancel: function() {
                if (this._preventCancel) {
                    this._preventCancel = false;
                    return;
                } else if (this.touches && this.touches.length > 0) {
                    this._disposeAll();
                    this.trigger(CANCEL);
                }
            },

            notify: function(eventName, data) {
                data.clickMoveClick = true;
                return this.trigger(eventName, extend(data, { type: eventName }));
            },

            _maxTouchesReached: function() {
                return this.touches.length >= this._maxTouches;
            },

            _disposeAll: function() {
                var touches = this.touches;

                while (touches.length > 0) {
                    touches.pop().dispose();
                }
            },

            _start: function(e) {
                var that = this,
                    idx = 0,
                    filter = that.filter,
                    target,
                    touches = getTouches(e),
                    length = touches.length,
                    touch,
                    which = e.which;

                if ((which && which > 1) || (that._maxTouchesReached())) {
                    return;
                }

                ClickMoveClick.current = null;

                that.currentTarget = e.currentTarget;

                if (that.stopPropagation) {
                    e.stopPropagation();
                }

                for (; idx < length; idx ++) {
                    if (that._maxTouchesReached()) {
                        break;
                    }

                    touch = touches[idx];

                    if (filter) {
                        target = $(touch.currentTarget);
                    } else {
                        target = that.element;
                    }

                    if (!target.length) {
                        continue;
                    }

                    touch = new Touch(that, target, touch);
                    that.touches.push(touch);
                    touch.press();
                    touch._start(touch);
                }
            },

            _move: function(e) {
                this._eachTouch("move", e);
            },

            _end: function(e) {
                this._eachTouch("move", e);
                this._eachTouch("end", e);
            },

            _eachTouch: function(methodName, e) {
                var that = this,
                    dict = {},
                    touches = getTouches(e),
                    activeTouches = that.touches,
                    idx,
                    touch,
                    touchInfo,
                    matchingTouch;

                for (idx = 0; idx < activeTouches.length; idx ++) {
                    touch = activeTouches[idx];
                    dict[touch.id] = touch;
                }

                for (idx = 0; idx < touches.length; idx ++) {
                    touchInfo = touches[idx];
                    matchingTouch = dict[touchInfo.id];

                    if (matchingTouch) {
                        matchingTouch.x.move(touchInfo.location);
                        matchingTouch.y.move(touchInfo.location);
                        matchingTouch[methodName](touchInfo);
                    }
                }
            }
        });

        UserEvents.defaultThreshold = function(value) {
            DEFAULT_THRESHOLD = value;
        };

        UserEvents.minHold = function(value) {
            DEFAULT_MIN_HOLD = value;
        };

        kendo.getTouches = getTouches;
        kendo.touchDelta = touchDelta;
        kendo.UserEvents = UserEvents;
        kendo.ClickMoveClick = ClickMoveClick;
     })(window.kendo.jQuery);
    var kendo$Z = kendo;

    var __meta__$12 = {
        id: "touch",
        name: "Touch",
        category: "mobile",
        description: "The kendo Touch widget provides a cross-platform compatible API for handling user-initiated touch events, multi-touch gestures and event sequences (drag, swipe, etc.). ",
        depends: [ "core", "userevents" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            abs = Math.abs,
            MAX_DOUBLE_TAP_DISTANCE = 20;

        var Touch = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                options = that.options;

                element = that.element;
                that.wrapper = element;

                function eventProxy(name) {
                    return function(e) {
                        that._triggerTouch(name, e);
                    };
                }

                function gestureEventProxy(name) {
                    return function(e) {
                        that.trigger(name, { touches: e.touches, distance: e.distance, center: e.center, event: e.event });
                    };
                }

                that.events = new kendo.UserEvents(element, {
                    filter: options.filter,
                    surface: options.surface,
                    minHold: options.minHold,
                    multiTouch: options.multiTouch,
                    allowSelection: true,
                    fastTap: options.fastTap,
                    press: eventProxy("touchstart"),
                    hold: eventProxy("hold"),
                    tap: that._tap.bind(that),
                    gesturestart: gestureEventProxy("gesturestart"),
                    gesturechange: gestureEventProxy("gesturechange"),
                    gestureend: gestureEventProxy("gestureend")
                });

                if (options.enableSwipe) {
                    that.events.bind("start", that._swipestart.bind(that));
                    that.events.bind("move", that._swipemove.bind(that));
                } else {
                    that.events.bind("start", that._dragstart.bind(that));
                    that.events.bind("move", eventProxy("drag"));
                    that.events.bind("end", eventProxy("dragend"));
                }

                kendo.notify(that);
            },

            events: [
                "touchstart",
                "dragstart",
                "drag",
                "dragend",
                "tap",
                "doubletap",
                "hold",
                "swipe",
                "gesturestart",
                "gesturechange",
                "gestureend"
            ],

            options: {
                name: "Touch",
                surface: null,
                global: false,
                fastTap: false,
                filter: null,
                multiTouch: false,
                enableSwipe: false,
                minXDelta: 30,
                maxYDelta: 20,
                maxDuration: 1000,
                minHold: 800,
                doubleTapTimeout: 800
            },

            cancel: function() {
                this.events.cancel();
            },

            destroy: function() {
                Widget.fn.destroy.call(this);

                this.events.destroy();
            },

            _triggerTouch: function(type, e) {
                if (this.trigger(type, { touch: e.touch, event: e.event })) {
                    e.preventDefault();
                }
            },

            _tap: function(e) {
                var that = this,
                    lastTap = that.lastTap,
                    touch = e.touch;

                if (lastTap &&
                    (touch.endTime - lastTap.endTime < that.options.doubleTapTimeout) &&
                    kendo.touchDelta(touch, lastTap).distance < MAX_DOUBLE_TAP_DISTANCE
                    ) {

                   that._triggerTouch("doubletap", e);
                   that.lastTap = null;
                } else {
                    that._triggerTouch("tap", e);
                    that.lastTap = touch;
                }
            },

            _dragstart: function(e) {
                this._triggerTouch("dragstart", e);
            },

            _swipestart: function(e) {
                if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {
                    e.sender.capture();
                }
            },

            _swipemove: function(e) {
                var that = this,
                    options = that.options,
                    touch = e.touch,
                    duration = e.event.timeStamp - touch.startTime,
                    direction = touch.x.initialDelta > 0 ? "right" : "left";

                if (
                    abs(touch.x.initialDelta) >= options.minXDelta &&
                    abs(touch.y.initialDelta) < options.maxYDelta &&
                    duration < options.maxDuration
                    )
                {
                    that.trigger("swipe", {
                        direction: direction,
                        touch: e.touch
                    });

                    touch.cancel();
                }
            }
        });

        kendo.ui.plugin(Touch);
    })(window.kendo.jQuery);
    var kendo$Y = kendo;

    /*
    This code is copied/inspired by the internal @progress/kendo-data-query repo:
    https://github.com/telerik/kendo-data-query/tree/develop/src/filtering

    !!!
    1. If updates are to be synced consider the accentFoldingFiltering,
       which at the moment is not present as a feature in the data-query-package.

    2. Double-check available operators as well.

    3. Make sure objs are strings -> i.e., replace (a || "") to (a + '')
    !!!

    In future, if we consider reusing the code directly we should revise the above omissions.
    */

    var logic = {
        "or": {
            concat: function (acc, fn) { return function (a) { return acc(a) || fn(a); }; },
            identity: function () { return false; }
        },
        "and": {
            concat: function (acc, fn) { return function (a) { return acc(a) && fn(a); }; },
            identity: function () { return true; }
        }
    };

    var operatorsMap = {
        isnullorempty: function (a) { return kendo.isBlank(a) || a === ''; },
        isnotnullorempty: function (a) { return kendo.isPresent(a) && a !== ''; },
        contains: function (a, b) { return (a + '').indexOf(b) >= 0; },
        doesnotcontain: function (a, b) { return (a + '').indexOf(b) === -1; },
        doesnotendwith: function (a, b) { return (a + '').indexOf(b, (a || "").length - (b || "").length) < 0; },
        doesnotstartwith: function (a, b) { return (a + '').lastIndexOf(b, 0) === -1; },
        endswith: function (a, b) { return (a + '').indexOf(b, (a || "").length - (b || "").length) >= 0; },
        eq: function (a, b) { return a === b; },
        gt: function (a, b) { return a > b; },
        gte: function (a, b) { return a >= b; },
        isempty: function (a) { return a === ''; },
        isnotempty: function (a) { return a !== ''; },
        isnotnull: function (a) { return kendo.isPresent(a); },
        isnull: function (a) { return kendo.isBlank(a); },
        lt: function (a, b) { return a < b; },
        lte: function (a, b) { return a <= b; },
        neq: function (a, b) { return a != b; },
        startswith: function (a, b) { return (a + '').lastIndexOf(b, 0) === 0; }
    };

    var dateRegExp = /^\/Date\((.*?)\)\/$/;

    var convertValue = function (value, ignoreCase, accentFoldingFiltering) {
        if (value != null && kendo.isString(value)) {
            var date = dateRegExp.exec(value);
            if (date) {
                return new Date(+date[1]).getTime();
            } else if (ignoreCase) {
                return accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase();
            }
        } else if (value != null && kendo.isDate(value)) {
            return value.getTime();
        }
        return value;
    };

    var typedGetter = function (prop, value, ignoreCase, accentFoldingFiltering) {
        if (!kendo.isPresent(value)) {
            return prop;
        }

        var acc = prop;

        if (kendo.isString(value)) {
            var date = dateRegExp.exec(value);
            if (date) {
                value = new Date(+date[1]);
            } else {
                acc = function (a) {
                    var x = prop(a);
                    if (typeof x === 'string' && ignoreCase) {
                        return accentFoldingFiltering ? x.toLocaleLowerCase(accentFoldingFiltering) : x.toLowerCase();
                    } else {
                        return kendo.isNumeric(x) ? x + "" : x;
                    }
                };
            }
        }

        if (kendo.isDate(value)) {
            return function (a) {
                var x = acc(a);
                return kendo.isDate(x) ? x.getTime() : x;
            };
        }
        return acc;
    };

    var transformFilter = function (ref) {
        var field = ref.field;
        var ignoreCase = ref.ignoreCase;
        var value = ref.value;
        var operator = ref.operator; if ( operator === void 0 ) operator = 'eq';
        var accentFoldingFiltering = ref.accentFoldingFiltering;

        field = !kendo.isPresent(field) ? function (a) { return a; } : field;

        ignoreCase = kendo.isPresent(ignoreCase) ? ignoreCase : true;

        var itemProp = typedGetter(
            kendo.isFunction(field) ? field : kendo.getter(field, true),
            value,
            ignoreCase,
            accentFoldingFiltering
        );

        value = convertValue(value, ignoreCase, accentFoldingFiltering);

        var op = kendo.isFunction(operator) ? operator : operatorsMap[operator];

        return function (a) { return op(itemProp(a), value, ignoreCase); };
    };

    var isCompositeFilterDescriptor = function (source) { return kendo.isPresent(source.filters); };

    var transformCompositeFilter = function (filter) {
        var accentFoldingFiltering = filter.accentFoldingFiltering;
        var combiner = logic[filter.logic || 'and'];
        return filter.filters
            .filter(kendo.isPresent)
            .map(function (x) { return (isCompositeFilterDescriptor(x) ? transformCompositeFilter(extendAccentFolding(x, accentFoldingFiltering)) : transformFilter(extendAccentFolding(x, accentFoldingFiltering))); })
            .reduce(combiner.concat, combiner.identity);
    };

    var extendAccentFolding = function (filter, accentFoldingFiltering) { return (kendo.isPresent(accentFoldingFiltering) ? Object.assign(filter, { accentFoldingFiltering: accentFoldingFiltering }) : filter); };

    var filterExprNoEval = function(expr) {
        return transformCompositeFilter(expr);
    };

    var __meta__$11 = {
        id: "data.odata",
        name: "OData",
        category: "framework",
        depends: [ "core" ],
        hidden: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            extend = $.extend,
            NEWLINE = "\r\n",
            DOUBLELINE = "\r\n\r\n",
            isFunction = kendo.isFunction,
            odataFilters = {
                eq: "eq",
                neq: "ne",
                gt: "gt",
                gte: "ge",
                lt: "lt",
                lte: "le",
                contains: "substringof",
                doesnotcontain: "substringof",
                endswith: "endswith",
                startswith: "startswith",
                isnull: "eq",
                isnotnull: "ne",
                isnullorempty: "eq",
                isnotnullorempty: "ne",
                isempty: "eq",
                isnotempty: "ne"
            },
            odataFiltersVersionFour = extend({}, odataFilters, {
                contains: "contains"
            }),
            mappers = {
                pageSize: $.noop,
                page: $.noop,
                filter: function(params, filter, useVersionFour) {
                    if (filter) {
                        filter = toOdataFilter(filter, useVersionFour);
                        if (filter) {
                            params.$filter = filter;
                        }
                    }
                },
                sort: function(params, orderby) {
                    var expr = $.map(orderby, function(value) {
                        var order = value.field.replace(/\./g, "/");

                        if (value.dir === "desc") {
                            order += " desc";
                        }

                        return order;
                    }).join(",");

                    if (expr) {
                        params.$orderby = expr;
                    }
                },
                skip: function(params, skip) {
                    if (skip) {
                        params.$skip = skip;
                    }
                },
                take: function(params, take) {
                    if (take) {
                        params.$top = take;
                    }
                }
            },
            defaultDataType = {
                read: {
                    dataType: "jsonp"
                }
            };

        function toOdataFilter(filter, useOdataFour) {
            var result = [],
                logic = filter.logic || "and",
                idx,
                length,
                field,
                type,
                format,
                operator,
                value,
                ignoreCase,
                filters = filter.filters;

            for (idx = 0, length = filters.length; idx < length; idx++) {
                filter = filters[idx];
                field = filter.field;
                value = filter.value;
                operator = filter.operator;

                if (filter.filters) {
                    filter = toOdataFilter(filter, useOdataFour);
                } else {
                    ignoreCase = filter.ignoreCase;
                    field = field.replace(/\./g, "/");
                    filter = odataFilters[operator];
                    if (useOdataFour) {
                        filter = odataFiltersVersionFour[operator];
                    }

                    if (operator === "isnullorempty") {
                        filter = kendo.format("{0} {1} null or {0} {1} ''", field, filter);
                    } else if (operator === "isnotnullorempty") {
                        filter = kendo.format("{0} {1} null and {0} {1} ''", field, filter);
                    } else if (operator === "isnull" || operator === "isnotnull") {
                        filter = kendo.format("{0} {1} null", field, filter);
                    } else if (operator === "isempty" || operator === "isnotempty") {
                        filter = kendo.format("{0} {1} ''", field, filter);
                    } else if (filter && value !== undefined$1) {
                        type = kendo.type(value);
                        if (type === "string") {
                            format = "'{1}'";
                            value = value.replace(/'/g, "''");

                            if (ignoreCase === true) {
                                field = "tolower(" + field + ")";
                            }

                        } else if (type === "date") {
                            if (useOdataFour) {
                                format = "{1:yyyy-MM-ddTHH:mm:ss+00:00}";
                                value = kendo.timezone.apply(value, 'Etc/UTC');
                            } else {
                                format = "datetime'{1:yyyy-MM-ddTHH:mm:ss}'";
                            }
                        } else {
                            format = "{1}";
                        }

                        if (filter.length > 3) {
                            if (filter !== "substringof") {
                                format = "{0}({2}," + format + ")";
                            } else {
                                format = "{0}(" + format + ",{2})";
                                if (operator === "doesnotcontain") {
                                    if (useOdataFour) {
                                        format = "{0}({2},'{1}') eq -1";
                                        filter = "indexof";
                                    } else {
                                        format += " eq false";
                                    }
                                }
                            }
                        } else {
                            format = "{2} {0} " + format;
                        }

                        filter = kendo.format(format, filter, value, field);
                    }
                }

                result.push(filter);
            }

            filter = result.join(" " + logic + " ");

            if (result.length > 1) {
                filter = "(" + filter + ")";
            }

            return filter;
        }

        function stripMetadata(obj) {
            for (var name in obj) {
                if (name.indexOf("@odata") === 0) {
                    delete obj[name];
                }
            }
        }

        function hex16() {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);
        }

        function createBoundary(prefix) {
            return prefix + hex16() + '-' + hex16() + '-' + hex16();
        }

        function createDelimeter(boundary, close) {
            var result = NEWLINE + "--" + boundary;

            if (close) {
                result += "--";
            }

            return result;
        }

        function createCommand(transport, item, httpVerb, command) {
             var transportUrl = transport.options[command].url;
             var commandPrefix = kendo.format("{0} ", httpVerb);

             if (isFunction(transportUrl)) {
                 return commandPrefix + transportUrl(item);
             } else {
                 return commandPrefix + transportUrl;
             }
        }

        function getOperationHeader(changeset, changeId) {
            var header = "";

            header += createDelimeter(changeset, false);
            header += NEWLINE + 'Content-Type: application/http';
            header += NEWLINE + 'Content-Transfer-Encoding: binary';
            header += NEWLINE + 'Content-ID: ' + changeId;

            return header;
        }

        function getOperationContent(item) {
            var content = "";

            content += NEWLINE + "Content-Type: application/json;odata=minimalmetadata";
            content += NEWLINE + "Prefer: return=representation";
            content += DOUBLELINE + kendo.stringify(item);

            return content;
        }

        function getOperations(collection, changeset, changeId, command, transport, skipContent) {
            var requestBody = "";

            for (var i = 0; i < collection.length; i++) {
                requestBody += getOperationHeader(changeset, changeId);
                requestBody += DOUBLELINE + createCommand(transport, collection[i], transport.options[command].type, command) + ' HTTP/1.1';
                if (!skipContent) {
                    requestBody += getOperationContent(collection[i]);
                }
                requestBody += NEWLINE;
                changeId++;
            }

            return requestBody;
        }

        function processCollection(colection, boundary, changeset, changeId, transport, command, skipContent) {
            var requestBody = "";

            requestBody += getBoundary(boundary, changeset);
            requestBody += getOperations(colection, changeset, changeId, command, transport, skipContent);
            requestBody += createDelimeter(changeset, true);
            requestBody += NEWLINE;

            return requestBody;
        }

        function getBoundary(boundary,changeset) {
            var requestBody = "";

            requestBody += "--" + boundary + NEWLINE;
            requestBody += "Content-Type: multipart/mixed; boundary=" + changeset + NEWLINE;

            return requestBody;
        }

        function createBatchRequest(transport, colections) {
    		var options = extend({}, transport.options.batch);
            var boundary = createBoundary("sf_batch_");
            var requestBody = "";
            var changeId = 0;
            var batchURL = transport.options.batch.url;
            var changeset = createBoundary("sf_changeset_");

            options.type = transport.options.batch.type;
            options.url = isFunction(batchURL) ? batchURL() : batchURL;
    		options.headers = extend(options.headers || {}, {
    			"Content-Type": "multipart/mixed; boundary=" + boundary
    		});

            if (colections.updated.length) {
                requestBody += processCollection(colections.updated, boundary, changeset, changeId, transport, "update", false);
                changeId += colections.updated.length;
                changeset = createBoundary("sf_changeset_");
            }

            if (colections.destroyed.length) {
                requestBody += processCollection(colections.destroyed, boundary, changeset, changeId, transport, "destroy", true);
                changeId += colections.destroyed.length;
                changeset = createBoundary("sf_changeset_");
            }

            if (colections.created.length) {
                requestBody += processCollection(colections.created, boundary, changeset, changeId, transport, "create", false);
            }

            requestBody += createDelimeter(boundary, true);

            options.data = requestBody;

            return options;
        }

        function parseBatchResponse(responseText) {
            var responseMarkers = responseText.match(/--changesetresponse_[a-z0-9-]+$/gm);
            var markerIndex = 0;
            var collections = [];
            var changeBody;
            var status;
            var code;
            var marker;
            var jsonModel;

            collections.push({ models: [], passed: true });

            for (var i = 0; i < responseMarkers.length; i++) {
                marker = responseMarkers[i];
                if (marker.lastIndexOf('--', marker.length - 1)) {
                    if (i < responseMarkers.length - 1) {
                        collections.push({ models: [], passed: true });
                    }
                    continue;
                }

                if (!markerIndex) {
                    markerIndex = responseText.indexOf(marker);
                } else {
                    markerIndex = responseText.indexOf(marker, markerIndex + marker.length);
                }

                changeBody = responseText.substring(markerIndex, responseText.indexOf("--", markerIndex + 1));
                status = changeBody.match(/^HTTP\/1\.\d (\d{3}) (.*)$/gm).pop();
                code = kendo.parseFloat(status.match(/\d{3}/g).pop());

                if (code >= 200 && code <= 299) {
                    jsonModel = changeBody.match(/\{.*\}/gm);
                    if (jsonModel) {
                        collections[collections.length - 1].models.push(JSON.parse(jsonModel[0]));
                    }
                } else {
                    collections[collections.length - 1].passed = false;
                }

            }

            return collections;
        }

        extend(true, kendo.data, {
            schemas: {
                odata: {
                    type: "json",
                    data: function(data) {
                        return data.d.results || [data.d];
                    },
                    total: "d.__count"
                }
            },
            transports: {
                odata: {
                    read: {
                        cache: true, // to prevent jQuery from adding cache buster
                        dataType: "jsonp",
                        jsonp: "$callback"
                    },
                    update: {
                        cache: true,
                        dataType: "json",
                        contentType: "application/json", // to inform the server the the request body is JSON encoded
                        type: "PUT" // can be PUT or MERGE
                    },
                    create: {
                        cache: true,
                        dataType: "json",
                        contentType: "application/json",
                        type: "POST" // must be POST to create new entity
                    },
                    destroy: {
                        cache: true,
                        dataType: "json",
                        type: "DELETE"
                    },
                    parameterMap: function(options, type, useVersionFour) {
                        var params,
                            value,
                            option,
                            dataType;

                        options = options || {};
                        type = type || "read";
                        dataType = (this.options || defaultDataType)[type];
                        dataType = dataType ? dataType.dataType : "json";

                        if (type === "read") {
                            params = {
                                $inlinecount: "allpages"
                            };

                            if (dataType != "json") {
                                params.$format = "json";
                            }

                            for (option in options) {
                                if (mappers[option]) {
                                    mappers[option](params, options[option], useVersionFour);
                                } else {
                                    params[option] = options[option];
                                }
                            }
                        } else {
                            if (dataType !== "json") {
                                throw new Error("Only json dataType can be used for " + type + " operation.");
                            }

                            if (type !== "destroy") {
                                for (option in options) {
                                    value = options[option];
                                    if (typeof value === "number") {
                                        options[option] = value + "";
                                    }
                                }

                                params = kendo.stringify(options);
                            }
                        }

                        return params;
                    }
                }
            }
        });

        extend(true, kendo.data, {
            schemas: {
                "odata-v4": {
                    type: "json",
                    data: function(data) {
                        if (Array.isArray(data)) {
                            for (var i = 0; i < data.length; i++) {
                                stripMetadata(data[i]);
                            }
                            return data;
                        } else {
                            data = $.extend({}, data);
                            stripMetadata(data);

                            if (data.value) {
                                return data.value;
                            }
                            return [data];
                        }
                    },
                    total: function(data) {
                        return data["@odata.count"];
                    }
                }
            },
            transports: {
                "odata-v4": {
                    batch: {
                        type: "POST"
                    },
                    read: {
                        cache: true, // to prevent jQuery from adding cache buster
                        dataType: "json"
                    },
                    update: {
                        cache: true,
                        dataType: "json",
                        contentType: "application/json;IEEE754Compatible=true", // to inform the server the the request body is JSON encoded
                        type: "PUT" // can be PUT or MERGE
                    },
                    create: {
                        cache: true,
                        dataType: "json",
                        contentType: "application/json;IEEE754Compatible=true",
                        type: "POST" // must be POST to create new entity
                    },
                    destroy: {
                        cache: true,
                        dataType: "json",
                        type: "DELETE"
                    },
                    parameterMap: function(options, type) {
                        var result = kendo.data.transports.odata.parameterMap(options, type, true);
                        if (type == "read") {
                            result.$count = true;
                            delete result.$inlinecount;
                        }

    					if (result && result.$filter) {
    						// Remove the single quotation marks around the GUID (OData v4).
    						result.$filter = result.$filter.replace(/('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')/ig, function(x) {
    							return x.substring(1, x.length - 1);
    						});
    					}

                        return result;
                    },
                    submit: function(e) {
                        var that = this;
                        var options = createBatchRequest(that, e.data);
                        var collections = e.data;

                        if (!collections.updated.length && !collections.destroyed.length && !collections.created.length) {
                            return;
                        }

                        $.ajax(extend(true, {}, {
                            success: function(response) {
                                var responses = parseBatchResponse(response);
                                var index = 0;
                                var current;

                                if (collections.updated.length) {
                                    current = responses[index];
                                    if (current.passed) {
                                        // Pass either the obtained models or an empty array if only status codes are returned.
                                        e.success(current.models.length ? current.models : [], "update");
                                    }
                                    index++;
                                }
                                if (collections.destroyed.length) {
                                    current = responses[index];
                                    if (current.passed) {
                                        // For delete operations OData returns only status codes.
                                        // Passing empty array to datasource will force it to correctly remove the deleted items from the pristine collection.
                                        e.success([], "destroy");
                                    }
                                    index++;
                                }
                                if (collections.created.length) {
                                    current = responses[index];
                                    if (current.passed) {
                                        e.success(current.models, "create");
                                    }
                                }
                            },
                            error: function(response, status, error) {
                                e.error(response, status, error);
                            }
                        }, options));
                    }
                }
            }
        });

    })(window.kendo.jQuery);
    var kendo$X = kendo;

    var __meta__$10 = {
        id: "data.xml",
        name: "XML",
        category: "framework",
        depends: [ "core" ],
        hidden: true
    };


    (function($, undefined$1) {
        var kendo = window.kendo,
            isArray = Array.isArray,
            isPlainObject = $.isPlainObject,
            map = $.map,
            each = $.each,
            extend = $.extend,
            getter = kendo.getter,
            Class = kendo.Class;

        var XmlDataReader = Class.extend({
            init: function(options) {
                var that = this,
                    total = options.total,
                    model = options.model,
                    parse = options.parse,
                    errors = options.errors,
                    serialize = options.serialize,
                    data = options.data;

                if (model) {
                    if (isPlainObject(model)) {
                        var base = options.modelBase || kendo.data.Model;

                        if (model.fields) {
                            each(model.fields, function(field, value) {
                                if (isPlainObject(value) && value.field) {
                                    if (!kendo.isFunction(value.field)) {
                                        value = extend(value, { field: that.getter(value.field) });
                                    }
                                } else {
                                    value = { field: that.getter(value) };
                                }
                                model.fields[field] = value;
                            });
                        }

                        var id = model.id;
                        if (id) {
                            var idField = {};

                            idField[that.xpathToMember(id, true)] = { field: that.getter(id) };
                            model.fields = extend(idField, model.fields);
                            model.id = that.xpathToMember(id);
                        }
                        model = base.define(model);
                    }

                    that.model = model;
                }

                if (total) {
                    if (typeof total == "string") {
                        total = that.getter(total);
                        that.total = function(data) {
                            return parseInt(total(data), 10);
                        };
                    } else if (typeof total == "function") {
                        that.total = total;
                    }
                }

                if (errors) {
                    if (typeof errors == "string") {
                        errors = that.getter(errors);
                        that.errors = function(data) {
                            return errors(data) || null;
                        };
                    } else if (typeof errors == "function") {
                        that.errors = errors;
                    }
                }

                if (data) {
                    if (typeof data == "string") {
                        data = that.xpathToMember(data);
                        that.data = function(value) {
                            var result = that.evaluate(value, data),
                                modelInstance;

                            result = isArray(result) ? result : [result];

                            if (that.model && model.fields) {
                                modelInstance = new that.model();

                                return map(result, function(value) {
                                    if (value) {
                                        var record = {}, field;

                                        for (field in model.fields) {
                                            record[field] = modelInstance._parse(field, model.fields[field].field(value));
                                        }

                                        return record;
                                    }
                                });
                            }

                            return result;
                        };
                    } else if (typeof data == "function") {
                        that.data = data;
                    }
                }

                if (typeof parse == "function") {
                    var xmlParse = that.parse;

                    that.parse = function(data) {
                        var xml = parse.call(that, data);
                        return xmlParse.call(that, xml);
                    };
                }

                if (typeof serialize == "function") {
                    that.serialize = serialize;
                }
            },
            total: function(result) {
                return this.data(result).length;
            },
            errors: function(data) {
                return data ? data.errors : null;
            },
            serialize: function(data) {
                return data;
            },
            parseDOM: function(element) {
                var result = {},
                    parsedNode,
                    node,
                    nodeType,
                    nodeName,
                    member,
                    attribute,
                    attributes = element.attributes,
                    attributeCount = attributes.length,
                    idx;

                for (idx = 0; idx < attributeCount; idx++) {
                    attribute = attributes[idx];
                    result["@" + attribute.nodeName] = attribute.nodeValue;
                }

                for (node = element.firstChild; node; node = node.nextSibling) {
                    nodeType = node.nodeType;

                    if (nodeType === 3 || nodeType === 4) {
                        // text nodes or CDATA are stored as #text field
                        result["#text"] = node.nodeValue;
                    } else if (nodeType === 1) {
                        // elements are stored as fields
                        parsedNode = this.parseDOM(node);

                        nodeName = node.nodeName;

                        member = result[nodeName];

                        if (isArray(member)) {
                            // elements of same nodeName are stored as array
                            member.push(parsedNode);
                        } else if (member !== undefined$1) {
                            member = [member, parsedNode];
                        } else {
                            member = parsedNode;
                        }

                        result[nodeName] = member;
                    }
                }
                return result;
            },

            evaluate: function(value, expression) {
                var members = expression.split("."),
                    member,
                    result,
                    length,
                    intermediateResult,
                    idx;

                while (member = members.shift()) {
                    value = value[member];

                    if (isArray(value)) {
                        result = [];
                        expression = members.join(".");

                        for (idx = 0, length = value.length; idx < length; idx++) {
                            intermediateResult = this.evaluate(value[idx], expression);

                            intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

                            result.push.apply(result, intermediateResult);
                        }

                        return result;
                    }
                }

                return value;
            },

            parse: function(xml) {
                var documentElement,
                    tree,
                    result = {};

                documentElement = xml.documentElement || $.parseXML(xml).documentElement;

                tree = this.parseDOM(documentElement);

                result[documentElement.nodeName] = tree;

                return result;
            },

            xpathToMember: function(member, raw) {
                if (!member) {
                    return "";
                }

                member = member.replace(/^\//, "") // remove the first "/"
                               .replace(/\//g, "."); // replace all "/" with "."

                if (member.indexOf("@") >= 0) {
                    // replace @attribute with '["@attribute"]'
                    return member.replace(/\.?(@.*)/, raw ? '$1' : '["$1"]');
                }

                if (member.indexOf("text()") >= 0) {
                    // replace ".text()" with '["#text"]'
                    return member.replace(/(\.?text\(\))/, raw ? '#text' : '["#text"]');
                }

                return member;
            },
            getter: function(member) {
                return getter(this.xpathToMember(member), true);
            }
        });

        $.extend(true, kendo.data, {
            XmlDataReader: XmlDataReader,
            readers: {
                xml: XmlDataReader
            }
        });
    })(window.kendo.jQuery);
    var kendo$W = kendo;

    var __meta__$$ = {
        id: "data",
        name: "Data source",
        category: "framework",
        description: "Powerful component for using local and remote data.Fully supports CRUD, Sorting, Paging, Filtering, Grouping, and Aggregates.",
        depends: [ "core" ],
        features: [ {
            id: "data-odata",
            name: "OData",
            description: "Support for accessing Open Data Protocol (OData) services.",
            depends: [ "data.odata" ]
        }, {
            id: "data-signalr",
            name: "SignalR",
            description: "Support for binding to SignalR hubs.",
            depends: [ "data.signalr" ]
        }, {
            id: "data-XML",
            name: "XML",
            description: "Support for binding to XML.",
            depends: [ "data.xml" ]
        }]
    };


    (function($, undefined$1) {
        var extend = $.extend,
            isPlainObject = $.isPlainObject,
            isEmptyObject = $.isEmptyObject,
            isArray = Array.isArray,
            grep = $.grep,
            ajax = $.ajax,
            map,
            each = $.each,
            noop = $.noop,
            kendo = window.kendo,
            isFunction = kendo.isFunction,
            Observable = kendo.Observable,
            Class = kendo.Class,
            STRING = "string",
            FUNCTION = "function",
            ASCENDING = "asc",
            CREATE = "create",
            READ = "read",
            UPDATE = "update",
            DESTROY = "destroy",
            CHANGE = "change",
            SYNC = "sync",
            GET = "get",
            ERROR = "error",
            REQUESTSTART = "requestStart",
            PROGRESS = "progress",
            REQUESTEND = "requestEnd",
            ITEMSLOADED = "itemsLoaded",
            ITEMLOAD = "itemLoad",
            crud = [CREATE, READ, UPDATE, DESTROY],
            identity = function(o) { return o; },
            getter = kendo.getter,
            stringify = kendo.stringify,
            math = Math,
            push = [].push,
            join = [].join,
            pop = [].pop,
            splice = [].splice,
            shift = [].shift,
            slice = [].slice,
            unshift = [].unshift,
            toString = {}.toString,
            stableSort = kendo.support.stableSort,
            dateRegExp = /^\/Date\((.*?)\)\/$/,
            objectKeys = [];

        var ObservableArray = Observable.extend({
            init: function(array, type) {
                var that = this;

                that.type = type || ObservableObject;

                Observable.fn.init.call(that);

                that.length = array.length;

                that.wrapAll(array, that);
                that._loadPromises = [];
                that._loadedNodes = [];
            },

            at: function(index) {
                return this[index];
            },

            toJSON: function(serializeFunctions) {
                var idx, length = this.length, value, json = new Array(length);

                for (idx = 0; idx < length; idx++) {
                    value = this[idx];

                    if (value instanceof ObservableObject) {
                        value = value.toJSON(serializeFunctions);
                    }

                    json[idx] = value;
                }

                return json;
            },

            parent: noop,

            wrapAll: function(source, target) {
                var that = this,
                    idx,
                    length,
                    parent = function() {
                        return that;
                    };

                target = target || [];

                for (idx = 0, length = source.length; idx < length; idx++) {
                    target[idx] = that.wrap(source[idx], parent);
                }

                return target;
            },

            wrap: function(object, parent) {
                var that = this,
                    observable;

                if (object !== null && toString.call(object) === "[object Object]") {
                    observable = object instanceof that.type || object instanceof Model;

                    if (!observable) {
                        object = object instanceof ObservableObject ? object.toJSON() : object;
                        object = new that.type(object);
                    }

                    object.parent = parent;

                    object.bind(CHANGE, function(e) {
                        var isGroup = object.hasOwnProperty("hasSubgroups");
                        that.trigger(CHANGE, {
                            field: e.field,
                            node: e.node,
                            index: e.index,
                            items: e.items || [this],
                            action: e.node || isGroup ? (e.action || "itemloaded") : "itemchange"
                        });
                    });

                    object.bind(ITEMLOAD, function(e) {
                        that._loadPromises.push(e.promise);
                        that._loading = true;

                        e.promise.done(function() {
                            that._loadedNodes.push(e.node);
                            var index = that._loadPromises.indexOf(e.promise);
                            that._loadPromises.splice(index, 1);

                            if (!that._loadPromises.length) {
                                that._loading = false;
                                that.trigger(ITEMSLOADED, { collection: that, nodes: that._loadedNodes });
                                that._loadedNodes = [];
                            }
                        });
                    });
                }

                return object;
            },

            loading: function() {
                return this._loading;
            },

            push: function() {
                var index = this.length,
                    items = this.wrapAll(arguments),
                    result;

                result = push.apply(this, items);

                if (!this.omitChangeEvent) {
                    this.trigger(CHANGE, {
                        action: "add",
                        index: index,
                        items: items
                    });
                }

                return result;
            },

            slice: slice,

            sort: [].sort,

            join: join,

            pop: function() {
                var length = this.length, result = pop.apply(this);

                if (length) {
                    this.trigger(CHANGE, {
                        action: "remove",
                        index: length - 1,
                        items: [result]
                    });
                }

                return result;
            },

            splice: function(index, howMany, item) {
                var items = this.wrapAll(slice.call(arguments, 2)),
                    result, i, len;

                result = splice.apply(this, [index, howMany].concat(items));

                if (result.length) {
                    if (!this.omitChangeEvent) {
                        this.trigger(CHANGE, {
                            action: "remove",
                            index: index,
                            items: this.omitCache && this.omitCache.length ? result.concat(this.omitCache) : result
                        });
                        this.omitCache = [];
                    }

                    for (i = 0, len = result.length; i < len; i++) {
                        if (result[i] && result[i].children) {
                            result[i].unbind(CHANGE);
                        }
                    }
                }

                if (item) {
                    if (!this.omitChangeEvent) {
                        this.trigger(CHANGE, {
                            action: "add",
                            index: index,
                            items: items
                        });
                    }
                }
                return result;
            },

            shift: function() {
                var length = this.length, result = shift.apply(this);

                if (length) {
                    this.trigger(CHANGE, {
                        action: "remove",
                        index: 0,
                        items: [result]
                    });
                }

                return result;
            },

            unshift: function() {
                var items = this.wrapAll(arguments),
                    result;

                result = unshift.apply(this, items);

                this.trigger(CHANGE, {
                    action: "add",
                    index: 0,
                    items: items
                });

                return result;
            },

            indexOf: function(item) {
                var that = this,
                    idx,
                    length;

                for (idx = 0, length = that.length; idx < length; idx++) {
                    if (that[idx] === item) {
                        return idx;
                    }
                }
                return -1;
            },

            forEach: function(callback, thisArg) {
                var idx = 0;
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    callback.call(context, this[idx], idx, this);
                }
            },

            map: function(callback, thisArg) {
                var idx = 0;
                var result = [];
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    result[idx] = callback.call(context, this[idx], idx, this);
                }

                return result;
            },

            reduce: function(callback) {
                var idx = 0,
                    result,
                    length = this.length;

                if (arguments.length == 2) {
                    result = arguments[1];
                } else if (idx < length) {
                    result = this[idx++];
                }

                for (; idx < length; idx++) {
                    result = callback(result, this[idx], idx, this);
                }

                return result;
            },

            reduceRight: function(callback) {
                var idx = this.length - 1,
                    result;

                if (arguments.length == 2) {
                    result = arguments[1];
                } else if (idx > 0) {
                    result = this[idx--];
                }

                for (; idx >= 0; idx--) {
                    result = callback(result, this[idx], idx, this);
                }

                return result;
            },

            filter: function(callback, thisArg) {
                var idx = 0;
                var result = [];
                var item;
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    item = this[idx];
                    if (callback.call(context, item, idx, this)) {
                        result[result.length] = item;
                    }
                }

                return result;
            },

            find: function(callback, thisArg) {
                var idx = 0;
                var item;
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    item = this[idx];
                    if (callback.call(context, item, idx, this)) {
                        return item;
                    }
                }
            },

            every: function(callback, thisArg) {
                var idx = 0;
                var item;
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    item = this[idx];
                    if (!callback.call(context, item, idx, this)) {
                        return false;
                    }
                }

                return true;
            },

            some: function(callback, thisArg) {
                var idx = 0;
                var item;
                var length = this.length;
                var context = thisArg || window;

                for (; idx < length; idx++) {
                    item = this[idx];
                    if (callback.call(context, item, idx, this)) {
                        return true;
                    }
                }

                return false;
            },

            // non-standard collection methods
            remove: function(item) {
                var idx = this.indexOf(item);

                if (idx !== -1) {
                    this.splice(idx, 1);
                }
            },

            empty: function() {
                this.splice(0, this.length);
            }
        });

        // Polyfill for Symbol.iterator
        if (typeof Symbol !== "undefined" && Symbol.iterator && !ObservableArray.prototype[Symbol.iterator]) {
            ObservableArray.prototype[Symbol.iterator] = [][Symbol.iterator];
        }

        var LazyObservableArray = ObservableArray.extend({
            init: function(data, type, events) {
                var parentFn = function() { return this; };

                Observable.fn.init.call(this);

                this.type = type || ObservableObject;

                if (events) {
                    this._events = events;
                }

                for (var idx = 0; idx < data.length; idx++) {
                    this[idx] = data[idx];
                }

                this.length = idx;
                this._parent = parentFn.bind(this);
            },
            at: function(index) {
                var item = this[index];

                if (!(item instanceof this.type)) {
                    item = this[index] = this.wrap(item, this._parent);
                } else {
                    item.parent = this._parent;
                }

                return item;
            }
        });

        function eventHandler(context, type, field, prefix) {
            return function(e) {
                var event = {}, key;

                for (key in e) {
                    event[key] = e[key];
                }

                if (prefix) {
                    event.field = field + "." + e.field;
                } else {
                    event.field = field;
                }

                if (type == CHANGE && context._notifyChange) {
                    context._notifyChange(event);
                }

                context.trigger(type, event);
            };
        }

        function isPrimitiveType(value) {
            return (typeof value === "object" && Object.getPrototypeOf(value) === Object.getPrototypeOf({}))
                    || Object.getPrototypeOf(value) === Object.getPrototypeOf(new Date())
                    || typeof value !== "object";
          }

        function ownKeys(value, ignoreObjectKeys) {
            var props = [];
            var protoKeys = [];
            var keys, filteredObjectKeys;

            value = value || {};

            if (!isPrimitiveType(value)) {
                protoKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value)).filter(function (f) { return f.indexOf("__") !== 0; });
            }

            keys = Object.getOwnPropertyNames(value).concat(protoKeys);

            filteredObjectKeys = objectKeys.filter(function(key) {
                return keys.indexOf(key) < 0;
            });

            while (value) {
                Object.getOwnPropertyNames(value).forEach(function(prop) {
                    if (props.indexOf(prop) === -1 && (!ignoreObjectKeys || filteredObjectKeys.indexOf(prop) < 0)) {
                        props.push(prop);
                    }
                });
                value = Object.getPrototypeOf(value);
            }

            return props;
        }

        objectKeys = ownKeys({}, false);

        var ObservableObject = Observable.extend({
            init: function(value) {
                var that = this,
                    member,
                    keys = ownKeys(value, true),
                    parent = function() {
                        return that;
                    };

                Observable.fn.init.call(this);

                this._handlers = {};

                keys.forEach(function(field) {
                    member = value[field];

                    if (typeof member === "object" && member && !member.getTime && field.charAt(0) != "_") {
                        member = that.wrap(member, field, parent);
                    }

                    that[field] = member;
                });

                that.uid = kendo.guid();
            },

            shouldSerialize: function(field, serializeFunctions) {
                return this.hasOwnProperty(field) && field !== "_handlers" && field !== "_events" && ((serializeFunctions && serializeFunctions[field]) || typeof this[field] !== FUNCTION) && field !== "uid";
            },

            forEach: function(f) {
                for (var i in this) {
                    if (this.shouldSerialize(i)) {
                        f(this[i], i);
                    }
                }
            },

            toJSON: function(serializeFunctions) {
                var result = {}, value, field;

                for (field in this) {
                    if (this.shouldSerialize(field, serializeFunctions)) {
                        value = this[field];

                        if (value instanceof ObservableObject || value instanceof ObservableArray) {
                            value = value.toJSON(serializeFunctions);
                        }

                        result[field] = value;
                    }
                }

                return result;
            },

            get: function(field) {
                var that = this, result;

                that.trigger(GET, { field: field });

                if (field === "this") {
                    result = that;
                } else {
                    result = kendo.getter(field, true)(that);
                }

                return result;
            },

            _set: function(field, value) {
                var that = this;
                var composite = field.indexOf(".") >= 0;

                if (composite) {
                    var paths = field.split("."),
                        path = "";

                    while (paths.length > 1) {
                        path += paths.shift();
                        var obj = kendo.getter(path, true)(that);
                        if (obj instanceof ObservableObject) {
                            obj.set(paths.join("."), value);
                            return composite;
                        }
                        path += ".";
                    }
                }

                kendo.setter(field)(that, value);

                return composite;
            },

            set: function(field, value) {
                var that = this,
                    isSetPrevented = false,
                    composite = field.indexOf(".") >= 0,
                    current = kendo.getter(field, true)(that);

                if (current !== value) {
                    if (current instanceof Observable && this._handlers[field]) {
                        if (this._handlers[field].get) {
                           current.unbind(GET, this._handlers[field].get);
                        }
                        current.unbind(CHANGE, this._handlers[field].change);
                    }

                    isSetPrevented = that.trigger("set", { field: field, value: value });

                    if (!isSetPrevented) {
                        if (!composite) {
                            value = that.wrap(value, field, function() { return that; });
                        }
                        if (!that._set(field, value) || field.indexOf("(") >= 0 || field.indexOf("[") >= 0) {
                            that.trigger(CHANGE, { field: field });
                        }
                    }
                }

                return isSetPrevented;
            },

            parent: noop,

            wrap: function(object, field, parent) {
                var that = this;
                var get;
                var change;
                var type = toString.call(object);

                if (object != null && (type === "[object Object]" || type === "[object Array]")) {
                    var isObservableArray = object instanceof ObservableArray;
                    var isDataSource = object instanceof DataSource;

                    if (type === "[object Object]" && !isDataSource && !isObservableArray) {
                        if (!(object instanceof ObservableObject)) {
                            object = new ObservableObject(object);
                        }

                        get = eventHandler(that, GET, field, true);
                        object.bind(GET, get);
                        change = eventHandler(that, CHANGE, field, true);
                        object.bind(CHANGE, change);

                        that._handlers[field] = { get: get, change: change };
                    } else if (type === "[object Array]" || isObservableArray || isDataSource) {
                        if (!isObservableArray && !isDataSource) {
                            object = new ObservableArray(object);
                        }

                        change = eventHandler(that, CHANGE, field, false);

                        object.bind(CHANGE, change);

                        that._handlers[field] = { change: change };
                    }

                    object.parent = parent;
                }

                return object;
            }
        });

        function equal(x, y) {
            if (x === y) {
                return true;
            }

            var xtype = kendo.type(x), ytype = kendo.type(y), field;

            if (xtype !== ytype) {
                return false;
            }

            if (xtype === "date") {
                return x.getTime() === y.getTime();
            }

            if (xtype !== "object" && xtype !== "array") {
                return false;
            }

            for (field in x) {
                if (!equal(x[field], y[field])) {
                    return false;
                }
            }

            return true;
        }

        var parsers = {
            "number": function(value) {
                if (typeof value === STRING && value.toLowerCase() === "null") {
                    return null;
                }
                return kendo.parseFloat(value);
            },

            "date": function(value) {
                if (typeof value === STRING && value.toLowerCase() === "null") {
                    return null;
                }
                return kendo.parseDate(value);
            },

            "boolean": function(value) {
                if (typeof value === STRING) {
                    if (value.toLowerCase() === "null") {
                        return null;
                    } else {
                        return value.toLowerCase() === "true";
                    }
                }
                return value != null ? !!value : value;
            },

            "string": function(value) {
                if (typeof value === STRING && value.toLowerCase() === "null") {
                    return null;
                }
                return value != null ? (value + "") : value;
            },

            "default": function(value) {
                return value;
            }
        };

        var defaultValues = {
            "string": "",
            "number": 0,
            "date": new Date(),
            "boolean": false,
            "default": ""
        };

        function getFieldByName(obj, name) {
            var field,
                fieldName;

            for (fieldName in obj) {
                field = obj[fieldName];
                if (isPlainObject(field) && field.field && field.field === name) {
                    return field;
                } else if (field === name) {
                    return field;
                }
            }
            return null;
        }

        var Model = ObservableObject.extend({
            init: function(data) {
                var that = this;

                if (!data || $.isEmptyObject(data)) {
                    data = $.extend({}, that.defaults, data);

                    if (that._initializers) {
                        for (var idx = 0; idx < that._initializers.length; idx++) {
                             var name = that._initializers[idx];
                             data[name] = that.defaults[name]();
                        }
                    }
                }

                ObservableObject.fn.init.call(that, data);

                that.dirty = false;
                that.dirtyFields = {};

                if (that.idField) {
                    that.id = that.get(that.idField);

                    if (that.id === undefined$1) {
                        that.id = that._defaultId;
                    }
                }
            },

            shouldSerialize: function(field) {
                return ObservableObject.fn.shouldSerialize.call(this, field) &&
                    field !== "uid" && !(this.idField !== "id" && field === "id") &&
                    field !== "dirty" && field !== "dirtyFields" && field !== "_accessors";
            },

            _parse: function(field, value) {
                var that = this,
                    fieldName = field,
                    fields = (that.fields || {}),
                    parse;

                field = fields[field];
                if (!field) {
                    field = getFieldByName(fields, fieldName);
                }
                if (field) {
                    parse = field.parse;
                    if (!parse && field.type) {
                        parse = parsers[field.type.toLowerCase()];
                    }
                }

                return parse ? parse(value) : value;
            },

            _notifyChange: function(e) {
                var action = e.action;

                if (action == "add" || action == "remove") {
                    this.dirty = true;
                    this.dirtyFields[e.field] = true;
                }
            },

            editable: function(field) {
                field = (this.fields || {})[field];
                return field ? field.editable !== false : true;
            },

            set: function(field, value) {
                var that = this;
                var dirty = that.dirty;

                if (that.editable(field)) {
                    value = that._parse(field, value);

                    if (!equal(value, that.get(field))) {
                        that.dirty = true;
                        that.dirtyFields[field] = true;

                        if (ObservableObject.fn.set.call(that, field, value) && !dirty) {
                            that.dirty = dirty;

                            if (!that.dirty) {
                                that.dirtyFields[field] = false;
                            }
                        }
                    } else {
                        that.trigger("equalSet", { field: field, value: value });
                    }
                }
            },

            accept: function(data) {
                var that = this,
                    parent = function() { return that; },
                    field;

                for (field in data) {
                    var value = data[field];

                    if (field.charAt(0) != "_") {
                        value = that.wrap(data[field], field, parent);
                    }

                    that._set(field, value);
                }

                if (that.idField) {
                    that.id = that.get(that.idField);
                }

                that.dirty = false;
                that.dirtyFields = {};
            },

            isNew: function() {
                return this.id === this._defaultId;
            }
        });

        Model.define = function(base, options) {
            if (options === undefined$1) {
                options = base;
                base = Model;
            }

            var model,
                proto = extend({ defaults: {} }, options),
                name,
                field,
                type,
                value,
                idx,
                length,
                fields = {},
                originalName,
                id = proto.id,
                functionFields = [];

            if (id) {
                proto.idField = id;
            }

            if (proto.id) {
                delete proto.id;
            }

            if (id) {
                proto.defaults[id] = proto._defaultId = "";
            }

            if (toString.call(proto.fields) === "[object Array]") {
                for (idx = 0, length = proto.fields.length; idx < length; idx++) {
                    field = proto.fields[idx];
                    if (typeof field === STRING) {
                        fields[field] = {};
                    } else if (field.field) {
                        fields[field.field] = field;
                    }
                }
                proto.fields = fields;
            }

            for (name in proto.fields) {
                field = proto.fields[name];
                type = field.type || "default";
                value = null;
                originalName = name;

                name = typeof (field.field) === STRING ? field.field : name;

                if (!field.nullable) {
                    value = proto.defaults[originalName !== name ? originalName : name] = field.defaultValue !== undefined$1 ? field.defaultValue : defaultValues[type.toLowerCase()];

                    if (typeof value === "function") {
                        functionFields.push(name);
                    }
                }

                if (options.id === name) {
                    proto._defaultId = value;
                }

                proto.defaults[originalName !== name ? originalName : name] = value;

                if ($.isPlainObject(field)) {
                    field.parse = field.parse || parsers[type];
                } else {
                    field = {
                        parse: parsers[type]
                    };
                }
            }

            if (functionFields.length > 0) {
                proto._initializers = functionFields;
            }

            model = base.extend(proto);
            model.define = function(options) {
                return Model.define(model, options);
            };

            if (proto.fields) {
                model.fields = proto.fields;
                model.idField = proto.idField;
            }

            return model;
        };

        var Comparer = {
            selector: function(field) {
                return isFunction(field) ? field : getter(field);
            },

            compare: function(field) {
                var selector = this.selector(field);
                return function(a, b) {
                    a = selector(a);
                    b = selector(b);

                    if (a == null && b == null) {
                        return 0;
                    }

                    if (a == null) {
                        return -1;
                    }

                    if (b == null) {
                        return 1;
                    }

                    if (a.localeCompare) {
                        return a.localeCompare(b);
                    }

                    return a > b ? 1 : (a < b ? -1 : 0);
                };
            },

            create: function(sort) {
                var compare = sort.compare || this.compare(sort.field);

                if (sort.dir == "desc") {
                    return function(a, b) {
                        return compare(b, a, true);
                    };
                }

                return compare;
            },

            combine: function(comparers) {
                return function(a, b) {
                    var result = comparers[0](a, b),
                        idx,
                        length;

                    for (idx = 1, length = comparers.length; idx < length; idx ++) {
                        result = result || comparers[idx](a, b);
                    }

                    return result;
                };
            }
        };

        var StableComparer = extend({}, Comparer, {
            asc: function(field) {
                var selector = this.selector(field);
                return function(a, b) {
                    var valueA = selector(a);
                    var valueB = selector(b);

                    if (valueA && valueA.getTime && valueB && valueB.getTime) {
                        valueA = valueA.getTime();
                        valueB = valueB.getTime();
                    }

                    if (valueA === valueB) {
                        return a.__position - b.__position;
                    }

                    if (valueA == null) {
                        return -1;
                    }

                    if (valueB == null) {
                        return 1;
                    }

                    if (valueA.localeCompare) {
                        return valueA.localeCompare(valueB);
                    }

                    return valueA > valueB ? 1 : -1;
                };
            },

            desc: function(field) {
                var selector = this.selector(field);
                return function(a, b) {
                    var valueA = selector(a);
                    var valueB = selector(b);

                    if (valueA && valueA.getTime && valueB && valueB.getTime) {
                        valueA = valueA.getTime();
                        valueB = valueB.getTime();
                    }

                    if (valueA === valueB) {
                        return a.__position - b.__position;
                    }

                    if (valueA == null) {
                        return 1;
                    }

                    if (valueB == null) {
                        return -1;
                    }

                    if (valueB.localeCompare) {
                        return valueB.localeCompare(valueA);
                    }

                    return valueA < valueB ? 1 : -1;
                };
            },
            create: function(sort) {
               return this[sort.dir](sort.field);
            }
        });

        map = function(array, callback) {
            var idx, length = array.length, result = new Array(length);

            for (idx = 0; idx < length; idx++) {
                result[idx] = callback(array[idx], idx, array);
            }

            return result;
        };

        var operators = (function() {

            function quote(str) {
                if (typeof str == "string") {
                    str = str.replace(/[\r\n]+/g, "");
                }
                return JSON.stringify(str);
            }

            function textOp(impl) {
                return function(a, b, ignore, accentFoldingFiltering) {
                    b += "";
                    if (ignore) {
                        a = "(" + a + " + '').toString()" + ((accentFoldingFiltering) ? ".toLocaleLowerCase('" + accentFoldingFiltering + "')" : ".toLowerCase()");
                        b = ((accentFoldingFiltering) ? b.toLocaleLowerCase(accentFoldingFiltering) : b.toLowerCase());
                    }
                    return impl(a, quote(b), ignore);
                };
            }

            function operator(op, a, b, ignore, accentFoldingFiltering) {
                if (b != null) {
                    if (typeof b === STRING) {
                        var date = dateRegExp.exec(b);
                        if (date) {
                            b = new Date(+date[1]);
                        } else if (ignore) {
                            b = quote(((accentFoldingFiltering) ? b.toLocaleLowerCase(accentFoldingFiltering) : b.toLowerCase()));
                            a = "((" + a + " || '')+'')" + ((accentFoldingFiltering) ? ".toLocaleLowerCase('" + accentFoldingFiltering + "')" : ".toLowerCase()");
                        } else {
                            b = quote(b);
                        }
                    }

                    if (b.getTime) {
                        //b looks like a Date
                        a = "(" + a + "&&" + a + ".getTime?" + a + ".getTime():" + a + ")";
                        b = b.getTime();
                    }
                }

                return a + " " + op + " " + b;
            }

            function getMatchRegexp(pattern) {
                // take a pattern, as supported by Excel match filter, and
                // convert it to the equivalent JS regular expression.
                // Excel patterns support:
                //
                //   * - match any sequence of characters
                //   ? - match a single character
                //
                // to match a literal * or ?, they must be prefixed by a tilde (~)
                for (var rx = "/^", esc = false, i = 0; i < pattern.length; ++i) {
                    var ch = pattern.charAt(i);
                    if (esc) {
                        rx += "\\" + ch;
                    } else if (ch == "~") {
                        esc = true;
                        continue;
                    } else if (ch == "*") {
                        rx += ".*";
                    } else if (ch == "?") {
                        rx += ".";
                    } else if (".+^$()[]{}|\\/\n\r\u2028\u2029\xA0".indexOf(ch) >= 0) {
                        rx += "\\" + ch;
                    } else {
                        rx += ch;
                    }
                    esc = false;
                }
                return rx + "$/";
            }

            return {
                quote: function(value) {
                    if (value && value.getTime) {
                        return "new Date(" + value.getTime() + ")";
                    }
                    return quote(value);
                },
                eq: function(a, b, ignore, accentFoldingFiltering) {
                    return operator("==", a, b, ignore, accentFoldingFiltering);
                },
                neq: function(a, b, ignore, accentFoldingFiltering) {
                    return operator("!=", a, b, ignore, accentFoldingFiltering);
                },
                gt: function(a, b, ignore) {
                    return operator(">", a, b, ignore);
                },
                gte: function(a, b, ignore) {
                    return operator(">=", a, b, ignore);
                },
                lt: function(a, b, ignore) {
                    return operator("<", a, b, ignore);
                },
                lte: function(a, b, ignore) {
                    return operator("<=", a, b, ignore);
                },
                startswith: textOp(function(a, b) {
                    return a + ".lastIndexOf(" + b + ", 0) == 0";
                }),
                doesnotstartwith: textOp(function(a, b) {
                    return a + ".lastIndexOf(" + b + ", 0) == -1";
                }),
                endswith: textOp(function(a, b) {
                    var n = b ? b.length - 2 : 0;
                    return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") >= 0";
                }),
                doesnotendwith: textOp(function(a, b) {
                    var n = b ? b.length - 2 : 0;
                    return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") < 0";
                }),
                contains: textOp(function(a, b) {
                    return a + ".indexOf(" + b + ") >= 0";
                }),
                doesnotcontain: textOp(function(a, b) {
                    return a + ".indexOf(" + b + ") == -1";
                }),
                matches: textOp(function(a, b) {
                    b = b.substring(1, b.length - 1);
                    return getMatchRegexp(b) + ".test(" + a + ")";
                }),
                doesnotmatch: textOp(function(a, b) {
                    b = b.substring(1, b.length - 1);
                    return "!" + getMatchRegexp(b) + ".test(" + a + ")";
                }),
                isempty: function(a) {
                    return a + " === ''";
                },
                isnotempty: function(a) {
                    return a + " !== ''";
                },
                isnull: function(a) {
                    return "(" + a + " == null)";
                },
                isnotnull: function(a) {
                    return "(" + a + " != null)";
                },
                isnullorempty: function(a) {
                    return "(" + a + " === null) || (" + a + " === '')";
                },
                isnotnullorempty: function(a) {
                    return "(" + a + " !== null) && (" + a + " !== '')";
                }
            };
        })();

        function Query(data) {
            this.data = data || [];
        }

        // Continue to support legacy unsafe-eval for the spreadsheet
        Query.filterExpr = function(expression, options) {
            if ( options === void 0 ) options = { noEval: false };

            if (options.noEval) {
                // using no-eval for most cases
                return filterExprNoEval(expression);
            }

            var expressions = [],
                logic = { and: " && ", or: " || " },
                idx,
                length,
                filter,
                expr,
                fieldFunctions = [],
                operatorFunctions = [],
                field,
                operator,
                filters = expression.filters;

            for (idx = 0, length = filters.length; idx < length; idx++) {
                filter = filters[idx];
                field = filter.field;
                operator = filter.operator;

                if (filter.filters) {
                    expr = Query.filterExpr(filter);
                    //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]
                    filter = expr.expression
                    .replace(/__o\[(\d+)\]/g, function(match, index) {
                        index = +index;
                        return "__o[" + (operatorFunctions.length + index) + "]";
                    })
                    .replace(/__f\[(\d+)\]/g, function(match, index) {
                        index = +index;
                        return "__f[" + (fieldFunctions.length + index) + "]";
                    });

                    operatorFunctions.push.apply(operatorFunctions, expr.operators);
                    fieldFunctions.push.apply(fieldFunctions, expr.fields);
                } else {
                    if (typeof field === FUNCTION) {
                        expr = "__f[" + fieldFunctions.length + "](d)";
                        fieldFunctions.push(field);
                    } else {
                        expr = kendo.expr(field);
                    }

                    if (typeof operator === FUNCTION) {
                        filter = "__o[" + operatorFunctions.length + "](" + expr + ", " + operators.quote(filter.value) + ")";
                        operatorFunctions.push(operator);
                    } else {
                        filter = operators[(operator || "eq").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined$1 ? filter.ignoreCase : true, expression.accentFoldingFiltering);
                    }
                }

                expressions.push(filter);
            }

            return { expression: "(" + expressions.join(logic[expression.logic]) + ")", fields: fieldFunctions, operators: operatorFunctions };
        };

        function normalizeSort(field, dir) {
            if (field) {
                var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
                descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined$1 ? [descriptor] : []);

                return grep(descriptors, function(d) { return !!d.dir; });
            }
        }

        function sortFields(sorts, dir) {
            var sortObject = {};

            if (sorts) {
                var descriptor = typeof sorts === STRING ? { field: sorts, dir: dir } : sorts,
                descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined$1 ? [descriptor] : []);

                for (var i = 0; i < descriptors.length; i++) {
                    sortObject[descriptors[i].field] = { dir: descriptors[i].dir, index: i + 1 };
                }
            }

            return sortObject;
        }

        var operatorMap = {
            "==": "eq",
            equals: "eq",
            isequalto: "eq",
            equalto: "eq",
            equal: "eq",
            "!=": "neq",
            ne: "neq",
            notequals: "neq",
            isnotequalto: "neq",
            notequalto: "neq",
            notequal: "neq",
            "<": "lt",
            islessthan: "lt",
            lessthan: "lt",
            less: "lt",
            "<=": "lte",
            le: "lte",
            islessthanorequalto: "lte",
            lessthanequal: "lte",
            ">": "gt",
            isgreaterthan: "gt",
            greaterthan: "gt",
            greater: "gt",
            ">=": "gte",
            isgreaterthanorequalto: "gte",
            greaterthanequal: "gte",
            ge: "gte",
            notsubstringof: "doesnotcontain",
            isnull: "isnull",
            isempty: "isempty",
            isnotempty: "isnotempty"
        };

        function normalizeOperator(expression) {
            var idx,
            length,
            filter,
            operator,
            filters = expression.filters;

            if (filters) {
                for (idx = 0, length = filters.length; idx < length; idx++) {
                    filter = filters[idx];
                    operator = filter.operator;

                    if (operator && typeof operator === STRING) {
                        filter.operator = operatorMap[operator.toLowerCase()] || operator;
                    }

                    normalizeOperator(filter);
                }
            }
        }

        function normalizeFilter(expression) {
            if (expression && !isEmptyObject(expression)) {
                if (isArray(expression) || !expression.filters) {
                    expression = {
                        logic: "and",
                        filters: isArray(expression) ? expression : [expression]
                    };
                }

                normalizeOperator(expression);

                return expression;
            }
        }

        Query.normalizeFilter = normalizeFilter;

        function compareDescriptor(f1, f2) {
            if (f1.logic || f2.logic) {
                return false;
            }

            return f1.field === f2.field && f1.value === f2.value && f1.operator === f2.operator;
        }

        function normalizeDescriptor(filter) {
            filter = filter || {};

            if (isEmptyObject(filter)) {
                return { logic: "and", filters: [] };
            }

            return normalizeFilter(filter);
        }

        function fieldComparer(a, b) {
            if (b.logic || (a.field > b.field)) {
                return 1;
            } else if (a.field < b.field) {
                return -1;
            } else {
                return 0;
            }
        }

        function compareFilters(expr1, expr2) {
            expr1 = normalizeDescriptor(expr1);
            expr2 = normalizeDescriptor(expr2);

            if (expr1.logic !== expr2.logic) {
                return false;
            }

            var f1, f2;
            var filters1 = (expr1.filters || []).slice();
            var filters2 = (expr2.filters || []).slice();

            if (filters1.length !== filters2.length) {
                return false;
            }

            filters1 = filters1.sort(fieldComparer);
            filters2 = filters2.sort(fieldComparer);

            for (var idx = 0; idx < filters1.length; idx++) {
                f1 = filters1[idx];
                f2 = filters2[idx];

                if (f1.logic && f2.logic) {
                    if (!compareFilters(f1, f2)) {
                        return false;
                    }
                } else if (!compareDescriptor(f1, f2)) {
                    return false;
                }
            }

            return true;
        }

        Query.compareFilters = compareFilters;

        function normalizeAggregate(expressions) {
            return isArray(expressions) ? expressions : [expressions];
        }

        function normalizeGroup(field, dir, compare, skipItemSorting) {
            var descriptor = typeof field === STRING ? { field: field, dir: dir, compare: compare, skipItemSorting: skipItemSorting } : field,
            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined$1 ? [descriptor] : []);

            return map(descriptors, function(d) {
                return {
                    field: d.field,
                    dir: d.dir || "asc",
                    aggregates: d.aggregates,
                    compare: d.compare,
                    skipItemSorting: d.skipItemSorting
                };
            });
        }

        function normalizeGroupWithoutCompare(field, dir, compare) {
            var descriptors = normalizeGroup(field, dir, compare);

            for (var i = 0; i < descriptors.length; i++) {
                delete descriptors[i].compare;
            }

            return descriptors;
        }

        function anyGroupDescriptorHasCompare(groupDescriptors) {
            var descriptors = isArray(groupDescriptors) ? groupDescriptors : [groupDescriptors];

            for (var i = 0; i < descriptors.length; i++) {
                if (descriptors[i] && isFunction(descriptors[i].compare)) {
                    return true;
                }
            }

            return false;
        }

        Query.prototype = {
            toArray: function() {
                return this.data;
            },
            range: function(index, count) {
                return new Query(this.data.slice(index, index + count));
            },
            skip: function(count) {
                return new Query(this.data.slice(count));
            },
            take: function(count) {
                return new Query(this.data.slice(0, count));
            },
            select: function(selector) {
                return new Query(map(this.data, selector));
            },
            order: function(selector, dir, inPlace) {
                var sort = { dir: dir };

                if (selector) {
                    if (selector.compare) {
                        sort.compare = selector.compare;
                    } else {
                        sort.field = selector;
                    }
                }

                if (inPlace) {
                    return new Query(this.data.sort(Comparer.create(sort)));
                }

                return new Query(this.data.slice(0).sort(Comparer.create(sort)));
            },
            orderBy: function(selector, inPlace) {
                return this.order(selector, "asc", inPlace);
            },
            orderByDescending: function(selector, inPlace) {
                return this.order(selector, "desc", inPlace);
            },
            sort: function(field, dir, comparer, inPlace) {
                var idx,
                length,
                descriptors = normalizeSort(field, dir),
                comparers = [];

                comparer = comparer || Comparer;

                if (descriptors.length) {
                    for (idx = 0, length = descriptors.length; idx < length; idx++) {
                        comparers.push(comparer.create(descriptors[idx]));
                    }

                    return this.orderBy({ compare: comparer.combine(comparers) }, inPlace);
                }

                return this;
            },

            filter: function(expressions) {
                var compiled,
                data = this.data,
                result = [];

                expressions = normalizeFilter(expressions);

                if (!expressions || expressions.filters.length === 0) {
                    return this;
                }

                compiled = Query.filterExpr(expressions, { noEval: true });

                result = data.filter(compiled);
                return new Query(result);
            },

            group: function(descriptors, allData, options) {
                descriptors = normalizeGroup(descriptors || []);
                allData = allData || this.data;

                var that = this,
                result = new Query(that.data),
                descriptor;

                var getFilteredData = function (g, data) {
                    data = data || new Query(allData).filter([{
                        field: g.field,
                        operator: "eq",
                        value: g.value,
                        ignoreCase: false
                    }]);

                    return data;
                };

                if (descriptors.length > 0) {
                    descriptor = descriptors[0];

                    if (options && options.groupPaging) {
                        result = new Query(allData).groupAllData(descriptor, allData).select(function(group) {
                            var cachedFilteredData;

                            var items = descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), getFilteredData(group, cachedFilteredData).toArray(), options).toArray() : group.items;

                            return {
                                field: group.field,
                                value: group.value,
                                hasSubgroups: descriptors.length > 1,
                                items: items,
                                aggregates: descriptor.aggregates && descriptor.aggregates.length ? getFilteredData(group, cachedFilteredData).aggregate(descriptor.aggregates) : {},
                                uid: kendo.guid(),
                                itemCount: items.length,
                                subgroupCount: items.length
                            };
                        });

                    } else {
                        result = result.groupBy(descriptor).select(function(group) {
                            var cachedFilteredData;
                            return {
                                field: group.field,
                                value: group.value,
                                items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), getFilteredData(group, cachedFilteredData).toArray()).toArray() : group.items,
                                hasSubgroups: descriptors.length > 1,
                                aggregates: descriptor.aggregates && descriptor.aggregates.length ? getFilteredData(group, cachedFilteredData).aggregate(descriptor.aggregates) : {},
                            };
                        });
                    }
                }
                return result;
            },

            groupBy: function(descriptor) {
                var that = this;

                if (isEmptyObject(descriptor) || !this.data.length) {
                    return new Query([]);
                }

                var field = descriptor.field,
                    sorted = descriptor.skipItemSorting ? this.data : this._sortForGrouping(field, descriptor.dir || "asc"),
                    accessor = kendo.accessor(field),
                    item,
                    groupValue = accessor.get(sorted[0], field),
                    group = {
                        field: field,
                        value: groupValue,
                        items: []
                    },
                    currentValue,
                    idx,
                    len,
                    result = [group];

                for (idx = 0, len = sorted.length; idx < len; idx++) {
                    item = sorted[idx];
                    currentValue = accessor.get(item, field);
                    if (!groupValueComparer(groupValue, currentValue)) {
                        groupValue = currentValue;
                        group = {
                            field: field,
                            value: groupValue,
                            items: []
                        };
                        result.push(group);
                    }
                    group.items.push(item);
                }

                result = that._sortGroups(result, descriptor);

                return new Query(result);
            },

            groupAllData: function(descriptor, allData) {
                if (isEmptyObject(descriptor) || this.data && !this.data.length) {
                    return new Query([]);
                }

                var field = descriptor.field,
                    sorted = descriptor.skipItemSorting ? allData : new Query(allData).sort(field, descriptor.dir || "asc", StableComparer).toArray(),
                    accessor = kendo.accessor(field),
                    item,
                    groupValue = accessor.get(sorted[0], field),
                    group = {
                        field: field,
                        value: groupValue,
                        items: []
                    },
                    currentValue,
                    idx,
                    len,
                    result = [group];

                for (idx = 0, len = sorted.length; idx < len; idx++) {
                    item = sorted[idx];
                    currentValue = accessor.get(item, field);
                    if (!groupValueComparer(groupValue, currentValue)) {
                        groupValue = currentValue;
                        group = {
                            field: field,
                            value: groupValue,
                            items: []
                        };
                        result.push(group);
                    }
                    group.items.push(item);
                }

                result = this._sortGroups(result, descriptor);

                return new Query(result);
            },

            _sortForGrouping: function(field, dir) {
                var idx, length,
                    data = this.data;

                if (!stableSort) {
                    for (idx = 0, length = data.length; idx < length; idx++) {
                        data[idx].__position = idx;
                    }

                    data = new Query(data).sort(field, dir, StableComparer).toArray();

                    for (idx = 0, length = data.length; idx < length; idx++) {
                        delete data[idx].__position;
                    }
                    return data;
                }

                return this.sort(field, dir).toArray();
            },

            _sortGroups: function(groups, descriptor) {
                var result = groups;

                if (descriptor && isFunction(descriptor.compare)) {
                    result = new Query(result).order({ compare: descriptor.compare }, descriptor.dir || ASCENDING).toArray();
                }

                return result;
            },

            aggregate: function(aggregates) {
                var idx,
                    len,
                    result = {},
                    state = {};

                if (aggregates && aggregates.length) {
                    for (idx = 0, len = this.data.length; idx < len; idx++) {
                        calculateAggregate(result, aggregates, this.data[idx], idx, len, state);
                    }
                }
                return result;
            }
        };

        function groupValueComparer(a, b) {
            if (a && a.getTime && b && b.getTime) {
                return a.getTime() === b.getTime();
            }
            return a === b;
        }

        function calculateAggregate(accumulator, aggregates, item, index, length, state) {
            aggregates = aggregates || [];
            var idx,
                aggr,
                functionName,
                len = aggregates.length;

            for (idx = 0; idx < len; idx++) {
                aggr = aggregates[idx];
                functionName = aggr.aggregate;
                var field = aggr.field;
                accumulator[field] = accumulator[field] || {};
                state[field] = state[field] || {};
                state[field][functionName] = state[field][functionName] || {};
                accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length, state[field][functionName]);
            }
        }

        var functions = {
            sum: function(accumulator, item, accessor) {
                var value = accessor.get(item);

                if (!isNumber(accumulator)) {
                    accumulator = value;
                } else if (isNumber(value)) {
                    accumulator += value;
                }

                return accumulator;
            },
            count: function(accumulator) {
                return (accumulator || 0) + 1;
            },
            average: function(accumulator, item, accessor, index, length, state) {
                var value = accessor.get(item);

                if (state.count === undefined$1) {
                    state.count = 0;
                }

                if (!isNumber(accumulator)) {
                    accumulator = value;
                } else if (isNumber(value)) {
                    accumulator += value;
                }

                if (isNumber(value)) {
                    state.count++;
                }

                if (index == length - 1 && isNumber(accumulator)) {
                    accumulator = accumulator / state.count;
                }
                return accumulator;
            },
            max: function(accumulator, item, accessor) {
                var value = accessor.get(item);

                if (!isNumber(accumulator) && !isDate(accumulator)) {
                    accumulator = value;
                }

                if (accumulator < value && (isNumber(value) || isDate(value))) {
                    accumulator = value;
                }
                return accumulator;
            },
            min: function(accumulator, item, accessor) {
                var value = accessor.get(item);

                if (!isNumber(accumulator) && !isDate(accumulator)) {
                    accumulator = value;
                }

                if (accumulator > value && (isNumber(value) || isDate(value))) {
                    accumulator = value;
                }
                return accumulator;
            }
        };

        function isNumber(val) {
            return typeof val === "number" && !isNaN(val);
        }

        function isDate(val) {
            return val && val.getTime;
        }

        function toJSON(array) {
            var idx, length = array.length, result = new Array(length);

            for (idx = 0; idx < length; idx++) {
                result[idx] = array[idx].toJSON();
            }

            return result;
        }

        Query.normalizeGroup = normalizeGroup;
        Query.normalizeSort = normalizeSort;

        Query.process = function(data, options, inPlace) {
            options = options || {};

            var group = options.group;
            var customGroupSort = anyGroupDescriptorHasCompare(normalizeGroup(group || []));
            var query = new Query(data),
                groupDescriptorsWithoutCompare = normalizeGroupWithoutCompare(group || []),
                normalizedSort = normalizeSort(options.sort || []),
                sort = customGroupSort ? normalizedSort : groupDescriptorsWithoutCompare.concat(normalizedSort),
                groupDescriptorsWithoutSort,
                total,
                filterCallback = options.filterCallback,
                filter = options.filter,
                skip = options.skip,
                take = options.take;

            if (sort && inPlace) {
                query = query.sort(sort, undefined$1, undefined$1, inPlace);
            }

            if (filter) {
                query = query.filter(filter);

                if (filterCallback) {
                    query = filterCallback(query);
                }

                total = query.toArray().length;
            }

            if (sort) {
                if (!inPlace) {
                    query = query.sort(sort);
                }

                if (group) {
                    data = query.toArray();
                }
            }

            if (customGroupSort) {
                query = query.group(group, data, options);

                if (skip !== undefined$1 && take !== undefined$1 && !options.groupPaging) {
                    query = new Query(flatGroups(query.toArray())).range(skip, take);

                    groupDescriptorsWithoutSort = map(groupDescriptorsWithoutCompare, function(groupDescriptor) {
                        return extend({}, groupDescriptor, {
                            skipItemSorting: true
                        });
                    });

                    query = query.group(groupDescriptorsWithoutSort, data, options);
                }
            } else {
                if (skip !== undefined$1 && take !== undefined$1) {
                    total = query.data.length;

                    if (skip + take > total && options.virtual) {
                        skip -= skip + take - total;
                        skip = skip < 0 ? 0 : skip;
                    }
                    query = query.range(skip, take);
                }

                if (group && (!isEmptyObject(group) || group.length !== 0)) {
                    query = query.group(group, data, options);
                }
            }

            return {
                total: total,
                data: query.toArray()
            };
        };

        var LocalTransport = Class.extend({
            init: function(options) {
                this.data = options.data;
            },

            read: function(options) {
                options.success(this.data);
            },
            update: function(options) {
                options.success(options.data);
            },
            create: function(options) {
                options.success(options.data);
            },
            destroy: function(options) {
                options.success(options.data);
            }
        });

        var RemoteTransport = Class.extend( {
            init: function(options) {
                var that = this, parameterMap;

                options = that.options = extend({}, that.options, options);

                each(crud, function(index, type) {
                    if (typeof options[type] === STRING) {
                        options[type] = {
                            url: options[type]
                        };
                    }
                });

                that.cache = options.cache ? Cache.create(options.cache) : {
                    find: noop,
                    add: noop
                };

                parameterMap = options.parameterMap;

                if (options.submit) {
                    that.submit = options.submit;
                }

                if (isFunction(options.push)) {
                    that.push = options.push;
                }

                if (!that.push) {
                    that.push = identity;
                }

                that.parameterMap = isFunction(parameterMap) ? parameterMap : function(options) {
                    var result = {};

                    each(options, function(option, value) {
                        if (option in parameterMap) {
                            option = parameterMap[option];
                            if (isPlainObject(option)) {
                                value = option.value(value);
                                option = option.key;
                            }
                        }

                        result[option] = value;
                    });

                    return result;
                };
            },

            options: {
                parameterMap: identity
            },

            create: function(options) {
                return ajax(this.setup(options, CREATE));
            },

            read: function(options) {
                var that = this,
                    success,
                    error,
                    result,
                    cache = that.cache;

                options = that.setup(options, READ);

                success = options.success || noop;
                error = options.error || noop;

                result = cache.find(options.data);

                if (result !== undefined$1) {
                    success(result);
                } else {
                    options.success = function(result) {
                        cache.add(options.data, result);

                        success(result);
                    };

                    $.ajax(options);
                }
            },

            update: function(options) {
                return ajax(this.setup(options, UPDATE));
            },

            destroy: function(options) {
                return ajax(this.setup(options, DESTROY));
            },

            setup: function(options, type) {
                options = options || {};

                var that = this,
                    parameters,
                    operation = that.options[type],
                    data = isFunction(operation.data) ? operation.data(options.data) : operation.data;

                options = extend(true, {}, operation, options);
                parameters = extend(true, {}, data, options.data);

                options.data = that.parameterMap(parameters, type);

                if (isFunction(options.url)) {
                    options.url = options.url(parameters);
                }

                return options;
            }
        });

        var Cache = Class.extend({
            init: function() {
                this._store = {};
            },
            add: function(key, data) {
                if (key !== undefined$1) {
                    this._store[stringify(key)] = data;
                }
            },
            find: function(key) {
                return this._store[stringify(key)];
            },
            clear: function() {
                this._store = {};
            },
            remove: function(key) {
                delete this._store[stringify(key)];
            }
        });

        Cache.create = function(options) {
            var store = {
                "inmemory": function() { return new Cache(); }
            };

            if (isPlainObject(options) && isFunction(options.find)) {
                return options;
            }

            if (options === true) {
                return new Cache();
            }

            return store[options]();
        };

        function serializeRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
            var record,
                getter,
                originalName,
                idx,
                setters = {},
                length;

            for (idx = 0, length = data.length; idx < length; idx++) {
                record = data[idx];
                for (getter in getters) {
                    originalName = fieldNames[getter];

                    if (originalName && originalName !== getter) {
                        if (!setters[originalName]) {
                            setters[originalName] = kendo.setter(originalName);
                        }
                        setters[originalName](record, getters[getter](record));
                        delete record[getter];
                    }
                }
            }
        }

        function convertRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
            var record,
                getter,
                originalName,
                idx,
                length;

            for (idx = 0, length = data.length; idx < length; idx++) {
                record = data[idx];
                for (getter in getters) {
                    record[getter] = modelInstance._parse(getter, getters[getter](record));

                    originalName = fieldNames[getter];
                    if (originalName && originalName !== getter) {
                        delete record[originalName];
                    }
                }
            }
        }

        function convertGroup(data, getters, modelInstance, originalFieldNames, fieldNames) {
            var record,
                idx,
                fieldName,
                length;

            for (idx = 0, length = data.length; idx < length; idx++) {
                record = data[idx];

                fieldName = originalFieldNames[record.field];
                if (fieldName && fieldName != record.field) {
                    record.field = fieldName;
                }

                record.value = modelInstance._parse(record.field, record.value);

                if (record.items) {
                    if (record.hasSubgroups) {
                        convertGroup(record.items, getters, modelInstance, originalFieldNames, fieldNames);
                    } else {
                        convertRecords(record.items, getters, modelInstance, originalFieldNames, fieldNames);
                    }
                }
            }
        }

        function wrapDataAccess(originalFunction, model, converter, getters, originalFieldNames, fieldNames) {
            return function(data) {
                data = originalFunction(data);

                return wrapDataAccessBase(model, converter, getters, originalFieldNames, fieldNames)(data);
            };
        }

        function wrapDataAccessBase(model, converter, getters, originalFieldNames, fieldNames) {
            return function(data) {

                if (data && !isEmptyObject(getters)) {
                    if (toString.call(data) !== "[object Array]" && !(data instanceof ObservableArray)) {
                        data = [data];
                    }

                    converter(data, getters, new model(), originalFieldNames, fieldNames);
                }

                return data || [];
            };
        }

        var DataReader = Class.extend({
            init: function(schema) {
                var that = this, member, get, model, base;

                schema = schema || {};

                for (member in schema) {
                    get = schema[member];

                    that[member] = typeof get === STRING ? getter(get) : get;
                }

                base = schema.modelBase || Model;

                if (isPlainObject(that.model)) {
                    that.model = model = base.define(that.model);
                }

                var dataFunction = that.data.bind(that);

                that._dataAccessFunction = dataFunction;

                if (that.model) {
                    var groupsFunction = that.groups.bind(that),
                        serializeFunction = that.serialize.bind(that),
                        originalFieldNames = {},
                        getters = {},
                        serializeGetters = {},
                        fieldNames = {},
                        shouldSerialize = false,
                        fieldName,
                        name;

                    model = that.model;

                    if (model.fields) {
                        each(model.fields, function(field, value) {
                            var fromName;

                            fieldName = field;

                            if (isPlainObject(value) && value.field) {
                                fieldName = value.field;
                            } else if (typeof value === STRING) {
                                fieldName = value;
                            }

                            if (isPlainObject(value) && value.from) {
                                fromName = value.from;
                            }

                            shouldSerialize = shouldSerialize || (fromName && fromName !== field) || fieldName !== field;
                            name = fromName || fieldName;
                            getters[field] = name.indexOf(".") !== -1 ? getter(name, true) : getter(name);
                            serializeGetters[field] = getter(field);
                            originalFieldNames[fromName || fieldName] = field;
                            fieldNames[field] = fromName || fieldName;
                        });

                        if (!schema.serialize && shouldSerialize) {
                            that.serialize = wrapDataAccess(serializeFunction, model, serializeRecords, serializeGetters, originalFieldNames, fieldNames);
                        }
                    }

                    that._dataAccessFunction = dataFunction;
                    that._wrapDataAccessBase = wrapDataAccessBase(model, convertRecords, getters, originalFieldNames, fieldNames);
                    that.data = wrapDataAccess(dataFunction, model, convertRecords, getters, originalFieldNames, fieldNames);
                    that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters, originalFieldNames, fieldNames);
                }
            },
            errors: function(data) {
                return data ? data.errors : null;
            },
            parse: identity,
            data: identity,
            total: function(data) {
                return data.length;
            },
            groups: identity,
            aggregates: function() {
                return {};
            },
            serialize: function(data) {
                return data;
            }
        });

        function fillLastGroup(originalGroup, newGroup) {
            var currOriginal;
            var currentNew;

            if (newGroup.items && newGroup.items.length) {
                for (var i = 0; i < newGroup.items.length; i++) {
                    currOriginal = originalGroup.items[originalGroup.items.length - 1];
                    currentNew = newGroup.items[i];
                    if (currOriginal && currentNew) {
                        if (currOriginal.hasSubgroups && currOriginal.value == currentNew.value) {
                            fillLastGroup(currOriginal, currentNew);
                        } else if (currOriginal.field && currOriginal.value == currentNew.value) {
                            currOriginal.items.omitChangeEvent = true;
                            currOriginal.items.push.apply(currOriginal.items, currentNew.items);
                            currOriginal.items.omitChangeEvent = false;
                        } else {
                            originalGroup.items.omitChangeEvent = true;
                            originalGroup.items.push.apply(originalGroup.items, [currentNew]);
                            originalGroup.items.omitChangeEvent = false;
                        }
                    } else if (currentNew) {
                        originalGroup.items.omitChangeEvent = true;
                        originalGroup.items.push.apply(originalGroup.items, [currentNew]);
                        originalGroup.items.omitChangeEvent = false;
                    }
                }
            }
        }
        function mergeGroups(target, dest, skip, take) {
            var group,
                idx = 0,
                items;

            while (dest.length && take) {
                group = dest[idx];
                items = group.items;

                var length = items.length;

                if (target && target.field === group.field && target.value === group.value) {
                    if (target.hasSubgroups && target.items.length) {
                        mergeGroups(target.items[target.items.length - 1], group.items, skip, take);
                    } else {
                        items = items.slice(skip, skip + take);
                        target.items = target.items.concat(items);
                    }
                    dest.splice(idx--, 1);
                } else if (group.hasSubgroups && items.length) {
                    mergeGroups(group, items, skip, take);
                    if (!group.items.length) {
                        dest.splice(idx--, 1);
                    }
                } else {
                    items = items.slice(skip, skip + take);
                    group.items = items;

                    if (!group.items.length) {
                        dest.splice(idx--, 1);
                    }
                }

                if (items.length === 0) {
                    skip -= length;
                } else {
                    skip = 0;
                    take -= items.length;
                }

                if (++idx >= dest.length) {
                    break;
                }
            }

            if (idx < dest.length) {
                dest.splice(idx, dest.length - idx);
            }
        }

        function flatGroups(groups, indexFunction) {
            var result = [];
            var groupsLength = (groups || []).length;
            var group;
            var items;
            var indexFn = isFunction(indexFunction) ? indexFunction : function(array, index) {
                return array[index];
            };

            for (var groupIndex = 0; groupIndex < groupsLength; groupIndex++) {
                group = indexFn(groups, groupIndex);

                if (group.hasSubgroups) {
                    result = result.concat(flatGroups(group.items));
                } else {
                    items = group.items;

                    for (var itemIndex = 0; itemIndex < items.length; itemIndex++) {
                        result.push(indexFn(items, itemIndex));
                    }
                }
            }
            return result;
        }

        function flattenGroups(data) {
            var idx,
                result = [],
                length,
                items,
                itemIndex;

            for (idx = 0, length = data.length; idx < length; idx++) {
                var group = data.at(idx);
                if (group.items) {
                    if (group.hasSubgroups) {
                        result = result.concat(flattenGroups(group.items));
                    } else {
                        items = group.items;
                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
                            result.push(items.at(itemIndex));
                        }
                    }
                }
            }
            return result;
        }

        function wrapGroupItems(data, model) {
            var idx, length, group;
            if (model) {
                for (idx = 0, length = data.length; idx < length; idx++) {
                    group = data.at(idx);
                    if (group.items) {
                        if (group.hasSubgroups) {
                            wrapGroupItems(group.items, model);
                        } else {
                            group.items = new LazyObservableArray(group.items, model, group.items._events);
                        }
                    }
                }
            }
        }

        function eachGroupItems(data, func) {
            for (var idx = 0; idx < data.length; idx++) {
                if (data[idx].hasSubgroups) {
                    if (eachGroupItems(data[idx].items, func)) {
                        return true;
                    }
                } else if (func(data[idx].items, data[idx])) {
                    return true;
                }
            }
        }

        function replaceInRanges(ranges, data, item, observable) {
            for (var idx = 0; idx < ranges.length; idx++) {
                if (ranges[idx].data === data) {
                    break;
                }
                if (replaceInRange(ranges[idx].data, item, observable)) {
                    break;
                }
            }
        }

        function replaceInRange(items, item, observable) {
            for (var idx = 0, length = items.length; idx < length; idx++) {
                if (items[idx] && items[idx].hasSubgroups) {
                    return replaceInRange(items[idx].items, item, observable);
                } else if (items[idx] === item || items[idx] === observable) {
                   items[idx] = observable;
                   return true;
                }
            }
        }

        function replaceWithObservable(view, data, ranges, type, serverGrouping) {
            for (var viewIndex = 0, length = view.length; viewIndex < length; viewIndex++) {
                var item = view[viewIndex];

                if (!item || item instanceof type) {
                    continue;
                }

                if (item.hasSubgroups !== undefined$1 && !serverGrouping) {
                    replaceWithObservable(item.items, data, ranges, type, serverGrouping);
                } else {
                    for (var idx = 0; idx < data.length; idx++) {
                        if (data[idx] === item) {
                            view[viewIndex] = data.at(idx);
                            replaceInRanges(ranges, data, item, view[viewIndex]);
                            break;
                        }
                    }
                }
            }
        }

        function removeModel(data, model) {
            if (!data) {
                return;
            }
            var length = data.length;
            var dataItem;
            var idx;

            for (idx = 0; idx < length; idx++) {
                dataItem = data[idx];

                if (dataItem.uid && dataItem.uid == model.uid) {
                    data.splice(idx, 1);
                    return dataItem;
                }
            }
        }

        function indexOfPristineModel(data, model) {
            if (model) {
                return indexOf(data, function(item) {
                    return (item.uid && item.uid == model.uid) || (item[model.idField] === model.id && model.id !== model._defaultId);
                });
            }
            return -1;
        }

        function indexOfModel(data, model) {
            if (model) {
                return indexOf(data, function(item) {
                    return item.uid == model.uid;
                });
            }
            return -1;
        }

        function indexOf(data, comparer) {
            var idx, length;
            if (!data) {
                return;
            }

            for (idx = 0, length = data.length; idx < length; idx++) {
                if (comparer(data[idx])) {
                    return idx;
                }
            }

            return -1;
        }

        function fieldNameFromModel(fields, name) {
            if (fields && !isEmptyObject(fields)) {
                var descriptor = fields[name];
                var fieldName;
                if (isPlainObject(descriptor)) {
                    fieldName = descriptor.from || descriptor.field || name;
                } else {
                    fieldName = fields[name] || name;
                }

                if (isFunction(fieldName)) {
                    return name;
                }

                return fieldName;
            }
            return name;
        }

        function convertFilterDescriptorsField(descriptor, model) {
            var idx,
                length,
                target = {};

            for (var field in descriptor) {
                if (field !== "filters") {
                    target[field] = descriptor[field];
                }
            }

            if (descriptor.filters) {
                target.filters = [];
                for (idx = 0, length = descriptor.filters.length; idx < length; idx++) {
                    target.filters[idx] = convertFilterDescriptorsField(descriptor.filters[idx], model);
                }
            } else {
                target.field = fieldNameFromModel(model.fields, target.field);
            }
            return target;
        }

        function convertDescriptorsField(descriptors, model) {
            var idx,
                length,
                result = [],
                target,
                descriptor;

            for (idx = 0, length = descriptors.length; idx < length; idx ++) {
                target = {};

                descriptor = descriptors[idx];

                for (var field in descriptor) {
                    target[field] = descriptor[field];
                }

                target.field = fieldNameFromModel(model.fields, target.field);

                if (target.aggregates && isArray(target.aggregates)) {
                    target.aggregates = convertDescriptorsField(target.aggregates, model);
                }
                result.push(target);
            }
            return result;
        }

        var DataSource = Observable.extend({
            init: function(options) {
                var that = this, model, data;

                if (options) {
                    data = options.data;
                }

                options = that.options = extend({}, that.options, options);

                that._map = {};
                that._prefetch = {};
                that._data = [];
                that._pristineData = [];
                that._ranges = [];
                that._view = [];
                that._pristineTotal = 0;
                that._destroyed = [];
                that._pageSize = options.pageSize;
                that._page = options.page || (options.pageSize ? 1 : undefined$1);
                that._sort = normalizeSort(options.sort);
                that._sortFields = sortFields(options.sort);
                that._filter = normalizeFilter(options.filter);
                that._group = normalizeGroup(options.group);
                that._aggregate = options.aggregate;
                that._total = options.total;
                that._groupPaging = options.groupPaging;

                if (that._groupPaging) {
                    that._groupsState = {};
                }
                that._shouldDetachObservableParents = true;

                Observable.fn.init.call(that);

                that.transport = Transport.create(options, data, that);

                if (isFunction(that.transport.push)) {
                    that.transport.push({
                        pushCreate: that._pushCreate.bind(that),
                        pushUpdate: that._pushUpdate.bind(that),
                        pushDestroy: that._pushDestroy.bind(that)
                    });
                }

                if (options.offlineStorage != null) {
                    if (typeof options.offlineStorage == "string") {
                        var key = options.offlineStorage;

                        that._storage = {
                            getItem: function() {
                                return JSON.parse(localStorage.getItem(key));
                            },
                            setItem: function(item) {
                                localStorage.setItem(key, stringify(that.reader.serialize(item)));
                            }
                        };
                    } else {
                        that._storage = options.offlineStorage;
                    }
                }

                that.reader = new kendo.data.readers[options.schema.type || "json" ](options.schema);

                model = that.reader.model || {};

                that._detachObservableParents();

                that._data = that._observe(that._data);
                that._online = true;

                that.bind(["push", ERROR, CHANGE, REQUESTSTART, SYNC, REQUESTEND, PROGRESS], options);
            },

            options: {
                data: null,
                schema: {
                   modelBase: Model
                },
                offlineStorage: null,
                serverSorting: false,
                serverPaging: false,
                serverFiltering: false,
                serverGrouping: false,
                serverAggregates: false,
                batch: false,
                inPlaceSort: false
            },

            clone: function() {
                return this;
            },

            online: function(value) {
                if (value !== undefined$1) {
                    if (this._online != value) {
                        this._online = value;

                        if (value) {
                            return this.sync();
                        }
                    }

                    return $.Deferred().resolve().promise();
                } else {
                    return this._online;
                }
            },

            offlineData: function(state) {
                if (this.options.offlineStorage == null) {
                    return null;
                }

                if (state !== undefined$1) {
                    return this._storage.setItem(state);
                }

                return this._storage.getItem() || [];
            },

            _isGrouped: function() {
                var group = this.group() || [];

                return group.length;
            },

            _isServerGrouped: function() {
                var group = this.group() || [];

                return this.options.serverGrouping && group.length;
            },

            _isServerGroupPaged: function() {
                return this._isServerGrouped() && this._groupPaging;
            },

            _isGroupPaged: function() {
                var group = this._group || [];

                return this._groupPaging && group.length;
            },

            _pushCreate: function(result) {
                this._push(result, "pushCreate");
            },

            _pushUpdate: function(result) {
                this._push(result, "pushUpdate");
            },

            _pushDestroy: function(result) {
                this._push(result, "pushDestroy");
            },

            _push: function(result, operation) {
                var data = this._readData(result);

                if (!data) {
                    data = result;
                }

                this[operation](data);
            },

            _flatData: function(data, skip) {
                if (data) {
                    if (this._isServerGrouped()) {
                        return flattenGroups(data);
                    }

                    if (!skip) {
                        for (var idx = 0; idx < data.length; idx++) {
                            data.at(idx);
                        }
                    }
                }

                return data;
            },

            parent: noop,

            get: function(id) {
                var idx, length, data = this._flatData(this._data, this.options.useRanges);

                for (idx = 0, length = data.length; idx < length; idx++) {
                    if (data[idx].id == id) {
                        return data[idx];
                    }
                }
            },

            getByUid: function(id) {
                return this._getByUid(id, this._data);
            },

            _getByUid: function(id, dataItems) {
                var idx, length, data = this._flatData(dataItems, this.options.useRanges);

                if (!data) {
                    return;
                }

                for (idx = 0, length = data.length; idx < length; idx++) {
                    if (data[idx].uid == id) {
                        return data[idx];
                    }
                }
            },

            indexOf: function(model) {
                return indexOfModel(this._data, model);
            },

            at: function(index) {
                return this._data.at(index);
            },

            data: function(value) {
                var that = this;
                if (value !== undefined$1) {
                    that._detachObservableParents();
                    that._data = this._observe(value);

                    that._pristineData = value.slice(0);

                    that._storeData();

                    that._ranges = [];
                    that.trigger("reset");
                    that._addRange(that._data);

                    that._total = that._data.length;
                    that._pristineTotal = that._total;

                    that._process(that._data);
                } else {
                    if (that._data) {
                        for (var idx = 0; idx < that._data.length; idx++) {
                            that._data.at(idx);
                        }
                    }

                    return that._data;
                }
            },

            view: function(value) {
                if (value === undefined$1) {
                    return this._view;
                } else {
                    this._view = this._observeView(value);
                }
            },

            _observeView: function(data) {
                var that = this;
                replaceWithObservable(data, that._data, that._ranges, that.reader.model || ObservableObject, that._isServerGrouped());

                var view = new LazyObservableArray(data, that.reader.model);
                view.parent = function() { return that.parent(); };
                return view;
            },

            flatView: function() {
                var groups = this.group() || [];

                if (groups.length) {
                    return flattenGroups(this._view);
                } else {
                    return this._view;
                }
            },

            add: function(model) {
                return this.insert(this._data.length, model);
            },

            _createNewModel: function(model) {
                if (this.reader.model) {
                    return new this.reader.model(model);
                }

                if (model instanceof ObservableObject) {
                    return model;
                }

                return new ObservableObject(model);
            },

            insert: function(index, model) {
                if (!model) {
                    model = index;
                    index = 0;
                }

                if (!(model instanceof Model)) {
                    model = this._createNewModel(model);
                }

                if (this._isServerGrouped()) {
                    this._data.splice(index, 0, this._wrapInEmptyGroup(model));
                } else {
                    this._data.splice(index, 0, model);
                }

                this._insertModelInRange(index, model);

                return model;
            },

            pushInsert: function(index, items) {
                var that = this;
                var rangeSpan = that._getCurrentRangeSpan();

                if (!items) {
                    items = index;
                    index = 0;
                }

                if (!isArray(items)) {
                    items = [items];
                }

                var pushed = [];
                var autoSync = this.options.autoSync;
                this.options.autoSync = false;

                try {
                    for (var idx = 0; idx < items.length; idx ++) {
                        var item = items[idx];

                        var result = this.insert(index, item);

                        pushed.push(result);

                        var pristine = result.toJSON();

                        if (this._isServerGrouped()) {
                            pristine = this._wrapInEmptyGroup(pristine);
                        }

                        this._pristineData.push(pristine);

                        if (rangeSpan && rangeSpan.length) {
                            $(rangeSpan).last()[0].pristineData.push(pristine);
                        }

                        index++;
                    }
                } finally {
                    this.options.autoSync = autoSync;
                }

                if (pushed.length) {
                    this.trigger("push", {
                        type: "create",
                        items: pushed
                    });
                }
            },

            pushCreate: function(items) {
                this.pushInsert(this._data.length, items);
            },

            pushUpdate: function(items) {
                if (!isArray(items)) {
                    items = [items];
                }

                var pushed = [];

                for (var idx = 0; idx < items.length; idx ++) {
                    var item = items[idx];
                    var model = this._createNewModel(item);

                    var target = this.get(model.id);

                    if (target) {
                        pushed.push(target);

                        target.accept(item);

                        target.trigger(CHANGE);

                        this._updatePristineForModel(target, item);
                    } else {
                        this.pushCreate(item);
                    }
                }

                if (pushed.length) {
                    this.trigger("push", {
                        type: "update",
                        items: pushed
                    });
                }
            },

            pushDestroy: function(items) {
                var pushed = this._removeItems(items);

                if (pushed.length) {
                    this.trigger("push", {
                        type: "destroy",
                        items: pushed
                    });
                }
            },

            _removeItems: function(itemsToRemove, removePristine) {
                if (!isArray(itemsToRemove)) {
                    itemsToRemove = [itemsToRemove];
                }

                var shouldRemovePristine = typeof removePristine !== "undefined" ? removePristine : true;

                var destroyed = [];
                var autoSync = this.options.autoSync;
                this.options.autoSync = false;
                try {
                    for (var idx = 0; idx < itemsToRemove.length; idx ++) {
                        var item = itemsToRemove[idx];
                        var model = this._createNewModel(item);
                        var found = false;
                        var index = idx;

                        this._eachItem(this._data, function(items) {
                            // Ensure all children of a parent are removed before the change event is triggered.
                            if (index !== itemsToRemove.length - 1) {
                                items.omitChangeEvent = true;
                                items.omitCache = [];
                            } else {
                                items.omitChangeEvent = false;
                            }

                            for (var idx = 0; idx < items.length; idx++) {
                                var item = items.at(idx);
                                if (item.id === model.id) {
                                    /* When the change event is omitted, certain calculations such as 'total' are broken because only the last item reaches the change handler.
                                       Keep track of all child items that had their change event omitted and when the change is finally triggered, concat them to the result.*/
                                    if (items.omitChangeEvent) {
                                        items.omitCache.push(item);
                                    }
                                    destroyed.push(item);
                                    items.splice(idx, 1);
                                    found = true;
                                    break;
                                }
                            }
                        });

                        if (found && shouldRemovePristine) {
                            this._removePristineForModel(model);
                            this._destroyed.pop();
                        }
                    }
                } finally {
                    this.options.autoSync = autoSync;
                }

                return destroyed;
            },

            pushMove: function(index, items) {
                var pushed = this._moveItems(index, items);

                if (pushed.length) {
                    this.trigger("push", {
                        type: "update",
                        items: pushed
                    });
                }
            },

            _moveItems: function(index, items) {
                if (!isArray(items)) {
                    items = [items];
                }

                var moved = [];
                var autoSync = this.options.autoSync;
                this.options.autoSync = false;

                try {
                    for (var i = 0; i < items.length; i ++) {
                        var item = items[i];
                        var model = this._createNewModel(item);

                        this._eachItem(this._data, function(dataItems) {
                            for (var idx = 0; idx < dataItems.length; idx++) {
                                var dataItem = dataItems.at(idx);
                                if (dataItem.id === model.id) {
                                    moved.push(dataItem);
                                    dataItems.splice(index >= idx ? --index : index, 0, dataItems.splice(idx, 1)[0]);
                                    index++;
                                    break;
                                }
                            }
                        });
                    }
                } finally {
                    this.options.autoSync = autoSync;
                }

                return moved;
            },

            remove: function(model) {
                var result,
                    that = this,
                    hasGroups = that._isServerGrouped();

                if (hasGroups && model.uid && (!model.isNew || !model.isNew())) {
                    that._pushInDestroyed(model);
                }

                this._eachItem(that._data, function(items) {
                    result = removeModel(items, model);

                    if (result && hasGroups) {
                        return true;
                    }
                });

                this._removeModelFromRanges(model);

                return model;
            },

            destroyed: function() {
                return this._destroyed;
            },

            created: function() {
                var idx,
                    length,
                    result = [],
                    data = this._flatData(this._data, this.options.useRanges);

                for (idx = 0, length = data.length; idx < length; idx++) {
                    if (data[idx].isNew && data[idx].isNew() && !data[idx].notFetched) {
                        result.push(data[idx]);
                    }
                }
                return result;
            },

            updated: function() {
                var idx,
                    length,
                    result = [],
                    data = this._flatData(this._data, this.options.useRanges);

                for (idx = 0, length = data.length; idx < length; idx++) {
                    if ((data[idx].isNew && !data[idx].isNew()) && data[idx].dirty) {
                        result.push(data[idx]);
                    }
                }
                return result;
            },

            sync: function() {
                var that = this,
                    created = [],
                    updated = [],
                    destroyed = that._destroyed;

                var promise = $.Deferred().resolve().promise();

                if (that.online()) {

                    if (!that.reader.model) {
                        return promise;
                    }

                    created = that.created();
                    updated = that.updated();

                    var promises = [];

                    if (that.options.batch && that.transport.submit) {
                        promises = that._sendSubmit(created, updated, destroyed);
                    } else {
                        promises.push.apply(promises, that._send("create", created));
                        promises.push.apply(promises, that._send("update", updated));
                        promises.push.apply(promises, that._send("destroy", destroyed));
                    }

                    promise = $.when
                     .apply(null, promises)
                     .then(function() {
                        var arguments$1 = arguments;

                        var idx, length;

                        for (idx = 0, length = arguments.length; idx < length; idx++) {
                            if (arguments$1[idx]) {
                                that._accept(arguments$1[idx]);
                            }
                        }

                        that._storeData(true);

                        that._syncEnd();

                        that._change({ action: "sync" });

                        that.trigger(SYNC);

                        if (that._isServerGroupPaged()) {
                            that.read();
                        }
                    });
                } else {
                    that._storeData(true);

                    that._syncEnd();

                    that._change({ action: "sync" });
                }

                return promise;
            },

            _syncEnd: noop,

            cancelChanges: function(model) {
                var that = this;

                if (model instanceof kendo.data.Model) {
                    that._cancelModel(model);
                } else {
                    that._destroyed = [];
                    that._detachObservableParents();
                    that._data = that._observe(that._pristineData);
                    if (that.options.serverPaging) {
                        that._total = that._pristineTotal;
                    }

                    that._ranges = [];
                    that._addRange(that._data, 0);

                    that._changesCanceled();

                    that._change();

                    that._markOfflineUpdatesAsDirty();

                    if (that._isServerGrouped()) {
                        that.read();
                    }
                }
            },

            _changesCanceled: noop,

            _markOfflineUpdatesAsDirty: function() {
                var that = this;

                if (that.options.offlineStorage != null) {
                    that._eachItem(that._data, function(items) {
                        for (var idx = 0; idx < items.length; idx++) {
                            var item = items.at(idx);
                            if (item.__state__ == "update" || item.__state__ == "create") {
                                item.dirty = true;
                            }
                        }
                    });
                }
            },

            hasChanges: function() {
                var idx,
                    length,
                    data = this._flatData(this._data, this.options.useRanges);

                if (this._destroyed.length) {
                    return true;
                }

                for (idx = 0, length = data.length; idx < length; idx++) {
                    if ((data[idx].isNew && data[idx].isNew()) || data[idx].dirty) {
                        return true;
                    }
                }

                return false;
            },

            _accept: function(result) {
                var that = this,
                    models = result.models,
                    response = result.response,
                    idx = 0,
                    serverGroup = that._isServerGrouped(),
                    pristine = that._pristineData,
                    type = result.type,
                    length;

                that.trigger(REQUESTEND, { response: response, type: type });

                if (response && !isEmptyObject(response)) {
                    response = that.reader.parse(response);

                    if (that._handleCustomErrors(response)) {
                        return;
                    }

                    response = that.reader.data(response);

                    if (!isArray(response)) {
                        response = [response];
                    }
                } else {
                    response = $.map(models, function(model) { return model.toJSON(); } );
                }

                if (type === "destroy") {
                    that._destroyed = [];
                }

                for (idx = 0, length = models.length; idx < length; idx++) {
                    if (type !== "destroy") {
                        models[idx].accept(response[idx]);

                        if (type === "create") {
                            pristine.push(serverGroup ? that._wrapInEmptyGroup(models[idx].toJSON()) : response[idx]);
                        } else if (type === "update") {
                            that._updatePristineForModel(models[idx], response[idx]);
                        }
                    } else {
                        that._removePristineForModel(models[idx]);
                    }
                }
            },

            _updatePristineForModel: function(model, values) {
                this._executeOnPristineForModel(model, function(index, items) {
                    kendo.deepExtend(items[index], values);
                });
            },

            _executeOnPristineForModel: function(model, callback) {
                this._eachPristineItem(
                    function(items) {
                        var index = indexOfPristineModel(items, model);
                        if (index > -1) {
                            callback(index, items);
                            return true;
                        }
                    });
            },

            _removePristineForModel: function(model) {
                this._executeOnPristineForModel(model, function(index, items) {
                    items.splice(index, 1);
                });
            },

            _readData: function(data) {
                var read = !this._isServerGrouped() ? this.reader.data : this.reader.groups;
                return read.call(this.reader, data);
            },

            _eachPristineItem: function(callback) {
                var that = this;
                var options = that.options;
                var rangeSpan = that._getCurrentRangeSpan();

                that._eachItem(that._pristineData, callback);

                if (options.serverPaging && options.useRanges) {
                    each(rangeSpan, function(i, range) {
                        that._eachItem(range.pristineData, callback);
                    });
                }
            },

           _eachItem: function(data, callback) {
                if (data && data.length) {
                    if (this._isServerGrouped()) {
                        eachGroupItems(data, callback);
                    } else {
                        callback(data);
                    }
                }
            },

            _pristineForModel: function(model) {
                var pristine,
                    idx,
                    callback = function(items) {
                        idx = indexOfPristineModel(items, model);
                        if (idx > -1) {
                            pristine = items[idx];
                            return true;
                        }
                    };

                this._eachPristineItem(callback);

                return pristine;
            },

            _cancelModel: function(model) {
                var that = this;
                var pristine = this._pristineForModel(model);

                this._eachItem(this._data, function(items) {
                    var idx = indexOfModel(items, model);
                    if (idx >= 0) {
                        if (pristine && (!model.isNew() || pristine.__state__)) {
                            items[idx].accept(pristine);

                            if (pristine.__state__ == "update") {
                                items[idx].dirty = true;
                            }

                        } else {
                            that._modelCanceled(model);

                            items.splice(idx, 1);

                            that._removeModelFromRanges(model);
                        }
                    }
                });
            },

            _modelCanceled: noop,

            _submit: function(promises, data) {
                var that = this;

                that.trigger(REQUESTSTART, { type: "submit" });

                that.trigger(PROGRESS);

                that.transport.submit(extend({
                    success: function(response, type) {
                        var promise = $.grep(promises, function(x) {
                            return x.type == type;
                        })[0];

                        if (promise) {
                            promise.resolve({
                                response: response,
                                models: promise.models,
                                type: type
                            });
                        }
                    },
                    error: function(response, status, error) {
                        for (var idx = 0; idx < promises.length; idx++) {
                            promises[idx].reject(response);
                        }

                        that.error(response, status, error);
                    }
                }, data));
            },

            _sendSubmit: function(created, updated, destroyed) {
                var that = this,
                    promises = [];

                if (that.options.batch) {
                    if (created.length) {
                        promises.push($.Deferred(function(deferred) {
                            deferred.type = "create";
                            deferred.models = created;
                        }));
                    }

                    if (updated.length) {
                        promises.push($.Deferred(function(deferred) {
                            deferred.type = "update";
                            deferred.models = updated;
                        }));
                    }

                    if (destroyed.length) {
                        promises.push($.Deferred(function(deferred) {
                            deferred.type = "destroy";
                            deferred.models = destroyed;
                        }));
                    }

                    that._submit(promises, {
                        data: {
                            created: that.reader.serialize(toJSON(created)),
                            updated: that.reader.serialize(toJSON(updated)),
                            destroyed: that.reader.serialize(toJSON(destroyed))
                        }
                    });
                }

                return promises;
            },

            _promise: function(data, models, type) {
                var that = this;

                return $.Deferred(function(deferred) {
                    that.trigger(REQUESTSTART, { type: type });

                    that.trigger(PROGRESS);

                    that.transport[type].call(that.transport, extend({
                        success: function(response) {
                            deferred.resolve({
                                response: response,
                                models: models,
                                type: type
                            });
                        },
                        error: function(response, status, error) {
                            deferred.reject(response);
                            that.error(response, status, error);
                        }
                    }, data));
                }).promise();
            },

            _send: function(method, data) {
                var that = this,
                    idx,
                    length,
                    promises = [],
                    converted = that.reader.serialize(toJSON(data));

                if (that.options.batch) {
                    if (data.length) {
                        promises.push(that._promise( { data: { models: converted } }, data , method));
                    }
                } else {
                    for (idx = 0, length = data.length; idx < length; idx++) {
                        promises.push(that._promise( { data: converted[idx] }, [ data[idx] ], method));
                    }
                }

                return promises;
            },

            read: function(data) {
                var that = this, params = that._params(data);
                var deferred = $.Deferred();

                that._queueRequest(params, function() {
                    var isPrevented = that.trigger(REQUESTSTART, { type: "read" });
                    if (!isPrevented) {
                        that.trigger(PROGRESS);

                        that._ranges = [];
                        that.trigger("reset");
                        if (that.online()) {
                            that.transport.read({
                                data: params,
                                success: function(data) {
                                    that._ranges = [];
                                    that.success(data, params);

                                    deferred.resolve();
                                },
                                error: function() {
                                    var args = slice.call(arguments);

                                    that.error.apply(that, args);

                                    deferred.reject.apply(deferred, args);
                                }
                            });
                        } else if (that.options.offlineStorage != null) {
                            that.success(that.offlineData(), params);

                            deferred.resolve();
                        }
                    } else {
                        that._dequeueRequest();

                        deferred.resolve(isPrevented);
                    }
                });

                return deferred.promise();
            },

            _readAggregates: function(data) {
                return this.reader.aggregates(data);
            },

            success: function(data) {
                var that = this,
                    options = that.options,
                    items,
                    replaceSubset;

                that.trigger(REQUESTEND, { response: data, type: "read" });

                if (that.online()) {
                    data = that.reader.parse(data);

                    if (that._handleCustomErrors(data)) {
                        that._dequeueRequest();
                        return;
                    }

                    that._total = that.reader.total(data);

                    if (that._isServerGroupPaged()) {
                        that._serverGroupsTotal = that._total;
                    }

                    if (that._pageSize > that._total) {
                        that._pageSize = that._total;
                        if (that.options.pageSize && that.options.pageSize > that._pageSize) {
                            that._pageSize = that.options.pageSize;
                        }
                    }

                    if (that._aggregate && options.serverAggregates) {
                        that._aggregateResult = that._readAggregates(data);
                    }

                    data = that._readData(data);

                    that._destroyed = [];
                } else {
                    data = that._readData(data);

                    items = [];
                    var itemIds = {};
                    var model = that.reader.model;
                    var idField = model ? model.idField : "id";
                    var idx;

                    for (idx = 0; idx < this._destroyed.length; idx++) {
                        var id = this._destroyed[idx][idField];
                        itemIds[id] = id;
                    }

                    for (idx = 0; idx < data.length; idx++) {
                        var item = data[idx];
                        var state = item.__state__;
                        if (state == "destroy") {
                            if (!itemIds[item[idField]]) {
                                this._pushInDestroyed(this._createNewModel(item));
                            }
                        } else {
                            items.push(item);
                        }
                    }

                    data = items;

                    that._total = data.length;
                }

                that._pristineTotal = that._total;
                replaceSubset = that._skip && that._data.length && that._skip < that._data.length;

                if (that.options.endless) {
                    if (replaceSubset) {
                        that._pristineData.splice(that._skip, that._pristineData.length);
                    }
                    items = data.slice(0);
                    for (var j = 0; j < items.length; j++) {
                        that._pristineData.push(items[j]);
                    }
                } else {
                    that._pristineData = data.slice(0);
                }

                that._detachObservableParents();

                if (that.options.endless) {
                    that._data.unbind(CHANGE, that._changeHandler);

                    if (that._isServerGrouped() && that._data[that._data.length - 1].value === data[0].value) {
                        fillLastGroup(that._data[that._data.length - 1], data[0]);
                        data.shift();
                    }

                    data = that._observe(data);
                    if (replaceSubset) {
                        that._data.splice(that._skip, that._data.length);
                    }
                    for (var i = 0; i < data.length; i++) {
                        that._data.push(data[i]);
                    }
                    that._data.bind(CHANGE, that._changeHandler);
                } else {
                    that._data = that._observe(data);
                }

                that._markOfflineUpdatesAsDirty();

                that._storeData();

                that._addRange(that._data);

                that._process(that._data);

                that._dequeueRequest();
            },

            _detachObservableParents: function() {
                if (this._data && this._shouldDetachObservableParents) {
                    for (var idx = 0; idx < this._data.length; idx++) {
                        if (this._data[idx].parent) {
                            this._data[idx].parent = noop;
                        }
                    }
                }
            },

            _storeData: function(updatePristine) {
                var serverGrouping = this._isServerGrouped();
                var model = this.reader.model;

                function items(data) {
                    var state = [];

                    for (var idx = 0; idx < data.length; idx++) {
                        var dataItem = data.at(idx);
                        var item = dataItem.toJSON();

                        if (serverGrouping && dataItem.items) {
                            item.items = items(dataItem.items);
                        } else {
                            item.uid = dataItem.uid;

                            if (model) {
                                if (dataItem.isNew()) {
                                    item.__state__ = "create";
                                } else if (dataItem.dirty) {
                                    item.__state__ = "update";
                                }
                            }
                        }
                        state.push(item);
                    }

                    return state;
                }

                if (this.options.offlineStorage != null) {
                    var state = items(this._data);

                    var destroyed = [];

                    for (var idx = 0; idx < this._destroyed.length; idx++) {
                        var item = this._destroyed[idx].toJSON();
                        item.__state__ = "destroy";
                        destroyed.push(item);
                    }

                    this.offlineData(state.concat(destroyed));

                    if (updatePristine) {
                        this._pristineData = this.reader.reader ? this.reader.reader._wrapDataAccessBase(state) : this.reader._wrapDataAccessBase(state);
                    }
                }
            },

            _addRange: function(data, skip) {
                var that = this,
                    start = typeof (skip) !== "undefined" ? skip : (that._skip || 0),
                    end,
                    range = {
                        data: data,
                        pristineData: data.toJSON(),
                        timestamp: that._timeStamp()
                    };

                if (this._isGroupPaged()) {
                    end = start + data.length;
                    range.outerStart = start;
                    range.outerEnd = end;
                } else {
                    end = start + that._flatData(data, true).length;
                }

                range.start = start;
                range.end = end;
                that._ranges.push(range);
                that._sortRanges();

                if (that._isGroupPaged()) {
                    if (!that._groupsFlat) {
                        that._groupsFlat = [];
                    }
                    that._appendToGroupsFlat(range.data);
                    that._updateOuterRangesLength();
                }
            },

            _appendToGroupsFlat: function(data) {
                var length = data.length;

                for (var i = 0; i < length; i++) {
                    this._groupsFlat.push(data[i]);
                }
            },

            _getGroupByUid: function(uid) {
                var length = this._groupsFlat.length;
                var group;

                for (var i = 0; i < length; i++) {
                    group = this._groupsFlat[i];
                    if (group.uid === uid) {
                        return group;
                    }
                }
            },

            _sortRanges: function() {
                this._ranges.sort(function(x, y) {
                    return x.start - y.start;
                });
            },

            error: function(xhr, status, errorThrown) {
                this._dequeueRequest();
                this.trigger(REQUESTEND, { });
                this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });
            },

            _params: function(data) {
                var that = this,
                    options = extend({
                        take: that.take(),
                        skip: that.skip(),
                        page: that.page(),
                        pageSize: that.pageSize(),
                        sort: that._sort,
                        filter: that._filter,
                        group: that._group,
                        aggregate: that._aggregate,
                        groupPaging: !!that._groupPaging
                    }, data);

                if (!that.options.serverPaging) {
                    delete options.take;
                    delete options.skip;
                    delete options.page;
                    delete options.pageSize;
                }

                if (!that.options.serverGrouping) {
                    delete options.group;
                } else if (that.reader.model && options.group) {
                    options.group = convertDescriptorsField(options.group, that.reader.model);
                }

                if (!that.options.serverFiltering) {
                    delete options.filter;
                } else if (that.reader.model && options.filter) {
                   options.filter = convertFilterDescriptorsField(options.filter, that.reader.model);
                }

                if (!that.options.serverSorting) {
                    delete options.sort;
                } else if (that.reader.model && options.sort) {
                    options.sort = convertDescriptorsField(options.sort, that.reader.model);
                }

                if (!that.options.serverAggregates) {
                    delete options.aggregate;
                } else if (that.reader.model && options.aggregate) {
                    options.aggregate = convertDescriptorsField(options.aggregate, that.reader.model);
                }

                if (!that.options.groupPaging) {
                    delete options.groupPaging;
                }

                return options;
            },

            _queueRequest: function(options, callback) {
                var that = this;
                if (!that._requestInProgress) {
                    that._requestInProgress = true;
                    that._pending = undefined$1;
                    callback();
                } else {
                    that._pending = { callback: callback.bind(that), options: options };
                }
            },

            _dequeueRequest: function() {
                var that = this;
                that._requestInProgress = false;
                if (that._pending) {
                    that._queueRequest(that._pending.options, that._pending.callback);
                }
            },

            _handleCustomErrors: function(response) {
                if (this.reader.errors) {
                    var errors = this.reader.errors(response);
                    if (errors) {
                        this.trigger(ERROR, { xhr: null, status: "customerror", errorThrown: "custom error", errors: errors });
                        return true;
                    }
                }
                return false;
            },

            _shouldWrap: function(data) {
                var model = this.reader.model;

                if (model && data.length) {
                    return !(data[0] instanceof model);
                }

                return false;
            },

            _observe: function(data) {
                var that = this,
                    model = that.reader.model;

                that._shouldDetachObservableParents = true;

                if (data instanceof ObservableArray) {
                    that._shouldDetachObservableParents = false;
                    if (that._shouldWrap(data)) {
                        data.type = that.reader.model;
                        data.wrapAll(data, data);
                    }
                } else {
                    var arrayType = that.pageSize() && !that.options.serverPaging ? LazyObservableArray : ObservableArray;
                    data = new arrayType(data, that.reader.model);
                    data.parent = function() { return that.parent(); };
                }

                if (that._isServerGrouped()) {
                    wrapGroupItems(data, model);
                }

                if (that._changeHandler && that._data && that._data instanceof ObservableArray &&
                    !(that.options.useRanges && that.options.serverPaging)) {
                    that._data.unbind(CHANGE, that._changeHandler);
                } else {
                    that._changeHandler = that._change.bind(that);
                }

                return data.bind(CHANGE, that._changeHandler);
            },

            _updateTotalForAction: function(action, items) {
                var that = this;

                var total = parseInt(that._total, 10);

                if (!isNumber(that._total)) {
                    total = parseInt(that._pristineTotal, 10);
                }
                if (action === "add") {
                    total += items.length;
                } else if (action === "remove") {
                    total -= items.length;
                } else if (action !== "itemchange" && action !== "sync" && !that.options.serverPaging) {
                    total = that._pristineTotal;
                } else if (action === "sync") {
                    total = that._pristineTotal = parseInt(that._total, 10);
                }

                that._total = total;
            },

            _pushInDestroyed: function(model) {
                var isPushed = this._destroyed.find(function(item) {
                    return item.uid === model.uid;
                });
                if (!isPushed) {
                    this._destroyed.push(model);
                }
            },

            _change: function(e) {
                var that = this, idx, length, action = e ? e.action : "";

                if (action === "remove") {
                    for (idx = 0, length = e.items.length; idx < length; idx++) {
                        if (!e.items[idx].isNew || !e.items[idx].isNew()) {
                            that._pushInDestroyed(e.items[idx]);
                        }
                    }
                }

                if (that.options.autoSync && (action === "add" || action === "remove" || action === "itemchange")) {

                    var handler = function(args) {
                        if (args.action === "sync") {
                            that.unbind("change", handler);
                            that._updateTotalForAction(action, e.items);
                        }
                    };

                    that.first("change", handler);

                    that.sync();

                } else {
                    that._updateTotalForAction(action, e ? e.items : []);

                    that._process(that._data, e);
                }
            },

            _calculateAggregates: function(data, options) {
                options = options || {};

                var query = new Query(data),
                    aggregates = options.aggregate,
                    filter = options.filter;

                if (filter) {
                    query = query.filter(filter);
                }

                return query.aggregate(aggregates);
            },

            _process: function(data, e) {
                var that = this,
                    options = {},
                    result;

                if (that.options.serverPaging !== true) {
                    options.skip = that._skip;
                    options.take = that._take || that._pageSize;

                    if (options.skip === undefined$1 && that._page !== undefined$1 && that._pageSize !== undefined$1) {
                        options.skip = (that._page - 1) * that._pageSize;
                    }

                    if (that.options.useRanges) {
                        options.skip = that.currentRangeStart();
                    }
                }

                if (that.options.serverSorting !== true) {
                    options.sort = that._sort;
                }

                if (that.options.serverFiltering !== true) {
                    options.filter = that._filter;
                }

                if (that.options.serverGrouping !== true) {
                    options.group = that._group;
                }

                if (that.options.serverAggregates !== true) {
                    options.aggregate = that._aggregate;
                }

                if (that.options.serverGrouping) {
                    that._clearEmptyGroups(data);
                }

                options.groupPaging = that._groupPaging;

                if (that._isGroupPaged() && e && (e.action === "page" || e.action === "expandGroup" || e.action === "collapseGroup")) {
                    result = that._queryProcess(data, {
                        aggregate: that._aggregate
                    });
                } else {
                    result = that._queryProcess(data, options);
                }

                if (that._filter && e && e.action === "add") {
                    var model = e.items[0],
                        resultData = result.data;

                    if (that._isGrouped() && !this._isServerGrouped()) {
                        resultData = flattenGroups(resultData);
                    }

                    var modelIsInView = resultData.find(function(item) {
                        return item.uid === model.uid;
                    });

                    if (!modelIsInView) {
                        result.data.splice(model.index, 0, that._isGrouped() ? that._wrapInEmptyGroup(model) : model);
                        result.total++;
                    }
                }

                if (that.options.serverAggregates !== true) {
                    // for performance reasons, calculate aggregates for part of the data only after query process
                    // this is necessary in the TreeList when paging
                    that._aggregateResult = that._calculateAggregates(result.dataToAggregate || data, options);
                }

                that._setView(result, options, e);

                that._setFilterTotal(result.total, false);

                e = e || {};

                e.items = e.items || that._view;

                that.trigger(CHANGE, e);
            },

            _setView: function(result, options, e) {
                var that = this;

                if (that._isGroupPaged() && !that._isServerGrouped()) {
                    if (e && (e.action === "page" || e.action === "expandGroup" || e.action === "collapseGroup")) {
                        that.view(result.data);
                        that._updateOuterRangesLength();
                    } else {
                        that._ranges = [];
                        var query = new Query(result.data);
                        that._addRange(that._observe(result.data));

                        if (options.skip + options.take > result.data.length) {
                            options.skip = result.data.length - options.take;
                        }

                        that.view(query.range(options.skip, options.take).toArray());
                    }

                } else {
                    that.view(result.data);
                }
            },

            _clearEmptyGroups: function(data) {
                for (var idx = data.length - 1; idx >= 0; idx--) {
                    var group = data[idx];
                    if (group.hasSubgroups) {
                        this._clearEmptyGroups(group.items);
                    }

                    if (group.items && !group.items.length && !group.itemCount) {
                        splice.apply(group.parent(), [idx, 1]);
                    }
                }
            },

            _queryProcess: function(data, options) {
                if (this.options.inPlaceSort) {
                    return Query.process(data, options, this.options.inPlaceSort);
                }
                else {
                    return Query.process(data, options);
                }
            },

            _mergeState: function(options) {
                var that = this;

                if (options !== undefined$1) {
                    that._pageSize = options.pageSize;
                    that._page = options.page;
                    that._sort = options.sort;
                    that._filter = options.filter;
                    that._group = options.group;
                    that._aggregate = options.aggregate;
                    that._skip = that._currentRangeStart = options.skip;
                    that._take = options.take;

                    if (that._skip === undefined$1) {
                        that._skip = that._currentRangeStart = that.skip();
                        options.skip = that.skip();
                    }

                    if (that._take === undefined$1 && that._pageSize !== undefined$1) {
                        that._take = that._pageSize;
                        options.take = that._take;
                    }

                    if (that.options.virtual) {
                        options.virtual = that.options.virtual;
                    }

                    if (options.sort) {
                        that._sort = options.sort = normalizeSort(options.sort);
                        that._sortFields = sortFields(options.sort);
                    }

                    if (options.filter) {
                        that._filter = options.filter = (that.options.accentFoldingFiltering && !$.isEmptyObject(options.filter)) ? $.extend({}, normalizeFilter(options.filter), { accentFoldingFiltering: that.options.accentFoldingFiltering }) : normalizeFilter(options.filter);
                    }

                    if (options.group) {
                        that._group = options.group = normalizeGroup(options.group);
                    }
                    if (options.aggregate) {
                        that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);
                    }
                }
                return options;
            },

            query: function(options) {
                var result;
                var remote = this.options.serverSorting || this.options.serverPaging || this.options.serverFiltering || this.options.serverGrouping || this.options.serverAggregates;

                if (remote || ((this._data === undefined$1 || this._data.length === 0) && !this._destroyed.length)) {
                    if (this.options.endless) {
                        var moreItemsCount = options.pageSize - this.pageSize();
                        if (moreItemsCount > 0) {
                            moreItemsCount = this.pageSize();
                            options.page = options.pageSize / moreItemsCount;
                            options.pageSize = moreItemsCount;
                        } else {
                            options.page = 1;
                            this.options.endless = false;
                        }
                    }
                    return this.read(this._mergeState(options));
                }

                var isPrevented = this.trigger(REQUESTSTART, { type: "read" });
                if (!isPrevented) {
                    this.trigger(PROGRESS);
                    if (options) {
                        options.groupPaging = this._groupPaging;
                    }
                    result = this._queryProcess(this._data, this._mergeState(options));

                    this._setFilterTotal(result.total, true);

                    this._aggregateResult = this._calculateAggregates(result.dataToAggregate || this._data, options);
                    this._setView(result, options);
                    this.trigger(REQUESTEND, { type: "read" });
                    this.trigger(CHANGE, { items: result.data, action: options ? options.action : "" });
                }

                return $.Deferred().resolve(isPrevented).promise();
            },

            _hasExpandedSubGroups: function(group) {
                var result = false;
                var length = group.items ? group.items.length : 0;

                if (!group.hasSubgroups) {
                    return false;
                }

                for (var i = 0; i < length; i++) {
                    if (this._groupsState[group.items[i].uid]) {
                        result = true;
                        break;
                    }
                }
                return result;
            },

            _findGroupedRange: function(data, result, options, parents, callback) {
                var that = this;
                var length = data.length;
                var group;
                var current;
                var itemsLength;
                var groupCount;
                var itemsToSkip;

                for (var i = 0; i < length; i++) {
                    group = data[i];

                    if (options.taken >= options.take) {
                        break;
                    }

                    if (!that._getGroupByUid(group.uid)) {
                        that._groupsFlat.push(group);
                    }

                    if (that._groupsState[group.uid]) {
                        if (that._isServerGroupPaged()) {
                           if (that._fetchGroupItems(group, options, parents, callback)) {
                                that._fetchingGroupItems = true;
                                return;
                           }
                           groupCount = (group.subgroupCount || group.itemCount) + 1;
                           itemsToSkip = options.skip - options.skipped;
                           if (!that._hasExpandedSubGroups(group) && itemsToSkip > groupCount) {
                               options.skipped += groupCount;
                               continue;
                           }
                        }

                        if (options.includeParents && options.skipped < options.skip) {
                            options.skipped++;
                            group.excludeHeader = true;
                        } else if (options.includeParents) {
                            options.taken++;
                            group.excludeHeader = false;
                        }

                        if (group.hasSubgroups && group.items && group.items.length) {
                            group.currentItems = [];

                            if (!parents) {
                                parents = [];
                            }
                            parents.push(group);

                            that._findGroupedRange(group.items, group.currentItems, options, parents, callback);
                            parents.pop();

                            if (group.currentItems.length || options.taken > 0) {
                                result.push(group);
                            } else {
                                group.excludeHeader = false;
                            }
                        } else {
                            current = [];
                            itemsLength = group.items.length;

                            for (var j = 0; j < itemsLength; j++) {
                                if (options.skipped < options.skip) {
                                    options.skipped++;
                                    continue;
                                }

                                if (options.taken >= options.take) {
                                    break;
                                }
                                current.push(group.items[j]);
                                options.taken++;
                            }

                            if (current.length || options.taken > 0) {
                                group.currentItems = current;
                                result.push(group);
                            } else {
                                group.excludeHeader = false;
                            }
                        }
                    } else {
                        if (options.skipped < options.skip) {
                            options.skipped++;
                            continue;
                        }
                        result.push(group);
                        options.taken++;
                    }
                }
            },

            _expandedSubGroupItemsCount: function(group, end, includeCurrentItems) {
                var that = this;
                var result = 0;
                var subGroup;
                var endSpecified = typeof end === "number";
                var length = endSpecified ? end : group.subgroupCount;
                var temp;

                if (!group.hasSubgroups) {
                    return result;
                }

                for (var i = 0; i < length; i++) {
                    subGroup = group.items[i];

                    if (!subGroup) {
                        break;
                    }

                    if (subGroup.hasSubgroups && that._groupsState[group.uid]) {
                        temp = that._expandedSubGroupItemsCount(subGroup, length, true);
                        result += temp;

                        if (endSpecified) {
                            length -= temp;
                        }
                    } else if (!subGroup.hasSubgroups && that._groupsState[subGroup.uid]) {
                        temp = subGroup.items ? subGroup.items.length : 0;
                        result += temp;
                        if (endSpecified) {
                            length -= temp;
                        }
                    }

                    if (includeCurrentItems) {
                        result += 1;
                        if (endSpecified) {
                            length -= 1;
                        }
                    }

                    if (endSpecified && result > length) {
                        return result;
                    }
                }

                return result;
            },

            _fetchGroupItems: function(group, options, parents, callback) {
                var that = this;
                var groupItemsSkip;
                var firstItem;
                var lastItem;
                var groupItemCount = group.hasSubgroups ? group.subgroupCount : group.itemCount;
                var take = options.take;
                var skipped = options.skipped;
                var pageSize = that.take();
                var expandedSubGroupItemsCount;

                if (options.includeParents) {
                    if (skipped < options.skip) {
                        skipped += 1;
                    } else {
                        take -= 1;
                    }
                }

                if (!group.items || (group.items && !group.items.length)) {
                    that.getGroupItems(group, options, parents, callback, 0);
                    return true;
                } else {
                    expandedSubGroupItemsCount = this._expandedSubGroupItemsCount(group, options.skip - skipped);
                    groupItemsSkip = Math.max(options.skip - (skipped + expandedSubGroupItemsCount), 0);

                    if (groupItemsSkip >= groupItemCount) {
                        return false;
                    }

                    firstItem = group.items[groupItemsSkip];
                    lastItem = group.items[Math.min(groupItemsSkip + take, groupItemCount - 1)];

                    if (firstItem.notFetched) {
                        that.getGroupItems(group, options, parents, callback, math.max(math.floor(groupItemsSkip / pageSize), 0) * pageSize, math.round((groupItemsSkip + pageSize) / pageSize));
                        return true;
                    }

                    if (lastItem.notFetched) {
                        that.getGroupItems(group, options, parents, callback, math.max(math.floor((groupItemsSkip + pageSize) / pageSize), 0) * pageSize, math.round((groupItemsSkip + pageSize) / pageSize));
                        return true;
                    }
                }
            },

            getGroupItems: function(group, options, parents, callback, groupItemsSkip, page) {
                var that = this;
                var take;
                var filter;
                var data;
                var subgroups;

                if (!group.items) {
                    group.items = [];
                }

                take = that.take();
                filter = this._composeItemsFilter(group, parents);
                data = {
                    page: page || 1,
                    pageSize: take,
                    skip: groupItemsSkip,
                    take: take,
                    filter: filter,
                    aggregate: that._aggregate,
                    sort: that._sort
                };
                subgroups = that.findSubgroups(group);

                if (subgroups && subgroups.length) {
                    data.group = subgroups;
                    data.groupPaging = true;
                }

                clearTimeout(that._timeout);
                that._timeout = setTimeout(function() {
                    that._queueRequest(data, function() {
                        if (!that.trigger(REQUESTSTART, {
                                type: "read"
                            })) {
                            that.transport.read({
                                data: data,
                                success: that._groupItemsSuccessHandler(group, options.skip, that.take(), callback, groupItemsSkip),
                                error: function() {
                                    var args = slice.call(arguments);
                                    that.error.apply(that, args);
                                }
                            });
                        } else {
                            that._dequeueRequest();
                        }
                    });
                }, 100);
            },

            _groupItemsSuccessHandler: function(group, skip, take, callback, groupItemsSkip) {
                var that = this;
                var timestamp = that._timeStamp();
                callback = isFunction(callback) ? callback : noop;
                var totalField = that.options.schema && that.options.schema.total ? that.options.schema.total : "Total";

                return function(data) {
                    var temp;
                    var model = Model.define(that.options.schema.model);
                    var totalCount;

                    that._dequeueRequest();

                    that.trigger(REQUESTEND, {
                        response: data,
                        type: "read"
                    });

                    if (isFunction(totalField)) {
                        totalCount = totalField(data);
                    } else {
                        totalCount = data[totalField];
                    }

                    data = that.reader.parse(data);

                    if (group.hasSubgroups) {
                        temp = that.reader.groups(data);
                        group.subgroupCount = totalCount;
                    } else {
                        temp = that.reader.data(data);
                        temp = temp.map(function(item) {
                            return new model(item);
                        });
                    }

                    group.items.omitChangeEvent = true;
                    for (var i = 0; i < totalCount; i++) {
                        if (i >= groupItemsSkip && i < (groupItemsSkip + take) ) {
                            group.items.splice(i, 1, temp[i - groupItemsSkip]);
                        } else {
                            if (!group.items[i]) {
                                group.items.splice(i, 0, { notFetched: true });
                            }
                        }
                    }
                    group.items.omitChangeEvent = false;

                    that._updateRangePristineData(group);
                    that._fetchingGroupItems = false;

                    if (!group.countAdded) {
                        that._serverGroupsTotal += totalCount;
                        group.countAdded = true;
                    }

                    that.range(skip, take, callback, "expandGroup");

                    if (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress) {
                        that.trigger(CHANGE, {});
                    }
                };
            },

            findSubgroups: function(group) {
                var indexOfCurrentGroup = this._group.map(function(g) {
                    return g.field;
                }).indexOf(group.field);

                return this._group.slice(indexOfCurrentGroup + 1, this._group.length);
            },

            _composeItemsFilter: function(group, parents) {
                var filter = {
                    logic: "and",
                    filters: []
                };

                if (this.filter()) {
                    filter.filters.push(this.filter());
                }

                filter = extend(true, {}, filter);
                filter.filters.push({
                    field: group.field,
                    operator: "eq",
                    value: group.value
                });

                if (parents) {
                    for (var i = 0; i < parents.length; i++) {
                        filter.filters.push({
                            field: parents[i].field,
                            operator: "eq",
                            value: parents[i].value
                        });
                    }
                }

                return filter;
            },

            _updateRangePristineData: function(group) {
                var that = this;
                var ranges = that._ranges;
                var rangesLength = ranges.length;
                var temp;
                var currentGroup;
                var range;
                var dataLength;
                var indexes;
                var currIdx;

                for (var i = 0; i < rangesLength; i++) {
                    range = ranges[i];
                    dataLength = range.data.length;
                    indexes = [];
                    temp = null;

                    for (var j = 0; j < dataLength; j++) {
                        currentGroup = range.data[j];
                        indexes.push(j);

                        if ((currentGroup.uid === group.uid) || (currentGroup.hasSubgroups && currentGroup.items.length && that._containsSubGroup(currentGroup, group, indexes))) {
                            break;
                        }
                        indexes.pop();
                    }

                    if (indexes.length) {
                        temp = ranges[i].pristineData;

                        while (indexes.length > 1) {
                            currIdx = indexes.splice(0, 1)[0];
                            temp = temp[currIdx].items;
                        }
                        temp[indexes[0]] = that._cloneGroup(group);
                        break;
                    }
                }
            },

            _containsSubGroup: function(group, subgroup, indexes) {
                var that = this;
                var length = group.items.length;
                var currentSubGroup;

                if (group.hasSubgroups && length) {
                    for (var i = 0; i < length; i++) {
                        currentSubGroup = group.items[i];
                        indexes.push(i);
                        if (currentSubGroup.uid === subgroup.uid ||
                                (currentSubGroup.hasSubgroups &&
                                currentSubGroup.items.length &&
                                that._containsSubGroup(currentSubGroup, subgroup, indexes))) {
                            return true;
                        }
                        indexes.pop();
                    }
                }

            },

            _cloneGroup: function(group) {
                var that = this;
                group = typeof group.toJSON == "function" ? group.toJSON() : group;

                if (group.items && group.items.length) {
                    group.items = group.items.map(function(item) {
                        return that._cloneGroup(item);
                    });
                }

                return group;
            },

            _setFilterTotal: function(filterTotal, setDefaultValue) {
                var that = this;

                if (!that.options.serverFiltering) {
                    if (filterTotal !== undefined$1) {
                        that._total = filterTotal;
                    } else if (setDefaultValue) {
                        that._total = that._data.length;
                    }
                }
            },

            fetch: function(callback) {
                var that = this;
                var fn = function(isPrevented) {
                    if (isPrevented !== true && isFunction(callback)) {
                        callback.call(that);
                    }
                };

                return this._query().done(fn);
            },

            _query: function(options) {
                var that = this;

                return that.query(extend({}, {
                    page: that.page(),
                    pageSize: that.pageSize(),
                    sort: that.sort(),
                    filter: that.filter(),
                    group: that.group(),
                    aggregate: that.aggregate()
                }, options));
            },

            next: function(options) {
                var that = this,
                    page = that.page(),
                    total = that.total();

                options = options || {};

                if (!page || (total && page + 1 > that.totalPages())) {
                    return;
                }

                that._skip = that._currentRangeStart = page * that.take();

                page += 1;
                options.page = page;

                that._query(options);

                return page;
            },

            prev: function(options) {
                var that = this,
                    page = that.page();

                options = options || {};

                if (!page || page === 1) {
                    return;
                }

                that._skip = that._currentRangeStart = that._skip - that.take();

                page -= 1;
                options.page = page;

                that._query(options);

                return page;
            },

            page: function(val) {
                var that = this,
                skip;

                if (val !== undefined$1) {
                    val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);
                    var take = that.take();

                    if (that._isGroupPaged()) {
                        val -= 1;
                        that.range(val * take, take, null, "page");
                        return;
                    }
                    that._query(that._pageableQueryOptions({ page: val }));
                    return;
                }
                skip = that.skip();

                return skip !== undefined$1 ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined$1;
            },

            pageSize: function(val) {
                var that = this;

                if (val !== undefined$1) {
                    that._query(that._pageableQueryOptions({ pageSize: val, page: 1 }));
                    return;
                }

                return that.take();
            },

            sort: function(val) {
                var that = this;

                if (val !== undefined$1) {
                    that.trigger("sort");
                    that._query({ sort: val });
                    return;
                }

                return that._sort;
            },

            filter: function(val) {
                var that = this;

                if (val === undefined$1) {
                    return that._filter;
                }

                that.trigger("reset");
                that._query({ filter: val, page: 1 });
            },

            group: function(val) {
                var that = this;
                var options = { group: val };

                if (that._groupPaging) {
                    // clear ranges if ungrouping is performed
                    if (val !== undefined$1 && (!val || !val.length) ) {
                        that._ranges = [];
                    }
                    options.page = 1;
                }

                if (val !== undefined$1) {
                    that._query(options);
                    return;
                }

                return that._group;
            },

            getGroupsFlat: function(data) {
                var idx,
                    result = [],
                    length;

                for (idx = 0, length = data.length; idx < length; idx++) {
                    var group = data[idx];
                    if (group.hasSubgroups) {
                        result = result.concat(this.getGroupsFlat(group.items));
                    }

                    result.push(group);
                }

                return result;
            },

            total: function() {
                return parseInt(this._total || 0, 10);
            },

            groupsTotal: function(includeExpanded) {
                var that = this;

                if (!that._group.length) {
                    return that.total();
                }

                if (that._isServerGrouped()) {
                    if (that._serverGroupsTotal) {
                        return that._serverGroupsTotal;
                    }
                    that._serverGroupsTotal = that.total();

                    return that._serverGroupsTotal;
                }

                return that._calculateGroupsTotal(that._ranges.length ? that._ranges[0].data : [], includeExpanded);
            },

            _calculateGroupsTotal: function(groups, includeExpanded, itemsField, ignoreState) {
                var that = this;
                itemsField = itemsField || "items";
                var total;
                var length;

                if (that._group.length && groups) {
                    total = 0;
                    length = groups.length;

                    for (var i = 0; i < length; i++) {
                        total += that.groupCount(groups[i], includeExpanded, itemsField, ignoreState);
                    }
                    that._groupsTotal = total;
                    return total;
                }

                that._groupsTotal = that._data.length;
                return that._groupsTotal;
            },

            groupCount: function(group, includeExpanded, itemsField, ignoreState) {
                var that = this;
                var total = 0;

                if (group.hasSubgroups && that._groupsState[group.uid]) {
                    if (includeExpanded && !group.excludeHeader || ignoreState) {
                        total += 1;
                    }

                    group[itemsField].forEach(function(subgroup) {
                        total += that.groupCount(subgroup, includeExpanded, itemsField, ignoreState);
                    });
                } else {
                    if (that._groupsState[group.uid]) {
                        if (includeExpanded && !group.excludeHeader || ignoreState) {
                            total++;
                        }
                        total += group[itemsField] ? group[itemsField].length : 0;
                    } else {
                        total++;
                    }
                }
                return total;
            },

            countGroupRange: function(range) {
                var total = 0;
                var length = range.length;

                for (var i = 0; i < length; i++) {
                    total += this.groupCount(range[i], true);
                }

                return total;
            },

            aggregate: function(val) {
                var that = this;

                if (val !== undefined$1) {
                    that._query({ aggregate: val });
                    return;
                }

                return that._aggregate;
            },

            aggregates: function() {
                var result = this._aggregateResult;

                if (isEmptyObject(result)) {
                    result = this._emptyAggregates(this.aggregate());
                }

                return result;
            },

            _emptyAggregates: function(aggregates) {
                var result = {};

                if (!isEmptyObject(aggregates)) {
                    var aggregate = {};

                    if (!isArray(aggregates)) {
                        aggregates = [aggregates];
                    }

                    for (var idx = 0; idx < aggregates.length; idx++) {
                        aggregate[aggregates[idx].aggregate] = 0;
                        result[aggregates[idx].field] = aggregate;
                    }
                }

                return result;
            },

            _pageableQueryOptions: function(options) {
                return options;
            },

            _wrapInEmptyGroup: function(model) {
                var groups = this.group(),
                    parent,
                    group,
                    idx,
                    length;

                for (idx = groups.length - 1, length = 0; idx >= length; idx--) {
                    group = groups[idx];
                    parent = {
                        value: model.get ? model.get(group.field) : model[group.field],
                        field: group.field,
                        items: parent ? [parent] : [model],
                        hasSubgroups: !!parent,
                        aggregates: this._emptyAggregates(group.aggregates)
                    };
                }

                return parent;
            },

            totalPages: function() {
                var that = this,
                    pageSize = that.pageSize() || that.total(),
                    total = that._isGroupPaged() ? that.groupsTotal(true) : that.total();

                return math.ceil((total || 0) / pageSize);
            },

            inRange: function(skip, take) {
                var that = this,
                    end = math.min(skip + take, that.total());

                if (!that.options.serverPaging && that._data.length > 0) {
                    return true;
                }

                return that._findRange(skip, end).length > 0;
            },

            lastRange: function() {
                var ranges = this._ranges;
                return ranges[ranges.length - 1] || { start: 0, end: 0, data: [] };
            },

            firstItemUid: function() {
                var ranges = this._ranges;
                return ranges.length && ranges[0].data.length && ranges[0].data[0].uid;
            },

            enableRequestsInProgress: function() {
                this._skipRequestsInProgress = false;
            },

            _timeStamp: function() {
                return new Date().getTime();
            },

            range: function(skip, take, callback, action) {
                this._currentRequestTimeStamp = this._timeStamp();
                this._skipRequestsInProgress = true;
                var total = this._isGroupPaged() ? this.groupsTotal(true) : this.total();

                if (action === "expandGroup" || action === "collapseGroup") {
                    this._updateOuterRangesLength();
                }

                skip = math.min(skip || 0, total);
                callback = isFunction(callback) ? callback : noop;

                var that = this,
                    pageSkip = math.max(math.floor(skip / take), 0) * take,
                    size = math.min(pageSkip + take, total),
                    data;

                data = that._findRange(skip, math.min(skip + take, total), callback);

                if ((data.length || total === 0) && !that._fetchingGroupItems) {
                    that._processRangeData(data, skip, take, that._originalPageSkip || pageSkip, that._originalSize || size, {
                        action: action
                    });
                    that._originalPageSkip = null;
                    that._originalSize = null;
                    callback();
                    return;
                }

                if (that._isGroupPaged()) {
                    that._originalPageSkip = pageSkip;
                    that._originalSize = size;

                    pageSkip = math.max(math.floor(that._adjustPageSkip(skip, take) / take), 0) * take;
                    size = math.min(pageSkip + take, total);
                }

                if (take !== undefined$1 && !that._fetchingGroupItems) {
                    if ((that._isGroupPaged() && !that._groupRangeExists(pageSkip, take)) || !that._rangeExists(pageSkip, size)) {
                        that.prefetch(pageSkip, take, function() {
                            if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {
                                that.prefetch(size, take, function() {
                                    that.range(skip, take, callback );
                                });
                            } else {
                                that.range(skip, take, callback);
                            }
                        });
                    } else if (pageSkip < skip) {
                        that.prefetch(size, take, function() {
                            that.range(skip, take, callback );
                        });
                    }
                }
            },

            _findRange: function(start, end, callback) {
                var that = this,
                    ranges = that._ranges,
                    range,
                    data = [],
                    skipIdx,
                    takeIdx,
                    startIndex,
                    endIndex,
                    rangeData,
                    rangeEnd,
                    processed,
                    options = that.options,
                    remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,
                    flatData,
                    count,
                    length,
                    groupMapOptions = {
                            take: end - start,
                            skip: start,
                            skipped: 0,
                            taken: 0,
                            includeParents: true
                        },
                    prevRangeEnd,
                    isGroupPaged = that._isGroupPaged(),
                    startField = isGroupPaged ? "outerStart" : "start",
                    endField = isGroupPaged ? "outerEnd" : "end",
                    currentDataLength;

                for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {
                    range = ranges[skipIdx];

                    if (isGroupPaged) {
                        if (range.outerStart >= end) {
                            return [];
                        }

                        if (start > range.outerEnd) {
                            groupMapOptions.skipped += range.outerEnd - (prevRangeEnd || 0);
                            prevRangeEnd = range.outerEnd;
                            continue;
                        }

                        if (typeof prevRangeEnd !== "undefined" && prevRangeEnd != range.outerStart) {
                            groupMapOptions.skipped += range.outerStart - prevRangeEnd;
                        }

                        if (groupMapOptions.skipped > groupMapOptions.skip) {
                            return [];
                        }

                        if (typeof prevRangeEnd === "undefined" && start > 0 && range.start > 0) {
                            groupMapOptions.skipped = range.outerStart;
                        }

                        takeIdx = skipIdx;
                        while (true) {
                            this._findGroupedRange(range.data, data, groupMapOptions, null, callback);
                            currentDataLength = that._calculateGroupsTotal(data, true, "currentItems");

                            if (currentDataLength >= groupMapOptions.take) {
                                return data;
                            }

                            if (that._fetchingGroupItems) {
                                return [];
                            }
                            takeIdx++;

                            if (ranges[takeIdx] && ranges[takeIdx].outerStart === range.outerEnd) {
                                range = ranges[takeIdx];
                            } else {
                                break;
                            }
                        }
                    } else if (start >= range[startField] && start <= range[endField]) {
                        count = 0;

                        for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {
                            range = ranges[takeIdx];
                            flatData = that._flatData(range.data, true);

                            if (flatData.length && start + count >= range.start) {
                                rangeData = range.data;
                                rangeEnd = range.end;

                                if (!remote) {
                                    if (options.inPlaceSort) {
                                        processed = that._queryProcess(range.data, { filter: that.filter() });
                                    } else {
                                        var sort = normalizeGroupWithoutCompare(that.group() || []).concat(normalizeSort(that.sort() || []));
                                        processed = that._queryProcess(range.data, { sort: sort, filter: that.filter() });
                                    }
                                    flatData = rangeData = processed.data;

                                    if (processed.total !== undefined$1) {
                                        rangeEnd = processed.total;
                                    }
                                }

                                startIndex = 0;
                                if (start + count > range.start) {
                                    startIndex = (start + count) - range.start;
                                }
                                endIndex = flatData.length;
                                if (rangeEnd > end) {
                                    endIndex = endIndex - (rangeEnd - end);
                                }
                                count += endIndex - startIndex;
                                data = that._mergeGroups(data, rangeData, startIndex, endIndex);

                                if (end <= range.end && count == end - start) {
                                    return data;
                                }
                            }
                        }
                        break;
                    }
                    prevRangeEnd = range.outerEnd;
                }
                return [];
            },

            _getRangesMismatch: function(pageSkip) {
                var that = this;
                var ranges = that._ranges;
                var mismatch = 0;
                var i = 0;

                while (true) {
                    var range = ranges[i];
                    if (!range || range.outerStart > pageSkip) {
                        break;
                    }

                    if (range.outerEnd != range.end) {
                        mismatch = range.outerEnd - range.end;
                    }
                    i++;
                }

                return mismatch;
            },

            _mergeGroups: function(data, range, skip, take) {
                if (this._isServerGrouped()) {
                    var temp = range.toJSON(),
                        prevGroup;

                    if (data.length) {
                        prevGroup = data[data.length - 1];
                    }

                    mergeGroups(prevGroup, temp, skip, take);

                    return data.concat(temp);
                }
                return data.concat(range.slice(skip, take));
            },

            _processRangeData: function(data, skip, take, pageSkip, size, eventData) {
                var that = this;

                that._pending = undefined$1;

                that._skip = skip > that.skip() && !that._omitPrefetch ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;

                that._currentRangeStart = skip;

                that._take = take;

                var paging = that.options.serverPaging;
                var sorting = that.options.serverSorting;
                var filtering = that.options.serverFiltering;
                var aggregates = that.options.serverAggregates;
                try {
                    that.options.serverPaging = true;
                    if (!that._isServerGrouped() && !(that.group() && that.group().length)) {
                        that.options.serverSorting = true;
                    }
                    that.options.serverFiltering = true;
                    that.options.serverPaging = true;
                    that.options.serverAggregates = true;

                    if (paging) {
                        that._detachObservableParents();
                        that._data = data = that._observe(data);
                    }
                    that._process(data, eventData);
                } finally {
                    that.options.serverPaging = paging;
                    that.options.serverSorting = sorting;
                    that.options.serverFiltering = filtering;
                    that.options.serverAggregates = aggregates;
                }
            },

            skip: function() {
                var that = this;

                if (that._skip === undefined$1) {
                    return (that._page !== undefined$1 ? (that._page - 1) * (that.take() || 1) : undefined$1);
                }
                return that._skip;
            },

            currentRangeStart: function() {
                return this._currentRangeStart || 0;
            },

            take: function() {
                return this._take || this._pageSize;
            },

            _prefetchSuccessHandler: function(skip, size, callback, force) {
                var that = this;
                var timestamp = that._timeStamp();

                return function(data) {
                    var found = false,
                        range = { start: skip, end: size, data: [], timestamp: that._timeStamp() },
                        idx,
                        length,
                        temp;

                    that._dequeueRequest();

                    that.trigger(REQUESTEND, { response: data, type: "read" });

                    data = that.reader.parse(data);

                    temp = that._readData(data);

                    if (temp.length) {
                        for (idx = 0, length = that._ranges.length; idx < length; idx++) {
                            if (that._ranges[idx].start === skip) {
                                found = true;
                                range = that._ranges[idx];

                                if (!that._isGroupPaged()) {
                                    range.pristineData = temp;
                                    range.data = that._observe(temp);
                                    range.end = range.start + that._flatData(range.data, true).length;
                                    that._sortRanges();
                                }

                                break;
                            }
                        }

                        if (!found) {
                            that._addRange(that._observe(temp), skip);
                        }
                    }

                    that._total = that.reader.total(data);

                    if (force || (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress)) {
                        if (callback && temp.length) {
                            callback();
                        } else {
                            that.trigger(CHANGE, {});
                        }
                    }
                };
            },

            prefetch: function(skip, take, callback) {
                var that = this,
                    size = math.min(skip + take, that.total()),
                    options = {
                        take: take,
                        skip: skip,
                        page: skip / take + 1,
                        pageSize: take,
                        sort: that._sort,
                        filter: that._filter,
                        group: that._group,
                        aggregate: that._aggregate
                    };


                if ((that._isGroupPaged() && !that._isServerGrouped() && that._groupRangeExists(skip, size))) {
                    if (callback) {
                        callback();
                    }
                    return;
                }

                if ((that._isServerGroupPaged() && !that._groupRangeExists(skip, size)) || !that._rangeExists(skip, size)) {
                    clearTimeout(that._timeout);

                    that._timeout = setTimeout(function() {
                        that._queueRequest(options, function() {
                            if (!that.trigger(REQUESTSTART, { type: "read" })) {
                                if (that._omitPrefetch) {
                                    that.trigger(PROGRESS);
                                }
                                that.transport.read({
                                    data: that._params(options),
                                    success: that._prefetchSuccessHandler(skip, size, callback),
                                    error: function() {
                                        var args = slice.call(arguments);
                                        that.error.apply(that, args);
                                    }
                                });
                            } else {
                                that._dequeueRequest();
                            }
                        });
                    }, 100);
                } else if (callback) {
                    callback();
                }
            },

            _multiplePrefetch: function(skip, take, callback) {
                var that = this,
                    size = math.min(skip + take, that.total()),
                    options = {
                        take: take,
                        skip: skip,
                        page: skip / take + 1,
                        pageSize: take,
                        sort: that._sort,
                        filter: that._filter,
                        group: that._group,
                        aggregate: that._aggregate
                    };

                if (!that._rangeExists(skip, size)) {
                    if (!that.trigger(REQUESTSTART, { type: "read" })) {
                        that.transport.read({
                            data: that._params(options),
                            success: that._prefetchSuccessHandler(skip, size, callback, true)
                        });
                    }
                } else if (callback) {
                    callback();
                }
            },

            _adjustPageSkip: function(start, take) {
                var that = this;
                var prevRange = that._getPrevRange(start);
                var result;
                var total = that.total();
                var mismatch;

                if (prevRange) {
                    mismatch = that._getRangesMismatch(start);

                    if (!mismatch) {
                        return start;
                    }
                    start -= mismatch;
                }
                result = math.max(math.floor(start / take), 0) * take;

                if (result > total) {
                    while (true) {
                        result -= take;
                        if (result < total) {
                            break;
                        }
                    }
                }
                return result;
            },

            _getNextRange: function(end) {
                var that = this,
                    ranges = that._ranges,
                    idx,
                    length;

                for (idx = 0, length = ranges.length; idx < length; idx++) {
                    if (ranges[idx].start <= end && ranges[idx].end >= end) {
                        return ranges[idx];
                    }
                }
            },

            _getPrevRange: function(start) {
                var that = this,
                    ranges = that._ranges,
                    idx,
                    range,
                    length = ranges.length;

                for (idx = length - 1; idx >= 0; idx--) {
                    if (ranges[idx].outerStart <= start) {
                        range = ranges[idx];
                        break;
                    }

                }

                return range;
            },

            _rangeExists: function(start, end) {
                var that = this,
                    ranges = that._ranges,
                    idx,
                    length;

                for (idx = 0, length = ranges.length; idx < length; idx++) {
                    if (ranges[idx].start <= start && ranges[idx].end >= end) {
                        return true;
                    }
                }

                return false;
            },

            _groupRangeExists: function(start, end) {
                var that = this,
                    ranges = that._ranges,
                    idx,
                    length,
                    availableItemsCount = 0,
                    total = that.groupsTotal(true);

                if (end > total && !that._isServerGrouped()) {
                    end = total;
                }

                for (idx = 0, length = ranges.length; idx < length; idx++) {
                    var range = ranges[idx];
                    if (range.outerStart <= start && range.outerEnd >= start) {
                        availableItemsCount += range.outerEnd - start;
                    } else if (range.outerStart <= end && range.outerEnd >= end) {
                        availableItemsCount += end - range.outerStart;
                    }
                }

                return availableItemsCount >= end - start;
            },

            _getCurrentRangeSpan: function() {
                var that = this;
                var ranges = that._ranges;
                var start = that.currentRangeStart();
                var end = start + (that.take() || 0);
                var rangeSpan = [];
                var range;
                var idx;
                var length = ranges.length;

                for (idx = 0; idx < length; idx++) {
                    range = ranges[idx];

                    if ((range.start <= start && range.end >= start) || (range.start >= start && range.start <= end)) {
                        rangeSpan.push(range);
                    }
                }

                return rangeSpan;
            },

            _removeModelFromRanges: function(model) {
                var that = this;
                var range;

                for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
                    range = this._ranges[idx];

                    that._removeModelFromRange(range, model);
                }

                that._updateRangesLength();
            },

            _removeModelFromRange: function(range, model) {
                this._eachItem(range.data, function(data) {
                    if (!data) {
                        return;
                    }
                    for (var idx = 0; idx < data.length; idx++) {
                        var dataItem = data[idx];

                        if (dataItem.uid && dataItem.uid == model.uid) {
                            [].splice.call(data, idx, 1);
                            break;
                        }
                    }
                });
            },

            _insertModelInRange: function(index, model) {
                var that = this;
                var ranges = that._ranges || [];
                var rangesLength = ranges.length;
                var range;
                var i;

                for (i = 0; i < rangesLength; i++) {
                    range = ranges[i];

                    if (range.start <= index && range.end >= index) {
                        if (!that._getByUid(model.uid, range.data)) {
                            if (that._isServerGrouped()) {
                                range.data.splice(index, 0, that._wrapInEmptyGroup(model));
                            } else {
                                range.data.splice(index, 0, model);
                            }
                        }

                        break;
                    }
                }

                that._updateRangesLength();
            },

            _updateRangesLength: function() {
                var that = this;
                var ranges = that._ranges || [];
                var rangesLength = ranges.length;
                var mismatchFound = false;
                var mismatchLength = 0;
                var lengthDifference = 0;
                var rangeLength;
                var range;
                var i;

                for (i = 0; i < rangesLength; i++) {
                    range = ranges[i];
                    rangeLength = that._isGroupPaged() ? range.data.length : that._flatData(range.data, true).length;
                    lengthDifference = rangeLength - math.abs(range.end - range.start);

                    if (!mismatchFound && lengthDifference !== 0) {
                        mismatchFound = true;
                        mismatchLength = lengthDifference;
                        range.end += mismatchLength;
                        continue;
                    }

                    if (mismatchFound) {
                        range.start += mismatchLength;
                        range.end += mismatchLength;
                    }
                }
            },

            _updateOuterRangesLength: function() {
                var that = this;
                var ranges = that._ranges || [];
                var rangesLength = ranges.length;
                var mismatchLength = 0;
                var range;
                var i;
                var prevRange;
                var rangeLength;

                for (i = 0; i < rangesLength; i++) {
                    range = ranges[i];
                    rangeLength = that._isGroupPaged() ? that._calculateGroupsTotal(range.data, true, "items", true) : that._flatData(range.data, true).length;

                    if (prevRange) {
                        if (prevRange.end != range.start) {
                            mismatchLength = range.start - prevRange.end;
                        }
                        range.outerStart = prevRange.outerEnd + mismatchLength;
                        mismatchLength = 0;
                    } else {
                        range.outerStart = range.start;
                    }

                    range.outerEnd = range.outerStart + rangeLength;
                    prevRange = range;
                }
            }
        });

        var Transport = {};

        Transport.create = function(options, data, dataSource) {
            var transport,
                transportOptions = options.transport ? $.extend({}, options.transport) : null;

            if (transportOptions) {
                transportOptions.read = typeof transportOptions.read === STRING ? { url: transportOptions.read } : transportOptions.read;

                if (options.type === "jsdo") {
                    transportOptions.dataSource = dataSource;
                }

                if (options.type) {
                    kendo.data.transports = kendo.data.transports || {};
                    kendo.data.schemas = kendo.data.schemas || {};

                    if (!kendo.data.transports[options.type]) {
                        kendo.logToConsole("Unknown DataSource transport type '" + options.type + "'.\nVerify that registration scripts for this type are included after Kendo UI on the page.", "warn");
                    } else if (!isPlainObject(kendo.data.transports[options.type])) {
                        transport = new kendo.data.transports[options.type](extend(transportOptions, { data: data }));
                    } else {
                        transportOptions = extend(true, {}, kendo.data.transports[options.type], transportOptions);
                    }

                    options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);
                }

                if (!transport) {
                    transport = isFunction(transportOptions.read) ? transportOptions : new RemoteTransport(transportOptions);
                }
            } else {
                transport = new LocalTransport({ data: options.data || [] });
            }
            return transport;
        };

        DataSource.create = function(options) {
            if (isArray(options) || options instanceof ObservableArray) {
               options = { data: options };
            }

            var dataSource = options || {},
                data = dataSource.data,
                fields = dataSource.fields,
                table = dataSource.table,
                select = dataSource.select,
                idx,
                length,
                model = {},
                field;

            if (!data && fields && !dataSource.transport) {
                if (table) {
                    data = inferTable(table, fields);
                } else if (select) {
                    data = inferSelect(select, fields);

                    if (dataSource.group === undefined$1 && data[0] && data[0].optgroup !== undefined$1) {
                        dataSource.group = "optgroup";
                    }
                }
            }

            if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {
                for (idx = 0, length = fields.length; idx < length; idx++) {
                    field = fields[idx];
                    if (field.type) {
                        model[field.field] = field;
                    }
                }

                if (!isEmptyObject(model)) {
                    dataSource.schema = extend(true, dataSource.schema, { model: { fields: model } });
                }
            }

            dataSource.data = data;

            select = null;
            dataSource.select = null;
            table = null;
            dataSource.table = null;

            return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);
        };

        function inferSelect(select, fields) {
            select = $(select)[0];
            var options = select.options;
            var firstField = fields[0];
            var secondField = fields[1];

            var data = [];
            var idx, length;
            var optgroup;
            var option;
            var record;
            var value;

            for (idx = 0, length = options.length; idx < length; idx++) {
                record = {};
                option = options[idx];
                optgroup = option.parentNode;

                if (optgroup === select) {
                    optgroup = null;
                }

                if (option.disabled || (optgroup && optgroup.disabled)) {
                    continue;
                }

                if (optgroup) {
                    record.optgroup = optgroup.label;
                }

                record[firstField.field] = option.text;

                value = option.attributes.value;

                if (value && value.specified) {
                    value = option.value;
                } else {
                    value = option.text;
                }

                record[secondField.field] = value;

                data.push(record);
            }

            return data;
        }

        function inferTable(table, fields) {
            var tbody = $(table)[0].tBodies[0],
            rows = tbody ? tbody.rows : [],
            idx,
            length,
            fieldIndex,
            fieldCount = fields.length,
            data = [],
            cells,
            record,
            cell,
            empty;

            for (idx = 0, length = rows.length; idx < length; idx++) {
                record = {};
                empty = true;
                cells = rows[idx].cells;

                for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {
                    cell = cells[fieldIndex];
                    if (cell.nodeName.toLowerCase() !== "th") {
                        empty = false;
                        record[fields[fieldIndex].field] = cell.innerHTML;
                    }
                }
                if (!empty) {
                    data.push(record);
                }
            }

            return data;
        }

        var Node = Model.define({
            idField: "id",

            init: function(value) {
                var that = this,
                    hasChildren = that.hasChildren || value && value.hasChildren,
                    childrenField = "items",
                    childrenOptions = {};

                kendo.data.Model.fn.init.call(that, value);

                if (typeof that.children === STRING) {
                    childrenField = that.children;
                }

                childrenOptions = {
                    schema: {
                        data: childrenField,
                        model: {
                            hasChildren: hasChildren,
                            id: that.idField,
                            fields: that.fields
                        }
                    }
                };

                if (typeof that.children !== STRING) {
                    extend(childrenOptions, that.children);
                }

                childrenOptions.data = value;

                if (!hasChildren) {
                    hasChildren = childrenOptions.schema.data;
                }

                if (typeof hasChildren === STRING) {
                    hasChildren = kendo.getter(hasChildren);
                }

                if (isFunction(hasChildren)) {
                    var hasChildrenObject = hasChildren.call(that, that);

                    if (hasChildrenObject && hasChildrenObject.length === 0) {
                        that.hasChildren = false;
                    } else {
                        that.hasChildren = !!hasChildrenObject;
                    }
                }

                that._childrenOptions = childrenOptions;

                if (that.hasChildren) {
                    that._initChildren();
                }

                that._loaded = !!(value && value._loaded);
            },

            _initChildren: function() {
                var that = this;
                var children, transport, parameterMap;

                if (!(that.children instanceof HierarchicalDataSource)) {
                    children = that.children = new HierarchicalDataSource(that._childrenOptions);

                    transport = children.transport;
                    parameterMap = transport.parameterMap;

                    transport.parameterMap = function(data, type) {
                        data[that.idField || "id"] = that.id;

                        if (parameterMap) {
                            data = parameterMap.call(that, data, type);
                        }

                        return data;
                    };

                    children.parent = function() {
                        return that;
                    };

                    children.bind(CHANGE, function(e) {
                        e.node = e.node || that;
                        that.trigger(CHANGE, e);
                    });

                    children.bind(ERROR, function(e) {
                        var collection = that.parent();

                        if (collection) {
                            e.node = e.node || that;
                            collection.trigger(ERROR, e);
                        }
                    });

                    children.bind(ITEMSLOADED, function(e) {
                        var collection = that.parent();

                        if (collection) {
                            collection.trigger(ITEMSLOADED, e);
                        }
                    });

                    that._updateChildrenField();
                }
            },

            append: function(model) {
                this._initChildren();
                this.loaded(true);
                this.children.add(model);
            },

            hasChildren: false,

            level: function() {
                var parentNode = this.parentNode(),
                    level = 0;

                while (parentNode && parentNode.parentNode) {
                    level++;
                    parentNode = parentNode.parentNode ? parentNode.parentNode() : null;
                }

                return level;
            },

            _updateChildrenField: function() {
                var fieldName = this._childrenOptions.schema.data;

                this[fieldName || "items"] = this.children.data();
            },

            _childrenLoaded: function() {
                this._loaded = true;

                this._updateChildrenField();
            },

            load: function() {
                var options = {};
                var method = "_query";
                var children, promise;

                if (this.hasChildren) {
                    this._initChildren();

                    children = this.children;

                    options[this.idField || "id"] = this.id;

                    if (!this._loaded) {
                        children._data = undefined$1;
                        method = "read";
                    }

                    children.one(CHANGE, this._childrenLoaded.bind(this));

                    if (this._matchFilter) {
                        options.filter = { field: '_matchFilter', operator: 'eq', value: true };
                    }

                    promise = children[method](options);
                    if (!this._loaded) {
                        this.trigger(ITEMLOAD, { promise: promise, node: this });
                    }
                } else {
                    this.loaded(true);
                }

                return promise || $.Deferred().resolve().promise();
            },

            parentNode: function() {
                var array = this.parent();

                return array.parent();
            },

            loaded: function(value) {
                if (value !== undefined$1) {
                    this._loaded = value;
                } else {
                    return this._loaded;
                }
            },

            shouldSerialize: function(field) {
                return Model.fn.shouldSerialize.call(this, field) &&
                        field !== "children" &&
                        field !== "_loaded" &&
                        field !== "hasChildren" &&
                        field !== "_childrenOptions";
            }
        });

        function dataMethod(name) {
            return function() {
                var data = this._data,
                    result = DataSource.fn[name].apply(this, slice.call(arguments));

                if (this._data != data) {
                    this._attachBubbleHandlers();
                }

                return result;
            };
        }

        var HierarchicalDataSource = DataSource.extend({
            init: function(options) {
                var node = Node.define({
                    children: options
                });

                if (options.filter && !options.serverFiltering) {
                    this._hierarchicalFilter = options.filter;
                    options.filter = null;
                }

                DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));

                this._attachBubbleHandlers();
            },

            _attachBubbleHandlers: function() {
                var that = this;

                that._data.bind(ERROR, function(e) {
                    that.trigger(ERROR, e);
                });

                that._data.bind(ITEMSLOADED, function(e) {
                    that.trigger(ITEMSLOADED, e);
                });
            },

            loading: function() {
                if (this._data) {
                    return this._data.loading() || this._childrenLoading();
                }
                return false;
            },

            _childrenLoading: function() {
                var isLoading = false;
                this._data.forEach(function(node) {
                    if (node.hasChildren && node.children.loading()) {
                        isLoading = true;
                    }
                });
                return isLoading;
            },

            read: function(data) {
                var result = DataSource.fn.read.call(this, data);

                if (this._hierarchicalFilter) {
                    if (this._data && this._data.length > 0) {
                        this.filter(this._hierarchicalFilter);
                    } else {
                        this.options.filter = this._hierarchicalFilter;
                        this._filter = normalizeFilter(this.options.filter);
                        this._hierarchicalFilter = null;
                    }
                }

                return result;
            },

            remove: function(node) {
                var parentNode = node.parentNode(),
                    dataSource = this,
                    result;

                if (parentNode && parentNode._initChildren) {
                    dataSource = parentNode.children;
                }

                result = DataSource.fn.remove.call(dataSource, node);

                if (parentNode && !dataSource.data().length) {
                    parentNode.hasChildren = false;
                }

                return result;
            },

            success: dataMethod("success"),

            data: dataMethod("data"),

            insert: function(index, model) {
                var parentNode = this.parent();

                if (parentNode && parentNode._initChildren) {
                    parentNode.hasChildren = true;
                    parentNode._initChildren();
                }

                return DataSource.fn.insert.call(this, index, model);
            },

            filter: function(val) {
                if (val === undefined$1) {
                     return this._filter;
                }

                if (!this.options.serverFiltering && this._markHierarchicalQuery(val)) {
                    val = { logic: "or", filters: [val, { field: '_matchFilter', operator: 'equals', value: true }] };
                }

                this.trigger("reset");
                this._query({ filter: val, page: 1 });
            },

            _markHierarchicalQuery: function(expressions) {
                var compiled;
                var accentFoldingFiltering = this.options.accentFoldingFiltering;

                expressions = accentFoldingFiltering ? $.extend({}, normalizeFilter(expressions), { accentFoldingFiltering: accentFoldingFiltering }) : normalizeFilter(expressions);

                if (!expressions || expressions.filters.length === 0) {
                    this._updateHierarchicalFilter(function() {return true;});
                    return false;
                }

                compiled = Query.filterExpr(expressions, { noEval: true });

                this._updateHierarchicalFilter(compiled);
                return true;
            },

             _updateHierarchicalFilter: function(filter) {
                var current;
                var data = this._data;
                var result = false;

                for (var idx = 0; idx < data.length; idx++) {
                     current = data[idx];

                     if (current.hasChildren) {
                         current._matchFilter = current.children._updateHierarchicalFilter(filter);
                        if (!current._matchFilter) {
                            current._matchFilter = filter(current);
                        }
                    } else {
                        current._matchFilter = filter(current);
                    }

                    if (current._matchFilter) {
                        result = true;
                    }
                }
                return result;
            },

            _find: function(method, value) {
                var idx, length, node, children;
                var data = this._data;

                if (!data) {
                    return;
                }

                node = DataSource.fn[method].call(this, value);

                if (node) {
                    return node;
                }

                data = this._flatData(this._data);

                for (idx = 0, length = data.length; idx < length; idx++) {
                    children = data[idx].children;

                    if (!(children instanceof HierarchicalDataSource)) {
                        continue;
                    }

                    node = children[method](value);

                    if (node) {
                        return node;
                    }
                }
            },

            get: function(id) {
                return this._find("get", id);
            },

            getByUid: function(uid) {
                return this._find("getByUid", uid);
            }
        });

        function inferList(list, fields) {
            var items = $(list).children(),
                idx,
                length,
                data = [],
                record,
                textField = fields[0].field,
                urlField = fields[1] && fields[1].field,
                spriteCssClassField = fields[2] && fields[2].field,
                imageUrlField = fields[3] && fields[3].field,
                item,
                id,
                textChild,
                className,
                children;

            function elements(collection, tagName) {
                return collection.filter(tagName).add(collection.find(tagName));
            }

            for (idx = 0, length = items.length; idx < length; idx++) {
                record = { _loaded: true };
                item = items.eq(idx);

                textChild = item[0].firstChild;
                children = item.children();
                list = children.filter("ul");
                children = children.filter(":not(ul)");

                id = item.attr("data-id");

                if (id) {
                    record.id = id;
                }

                if (textChild) {
                    record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();
                }

                if (urlField) {
                    record[urlField] = elements(children, "a").attr("href");
                }

                if (imageUrlField) {
                    record[imageUrlField] = elements(children, "img").attr("src");
                }

                if (spriteCssClassField) {
                    className = elements(children, ".k-sprite").prop("className");
                    record[spriteCssClassField] = className && kendo.trim(className.replace("k-sprite", ""));
                }

                if (list.length) {
                    record.items = inferList(list.eq(0), fields);
                }

                if (item.attr("data-hasChildren") == "true") {
                    record.hasChildren = true;
                }

                data.push(record);
            }

            return data;
        }

        HierarchicalDataSource.create = function(options) {
            options = options && options.push ? { data: options } : options;

            var dataSource = options || {},
                data = dataSource.data,
                fields = dataSource.fields,
                list = dataSource.list;

            if (data && data._dataSource) {
                return data._dataSource;
            }

            if (!data && fields && !dataSource.transport) {
                if (list) {
                    data = inferList(list, fields);
                }
            }

            dataSource.data = data;

            return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);
        };

        var Buffer = kendo.Observable.extend({
            init: function(dataSource, viewSize, disablePrefetch) {
                kendo.Observable.fn.init.call(this);

                this._prefetching = false;
                this.dataSource = dataSource;
                this.prefetch = !disablePrefetch;

                var buffer = this;

                dataSource.bind("change", function() {
                    buffer._change();
                });

                dataSource.bind("reset", function() {
                    buffer._reset();
                });

                this._syncWithDataSource();

                this.setViewSize(viewSize);
            },

            setViewSize: function(viewSize) {
                this.viewSize = viewSize;
                this._recalculate();
            },

            at: function(index) {
                var pageSize = this.pageSize,
                    itemPresent = true;

                if (index >= this.total()) {
                    this.trigger("endreached", { index: index });
                    return null;
                }

                if (!this.useRanges) {
                   return this.dataSource.view()[index];
                }
                if (this.useRanges) {
                    // out of range request
                    if (index < this.dataOffset || index >= this.skip + pageSize) {
                        itemPresent = this.range(Math.floor(index / pageSize) * pageSize);
                    }

                    // prefetch
                    if (index === this.prefetchThreshold) {
                        this._prefetch();
                    }

                    // mid-range jump - prefetchThreshold and nextPageThreshold may be equal, do not change to else if
                    if (index === this.midPageThreshold) {
                        this.range(this.nextMidRange, true);
                    }
                    // next range jump
                    else if (index === this.nextPageThreshold) {
                        this.range(this.nextFullRange);
                    }
                    // pull-back
                    else if (index === this.pullBackThreshold) {
                        if (this.offset === this.skip) { // from full range to mid range
                            this.range(this.previousMidRange);
                        } else { // from mid range to full range
                            this.range(this.previousFullRange);
                        }
                    }

                    if (itemPresent) {
                        return this.dataSource.at(index - this.dataOffset);
                    } else {
                        this.trigger("endreached", { index: index });
                        return null;
                    }
                }
            },

            indexOf: function(item) {
                return this.dataSource.data().indexOf(item) + this.dataOffset;
            },

            total: function() {
                return parseInt(this.dataSource.total(), 10);
            },

            next: function() {
                var buffer = this,
                    pageSize = buffer.pageSize,
                    offset = buffer.skip - buffer.viewSize + pageSize,
                    pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize;

                this.offset = offset;
                this.dataSource.prefetch(pageSkip, pageSize, function() {
                    buffer._goToRange(offset, true);
                });
            },

            range: function(offset, nextRange) {
                if (this.offset === offset) {
                    return true;
                }

                var buffer = this,
                    pageSize = this.pageSize,
                    pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize,
                    dataSource = this.dataSource;

                if (nextRange) {
                    pageSkip += pageSize;
                }

                if (dataSource.inRange(offset, pageSize)) {
                    this.offset = offset;
                    this._recalculate();
                    this._goToRange(offset);
                    return true;
                } else if (this.prefetch) {
                    dataSource.prefetch(pageSkip, pageSize, function() {
                        buffer.offset = offset;
                        buffer._recalculate();
                        buffer._goToRange(offset, true);
                    });
                    return false;
                }

                return true;
            },

            syncDataSource: function() {
                var offset = this.offset;
                this.offset = null;
                this.range(offset);
            },

            destroy: function() {
                this.unbind();
            },

            _prefetch: function() {
                var buffer = this,
                    pageSize = this.pageSize,
                    prefetchOffset = this.skip + pageSize,
                    dataSource = this.dataSource;

                if (!dataSource.inRange(prefetchOffset, pageSize) && !this._prefetching && this.prefetch) {
                    this._prefetching = true;
                    this.trigger("prefetching", { skip: prefetchOffset, take: pageSize });

                    dataSource.prefetch(prefetchOffset, pageSize, function() {
                        buffer._prefetching = false;
                        buffer.trigger("prefetched", { skip: prefetchOffset, take: pageSize });
                    });
                }
            },

            _goToRange: function(offset, expanding) {
                if (this.offset !== offset) {
                    return;
                }

                this.dataOffset = offset;
                this._expanding = expanding;
                this.dataSource.range(offset, this.pageSize);
                this.dataSource.enableRequestsInProgress();
            },

            _reset: function() {
                this._syncPending = true;
            },

            _change: function() {
                var dataSource = this.dataSource;

                this.length = this.useRanges ? dataSource.lastRange().end : dataSource.view().length;

                if (this._syncPending) {
                    this._syncWithDataSource();
                    this._recalculate();
                    this._syncPending = false;
                    this.trigger("reset", { offset: this.offset });
                }

                this.trigger("resize");

                if (this._expanding) {
                    this.trigger("expand");
                }

                delete this._expanding;
            },

            _syncWithDataSource: function() {
                var dataSource = this.dataSource;

                this._firstItemUid = dataSource.firstItemUid();
                this.dataOffset = this.offset = dataSource.skip() || 0;
                this.pageSize = dataSource.pageSize();
                this.useRanges = dataSource.options.serverPaging;
            },

            _recalculate: function() {
                var pageSize = this.pageSize,
                    offset = this.offset,
                    viewSize = this.viewSize,
                    skip = Math.ceil(offset / pageSize) * pageSize;

                this.skip = skip;
                this.midPageThreshold = skip + pageSize - 1;
                this.nextPageThreshold = skip + viewSize - 1;
                this.prefetchThreshold = skip + Math.floor(pageSize / 3 * 2);
                this.pullBackThreshold = this.offset - 1;

                this.nextMidRange = skip + pageSize - viewSize;
                this.nextFullRange = skip;
                this.previousMidRange = offset - viewSize;
                this.previousFullRange = skip - pageSize;
            }
        });

        var BatchBuffer = kendo.Observable.extend({
            init: function(dataSource, batchSize) {
                var batchBuffer = this;

                kendo.Observable.fn.init.call(batchBuffer);

                this.dataSource = dataSource;
                this.batchSize = batchSize;
                this._total = 0;

                this.buffer = new Buffer(dataSource, batchSize * 3);

                this.buffer.bind({
                    "endreached": function(e) {
                        batchBuffer.trigger("endreached", { index: e.index });
                    },
                    "prefetching": function(e) {
                        batchBuffer.trigger("prefetching", { skip: e.skip, take: e.take });
                    },
                    "prefetched": function(e) {
                        batchBuffer.trigger("prefetched", { skip: e.skip, take: e.take });
                    },
                    "reset": function() {
                        batchBuffer._total = 0;
                        batchBuffer.trigger("reset");
                    },
                    "resize": function() {
                        batchBuffer._total = Math.ceil(this.length / batchBuffer.batchSize);
                        batchBuffer.trigger("resize", { total: batchBuffer.total(), offset: this.offset });
                    }
                });
            },

            syncDataSource: function() {
                this.buffer.syncDataSource();
            },

            at: function(index) {
                var buffer = this.buffer,
                    skip = index * this.batchSize,
                    take = this.batchSize,
                    view = [],
                    item;

                if (buffer.offset > skip) {
                    buffer.at(buffer.offset - 1);
                }

                for (var i = 0; i < take; i++) {
                    item = buffer.at(skip + i);

                    if (item === null) {
                        break;
                    }

                    view.push(item);
                }

                return view;
            },

            total: function() {
                return this._total;
            },

            destroy: function() {
                this.buffer.destroy();
                this.unbind();
            }
        });

        extend(true, kendo.data, {
            readers: {
                json: DataReader
            },
            Query: Query,
            DataSource: DataSource,
            HierarchicalDataSource: HierarchicalDataSource,
            Node: Node,
            Comparer: Comparer,
            ObservableObject: ObservableObject,
            ObservableArray: ObservableArray,
            LazyObservableArray: LazyObservableArray,
            LocalTransport: LocalTransport,
            RemoteTransport: RemoteTransport,
            Cache: Cache,
            DataReader: DataReader,
            Model: Model,
            Buffer: Buffer,
            BatchBuffer: BatchBuffer
        });
    })(window.kendo.jQuery);
    var kendo$V = kendo;

    var __meta__$_ = {
        id: "binder",
        name: "MVVM",
        category: "framework",
        description: "Model View ViewModel (MVVM) is a design pattern which helps developers separate the Model (the data) from the View (the UI).",
        depends: [ "core", "data" ]
    };


    (function($, undefined$1) {
        var kendo = window.kendo,
            encode = kendo.htmlEncode,
            Observable = kendo.Observable,
            ObservableObject = kendo.data.ObservableObject,
            ObservableArray = kendo.data.ObservableArray,
            toString = {}.toString,
            binders = {},
            Class = kendo.Class,
            VALUE = "value",
            SOURCE = "source",
            EVENTS = "events",
            CHECKED = "checked",
            CSS = "css",
            deleteExpando = true,
            FUNCTION = "function",
            CHANGE = "change";

        (function() {
            var a = document.createElement("a");

            try {
                delete a.test;
            } catch (e) {
                deleteExpando = false;
            }
        })();

        var Binding = Observable.extend( {
            init: function(parents, path) {
                var that = this;

                Observable.fn.init.call(that);

                that.source = parents[0];
                that.parents = parents;
                that.path = path;
                that.dependencies = {};
                that.dependencies[path] = true;
                that.observable = that.source instanceof Observable;

                that._access = function(e) {
                    that.dependencies[e.field] = true;
                };

                if (that.observable) {
                    that._change = function(e) {
                        that.change(e);
                    };

                    that.source.bind(CHANGE, that._change);
                }
            },

            _parents: function() {
                var parents = this.parents;
                var value = this.get();

                if (value && typeof value.parent == "function") {
                    var parent = value.parent();

                    if ($.inArray(parent, parents) < 0) {
                        parents = [parent].concat(parents);
                    }
                }

                return parents;
            },

            change: function(e) {
                var dependency,
                    ch,
                    field = e.field,
                    that = this;

                if (that.path === "this") {
                    that.trigger(CHANGE, e);
                } else {
                    for (dependency in that.dependencies) {
                        if (dependency.indexOf(field) === 0) {
                           ch = dependency.charAt(field.length);

                           if (!ch || ch === "." || ch === "[") {
                                that.trigger(CHANGE, e);
                                break;
                           }
                        }
                    }
                }
            },

            start: function(source) {
                source.bind("get", this._access);
            },

            stop: function(source) {
                source.unbind("get", this._access);
            },

            get: function() {

                var that = this,
                    source = that.source,
                    index = 0,
                    path = that.path,
                    result = source;

                if (!that.observable) {
                    return result;
                }

                that.start(that.source);

                result = source.get(path);

                // Traverse the observable hierarchy if the binding is not resolved at the current level.
                while (result === undefined$1 && source) {

                    source = that.parents[++index];

                    if (source instanceof ObservableObject) {
                        result = source.get(path);
                    }
                }

                // second pass try to get the parent from the object hierarchy
                if (result === undefined$1) {
                    source = that.source; //get the initial source

                    while (result === undefined$1 && source) {
                        source = source.parent();

                        if (source instanceof ObservableObject) {
                            result = source.get(path);
                        }
                    }
                }

                // If the result is a function - invoke it
                if (typeof result === "function") {
                    index = path.lastIndexOf(".");

                    // If the function is a member of a nested observable object make that nested observable the context (this) of the function
                    if (index > 0) {
                        source = source.get(path.substring(0, index));
                    }

                    // Invoke the function
                    that.start(source);

                    if (source !== that.source) {
                        result = result.call(source, that.source);
                    } else {
                        result = result.call(source);
                    }

                    that.stop(source);
                }

                // If the binding is resolved by a parent object
                if (source && source !== that.source) {

                    that.currentSource = source; // save parent object

                    // Listen for changes in the parent object
                    source.unbind(CHANGE, that._change)
                          .bind(CHANGE, that._change);
                }

                that.stop(that.source);

                return result;
            },

            set: function(value) {
                var source = this.currentSource || this.source;

                var field = kendo.getter(this.path)(source);

                if (typeof field === "function") {
                    if (source !== this.source) {
                        field.call(source, this.source, value);
                    } else {
                        field.call(source, value);
                    }
                } else {
                    source.set(this.path, value);
                }
            },

            destroy: function() {
                if (this.observable) {
                    this.source.unbind(CHANGE, this._change);
                    if (this.currentSource) {
                        this.currentSource.unbind(CHANGE, this._change);
                    }
                }

                this.unbind();
            }
        });

        var EventBinding = Binding.extend( {
            get: function() {
                var source = this.source,
                    path = this.path,
                    index = 0,
                    handler;

                handler = source.get(path);

                while (!handler && source) {
                    source = this.parents[++index];

                    if (source instanceof ObservableObject) {
                        handler = source.get(path);
                    }
                }

                if (!handler) {
                    return;
                }

                return handler.bind(source);
            }
        });

        var TemplateBinding = Binding.extend( {
            init: function(source, path, template) {
                var that = this;

                Binding.fn.init.call(that, source, path);

                that.template = template;
            },

            render: function(value) {
                var html;

                this.start(this.source);

                html = kendo.render(this.template, value);

                this.stop(this.source);

                return html;
            }
        });

        var Binder = Class.extend({
            init: function(element, bindings, options) {
                this.element = element;
                this.bindings = bindings;
                this.options = options;
            },

            bind: function(binding, attribute) {
                var that = this;

                binding = attribute ? binding[attribute] : binding;

                binding.bind(CHANGE, function(e) {
                    that.refresh(attribute || e);
                });

                that.refresh(attribute);
            },

            destroy: function() {
            }
        });

        var TypedBinder = Binder.extend({
            dataType: function() {
                var dataType = this.element.getAttribute("data-" + kendo.ns + "type") || this.element.type || "text";
                return dataType.toLowerCase();
            },

            parsedValue: function() {
                return this._parseValue(this.element.value, this.dataType());
            },

            _parseValue: function(value, dataType) {
                if (dataType == "date") {
                    value = kendo.parseDate(value, "yyyy-MM-dd");
                } else if (dataType == "datetime-local") {
                    value = kendo.parseDate(value, ["yyyy-MM-ddTHH:mm:ss", "yyyy-MM-ddTHH:mm"] );
                } else if (dataType == "number") {
                    value = kendo.parseFloat(value);
                } else if (dataType == "boolean") {
                    value = value.toLowerCase();
                    if (kendo.parseFloat(value) !== null) {
                        value = Boolean(kendo.parseFloat(value));
                    } else {
                        value = (value.toLowerCase() === "true");
                    }
                }
                return value;
            }
        });

        binders.attr = Binder.extend({
            refresh: function(key) {
                this.element.setAttribute(key, this.bindings.attr[key].get());
            }
        });

        binders.css = Binder.extend({
            init: function(element, bindings, options) {
                Binder.fn.init.call(this, element, bindings, options);
                this.classes = {};
            },
            refresh: function(className) {
                var element = $(this.element),
                    binding = this.bindings.css[className],
                    hasClass = this.classes[className] = binding.get();
                if (hasClass) {
                    element.addClass(className);
                } else {
                    element.removeClass(className);
                }
            }
        });

        binders.style = Binder.extend({
            refresh: function(key) {
                this.element.style[key] = this.bindings.style[key].get() || "";
            }
        });

        binders.enabled = Binder.extend({
            refresh: function() {
                if (this.bindings.enabled.get()) {
                    this.element.removeAttribute("disabled");
                } else {
                    this.element.setAttribute("disabled", "disabled");
                }
            }
        });

        binders.readonly = Binder.extend({
           refresh: function() {
                if (this.bindings.readonly.get()) {
                    this.element.setAttribute("readonly", "readonly");
                } else {
                    this.element.removeAttribute("readonly");
                }
           }
        });

        binders.disabled = Binder.extend({
            refresh: function() {
                if (this.bindings.disabled.get()) {
                    this.element.setAttribute("disabled", "disabled");
                } else {
                    this.element.removeAttribute("disabled");
                }
            }
        });

        binders.events = Binder.extend({
            init: function(element, bindings, options) {
                Binder.fn.init.call(this, element, bindings, options);
                this.handlers = {};
            },

            refresh: function(key) {
                var element = $(this.element),
                    binding = this.bindings.events[key],
                    handler = this.handlers[key];

                if (handler) {
                    element.off(key, handler);
                }

                handler = this.handlers[key] = binding.get();

                element.on(key, binding.source, handler);
            },

            destroy: function() {
                var element = $(this.element),
                    handler;

                for (handler in this.handlers) {
                    element.off(handler, this.handlers[handler]);
                }
            }
        });

        binders.text = Binder.extend({
            refresh: function() {
                var text = this.bindings.text.get();
                var dataFormat = this.element.getAttribute("data-" + kendo.ns + "format") || "";
                if (text == null) {
                    text = "";
                }

                $(this.element).text(kendo.toString(text, dataFormat));
            }
        });

        binders.visible = Binder.extend({
            refresh: function() {
                if (this.bindings.visible.get()) {
                    this.element.style.display = "";
                } else {
                    this.element.style.display = "none";
                }
            }
        });

        binders.invisible = Binder.extend({
            refresh: function() {
                if (!this.bindings.invisible.get()) {
                    this.element.style.display = "";
                } else {
                    this.element.style.display = "none";
                }
            }
      });

        binders.html = Binder.extend({
            refresh: function() {
                this.element.innerHTML = this.bindings.html.get();
            }
        });

        binders.value = TypedBinder.extend({
            init: function(element, bindings, options) {
                TypedBinder.fn.init.call(this, element, bindings, options);

                this._change = this.change.bind(this);
                this.eventName = options.valueUpdate || CHANGE;

                $(this.element).on(this.eventName, this._change);

                this._initChange = false;
            },

            change: function() {
                this._initChange = this.eventName != CHANGE;

                this.bindings[VALUE].set(this.parsedValue());

                this._initChange = false;
            },

            refresh: function() {
                if (!this._initChange) {
                    var value = this.bindings[VALUE].get();

                    if (value == null) {
                        value = "";
                    }

                    var type = this.dataType();

                    if (type == "date") {
                        value = kendo.toString(value, "yyyy-MM-dd");
                    } else if (type == "datetime-local") {
                        value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
                    }

                    this.element.value = value;
                }

                this._initChange = false;
            },

            destroy: function() {
                $(this.element).off(this.eventName, this._change);
            }
        });

        binders.source = Binder.extend({
            init: function(element, bindings, options) {
                Binder.fn.init.call(this, element, bindings, options);

                var source = this.bindings.source.get();

                if (source instanceof kendo.data.DataSource && options.autoBind !== false) {
                    source.fetch();
                }
            },

            refresh: function(e) {
                var that = this,
                    source = that.bindings.source.get();

                if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
                    e = e || {};

                    if (e.action == "add") {
                        that.add(e.index, e.items);
                    } else if (e.action == "remove") {
                        that.remove(e.index, e.items);
                    } else if (e.action != "itemchange") {
                        that.render();
                    }
                } else {
                    that.render();
                }
            },

            container: function() {
                var element = this.element;

                if (element.nodeName.toLowerCase() == "table") {
                    if (!element.tBodies[0]) {
                        element.appendChild(document.createElement("tbody"));
                    }
                    element = element.tBodies[0];
                }

                return element;
            },

            template: function() {
                var options = this.options,
                    template = options.template,
                    nodeName = this.container().nodeName.toLowerCase();

                if (!template) {
                    if (nodeName == "select") {
                        if (options.valueField || options.textField) {
                            template = function (data) {
                                var valueAttr = kendo.getter(options.valueField || options.textField)(data);
                                var innerText = kendo.getter(options.textField || options.valueField)(data);
                                return ("<option value=\"" + (encode(valueAttr)) + "\">" + (encode(innerText)) + "</option>");
                            };
                        } else {
                            template = function (data) { return ("<option>" + (encode(data)) + "</option>"); };
                        }
                    } else if (nodeName == "tbody") {
                        template = function (data) { return ("<tr><td>" + (encode(data)) + "</td></tr>"); };
                    } else if (nodeName == "ul" || nodeName == "ol") {
                        template = function (data) { return ("<li>" + (encode(data)) + "</li>"); };
                    } else {
                        template = function (data) { return ("" + (encode(data))); };
                    }
                    template = kendo.template(template);
                }

                return template;
            },

            add: function(index, items) {
                var element = this.container(),
                    parents,
                    idx,
                    length,
                    child,
                    clone = element.cloneNode(false),
                    reference = element.children[index];

                $(clone).html(kendo.render(this.template(), items));

                if (clone.children.length) {
                    parents = this.bindings.source._parents();

                    for (idx = 0, length = items.length; idx < length; idx++) {
                        child = clone.children[0];
                        element.insertBefore(child, reference || null);
                        bindElement(child, items[idx], this.options.roles, [items[idx]].concat(parents));
                    }
                }
            },

            remove: function(index, items) {
                var idx, element = this.container();

                for (idx = 0; idx < items.length; idx++) {
                    var child = element.children[index];
                    unbindElementTree(child, true);
                    if (child.parentNode == element) {
                        element.removeChild(child);
                    }
                }
            },

            render: function() {
                var source = this.bindings.source.get(),
                    parents,
                    idx,
                    length,
                    element = this.container(),
                    template = this.template();

                if (source == null) {
                    return;
                }

                if (source instanceof kendo.data.DataSource) {
                    source = source.view();
                }

                if (!(source instanceof ObservableArray) && toString.call(source) !== "[object Array]") {
                    source = [source];
                }

                if (this.bindings.template) {
                    unbindElementChildren(element, true);

                    $(element).html(this.bindings.template.render(source));

                    if (element.children.length) {
                        parents = this.bindings.source._parents();

                        for (idx = 0, length = source.length; idx < length; idx++) {
                            bindElement(element.children[idx], source[idx], this.options.roles, [source[idx]].concat(parents));
                        }
                    }
                } else {
                    $(element).html(kendo.render(template, source));
                }
            }
        });

        binders.input = {
            checked: TypedBinder.extend({
                init: function(element, bindings, options) {
                    TypedBinder.fn.init.call(this, element, bindings, options);
                    this._change = this.change.bind(this);

                    $(this.element).change(this._change);
                },

                change: function() {
                    var element = this.element;
                    var value = this.value();

                    if (element.type == "radio") {
                        value = this.parsedValue();
                        this.bindings[CHECKED].set(value);
                    } else if (element.type == "checkbox") {
                        var source = this.bindings[CHECKED].get();
                        var index;

                        if (source instanceof ObservableArray) {
                            value = this.parsedValue();
                            if (value instanceof Date) {
                                for (var i = 0; i < source.length; i++) {
                                    if (source[i] instanceof Date && +source[i] === +value) {
                                        index = i;
                                        break;
                                    }
                                }
                            } else {
                                index = source.indexOf(value);
                            }
                            if (index > -1) {
                                source.splice(index, 1);
                            } else {
                                source.push(value);
                            }
                        } else {
                            this.bindings[CHECKED].set(value);
                        }
                    }
                },

                refresh: function() {
                    var value = this.bindings[CHECKED].get(),
                        source = value,
                        type = this.dataType(),
                        element = this.element;

                    if (element.type == "checkbox") {
                        if (source instanceof ObservableArray) {
                            var index = -1;
                            value = this.parsedValue();
                            if (value instanceof Date) {
                                for (var i = 0; i < source.length; i++) {
                                    if (source[i] instanceof Date && +source[i] === +value) {
                                        index = i;
                                        break;
                                    }
                                }
                            } else {
                                index = source.indexOf(value);
                            }
                            element.checked = (index >= 0);
                        } else {
                            element.checked = source;
                        }
                    } else if (element.type == "radio") {
                        if (type == "date") {
                            value = kendo.toString(value, "yyyy-MM-dd");
                        } else if (type == "datetime-local") {
                            value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
                        }

                        if (value !== null && typeof(value) !== "undefined" && element.value === value.toString()) {
                            element.checked = true;
                        } else {
                            element.checked = false;
                        }
                    }
                },

                value: function() {
                    var element = this.element,
                        value = element.value;

                    if (element.type == "checkbox") {
                        value = element.checked;
                    }

                    return value;
                },
                destroy: function() {
                    $(this.element).off(CHANGE, this._change);
                }
            })
        };

        binders.select = {
            source: binders.source.extend({
                refresh: function(e) {
                    var that = this,
                        source = that.bindings.source.get();

                    if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
                        e = e || {};
                        if (e.action == "add") {
                            that.add(e.index, e.items);
                        } else if (e.action == "remove") {
                            that.remove(e.index, e.items);
                        } else if (e.action == "itemchange" || e.action === undefined$1) {
                            that.render();
                            if (that.bindings.value) {
                                if (that.bindings.value) {
                                    var val = retrievePrimitiveValues(that.bindings.value.get(), $(that.element).data("valueField"));
                                    if (val === null) {
                                        that.element.selectedIndex = -1;
                                    } else {
                                        that.element.value = val;
                                    }
                                }
                            }
                        }
                    } else {
                        that.render();
                    }
                }
            }),
            value: TypedBinder.extend({
                init: function(target, bindings, options) {
                    TypedBinder.fn.init.call(this, target, bindings, options);

                    this._change = this.change.bind(this);
                    $(this.element).change(this._change);
                },

                parsedValue: function() {
                    var dataType = this.dataType();
                    var values = [];
                    var value, option, idx, length;
                    for (idx = 0, length = this.element.options.length; idx < length; idx++) {
                        option = this.element.options[idx];

                        if (option.selected) {
                            value = option.attributes.value;

                            if (value && value.specified) {
                                value = option.value;
                            } else {
                                value = option.text;
                            }

                            values.push(this._parseValue(value, dataType));
                        }
                    }
                    return values;
                },

                change: function() {
                    var values = [],
                        element = this.element,
                        source,
                        field = this.options.valueField || this.options.textField,
                        valuePrimitive = this.options.valuePrimitive,
                        option,
                        valueIndex,
                        value,
                        idx,
                        length;

                    for (idx = 0, length = element.options.length; idx < length; idx++) {
                        option = element.options[idx];

                        if (option.selected) {
                            value = option.attributes.value;

                            if (value && value.specified) {
                                value = option.value;
                            } else {
                                value = option.text;
                            }

                            if (field) {
                                values.push(value);
                            } else {
                                values.push(this._parseValue(value, this.dataType()));
                            }

                        }
                    }

                    if (field) {
                        source = this.bindings.source.get();
                        if (source instanceof kendo.data.DataSource) {
                            source = source.view();
                        }

                        for (valueIndex = 0; valueIndex < values.length; valueIndex++) {
                            for (idx = 0, length = source.length; idx < length; idx++) {
                                var sourceValue = source[idx].get(field);
                                var match = (String(sourceValue) === values[valueIndex]);
                                if (match) {
                                    values[valueIndex] = source[idx];
                                    break;
                                }
                            }
                        }
                    }

                    value = this.bindings[VALUE].get();
                    if (value instanceof ObservableArray) {
                        value.splice.apply(value, [0, value.length].concat(values));
                    } else if (!valuePrimitive && (value instanceof ObservableObject || value === null || value === undefined$1 || !field)) {
                        this.bindings[VALUE].set(values[0]);
                    } else {
                        this.bindings[VALUE].set(values[0].get(field));
                    }
                },
                refresh: function() {
                    var optionIndex,
                        element = this.element,
                        options = element.options,
                        value = this.bindings[VALUE].get(),
                        values = value,
                        field = this.options.valueField || this.options.textField,
                        found = false,
                        type = this.dataType(),
                        optionValue;

                    if (!(values instanceof ObservableArray)) {
                        values = new ObservableArray([value]);
                    }

                    element.selectedIndex = -1;

                    for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
                        value = values[valueIndex];


                        if (field && value instanceof ObservableObject) {
                            value = value.get(field);
                        }

                        if (type == "date") {
                            value = kendo.toString(values[valueIndex], "yyyy-MM-dd");
                        } else if (type == "datetime-local") {
                            value = kendo.toString(values[valueIndex], "yyyy-MM-ddTHH:mm:ss");
                        }

                        for (optionIndex = 0; optionIndex < options.length; optionIndex++) {
                            optionValue = options[optionIndex].value;

                            if (optionValue === "" && value !== "") {
                                optionValue = options[optionIndex].text;
                            }

                            if (value != null && optionValue == value.toString()) {
                                options[optionIndex].selected = true;
                                found = true;
                            }
                        }
                    }
                },
                destroy: function() {
                    $(this.element).off(CHANGE, this._change);
                }
            })
        };

        function dataSourceBinding(bindingName, fieldName, setter) {
            return Binder.extend({
                init: function(widget, bindings, options) {
                    var that = this;

                    Binder.fn.init.call(that, widget.element[0], bindings, options);

                    that.widget = widget;
                    that._dataBinding = that.dataBinding.bind(that);
                    that._dataBound = that.dataBound.bind(that);
                    that._itemChange = that.itemChange.bind(that);
                },

                itemChange: function(e) {
                    bindElement(e.item[0], e.data, this._ns(e.ns), [e.data].concat(this.bindings[bindingName]._parents()));
                },

                dataBinding: function(e) {
                    var idx,
                        length,
                        widget = this.widget,
                        items = e.removedItems || widget.items();

                    for (idx = 0, length = items.length; idx < length; idx++) {
                        unbindElementTree(items[idx], false);
                    }
                },

                _ns: function(ns) {
                    ns = ns || kendo.ui;
                    var all = [ kendo.ui, kendo.dataviz.ui, kendo.mobile.ui ];
                    all.splice($.inArray(ns, all), 1);
                    all.unshift(ns);

                    return kendo.rolesFromNamespaces(all);
                },

                dataBound: function(e) {
                    var idx,
                        length,
                        widget = this.widget,
                        items = e.addedItems || widget.items(),
                        dataSource = widget[fieldName],
                        view,
                        parents,
                        hds = kendo.data.HierarchicalDataSource;

                    if (hds && dataSource instanceof hds) {
                        // suppress binding of HDS items, because calling view() on root
                        // will return only root items, and widget.items() returns all items
                        return;
                    }

                    if (items.length) {
                        view = e.addedDataItems || dataSource.flatView();
                        parents = this.bindings[bindingName]._parents();

                        for (idx = 0, length = view.length; idx < length; idx++) {
                            if (items[idx]) {
                                bindElement(items[idx], view[idx], this._ns(e.ns), [view[idx]].concat(parents));
                            }
                        }
                    }
                },

                refresh: function(e) {
                    var that = this,
                        source,
                        widget = that.widget,
                        select, multiselect, dropdowntree;

                    e = e || {};

                    if (!e.action) {
                        that.destroy();

                        widget.bind("dataBinding", that._dataBinding);
                        widget.bind("dataBound", that._dataBound);
                        widget.bind("itemChange", that._itemChange);

                        source = that.bindings[bindingName].get();

                        if (widget[fieldName] instanceof kendo.data.DataSource && widget[fieldName] != source) {
                            if (source instanceof kendo.data.DataSource) {
                                widget[setter](source);
                            } else if (source && source._dataSource) {
                                widget[setter](source._dataSource);
                            } else {
                                select = kendo.ui.Select && widget instanceof kendo.ui.Select;
                                multiselect = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;
                                dropdowntree = kendo.ui.DropDownTree && widget instanceof kendo.ui.DropDownTree;

                                if (!dropdowntree) {
                                    widget[fieldName].data(source);
                                } else {
                                    widget.treeview[fieldName].data(source);
                                }

                                if (that.bindings.value && (select || multiselect)) {
                                    widget.value(retrievePrimitiveValues(that.bindings.value.get(), widget.options.dataValueField));
                                }
                            }
                        }
                    }
                },

                destroy: function() {
                    var widget = this.widget;

                    widget.unbind("dataBinding", this._dataBinding);
                    widget.unbind("dataBound", this._dataBound);
                    widget.unbind("itemChange", this._itemChange);
                }
            });
        }

        binders.widget = {
            events: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);
                    this.widget = widget;
                    this.handlers = {};
                },

                refresh: function(key) {
                    var binding = this.bindings.events[key],
                        handler = this.handlers[key];

                    if (handler) {
                        this.widget.unbind(key, handler);
                    }

                    handler = binding.get();

                    this.handlers[key] = function(e) {
                        e.data = binding.source;

                        handler(e);

                        if (e.data === binding.source) {
                            delete e.data;
                        }
                    };

                    this.widget.bind(key, this.handlers[key]);
                },

                destroy: function() {
                    var handler;

                    for (handler in this.handlers) {
                        this.widget.unbind(handler, this.handlers[handler]);
                    }
                }
            }),

            checked: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                    this._change = this.change.bind(this);
                    this.widget.bind(CHANGE, this._change);
                },
                change: function() {
                    this.bindings[CHECKED].set(this.value());
                },

                refresh: function() {
                    var val = this.bindings[CHECKED].get();

                    if (this.element.type === "radio") {
                        if (val !== undefined$1) {
                            this.widget.check(val.toString() === this.value());
                        } else {
                            this.widget.check(false);
                        }
                    } else {
                        this.widget.check(val === true);
                    }
                },

                value: function() {
                    var element = this.element,
                        value = element.value;

                    if (value == "on" || value == "off" || this.element.type == "checkbox") {
                        value = element.checked;
                    }

                    return value;
                },

                destroy: function() {
                    this.widget.unbind(CHANGE, this._change);
                }
            }),

            start: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);
                    this._change = this.change.bind(this);
                    this.widget = widget;
                    this.widget.bind(CHANGE, this._change);
                },

                change: function() {
                    this.bindings.start.set(this.widget.range().start);
                },

                refresh: function() {
                    var that = this;
                    var start = this.bindings.start.get();
                    var end = that.widget._range ? that.widget._range.end : null;
                    this.widget.range({ start: start, end: end });
                },

                destroy: function() {
                    this.widget.unbind(CHANGE, this._change);
                }
            }),

            end: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);
                    this._change = this.change.bind(this);
                    this.widget = widget;
                    this.widget.bind(CHANGE, this._change);
                },

                change: function() {
                    this.bindings.end.set(this.widget.range().end);
                },

                refresh: function() {
                    var that = this;
                    var end = this.bindings.end.get();
                    var start = that.widget._range ? that.widget._range.start : null;
                    this.widget.range({ start: start, end: end });
                },

                destroy: function() {
                    this.widget.unbind(CHANGE, this._change);
                }
            }),

            visible: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                },

                refresh: function() {
                    var visible = this.bindings.visible.get();
                    this.widget.wrapper[0].style.display = visible ? "" : "none";
                }
            }),

            invisible: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                },

                refresh: function() {
                    var invisible = this.bindings.invisible.get();
                    this.widget.wrapper[0].style.display = invisible ? "none" : "";
                }
            }),

            floatingLabel: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    if (!widget.floatingLabel) {
                        return;
                    }

                    widget.floatingLabel.refresh();
                }
            }),

            enabled: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                },

                refresh: function() {
                    if (this.widget.enable) {
                        this.widget.enable(this.bindings.enabled.get());
                    }
                }
            }),

            disabled: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                },

                refresh: function() {
                    if (this.widget.enable) {
                        this.widget.enable(!this.bindings.disabled.get());
                    }
                }
            }),

            source: dataSourceBinding("source", "dataSource", "setDataSource"),

            value: Binder.extend({
                init: function(widget, bindings, options) {
                    Binder.fn.init.call(this, widget.element[0], bindings, options);

                    this.widget = widget;
                    this._change = this.change.bind(this);
                    this.widget.first(CHANGE, this._change);

                    var value = this.bindings.value.get();

                    this._valueIsObservableObject = !options.valuePrimitive && (value == null || value instanceof ObservableObject);
                    this._valueIsObservableArray = value instanceof ObservableArray;
                    this._initChange = false;
                },

                _source: function() {
                    var source;

                    if (this.widget.dataItem) {
                        source = this.widget.dataItem();
                        if (source && source instanceof ObservableObject) {
                            return [source];
                        }
                    }

                    if (this.bindings.source) {
                        source = this.bindings.source.get();
                    }

                    if (!source || source instanceof kendo.data.DataSource) {
                        source = this.widget.dataSource.flatView();
                    }

                    return source;
                },

                change: function() {
                    var value = this.widget.value(),
                        field = this.options.dataValueField || this.options.dataTextField,
                        isArray = toString.call(value) === "[object Array]",
                        isObservableObject = this._valueIsObservableObject,
                        valueIndex, valueLength, values = [],
                        sourceItem, sourceValue,
                        idx, length, source;

                    this._initChange = true;

                    if (field) {

                        if (value === "" && (isObservableObject || this.options.valuePrimitive)) {
                            value = null;
                        } else {
                            source = this._source();

                            if (isArray) {
                                valueLength = value.length;
                                values = value.slice(0);
                            }

                            for (idx = 0, length = source.length; idx < length; idx++) {
                                sourceItem = source[idx];
                                sourceValue = sourceItem.get(field);

                                if (isArray) {
                                    for (valueIndex = 0; valueIndex < valueLength; valueIndex++) {
                                        if (sourceValue == values[valueIndex]) {
                                            values[valueIndex] = sourceItem;
                                            break;
                                        }
                                    }
                                } else if (sourceValue == value) {
                                    value = isObservableObject ? sourceItem : sourceValue;
                                    break;
                                }
                            }

                            if (values[0]) {
                                if (this._valueIsObservableArray) {
                                    value = values;
                                } else if (isObservableObject || !field) {
                                    value = values[0];
                                } else {
                                    value = values[0].get(field);
                                }
                            }
                        }
                    }

                    this.bindings.value.set(value);
                    this._initChange = false;
                },

                refresh: function() {
                    if (!this._initChange) {
                        var widget = this.widget;
                        var options = widget.options;
                        var textField = options.dataTextField;
                        var valueField = options.dataValueField || textField;
                        var value = this.bindings.value.get();
                        var text = options.text || "";
                        var idx = 0, length;
                        var values = [];

                        if (value === undefined$1) {
                            value = null;
                        }

                        if (valueField) {
                            if (value instanceof ObservableArray) {
                                for (length = value.length; idx < length; idx++) {
                                    values[idx] = value[idx].get(valueField);
                                }
                                value = values;
                            } else if (value instanceof ObservableObject) {
                                text = value.get(textField);
                                value = value.get(valueField);
                            }
                        }

                        if (options.autoBind === false && !options.cascadeFrom && widget.listView && !widget.listView.bound()) {
                            if (textField === valueField && !text) {
                                text = value;
                            }

                            if (!text && (value || value === 0) && options.valuePrimitive) {
                                widget.value(value);
                            } else {
                                widget._preselect(value, text);
                            }
                        } else {
                            widget.value(value);
                        }
                    }

                    this._initChange = false;
                },

                destroy: function() {
                    this.widget.unbind(CHANGE, this._change);
                }
            }),
            dropdowntree: {
                value: Binder.extend({
                    init: function(widget, bindings, options) {
                        Binder.fn.init.call(this, widget.element[0], bindings, options);

                        this.widget = widget;
                        this._change = this.change.bind(this);
                        this.widget.first(CHANGE, this._change);
                        this._initChange = false;
                    },

                    change: function() {
                        var that = this,
                            oldValues = that.bindings[VALUE].get(),
                            valuePrimitive = that.options.valuePrimitive,
                            selectedNode = that.widget.treeview.select(),
                            nonPrimitiveValues = that.widget._isMultipleSelection() ? that.widget._getAllChecked() : (that.widget.treeview.dataItem(selectedNode) || that.widget.value()),
                            newValues = (valuePrimitive || that.widget.options.autoBind === false) ? that.widget.value() : nonPrimitiveValues;

                        var field = this.options.dataValueField || this.options.dataTextField;

                        newValues = newValues.slice ? newValues.slice(0) : newValues;

                        that._initChange = true;

                        if (oldValues instanceof ObservableArray) {
                            var remove = [];
                            var newLength = newValues.length;
                            var i = 0, j = 0;
                            var old = oldValues[i];
                            var same = false;
                            var removeIndex;
                            var newValue;
                            var found;

                            while (old !== undefined$1) {
                                found = false;
                                for (j = 0; j < newLength; j++) {
                                    if (valuePrimitive) {
                                        same = newValues[j] == old;
                                    } else {
                                        newValue = newValues[j];

                                        newValue = newValue.get ? newValue.get(field) : newValue;
                                        same = newValue == (old.get ? old.get(field) : old);
                                    }

                                    if (same) {
                                        newValues.splice(j, 1);
                                        newLength -= 1;
                                        found = true;
                                        break;
                                    }
                                }

                                if (!found) {
                                    remove.push(old);
                                    arraySplice(oldValues, i, 1);
                                    removeIndex = i;
                                } else {
                                    i += 1;
                                }

                                old = oldValues[i];
                            }

                            arraySplice(oldValues, oldValues.length, 0, newValues);

                            if (remove.length) {
                                oldValues.trigger("change", {
                                    action: "remove",
                                    items: remove,
                                    index: removeIndex
                                });
                            }

                            if (newValues.length) {
                                oldValues.trigger("change", {
                                    action: "add",
                                    items: newValues,
                                    index: oldValues.length - 1
                                });
                            }
                        } else {
                            that.bindings[VALUE].set(newValues);
                        }

                        that._initChange = false;
                    },

                    refresh: function() {
                        if (!this._initChange) {
                            var options = this.options,
                                widget = this.widget,
                                field = options.dataValueField || options.dataTextField,
                                value = this.bindings.value.get(),
                                data = value,
                                idx = 0, length,
                                values = [],
                                selectedValue;

                            if (field) {
                                if (value instanceof ObservableArray) {
                                    for (length = value.length; idx < length; idx++) {
                                        selectedValue = value[idx];
                                        values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;
                                    }
                                    value = values;
                                } else if (value instanceof ObservableObject) {
                                    value = value.get(field);
                                }
                            }
                            if (options.autoBind === false && options.valuePrimitive !== true) {
                                widget._preselect(data, value);
                            } else {
                                widget.value(value);
                            }
                       }
                    },

                    destroy: function() {
                        this.widget.unbind(CHANGE, this._change);
                    }
                })
            },
            gantt: {
                dependencies: dataSourceBinding("dependencies", "dependencies", "setDependenciesDataSource")
            },

            multiselect: {
                value: Binder.extend({
                    init: function(widget, bindings, options) {
                        Binder.fn.init.call(this, widget.element[0], bindings, options);

                        this.widget = widget;
                        this._change = this.change.bind(this);
                        this.widget.first(CHANGE, this._change);
                        this._initChange = false;
                    },

                    change: function() {
                        var that = this,
                            oldValues = that.bindings[VALUE].get(),
                            valuePrimitive = that.options.valuePrimitive,
                            newValues = valuePrimitive ? that.widget.value() : that.widget.dataItems();

                        var field = this.options.dataValueField || this.options.dataTextField;

                        newValues = newValues.slice(0);

                        that._initChange = true;

                        if (oldValues instanceof ObservableArray) {
                            var remove = [];

                            var newLength = newValues.length;

                            var i = 0, j = 0;
                            var old = oldValues[i];
                            var same = false;
                            var removeIndex;
                            var newValue;
                            var found;

                            while (old !== undefined$1) {
                                found = false;
                                for (j = 0; j < newLength; j++) {
                                    if (valuePrimitive) {
                                        same = newValues[j] == old;
                                    } else {
                                        newValue = newValues[j];

                                        newValue = newValue.get ? newValue.get(field) : newValue;
                                        same = newValue == (old.get ? old.get(field) : old);
                                    }

                                    if (same) {
                                        newValues.splice(j, 1);
                                        newLength -= 1;
                                        found = true;
                                        break;
                                    }
                                }

                                if (!found) {
                                    remove.push(old);
                                    arraySplice(oldValues, i, 1);
                                    removeIndex = i;
                                } else {
                                    i += 1;
                                }

                                old = oldValues[i];
                            }

                            arraySplice(oldValues, oldValues.length, 0, newValues);

                            if (remove.length) {
                                oldValues.trigger("change", {
                                    action: "remove",
                                    items: remove,
                                    index: removeIndex
                                });
                            }

                            if (newValues.length) {
                                oldValues.trigger("change", {
                                    action: "add",
                                    items: newValues,
                                    index: oldValues.length - 1
                                });
                            }
                        } else {
                            that.bindings[VALUE].set(newValues);
                        }

                        that._initChange = false;
                    },

                    refresh: function() {
                        if (!this._initChange) {
                            var options = this.options,
                                widget = this.widget,
                                field = options.dataValueField || options.dataTextField,
                                value = this.bindings.value.get(),
                                data = value,
                                idx = 0, length,
                                values = [],
                                selectedValue;

                            if (value === undefined$1) {
                                value = null;
                            }

                            if (field) {
                                if (value instanceof ObservableArray) {
                                    for (length = value.length; idx < length; idx++) {
                                        selectedValue = value[idx];
                                        values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;
                                    }
                                    value = values;
                                } else if (value instanceof ObservableObject) {
                                    value = value.get(field);
                                }
                            }

                            if (options.autoBind === false && options.valuePrimitive !== true && !widget._isBound()) {
                                widget._preselect(data, value);
                            } else {
                                widget.value(value);
                            }
                        }
                    },

                    destroy: function() {
                        this.widget.unbind(CHANGE, this._change);
                    }

                })
            },
            scheduler: {
                source: dataSourceBinding("source", "dataSource", "setDataSource").extend({
                    dataBound: function(e) {
                        var idx;
                        var length;
                        var widget = this.widget;
                        var elements = e.addedItems || widget.items();
                        var data, parents;

                        if (elements.length) {
                            data = e.addedDataItems || widget.dataItems();
                            parents = this.bindings.source._parents();

                            for (idx = 0, length = data.length; idx < length; idx++) {
                                bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));
                            }
                        }
                    }
                })
            },

            grid: {
                source: dataSourceBinding("source", "dataSource", "setDataSource").extend({
                    dataBound: function(e) {
                        var idx,
                        length,
                        widget = this.widget,
                        elements = e.addedItems || widget.items(),
                        parents,
                        data;

                        if (elements.length) {
                            data = e.addedDataItems || widget.dataItems();
                            parents = this.bindings.source._parents();

                            for (idx = 0, length = data.length; idx < length; idx++) {
                                bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));
                            }
                        }
                    }
                })
            },

            badge: {
                text: Binder.extend({
                    init: function(widget, bindings, options) {
                        Binder.fn.init.call(this, widget.element[0], bindings, options);

                        this.widget = widget;
                    },
                    refresh: function() {
                        var text = this.bindings.text.get();

                        if (text == null) {
                            text = "";
                        }
                        this.widget.text(text);
                    }
                })
            }
        };

        var arraySplice = function(arr, idx, remove, add) {
            add = add || [];
            remove = remove || 0;

            var addLength = add.length;
            var oldLength = arr.length;

            var shifted = [].slice.call(arr, idx + remove);
            var shiftedLength = shifted.length;
            var index;

            if (addLength) {
                addLength = idx + addLength;
                index = 0;

                for (; idx < addLength; idx++) {
                    arr[idx] = add[index];
                    index++;
                }

                arr.length = addLength;
            } else if (remove) {
                arr.length = idx;

                remove += idx;
                while (idx < remove) {
                    delete arr[--remove];
                }
            }

            if (shiftedLength) {
                shiftedLength = idx + shiftedLength;
                index = 0;

                for (; idx < shiftedLength; idx++) {
                    arr[idx] = shifted[index];
                    index++;
                }

                arr.length = shiftedLength;
            }

            idx = arr.length;

            while (idx < oldLength) {
                delete arr[idx];
                idx++;
            }
        };

        var BindingTarget = Class.extend( {
            init: function(target, options) {
                this.target = target;
                this.options = options;
                this.toDestroy = [];
            },

            bind: function(bindings) {
                var key,
                    hasValue,
                    hasSource,
                    hasEvents,
                    hasChecked,
                    hasCss,
                    widgetBinding = this instanceof WidgetBindingTarget,
                    specificBinders = this.binders();

                for (key in bindings) {
                    if (key == VALUE) {
                        hasValue = true;
                    } else if (key == SOURCE) {
                        hasSource = true;
                    } else if (key == EVENTS && !widgetBinding) {
                        hasEvents = true;
                    } else if (key == CHECKED) {
                        hasChecked = true;
                    } else if (key == CSS) {
                        hasCss = true;
                    } else {
                        this.applyBinding(key, bindings, specificBinders);
                    }
                }
                if (hasSource) {
                    this.applyBinding(SOURCE, bindings, specificBinders);
                }

                if (hasValue) {
                    this.applyBinding(VALUE, bindings, specificBinders);
                }

                if (hasChecked) {
                    this.applyBinding(CHECKED, bindings, specificBinders);
                }

                if (hasEvents && !widgetBinding) {
                    this.applyBinding(EVENTS, bindings, specificBinders);
                }

                if (hasCss && !widgetBinding) {
                    this.applyBinding(CSS, bindings, specificBinders);
                }

                if (widgetBinding && this.target && this.target.floatingLabel) {
                    this.applyBinding("floatingLabel", bindings, specificBinders);
                }
            },

            binders: function() {
                return binders[this.target.nodeName.toLowerCase()] || {};
            },

            applyBinding: function(name, bindings, specificBinders) {
                var binder = specificBinders[name] || binders[name],
                    toDestroy = this.toDestroy,
                    attribute,
                    binding = bindings[name];

                if (binder) {
                    binder = new binder(this.target, bindings, this.options);

                    toDestroy.push(binder);

                    if (binding instanceof Binding) {
                        binder.bind(binding);
                        toDestroy.push(binding);
                    } else {
                        for (attribute in binding) {
                            binder.bind(binding, attribute);
                            toDestroy.push(binding[attribute]);
                        }
                    }
                } else if (name !== "template") {
                    throw new Error("The " + name + " binding is not supported by the " + this.target.nodeName.toLowerCase() + " element");
                }
            },

            destroy: function() {
                var idx,
                    length,
                    toDestroy = this.toDestroy;

                for (idx = 0, length = toDestroy.length; idx < length; idx++) {
                    toDestroy[idx].destroy();
                }
            }
        });

        var WidgetBindingTarget = BindingTarget.extend( {
            binders: function() {
                return binders.widget[this.target.options.name.toLowerCase()] || {};
            },

            applyBinding: function(name, bindings, specificBinders) {
                var binder = specificBinders[name] || binders.widget[name],
                    toDestroy = this.toDestroy,
                    attribute,
                    binding = bindings[name];

                if (binder) {
                    binder = new binder(this.target, bindings, this.target.options);

                    toDestroy.push(binder);


                    if (binding instanceof Binding) {
                        binder.bind(binding);
                        toDestroy.push(binding);
                    } else {
                        for (attribute in binding) {
                            binder.bind(binding, attribute);
                            toDestroy.push(binding[attribute]);
                        }
                    }
                } else {
                    throw new Error("The " + name + " binding is not supported by the " + this.target.options.name + " widget");
                }
            }
        });

        function bindingTargetForRole(element, roles) {
            var widget = kendo.initWidget(element, {}, roles);

            if (widget) {
                return new WidgetBindingTarget(widget);
            }
        }

        var keyValueRegExp = /[A-Za-z0-9_\-]+:(\{([^}]*)\}|[^,}]+)/g,
            whiteSpaceRegExp = /\s/g;

        function parseBindings(bind) {
            var result = {},
                idx,
                length,
                token,
                colonIndex,
                key,
                value,
                tokens;

            tokens = bind.match(keyValueRegExp);

            for (idx = 0, length = tokens.length; idx < length; idx++) {
                token = tokens[idx];
                colonIndex = token.indexOf(":");

                key = token.substring(0, colonIndex);
                value = token.substring(colonIndex + 1);

                if (value.charAt(0) == "{") {
                    value = parseBindings(value);
                }

                result[key] = value;
            }

            return result;
        }

        function createBindings(bindings, source, type) {
            var binding,
                result = {};

            for (binding in bindings) {
                result[binding] = new type(source, bindings[binding]);
            }

            return result;
        }

        function bindElement(element, source, roles, parents) {

            if (!element || element.getAttribute("data-" + kendo.ns + "stop")) {
                return;
            }

            var role = element.getAttribute("data-" + kendo.ns + "role"),
                idx,
                bind = element.getAttribute("data-" + kendo.ns + "bind"),
                childrenCopy = [],
                deep = true,
                bindings,
                options = {},
                target;

            parents = parents || [source];

            if (role || bind) {
                unbindElement(element, false);
            }

            if (role) {
                target = bindingTargetForRole(element, roles);
            }

            if (bind) {
                bind = parseBindings(bind.replace(whiteSpaceRegExp, ""));

                if (!target) {
                    options = kendo.parseOptions(element, { textField: "", valueField: "", template: "", valueUpdate: CHANGE, valuePrimitive: false, autoBind: true }, source);
                    options.roles = roles;
                    target = new BindingTarget(element, options);
                }

                target.source = source;

                bindings = createBindings(bind, parents, Binding);

                if (options.template) {
                    bindings.template = new TemplateBinding(parents, "", options.template);
                }

                if (bindings.click) {
                    bind.events = bind.events || {};
                    bind.events.click = bind.click;
                    bindings.click.destroy();
                    delete bindings.click;
                }

                if (bindings.source) {
                    deep = false;
                }

                if (bind.attr) {
                    bindings.attr = createBindings(bind.attr, parents, Binding);
                }

                if (bind.style) {
                    bindings.style = createBindings(bind.style, parents, Binding);
                }

                if (bind.events) {
                    bindings.events = createBindings(bind.events, parents, EventBinding);
                }

                if (bind.css) {
                    bindings.css = createBindings(bind.css, parents, Binding);
                }

                target.bind(bindings);
            }

            if (target) {
                element.kendoBindingTarget = target;
            }

            var children = element.children;
            if (deep && children && !element.getAttribute("data-" + kendo.ns + "stop")) {
                // https://github.com/telerik/kendo/issues/1240 for the weirdness.
                for (idx = 0; idx < children.length; idx++) {
                    childrenCopy[idx] = children[idx];
                }

                for (idx = 0; idx < childrenCopy.length; idx++) {
                    bindElement(childrenCopy[idx], source, roles, parents);
                }
            }
        }

        function bind(dom, object) {
            var idx,
                length,
                node,
                roles = kendo.rolesFromNamespaces([].slice.call(arguments, 2));

            object = kendo.observable(object);
            dom = $(dom);

            for (idx = 0, length = dom.length; idx < length; idx++) {
                node = dom[idx];
                if (node.nodeType === 1) {
                    bindElement(node, object, roles);
                }
            }
        }

        function unbindElement(element, destroyWidget) {
            var bindingTarget = element.kendoBindingTarget;

            if (bindingTarget) {
                bindingTarget.destroy();

                if (deleteExpando) {
                    delete element.kendoBindingTarget;
                } else if (element.removeAttribute) {
                    element.removeAttribute("kendoBindingTarget");
                } else {
                    element.kendoBindingTarget = null;
                }
            }

            if (destroyWidget) {
                var widget = kendo.widgetInstance($(element));
                if (widget && typeof widget.destroy === FUNCTION) {
                    widget.destroy();
                }
            }
        }

        function unbindElementTree(element, destroyWidgets) {
            unbindElement(element, destroyWidgets);

            unbindElementChildren(element, destroyWidgets);
        }

        function unbindElementChildren(element, destroyWidgets) {
            var children = element.children;

            if (children) {
                for (var idx = 0, length = children.length; idx < length; idx++) {
                    unbindElementTree(children[idx], destroyWidgets);
                }
            }
        }

        function unbind(dom) {
            var idx, length;

            dom = $(dom);

            for (idx = 0, length = dom.length; idx < length; idx++ ) {
                unbindElementTree(dom[idx], false);
            }
        }

        function notify(widget, namespace) {
            var element = widget.element,
                bindingTarget = element[0].kendoBindingTarget;

            if (bindingTarget) {
                bind(element, bindingTarget.source, namespace);
            }
        }

        function retrievePrimitiveValues(value, valueField) {
            var values = [];
            var idx = 0;
            var length;
            var item;

            if (!valueField) {
                return value;
            }

            if (value instanceof ObservableArray) {
                for (length = value.length; idx < length; idx++) {
                    item = value[idx];
                    values[idx] = item.get ? item.get(valueField) : item[valueField];
                }
                value = values;
            } else if (value instanceof ObservableObject) {
                value = value.get(valueField);
            }

            return value;
        }

        kendo.unbind = unbind;
        kendo.bind = bind;
        kendo.data.binders = binders;
        kendo.data.Binder = Binder;
        kendo.notify = notify;

        kendo.observable = function(object) {
            if (!(object instanceof ObservableObject)) {
                object = new ObservableObject(object);
            }

            return object;
        };

        kendo.observableHierarchy = function(array) {
            var dataSource = kendo.data.HierarchicalDataSource.create(array);

            function recursiveRead(data) {
                var i, children;

                for (i = 0; i < data.length; i++) {
                    data[i]._initChildren();

                    children = data[i].children;

                    children.fetch();

                    data[i].items = children.data();

                    recursiveRead(data[i].items);
                }
            }

            dataSource.fetch();

            recursiveRead(dataSource.data());

            dataSource._data._dataSource = dataSource;

            return dataSource._data;
        };

    })(window.kendo.jQuery);
    var kendo$U = kendo;

    var __meta__$Z = {
        id: "fx",
        name: "Effects",
        category: "framework",
        description: "Required for animation effects in all Kendo UI widgets.",
        depends: [ "core" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            fx = kendo.effects,
            each = $.each,
            extend = $.extend,
            support = kendo.support,
            browser = support.browser,
            transforms = support.transforms,
            transitions = support.transitions,
            scaleProperties = { scale: 0, scalex: 0, scaley: 0, scale3d: 0 },
            translateProperties = { translate: 0, translatex: 0, translatey: 0, translate3d: 0 },
            hasZoom = (typeof document.documentElement.style.zoom !== "undefined") && !transforms,
            matrix3dRegExp = /matrix3?d?\s*\(.*,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?/i,
            cssParamsRegExp = /^(-?[\d\.\-]+)?[\w\s]*,?\s*(-?[\d\.\-]+)?[\w\s]*/i,
            translateXRegExp = /translatex?$/i,
            oldEffectsRegExp = /(zoom|fade|expand)(\w+)/,
            singleEffectRegExp = /(zoom|fade|expand)/,
            unitRegExp = /[xy]$/i,
            transformProps = ["perspective", "rotate", "rotatex", "rotatey", "rotatez", "rotate3d", "scale", "scalex", "scaley", "scalez", "scale3d", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "translatez", "translate3d", "matrix", "matrix3d"],
            transform2d = ["rotate", "scale", "scalex", "scaley", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "matrix"],
            transform2units = { "rotate": "deg", scale: "", skew: "px", translate: "px" },
            cssPrefix = transforms.css,
            round = Math.round,
            BLANK = "",
            PX = "px",
            NONE = "none",
            AUTO = "auto",
            WIDTH = "width",
            HEIGHT = "height",
            HIDDEN = "hidden",
            ORIGIN = "origin",
            ABORT_ID = "abortId",
            OVERFLOW = "overflow",
            TRANSLATE = "translate",
            POSITION = "position",
            COMPLETE_CALLBACK = "completeCallback",
            TRANSITION = cssPrefix + "transition",
            TRANSFORM = cssPrefix + "transform",
            BACKFACE = cssPrefix + "backface-visibility",
            PERSPECTIVE = cssPrefix + "perspective",
            DEFAULT_PERSPECTIVE = "1500px",
            TRANSFORM_PERSPECTIVE = "perspective(" + DEFAULT_PERSPECTIVE + ")",
            directions = {
                left: {
                    reverse: "right",
                    property: "left",
                    transition: "translatex",
                    vertical: false,
                    modifier: -1
                },
                right: {
                    reverse: "left",
                    property: "left",
                    transition: "translatex",
                    vertical: false,
                    modifier: 1
                },
                down: {
                    reverse: "up",
                    property: "top",
                    transition: "translatey",
                    vertical: true,
                    modifier: 1
                },
                up: {
                    reverse: "down",
                    property: "top",
                    transition: "translatey",
                    vertical: true,
                    modifier: -1
                },
                top: {
                    reverse: "bottom"
                },
                bottom: {
                    reverse: "top"
                },
                "in": {
                    reverse: "out",
                    modifier: -1
                },
                out: {
                    reverse: "in",
                    modifier: 1
                },

                vertical: {
                    reverse: "vertical"
                },

                horizontal: {
                    reverse: "horizontal"
                }
            };

        kendo.directions = directions;

        extend($.fn, {
            kendoStop: function(clearQueue, gotoEnd) {
                if (transitions) {
                    return fx.stopQueue(this, clearQueue || false, gotoEnd || false);
                } else {
                    return this.stop(clearQueue, gotoEnd);
                }
            }
        });

        /* jQuery support for all transform animations (FF 3.5/3.6, Opera 10.x, IE9 */

        if (transforms && !transitions) {
            each(transform2d, function(idx, value) {
                $.fn[value] = function(val) {
                    if (typeof val == "undefined") {
                        return animationProperty(this, value);
                    } else {
                        var that = $(this)[0],
                            transformValue = value + "(" + val + transform2units[value.replace(unitRegExp, "")] + ")";

                        if (that.style.cssText.indexOf(TRANSFORM) == -1) {
                            $(this).css(TRANSFORM, transformValue);
                        } else {
                            that.style.cssText = that.style.cssText.replace(new RegExp(value + "\\(.*?\\)", "i"), transformValue);
                        }
                    }
                    return this;
                };

                $.fx.step[value] = function(fx) {
                    $(fx.elem)[value](fx.now);
                };
            });

            var curProxy = $.fx.prototype.cur;
            $.fx.prototype.cur = function() {
                if (transform2d.indexOf(this.prop) != -1) {
                    return parseFloat($(this.elem)[this.prop]());
                }

                return curProxy.apply(this, arguments);
            };
        }

        kendo.toggleClass = function(element, classes, options, add) {
            if (classes) {
                classes = classes.split(" ");

                if (transitions) {
                    options = extend({
                        exclusive: "all",
                        duration: 400,
                        ease: "ease-out"
                    }, options);

                    element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease);
                    setTimeout(function() {
                        element.css(TRANSITION, "").css(HEIGHT);
                    }, options.duration); // TODO: this should fire a kendoAnimate session instead.
                }

                each(classes, function(idx, value) {
                    element.toggleClass(value, add);
                });
            }

            return element;
        };

        kendo.parseEffects = function(input, mirror) {
            var effects = {};

            if (typeof input === "string") {
                each(input.split(" "), function(idx, value) {
                    var redirectedEffect = !singleEffectRegExp.test(value),
                        resolved = value.replace(oldEffectsRegExp, function(match, $1, $2) {
                            return $1 + ":" + $2.toLowerCase();
                        }), // Support for old zoomIn/fadeOut style, now deprecated.
                        effect = resolved.split(":"),
                        direction = effect[1],
                        effectBody = {};

                    if (effect.length > 1) {
                        effectBody.direction = (mirror && redirectedEffect ? directions[direction].reverse : direction);
                    }

                    effects[effect[0]] = effectBody;
                });
            } else {
                each(input, function(idx) {
                    var direction = this.direction;

                    if (direction && mirror && !singleEffectRegExp.test(idx)) {
                        this.direction = directions[direction].reverse;
                    }

                    effects[idx] = this;
                });
            }

            return effects;
        };

        function parseInteger(value) {
            return parseInt(value, 10);
        }

        function parseCSS(element, property) {
            return parseInteger(element.css(property));
        }

        function keys(obj) {
            var acc = [];
            for (var propertyName in obj) {
                acc.push(propertyName);
            }
            return acc;
        }

        function strip3DTransforms(properties) {
            for (var key in properties) {
                if (transformProps.indexOf(key) != -1 && transform2d.indexOf(key) == -1) {
                    delete properties[key];
                }
            }

            return properties;
        }

        function normalizeCSS(element, properties) {
            var transformation = [], cssValues = {}, lowerKey, key, value, isTransformed;

            for (key in properties) {
                lowerKey = key.toLowerCase();
                isTransformed = transforms && transformProps.indexOf(lowerKey) != -1;

                if (!support.hasHW3D && isTransformed && transform2d.indexOf(lowerKey) == -1) {
                    delete properties[key];
                } else {
                    value = properties[key];

                    if (isTransformed) {
                        transformation.push(key + "(" + value + ")");
                    } else {
                        cssValues[key] = value;
                    }
                }
            }

            if (transformation.length) {
                cssValues[TRANSFORM] = transformation.join(" ");
            }

            return cssValues;
        }

        if (transitions) {
            extend(fx, {
                transition: function(element, properties, options) {
                    var css,
                        delay = 0,
                        oldKeys = element.data("keys") || [],
                        timeoutID;

                    options = extend({
                            duration: 200,
                            ease: "ease-out",
                            complete: null,
                            exclusive: "all"
                        },
                        options
                    );

                    var stopTransitionCalled = false;

                    var stopTransition = function() {
                        if (!stopTransitionCalled) {
                            stopTransitionCalled = true;

                            if (timeoutID) {
                                clearTimeout(timeoutID);
                                timeoutID = null;
                            }

                            element
                            .removeData(ABORT_ID)
                            .dequeue()
                            .css(TRANSITION, "")
                            .css(TRANSITION);

                            options.complete.call(element);
                        }
                    };

                    options.duration = $.fx ? $.fx.speeds[options.duration] || options.duration : options.duration;

                    css = normalizeCSS(element, properties);

                    $.merge(oldKeys, keys(css));

                    if ($.hasOwnProperty("uniqueSort")) {
                        element
                            .data("keys", $.uniqueSort(oldKeys))
                            .height();
                    } else {
                        element
                            .data("keys", $.unique(oldKeys))
                            .height();
                    }

                    element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease).css(TRANSITION);
                    element.css(css).css(TRANSFORM);

                    /**
                     * Use transitionEnd event for browsers who support it - but duplicate it with setTimeout, as the transitionEnd event will not be triggered if no CSS properties change.
                     * This should be cleaned up at some point (widget by widget), and refactored to widgets not relying on the complete callback if no transition occurs.
                     *
                     * For IE9 and below, resort to setTimeout.
                     */
                    if (transitions.event) {
                        element.one(transitions.event, stopTransition);
                        if (options.duration !== 0) {
                            delay = 500;
                        }
                    }

                    timeoutID = setTimeout(stopTransition, options.duration + delay);
                    element.data(ABORT_ID, timeoutID);
                    element.data(COMPLETE_CALLBACK, stopTransition);
                },

                stopQueue: function(element, clearQueue, gotoEnd) {
                    var cssValues,
                        taskKeys = element.data("keys"),
                        retainPosition = (!gotoEnd && taskKeys),
                        completeCallback = element.data(COMPLETE_CALLBACK);

                    if (retainPosition) {
                        cssValues = kendo.getComputedStyles(element[0], taskKeys);
                    }

                    if (completeCallback) {
                        completeCallback();
                    }

                    if (retainPosition) {
                        element.css(cssValues);
                    }

                    return element
                            .removeData("keys")
                            .stop(clearQueue);
                }
            });
        }

        function animationProperty(element, property) {
            if (transforms) {
                var transform = element.css(TRANSFORM);
                if (transform == NONE) {
                    return property == "scale" ? 1 : 0;
                }

                var match = transform.match(new RegExp(property + "\\s*\\(([\\d\\w\\.]+)")),
                    computed = 0;

                if (match) {
                    computed = parseInteger(match[1]);
                } else {
                    match = transform.match(matrix3dRegExp) || [0, 0, 0, 0, 0];
                    property = property.toLowerCase();

                    if (translateXRegExp.test(property)) {
                        computed = parseFloat(match[3] / match[2]);
                    } else if (property == "translatey") {
                        computed = parseFloat(match[4] / match[2]);
                    } else if (property == "scale") {
                        computed = parseFloat(match[2]);
                    } else if (property == "rotate") {
                        computed = parseFloat(Math.atan2(match[2], match[1]));
                    }
                }

                return computed;
            } else {
                return parseFloat(element.css(property));
            }
        }

        var EffectSet = kendo.Class.extend({
            init: function(element, options) {
                var that = this;

                that.element = element;
                that.effects = [];
                that.options = options;
                that.restore = [];
            },

            run: function(effects) {
                var that = this,
                    effect,
                    idx, jdx,
                    length = effects.length,
                    element = that.element,
                    options = that.options,
                    deferred = $.Deferred(),
                    start = {},
                    end = {},
                    target,
                    children,
                    childrenLength;

                that.effects = effects;

                deferred.done(that.complete.bind(that));

                element.data("animating", true);

                for (idx = 0; idx < length; idx ++) {
                    effect = effects[idx];

                    effect.setReverse(options.reverse);
                    effect.setOptions(options);

                    that.addRestoreProperties(effect.restore);

                    effect.prepare(start, end);

                    children = effect.children();

                    for (jdx = 0, childrenLength = children.length; jdx < childrenLength; jdx ++) {
                        children[jdx].duration(options.duration).run();
                    }
                }

                // legacy support for options.properties
                for (var effectName in options.effects) {
                    extend(end, options.effects[effectName].properties);
                }

                // Show the element initially
                if (!element.is(":visible")) {
                    extend(start, { display: element.data("olddisplay") || "block" });
                }

                if (transforms && !options.reset) {
                    target = element.data("targetTransform");

                    if (target) {
                        start = extend(target, start);
                    }
                }

                start = normalizeCSS(element, start);

                if (transforms && !transitions) {
                    start = strip3DTransforms(start);
                }

                element.css(start)
                       .css(TRANSFORM); // Nudge

                for (idx = 0; idx < length; idx ++) {
                    effects[idx].setup();
                }

                if (options.init) {
                    options.init();
                }

                element.data("targetTransform", end);
                fx.animate(element, end, extend({}, options, { complete: deferred.resolve }));

                return deferred.promise();
            },

            stop: function() {
                $(this.element).kendoStop(true, true);
            },

            addRestoreProperties: function(restore) {
                var element = this.element,
                    value,
                    i = 0,
                    length = restore.length;

                for (; i < length; i ++) {
                    value = restore[i];

                    this.restore.push(value);

                    if (!element.data(value)) {
                        element.data(value, element.css(value));
                    }
                }
            },

            restoreCallback: function() {
                var element = this.element;

                for (var i = 0, length = this.restore.length; i < length; i ++) {
                    var value = this.restore[i];
                    element.css(value, element.data(value));
                }
            },

            complete: function() {
                var that = this,
                    idx = 0,
                    element = that.element,
                    options = that.options,
                    effects = that.effects,
                    length = effects.length;

                element
                    .removeData("animating")
                    .dequeue(); // call next animation from the queue

                if (options.hide) {
                    element.data("olddisplay", element.css("display")).hide();
                }

                this.restoreCallback();

                if (hasZoom && !transforms) {
                    setTimeout(this.restoreCallback.bind(this), 0); // Again jQuery callback in IE8-
                }

                for (; idx < length; idx ++) {
                    effects[idx].teardown();
                }

                if (options.completeCallback) {
                    options.completeCallback(element);
                }
            }
        });

        fx.promise = function(element, options) {
            var effects = [],
                effectClass,
                effectSet = new EffectSet(element, options),
                parsedEffects = kendo.parseEffects(options.effects),
                effect;

            options.effects = parsedEffects;

            for (var effectName in parsedEffects) {
                effectClass = fx[capitalize(effectName)];

                if (effectClass) {
                    effect = new effectClass(element, parsedEffects[effectName].direction);
                    effects.push(effect);
               }
            }

            if (effects[0]) {
                effectSet.run(effects);
            } else { // Not sure how would an fx promise reach this state - means that you call kendoAnimate with no valid effects? Why?
                if (!element.is(":visible")) {
                    element.css({ display: element.data("olddisplay") || "block" }).css("display");
                }

                if (options.init) {
                    options.init();
                }

                element.dequeue();
                effectSet.complete();
            }
        };

        extend(fx, {
            animate: function(elements, properties, options) {
                var useTransition = options.transition !== false;
                delete options.transition;

                if (transitions && "transition" in fx && useTransition) {
                    fx.transition(elements, properties, options);
                } else {
                    if (transforms) {
                        elements.animate(strip3DTransforms(properties), { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
                    } else {
                        elements.each(function() {
                            var element = $(this),
                                multiple = {};

                            each(transformProps, function(idx, value) { // remove transforms to avoid IE and older browsers confusion
                                var params,
                                    currentValue = properties ? properties[value] + " " : null; // We need to match

                                if (currentValue) {
                                    var single = properties;

                                    if (value in scaleProperties && properties[value] !== undefined$1) {
                                        params = currentValue.match(cssParamsRegExp);
                                        if (transforms) {
                                            extend(single, { scale: +params[0] });
                                        }
                                    } else {
                                        if (value in translateProperties && properties[value] !== undefined$1) {
                                            var position = element.css(POSITION),
                                                isFixed = (position == "absolute" || position == "fixed");

                                            if (!element.data(TRANSLATE)) {
                                                if (isFixed) {
                                                    element.data(TRANSLATE, {
                                                        top: parseCSS(element, "top") || 0,
                                                        left: parseCSS(element, "left") || 0,
                                                        bottom: parseCSS(element, "bottom"),
                                                        right: parseCSS(element, "right")
                                                    });
                                                } else {
                                                    element.data(TRANSLATE, {
                                                        top: parseCSS(element, "marginTop") || 0,
                                                        left: parseCSS(element, "marginLeft") || 0
                                                    });
                                                }
                                            }

                                            var originalPosition = element.data(TRANSLATE);

                                            params = currentValue.match(cssParamsRegExp);
                                            if (params) {

                                                var dX = value == TRANSLATE + "y" ? +null : +params[1],
                                                    dY = value == TRANSLATE + "y" ? +params[1] : +params[2];

                                                if (isFixed) {
                                                    if (!isNaN(originalPosition.right)) {
                                                        if (!isNaN(dX)) { extend(single, { right: originalPosition.right - dX }); }
                                                    } else {
                                                        if (!isNaN(dX)) { extend(single, { left: originalPosition.left + dX }); }
                                                    }

                                                    if (!isNaN(originalPosition.bottom)) {
                                                        if (!isNaN(dY)) { extend(single, { bottom: originalPosition.bottom - dY }); }
                                                    } else {
                                                        if (!isNaN(dY)) { extend(single, { top: originalPosition.top + dY }); }
                                                    }
                                                } else {
                                                    if (!isNaN(dX)) { extend(single, { marginLeft: originalPosition.left + dX }); }
                                                    if (!isNaN(dY)) { extend(single, { marginTop: originalPosition.top + dY }); }
                                                }
                                            }
                                        }
                                    }

                                    if (!transforms && value != "scale" && value in single) {
                                        delete single[value];
                                    }

                                    if (single) {
                                        extend(multiple, single);
                                    }
                                }
                            });

                            if (browser.msie) {
                                delete multiple.scale;
                            }

                            element.animate(multiple, { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
                        });
                    }
                }
            }
        });

        fx.animatedPromise = fx.promise;

        var Effect = kendo.Class.extend({
            init: function(element, direction) {
                var that = this;
                that.element = element;
                that._direction = direction;
                that.options = {};
                that._additionalEffects = [];

                if (!that.restore) {
                    that.restore = [];
                }
            },

    // Public API
            reverse: function() {
                this._reverse = true;
                return this.run();
            },

            play: function() {
                this._reverse = false;
                return this.run();
            },

            add: function(additional) {
                this._additionalEffects.push(additional);
                return this;
            },

            direction: function(value) {
                this._direction = value;
                return this;
            },

            duration: function(duration) {
                this._duration = duration;
                return this;
            },

            compositeRun: function() {
                var that = this,
                    effectSet = new EffectSet(that.element, { reverse: that._reverse, duration: that._duration }),
                    effects = that._additionalEffects.concat([ that ]);

                return effectSet.run(effects);
            },

            run: function() {
                if (this._additionalEffects && this._additionalEffects[0]) {
                    return this.compositeRun();
                }

                var that = this,
                    element = that.element,
                    idx = 0,
                    restore = that.restore,
                    length = restore.length,
                    value,
                    deferred = $.Deferred(),
                    start = {},
                    end = {},
                    target,
                    children = that.children(),
                    childrenLength = children.length;

                deferred.done(that._complete.bind(that));

                element.data("animating", true);

                for (idx = 0; idx < length; idx ++) {
                    value = restore[idx];

                    if (!element.data(value)) {
                        element.data(value, element.css(value));
                    }
                }

                for (idx = 0; idx < childrenLength; idx ++) {
                    children[idx].duration(that._duration).run();
                }

                that.prepare(start, end);

                if (!element.is(":visible")) {
                    extend(start, { display: element.data("olddisplay") || "block" });
                }

                if (transforms) {
                    target = element.data("targetTransform");

                    if (target) {
                        start = extend(target, start);
                    }
                }

                start = normalizeCSS(element, start);

                if (transforms && !transitions) {
                    start = strip3DTransforms(start);
                }

                element.css(start).css(TRANSFORM); // Trick webkit into re-rendering

                that.setup();

                element.data("targetTransform", end);
                fx.animate(element, end, { duration: that._duration, complete: deferred.resolve });

                return deferred.promise();
            },

            stop: function() {
                var idx = 0,
                    children = this.children(),
                    childrenLength = children.length;

                for (idx = 0; idx < childrenLength; idx ++) {
                    children[idx].stop();
                }

                $(this.element).kendoStop(true, true);
                return this;
            },

            restoreCallback: function() {
                var element = this.element;

                for (var i = 0, length = this.restore.length; i < length; i ++) {
                    var value = this.restore[i];
                    element.css(value, element.data(value));
                }
            },

            _complete: function() {
                var that = this,
                    element = that.element;

                element
                    .removeData("animating")
                    .dequeue(); // call next animation from the queue

                that.restoreCallback();

                if (that.shouldHide()) {
                    element.data("olddisplay", element.css("display")).hide();
                }

                if (hasZoom && !transforms) {
                    setTimeout(that.restoreCallback.bind(that), 0); // Again jQuery callback in IE8-
                }

                that.teardown();
            },

            /////////////////////////// Support for kendo.animate;
            setOptions: function(options) {
                extend(true, this.options, options);
            },

            children: function() {
                return [];
            },

            shouldHide: $.noop,

            setup: $.noop,
            prepare: $.noop,
            teardown: $.noop,
            directions: [],

            setReverse: function(reverse) {
                this._reverse = reverse;
                return this;
            }
        });

        function capitalize(word) {
            return word.charAt(0).toUpperCase() + word.substring(1);
        }

        function createEffect(name, definition) {
            var effectClass = Effect.extend(definition),
                directions = effectClass.prototype.directions;

            fx[capitalize(name)] = effectClass;

            fx.Element.prototype[name] = function(direction, opt1, opt2, opt3) {
                return new effectClass(this.element, direction, opt1, opt2, opt3);
            };

            each(directions, function(idx, theDirection) {
                fx.Element.prototype[name + capitalize(theDirection)] = function(opt1, opt2, opt3) {
                    return new effectClass(this.element, theDirection, opt1, opt2, opt3);
                };
            });
        }

        var FOUR_DIRECTIONS = ["left", "right", "up", "down"],
            IN_OUT = ["in", "out"];

        createEffect("slideIn", {
            directions: FOUR_DIRECTIONS,

            divisor: function(value) {
                this.options.divisor = value;
                return this;
            },

            prepare: function(start, end) {
                var that = this,
                    tmp,
                    element = that.element,
                    outerWidth = kendo._outerWidth,
                    outerHeight = kendo._outerHeight,
                    direction = directions[that._direction],
                    offset = -direction.modifier * (direction.vertical ? outerHeight(element) : outerWidth(element)),
                    startValue = offset / (that.options && that.options.divisor || 1) + PX,
                    endValue = "0px";

                if (that._reverse) {
                    tmp = start;
                    start = end;
                    end = tmp;
                }

                if (transforms) {
                    start[direction.transition] = startValue;
                    end[direction.transition] = endValue;
                } else {
                    start[direction.property] = startValue;
                    end[direction.property] = endValue;
                }
            }
        });

        createEffect("tile", {
            directions: FOUR_DIRECTIONS,

            init: function(element, direction, previous) {
                Effect.prototype.init.call(this, element, direction);
                this.options = { previous: previous };
            },

            previousDivisor: function(value) {
                this.options.previousDivisor = value;
                return this;
            },

            children: function() {
                var that = this,
                    reverse = that._reverse,
                    previous = that.options.previous,
                    divisor = that.options.previousDivisor || 1,
                    dir = that._direction;

                var children = [ kendo.fx(that.element).slideIn(dir).setReverse(reverse) ];

                if (previous) {
                    children.push( kendo.fx(previous).slideIn(directions[dir].reverse).divisor(divisor).setReverse(!reverse) );
                }

                return children;
            }
        });

        function createToggleEffect(name, property, defaultStart, defaultEnd) {
            createEffect(name, {
                directions: IN_OUT,

                startValue: function(value) {
                    this._startValue = value;
                    return this;
                },

                endValue: function(value) {
                    this._endValue = value;
                    return this;
                },

                shouldHide: function() {
                   return this._shouldHide;
                },

                prepare: function(start, end) {
                    var that = this,
                        startValue,
                        endValue,
                        out = this._direction === "out",
                        startDataValue = that.element.data(property),
                        startDataValueIsSet = !(isNaN(startDataValue) || startDataValue == defaultStart);

                    if (startDataValueIsSet) {
                        startValue = startDataValue;
                    } else if (typeof this._startValue !== "undefined") {
                        startValue = this._startValue;
                    } else {
                        startValue = out ? defaultStart : defaultEnd;
                    }

                    if (typeof this._endValue !== "undefined") {
                        endValue = this._endValue;
                    } else {
                        endValue = out ? defaultEnd : defaultStart;
                    }

                    if (this._reverse) {
                        start[property] = endValue;
                        end[property] = startValue;
                    } else {
                        start[property] = startValue;
                        end[property] = endValue;
                    }

                    that._shouldHide = end[property] === defaultEnd;
                }
            });
        }

        createToggleEffect("fade", "opacity", 1, 0);
        createToggleEffect("zoom", "scale", 1, 0.01);

        createEffect("slideMargin", {
            prepare: function(start, end) {
                var that = this,
                    element = that.element,
                    options = that.options,
                    origin = element.data(ORIGIN),
                    offset = options.offset,
                    margin,
                    reverse = that._reverse;

                if (!reverse && origin === null) {
                    element.data(ORIGIN, parseFloat(element.css("margin-" + options.axis)));
                }

                margin = (element.data(ORIGIN) || 0);
                end["margin-" + options.axis] = !reverse ? margin + offset : margin;
            }
        });

        createEffect("slideTo", {
            prepare: function(start, end) {
                var that = this,
                    element = that.element,
                    options = that.options,
                    offset = options.offset.split(","),
                    reverse = that._reverse;

                if (transforms) {
                    end.translatex = !reverse ? offset[0] : 0;
                    end.translatey = !reverse ? offset[1] : 0;
                } else {
                    end.left = !reverse ? offset[0] : 0;
                    end.top = !reverse ? offset[1] : 0;
                }
                element.css("left");
            }
        });

        createEffect("expand", {
            directions: ["horizontal", "vertical"],

            restore: [ OVERFLOW ],

            prepare: function(start, end) {
                var that = this,
                    element = that.element,
                    options = that.options,
                    reverse = that._reverse,
                    property = that._direction === "vertical" ? HEIGHT : WIDTH,
                    setLength = element[0].style[property],
                    oldLength = element.data(property),
                    length = parseFloat(oldLength || setLength),
                    realLength = round(element.css(property, AUTO)[property]());

                start.overflow = HIDDEN;

                length = (options && options.reset) ? realLength || length : length || realLength;

                end[property] = (reverse ? 0 : length) + PX;
                start[property] = (reverse ? length : 0) + PX;

                if (oldLength === undefined$1) {
                    element.data(property, setLength);
                }
            },

            shouldHide: function() {
               return this._reverse;
            },

            teardown: function() {
                var that = this,
                    element = that.element,
                    property = that._direction === "vertical" ? HEIGHT : WIDTH,
                    length = element.data(property);

                if (length == AUTO || length === BLANK) {
                    setTimeout(function() { element.css(property, AUTO).css(property); }, 0); // jQuery animate complete callback in IE is called before the last animation step!
                }
            }
        });

        var TRANSFER_START_STATE = { position: "absolute", marginLeft: 0, marginTop: 0, scale: 1 };
        /**
         * Intersection point formulas are taken from here - http://zonalandeducation.com/mmts/intersections/intersectionOfTwoLines1/intersectionOfTwoLines1.html
         * Formula for a linear function from two points from here - http://demo.activemath.org/ActiveMath2/search/show.cmd?id=mbase://AC_UK_calculus/functions/ex_linear_equation_two_points
         * The transform origin point is the intersection point of the two lines from the top left corners/top right corners of the element and target.
         * The math and variables below MAY BE SIMPLIFIED (zeroes removed), but this would make the formula too cryptic.
         */
        createEffect("transfer", {
            init: function(element, target) {
                this.element = element;
                this.options = { target: target };
                this.restore = [];
            },

            setup: function() {
                this.element.appendTo(document.body);
            },

            prepare: function(start, end) {
                var that = this,
                    element = that.element,
                    outerBox = fx.box(element),
                    innerBox = fx.box(that.options.target),
                    currentScale = animationProperty(element, "scale"),
                    scale = fx.fillScale(innerBox, outerBox),
                    transformOrigin = fx.transformOrigin(innerBox, outerBox);

                extend(start, TRANSFER_START_STATE);
                end.scale = 1;

                element.css(TRANSFORM, "scale(1)").css(TRANSFORM);
                element.css(TRANSFORM, "scale(" + currentScale + ")");

                start.top = outerBox.top;
                start.left = outerBox.left;
                start.transformOrigin = transformOrigin.x + PX + " " + transformOrigin.y + PX;

                if (that._reverse) {
                    start.scale = scale;
                } else {
                    end.scale = scale;
                }
            }
        });


        var CLIPS = {
            top: "rect(auto auto $size auto)",
            bottom: "rect($size auto auto auto)",
            left: "rect(auto $size auto auto)",
            right: "rect(auto auto auto $size)"
        };

        var ROTATIONS = {
            top: { start: "rotatex(0deg)", end: "rotatex(180deg)" },
            bottom: { start: "rotatex(-180deg)", end: "rotatex(0deg)" },
            left: { start: "rotatey(0deg)", end: "rotatey(-180deg)" },
            right: { start: "rotatey(180deg)", end: "rotatey(0deg)" }
        };

        function clipInHalf(container, direction) {
            var vertical = kendo.directions[direction].vertical,
                size = (container[vertical ? HEIGHT : WIDTH]() / 2) + "px";

            return CLIPS[direction].replace("$size", size);
        }

        createEffect("turningPage", {
            directions: FOUR_DIRECTIONS,

            init: function(element, direction, container) {
                Effect.prototype.init.call(this, element, direction);
                this._container = container;
            },

            prepare: function(start, end) {
                var that = this,
                    reverse = that._reverse,
                    direction = reverse ? directions[that._direction].reverse : that._direction,
                    rotation = ROTATIONS[direction];

                start.zIndex = 1;

                if (that._clipInHalf) {
                   start.clip = clipInHalf(that._container, kendo.directions[direction].reverse);
                }

                start[BACKFACE] = HIDDEN;

                end[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.start : rotation.end);
                start[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.end : rotation.start);
            },

            setup: function() {
                this._container.append(this.element);
            },

            face: function(value) {
                this._face = value;
                return this;
            },

            shouldHide: function() {
                var that = this,
                    reverse = that._reverse,
                    face = that._face;

                return (reverse && !face) || (!reverse && face);
            },

            clipInHalf: function(value) {
                this._clipInHalf = value;
                return this;
            },

            temporary: function() {
                this.element.addClass('temp-page');
                return this;
            }
        });

        createEffect("staticPage", {
            directions: FOUR_DIRECTIONS,

            init: function(element, direction, container) {
                Effect.prototype.init.call(this, element, direction);
                this._container = container;
            },

            restore: ["clip"],

            prepare: function(start, end) {
                var that = this,
                    direction = that._reverse ? directions[that._direction].reverse : that._direction;

                start.clip = clipInHalf(that._container, direction);
                start.opacity = 0.999;
                end.opacity = 1;
            },

            shouldHide: function() {
                var that = this,
                    reverse = that._reverse,
                    face = that._face;

                return (reverse && !face) || (!reverse && face);
            },

            face: function(value) {
                this._face = value;
                return this;
            }
        });

        createEffect("pageturn", {
            directions: ["horizontal", "vertical"],

            init: function(element, direction, face, back) {
                Effect.prototype.init.call(this, element, direction);
                this.options = {};
                this.options.face = face;
                this.options.back = back;
            },

            children: function() {
                var that = this,
                    options = that.options,
                    direction = that._direction === "horizontal" ? "left" : "top",
                    reverseDirection = kendo.directions[direction].reverse,
                    reverse = that._reverse,
                    temp,
                    faceClone = options.face.clone(true).removeAttr("id"),
                    backClone = options.back.clone(true).removeAttr("id"),
                    element = that.element;

                if (reverse) {
                    temp = direction;
                    direction = reverseDirection;
                    reverseDirection = temp;
                }

                return [
                    kendo.fx(options.face).staticPage(direction, element).face(true).setReverse(reverse),
                    kendo.fx(options.back).staticPage(reverseDirection, element).setReverse(reverse),
                    kendo.fx(faceClone).turningPage(direction, element).face(true).clipInHalf(true).temporary().setReverse(reverse),
                    kendo.fx(backClone).turningPage(reverseDirection, element).clipInHalf(true).temporary().setReverse(reverse)
                ];
            },

            prepare: function(start, end) {
                start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
                start.transformStyle = "preserve-3d";
                // hack to trigger transition end.
                start.opacity = 0.999;
                end.opacity = 1;
            },

            teardown: function() {
                this.element.find(".temp-page").remove();
            }
        });

        createEffect("flip", {
            directions: ["horizontal", "vertical"],

            init: function(element, direction, face, back) {
                Effect.prototype.init.call(this, element, direction);
                this.options = {};
                this.options.face = face;
                this.options.back = back;
            },

            children: function() {
                var that = this,
                    options = that.options,
                    direction = that._direction === "horizontal" ? "left" : "top",
                    reverseDirection = kendo.directions[direction].reverse,
                    reverse = that._reverse,
                    temp,
                    element = that.element;

                if (reverse) {
                    temp = direction;
                    direction = reverseDirection;
                    reverseDirection = temp;
                }

                return [
                    kendo.fx(options.face).turningPage(direction, element).face(true).setReverse(reverse),
                    kendo.fx(options.back).turningPage(reverseDirection, element).setReverse(reverse)
                ];
            },

            prepare: function(start) {
                start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
                start.transformStyle = "preserve-3d";
            }
        });

        var RESTORE_OVERFLOW = !support.mobileOS.android;
        var IGNORE_TRANSITION_EVENT_SELECTOR = ".km-touch-scrollbar, .km-actionsheet-wrapper";

        createEffect("replace", {
            _before: $.noop,
            _after: $.noop,
            init: function(element, previous, transitionClass) {
                Effect.prototype.init.call(this, element);
                this._previous = $(previous);
                this._transitionClass = transitionClass;
            },

            duration: function() {
                throw new Error("The replace effect does not support duration setting; the effect duration may be customized through the transition class rule");
            },

            beforeTransition: function(callback) {
                this._before = callback;
                return this;
            },

            afterTransition: function(callback) {
                this._after = callback;
                return this;
            },

            _both: function() {
                return $().add(this._element).add(this._previous);
            },

            _containerClass: function() {
                var direction = this._direction,
                    containerClass = "k-fx k-fx-start k-fx-" + this._transitionClass;

                if (direction) {
                    containerClass += " k-fx-" + direction;
                }

                if (this._reverse) {
                    containerClass += " k-fx-reverse";
                }

                return containerClass;
            },

            complete: function(e) {
                if (!this.deferred || (e && $(e.target).is(IGNORE_TRANSITION_EVENT_SELECTOR))) {
                    return;
                }

                var container = this.container;

                container
                    .removeClass("k-fx-end")
                    .removeClass(this._containerClass())
                    .off(transitions.event, this.completeProxy);

                this._previous.hide().removeClass("k-fx-current");
                this.element.removeClass("k-fx-next");

                if (RESTORE_OVERFLOW) {
                    container.css(OVERFLOW, "");
                }

                if (!this.isAbsolute) {
                    this._both().css(POSITION, "");
                }

                this.deferred.resolve();
                delete this.deferred;
            },

            run: function() {
                if (this._additionalEffects && this._additionalEffects[0]) {
                    return this.compositeRun();
                }

                var that = this,
                    element = that.element,
                    previous = that._previous,
                    container = element.parents().filter(previous.parents()).first(),
                    both = that._both(),
                    deferred = $.Deferred(),
                    originalPosition = element.css(POSITION),
                    originalOverflow;

                // edge case for grid/scheduler, where the previous is already destroyed.
                if (!container.length) {
                    container = element.parent();
                }

                this.container = container;
                this.deferred = deferred;
                this.isAbsolute = originalPosition == "absolute";

                if (!this.isAbsolute) {
                    both.css(POSITION, "absolute");
                }

                if (RESTORE_OVERFLOW) {
                    originalOverflow = container.css(OVERFLOW);
                    container.css(OVERFLOW, "hidden");
                }

                if (!transitions) {
                    this.complete();
                } else {
                    element.addClass("k-fx-hidden");

                    container.addClass(this._containerClass());

                    this.completeProxy = this.complete.bind(this);
                    container.on(transitions.event, this.completeProxy);

                    kendo.animationFrame(function() {
                        element.removeClass("k-fx-hidden").addClass("k-fx-next");
                        previous.css("display", "").addClass("k-fx-current");
                        that._before(previous, element);
                        kendo.animationFrame(function() {
                            container.removeClass("k-fx-start").addClass("k-fx-end");
                            that._after(previous, element);
                        });
                    });
                }

                return deferred.promise();
            },

            stop: function() {
                this.complete();
            }
        });

        var Animation = kendo.Class.extend({
            init: function() {
                var that = this;
                that._tickProxy = that._tick.bind(that);
                that._started = false;
            },

            tick: $.noop,
            done: $.noop,
            onEnd: $.noop,
            onCancel: $.noop,

            start: function() {
                if (!this.enabled()) {
                    return;
                }

                if (!this.done()) {
                    this._started = true;
                    kendo.animationFrame(this._tickProxy);
                } else {
                    this.onEnd();
                }
            },

            enabled: function() {
                return true;
            },

            cancel: function() {
                this._started = false;
                this.onCancel();
            },

            _tick: function() {
                var that = this;
                if (!that._started) { return; }

                that.tick();

                if (!that.done()) {
                    kendo.animationFrame(that._tickProxy);
                } else {
                    that._started = false;
                    that.onEnd();
                }
            }
        });

        var Transition = Animation.extend({
            init: function(options) {
                var that = this;
                extend(that, options);
                Animation.fn.init.call(that);
            },

            done: function() {
                return this.timePassed() >= this.duration;
            },

            timePassed: function() {
                return Math.min(this.duration, (new Date()) - this.startDate);
            },

            moveTo: function(options) {
                var that = this,
                    movable = that.movable;

                that.initial = movable[that.axis];
                that.delta = options.location - that.initial;

                that.duration = typeof options.duration == "number" ? options.duration : 300;

                that.tick = that._easeProxy(options.ease);

                that.startDate = new Date();
                that.start();
            },

            _easeProxy: function(ease) {
                var that = this;

                return function() {
                    that.movable.moveAxis(that.axis, ease(that.timePassed(), that.initial, that.delta, that.duration));
                };
            }
        });

        extend(Transition, {
            easeOutExpo: function(t, b, c, d) {
                return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
            },

            easeOutBack: function(t, b, c, d, s) {
                s = 1.70158;
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            }
        });

        fx.Animation = Animation;
        fx.Transition = Transition;
        fx.createEffect = createEffect;

        fx.box = function(element) {
            element = $(element);
            var result = element.offset();
            result.width = kendo._outerWidth(element);
            result.height = kendo._outerHeight(element);
            return result;
        };

        fx.transformOrigin = function(inner, outer) {
            var x = (inner.left - outer.left) * outer.width / (outer.width - inner.width),
                y = (inner.top - outer.top) * outer.height / (outer.height - inner.height);

            return {
                x: isNaN(x) ? 0 : x,
                y: isNaN(y) ? 0 : y
            };
        };

        fx.fillScale = function(inner, outer) {
            return Math.min(inner.width / outer.width, inner.height / outer.height);
        };

        fx.fitScale = function(inner, outer) {
            return Math.max(inner.width / outer.width, inner.height / outer.height);
        };
    })(window.kendo.jQuery);
    var kendo$T = kendo;

    var __meta__$Y = {
        id: "view",
        name: "View",
        category: "framework",
        description: "The View class instantiates and handles the events of a certain screen from the application.",
        depends: [ "core", "binder", "fx" ],
        hidden: false
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            attr = kendo.attr,
            ui = kendo.ui,
            attrValue = kendo.attrValue,
            directiveSelector = kendo.directiveSelector,
            Observable = kendo.Observable,
            Widget = kendo.ui.Widget,
            roleSelector = kendo.roleSelector,

            SCRIPT = "SCRIPT",
            INIT = "init",
            TRANSITION_START = "transitionStart",
            TRANSITION_END = "transitionEnd",
            SHOW = "show",
            HIDE = "hide",
            ATTACH = "attach",
            DETACH = "detach",
            sizzleErrorRegExp = /unrecognized expression/;

        var bodyRegExp = /<body[^>]*>(([\u000a\u000d\u2028\u2029]|.)*)<\/body>/i;
        var LOAD_START = "loadStart";
        var LOAD_COMPLETE = "loadComplete";
        var SHOW_START = "showStart";
        var SAME_VIEW_REQUESTED = "sameViewRequested";
        var VIEW_SHOW = "viewShow";
        var VIEW_TYPE_DETERMINED = "viewTypeDetermined";
        var AFTER = "after";
        var classNames = {
            content: "k-content",
            view: "k-view",
            stretchedView: "k-stretched-view",
            widget: "k-widget",
            header: "k-header",
            footer: "k-footer"
        };

        var View = kendo.ui.Widget.extend({
            init: function(content, options) {
                var that = this;
                options = options || {};
                that.id = kendo.guid();

                Observable.fn.init.call(that);
                this.options = $.extend({}, this.options, options);

                that.content = content;

                if (that.options.renderOnInit) {
                    Widget.fn.init.call(that, that._createElement(), options);
                }

                if (that.options.wrapInSections) {
                    that._renderSections();
                }

                that.tagName = options.tagName || "div";
                that.model = options.model;
                that._wrap = options.wrap !== false;
                this._evalTemplate = options.evalTemplate || false;
                this._useWithBlock = options.useWithBlock;
                that._fragments = {};

                that.bind([ INIT, SHOW, HIDE, TRANSITION_START, TRANSITION_END ], options);
            },

            options: {
                name: "View",
                renderOnInit: false,
                wrapInSections: false,
                detachOnHide: true,
                detachOnDestroy: true
            },

            render: function(container) {
                var that = this,
                    notInitialized = !that.element;

                // The order below matters - kendo.bind should happen when the element is in the DOM, and show should be triggered after init.

                if (notInitialized) {
                    that.element = that._createElement();
                }

                if (container) {
                    $(container).append(that.element);
                }

                if (notInitialized) {
                    kendo.bind(that.element, that.model);
                    that.trigger(INIT);
                }

                if (container) {
                    that._eachFragment(ATTACH);
                    that.trigger(SHOW);
                }

                return that.element;
            },

            clone: function() {
                return new ViewClone(this);
            },

            triggerBeforeShow: function() {
                return true;
            },

            triggerBeforeHide: function() {
                return true;
            },

            showStart: function() {
                var that = this;
                var element = that.render();

                if (element) {
                    element.css("display", "");
                }

                this.trigger(SHOW_START, { view: this });
            },

            showEnd: function() {
            },

            hideEnd: function() {
                this.hide();
            },

            beforeTransition: function(type) {
                this.trigger(TRANSITION_START, { type: type });
            },

            afterTransition: function(type) {
                this.trigger(TRANSITION_END, { type: type });
            },

            hide: function() {
                if (this.options.detachOnHide) {
                    this._eachFragment(DETACH);
                    $(this.element).detach();
                }

                this.trigger(HIDE);
            },

            destroy: function() {
                var that = this;
                var element = that.element;

                if (element) {
                    Widget.fn.destroy.call(that);

                    kendo.unbind(element);
                    kendo.destroy(element);

                    if (that.options.detachOnDestroy) {
                        element.remove();
                    }
                }
            },

            // ported from mobile view
            purge: function() {
                var that = this;

                that.destroy();
                $(that.element).add(that.content).add(that.wrapper).off().remove();
            },

            fragments: function(fragments) {
                $.extend(this._fragments, fragments);
            },

            _eachFragment: function(methodName) {
                for (var placeholder in this._fragments) {
                    this._fragments[placeholder][methodName](this, placeholder);
                }
            },

            _createElement: function() {
                var that = this,
                    wrapper = "<" + that.tagName + ">",
                    element,
                    content;

                try {
                    content = $(document.getElementById(that.content) || that.content); // support passing id without #

                    if (content[0].tagName === SCRIPT) {
                        content = content.html();
                    }
                } catch (e) {
                    if (sizzleErrorRegExp.test(e.message)) {
                        content = that.content;
                    }
                }

                if (typeof content === "string") {
                    content = content.replace(/^\s+|\s+$/g, '');
                    if (that._evalTemplate) {
                        content = kendo.template(content, { useWithBlock: that._useWithBlock })(that.model || {});
                    }

                    element = $(wrapper).append(content);
                    // drop the wrapper if asked - this seems like the easiest (although not very intuitive) way to avoid messing up templates with questionable content, like this one for instance:
                    // <script id="my-template">
                    // foo
                    // <span> Span </span>
                    // </script>
                    if (!that._wrap) {
                       element = element.contents();
                    }
                } else {
                    element = content;
                    if (that._evalTemplate) {
                        var result = $(kendo.template($("<div />").append(element.clone(true)).html(), { useWithBlock: that._useWithBlock })(that.model || {}));

                        // template uses DOM
                        if ($.contains(document, element[0])) {
                            element.replaceWith(result);
                        }

                        element = result;
                    }
                    if (that._wrap) {
                        element = element.wrapAll(wrapper).parent();
                    }
                }

                return element;
            },

            _renderSections: function() {
                var that = this;

                if (that.options.wrapInSections) {
                    that._wrapper();
                    that._createContent();
                    that._createHeader();
                    that._createFooter();
                }
            },

            _wrapper: function() {
                var that = this;
                var content = that.content;

                if (content.is(roleSelector("view"))) {
                    that.wrapper = that.content;
                } else {
                    that.wrapper = content
                        .wrap('<div data-' + kendo.ns + 'stretch="true" data-' + kendo.ns + 'role="view" data-' + kendo.ns + 'init-widgets="false"></div>')
                        .parent();
                }

                var wrapper = that.wrapper;

                wrapper.attr("id", that.id);

                wrapper.addClass(classNames.view);
                wrapper.addClass(classNames.widget);
                wrapper.attr("role", "view");
            },

            _createContent: function() {
                var that = this;
                var wrapper = $(that.wrapper);
                var contentSelector = roleSelector("content");

                if (!wrapper.children(contentSelector)[0]) {
                    var ccontentElements = wrapper.children().filter(function() {
                        var child = $(this);
                        if (!child.is(roleSelector("header")) && !child.is(roleSelector("footer"))) {
                            return child;
                        }
                    });

                    ccontentElements.wrap("<div " + attr("role") + '="content"></div>');
                }

                // use contentElement instead of content as view.content can be a string
                this.contentElement = wrapper.children(roleSelector("content"));

                this.contentElement
                    .addClass(classNames.stretchedView)
                    .addClass(classNames.content);
            },

            _createHeader: function() {
                var that = this;
                var wrapper = that.wrapper;

                this.header = wrapper.children(roleSelector("header")).addClass(classNames.header);
            },

            _createFooter: function() {
                var that = this;
                var wrapper = that.wrapper;

                this.footer = wrapper.children(roleSelector("footer")).addClass(classNames.footer);
            }
        });

        var ViewClone = kendo.Class.extend({
            init: function(view) {
                $.extend(this, {
                    element: view.element.clone(true),
                    transition: view.transition,
                    id: view.id
                });

                view.element.parent().append(this.element);
            },

            hideEnd: function() {
                this.element.remove();
            },

            beforeTransition: $.noop,
            afterTransition: $.noop
        });

        var Layout = View.extend({
            init: function(content, options) {
                View.fn.init.call(this, content, options);
                this.containers = {};
            },

            container: function(selector) {
                var container = this.containers[selector];

                if (!container) {
                    container = this._createContainer(selector);
                    this.containers[selector] = container;
                }

                return container;
            },

            showIn: function(selector, view, transition) {
                this.container(selector).show(view, transition);
            },

            _createContainer: function(selector) {
                var root = this.render(),
                    element = root.find(selector),
                    container;

                if (!element.length && root.is(selector)) {
                    if (root.is(selector)) {
                        element = root;
                    } else {

                        throw new Error("can't find a container with the specified " + selector + " selector");
                    }
                }

                container = new ViewContainer(element);

                container.bind("accepted", function(e) {
                    e.view.render(element);
                });

                return container;
            }
        });

        var Fragment = View.extend({
            attach: function(view, placeholder) {
                view.element.find(placeholder).replaceWith(this.render());
            },

            detach: function() {
            }
        });

        var transitionRegExp = /^(\w+)(:(\w+))?( (\w+))?$/;

        function parseTransition(transition) {
            if (!transition) {
                return {};
            }

            var matches = transition.match(transitionRegExp) || [];

            return {
                type: matches[1],
                direction: matches[3],
                reverse: matches[5] === "reverse"
            };
        }

        var ViewContainer = Observable.extend({
            init: function(container) {
                Observable.fn.init.call(this);
                this.container = container;
                this.history = [];
                this.view = null;
                this.running = false;
            },

            after: function() {
                this.running = false;
                this.trigger("complete", { view: this.view });
                this.trigger("after");
            },

            end: function() {
                this.view.showEnd();
                this.previous.hideEnd();
                this.after();
            },

            show: function(view, transition, locationID) {
                if (!view.triggerBeforeShow() || (this.view && !this.view.triggerBeforeHide())) {
                    this.trigger("after");
                    return false;
                }

                locationID = locationID || view.id;

                var that = this,
                    current = (view === that.view) ? view.clone() : that.view,
                    history = that.history,
                    previousEntry = history[history.length - 2] || {},
                    back = previousEntry.id === locationID,
                    // If explicit transition is set, it will be with highest priority
                    // Next we will try using the history record transition or the view transition configuration
                    theTransition = transition || ( back ? history[history.length - 1].transition : view.transition ),
                    transitionData = parseTransition(theTransition);

                if (that.running) {
                    that.effect.stop();
                }

                if (theTransition === "none") {
                    theTransition = null;
                }

                that.trigger("accepted", { view: view });
                that.view = view;
                that.previous = current;
                that.running = true;

                if (!back) {
                    history.push({ id: locationID, transition: theTransition });
                } else {
                    history.pop();
                }

                if (!current) {
                    view.showStart();
                    view.showEnd();
                    that.after();
                    return true;
                }

                if (!theTransition || !kendo.effects.enabled) {
                    view.showStart();
                    that.end();
                } else {
                    // hide the view element before init/show - prevents blinks on iPad
                    // the replace effect will remove this class
                    view.element.addClass("k-fx-hidden");
                    view.showStart();
                    // do not reverse the explicit transition
                    if (back && !transition) {
                        transitionData.reverse = !transitionData.reverse;
                    }

                    that.effect = kendo.fx(view.element).replace(current.element, transitionData.type)
                        .beforeTransition(function() {
                            view.beforeTransition("show");
                            current.beforeTransition("hide");
                        })
                        .afterTransition(function() {
                            view.afterTransition("show");
                            current.afterTransition("hide");
                        })
                        .direction(transitionData.direction)
                        .setReverse(transitionData.reverse);

                    that.effect.run().then(function() { that.end(); });
                }

                return true;
            },

            destroy: function() {
                var that = this;
                var view = that.view;

                if (view && view.destroy) {
                    view.destroy();
                }
            }
        });

        var ViewEngine = Observable.extend({
            init: function(options) {
                var that = this,
                    views,
                    container;

                Observable.fn.init.call(that);
                that.options = options;

                $.extend(that, options);
                that.sandbox = $("<div />");
                container = that.container;

                views = that._hideViews(container);
                that.rootView = views.first();
                that.layouts = {};

                that.viewContainer = new kendo.ViewContainer(that.container);

                that.viewContainer.bind("accepted", function(e) {
                    e.view.params = that.params;
                });

                that.viewContainer.bind("complete", function(e) {
                    that.trigger(VIEW_SHOW, { view: e.view });
                });

                that.viewContainer.bind(AFTER, function() {
                    that.trigger(AFTER);
                });

                this.bind(this.events, options);
            },

            events: [
                SHOW_START,
                AFTER,
                VIEW_SHOW,
                LOAD_START,
                LOAD_COMPLETE,
                SAME_VIEW_REQUESTED,
                VIEW_TYPE_DETERMINED
            ],

            destroy: function() {
                var that = this;
                var viewContainer = that.viewContainer;

                kendo.destroy(that.container);

                for (var id in that.layouts) {
                    this.layouts[id].destroy();
                }

                if (viewContainer) {
                    viewContainer.destroy();
                }
            },

            view: function() {
                return this.viewContainer.view;
            },

            showView: function(url, transition, params) {
                url = url.replace(new RegExp("^" + this.remoteViewURLPrefix), "");
                if (url === "" && this.remoteViewURLPrefix) {
                    url = "/";
                }

                if (url.replace(/^#/, "") === this.url) {
                    this.trigger(SAME_VIEW_REQUESTED);
                    return false;
                }

                this.trigger(SHOW_START);

                var that = this,
                    element = that._findViewElement(url),
                    view = kendo.widgetInstance(element);

                that.url = url.replace(/^#/, "");

                that.params = params;

                if (view && view.reload) {
                    view.purge();
                    element = [];
                }

                this.trigger(VIEW_TYPE_DETERMINED, { remote: element.length === 0, url: url });

                if (element[0]) {
                    if (!view) {
                        view = that._createView(element);
                    }

                    return that.viewContainer.show(view, transition, url);
                } else {
                    return true;
                }
            },

            append: function(html, url) {
                var sandbox = this.sandbox,
                    urlPath = (url || "").split("?")[0],
                    container = this.container,
                    views,
                    view;

                if (bodyRegExp.test(html)) {
                    html = RegExp.$1;
                }

                sandbox[0].innerHTML = html;

                container.append(sandbox.children("script, style"));

                views = this._hideViews(sandbox);
                view = views.first();

                // Generic HTML content found as remote view - no remote view markers
                if (!view.length) {
                    views = view = sandbox.wrapInner("<div data-role=view />").children(); // one element
                }

                if (urlPath) {
                    view.hide().attr(attr("url"), urlPath);
                }

                container.append(views);

                return this._createView(view);
            },

            _locate: function(selectors) {
                return roleSelector(selectors);
            },

            _findViewElement: function(url) {
                var element,
                    urlPath = url.split("?")[0];

                if (!urlPath) {
                    return this.rootView;
                }

                element = this.container.children("[" + attr("url") + "='" + urlPath + "']");

                // do not try to search for "#/foo/bar" id, jQuery throws error
                if (!element[0] && urlPath.indexOf("/") === -1) {
                    element = this.container.children(urlPath.charAt(0) === "#" ? urlPath : "#" + urlPath);
                }

                if (!element[0]) {
                    element = this._findViewElementById(url);
                }

                return element;
            },

            _findViewElementById: function(id) {
                var element = this.container.children("[id='" + id + "']");
                return element;
            },

            _createView: function(element) {
                //return this._createMobileView(element);
                return this._createSpaView(element);
            },

            _createMobileView: function(element) {
                return kendo.initWidget(element, {
                    defaultTransition: this.transition,
                    loader: this.loader,
                    container: this.container,
                    getLayout: this.getLayoutProxy,
                    modelScope: this.modelScope,
                    reload: attrValue(element, "reload")
                }, ui.roles);
            },

            _createSpaView: function(element) {
                var viewOptions = (this.options || {}).viewOptions || {};
                return new kendo.View(element, {
                    renderOnInit: viewOptions.renderOnInit,
                    wrap: viewOptions.wrap || false,
                    wrapInSections: viewOptions.wrapInSections,
                    detachOnHide: viewOptions.detachOnHide,
                    detachOnDestroy: viewOptions.detachOnDestroy
                });
            },

            _hideViews: function(container) {
                return container.children(this._locate("view")).hide();
            }
        });

        kendo.ViewEngine = ViewEngine;

        kendo.ViewContainer = ViewContainer;
        kendo.Fragment = Fragment;
        kendo.Layout = Layout;
        kendo.View = View;
        kendo.ViewClone = ViewClone;

    })(window.kendo.jQuery);
    var kendo$S = kendo;

    var __meta__$X = {
        id: "floatinglabel",
        name: "FloatingLabel",
        category: "framework",
        depends: ["core"],
        hidden: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            ui = kendo.ui,
            NS = ".kendoFloatingLabel",
            FLOATINGLABELCONTAINER = "k-floating-label-container",
            EMPTY = "k-empty",
            FOCUSED = "k-focus",
            STATEDISABLED = "k-disabled",
            NOCLICKCLASS = "k-no-click",
            STATEREADONLY = "k-readonly";

        var FloatingLabel = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                options = $.extend(true, {}, options);

                that.widget = that.options.widget;
                that.widgetWrapper = that.widget.wrapper[0];

                that.refresh();
                that._editable({
                    readonly: that.options.widget.options.readonly !== undefined$1 ? that.options.widget.options.readonly : false,
                    disable: that.options.widget.options.enable !== undefined$1 ? !(that.options.widget.options.enable) : false
                });

                if (that.widgetWrapper.style.width) {
                    that.element.css("width", that.widgetWrapper.style.width);
                    that.widgetWrapper.style.width = "100%";
                }

                that.element.addClass(FLOATINGLABELCONTAINER);

                kendo.notify(that);
            },

            options: {
                name: 'FloatingLabel',
                widget: null,
                useReadOnlyClass: false,
                floatCheck: function (ref) {
                    var element = ref.element;

                    return !element.val();
        }
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });
            },

            refresh: function() {
                var that = this;
                var element = that.element;

                element
                    .removeClass(EMPTY)
                    .removeClass(FOCUSED);

                if (that.options.floatCheck({ element: that.options.widget.element, floating: that.element })) {
                    element.addClass(EMPTY);
                }

                if (document.activeElement === that.options.widget.element[0]
                    || (that.options.widget.input && document.activeElement === that.options.widget.input[0])) {

                    element.addClass(FOCUSED);
                }
            },

            destroy: function() {
                var that = this;

                that.element.off(NS);
                Widget.fn.destroy.call(that);
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var disable = options.disable;
                var readonly = options.readonly;

                element.off(NS);

                if (!readonly && !disable) {
                    element
                        .removeClass(STATEDISABLED)
                        .removeClass(that.options.useReadOnlyClass ? STATEREADONLY : NOCLICKCLASS);

                    element.on("focusin" + NS, that.refresh.bind(that));
                    element.on("focusout" + NS, that.refresh.bind(that));
                } else {
                    element
                        .toggleClass(STATEDISABLED, disable)
                        .toggleClass(that.options.useReadOnlyClass ? STATEREADONLY : NOCLICKCLASS, readonly);
                }
            }
        });
        ui.plugin(FloatingLabel);
    })(window.kendo.jQuery);
    var kendo$R = kendo;

    var __meta__$W = {
        id: 'label',
        name: 'Label',
        category: 'framework',
        description: 'Abstraction of label rendering for inputs',
        depends: ['core', 'floatinglabel'],
        hidden: true
    };

    var kendo$Q = window.kendo;
    var $$1 = kendo$Q.jQuery;
    var ui = kendo$Q.ui;
    var Widget = ui.Widget;
    var isFunction = kendo$Q.isFunction;

    var LABELCLASSES = "k-label k-input-label";

    var Label = Widget.extend({
        options: {
            name: "Label",
            widget: null
        },

        init: function(element, options) {
            var that = this;

            element = element || $$1("<label></label>");

            Widget.fn.init.call(that, element, options);
            options = $$1.extend(true, {}, options);

            that.widget = options.widget;

            if (options.floating) {
                that._floatingLabel();
            }

            that._label();
        },

        destroy: function() {
            if (this.floatingLabel) {
                this.floatingLabel.destroy();
            }
            Widget.fn.destroy.call(this);
        },

        _unwrapFloating: function() {
            var that = this;

            if (that.floatingLabel) {
                that.floatingLabel.destroy();
                that.widget.wrapper.unwrap(that._floatingLabelContainer);
            }
        },

        setOptions: function(options) {
            var that = this;
            var removeFloating = false;

            if (typeof(options) === 'string' || ($$1.isPlainObject(options) && options.floating === false )) {
                removeFloating = true;
            }

            options = $$1.isPlainObject(options) ? options : { content: options };

            Widget.fn.setOptions.call(that, options);

            if (removeFloating && that.floatingLabel) {
                that._unwrapFloating();
                that.floatingLabel.destroy();
                delete that.floatingLabel;
            } else if (options.floating === true && !that.floatingLabel) {
                that.element.remove();
                that._floatingLabel();
            }

            that._label();

            if (that.floatingLabel) {
                that.floatingLabel.refresh();
            }
        },

        _label: function() {
            var that = this;
            var element = that.widget.element;
            var options = that.options;
            var id = element.attr("id");
            var labelText = options.content;

            if (isFunction(labelText)) {
                labelText = labelText.call(that);
            }

            if (!labelText) {
                labelText = "";
            }

            if (!id) {
                id = options.name + "_" + kendo$Q.guid();
                element.attr("id", id);
            }

            that.element.addClass(LABELCLASSES)
                .attr("for", id)
                .text(labelText)
                .insertBefore(that.options.beforeElm || that.widget.wrapper);
        },

        _floatingLabel: function() {
            var that = this;
            var options = $$1.extend({}, that.options);
            var floating;

            delete options.name;

            floating = options.floating || false;

            if (floating) {
                that._floatingLabelContainer = that.widget.wrapper.wrap("<span></span>").parent();
                that.floatingLabel = new kendo$Q.ui.FloatingLabel(that._floatingLabelContainer, $$1.extend({}, options));
            }
        }
    });

    kendo$Q.ui.plugin(Label);

    var __meta__$V = {
        id: "data.signalr",
        name: "SignalR",
        category: "framework",
        depends: [ "data" ],
        hidden: true
    };

    (function($) {
        var kendo = window.kendo;
        var isFunction = kendo.isFunction;

        function isJQueryPromise(promise) {
            return promise && isFunction(promise.done) && isFunction(promise.fail);
        }

        function isNativePromise(promise) {
            return promise && isFunction(promise.then) && isFunction(promise.catch);
        }

        var transport = kendo.data.RemoteTransport.extend({
            init: function(options) {
                var signalr = options && options.signalr ? options.signalr : {};

                var promise = signalr.promise;

                if (!promise) {
                    throw new Error('The "promise" option must be set.');
                }

                if (!isJQueryPromise(promise) && !isNativePromise(promise)) {
                    throw new Error('The "promise" option must be a Promise.');
                }

                this.promise = promise;

                var hub = signalr.hub;

                if (!hub) {
                    throw new Error('The "hub" option must be set.');
                }

                if (typeof hub.on != "function" || typeof hub.invoke != "function") {
                    throw new Error('The "hub" option is not a valid SignalR hub proxy.');
                }

                this.hub = hub;

                kendo.data.RemoteTransport.fn.init.call(this, options);
            },

            push: function(callbacks) {
                var client = this.options.signalr.client || {};

                if (client.create) {
                    this.hub.on(client.create, callbacks.pushCreate);
                }

                if (client.update) {
                    this.hub.on(client.update, callbacks.pushUpdate);
                }

                if (client.destroy) {
                    this.hub.on(client.destroy, callbacks.pushDestroy);
                }
            },

            _crud: function(options, type) {
                var hub = this.hub;
                var promise = this.promise;
                var server = this.options.signalr.server;

                if (!server || !server[type]) {
                    throw new Error(kendo.format('The "server.{0}" option must be set.', type));
                }

                var args = [server[type]];

                var data = this.parameterMap(options.data, type);

                if (!$.isEmptyObject(data)) {
                    args.push(data);
                }

                if (isJQueryPromise(promise)) {
                    promise.done(function() {
                        hub.invoke.apply(hub, args)
                                  .done(options.success)
                                  .fail(options.error);
                    });
                } else if (isNativePromise(promise)) {
                    promise.then(function() {
                        hub.invoke.apply(hub, args)
                                  .then(options.success)
                                  .catch(options.error);
                    });
                }
            },

            read: function(options) {
                this._crud(options, "read");
            },

            create: function(options) {
                this._crud(options, "create");
            },

            update: function(options) {
                this._crud(options, "update");
            },

            destroy: function(options) {
                this._crud(options, "destroy");
            }
        });

        $.extend(true, kendo.data, {
            transports: {
                signalr: transport
            }
        });

    })(window.kendo.jQuery);
    var kendo$P = kendo;

    var __meta__$U = {
        id: "validator",
        name: "Validator",
        category: "web",
        description: "The Validator offers an easy way to do a client-side form validation.",
        depends: [ "core" ]
    };


    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            NS = ".kendoValidator",
            INVALIDMSG = "k-invalid-msg",
            invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),
            INVALIDINPUT = "k-invalid",
            VALIDINPUT = "k-valid",
            VALIDATIONSUMMARY = "k-validation-summary",
            INVALIDLABEL = "k-text-error",
            MESSAGEBOX = "k-messagebox k-messagebox-error",
            INPUTINNER = ".k-input-inner",
            INPUTWRAPPER = ".k-input",
            ARIAINVALID = "aria-invalid",
            ARIADESCRIBEDBY = "aria-describedby",
            emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,
            urlRegExp = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
            INPUTSELECTOR = ":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])",
            CHECKBOXSELECTOR = ":checkbox:not([disabled],[readonly])",
            NUMBERINPUTSELECTOR = "[type=number],[type=range]",
            BLUR = "blur",
            NAME = "name",
            FORM = "form",
            NOVALIDATE = "novalidate",
            //events
            VALIDATE = "validate",
            CHANGE = "change",
            VALIDATE_INPUT = "validateInput",

            patternMatcher = function(value, pattern) {
                if (typeof pattern === "string") {
                    pattern = new RegExp('^(?:' + pattern + ')$');
                }
                return pattern.test(value);
            },
            matcher = function(input, selector, pattern) {
                var value = input.val();

                if (input.filter(selector).length && value !== "") {
                    return patternMatcher(value, pattern);
                }
                return true;
            },
            hasAttribute = function(input, name) {
                if (input.length) {
                    return input[0].attributes[name] != null;
                }
                return false;
            };

        if (!kendo.ui.validator) {
            kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };
        }

        function resolveRules(element) {
            var resolvers = kendo.ui.validator.ruleResolvers || {},
                rules = {},
                name;

            for (name in resolvers) {
                $.extend(true, rules, resolvers[name].resolve(element));
            }
            return rules;
        }

        function decode(value) {
            return value.replace(/&amp/g, '&amp;')
                .replace(/&quot;/g, '"')
                .replace(/&#39;/g, "'")
                .replace(/&lt;/g, '<')
                .replace(/&gt;/g, '>');
        }

        function numberOfDecimalDigits(value) {
            value = (value + "").split('.');
            if (value.length > 1) {
                return value[1].length;
            }
            return 0;
        }

        function parseHtml(text) {
            if ($.parseHTML) {
                return $($.parseHTML(text));
            }
            return $(text);
        }

        function searchForMessageContainer(elements, fieldName) {
            var containers = $(),
                element,
                attr;

            for (var idx = 0, length = elements.length; idx < length; idx++) {
                element = elements[idx];
                if (invalidMsgRegExp.test(element.className)) {
                    attr = element.getAttribute(kendo.attr("for"));
                    if (attr === fieldName) {
                        containers = containers.add(element);
                    }
                }
            }
            return containers;
        }

        function isLabelFor(label, element) {
            if (!label) {
                return false;
            }
            if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {
                return false;
            }
            if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {
                return false;
            }
            if (label.getAttribute('for') !== element.getAttribute('id')) {
                return false;
            }

            return true;
        }

        var SUMMARYTEMPLATE = function (ref) {
            var errors = ref.errors;

            var result = '<ul>';
            for (var i = 0; i < errors.length; i += 1) {
                result += "<li><a data-field=\"" + (errors[i].field) + "\" href=\"#\">" + (errors[i].message) + "</a></li>";
            }

            result += '</ul>';
            return result;
        };

        var Validator = Widget.extend({
            init: function(element, options) {
                var that = this,
                    resolved = resolveRules(element),
                    validateAttributeSelector = "[" + kendo.attr("validate") + "!=false]";

                options = options || {};

                options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);
                options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);

                Widget.fn.init.call(that, element, options);

                that._errorTemplate = kendo.template(that.options.errorTemplate);
                that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);

                if (that.element.is(FORM)) {
                    that.element.attr(NOVALIDATE, NOVALIDATE);
                }

                that._inputSelector = INPUTSELECTOR + validateAttributeSelector;
                that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;

                that._errors = {};
                that._attachEvents();
                that._isValidated = false;

                if (that._validateOnInit()) {
                    that.validate();
                }
            },

            events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],

            options: {
                name: "Validator",
                errorTemplate: function (ref) {
                    var message = ref.message;

                    return ("<span class=\"k-form-error\">" + message + "</span>");
        },
                messages: {
                    required: "{0} is required",
                    pattern: "{0} is not valid",
                    min: "{0} should be greater than or equal to {1}",
                    max: "{0} should be smaller than or equal to {1}",
                    step: "{0} is not valid",
                    email: "{0} is not valid email",
                    url: "{0} is not valid URL",
                    date: "{0} is not valid date",
                    dateCompare: "End date should be greater than or equal to the start date",
                    captcha: "The text you entered doesn't match the image."
                },
                rules: {
                    required: function(input) {
                        var noNameCheckbox = !input.attr("name") && !input.is(":checked"),
                            name = input.attr("name"),
                            quote = !!name && name.indexOf("'") > -1 ? '\"' : "'",
                            namedCheckbox = input.attr("name") && !this.element.find("input[name=" + quote + input.attr("name") + quote + "]:checked").length,
                            checkbox = input.filter("[type=checkbox]").length && (noNameCheckbox || namedCheckbox),
                            radio = input.filter("[type=radio]").length && !this.element.find("input[name=" + quote + input.attr("name") + quote + "]:checked").length,
                            value = input.val();

                        return !(hasAttribute(input, "required") && (!value || value === "" || value.length === 0 || checkbox || radio));
                    },
                    pattern: function(input) {
                        if (input.filter("[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]").filter("[pattern]").length && input.val() !== "") {
                            return patternMatcher(input.val(), input.attr("pattern"));
                        }
                        return true;
                    },
                    min: function(input) {
                        if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[min]").length && input.val() !== "") {
                            var min = parseFloat(input.attr("min")) || 0,
                                val = kendo.parseFloat(input.val());

                            return min <= val;
                        }
                        return true;
                    },
                    max: function(input) {
                        if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[max]").length && input.val() !== "") {
                            var max = parseFloat(input.attr("max")) || 0,
                                val = kendo.parseFloat(input.val());

                            return max >= val;
                        }
                        return true;
                    },
                    step: function(input) {
                        if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[step]").length && input.val() !== "") {
                            var min = parseFloat(input.attr("min")) || 0,
                                step = parseFloat(input.attr("step")) || 1,
                                val = parseFloat(input.val()),
                                decimals = numberOfDecimalDigits(step),
                                raise;

                            if (decimals) {
                                raise = Math.pow(10, decimals);
                                return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;
                            }
                            return ((val - min) % step) === 0;
                        }
                        return true;
                    },
                    email: function(input) {
                        return matcher(input, "[type=email],[" + kendo.attr("type") + "=email]", emailRegExp);
                    },
                    url: function(input) {
                        return matcher(input, "[type=url],[" + kendo.attr("type") + "=url]", urlRegExp);
                    },
                    date: function(input) {
                        if (input.filter("[type^=date],[" + kendo.attr("type") + "=date]").length && input.val() !== "") {
                            return kendo.parseDate(input.val(), input.attr(kendo.attr("format"))) !== null;
                        }
                        return true;
                    },
                    captcha: function(input) {
                        if (input.filter("[" + kendo.attr("role") + "=captcha]").length) {
                            var that = this,
                                captcha = kendo.widgetInstance(input),
                                isValidated = function(isValid) {
                                    return typeof(isValid) !== 'undefined' && isValid !== null;
                                };

                            if (!input.data("captcha_validating") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {
                                input.data("captcha_validating", true);
                                that._validating = true;
                                captcha.validate().done(function() {
                                    that._validating = false;
                                    that._checkElement(input);
                                }).fail(function(data) {
                                    that._validating = false;
                                    if (data.error && data.error === "handler_not_defined") {
                                        window.console.warn("Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.");
                                    }
                                });
                            }

                            if (isValidated(captcha.isValid())) {
                                input.removeData("captcha_validating");
                                return captcha.isValid();
                            }
                        }
                        return true;
                    }
                },
                validateOnBlur: true,
                validationSummary: false
            },

            _allowSubmit: function() {
                return kendo.ui.validator.allowSubmit(this.element, this.errors());
            },

            _validateOnInit: function() {
                return kendo.ui.validator.validateOnInit(this.element);
            },

            destroy: function() {
                Widget.fn.destroy.call(this);

                this.element.off(NS);

                if (this.validationSummary) {
                    this.validationSummary.off(NS);
                    this.validationSummary = null;
                }
            },

            value: function() {
                if (!this._isValidated) {
                    return false;
                }

                return this.errors().length === 0;
            },

            _submit: function(e) {
                if ((!this.validate() && !this._allowSubmit()) || this._validating) {
                    e.stopPropagation();
                    e.stopImmediatePropagation();
                    e.preventDefault();
                    return false;
                }
                return true;
            },

            _checkElement: function(element) {
                var state = this.value();

                this.validateInput(element);

                if (this.value() !== state) {
                    this.trigger(CHANGE);
                }
            },

            _attachEvents: function() {
                var that = this;

                if (that.element.is(FORM)) {
                    that.element.on("submit" + NS, that._submit.bind(that));
                }

                if (that.options.validateOnBlur) {
                    if (!that.element.is(INPUTSELECTOR)) {
                        that.element.on(BLUR + NS, that._inputSelector, function() {
                            that._checkElement($(this));
                        });

                        that.element.on("click" + NS, that._checkboxSelector, function() {
                            that._checkElement($(this));
                        });
                    } else {
                        that.element.on(BLUR + NS, function() {
                            that._checkElement(that.element);
                        });

                        if (that.element.is(CHECKBOXSELECTOR)) {
                            that.element.on("click" + NS, function() {
                                that._checkElement(that.element);
                            });
                        }
                    }
                }
            },

            validate: function() {
                var inputs;
                var idx;
                var result = false;
                var length;

                var isValid = this.value();

                this._errors = {};

                if (!this.element.is(INPUTSELECTOR)) {
                    var invalid = false;

                    inputs = this.element.find(this._inputSelector);

                    for (idx = 0, length = inputs.length; idx < length; idx++) {
                        if (!this.validateInput(inputs.eq(idx))) {
                            invalid = true;
                        }
                    }

                    result = !invalid;
                } else {
                    result = this.validateInput(this.element);
                }

                if (this.options.validationSummary && !isValid) {
                    this.showValidationSummary();
                }

                this.trigger(VALIDATE, { valid: result, errors: this.errors() });

                if (isValid !== result) {
                    this.trigger(CHANGE);
                }

                return result;
            },

            validateInput: function(input) {
                input = $(input);


                this._isValidated = true;

                var that = this,
                    template = that._errorTemplate,
                    result = that._checkValidity(input),
                    valid = result.valid,
                    widgetInstance,
                    className = "." + INVALIDMSG,
                    fieldName = (input.attr(NAME) || ""),
                    lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {
                        var element = $(this);
                        if (element.filter("[" + kendo.attr("for") + "]").length) {
                            return element.attr(kendo.attr("for")) === fieldName;
                        }

                        return true;

                    })).addClass("k-hidden"),
                    messageText = !valid ? that._extractMessage(input, result.key) : "",
                    messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : "",
                    wasValid = !input.attr(ARIAINVALID),
                    isInputInner = input.is(INPUTINNER),
                    inputWrapper = input.parent(INPUTWRAPPER);

                input.removeAttr(ARIAINVALID);

                if (input.hasClass("k-hidden")) {
                    widgetInstance = kendo.widgetInstance(input.closest(".k-signature"));
                }

                if (input.is("[type=radio]")) {
                    widgetInstance = kendo.widgetInstance(input.closest(".k-radio-list"));
                }

                if (input.is("[type=checkbox]")) {
                    widgetInstance = kendo.widgetInstance(input.closest(".k-checkbox-list"));
                }

                if (!valid && !input.data("captcha_validating")) {
                    that._errors[fieldName] = messageText;
                    var lblId = lbl.attr('id');

                    that._decorateMessageContainer(messageLabel, fieldName);


                    if (lblId) {
                        messageLabel.attr('id', lblId);
                    }

                    if (lbl.length !== 0) {
                        lbl.replaceWith(messageLabel);
                    } else {
                        widgetInstance = widgetInstance || kendo.widgetInstance(input);
                        var parentElement = input.parent().get(0);
                        var nextElement = input.next().get(0);
                        var prevElement = input.prev().get(0);

                        // Get the instance of the RadioGroup which is not initialized on the input element
                        if (!widgetInstance && input.is("[type=radio]")) {
                            widgetInstance = kendo.widgetInstance(input.closest(".k-radio-list"));
                        }

                        // Get the instance of the CheckBoxGroup which is not initialized on the input element
                        if (!widgetInstance && input.is("[type=checkbox]")) {
                            widgetInstance = kendo.widgetInstance(input.closest(".k-checkbox-list"));
                        }

                        if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || ["Signature", "RadioGroup", "CheckBoxGroup"].indexOf(widgetInstance.options.name) > -1)) {
                            messageLabel.insertAfter(widgetInstance.wrapper);
                        } else if (parentElement && parentElement.nodeName === "LABEL") {
                            // Input inside label
                            messageLabel.insertAfter(parentElement);
                        } else if (nextElement && isLabelFor(nextElement, input[0])) {
                            // Input before label
                            messageLabel.insertAfter(nextElement);
                        } else if (prevElement && isLabelFor(prevElement, input[0])) {
                            // Input after label
                            messageLabel.insertAfter(input);
                        } else if (isInputInner && inputWrapper.length) {
                            // Input after input wrapper
                            messageLabel.insertAfter(inputWrapper);
                        } else {
                            messageLabel.insertAfter(input);
                        }
                    }

                    messageLabel.removeClass("k-hidden");

                    input.attr(ARIAINVALID, true);
                } else {
                    delete that._errors[fieldName];
                }

                if (wasValid !== valid) {
                    this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });
                }

                widgetInstance = (widgetInstance && widgetInstance.options.name == "Signature") ? widgetInstance : kendo.widgetInstance(input);
                if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper)) {
                    input.toggleClass(INVALIDINPUT, !valid);
                    input.toggleClass(VALIDINPUT, valid);
                }

                if (widgetInstance) {
                    var inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;
                    var inputLabel = widgetInstance._inputLabel;

                    if (inputWrap) {
                        inputWrap.toggleClass(INVALIDINPUT, !valid);
                        inputWrap.toggleClass(VALIDINPUT, valid);
                    }
                    if (inputLabel) {
                        inputLabel.toggleClass(INVALIDLABEL, !valid);
                    }
                }

                if (wasValid !== valid) {
                    var errorId = messageLabel ? messageLabel.attr("id") : lbl.attr("id");

                    that._associateMessageContainer(input, errorId);

                    if (this.options.validationSummary && this.options.validateOnBlur) {
                        this.showValidationSummary();
                    }
                }

                return valid;
            },

            hideMessages: function() {
                var that = this,
                    className = "." + INVALIDMSG,
                    element = that.element;

                that._disassociateMessageContainers();

                if (!element.is(INPUTSELECTOR)) {
                    element.find(className).addClass("k-hidden");
                } else {
                    element.next(className).addClass("k-hidden");
                }
            },

            reset: function() {
                var that = this,
                    inputs = that.element.find("." + INVALIDINPUT),
                    labels = that.element.find("." + INVALIDLABEL);

                that._errors = [];

                that.hideMessages();

                that.hideValidationSummary();

                inputs.removeAttr(ARIAINVALID);
                inputs.removeClass(INVALIDINPUT);
                labels.removeClass(INVALIDLABEL);
            },

            _findMessageContainer: function(fieldName) {
                var locators = kendo.ui.validator.messageLocators,
                    name,
                    containers = $();

                for (var idx = 0, length = this.element.length; idx < length; idx++) {
                    containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName("*"), fieldName));
                }

                for (name in locators) {
                    containers = containers.add(locators[name].locate(this.element, fieldName));
                }

                return containers;
            },

            _decorateMessageContainer: function(container, fieldName) {
                var locators = kendo.ui.validator.messageLocators,
                    name;

                container.addClass(INVALIDMSG)
                    .attr(kendo.attr("for"), fieldName || "");

                if (!container.attr("id")) {
                    container.attr("id", fieldName + "-error");
                }

                for (name in locators) {
                    locators[name].decorate(container, fieldName);
                }
            },

            _extractMessage: function(input, ruleKey) {
                var that = this,
                    customMessage = that.options.messages[ruleKey],
                    fieldName = input.attr(NAME),
                    nonDefaultMessage;

                if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {
                     nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;
                }

                customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;

                return kendo.format(input.attr(kendo.attr(ruleKey + "-msg")) || input.attr("validationMessage") || nonDefaultMessage || customMessage || input.attr("title") || "",
                    fieldName,
                    input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));
            },

            _checkValidity: function(input) {
                var rules = this.options.rules,
                    rule;

                for (rule in rules) {
                    if (!rules[rule].call(this, input)) {
                        return { valid: false, key: rule };
                    }
                }

                return { valid: true };
            },

            errors: function() {
                var results = [],
                    errors = this._errors,
                    error;

                for (error in errors) {
                    results.push(errors[error]);
                }
                return results;
            },

            setOptions: function(options) {
                if (options.validationSummary) {
                    this.hideValidationSummary();
                }

                kendo.deepExtend(this.options, options);

                this.destroy();

                this.init(this.element, this.options);

                this._setEvents(this.options);
            },

            _getInputNames: function() {
                var that = this,
                    inputs = that.element.find(that._inputSelector),
                    sorted = [];

                for (var idx = 0, length = inputs.length; idx < length; idx++) {
                    var input = $(inputs[idx]);

                    if (hasAttribute(input, NAME)) {
                        // Add current name if:
                        // - not present so far;
                        // - present but not part of CheckBoxGroup or RadioGroup.
                        if (sorted.indexOf(input.attr(NAME)) === -1 ||
                            (input.closest(".k-checkbox-list").length === 0 &&
                            input.closest(".k-radio-list").length === 0)) {
                                sorted.push(input.attr(NAME));
                        }
                    }
                }

                return sorted;
            },

            _associateMessageContainer: function(input, errorId) {
                var nextFocusable = kendo.getWidgetFocusableElement(input);

                if (!nextFocusable || !errorId) {
                    return;
                }

                kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);
            },

            _disassociateMessageContainers: function() {
                var that = this,
                    inputs = that.element.find("." + INVALIDINPUT).addBack(),
                    input, errorId;

                for (var i = 0; i < inputs.length; i += 1) {
                    input = $(inputs[i]);

                    if (input.is("input")) {
                        errorId = that._findMessageContainer(input.attr(NAME))
                            .add(input.next("." + INVALIDMSG))
                            .attr("id");

                        that._associateMessageContainer(input, errorId);
                    }
                }
            },

            _errorsByName: function() {
                var that = this,
                    inputNames = that._getInputNames(),
                    sorted = [];

                for (var i = 0; i < inputNames.length; i += 1) {
                    var name = inputNames[i];

                    if (that._errors[name]) {
                        sorted.push({
                            field: name,
                            message: that._errors[name]
                        });
                    }
                }

                return sorted;
            },

            _renderSummary: function() {
                var that = this,
                    options = this.options.validationSummary,
                    element = this.element,
                    prevElement = element.prev(),
                    container;

                if (options.container) {
                    container = $(options.container);
                } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {
                    container = prevElement;
                } else {
                    container = $("<div />").insertBefore(that.element);
                }

                container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(" "));
                container.attr("role", "alert");

                container.on("click" + NS, that._summaryClick.bind(that));

                return container;
            },

            _summaryClick: function(e) {
                e.preventDefault();

                var that = this,
                    link = $(e.target),
                    target = that.element.find("[name='" + link.data("field") + "']"),
                    nextFocusable;

                if (!target.length) {
                    return;
                }

                nextFocusable = kendo.getWidgetFocusableElement(target);

                if (nextFocusable) {
                    nextFocusable.trigger("focus");
                }
            },

            showValidationSummary: function() {
                var that = this,
                    summary = that.validationSummary,
                    errors = that._errorsByName(),
                    errorsList;

                if (!summary) {
                    summary = that.validationSummary = that._renderSummary();
                }

                errorsList = parseHtml(that._summaryTemplate({
                    errors: errors
                }));

                summary.html(errorsList);

                summary.toggleClass("k-hidden", !errors.length);
            },

            hideValidationSummary: function() {
                var that = this,
                    summary = that.validationSummary;

                if (!summary) {
                    return;
                }

                summary.addClass("k-hidden");
            }
        });

        kendo.ui.plugin(Validator);
    })(window.kendo.jQuery);
    var kendo$O = kendo;

    var __meta__$T = {
        id: "draganddrop",
        name: "Drag & drop",
        category: "framework",
        description: "Drag & drop functionality for any DOM element.",
        depends: [ "core", "userevents" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            support = kendo.support,
            document = window.document,
            $window = $(window),
            Class = kendo.Class,
            Widget = kendo.ui.Widget,
            Observable = kendo.Observable,
            UserEvents = kendo.UserEvents,
            ClickMoveClick = kendo.ClickMoveClick,
            extend = $.extend,
            getOffset = kendo.getOffset,
            draggables = {},
            dropTargets = {},
            dropAreas = {},
            lastDropTarget,
            elementUnderCursor = kendo.elementUnderCursor,
            KEYUP = "keyup",
            CHANGE = "change",

            // Draggable events
            DRAGSTART = "dragstart",
            HOLD = "hold",
            DRAG = "drag",
            DRAGEND = "dragend",
            DRAGCANCEL = "dragcancel",
            HINTDESTROYED = "hintDestroyed",

            // DropTarget events
            DRAGENTER = "dragenter",
            DRAGLEAVE = "dragleave",
            DROP = "drop";

        function contains(parent, child) {
            try {
                return $.contains(parent, child) || parent == child;
            } catch (e) {
                return false;
            }
        }

        function numericCssPropery(element, property) {
            return parseInt(element.css(property), 10) || 0;
        }

        function within(value, range) {
            return Math.min(Math.max(value, range.min), range.max);
        }

        function containerBoundaries(container, element) {
            var offset = getOffset(container),
                outerWidth = kendo._outerWidth,
                outerHeight = kendo._outerHeight,
                minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
                minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
                maxX = minX + container.width() - outerWidth(element, true),
                maxY = minY + container.height() - outerHeight(element, true);

            return {
                x: { min: minX, max: maxX },
                y: { min: minY, max: maxY }
            };
        }

        function checkTarget(target, targets, areas) {
            var theTarget, theFilter, i = 0,
                targetLen = targets && targets.length,
                areaLen = areas && areas.length;

            while (target && target.parentNode) {
                for (i = 0; i < targetLen; i ++) {
                    theTarget = targets[i];
                    if (theTarget.element[0] === target) {
                        return { target: theTarget, targetElement: target };
                    }
                }

                for (i = 0; i < areaLen; i ++) {
                    theFilter = areas[i];
                    if ($.contains(theFilter.element[0], target) && support.matchesSelector.call(target, theFilter.options.filter)) {
                        return { target: theFilter, targetElement: target };
                    }
                }

                target = target.parentNode;
            }

            return undefined$1;
        }

        var TapCapture = Observable.extend({
            init: function(element, options) {
                var that = this,
                    domElement = element[0];

                that.capture = false;

                if (domElement.addEventListener) {
                    $.each(kendo.eventMap.down.split(" "), function() {
                        domElement.addEventListener(this, that._press.bind(that), true);
                    });
                    $.each(kendo.eventMap.up.split(" "), function() {
                        domElement.addEventListener(this, that._release.bind(that), true);
                    });
                } else {
                    $.each(kendo.eventMap.down.split(" "), function() {
                        domElement.attachEvent(this, that._press.bind(that));
                    });
                    $.each(kendo.eventMap.up.split(" "), function() {
                        domElement.attachEvent(this, that._release.bind(that));
                    });
                }

                Observable.fn.init.call(that);

                that.bind(["press", "release"], options || {});
            },

            captureNext: function() {
                this.capture = true;
            },

            cancelCapture: function() {
                this.capture = false;
            },

            _press: function(e) {
                var that = this;
                that.trigger("press");
                if (that.capture) {
                    e.preventDefault();
                }
            },

            _release: function(e) {
                var that = this;
                that.trigger("release");

                if (that.capture) {
                    e.preventDefault();
                    that.cancelCapture();
                }
            }
        });

        var PaneDimension = Observable.extend({
            init: function(options) {
                var that = this;
                Observable.fn.init.call(that);

                that.forcedEnabled = false;

                $.extend(that, options);

                that.scale = 1;

                if (that.horizontal) {
                    that.measure = "offsetWidth";
                    that.scrollSize = "scrollWidth";
                    that.axis = "x";
                } else {
                    that.measure = "offsetHeight";
                    that.scrollSize = "scrollHeight";
                    that.axis = "y";
                }
            },

            makeVirtual: function() {
                $.extend(this, {
                    virtual: true,
                    forcedEnabled: true,
                    _virtualMin: 0,
                    _virtualMax: 0
                });
            },

            virtualSize: function(min, max) {
                if (this._virtualMin !== min || this._virtualMax !== max) {
                    this._virtualMin = min;
                    this._virtualMax = max;
                    this.update();
                }
            },

            outOfBounds: function(offset) {
                return offset > this.max || offset < this.min;
            },

            forceEnabled: function() {
                this.forcedEnabled = true;
            },

            getSize: function() {
                return this.container[0][this.measure];
            },

            getTotal: function() {
                return this.element[0][this.scrollSize];
            },

            rescale: function(scale) {
                this.scale = scale;
            },

            update: function(silent) {
                var that = this,
                    total = that.virtual ? that._virtualMax : that.getTotal(),
                    scaledTotal = total * that.scale,
                    size = that.getSize();

                if (total === 0 && !that.forcedEnabled) {
                    return; // we are not visible.
                }

                that.max = that.virtual ? -that._virtualMin : 0;
                that.size = size;
                that.total = scaledTotal;
                that.min = Math.min(that.max, size - scaledTotal);
                that.minScale = size / total;
                that.centerOffset = (scaledTotal - size) / 2;

                that.enabled = that.forcedEnabled || (scaledTotal > size);

                if (!silent) {
                    that.trigger(CHANGE, that);
                }
            }
        });

        var PaneDimensions = Observable.extend({
            init: function(options) {
                var that = this;

                Observable.fn.init.call(that);

                that.x = new PaneDimension(extend({ horizontal: true }, options));
                that.y = new PaneDimension(extend({ horizontal: false }, options));
                that.container = options.container;
                that.forcedMinScale = options.minScale;
                that.maxScale = options.maxScale || 100;

                that.bind(CHANGE, options);
            },

            rescale: function(newScale) {
                this.x.rescale(newScale);
                this.y.rescale(newScale);
                this.refresh();
            },

            centerCoordinates: function() {
                return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };
            },

            refresh: function() {
                var that = this;
                that.x.update();
                that.y.update();
                that.enabled = that.x.enabled || that.y.enabled;
                that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);
                that.fitScale = Math.max(that.x.minScale, that.y.minScale);
                that.trigger(CHANGE);
            }
        });

        var PaneAxis = Observable.extend({
            init: function(options) {
                var that = this;
                extend(that, options);
                Observable.fn.init.call(that);
            },

            outOfBounds: function() {
                return this.dimension.outOfBounds(this.movable[this.axis]);
            },

            dragMove: function(delta) {
                var that = this,
                    dimension = that.dimension,
                    axis = that.axis,
                    movable = that.movable,
                    position = movable[axis] + delta;

                if (!dimension.enabled) {
                    return;
                }

                if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
                    delta *= that.resistance;
                }

                movable.translateAxis(axis, delta);
                that.trigger(CHANGE, that);
            }
        });

        var Pane = Class.extend({

            init: function(options) {
                var that = this,
                    x,
                    y,
                    resistance,
                    movable;

                extend(that, { elastic: true }, options);

                resistance = that.elastic ? 0.5 : 0;
                movable = that.movable;

                that.x = x = new PaneAxis({
                    axis: "x",
                    dimension: that.dimensions.x,
                    resistance: resistance,
                    movable: movable
                });

                that.y = y = new PaneAxis({
                    axis: "y",
                    dimension: that.dimensions.y,
                    resistance: resistance,
                    movable: movable
                });

                that.userEvents.bind(["press", "move", "end", "gesturestart", "gesturechange"], {
                    gesturestart: function(e) {
                        that.gesture = e;
                        that.offset = that.dimensions.container.offset();
                    },

                    press: function(e) {
                        if ($(e.event.target).closest("a").is("[data-navigate-on-press=true]")) {
                            e.sender.cancel();
                        }
                    },

                    gesturechange: function(e) {
                        var previousGesture = that.gesture,
                            previousCenter = previousGesture.center,

                            center = e.center,

                            scaleDelta = e.distance / previousGesture.distance,

                            minScale = that.dimensions.minScale,
                            maxScale = that.dimensions.maxScale,
                            coordinates;

                        if (movable.scale <= minScale && scaleDelta < 1) {
                            // Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;
                            scaleDelta += (1 - scaleDelta) * 0.8;
                        }

                        if (movable.scale * scaleDelta >= maxScale) {
                            scaleDelta = maxScale / movable.scale;
                        }

                        var offsetX = movable.x + that.offset.left,
                            offsetY = movable.y + that.offset.top;

                        coordinates = {
                            x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,
                            y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY
                        };

                        movable.scaleWith(scaleDelta);

                        x.dragMove(coordinates.x);
                        y.dragMove(coordinates.y);

                        that.dimensions.rescale(movable.scale);
                        that.gesture = e;
                        e.preventDefault();
                    },

                    move: function(e) {
                        if (e.event.target.tagName.match(/textarea|input/i)) {
                            return;
                        }

                        if (x.dimension.enabled || y.dimension.enabled) {
                            x.dragMove(e.x.delta);
                            y.dragMove(e.y.delta);
                            e.preventDefault();
                        } else {
                            e.touch.skip();
                        }
                    },

                    end: function(e) {
                        e.preventDefault();
                    }
                });
            }
        });

        var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
            translate;


        if (support.hasHW3D) {
            translate = function(x, y, scale) {
                return "translate3d(" + x + "px," + y + "px,0) scale(" + scale + ")";
            };
        } else {
            translate = function(x, y, scale) {
                return "translate(" + x + "px," + y + "px) scale(" + scale + ")";
            };
        }

        var Movable = Observable.extend({
            init: function(element) {
                var that = this;

                Observable.fn.init.call(that);

                that.element = $(element);
                that.element[0].style.webkitTransformOrigin = "left top";
                that.x = 0;
                that.y = 0;
                that.scale = 1;
                that._saveCoordinates(translate(that.x, that.y, that.scale));
            },

            translateAxis: function(axis, by) {
                this[axis] += by;
                this.refresh();
            },

            scaleTo: function(scale) {
                this.scale = scale;
                this.refresh();
            },

            scaleWith: function(scaleDelta) {
                this.scale *= scaleDelta;
                this.refresh();
            },

            translate: function(coordinates) {
                this.x += coordinates.x;
                this.y += coordinates.y;
                this.refresh();
            },

            moveAxis: function(axis, value) {
                this[axis] = value;
                this.refresh();
            },

            moveTo: function(coordinates) {
                extend(this, coordinates);
                this.refresh();
            },

            refresh: function() {
                var that = this,
                    x = that.x,
                    y = that.y,
                    newCoordinates;

                if (that.round) {
                    x = Math.round(x);
                    y = Math.round(y);
                }

                newCoordinates = translate(x, y, that.scale);

                if (newCoordinates != that.coordinates) {
                    if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
                        that.element[0].style.position = "absolute";
                        that.element[0].style.left = that.x + "px";
                        that.element[0].style.top = that.y + "px";

                    } else {
                        that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
                    }
                    that._saveCoordinates(newCoordinates);
                    that.trigger(CHANGE);
                }
            },

            _saveCoordinates: function(coordinates) {
                this.coordinates = coordinates;
            }
        });

        function destroyDroppable(collection, widget) {
            var groupName = widget.options.group,
            droppables = collection[groupName],
            i;

            Widget.fn.destroy.call(widget);

            if (droppables.length > 1) {
                for (i = 0; i < droppables.length; i++) {
                    if (droppables[i] == widget) {
                        droppables.splice(i, 1);
                        break;
                    }
                }
            } else {
                droppables.length = 0; // WTF, porting this from the previous destroyGroup
                delete collection[groupName];
            }
        }

        var DropTarget = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                var group = that.options.group;

                if (!(group in dropTargets)) {
                    dropTargets[group] = [ that ];
                } else {
                    dropTargets[group].push( that );
                }
            },

            events: [
                DRAGENTER,
                DRAGLEAVE,
                DROP
            ],

            options: {
                name: "DropTarget",
                group: "default"
            },

            destroy: function() {
                destroyDroppable(dropTargets, this);
            },

            _trigger: function(eventName, e) {
                var that = this,
                    draggable = draggables[that.options.group];

                if (draggable) {
                    return that.trigger(eventName, extend({}, e.event, {
                               draggable: draggable,
                               dropTarget: e.dropTarget
                           }));
                }
            },

            _over: function(e) {
                this._trigger(DRAGENTER, e);
            },

            _out: function(e) {
                this._trigger(DRAGLEAVE, e);
            },

            _drop: function(e) {
                var that = this,
                    draggable = draggables[that.options.group];

                if (draggable) {
                    draggable.dropped = !that._trigger(DROP, e);
                }
            }
        });

        DropTarget.destroyGroup = function(groupName) {
            var group = dropTargets[groupName] || dropAreas[groupName],
                i;

            if (group) {
                for (i = 0; i < group.length; i++) {
                    Widget.fn.destroy.call(group[i]);
                }

                group.length = 0;
                delete dropTargets[groupName];
                delete dropAreas[groupName];
            }
        };

        DropTarget._cache = dropTargets;

        var DropTargetArea = DropTarget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                var group = that.options.group;

                if (!(group in dropAreas)) {
                    dropAreas[group] = [ that ];
                } else {
                    dropAreas[group].push( that );
                }
            },

            destroy: function() {
                destroyDroppable(dropAreas, this);
            },

            options: {
                name: "DropTargetArea",
                group: "default",
                filter: null
            }
        });

        var Draggable = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                that._activated = false;

                if (this.options.clickMoveClick) {
                    that.clickMoveClick = new ClickMoveClick(that.element, {
                        global: true,
                        filter: that.options.filter,
                        start: that._startClickMoveClick.bind(that),
                        move: that._drag.bind(that),
                        end: that._end.bind(that),
                        cancel: that._onCancel.bind(that)
                    });
                }

                that.userEvents = new UserEvents(that.element, {
                    global: true,
                    allowSelection: true,
                    filter: that.options.filter,
                    threshold: that.options.distance,
                    start: that._start.bind(that),
                    hold: that._hold.bind(that),
                    move: that._drag.bind(that),
                    end: that._end.bind(that),
                    cancel: that._onCancel.bind(that),
                    select: that._select.bind(that),
                    press: that._press.bind(that),
                });

                if (kendo.support.touch) {
                    that.element.find(that.options.filter).css('touch-action', 'none');
                }

                that._afterEndHandler = that._afterEnd.bind(that);
                that._captureEscape = that._captureEscape.bind(that);
            },

            events: [
                HOLD,
                DRAGSTART,
                DRAG,
                DRAGEND,
                DRAGCANCEL,
                HINTDESTROYED
            ],

            options: {
                name: "Draggable",
                distance: ( kendo.support.touch ? 0 : 5),
                group: "default",
                cursorOffset: null,
                axis: null,
                container: null,
                filter: null,
                ignore: null,
                holdToDrag: false,
                showHintOnHold: false,
                autoScroll: false,
                dropped: false,
                clickMoveClick: false,
                preventOsHoldFeatures: false
            },

            cancelHold: function() {
                this._activated = false;
            },

            _captureEscape: function(e) {
                var that = this;

                if (e.keyCode === kendo.keys.ESC) {
                    that.userEvents.cancel();

                    if (that.clickMoveClick) {
                        that.clickMoveClick.cancel();
                    }

                    this._trigger(DRAGCANCEL, { event: e });
                }
            },

            _updateHint: function(e) {
                var that = this,
                    coordinates,
                    options = that.options,
                    boundaries = that.boundaries,
                    axis = options.axis,
                    cursorOffset = that.options.cursorOffset;

                if (cursorOffset) {
                   coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
                } else {
                    if (e.x.delta !== 0 || e.y.delta !== 0) {
                        that.hintOffset.left += e.x.delta;
                        that.hintOffset.top += e.y.delta;
                        coordinates = $.extend({}, that.hintOffset);
                    } else {
                        that.hintOffset.left = e.x.startLocation + e.x.initialDelta;
                        that.hintOffset.top = e.y.startLocation + e.y.initialDelta;
                        coordinates = $.extend({}, that.hintOffset);
                    }
                }

                if (boundaries) {
                    coordinates.top = within(coordinates.top, boundaries.y);
                    coordinates.left = within(coordinates.left, boundaries.x);
                }

                if (axis === "x") {
                    delete coordinates.top;
                } else if (axis === "y") {
                    delete coordinates.left;
                }

                that.hint.css(coordinates);
            },

            _shouldIgnoreTarget: function(target) {
                var ignoreSelector = this.options.ignore;
                return ignoreSelector && $(target).is(ignoreSelector);
            },

            _select: function(e) {
                if (!this._shouldIgnoreTarget(e.event.target)) {
                    e.preventDefault();
                }
            },

            _startClickMoveClick: function(e) {
                this._activated = true;

                this._start(e);
            },

            _hint: function() {
                var that = this,
                    hint = that.options.hint;

                if (hint) {
                    if (that.hint) {
                        that.hint.stop(true, true).remove();
                    }

                    that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;

                    var offset = getOffset(that.currentTarget);
                    that.hintOffset = offset;

                    that.hint.css( {
                        position: "absolute",
                        zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
                        left: offset.left,
                        top: offset.top
                    })
                    .appendTo(document.body);
                }
            },

            _start: function(e) {
                var that = this,
                    options = that.options,
                    container = options.container ? $(options.container) : null,
                    hint = options.hint;

                if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {
                    that.userEvents.cancel();
                    return;
                }

                that.currentTarget = e.target;
                that.currentTargetOffset = getOffset(that.currentTarget);

                if (hint) {
                    that._hint();
                }

                draggables[options.group] = that;

                that.dropped = false;

                if (container) {
                    that.boundaries = containerBoundaries(container, that.hint);
                }

                $(document).on(KEYUP, that._captureEscape);

                if (that._trigger(DRAGSTART, e)) {
                    that.userEvents.cancel();

                    if (that.clickMoveClick) {
                        that.clickMoveClick.cancel();
                    }

                    that._afterEnd();
                }

                that.userEvents.capture();
            },

            _hold: function(e) {
                this.currentTarget = e.target;

                if (this._trigger(HOLD, e)) {
                    this.userEvents.cancel();
                } else {
                    this._activated = true;
                    if (this.options.showHintOnHold) {
                        this._hint();
                    }
                }
            },

            _drag: function(e) {
                e.preventDefault();

                var cursorElement = this._elementUnderCursor(e);

                if (this.options.autoScroll && this._cursorElement !== cursorElement) {
                    this._scrollableParent = findScrollableParent(cursorElement);
                    this._cursorElement = cursorElement;
                }

                this._lastEvent = e;
                this._processMovement(e, cursorElement);

                if (this.options.autoScroll) {
                    // chrome seems to trigger mousemove when mouse is moved outside of the window (over the Chrome), too.
                    if (this._scrollableParent[0]) {
                        var velocity = autoScrollVelocity(e.x.location, e.y.location, scrollableViewPort(this._scrollableParent));


                        this._scrollCompenstation = $.extend({}, this.hintOffset);
                        this._scrollVelocity = velocity;

                        if (velocity.y === 0 && velocity.x === 0) {
                            clearInterval(this._scrollInterval);
                            this._scrollInterval = null;
                        } else if (!this._scrollInterval) {
                            this._scrollInterval = setInterval(this._autoScroll.bind(this), 50);
                        }
                    }
                }

                if (this.hint) {
                    this._updateHint(e);
                }
            },

            _processMovement: function(e, cursorElement) {
                this._withDropTarget(cursorElement, function(target, targetElement) {
                    if (!target) {
                        if (lastDropTarget) {
                            lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
                            lastDropTarget = null;
                        }
                        return;
                    }

                    if (lastDropTarget) {
                        if (targetElement === lastDropTarget.targetElement) {
                            return;
                        }

                        lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
                    }

                    target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));
                    lastDropTarget = extend(target, { targetElement: targetElement });
                });

                this._trigger(DRAG, extend(e, { dropTarget: lastDropTarget, elementUnderCursor: cursorElement }));
            },

            _autoScroll: function() {
                var parent = this._scrollableParent[0],
                    velocity = this._scrollVelocity,
                    compensation = this._scrollCompenstation;

                if (!parent) {
                    return;
                }

                var cursorElement = this._elementUnderCursor(this._lastEvent);
                this._processMovement(this._lastEvent, cursorElement);

                var yIsScrollable, xIsScrollable;

                var isRootNode = parent === scrollableRoot()[0];

                if (isRootNode) {
                    yIsScrollable = document.body.scrollHeight > $window.height();
                    xIsScrollable = document.body.scrollWidth > $window.width();
                } else {
                    yIsScrollable = parent.offsetHeight <= parent.scrollHeight;
                    xIsScrollable = parent.offsetWidth <= parent.scrollWidth;
                }

                var yDelta = parent.scrollTop + velocity.y;
                var yInBounds = yIsScrollable && yDelta > 0 && yDelta < parent.scrollHeight;

                var xDelta = parent.scrollLeft + velocity.x;
                var xInBounds = xIsScrollable && xDelta > 0 && xDelta < parent.scrollWidth;

                if (yInBounds) {
                    parent.scrollTop += velocity.y;
                } else if (yIsScrollable && yDelta < 0) {
                    parent.scrollTop = 0;
                }

                if (xInBounds) {
                    parent.scrollLeft += velocity.x;
                } else if (xIsScrollable && xDelta < 0) {
                    parent.scrollLeft = 0;
                }

                if (this.hint && isRootNode && (xInBounds || yInBounds)) {
                    if (yInBounds) {
                        compensation.top += velocity.y;
                    }

                    if (xInBounds) {
                        compensation.left += velocity.x;
                    }

                    this.hint.css(compensation);
                }
            },

            _press: function(ev) {
                if (this.options.preventOsHoldFeatures) {
                    ev.target.css('-webkit-user-select', 'none');
                    ev.target.attr('unselectable', 'on');
                    ev.target.one('contextmenu', function (ev) {
                        ev.preventDefault();
                    });
                }
            },

            _end: function(e) {
                this._withDropTarget(this._elementUnderCursor(e), function(target, targetElement) {
                    if (target) {
                        target._drop(extend({}, e, { dropTarget: $(targetElement) }));
                        lastDropTarget = null;
                    }
                });

                clearInterval(this._scrollInterval);
                this._scrollInterval = null;
                this._cancel(this._trigger(DRAGEND, e));
            },

            _onCancel: function(e) {
                this._cancel();
                this._trigger(DRAGCANCEL, { event: e });
            },

            _cancel: function(isDefaultPrevented) {
                var that = this;

                that._scrollableParent = null;
                this._cursorElement = null;
                clearInterval(this._scrollInterval);
                that._activated = false;

                if (that.hint && !that.dropped) {
                    setTimeout(function() {
                        that.hint.stop(true, true);

                        if (isDefaultPrevented) {
                            that._afterEndHandler();
                        } else {
                            that.hint.animate(that.currentTargetOffset, "fast", that._afterEndHandler);
                        }
                    }, 0);
                } else {
                    that._afterEnd();
                }
            },

            _trigger: function(eventName, e) {
                var that = this;

                return that.trigger(
                    eventName, extend(
                    {},
                    e.event,
                    {
                        x: e.x,
                        y: e.y,
                        currentTarget: that.currentTarget,
                        initialTarget: e.touch ? e.touch.initialTouch : null,
                        dropTarget: e.dropTarget,
                        elementUnderCursor: e.elementUnderCursor,
                        clickMoveClick: e.clickMoveClick
                    }
                ));
            },

            _elementUnderCursor: function(e) {
                var target = elementUnderCursor(e),
                    hint = this.hint;

                if (hint && contains(hint[0], target)) {
                    hint.hide();
                    target = elementUnderCursor(e);
                    // IE8 does not return the element in iframe from first attempt
                    if (!target) {
                        target = elementUnderCursor(e);
                    }
                    hint.show();
                }

                return target;
            },

            _withDropTarget: function(element, callback) {
                var result,
                    group = this.options.group,
                    targets = dropTargets[group],
                    areas = dropAreas[group];

                if (targets && targets.length || areas && areas.length) {
                    result = checkTarget(element, targets, areas);

                    if (result) {
                        callback(result.target, result.targetElement);
                    } else {
                        callback();
                    }
                }
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that._afterEnd();

                that.userEvents.destroy();

                if (that.clickMoveClick) {
                    that.clickMoveClick.destroy();
                }

                this._scrollableParent = null;
                this._cursorElement = null;
                clearInterval(this._scrollInterval);

                that.currentTarget = null;
            },

            _afterEnd: function() {
                var that = this;

                if (that.hint) {
                    that.hint.remove();
                }

                delete draggables[that.options.group];

                that.trigger("destroy");
                that.trigger(HINTDESTROYED);
                $(document).off(KEYUP, that._captureEscape);
            }
        });

        kendo.ui.plugin(DropTarget);
        kendo.ui.plugin(DropTargetArea);
        kendo.ui.plugin(Draggable);
        kendo.TapCapture = TapCapture;
        kendo.containerBoundaries = containerBoundaries;

        extend(kendo.ui, {
            Pane: Pane,
            PaneDimensions: PaneDimensions,
            Movable: Movable
        });

        function scrollableViewPort(element) {
            var root = scrollableRoot()[0],
                offset,
                top,
                left;

            if (element[0] === root) {
                top = root.scrollTop;
                left = root.scrollLeft;

                return {
                    top: top,
                    left: left,
                    bottom: top + $window.height(),
                    right: left + $window.width()
                };
            } else {
                offset = element.offset();
                offset.bottom = offset.top + element.height();
                offset.right = offset.left + element.width();
                return offset;
            }
        }

        function scrollableRoot() {
            return $(kendo.support.browser.edge || kendo.support.browser.safari ? document.body : document.documentElement);
        }

        function findScrollableParent(element) {
            var root = scrollableRoot();

            if (!element || element === document.body || element === document.documentElement) {
                return root;
            }

            var parent = $(element)[0];

            while (parent && !kendo.isScrollable(parent) && parent !== document.body) {
                parent = parent.parentNode;
            }

            if (parent === document.body) {
                return root;
            }

            return $(parent);
        }

        function autoScrollVelocity(mouseX, mouseY, rect) {
            var velocity = { x: 0, y: 0 };

            var AUTO_SCROLL_AREA = 50;

            if (mouseX - rect.left < AUTO_SCROLL_AREA) {
                velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));
            } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {
                velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);
            }

            if (mouseY - rect.top < AUTO_SCROLL_AREA) {
                velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));
            } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {
                velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);
            }

            return velocity;
        }

        // export for testing
        kendo.ui.Draggable.utils = {
            autoScrollVelocity: autoScrollVelocity,
            scrollableViewPort: scrollableViewPort,
            findScrollableParent: findScrollableParent
        };

     })(window.kendo.jQuery);
    var kendo$N = kendo;

    var __meta__$S = {
        id: "mobile.scroller",
        name: "Scroller",
        category: "mobile",
        description: "The Kendo Mobile Scroller widget enables touch friendly kinetic scrolling for the contents of a given DOM element.",
        depends: [ "fx", "draganddrop" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            mobile = kendo.mobile,
            fx = kendo.effects,
            ui = mobile.ui,
            extend = $.extend,
            Widget = ui.Widget,
            Class = kendo.Class,
            Movable = kendo.ui.Movable,
            Pane = kendo.ui.Pane,
            PaneDimensions = kendo.ui.PaneDimensions,
            Transition = fx.Transition,
            Animation = fx.Animation,
            abs = Math.abs,
            SNAPBACK_DURATION = 500,
            SCROLLBAR_OPACITY = 0.7,
            FRICTION = 0.96,
            VELOCITY_MULTIPLIER = 10,
            MAX_VELOCITY = 55,
            OUT_OF_BOUNDS_FRICTION = 0.5,
            ANIMATED_SCROLLER_PRECISION = 5,
            RELEASECLASS = "km-scroller-release",
            REFRESHCLASS = "km-scroller-refresh",
            PULL = "pull",
            CHANGE = "change",
            RESIZE = "resize",
            SCROLL = "scroll",
            MOUSE_WHEEL_ID = 2;

        var ZoomSnapBack = Animation.extend({
            init: function(options) {
                var that = this;
                Animation.fn.init.call(that);
                extend(that, options);

                that.userEvents.bind("gestureend", that.start.bind(that));
                that.tapCapture.bind("press", that.cancel.bind(that));
            },

            enabled: function() {
              return this.movable.scale < this.dimensions.minScale;
            },

            done: function() {
                return this.dimensions.minScale - this.movable.scale < 0.01;
            },

            tick: function() {
                var movable = this.movable;
                movable.scaleWith(1.1);
                this.dimensions.rescale(movable.scale);
            },

            onEnd: function() {
                var movable = this.movable;
                movable.scaleTo(this.dimensions.minScale);
                this.dimensions.rescale(movable.scale);
            }
        });

        var DragInertia = Animation.extend({
            init: function(options) {
                var that = this;

                Animation.fn.init.call(that);

                extend(that, options, {
                    transition: new Transition({
                        axis: options.axis,
                        movable: options.movable,
                        onEnd: function() { that._end(); }
                    })
                });

                that.tapCapture.bind("press", function() { that.cancel(); });
                that.userEvents.bind("end", that.start.bind(that));
                that.userEvents.bind("gestureend", that.start.bind(that));
                that.userEvents.bind("tap", that.onEnd.bind(that));
            },

            onCancel: function() {
                this.transition.cancel();
            },

            freeze: function(location) {
                var that = this;
                that.cancel();
                that._moveTo(location);
            },

            onEnd: function() {
                var that = this;
                if (that.paneAxis.outOfBounds()) {
                    that._snapBack();
                } else {
                    that._end();
                }
            },

            done: function() {
                return abs(this.velocity) < 1;
            },

            start: function(e) {
                var that = this,
                    velocity;

                if (!that.dimension.enabled) { return; }

                if (that.paneAxis.outOfBounds()) {
                    if (that.transition._started) {
                        that.transition.cancel();
                        that.velocity = Math.min(e.touch[that.axis].velocity * that.velocityMultiplier, MAX_VELOCITY);

                        Animation.fn.start.call(that);
                    } else {
                        that._snapBack();
                    }
                } else {
                    velocity = e.touch.id === MOUSE_WHEEL_ID ? 0 : e.touch[that.axis].velocity;
                    that.velocity = Math.max(Math.min(velocity * that.velocityMultiplier, MAX_VELOCITY), -MAX_VELOCITY);

                    that.tapCapture.captureNext();
                    Animation.fn.start.call(that);
                }
            },

            tick: function() {
                var that = this,
                    dimension = that.dimension,
                    friction = that.paneAxis.outOfBounds() ? OUT_OF_BOUNDS_FRICTION : that.friction,
                    delta = (that.velocity *= friction),
                    location = that.movable[that.axis] + delta;

                    if (!that.elastic && dimension.outOfBounds(location)) {
                        location = Math.max(Math.min(location, dimension.max), dimension.min);
                        that.velocity = 0;
                    }

                that.movable.moveAxis(that.axis, location);
            },

            _end: function() {
                this.tapCapture.cancelCapture();
                this.end();
            },

            _snapBack: function() {
                var that = this,
                    dimension = that.dimension,
                    snapBack = that.movable[that.axis] > dimension.max ? dimension.max : dimension.min;
                that._moveTo(snapBack);
            },

            _moveTo: function(location) {
                this.transition.moveTo({ location: location, duration: SNAPBACK_DURATION, ease: Transition.easeOutExpo });
            }
        });

        var AnimatedScroller = Animation.extend({
            init: function(options) {
                var that = this;

                kendo.effects.Animation.fn.init.call(this);

                extend(that, options, {
                    origin: {},
                    destination: {},
                    offset: {}
                });
            },

            tick: function() {
                this._updateCoordinates();
                this.moveTo(this.origin);
            },

            done: function() {
                return abs(this.offset.y) < ANIMATED_SCROLLER_PRECISION && abs(this.offset.x) < ANIMATED_SCROLLER_PRECISION;
            },

            onEnd: function() {
                this.moveTo(this.destination);
                if (this.callback) {
                    this.callback.call();
                }
            },

            setCoordinates: function(from, to) {
                this.offset = {};
                this.origin = from;
                this.destination = to;
            },

            setCallback: function(callback) {
                if (callback && kendo.isFunction(callback)) {
                    this.callback = callback;
                } else {
                    callback = undefined$1;
                }
            },

            _updateCoordinates: function() {
                this.offset = {
                    x: (this.destination.x - this.origin.x) / 4,
                    y: (this.destination.y - this.origin.y) / 4
                };

                this.origin = {
                    y: this.origin.y + this.offset.y,
                    x: this.origin.x + this.offset.x
                };
            }
        });

        var ScrollBar = Class.extend({
            init: function(options) {
                var that = this,
                    horizontal = options.axis === "x",
                    element = $('<div role="scrollbar" aria-controls="' + options.controlsId + '" class="km-touch-scrollbar km-' + (horizontal ? "horizontal" : "vertical") + '-scrollbar" />');

                if (horizontal) {
                    element.attr("aria-orientation", "horizontal");
                }

                extend(that, options, {
                    element: element,
                    elementSize: 0,
                    movable: new Movable(element),
                    scrollMovable: options.movable,
                    alwaysVisible: options.alwaysVisible,
                    size: horizontal ? "width" : "height"
                });

                that.scrollMovable.bind(CHANGE, that.refresh.bind(that));
                that.container.append(element);
                if (options.alwaysVisible) {
                    that.show();
                }
            },

            refresh: function() {
                var that = this,
                    axis = that.axis,
                    dimension = that.dimension,
                    paneSize = dimension.size,
                    scrollMovable = that.scrollMovable,
                    sizeRatio = paneSize / dimension.total,
                    position = Math.round(-scrollMovable[axis] * sizeRatio),
                    size = Math.round(paneSize * sizeRatio);

                    if (sizeRatio >= 1) {
                        this.element.css("display", "none");
                    } else {
                        this.element.css("display", "");
                    }

                    if (position + size > paneSize) {
                        size = paneSize - position;
                    } else if (position < 0) {
                        size += position;
                        position = 0;
                    }

                if (that.elementSize != size) {
                    that.element.css(that.size, size + "px");
                    that.elementSize = size;
                }

                that._ariaValue(position, dimension.size - that.elementSize);

                that.movable.moveAxis(axis, position);
            },

            show: function() {
                this.element.css({ opacity: SCROLLBAR_OPACITY, visibility: "visible" });
            },

            hide: function() {
                if (!this.alwaysVisible) {
                    this.element.css({ opacity: 0 });
                }
            },

            _ariaValue: function(current, total) {
                var element = this.element;

                if (current > total) {
                    current = total;
                }

                element.attr("aria-valuemax", total);
                element.attr("aria-valuenow", current);
            }
        });

        var Scroller = Widget.extend({
            init: function(element, options) {
                var that = this;
                Widget.fn.init.call(that, element, options);

                element = that.element;

                that._native = that.options.useNative && kendo.support.hasNativeScrolling;
                if (that._native) {
                    element.addClass("km-native-scroller")
                        .prepend('<div class="km-scroll-header"/>');

                    extend(that, {
                        scrollElement: element,
                        fixedContainer: element.children().first()
                    });

                    return;
                }

                element
                    .css("overflow", "hidden")
                    .addClass("km-scroll-wrapper")
                    .wrapInner('<div class="km-scroll-container"/>')
                    .prepend('<div class="km-scroll-header"/>');

                var inner = element.children().eq(1),

                    tapCapture = new kendo.TapCapture(element),

                    movable = new Movable(inner),

                    dimensions = new PaneDimensions({
                        element: inner,
                        container: element,
                        forcedEnabled: that.options.zoom
                    }),

                    avoidScrolling = this.options.avoidScrolling,

                    userEvents = new kendo.UserEvents(element, {
                        touchAction: "pan-y",
                        fastTap: true,
                        allowSelection: true,
                        preventDragEvent: true,
                        captureUpIfMoved: true,
                        multiTouch: that.options.zoom,
                        supportDoubleTap: that.options.supportDoubleTap,
                        start: function(e) {
                            dimensions.refresh();

                            var velocityX = abs(e.x.velocity),
                                velocityY = abs(e.y.velocity),
                                horizontalSwipe = velocityX * 2 >= velocityY,
                                originatedFromFixedContainer = $.contains(that.fixedContainer[0], e.event.target),
                                verticalSwipe = velocityY * 2 >= velocityX;


                            if (!originatedFromFixedContainer && !avoidScrolling(e) && that.enabled && (dimensions.x.enabled && horizontalSwipe || dimensions.y.enabled && verticalSwipe)) {
                                userEvents.capture();
                            } else {
                                userEvents.cancel();
                            }
                        }
                    }),

                    pane = new Pane({
                        movable: movable,
                        dimensions: dimensions,
                        userEvents: userEvents,
                        elastic: that.options.elastic
                    }),

                    zoomSnapBack = new ZoomSnapBack({
                        movable: movable,
                        dimensions: dimensions,
                        userEvents: userEvents,
                        tapCapture: tapCapture
                    }),

                    animatedScroller = new AnimatedScroller({
                        moveTo: function(coordinates) {
                            that.scrollTo(coordinates.x, coordinates.y);
                        }
                    });

                movable.bind(CHANGE, function() {
                    that.scrollTop = - movable.y;
                    that.scrollLeft = - movable.x;

                    that.trigger(SCROLL, {
                        scrollTop: that.scrollTop,
                        scrollLeft: that.scrollLeft
                    });
                });

                if (that.options.mousewheelScrolling) {
                    element.on("DOMMouseScroll mousewheel", this._wheelScroll.bind(this));
                }

                extend(that, {
                    movable: movable,
                    dimensions: dimensions,
                    zoomSnapBack: zoomSnapBack,
                    animatedScroller: animatedScroller,
                    userEvents: userEvents,
                    pane: pane,
                    tapCapture: tapCapture,
                    pulled: false,
                    enabled: true,
                    scrollElement: inner,
                    scrollTop: 0,
                    scrollLeft: 0,
                    fixedContainer: element.children().first()
                });

                that._initAxis("x");
                that._initAxis("y");

                // build closure
                that._wheelEnd = function() {
                    that._wheel = false;
                    that.userEvents.end(0, that._wheelY);
                };

                dimensions.refresh();

                if (that.options.pullToRefresh) {
                    that._initPullToRefresh();
                }
            },

            _wheelScroll: function(e) {
                if (e.ctrlKey) {
                    return;
                }

                if (!this._wheel) {
                    this._wheel = true;
                    this._wheelY = 0;
                    this.userEvents.press(0, this._wheelY);
                }

                clearTimeout(this._wheelTimeout);
                this._wheelTimeout = setTimeout(this._wheelEnd, 50);

                var delta = kendo.wheelDeltaY(e);

                if (delta) {
                    this._wheelY += delta;
                    this.userEvents.move(0, this._wheelY);
                }

                e.preventDefault();
            },

            makeVirtual: function() {
                this.dimensions.y.makeVirtual();
            },

            virtualSize: function(min, max) {
                this.dimensions.y.virtualSize(min, max);
            },

            height: function() {
                return this.dimensions.y.size;
            },

            scrollHeight: function() {
                return this.scrollElement[0].scrollHeight;
            },

            scrollWidth: function() {
                return this.scrollElement[0].scrollWidth;
            },

            options: {
                name: "Scroller",
                zoom: false,
                pullOffset: 140,
                visibleScrollHints: false,
                elastic: true,
                useNative: false,
                mousewheelScrolling: true,
                avoidScrolling: function() { return false; },
                pullToRefresh: false,
                messages: {
                    pullTemplate: "Pull to refresh",
                    releaseTemplate: "Release to refresh",
                    refreshTemplate: "Refreshing"
                }
            },

            events: [
                PULL,
                SCROLL,
                RESIZE
            ],

            _resize: function() {
                if (!this._native) {
                    this.contentResized();
                }
            },

            setOptions: function(options) {
                var that = this;
                Widget.fn.setOptions.call(that, options);
                if (options.pullToRefresh) {
                    that._initPullToRefresh();
                }
            },

            reset: function() {
                if (this._native) {
                    this.scrollElement.scrollTop(0);
                } else {
                    this.movable.moveTo({ x: 0, y: 0 });
                    this._scale(1);
                }
            },

            contentResized: function() {
                this.dimensions.refresh();
                if (this.pane.x.outOfBounds()) {
                    this.movable.moveAxis("x", this.dimensions.x.min);
                }

                if (this.pane.y.outOfBounds()) {
                    this.movable.moveAxis("y", this.dimensions.y.min);
                }
            },

            zoomOut: function() {
                var dimensions = this.dimensions;
                dimensions.refresh();
                this._scale(dimensions.fitScale);
                this.movable.moveTo(dimensions.centerCoordinates());
            },

            enable: function() {
                this.enabled = true;
            },

            disable: function() {
                this.enabled = false;
            },

            scrollTo: function(x, y) {
                if (this._native) {
                    kendo.scrollLeft(this.scrollElement, abs(x));
                    this.scrollElement.scrollTop(abs(y));
                } else {
                    this.dimensions.refresh();
                    this.movable.moveTo({ x: x, y: y });
                }
            },

            animatedScrollTo: function(x, y, callback) {
                var from,
                    to;

                if (this._native) {
                    this.scrollTo(x, y);
                } else {
                    from = { x: this.movable.x, y: this.movable.y };
                    to = { x: x, y: y };

                    this.animatedScroller.setCoordinates(from, to);
                    this.animatedScroller.setCallback(callback);
                    this.animatedScroller.start();
                }
            },

            pullHandled: function() {
                var that = this;
                that.refreshHint.removeClass(REFRESHCLASS);
                that.hintContainer.html(that.pullTemplate({}));
                that.yinertia.onEnd();
                that.xinertia.onEnd();
                that.userEvents.cancel();
            },

            destroy: function() {
                Widget.fn.destroy.call(this);
                if (this.userEvents) {
                    this.userEvents.destroy();
                }
            },

            _scale: function(scale) {
                this.dimensions.rescale(scale);
                this.movable.scaleTo(scale);
            },

            _initPullToRefresh: function() {
                var that = this;

                that.dimensions.y.forceEnabled();
                that.pullTemplate = kendo.template(that.options.messages.pullTemplate);
                that.releaseTemplate = kendo.template(that.options.messages.releaseTemplate);
                that.refreshTemplate = kendo.template(that.options.messages.refreshTemplate);

                that.scrollElement.prepend('<span class="km-scroller-pull"><span class="km-icon"></span><span class="km-loading-left"></span><span class="km-loading-right"></span><span class="km-template">' + that.pullTemplate({}) + '</span></span>');
                that.refreshHint = that.scrollElement.children().first();
                that.hintContainer = that.refreshHint.children(".km-template");

                that.pane.y.bind("change", that._paneChange.bind(that));
                that.userEvents.bind("end", that._dragEnd.bind(that));
            },

            _dragEnd: function() {
                var that = this;

                if (!that.pulled) {
                    return;
                }

                that.pulled = false;
                that.refreshHint.removeClass(RELEASECLASS).addClass(REFRESHCLASS);
                that.hintContainer.html(that.refreshTemplate({}));
                that.yinertia.freeze(that.options.pullOffset / 2);
                that.trigger("pull");
            },

            _paneChange: function() {
                var that = this;

                if (that.movable.y / OUT_OF_BOUNDS_FRICTION > that.options.pullOffset) {
                    if (!that.pulled) {
                        that.pulled = true;
                        that.refreshHint.removeClass(REFRESHCLASS).addClass(RELEASECLASS);
                        that.hintContainer.html(that.releaseTemplate({}));
                    }
                } else if (that.pulled) {
                    that.pulled = false;
                    that.refreshHint.removeClass(RELEASECLASS);
                    that.hintContainer.html(that.pullTemplate({}));
                }
            },

            _initAxis: function(axis) {
                var that = this,
                    elementId = that.element.attr("id"),
                    movable = that.movable,
                    dimension = that.dimensions[axis],
                    tapCapture = that.tapCapture,
                    paneAxis = that.pane[axis],
                    scrollBar;

                if (!elementId) {
                    elementId = kendo.guid();
                    that.element.attr("id", elementId);
                }

                scrollBar = new ScrollBar({
                    axis: axis,
                    movable: movable,
                    dimension: dimension,
                    container: that.element,
                    alwaysVisible: that.options.visibleScrollHints,
                    controlsId: elementId
                });

                dimension.bind(CHANGE, function() {
                    scrollBar.refresh();
                });

                paneAxis.bind(CHANGE, function() {
                    scrollBar.show();
                });

                that[axis + "inertia"] = new DragInertia({
                    axis: axis,
                    paneAxis: paneAxis,
                    movable: movable,
                    tapCapture: tapCapture,
                    userEvents: that.userEvents,
                    dimension: dimension,
                    elastic: that.options.elastic,
                    friction: that.options.friction || FRICTION,
                    velocityMultiplier: that.options.velocityMultiplier || VELOCITY_MULTIPLIER,
                    end: function() {
                        scrollBar.hide();
                        that.trigger("scrollEnd", {
                            axis: axis,
                            scrollTop: that.scrollTop,
                            scrollLeft: that.scrollLeft
                        });
                    }
                });
            }
        });

        ui.plugin(Scroller);
    })(window.kendo.jQuery);
    var kendo$M = kendo;

    var __meta__$R = {
        id: "resizable",
        name: "Resizable",
        category: "framework",
        depends: [ "core", "draganddrop" ],
        advanced: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            isFunction = kendo.isFunction,
            extend = $.extend,
            HORIZONTAL = "horizontal",
            VERTICAL = "vertical",
            START = "start",
            RESIZE = "resize",
            RESIZEEND = "resizeend";

        var Resizable = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                that.orientation = that.options.orientation.toLowerCase() != VERTICAL ? HORIZONTAL : VERTICAL;
                that._positionMouse = that.orientation == HORIZONTAL ? "x" : "y";
                that._position = that.orientation == HORIZONTAL ? "left" : "top";
                that._sizingDom = that.orientation == HORIZONTAL ? "outerWidth" : "outerHeight";

                that.draggable = new ui.Draggable(options.draggableElement || element, {
                    distance: 1,
                    filter: options.handle,
                    drag: that._resize.bind(that),
                    dragcancel: that._cancel.bind(that),
                    dragstart: that._start.bind(that),
                    dragend: that._dragend.bind(that),
                    clickMoveClick: options.clickMoveClick
                });

                that.userEvents = that.draggable.userEvents;
            },

            events: [
                RESIZE,
                RESIZEEND,
                START
            ],

            options: {
                name: "Resizable",
                orientation: HORIZONTAL,
                clickMoveClick: false
            },

            resize: function() {
                // Overrides base widget resize
            },

            _max: function(e) {
                var that = this,
                    hintSize = that.hint ? that.hint[that._sizingDom]() : 0,
                    size = that.options.max;

                return isFunction(size) ? size(e) : size !== undefined$1 ? (that._initialElementPosition + size) - hintSize : size;
            },

            _min: function(e) {
                var that = this,
                    size = that.options.min;

                return isFunction(size) ? size(e) : size !== undefined$1 ? that._initialElementPosition + size : size;
            },

            _start: function(e) {
                var that = this,
                    hint = that.options.hint,
                    el = $(e.currentTarget);

                that._initialElementPosition = el.position()[that._position];
                that._initialMousePosition = e[that._positionMouse].startLocation;

                if (hint) {
                    that.hint = isFunction(hint) ? $(hint(el)) : hint;

                    that.hint.css({
                        position: "absolute"
                    })
                    .css(that._position, that._initialElementPosition)
                    .appendTo(that.element);
                }

                that.trigger(START, e);

                that._maxPosition = that._max(e);
                that._minPosition = that._min(e);

                $(document.body).css("cursor", el.css("cursor"));
            },

            _resize: function(e) {
                var that = this,
                    maxPosition = that._maxPosition,
                    minPosition = that._minPosition,
                    currentPosition = that._initialElementPosition + (e[that._positionMouse].location - that._initialMousePosition),
                    position;

                position = minPosition !== undefined$1 ? Math.max(minPosition, currentPosition) : currentPosition;
                that.position = position = maxPosition !== undefined$1 ? Math.min(maxPosition, position) : position;

                if (that.hint) {
                    that.hint.toggleClass(that.options.invalidClass || "", position == maxPosition || position == minPosition)
                             .css(that._position, position);
                }

                that.resizing = true;
                that.trigger(RESIZE, extend(e, { position: position }));
            },

            _dragend: function(e) {
                this._stop();
                this.trigger(RESIZEEND, extend(e, { position: this.position }));
            },

            _stop: function() {
                var that = this;

                if (that.hint) {
                    that.hint.remove();
                }

                that.resizing = false;
                $(document.body).css("cursor", "");
            },

            _cancel: function(e) {
                var that = this;

                if (that.hint) {
                    that.position = undefined$1;
                    that.hint.css(that._position, that._initialElementPosition);
                    that._stop();
                }
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                if (that.draggable) {
                    that.draggable.destroy();
                }
            },

            press: function(target) {
                if (!target) {
                    return;
                }

                var position = target.position(),
                    that = this;

                that.userEvents.press(position.left, position.top, target[0]);
                that.targetPosition = position;
                that.target = target;
            },

            move: function(delta) {
                var that = this,
                    orientation = that._position,
                    position = that.targetPosition,
                    current = that.position;

                if (current === undefined$1) {
                    current = position[orientation];
                }

                position[orientation] = current + delta;

                that.userEvents.move(position.left, position.top);
            },

            end: function() {
                this.userEvents.end();
                this.target = this.position = undefined$1;
            }
        });

        kendo.ui.plugin(Resizable);

    })(window.kendo.jQuery);
    var kendo$L = kendo;

    var __meta__$Q = {
        id: "sortable",
        name: "Sortable",
        category: "framework",
        depends: [ "draganddrop" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            outerWidth = kendo._outerWidth,
            outerHeight = kendo._outerHeight,

            START = "start",
            BEFORE_MOVE = "beforeMove",
            MOVE = "move",
            END = "end",
            CHANGE = "change",
            CANCEL = "cancel",

            ACTION_SORT = "sort",
            ACTION_REMOVE = "remove",
            ACTION_RECEIVE = "receive",

            DEFAULT_FILTER = ">*",
            MISSING_INDEX = -1;

        function containsOrEqualTo(parent, child) {
            try {
                return $.contains(parent, child) || parent == child;
            } catch (e) {
                return false;
            }
        }

        function defaultHint(element) {
            return element.clone();
        }

        function defaultPlaceholder(element) {
            return element.clone().removeAttr("id").css("visibility", "hidden");
        }

        var Sortable = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                if (!that.options.placeholder) {
                    that.options.placeholder = defaultPlaceholder;
                }

                if (!that.options.hint) {
                    that.options.hint = defaultHint;
                }

                that.draggable = that._createDraggable();
            },

            events: [
                START,
                BEFORE_MOVE,
                MOVE,
                END,
                CHANGE,
                CANCEL
            ],

            options: {
                name: "Sortable",
                hint: null,
                placeholder: null,
                filter: DEFAULT_FILTER,
                holdToDrag: false,
                disabled: null,
                container: null,
                connectWith: null,
                handler: null,
                cursorOffset: null,
                axis: null,
                ignore: null,
                autoScroll: false,
                cursor: "auto",
                moveOnDragEnter: false
            },

            destroy: function() {
                this.draggable.destroy();
                Widget.fn.destroy.call(this);
            },

            _createDraggable: function() {
                var that = this,
                    element = that.element,
                    options = that.options;

                return new kendo.ui.Draggable(element, {
                    filter: options.filter,
                    hint: kendo.isFunction(options.hint) ? options.hint : $(options.hint),
                    holdToDrag: options.holdToDrag,
                    container: options.container ? $(options.container) : null,
                    cursorOffset: options.cursorOffset,
                    axis: options.axis,
                    ignore: options.ignore,
                    autoScroll: options.autoScroll,
                    dragstart: that._dragstart.bind(that),
                    dragcancel: that._dragcancel.bind(that),
                    drag: that._drag.bind(that),
                    dragend: that._dragend.bind(that)
                });
            },

            _dragstart: function(e) {
                var draggedElement = this.draggedElement = e.currentTarget,
                    disabled = this.options.disabled,
                    handler = this.options.handler,
                    _placeholder = this.options.placeholder,
                    placeholder = this.placeholder = kendo.isFunction(_placeholder) ? $(_placeholder.call(this, draggedElement)) : $(_placeholder);

                if (disabled && draggedElement.is(disabled)) {
                    e.preventDefault();
                } else if (handler && !$(e.initialTarget).is(handler)) {
                    e.preventDefault();
                } else {

                    if (this.trigger(START, { item: draggedElement, draggableEvent: e })) {
                        e.preventDefault();
                    } else {
                        draggedElement.css("display", "none");
                        draggedElement.before(placeholder);

                        this._setCursor();
                    }

                }
            },

            _dragcancel: function() {
                this._cancel();
                this.trigger(CANCEL, { item: this.draggedElement });

                this._resetCursor();
            },

            _drag: function(e) {
                var draggedElement = this.draggedElement,
                    target = this._findTarget(e),
                    targetCenter,
                    cursorOffset = { left: e.x.location, top: e.y.location },
                    offsetDelta,
                    axisDelta = { x: e.x.delta, y: e.y.delta },
                    direction,
                    sibling,
                    getSibling,
                    axis = this.options.axis,
                    moveOnDragEnter = this.options.moveOnDragEnter,
                    eventData = { item: draggedElement, list: this, draggableEvent: e };

                if (axis === "x" || axis === "y") {
                    this._movementByAxis(axis, cursorOffset, axisDelta[axis], eventData);
                    return;
                }

                if (target) {
                    targetCenter = this._getElementCenter(target.element);

                    offsetDelta = {
                        left: Math.round(cursorOffset.left - targetCenter.left),
                        top: Math.round(cursorOffset.top - targetCenter.top)
                    };

                    $.extend(eventData, { target: target.element });

                    if (target.appendToBottom) {
                        this._movePlaceholder(target, null, eventData);
                        return;
                    }

                    if (target.appendAfterHidden) {
                        this._movePlaceholder(target, "next", eventData);
                    }

                    if (this._isFloating(target.element)) { //horizontal
                        if ((axisDelta.x < 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.left < 0)) {
                            direction = "prev";
                        } else if ((axisDelta.x > 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.left > 0)) {
                            direction = "next";
                        }
                    } else { //vertical
                        if ((axisDelta.y < 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.top < 0)) {
                            direction = "prev";
                        } else if ((axisDelta.y > 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.top > 0)) {
                            direction = "next";
                        }
                    }

                    if (direction) {
                        getSibling = (direction === "prev") ? jQuery.fn.prev : jQuery.fn.next;

                        sibling = getSibling.call(target.element);

                        //find the prev/next visible sibling
                        while (sibling.length && !sibling.is(":visible")) {
                            sibling = getSibling.call(sibling);
                        }

                        if (sibling[0] != this.placeholder[0]) {
                            this._movePlaceholder(target, direction, eventData);
                        }
                    }
                }
            },

            _dragend: function(e) {
                var placeholder = this.placeholder,
                    draggedElement = this.draggedElement,
                    draggedIndex = this.indexOf(draggedElement),
                    placeholderIndex = this.indexOf(placeholder),
                    connectWith = this.options.connectWith,
                    connectedList,
                    isDefaultPrevented,
                    eventData,
                    connectedListEventData;

                this._resetCursor();

                eventData = {
                    action: ACTION_SORT,
                    item: draggedElement,
                    oldIndex: draggedIndex,
                    newIndex: placeholderIndex,
                    draggableEvent: e
                };

                if (placeholderIndex >= 0) {
                    isDefaultPrevented = this.trigger(END, eventData);
                } else {
                    connectedList = placeholder.parents(connectWith).getKendoSortable();

                    eventData.action = ACTION_REMOVE;
                    connectedListEventData = $.extend({}, eventData, {
                        action: ACTION_RECEIVE,
                        oldIndex: MISSING_INDEX,
                        newIndex: connectedList.indexOf(placeholder)
                    });

                    isDefaultPrevented = !(!this.trigger(END, eventData) && !connectedList.trigger(END, connectedListEventData));
                }

                if (isDefaultPrevented || placeholderIndex === draggedIndex) {
                    this._cancel();
                    return;
                }

                placeholder.replaceWith(draggedElement);

                draggedElement.show();
                this.draggable.dropped = true;

                eventData = {
                    action: this.indexOf(draggedElement) != MISSING_INDEX ? ACTION_SORT : ACTION_REMOVE,
                    item: draggedElement,
                    oldIndex: draggedIndex,
                    newIndex: this.indexOf(draggedElement),
                    draggableEvent: e
                };

                this.trigger(CHANGE, eventData);

                if (connectedList) {
                    connectedListEventData = $.extend({}, eventData, {
                        action: ACTION_RECEIVE,
                        oldIndex: MISSING_INDEX,
                        newIndex: connectedList.indexOf(draggedElement)
                    });

                    connectedList.trigger(CHANGE, connectedListEventData);
                }

            },

            _findTarget: function(e) {
                var element = this._findElementUnderCursor(e),
                    items,
                    connectWith = this.options.connectWith,
                    node;

                if ($.contains(this.element[0], element)) { //the element is part of the sortable container
                    items = this.items();
                    node = items.filter(element)[0] || items.has(element)[0];

                    return node ? { element: $(node), sortable: this } : null;
                } else if (this.element[0] == element && this._isEmpty()) {
                    return { element: this.element, sortable: this, appendToBottom: true };
                } else if (this.element[0] == element && this._isLastHidden()) {
                    node = this.items().eq(0);
                    return { element: node , sortable: this, appendAfterHidden: true };
                } else if (connectWith) { //connected lists are present
                    return this._searchConnectedTargets(element, e);
                }
            },

            _findElementUnderCursor: function(e) {
                var elementUnderCursor = kendo.elementUnderCursor(e),
                    draggable = e.sender;

                if (containsOrEqualTo(draggable.hint[0], elementUnderCursor)) {
                    draggable.hint.hide();
                    elementUnderCursor = kendo.elementUnderCursor(e);
                    // IE8 does not return the element in iframe from first attempt
                    if (!elementUnderCursor) {
                        elementUnderCursor = kendo.elementUnderCursor(e);
                    }
                    draggable.hint.show();
                }

                return elementUnderCursor;
            },

            _searchConnectedTargets: function(element, e) {
                var connected = $(this.options.connectWith),
                    sortableInstance,
                    items,
                    node;

                for (var i = 0; i < connected.length; i++) {
                    sortableInstance = connected.eq(i).getKendoSortable();

                    if ($.contains(connected[i], element)) {
                        if (sortableInstance) {
                            items = sortableInstance.items();
                            node = items.filter(element)[0] || items.has(element)[0];

                            if (node) {
                                sortableInstance.placeholder = this.placeholder;
                                return { element: $(node), sortable: sortableInstance };
                            } else {
                                return null;
                            }
                        }
                    } else if (connected[i] == element) {
                        if (sortableInstance && sortableInstance._isEmpty()) {
                            return { element: connected.eq(i), sortable: sortableInstance, appendToBottom: true };
                        } else if (this._isCursorAfterLast(sortableInstance, e)) {
                            node = sortableInstance.items().last();
                            return { element: node, sortable: sortableInstance };
                        }
                    }
                }

            },

            _isCursorAfterLast: function(sortable, e) {
                var lastItem = sortable.items().last(),
                    cursorOffset = { left: e.x.location, top: e.y.location },
                    lastItemOffset,
                    delta;

                lastItemOffset = kendo.getOffset(lastItem);
                lastItemOffset.top += outerHeight(lastItem);
                lastItemOffset.left += outerWidth(lastItem);

                if (this._isFloating(lastItem)) { //horizontal
                    delta = lastItemOffset.left - cursorOffset.left;
                } else { //vertical
                    delta = lastItemOffset.top - cursorOffset.top;
                }

                return delta < 0 ? true : false;
            },

            _movementByAxis: function(axis, cursorOffset, delta, eventData) {
                var cursorPosition = (axis === "x") ? cursorOffset.left : cursorOffset.top,
                    target = (delta < 0) ? this.placeholder.prev() : this.placeholder.next(),
                    items = this.items(),
                    targetCenter;

                if (target.length && !target.is(":visible")) {
                    target = (delta < 0) ? target.prev() : target.next();
                }

                if (!items.filter(target).length) {
                    return;
                }

                $.extend(eventData, { target: target });
                targetCenter = this._getElementCenter(target);

                if (targetCenter) {
                    targetCenter = (axis === "x") ? targetCenter.left : targetCenter.top;
                }

                if (target.length && delta < 0 && cursorPosition - targetCenter < 0) { //prev
                    this._movePlaceholder({ element: target, sortable: this }, "prev", eventData);
                } else if (target.length && delta > 0 && cursorPosition - targetCenter > 0) { //next
                    this._movePlaceholder({ element: target, sortable: this }, "next", eventData);
                }
            },

            _movePlaceholder: function(target, direction, eventData) {
                var placeholder = this.placeholder;

                if (!target.sortable.trigger(BEFORE_MOVE, eventData)) {

                    if (!direction) {
                        target.element.append(placeholder);
                    } else if (direction === "prev") {
                        target.element.before(placeholder);
                    } else if (direction === "next") {
                        target.element.after(placeholder);
                    }

                    target.sortable.trigger(MOVE, eventData);
                }
            },

            _setCursor: function() {
                var cursor = this.options.cursor,
                    body;

                if (cursor && cursor !== "auto") {
                    body = $(document.body);

                    this._originalCursorType = body.css("cursor");
                    body.css({ "cursor": cursor });

                    if (!this._cursorStylesheet) {
                        this._cursorStylesheet = $("<style>* { cursor: " + cursor + " !important; }</style>");
                    }

                    this._cursorStylesheet.appendTo(body);
                }
            },

            _resetCursor: function() {
                if (this._originalCursorType) {
                    $(document.body).css("cursor", this._originalCursorType);
                    this._originalCursorType = null;

                    this._cursorStylesheet.remove();
                }
            },

            _getElementCenter: function(element) {
                var center = element.length ? kendo.getOffset(element) : null;
                if (center) {
                    center.top += outerHeight(element) / 2;
                    center.left += outerWidth(element) / 2;
                }

                return center;
            },

            _isFloating: function(item) {
                var isFloating = /left|right/.test(item.css('float'));
                var isTable = /inline|table-cell/.test(item.css('display'));
                var isHorizontalFlex = /flex/.test(item.parent().css('display')) && (/row|row-reverse/.test(item.parent().css('flex-direction')) || !item.parent().css('flex-direction'));
                return isFloating || isTable || isHorizontalFlex;
            },

            _cancel: function() {
                if (this.draggedElement) {
                    this.draggedElement.show();
                    this.placeholder.remove();
                    this.draggable.dropped = true;
                }
            },

            _items: function() {
                var filter = this.options.filter,
                    items;

                if (filter) {
                    items = this.element.find(filter);
                } else {
                    items = this.element.children();
                }

                return items;
            },

            indexOf: function(element) {
                var items = this._items(),
                    placeholder = this.placeholder,
                    draggedElement = this.draggedElement;

                if (placeholder && element[0] == placeholder[0]) {
                    return items.not(draggedElement).index(element);
                } else {
                    return items.not(placeholder).index(element);
                }
            },

            items: function() {
                var placeholder = this.placeholder,
                    items = this._items();

                if (placeholder) {
                    items = items.not(placeholder);
                }

                return items;
            },

            _isEmpty: function() {
                return !this.items().length;
            },

            _isLastHidden: function() {
                return this.items().length === 1 && this.items().is(":hidden");
            }

        });

        kendo.ui.plugin(Sortable);
    })(window.kendo.jQuery);
    var kendo$K = kendo;

    var __meta__$P = {
        id: "selectable",
        name: "Selectable",
        category: "framework",
        depends: [ "core", "userevents" ],
        advanced: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            abs = Math.abs,
            ARIASELECTED = "aria-selected",
            SELECTED = "k-selected",
            ACTIVE = "k-selecting",
            SELECTABLE = "k-selectable",
            CHANGE = "change",
            CHANGING = "changing",
            NS = ".kendoSelectable",
            UNSELECT = "unselect",
            UNSELECTING = "k-unselecting",
            INPUTSELECTOR_ICONSSELECTOR_FONT = "span.k-icon.k-i-caret-alt-down,span.k-icon.k-i-caret-alt-up,.k-icon.k-i-caret-alt-down,.k-icon.k-i-caret-alt-right,.k-icon.k-i-caret-alt-left",
            INPUTSELECTOR_ICONSSELECTOR_SVG = INPUTSELECTOR_ICONSSELECTOR_FONT.replaceAll('k-i', 'k-svg-i'),
            INPUTSELECTOR_SVG_PARTS = INPUTSELECTOR_ICONSSELECTOR_SVG.split(",").map(function (selector) { return selector + " *"; }).join(","),
            INPUTSELECTOR = "input,a,textarea,.k-multiselect-wrap,select,button," + INPUTSELECTOR_ICONSSELECTOR_FONT + "," + INPUTSELECTOR_ICONSSELECTOR_SVG + "," + INPUTSELECTOR_SVG_PARTS + ",.k-button>span,.k-button>span *,.k-button>img,label.k-checkbox-label.k-no-text,span.k-numeric-wrap,.k-focusable",
            msie = kendo.support.browser.msie,
            supportEventDelegation = false,
            extend = $.extend;

            (function($) {
                (function() {
                    $('<div class="parent"><span></span></div>')
                    .on("click", ">*", function() {
                        supportEventDelegation = true;
                    })
                    .find("span")
                    .trigger("click")
                    .end()
                    .off();
                })();
            })($);

        var Selectable = Widget.extend({
            init: function(element, options) {
                var that = this,
                    multiple,
                    dragToSelect;

                Widget.fn.init.call(that, element, options);

                that._marquee = $("<div class='k-marquee'><div class='k-marquee-color'></div></div>");
                that._lastActive = null;
                that.element.addClass(SELECTABLE);

                that.relatedTarget = that.options.relatedTarget;

                multiple = that.options.multiple;
                dragToSelect = that.options.dragToSelect;

                that.userEvents = new kendo.UserEvents(that.element, {
                    global: true,
                    allowSelection: true,
                    filter: (!supportEventDelegation ? "." + SELECTABLE + " " : "") + that.options.filter,
                    tap: that._tap.bind(that),
                    touchAction: multiple ? "none" : "pan-x pan-y"
                });

                if (multiple) {
                    if (dragToSelect) {
                        that.userEvents
                            .bind("hold", that._hold.bind(that))
                            .bind("start", that._start.bind(that))
                            .bind("move", that._move.bind(that))
                            .bind("end", that._end.bind(that));
                    }
                    that.userEvents
                       .bind("select", that._select.bind(that));
                }
            },

            events: [CHANGE, CHANGING, UNSELECT],

            options: {
                name: "Selectable",
                filter: ">*",
                inputSelectors: INPUTSELECTOR,
                multiple: false,
                holdToDrag: false,
                dragToSelect: true,
                relatedTarget: $.noop,
                ignoreOverlapped: false,
                addIdToRanges: false,
                toggleable: false,
            },

            _isElement: function(target) {
                var elements = this.element;
                var idx, length = elements.length, result = false;

                target = target[0];

                for (idx = 0; idx < length; idx ++) {
                    if (elements[idx] === target) {
                        result = true;
                        break;
                    }
                }

                return result;
            },

            _tap: function(e) {
                var target = $(e.target),
                    that = this,
                    options = that.options,
                    ctrlKey = e.event.ctrlKey || e.event.metaKey,
                    multiple = that.options.multiple,
                    shiftKey = multiple && e.event.shiftKey,
                    selectedClass = that.options.selectedClass || SELECTED,
                    selected,
                    whichCode = e.event.which,
                    buttonCode = e.event.button;

                //in case of hierarchy or right-click
                if (!that._isElement(target.closest("." + SELECTABLE)) || whichCode && whichCode == 3 || buttonCode && buttonCode == 2) {
                    return;
                }

                if (!this._allowSelection(e.event.target)) {
                    return;
                }

                if (that.trigger(CHANGING, { target: target, originalEvent: e.event })) {
                    return;
                }

                selected = target.hasClass(selectedClass);

                target = target.add(that.relatedTarget(target));

                if (!multiple) {
                    if (selected && ctrlKey) {
                        that._unselect(target);
                        that._notify(CHANGE, e);
                    } else if (!selected) {
                        that.clear();
                        that.value(target, e);
                        that._notify(CHANGE, e);
                    }
                } else {
                    if (shiftKey) {
                        if (!that._lastRange || !compareElements(that._lastRange, target)) {
                            that.selectRange(that._firstSelectee(), target, e);
                            that._notify(CHANGE, e);
                        }
                        that._lastRange = target;
                    } else {
                        that._lastRange = null;
                        if (selected && (ctrlKey || options.toggleable)) {
                            that._unselect(target);
                            that._notify(CHANGE, e);
                        } else if (ctrlKey || options.toggleable) {
                            that.value(target, e);
                            that._notify(CHANGE, e);
                        } else if (!selected || that.value().length > 1) {
                            that.clear();
                            that.value(target, e);
                            that._notify(CHANGE, e);
                        }

                        that._lastActive = that._downTarget = target;
                    }
                }
            },

            _hold: function(e) {
                if (this.options.holdToDrag) {
                    // serves as a drag hint to indicate start of selection
                    this._tap(e);
                }

                this._activated = true;
            },

            _isActivated: function() {
                return this.options.holdToDrag ? this._activated : true;
            },

            _start: function(e) {
                var that = this,
                    target = $(e.target),
                    selectedClass = that.options.selectedClass || SELECTED,
                    selected = target.hasClass(selectedClass),
                    currentElement,
                    ctrlKey = e.event.ctrlKey || e.event.metaKey;

                if (!that._isActivated() || !this._allowSelection(e.event.target)) {
                    return;
                }

                if (that.trigger(CHANGING, { target: target, originalEvent: e.event })) {
                    that.userEvents.cancel();
                    return;
                }

                that._downTarget = target;

                //in case of hierarchy
                if (!that._isElement(target.closest("." + SELECTABLE))) {
                    that.userEvents.cancel();
                    return;
                }

                if (that.options.useAllItems) {
                    that._items = that.element.find(that.options.filter);
                } else {
                    currentElement = target.closest(that.element);
                    that._items = currentElement.find(that.options.filter);
                }

                e.sender.capture();

                that._marquee
                    .appendTo(document.body)
                    .css({
                        left: e.x.client + 1,
                        top: e.y.client + 1,
                        width: 0,
                        height: 0
                    });

                if (!ctrlKey) {
                    that.clear();
                }

                target = target.add(that.relatedTarget(target));
                if (selected) {
                    that._selectElement(target, true);
                    if (ctrlKey) {
                        target.addClass(UNSELECTING);
                    }
                }
            },

            _move: function(e) {
                var that = this,
                    position = {
                        left: e.x.startLocation > e.x.location ? e.x.location : e.x.startLocation,
                        top: e.y.startLocation > e.y.location ? e.y.location : e.y.startLocation,
                        width: abs(e.x.initialDelta),
                        height: abs(e.y.initialDelta)
                    };

                if (!that._isActivated()) {
                    return;
                }

                that._marquee.css(position);

                that._invalidateSelectables(position, (e.event.ctrlKey || e.event.metaKey));

                e.preventDefault();
            },

            _end: function(e) {
                var that = this,
                rangeSelectedAttr = kendo.attr("range-selected"),
                uid = kendo.guid();

                if (!that._isActivated()) {
                    return;
                }

                that._activated = false;

                that._marquee.remove();

                that._unselect(that.element
                    .find(that.options.filter + "." + UNSELECTING))
                    .removeClass(UNSELECTING);


                var target = that.element.find(that.options.filter + "." + ACTIVE);
                target = target.add(that.relatedTarget(target));

                if (that.options.addIdToRanges) {
                    for (var i = 0; i < that._currentlyActive.length; i++) {
                        $(that._currentlyActive[i]).attr(rangeSelectedAttr, uid);
                    }
                }

                if (!that._lastRange || !compareElements(that._lastRange, target)) {
                    that.value(target, e);
                    that._notify(CHANGE, e);
                }
                that._lastRange = target;
                that._lastActive = that._downTarget;
                that._items = null;
            },

            _invalidateSelectables: function(position, ctrlKey) {
                var idx,
                    length,
                    target = this._downTarget[0],
                    items = this._items,
                    selectedClass = this.options.selectedClass || SELECTED,
                    related,
                    toSelect;

                this._currentlyActive = [];

                for (idx = 0, length = items.length; idx < length; idx ++) {
                    toSelect = items.eq(idx);
                    related = toSelect.add(this.relatedTarget(toSelect));

                    if (collision(toSelect, position)) {
                        if (toSelect.hasClass(selectedClass)) {
                            if (ctrlKey && target !== toSelect[0]) {
                                related.removeClass(selectedClass).addClass(UNSELECTING);
                            }
                        } else if (!toSelect.hasClass(ACTIVE) && !toSelect.hasClass(UNSELECTING) && !this._collidesWithActiveElement(related, position)) {
                            related.addClass(ACTIVE);
                        }
                        this._currentlyActive.push(related[0]);
                    } else {
                        if (toSelect.hasClass(ACTIVE)) {
                            related.removeClass(ACTIVE);
                        } else if (ctrlKey && toSelect.hasClass(UNSELECTING)) {
                            related.removeClass(UNSELECTING).addClass(selectedClass);
                        }
                    }
                }
            },

            _collidesWithActiveElement: function(element, marqueeRect) {
                if (!this.options.ignoreOverlapped) {
                    return false;
                }

                var activeElements = this._currentlyActive;
                var elemRect = element[0].getBoundingClientRect();
                var activeElementRect;
                var collision = false;
                var isRtl = kendo.support.isRtl(element);
                var leftRight = isRtl ? "right" : "left";
                var tempRect = {};

                marqueeRect.right = marqueeRect.left + marqueeRect.width;
                marqueeRect.bottom = marqueeRect.top + marqueeRect.height;

                for (var i = 0; i < activeElements.length; i++) {
                    activeElementRect = activeElements[i].getBoundingClientRect();
                    if (overlaps(elemRect, activeElementRect)) {
                        tempRect[leftRight] = leftRight === "left" ? activeElementRect.right : activeElementRect.left;
                        elemRect = extend({}, elemRect, tempRect);
                        if (elemRect.left > elemRect.right) {
                            return true;
                        }
                        collision = !overlaps(elemRect, marqueeRect);
                    }
                }
                return collision;
            },

            value: function(val) {
                var that = this,
                    selectElement = that._selectElement.bind(that);

                if (val) {
                    val.each(function() {
                        selectElement(this);
                    });

                    return;
                }

                return that.element.find(that.options.filter + "." + (that.options.selectedClass || SELECTED));
            },

            selectedRanges: function() {
                var that = this;
                var rangeSelectedAttr = kendo.attr("range-selected");
                var map = {};

                that.element.find("[" + rangeSelectedAttr + "]").each(function(_, elem) {
                    var rangeId = $(elem).attr(rangeSelectedAttr);
                    var mapLocation = map[rangeId];

                    if (!mapLocation) {
                        mapLocation = map[rangeId] = [];
                    }

                    mapLocation.push($(elem));
                });

                return map;
            },

            selectedSingleItems: function() {
                var that = this;
                var rangeSelectedAttr = kendo.attr("range-selected");

                return that.element.find(that.options.filter + "." + (that.options.selectedClass || SELECTED) + ":not([" + rangeSelectedAttr + "])").toArray().map(function(elem) {
                    return $(elem);
                });
            },

            _firstSelectee: function() {
                var that = this,
                    selected;

                if (that._lastActive !== null) {
                    return that._lastActive;
                }

                selected = that.value();
                return selected.length > 0 ?
                        selected[0] :
                        that.element.find(that.options.filter)[0];
            },

            _selectElement: function(element, preventNotify) {
                var toSelect = $(element),
                    selectedClass = this.options.selectedClass || SELECTED,
                    isPrevented = !preventNotify && this._notify("select", { element: element });

                toSelect.removeClass(ACTIVE);
                if (!isPrevented) {
                     toSelect.addClass(selectedClass);

                    if (this.options.aria) {
                        toSelect.attr(ARIASELECTED, true);
                    }
                }
            },

            _notify: function(name, args) {
                args = args || { };
                return this.trigger(name, args);
            },

            _unselect: function(element) {
                if (this.trigger(UNSELECT, { element: element })) {
                    return;
                }

                var rangeSelectedAttr = kendo.attr("range-selected");

                element.removeClass(this.options.selectedClass || SELECTED).removeAttr(rangeSelectedAttr);

                if (this.options.aria) {
                    element.attr(ARIASELECTED, false);
                }

                return element;
            },

            _select: function(e) {
                if (this._allowSelection(e.event.target)) {
                    if (!msie || (msie && !$(kendo._activeElement()).is(this.options.inputSelectors))) {
                        e.preventDefault();
                    }
                }
            },

            _allowSelection: function(target) {
                if ($(target).is(this.options.inputSelectors)) {
                    this.userEvents.cancel();
                    this._downTarget = null;
                    return false;
                }

                return true;
            },

            resetTouchEvents: function() {
                this.userEvents.cancel();
            },

            clear: function() {
                var items = this.element.find(this.options.filter + "." + (this.options.selectedClass || SELECTED));
                this._unselect(items);
            },

            selectRange: function(start, end) {
                var that = this,
                    idx,
                    tmp,
                    items;

                that.clear();

                if (that.element.length > 1) {
                    items = that.options.continuousItems();
                }

                if (!items || !items.length) {
                    items = that.element.find(that.options.filter);
                }

                start = $.inArray($(start)[0], items);
                end = $.inArray($(end)[0], items);

                if (start > end) {
                    tmp = start;
                    start = end;
                    end = tmp;
                }

                if (!that.options.useAllItems) {
                    end += that.element.length - 1;
                }

                for (idx = start; idx <= end; idx ++ ) {
                    that._selectElement(items[idx], true);
                }
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that.element.off(NS);

                that.userEvents.destroy();

                that._marquee = that._lastActive = that.element = that.userEvents = null;
            }
        });

        Selectable.parseOptions = function(selectable) {
            var selectableMode = selectable.mode || selectable;
            var asLowerString = typeof selectableMode === "string" && selectableMode.toLowerCase();
            return {
                multiple: asLowerString && asLowerString.indexOf("multiple") > -1,
                cell: asLowerString && asLowerString.indexOf("cell") > -1
            };
        };

        function compareElements(element, toCompare) {

            if (element.length !== toCompare.length) {
                return false;
            }

            for (var i = 0; i < element.length; i++) {
                if (element[i] !== toCompare[i]) {
                    return false;
                }
            }

            return true;
        }

        function collision(element, position) {
            if (!element.is(":visible")) {
                return false;
            }

            var elementPosition = kendo.getOffset(element),
                right = position.left + position.width,
                bottom = position.top + position.height;

            elementPosition.right = elementPosition.left + kendo._outerWidth(element);
            elementPosition.bottom = elementPosition.top + kendo._outerHeight(element);

            return !(elementPosition.left > right ||
                elementPosition.right < position.left ||
                elementPosition.top > bottom ||
                elementPosition.bottom < position.top);
        }

        function overlaps(firstRect, secondRect) {
            return !(firstRect.right <= secondRect.left ||
                firstRect.left >= secondRect.right ||
                firstRect.bottom <= secondRect.top ||
                firstRect.top >= secondRect.bottom);
        }

        kendo.ui.plugin(Selectable);

    })(window.kendo.jQuery);
    var kendo$J = kendo;

    var __meta__$O = {
        id: "html.base",
        name: "Html.Base",
        category: "web",
        description: "",
        depends: ["core"],
        features: []
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Class = kendo.Class;

        kendo.html = kendo.html || {};

        var HTMLBase = Class.extend({
            init: function(element, options) {
                var that = this;
                that.element = $(element);
                options = options || {};
                delete options.name;
                that._initOptions(options);
            },
            options: {
                stylingOptions: []
            },
            _addClasses: function() {
                var that = this,
                    options = that.options,
                    stylingOptions = options.stylingOptions,
                    previouslyAddedClasses = that.wrapper.data("added-classes");

                stylingOptions = stylingOptions.map(function(option) {
                    var validFill;

                    if (option === "themeColor") {
                        validFill = kendo.cssProperties.getValidClass({
                            widget: options.name,
                            propName: "fillMode",
                            value: options.fillMode
                        });

                        if (!validFill || validFill.length === 0) {
                            return "";
                        }
                    }

                    return kendo.cssProperties.getValidClass({
                        widget: options.name,
                        propName: option,
                        value: options[option],
                        fill: options.fillMode
                    });
                });

                if (previouslyAddedClasses) {
                    that.wrapper.removeClass(previouslyAddedClasses.join(" "));
                }

                that.wrapper.data("added-classes", stylingOptions);
                that.wrapper.addClass(stylingOptions.join(" "));
            },
            html: function() {
                var that = this;

                return that.wrapper[0].outerHTML;
            }
        });

        $.extend(kendo.html, {
            HTMLBase: HTMLBase
        });

    })(window.kendo.jQuery);
    var kendo$I = kendo;

    var __meta__$N = {
        id: "html.icon",
        name: "Html.Icon",
        category: "web",
        description: "HTML font icon rendering utility for Kendo UI for jQuery.",
        depends: ["html.base"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            extend = $.extend,
            HTMLBase = kendo.html.HTMLBase;

        var KFONTICON = 'k-icon k-font-icon';
        var KI_PREFFIX = 'k-i-';
        var KSVGICON = 'k-icon k-svg-icon';
        var KSVG_PREFFIX = 'k-svg-i-';

        var FLIP_PREFIX = 'k-flip-';
        var FLIP_HORIZONTAL = FLIP_PREFIX + "h";
        var FLIP_VERTICAL = FLIP_PREFIX + "v";

        var THEME_COLOR_PREFIX = 'k-color-';

        var ICON_TYPES = {
            'svg': function (element, options) { return new HTMLSvgIcon(element, options); },
            'font': function (element, options) { return new HTMLFontIcon(element, options); }
        };

        var FLIP_CLASSES = {
            default: '',
            horizontal: FLIP_HORIZONTAL,
            vertical: FLIP_VERTICAL,
            both: (FLIP_HORIZONTAL + " " + FLIP_VERTICAL)
        };

        var renderIcon = function(element, options) {
            if (!element || $.isPlainObject(element) || kendo.isString(element)) {
                options = element;
                element = $("<span></span>");
            }

            if (kendo.isString(options)) {
                options = {
                    icon: options
                };
            }

            if (!kendo.isPresent(options.type)) {
                options.type = kendo.defaults.iconType ? kendo.defaults.iconType : 'svg';
            }

            if (kendo.isFunction(options.type)) {
                return options.type(element, options);
            }

            if (!kendo.isFunction(ICON_TYPES[options.type])) {
                return null;
            }

            return (ICON_TYPES[options.type](element, options)).html();
        };

        var HTMLBaseIcon = HTMLBase.extend({
            init: function(element, options) {
                var that = this;
                HTMLBase.fn.init.call(that, element, options);
                that._wrapper();
            },
            options: {
                name: 'HTMLIcon',
                size: 'none',
                themeColor: 'none',
                flip: 'default',
                iconClass: '',
                stylingOptions: [ 'size', 'themeColor', 'fill' ]
            },
            _wrapper: function() {
                var that = this;

                that._addClasses();
            },
            _addClasses: function() {
                var that = this,
                    options = that.options,
                    stylingOptions = options.stylingOptions,
                    previouslyAddedClasses = that.wrapper.data("added-classes");

                stylingOptions = stylingOptions.map(function(option) {
                    if (option === 'themeColor') {
                        return kendo.cssProperties.getValidClass({
                            widget: options.name,
                            propName: option,
                            value: options[option],
                            prefix: THEME_COLOR_PREFIX
                        });
                    }

                    if (option === 'fill') {
                        return FLIP_CLASSES[options.flip];
                    }

                    return kendo.cssProperties.getValidClass({
                        widget: options.name,
                        propName: option,
                        value: options[option],
                        fill: options.fillMode
                    });
                });

                if (previouslyAddedClasses) {
                    that.wrapper.removeClass(previouslyAddedClasses.filter(function (x) { return x !== that._className; }).join(" "));
                }

                that.wrapper.data("added-classes", stylingOptions.concat([that._className]));
                that.wrapper.addClass(stylingOptions.join(" "));
            }
        });

        var HTMLFontIcon = HTMLBaseIcon.extend({
            init: function(element, options) {
                HTMLBaseIcon.fn.init.call(this, element, options);
            },
            options: extend({}, HTMLBaseIcon.fn.options, {
                name: 'HTMLFontIcon',
                icon: null
            }),
            _wrapper: function() {
                var that = this,
                    // Find if there is an existing k-i- class appended to the element.
                    currentIconClass = that.element[0].className.split(" ").find(function (x) { return x.includes(KI_PREFFIX); }),
                    className = that.options.icon ? ("" + (that.options.icon.startsWith(KI_PREFFIX) ? "" : KI_PREFFIX) + (that.options.icon)) : "";

                that._className = className;
                that.wrapper = that.element
                    .addClass(KFONTICON)
                    .removeClass(currentIconClass) // Remove any existing icons.
                    .addClass(className)
                    .addClass(that.options.iconClass || '');

                HTMLBaseIcon.fn._wrapper.call(this);
            }
        });

        var HTMLSvgIcon = HTMLBaseIcon.extend({
            init: function(element, options) {
                // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.
                element.empty();
                HTMLBaseIcon.fn.init.call(this, element, options);
            },
            options: extend({}, HTMLBaseIcon.fn.options, {
                name: 'HTMLSVGIcon',
                icon: null
            }),
            _wrapper: function() {
                var that = this,
                    icon = that.options.icon,
                    iconClass = that.options.iconClass,
                    // Find if there is an existing k-svg-i- class appended to the element.
                    currentIconClass = that.element[0].className.split(" ").find(function (x) { return x.includes(KSVG_PREFFIX); }),
                    svgElm = $('<svg></svg>'),
                    className;

                if (!icon && iconClass) {
                    // match k-i-(some-icon-name)
                    var regex = /k-i-(\w+(?:-\w+)*)/;
                    var iconNameMatch = iconClass.match(regex);
                    if (iconNameMatch) {
                        icon = iconNameMatch[1];
                        iconClass = iconClass.replace(iconNameMatch[0], "");
                    }
                }

                if (kendo.isString(icon)) {
                    // remove k-i- and convert kebab-case-icon to camelCaseIcon
                    icon = icon.replace('k-i-', '').replace(/-./g, function (x){ return x[1].toUpperCase(); });
                    icon = kendo.ui.svgIcons[icon] || kendo.ui.svgIcons[(icon + "Icon")];
                }

                className = icon && icon.name ? ("" + KSVG_PREFFIX + (icon.name)) : '';
                that._className = className;

                that.wrapper = that.element
                    .addClass(KSVGICON)
                    .removeClass(currentIconClass) // Remove any existing icons.
                    .addClass(className)
                    .addClass(iconClass || '')
                    .attr("aria-hidden", true);

                if ($.isPlainObject(icon)) {
                    svgElm.attr('viewBox', icon.viewBox || '')
                        .attr({
                            'viewBox': icon.viewBox || '',
                            'focusable': 'false',
                            'xmlns': 'http://www.w3.org/2000/svg'
                        })
                        .html(icon.content || '');

                    that.wrapper.append(svgElm[0].outerHTML);
                }

                HTMLBaseIcon.fn._wrapper.call(this);
            }
        });

        $.extend(kendo.html, {
            renderIcon: renderIcon,
            HTMLFontIcon: HTMLFontIcon,
            HTMLSvgIcon: HTMLSvgIcon,
            getIconRenderer: function (type) { return ICON_TYPES[type]; }
        });

        kendo.cssProperties.registerPrefix("HTMLFontIcon", "k-icon-");

        kendo.cssProperties.registerValues("HTMLFontIcon", [{
            prop: "size",
            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])
        }, {
            prop: "themeColor",
            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']
        }]);

        kendo.cssProperties.registerPrefix("HTMLSVGIcon", "k-icon-");

        kendo.cssProperties.registerValues("HTMLSVGIcon", [{
            prop: "size",
            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])
        }, {
            prop: "themeColor",
            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']
        }]);
    })(window.kendo.jQuery);
    var kendo$H = kendo;

    var caretTrIcon = {
        name: 'caret-tr',
        content: '<path d="M352 160v192L160 160h192z" />',
        viewBox: '0 0 512 512'
    };

    var caretBrIcon = {
        name: 'caret-br',
        content: '<path d="M352 352H160l192-192v192z" />',
        viewBox: '0 0 512 512'
    };

    var caretBlIcon = {
        name: 'caret-bl',
        content: '<path d="M160 352V160l192 192H160z" />',
        viewBox: '0 0 512 512'
    };

    var caretTlIcon = {
        name: 'caret-tl',
        content: '<path d="M160 160h192L160 352V160z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltUpIcon = {
        name: 'caret-alt-up',
        content: '<path d="m256 160 128 192H128l128-192z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltRightIcon = {
        name: 'caret-alt-right',
        content: '<path d="M352 256 160 384V128l192 128z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltDownIcon = {
        name: 'caret-alt-down',
        content: '<path d="M256 352 128 160h256L256 352z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltLeftIcon = {
        name: 'caret-alt-left',
        content: '<path d="m160 256 192-128v256L160 256z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltToTopIcon = {
        name: 'caret-alt-to-top',
        content: '<path d="m128 352 128-192 128 192H128zm256-224H128v32h256v-32z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltToRightIcon = {
        name: 'caret-alt-to-right',
        content: '<path d="m128 128 192 128-192 128V128zm224 256V128h-32v256h32z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltToBottomIcon = {
        name: 'caret-alt-to-bottom',
        content: '<path d="M384 128 256 320 128 128h256zM128 352h256v-32H128v32z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltToLeftIcon = {
        name: 'caret-alt-to-left',
        content: '<path d="M352 384 160 256l192-128v256zM128 128v256h32V128h-32z" />',
        viewBox: '0 0 512 512'
    };

    var caretDoubleAltUpIcon = {
        name: 'caret-double-alt-up',
        content: '<path d="m128 448 128-192 128 192H128zM256 64 128 256h256L256 64z" />',
        viewBox: '0 0 512 512'
    };

    var caretDoubleAltRightIcon = {
        name: 'caret-double-alt-right',
        content: '<path d="m64 128 192 128L64 384V128zm384 128L256 128v256l192-128z" />',
        viewBox: '0 0 512 512'
    };

    var caretDoubleAltDownIcon = {
        name: 'caret-double-alt-down',
        content: '<path d="M384 64 256 256 128 64h256zM256 448l128-192-128 1H128l128 191z" />',
        viewBox: '0 0 512 512'
    };

    var caretDoubleAltLeftIcon = {
        name: 'caret-double-alt-left',
        content: '<path d="M448 384 256 256.001l192-128V384zM64 256.001 256 384V128L64 256.001z" />',
        viewBox: '0 0 512 512'
    };

    var caretAltExpandIcon = {
        name: 'caret-alt-expand',
        content: '<path d="M128 288h256L256 480 128 288zM256 32 128 224h256.001L256 32z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsNoChangeIcon = {
        name: 'arrows-no-change',
        content: '<path d="M256 160 128 352 0 160h256zm96 0L224 352h256.001L352 160z" />',
        viewBox: '0 0 512 512'
    };

    var arrowOverflowDownIcon = {
        name: 'arrow-overflow-down',
        content: '<path d="M384 160 256 352 128 160h256zM128 96v32h256V96H128z" />',
        viewBox: '0 0 512 512'
    };

    var chevronUpIcon = {
        name: 'chevron-up',
        content: '<path d="m129.941 353.941 126.06-126.06 126.061 126.06L416 320 256.001 160 96 320l33.941 33.941z" />',
        viewBox: '0 0 512 512'
    };

    var chevronRightIcon = {
        name: 'chevron-right',
        content: '<path d="m158.059 129.941 126.06 126.06-126.06 126.061L192 416l160-159.999L192 96l-33.941 33.941z" />',
        viewBox: '0 0 512 512'
    };

    var chevronDownIcon = {
        name: 'chevron-down',
        content: '<path d="m382.059 158.059-126.06 126.06-126.061-126.06L96 192l159.999 160L416 192l-33.941-33.941z" />',
        viewBox: '0 0 512 512'
    };

    var chevronLeftIcon = {
        name: 'chevron-left',
        content: '<path d="m353.941 382.059-126.06-126.06 126.06-126.061L320 96 160 255.999 320 416l33.941-33.941z" />',
        viewBox: '0 0 512 512'
    };

    var arrowUpIcon = {
        name: 'arrow-up',
        content: '<path d="M384 288h-96v128h-64l-.001-128H128L255.999 96 384 288z" />',
        viewBox: '0 0 512 512'
    };

    var arrowRightIcon = {
        name: 'arrow-right',
        content: '<path d="M224 384v-96H96v-64h128v-96l192 128-192 128z" />',
        viewBox: '0 0 512 512'
    };

    var arrowDownIcon = {
        name: 'arrow-down',
        content: '<path d="M128 224h96V96h64l.001 128H384L256.001 416 128 224z" />',
        viewBox: '0 0 512 512'
    };

    var arrowLeftIcon = {
        name: 'arrow-left',
        content: '<path d="M288 128v96h128v64l-128 .001V384L96 256.001 288 128z" />',
        viewBox: '0 0 512 512'
    };

    var levelDownIcon = {
        name: 'level-down',
        content: '<path d="M288 192v64h64l-80 128-80-128h64v-64H128v-32h288v32H288z" />',
        viewBox: '0 0 512 512'
    };

    var levelUpIcon = {
        name: 'level-up',
        content: '<path d="m128 288 80-128 80 128h-64v64h192v32H192v-96h-64z" />',
        viewBox: '0 0 512 512'
    };

    var levelToTopIcon = {
        name: 'level-to-top',
        content: '<path d="m128 288 80-128 80 128h-64v64h192v32H192v-96h-64zm288-160H96v32h320v-32z" />',
        viewBox: '0 0 512 512'
    };

    var colResizeIcon = {
        name: 'col-resize',
        content: '<path d="M128 255h64v33h-64v64.6L0 271.9l128-80.7V255zm96 225h64V32h-64v448zm288-207.9-128-80.7V256h-64v33h64v63.9l128-80.8z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsAxesIcon = {
        name: 'arrows-axes',
        content: '<path d="M352 480v-64H128v64H96v-64H32v-32h64V160H32l80-128 80 128h-64v224h224v-64l128 80-128 80z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsSwapIcon = {
        name: 'arrows-swap',
        content: '<path d="M256 160h-64v224h-32V160H96l80-128 80 128zm96 192V128h-32v224h-64l80 128 80-128h-64z" />',
        viewBox: '0 0 512 512'
    };

    var dragAndDropIcon = {
        name: 'drag-and-drop',
        content: '<path d="m32 128 192 112L32 352V128zm224 96v32h224v-32H256z" />',
        viewBox: '0 0 512 512'
    };

    var categorizeIcon = {
        name: 'categorize',
        content: '<path d="M32 32v192l160-96L32 32zm0 448V288l160 96-160 96zM192 64h288v32H192V64zm0 96h288v32H192v-32zm0 160h288v32H192v-32zm0 96h288v32H192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var gridIcon = {
        name: 'grid',
        content: '<path d="M32 32h128v128H32V32zm160 448h128V352H192v128zm-160 0h128V352H32v128zm0-160h128V192H32v128zm160 0h128V192H192v128zM352 32v128h128V32H352zm0 288h128V192H352v128zM192 160h128V32H192v128zm160 320h128V352H352v128z" />',
        viewBox: '0 0 512 512'
    };

    var gridLayoutIcon = {
        name: 'grid-layout',
        content: '<path d="M32 32h96v96H32V32zm128 0v96h320V32H160zM32 288h96v-96H32v96zm128 0h320v-96H160v96zM32 448h96v-96H32v96zm128 0h320v-96H160v96z" />',
        viewBox: '0 0 512 512'
    };

    var groupIcon = {
        name: 'group',
        content: '<path d="M32 256h192v192H32V256zm0-32h192V32H32v192zm224 224h192V256H256v192zm0-416v192h192V32H256z" />',
        viewBox: '0 0 512 512'
    };

    var ungroupIcon = {
        name: 'ungroup',
        content: '<path d="M32 256h192v192H32V256zm32-64h128V64H64v128zm224 224h128V288H288v128zM256 32v192h192V32H256z" />',
        viewBox: '0 0 512 512'
    };

    var handleDragIcon = {
        name: 'handle-drag',
        content: '<path d="M160 64h64v384h-64V64zm96 0v384h64V64h-64z" />',
        viewBox: '0 0 512 512'
    };

    var layoutIcon = {
        name: 'layout',
        content: '<path d="M192 416h256v64H192v-64zm0-32h256v-64H192v64zM32 480h128V128H32v352zm160-288h256v-64H192v64zm0 96h256v-64H192v64zM32 0v96h416V0H32z" />',
        viewBox: '0 0 512 512'
    };

    var layout1By4Icon = {
        name: 'layout-1-by-4',
        content: '<path d="M32 0h192v480H32V0zm224 0v96h192V0H256zm0 224h192v-96H256v96zm0 128h192v-96H256v96zm0 128h192v-96H256v96z" />',
        viewBox: '0 0 512 512'
    };

    var layout2By2Icon = {
        name: 'layout-2-by-2',
        content: '<path d="M32 224h192V0H32v224zm224 0h192V0H256v224zM32 480h192V256H32v224zm224 0h192V256H256v224z" />',
        viewBox: '0 0 512 512'
    };

    var layoutSideBySideIcon = {
        name: 'layout-side-by-side',
        content: '<path d="M32 384h416v96H32v-96zm0-32h416v-96H32v96zm0-128h416v-96H32v96zM32 0v96h416V0H32z" />',
        viewBox: '0 0 512 512'
    };

    var layoutStackedIcon = {
        name: 'layout-stacked',
        content: '<path d="M32 256h192v96H32v-96zm0 224h192v-96H32v96zm224-128h192v-96H256v96zM32 0v224h416V0H32zm224 480h192v-96H256v96z" />',
        viewBox: '0 0 512 512'
    };

    var columnsIcon = {
        name: 'columns',
        content: '<path d="M64 32h96v448H64V32zm128 448h96V32h-96v448zM320 32v448h96V32h-96z" />',
        viewBox: '0 0 512 512'
    };

    var rowsIcon = {
        name: 'rows',
        content: '<path d="M480 64v96H32V64h448zM32 192v96h448v-96H32zm448 128H32v96h448v-96z" />',
        viewBox: '0 0 512 512'
    };

    var reorderIcon = {
        name: 'reorder',
        content: '<path d="M480 128v64H32v-64h448zM32 224v64h448v-64H32zm448 96H32v64h448v-64z" />',
        viewBox: '0 0 512 512'
    };

    var menuIcon = {
        name: 'menu',
        content: '<path d="M480 32v96H32V32h448zM32 192v96h448v-96H32zm448 160H32v96h448v-96z" />',
        viewBox: '0 0 512 512'
    };

    var moreVerticalIcon = {
        name: 'more-vertical',
        content: '<path d="M240 128c26.4 0 48-21.6 48-48s-21.6-48-48-48-48 21.6-48 48 21.6 48 48 48zm0 64c-26.4 0-48 21.6-48 48s21.6 48 48 48 48-21.6 48-48-21.6-48-48-48zm0 160c-26.4 0-48 21.6-48 48s21.6 48 48 48 48-21.6 48-48-21.6-48-48-48z" />',
        viewBox: '0 0 512 512'
    };

    var moreHorizontalIcon = {
        name: 'more-horizontal',
        content: '<path d="M128 240c0-26.4-21.6-48-48-48s-48 21.6-48 48 21.6 48 48 48 48-21.6 48-48zm64 0c0 26.4 21.6 48 48 48s48-21.6 48-48-21.6-48-48-48-48 21.6-48 48zm160 0c0 26.4 21.6 48 48 48s48-21.6 48-48-21.6-48-48-48-48 21.6-48 48z" />',
        viewBox: '0 0 512 512'
    };

    var overlapIcon = {
        name: 'overlap',
        content: '<path d="M320 320V64H64v256h256zM192 448h256V192h-96v160H192v96z" />',
        viewBox: '0 0 512 512'
    };

    var homeIcon = {
        name: 'home',
        content: '<path d="M480 256c0 17.7-14.3 32-32 32-9.1 0-17.4-3.8-23.2-10l-8.8-8.7V416c0 17.7-14.3 32-32 32h-64c-17.7 0-32-14.3-32-32v-96h-64v96c0 17.7-14.3 32-32 32h-64c-17.7 0-32-14.3-32-32V268.6l-8.3 8.9C81.8 284 73.4 288 64 288c-17.7 0-32-14.3-32-32 0-8.5 3.3-16.1 8.6-21.9l.2-.2 1-1 191-191.3 1-1c5.8-5.5 13.6-8.9 22.2-8.9 9.1 0 17.3 3.8 23.1 9.9L470.3 233l.7.7.3.3c5.4 5.8 8.7 13.5 8.7 22z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsLeftRightIcon = {
        name: 'arrows-left-right',
        content: '<path d="m512 240-128-80v64H128v-64L0 240l128 80v-64h256v64z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsTopBottomIcon = {
        name: 'arrows-top-bottom',
        content: '<path d="m240 512 80-128h-64V128h64L240 0l-80 128h64v256h-64z" />',
        viewBox: '0 0 512 512'
    };

    var borderRadiusBottomLeftIcon = {
        name: 'border-radius-bottom-left',
        content: '<path d="M384 368c0 8.8-7.2 16-16 16h-64c-97 0-176-79-176-176v-64c0-8.8 7.2-16 16-16s16 7.2 16 16v64c0 79.4 64.6 144 144 144h64c8.8 0 16 7.2 16 16z" />',
        viewBox: '0 0 512 512'
    };

    var borderRadiusBottomRightIcon = {
        name: 'border-radius-bottom-right',
        content: '<path d="M368 128c8.8 0 16 7.2 16 16v64c0 97-79 176-176 176h-64c-8.8 0-16-7.2-16-16s7.2-16 16-16h64c79.4 0 144-64.6 144-144v-64c0-8.8 7.2-16 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var borderRadiusTopLeftIcon = {
        name: 'border-radius-top-left',
        content: '<path d="M144 384c-8.8 0-16-7.2-16-16v-64c0-97 79-176 176-176h64c8.8 0 16 7.2 16 16s-7.2 16-16 16h-64c-79.4 0-144 64.6-144 144v64c0 8.8-7.2 16-16 16z" />',
        viewBox: '0 0 512 512'
    };

    var borderRadiusTopRightIcon = {
        name: 'border-radius-top-right',
        content: '<path d="M128 144c0-8.8 7.2-16 16-16h64c97 0 176 79 176 176v64c0 8.8-7.2 16-16 16s-16-7.2-16-16v-64c0-79.4-64.6-144-144-144h-64c-8.8 0-16-7.2-16-16z" />',
        viewBox: '0 0 512 512'
    };

    var borderRadiusIcon = {
        name: 'border-radius',
        content: '<path d="M64 32h96v32H64v96H32V32h32zm384 416h-96v32h128V352h-32v96zM352 32v32h96v96h32V32H352zM64 352H32v128h128v-32H64v-96z" />',
        viewBox: '0 0 512 512'
    };

    var borderStyleBottomIcon = {
        name: 'border-style-bottom',
        content: '<path d="M96 480v-64h320v64H96zm1-416h320V32H97v32zM64 416V96H32v320h32zm416 0V96h-32v320h32z" />',
        viewBox: '0 0 512 512'
    };

    var borderStyleLeftIcon = {
        name: 'border-style-left',
        content: '<path d="M32 96h64v320H32V96zm416 1v320h32V97h-32zM96 64h320V32H96v32zm0 416h320v-32H96v32z" />',
        viewBox: '0 0 512 512'
    };

    var borderStyleRightIcon = {
        name: 'border-style-right',
        content: '<path d="M480 416h-64V96h64v320zm-416-1V95H32v320h32zm352 33H96v32h320v-32zm0-416H96v32h320V32z" />',
        viewBox: '0 0 512 512'
    };

    var borderStyleTopIcon = {
        name: 'border-style-top',
        content: '<path d="M416 32v64H96V32h320zm-1 416H95v32h320v-32zm33-352v320h32V96h-32zM32 96v320h32V96H32z" />',
        viewBox: '0 0 512 512'
    };

    var borderStyleIcon = {
        name: 'border-style',
        content: '<path d="M32 96h32v320H32zm416 1h32v320h-32zM96 32h320v32H96zm0 416h320v32H96z" />',
        viewBox: '0 0 512 512'
    };

    var boxSizingIcon = {
        name: 'box-sizing',
        content: '<path d="M32 0H0v480h480V0H32zm416 448H32V32h416v416zm-96-320h-32V96h32v32zM96 192H64v-32h32v32zm0-64H64V96h32v32zm64 0h-32V96h32v32zm64 0h-32V96h32v32zm64 0h-32V96h32v32zM96 256H64v-32h32v32zm320-128h-32V96h32v32zm0 128h-32v-32h32v32zm0-64h-32v-32h32v32zM96 384H64v-32h32v32zm256 0h-32v-32h32v32zm-192 0h-32v-32h32v32zm64 0h-32v-32h32v32zm64 0h-32v-32h32v32zm128 0h-32v-32h32v32zM96 320H64v-32h32v32zm320 0h-32v-32h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var chevronDoubleDownIcon = {
        name: 'chevron-double-down',
        content: '<path d="M382.1 224 256 350.1 129.9 224 96 257.9l160 160 160-160-33.9-33.9zm0-128L256 222.1 129.9 96 96 129.9l160 160 160-160L382.1 96z" />',
        viewBox: '0 0 512 512'
    };

    var chevronDoubleLeftIcon = {
        name: 'chevron-double-left',
        content: '<path d="M289 383 162.9 257 289 130.9 255 97 95 257l160 160 34-34zm128 0L290.9 257 417 130.9 383 97 223 257l160 160 34-34z" />',
        viewBox: '0 0 512 512'
    };

    var chevronDoubleRightIcon = {
        name: 'chevron-double-right',
        content: '<path d="M223 130.9 349.1 257 223 383l34 34 160-160L257 97l-34 33.9zm-128 0L221.1 257 95 383l34 34 160-160L129 97l-34 33.9z" />',
        viewBox: '0 0 512 512'
    };

    var chevronDoubleUpIcon = {
        name: 'chevron-double-up',
        content: '<path d="m129.9 289.9 126.1-126L382.1 290l33.9-34L256 96 96 256l33.9 33.9zm0 128 126.1-126L382.1 418l33.9-34-160-160L96 384l33.9 33.9z" />',
        viewBox: '0 0 512 512'
    };

    var dataOdsIcon = {
        name: 'data-ods',
        content: '<path d="M415.94 93.61v.33c-.53 33.88-86.26 61.29-191.93 61.29S32.6 127.82 32.07 93.94v-.33C32.06 59.59 118 32 224 32s191.94 27.59 191.94 61.61Zm-.06 46.39v.32c-.53 33.88-86.26 61.29-191.93 61.29S32.54 174.2 32 140.32V140l.12 86.81v.32c.53 33.88 86.26 61.29 191.93 61.29S415.46 261 416 227.13v-.32Zm.12 180-.07-52v.32c-.34 21.73-35.73 40.8-88.93 51.68Zm-256 6.11C85.73 317.69 32.43 295 32 268.32V268l.12 86.81v.32C32.55 381.8 85.8 404.47 160 412.9Zm73.5 123.55q-22.26 0-36.28-14.49t-14-37.76q0-24.57 14.24-39.74t37.72-15.18q22.18 0 35.88 14.53t13.69 38.3q0 24.42-14.2 39.38t-37.05 14.96Zm1-87.08q-12.28 0-19.51 9.22t-7.23 24.39q0 15.39 7.23 24.35a23.15 23.15 0 0 0 18.93 9q12.07 0 19.15-8.71t7.08-24.17q0-16.11-6.86-25.08t-18.78-9Zm68.9 85.28V344.23h36.71q55.22 0 55.21 50.51 0 24.21-15.06 38.66t-40.15 14.46Zm23.34-84.63v65.69h11.57q15.17 0 23.81-9.1t8.64-24.82q0-14.82-8.56-23.31t-24-8.49Zm82.49 80.65v-23.12a44.75 44.75 0 0 0 13.66 7.91 43.91 43.91 0 0 0 14.89 2.64 33.06 33.06 0 0 0 7.7-.8 18 18 0 0 0 5.49-2.2 9.67 9.67 0 0 0 3.29-3.33 8.29 8.29 0 0 0 1.08-4.15 9 9 0 0 0-1.73-5.42 18.77 18.77 0 0 0-4.74-4.41 49 49 0 0 0-7.12-3.9q-4.11-1.87-8.89-3.83-12.14-5.06-18.1-12.36a27 27 0 0 1-6-17.63 28.05 28.05 0 0 1 3.25-13.91 27.71 27.71 0 0 1 8.85-9.58 39.85 39.85 0 0 1 13-5.53 66.6 66.6 0 0 1 15.61-1.77 93.91 93.91 0 0 1 14.34 1 56.36 56.36 0 0 1 11.53 3v21.6a35.76 35.76 0 0 0-5.68-3.18 44.84 44.84 0 0 0-6.32-2.27 48.64 48.64 0 0 0-6.47-1.34 45.54 45.54 0 0 0-6.1-.43 31.65 31.65 0 0 0-7.23.76 18.18 18.18 0 0 0-5.49 2.13 10.47 10.47 0 0 0-3.47 3.29 7.77 7.77 0 0 0-1.23 4.3 8.27 8.27 0 0 0 1.37 4.66 15.88 15.88 0 0 0 3.91 3.9 40.85 40.85 0 0 0 6.14 3.61q3.61 1.77 8.16 3.65a91.56 91.56 0 0 1 11.17 5.53 39.85 39.85 0 0 1 8.49 6.61 25.82 25.82 0 0 1 5.42 8.42 29.82 29.82 0 0 1 1.88 11q0 8.67-3.29 14.56a26.68 26.68 0 0 1-8.92 9.54 38.57 38.57 0 0 1-13.12 5.24 75.82 75.82 0 0 1-15.79 1.59 88.11 88.11 0 0 1-16.22-1.44 49.18 49.18 0 0 1-13.31-4.34Z" />',
        viewBox: '0 0 512 512'
    };

    var nonRecurrenceIcon = {
        name: 'non-recurrence',
        content: '<path d="m321 434.2 47.5 47.5C335.5 501 297 512 256 512 132.3 512 32 411.7 32 288c0-41 11-79.5 30.3-112.6l47.5 47.5c-8.9 19.9-13.8 41.9-13.8 65 0 88.2 71.8 160 160 160 23.1.1 45.2-4.8 65-13.7Zm118.3-17.5c12.9-18.3 23.1-38.7 30.1-60.4 6.9-21.5 10.6-44.5 10.6-68.3 0-40.8-10.9-79.1-30-112l-55.5 32c13.6 23.5 21.5 50.9 21.5 80 0 4.8-.2 9.5-.6 14.2-2.2 24.8-10.1 47.9-22.3 68.2L173.6 150.9c20.3-12.2 43.4-20.1 68.2-22.3 4.7-.4 9.4-.6 14.2-.6v64l160-96L256 0v64c-23.8 0-46.7 3.7-68.3 10.6-21.8 7-42.1 17.2-60.4 30.1L22.6 0 0 22.6 489.4 512l22.6-22.6-72.7-72.7Z" />',
        viewBox: '0 0 512 512'
    };

    var displayBlockIcon = {
        name: 'display-block',
        content: '<path d="M32 32h448v32H32zm0 416h448v32H32zm0-64h448V128H32v256zm64-192h320v128H96V192z" />',
        viewBox: '0 0 512 512'
    };

    var displayFlexIcon = {
        name: 'display-flex',
        content: '<path d="M32 32v448h448V32H32zm416 416H64V64h384v384zM128 128h96v256h-96zm160 0h96v256h-96z" />',
        viewBox: '0 0 512 512'
    };

    var displayInlineFlexIcon = {
        name: 'display-inline-flex',
        content: '<path d="M96 416h320V96H96v320zm32-288h256v256H128V128zm32 32h64v192h-64zm128 0h64v192h-64zM32 32h32v448H32zm416 0h32v448h-32z" />',
        viewBox: '0 0 512 512'
    };

    var dropletSliderIcon = {
        name: 'droplet-slider',
        content: '<path d="M192 384v32c-53 0-96-43-96-96h32c0 35.3 28.7 64 64 64zm160-72c0 92.8-71.6 168-160 168S32 404.8 32 312C32 181.3 192 32 192 32s160 149.3 160 280zm-32 0c0-46.3-25.3-104.7-73-169-20-27-40.3-49.8-55-65.4-14.7 15.6-34.9 38.5-55 65.4-47.8 64.3-73 122.8-73 169 0 75 57.4 136 128 136s128-61 128-136zm128-88h-32v256h32V224zm0-192h-32v64h32V32zm-64 96v64h96v-64h-96z" />',
        viewBox: '0 0 512 512'
    };

    var fileReportIcon = {
        name: 'file-report',
        content: '<path d="M416 32H96a32 32 0 0 0-32 32v384a32 32 0 0 0 32 32h320a32 32 0 0 0 32-32V64a32 32 0 0 0-32-32Zm0 416H96V64h320Zm-96-96-160 .14V384l160-.14Zm32-64-192 .17V320l192-.17ZM223.15 127.9a64 64 0 1 0 64 64h-64Zm32-32v64h64a64 64 0 0 0-63.99-64Z" />',
        viewBox: '0 0 512 512'
    };

    var gapColumnIcon = {
        name: 'gap-column',
        content: '<path d="M32 32v448h448V32H32zm416 416H64V64h384v384zM96 96h96v320H96zm224 0h96v320h-96z" />',
        viewBox: '0 0 512 512'
    };

    var gapRowIcon = {
        name: 'gap-row',
        content: '<path d="M480 32H32v448h448V32zM64 448V64h384v384H64zM96 96h320v96H96zm0 224h320v96H96z" />',
        viewBox: '0 0 512 512'
    };

    var handleResizeAltIcon = {
        name: 'handle-resize-alt',
        content: '<path d="M480 224v256H224v-64h192V224h64z" />',
        viewBox: '0 0 512 512'
    };

    var handleResizeIcon = {
        name: 'handle-resize',
        content: '<path d="m379.5 475.5-22.6-22.6 96-96 22.6 22.6-96 96zm79.7-208.2-22.6-22.6-191.9 191.9 22.6 22.6 191.9-191.9z" />',
        viewBox: '0 0 512 512'
    };

    var imagesIcon = {
        name: 'images',
        content: '<path d="M256 288c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm96-64v192c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32h256c17.7 0 32 14.3 32 32zm-31.8 0c-.1-.1-.1-.1 0 0l-256.1-.1-.1.1v149.9l74.6-70 85.3 80 53.3-50 42.7 40 .3-149.9zm63.8-96H128c-17.7 0-32 14.3-32 32h288v224c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32zm64-64H192c-17.7 0-32 14.3-32 32h288v224c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var letterSpaceIcon = {
        name: 'letter-space',
        content: '<path d="m310 336 26 80h48L280 96h-48L128 416h48l26-80h108zm-54-166.2L294.4 288h-76.8L256 169.8zM448 32h32v448h-32zM32 32h32v448H32z" />',
        viewBox: '0 0 512 512'
    };

    var lineHeightIcon = {
        name: 'line-height',
        content: '<path d="m310 336 26 80h48L280 96h-48L128 416h48l26-80h108zm-54-166.2L294.4 288h-76.8L256 169.8zM32 32h448v32H32zm0 416h448v32H32z" />',
        viewBox: '0 0 512 512'
    };

    var listLatinBigIcon = {
        name: 'list-latin-big',
        content: '<path d="M115.1 136H72.6l-7.4 24H32.1L79.3 31.5h29.1L155.9 160h-33.3l-7.5-24zm-35-23.9h27.6L93.8 67.5l-13.7 44.6zM42.1 320V191.5h46.2c16.5 0 29.1 3 37.7 9.1 8.6 6.1 12.9 14.9 12.9 26.4 0 6.6-1.5 12.3-4.6 17-3.1 4.7-7.6 8.2-13.5 10.4 6.7 1.8 11.9 5.1 15.4 9.9 3.6 4.8 5.4 10.7 5.4 17.7 0 12.6-4 22.1-12 28.4-8 6.3-19.8 9.5-35.4 9.7H42.1zm31-74.9h16.2c6.8-.1 11.6-1.3 14.5-3.7 2.9-2.4 4.3-6 4.3-10.7 0-5.4-1.6-9.3-4.7-11.7-3.1-2.4-8.2-3.6-15.1-3.6H73.1v29.7zm0 20.3v30.8h20.3c5.6 0 9.9-1.3 12.9-3.8 3-2.6 4.5-6.2 4.5-10.8 0-10.7-5.3-16.1-16-16.2H73.1zm73 171.1c-.4 8.9-2.8 16.8-7.2 23.7-4.4 6.9-10.6 12.2-18.6 15.9-8 3.8-17.1 5.6-27.3 5.6-16.9 0-30.2-5.5-39.9-16.5s-14.6-26.5-14.6-46.6v-6.4c0-12.6 2.2-23.6 6.6-33.1 4.4-9.4 10.7-16.7 18.9-21.9 8.2-5.1 17.8-7.7 28.6-7.7 15.6 0 28.1 4.1 37.6 12.3 9.5 8.2 14.9 19.5 16.2 33.9h-30.9c-.2-7.8-2.2-13.4-5.9-16.9-3.7-3.4-9.4-5.1-16.9-5.1-7.7 0-13.4 2.9-16.9 8.6-3.6 5.8-5.5 15-5.6 27.6v9.1c0 13.7 1.7 23.5 5.2 29.4 3.4 5.9 9.4 8.8 17.8 8.8 7.1 0 12.6-1.7 16.3-5 3.8-3.4 5.8-8.7 6-16h30.6zM192 96h288v32H192V96zm0 160h288v32H192v-32zm0 160h288v32H192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var listLatinSmallIcon = {
        name: 'list-latin-small',
        content: '<path d="M94.5 152c-1.1-1.9-2-4.8-2.8-8.6-5.5 6.9-13.1 10.3-22.9 10.3-9 0-16.7-2.7-22.9-8.2-6.3-5.4-9.4-12.3-9.4-20.5 0-10.4 3.8-18.2 11.5-23.5 7.6-5.3 18.8-7.9 33.4-7.9h9.2v-5.1c0-8.8-3.8-13.2-11.4-13.2-7.1 0-10.6 3.5-10.6 10.5H38.7c0-9.2 3.9-16.7 11.8-22.5s17.9-8.6 30.1-8.6 21.8 3 28.9 8.9c7.1 5.9 10.7 14.1 10.9 24.4v42.3c.1 8.8 1.5 15.5 4.1 20.1v1.5l-30 .1zm-18.6-19.4c3.7 0 6.8-.8 9.2-2.4 2.4-1.6 4.2-3.4 5.3-5.4v-15.3h-8.6c-10.4 0-15.5 4.6-15.5 13.9 0 2.7.9 4.9 2.7 6.6 1.8 1.7 4.1 2.6 6.9 2.6zM129.4 280c0 15.7-3.2 27.7-9.7 36.1s-15.6 12.6-27.4 12.6c-9.7 0-17.5-3.9-23.5-11.6l-1.2 9.8H41V191.4h29.7v47.7c5.5-6.3 12.7-9.4 21.4-9.4 11.9 0 21.1 4.3 27.5 12.8 6.5 8.5 9.7 20.5 9.7 36l.1 1.5zm-29.8-1.9c0-9.2-1.2-15.7-3.7-19.6-2.4-3.9-6.2-5.9-11.3-5.9-6.7 0-11.4 2.6-13.9 7.7v37.9c2.5 5.1 7.2 7.6 14.1 7.6 7 0 11.4-3.4 13.3-10.2 1-3.4 1.5-9.2 1.5-17.5zM81.1 452.8c4.2 0 7.4-1.1 9.7-3.4s3.4-5.4 3.4-9.5h27.9c0 10.5-3.8 19.1-11.3 25.8-7.5 6.7-17.2 10.1-29 10.1-13.9 0-24.8-4.4-32.8-13.1s-12-20.8-12-36.2v-1.2c0-9.6 1.8-18.2 5.3-25.6 3.6-7.4 8.7-13.1 15.4-17 6.7-4 14.7-6 23.8-6 12.4 0 22.3 3.4 29.6 10.3 7.3 6.9 10.9 16.2 10.9 28H94.2c0-4.9-1.2-8.7-3.6-11.4-2.4-2.6-5.6-4-9.7-4-7.7 0-12.2 4.9-13.5 14.7-.4 3.1-.6 7.4-.6 12.9 0 9.6 1.1 16.2 3.4 19.9s5.9 5.7 10.9 5.7zM192 96h288v32H192V96zm0 160h288v32H192v-32zm0 160h288v32H192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var listRomanBigIcon = {
        name: 'list-roman-big',
        content: '<path d="M32 32h32v128H32V32zm0 288h32V192H32v128zm64 0h32V192H96v128zM32 480h32V352H32v128zm64 0h32V352H96v128zm64 0h32V352h-32v128zM128 96h352v32H128V96zm64 160h288v32H192v-32zm64 160h224v32H256v-32zM96 152c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm64 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm64 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8z" />',
        viewBox: '0 0 512 512'
    };

    var listRomanSmallIcon = {
        name: 'list-roman-small',
        content: '<path d="M32 64h16v96H32V64zm0 256h16v-96H32v96zm32 0h16v-96H64v96zM32 480h16v-96H32v96zm32 0h16v-96H64v96zm32 0h16v-96H96v96zM48 40c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 112c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM48 200c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM48 360c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 112c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM128 96h352v32H128V96zm32 160h320v32H160v-32zm32 160h288v32H192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var listUnorderedOutlineIcon = {
        name: 'list-unordered-outline',
        content: '<path d="M192 80h288v32H192V80zm0 160h288v32H192v-32zm0 160h288v32H192v-32zM80 80c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16m0-32c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm0 192c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16m0-32c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm0 192c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16m0-32c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z" />',
        viewBox: '0 0 512 512'
    };

    var listUnorderedSquareIcon = {
        name: 'list-unordered-square',
        content: '<path d="M128 160H32V64h96v96zm0 64H32v96h96v-96zm0 160H32v96h96v-96zm64-256h288V96H192v32zm0 160h288v-32H192v32zm0 160h288v-32H192v32z" />',
        viewBox: '0 0 512 512'
    };

    var maxHeightIcon = {
        name: 'max-height',
        content: '<path d="M384 0H96v32h288zm0 479H240.6L320 352h-64V160h64L240 32l-80 128h64v192h-64l79.4 127H96v32h288z" />',
        viewBox: '0 0 512 512'
    };

    var maxWidthIcon = {
        name: 'max-width',
        content: '<path d="M0 96v288h32V96zm479 0v143.4L352 160v64H160v-64L32 240l128 80v-64h192v64l127-79.4V384h32V96z" />',
        viewBox: '0 0 512 512'
    };

    var minHeightIcon = {
        name: 'min-height',
        content: '<path d="M240 192H96v32h288v-32zm144 96H96v32h288zM160 448h160l-80-128zm64 0h32v64h-32zm32-384V0h-32v64h-64l80 128 80-128z" />',
        viewBox: '0 0 512 512'
    };

    var minWidthIcon = {
        name: 'min-width',
        content: '<path d="M192 240v144h32V96h-32zm96-144v288h32V96zm160 224V160l-128 80zm0-96h64v32h-64zm-384 0H0v32h64v64l128-80-128-80z" />',
        viewBox: '0 0 512 512'
    };

    var outlineOffsetIcon = {
        name: 'outline-offset',
        content: '<path d="M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM160 320v32h192V160H160v160zm32-128h128v128H192V192z" />',
        viewBox: '0 0 512 512'
    };

    var outlineWidthIcon = {
        name: 'outline-width',
        content: '<path d="M416 32H32v448h448V32h-64zm0 384H96V96h320v320zm-256-32h224V128H128v256h32zm0-224h192v192H160V160z" />',
        viewBox: '0 0 512 512'
    };

    var paddingBottomIcon = {
        name: 'padding-bottom',
        content: '<path d="M288.2 352H256v64h64v64H160v-64h64v-64h-32v-64h96.2v64zM160 32h64v96h-32.2v32H288v-32h-32V32h64V0H160v32zm192 192v-32.2h-32V288h32v-32h96v64h32V160h-32v64h-96zm-224 32v32.2h32V192h-32v32H32v-64H0v160h32v-64h96z" />',
        viewBox: '0 0 512 512'
    };

    var paddingLeftIcon = {
        name: 'padding-left',
        content: '<path d="M128 288.2V256H64v64H0V160h64v64h64v-32h64v96.2h-64zM448 160v64h-96v-32.2h-32V288h32v-32h96v64h32V160h-32zM256 352h32.2v-32H192v32h32v96h-64v32h160v-32h-64v-96zm-32-224h-32.2v32H288v-32h-32V32h64V0H160v32h64v96z" />',
        viewBox: '0 0 512 512'
    };

    var paddingRightIcon = {
        name: 'padding-right',
        content: '<path d="M352 191.8V224h64v-64h64v160h-64v-64h-64v32h-64v-96.2h64zM32 320v-64h96v32.2h32V192h-32v32H32v-64H0v160h32zm192-192h-32.2v32H288v-32h-32V32h64V0H160v32h64v96zm32 224h32.2v-32H192v32h32v96h-64v32h160v-32h-64v-96z" />',
        viewBox: '0 0 512 512'
    };

    var paddingTopIcon = {
        name: 'padding-top',
        content: '<path d="M191.8 128H224V64h-64V0h160v64h-64v64h32v64h-96.2v-64zM320 448h-64v-96h32.2v-32H192v32h32v96h-64v32h160v-32zM128 256v32.2h32V192h-32v32H32v-64H0v160h32v-64h96zm224-32v-32.2h-32V288h32v-32h96v64h32V160h-32v64h-96z" />',
        viewBox: '0 0 512 512'
    };

    var paddingIcon = {
        name: 'padding',
        content: '<path d="M128 288.2V256H32v64H0V160h32v64h96v-32h32v96.2h-32zM448 160v64h-96v-32.2h-32V288h32v-32h96v64h32V160h-32zM256 352h32.2v-32H192v32h32v96h-64v32h160v-32h-64v-96zm-32-224h-32.2v32H288v-32h-32V32h64V0H160v32h64v96z" />',
        viewBox: '0 0 512 512'
    };

    var positionBottomIcon = {
        name: 'position-bottom',
        content: '<path d="M32 64v416h448V32H32v32zm416 0v384H64V64h384zM96 320h320v96H96z" />',
        viewBox: '0 0 512 512'
    };

    var positionLeftIcon = {
        name: 'position-left',
        content: '<path d="M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM96 96h96v320H96z" />',
        viewBox: '0 0 512 512'
    };

    var positionRightIcon = {
        name: 'position-right',
        content: '<path d="M64 480h416V32H32v448h32zm0-416h384v384H64V64zm256 32h96v320h-96z" />',
        viewBox: '0 0 512 512'
    };

    var positionTopIcon = {
        name: 'position-top',
        content: '<path d="M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z" />',
        viewBox: '0 0 512 512'
    };

    var regularExpressionIcon = {
        name: 'regular-expression',
        content: '<path d="M442.6 299.7 352 247.4V352h-64V247.4l-90.6 52.3-32-55.4L256 192l-90.6-52.3 32-55.4 90.6 52.3V32h64v104.6l90.6-52.3 32 55.4L384 192l90.6 52.3-32 55.4zM80 384c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z" />',
        viewBox: '0 0 512 512'
    };

    var replaceAllIcon = {
        name: 'replace-all',
        content: '<path d="M288 288h192v192H288V288zm64-64H224V32h128v192zM320 64h-64v128h64V64zM160 352H96V160h96V96H96c-35.3 0-64 28.7-64 64v192c0 35.3 28.7 64 64 64h64v64l96-96-96-96v64zM448 32v192h32V32h-32zm-32 0h-32v192h32V32z" />',
        viewBox: '0 0 512 512'
    };

    var replaceSingleIcon = {
        name: 'replace-single',
        content: '<path d="M288 288h192v192H288V288zM32 160v192c0 35.3 28.7 64 64 64h64v64l96-96-96-96v64H96V160h160V96H96c-35.3 0-64 28.7-64 64zM480 32v192H288V32h192zm-32 32H320v128h128V64z" />',
        viewBox: '0 0 512 512'
    };

    var reportElementIcon = {
        name: 'report-element',
        content: '<path d="M480 320V192H160v48H96v-80h256V32H32v128h32v320h32v-48h64v48h256V352H160v48H96V272h64v48ZM64 64h256v64H64Zm128 320h192v64H192v-64Z" />',
        viewBox: '0 0 512 512'
    };

    var rightDoubleQuotesIcon = {
        name: 'right-double-quotes',
        content: '<path d="M136 100.2c-57.4 0-104 46.6-104 104s46.6 104 104 104c20.1 0 38.9-5.7 54.8-15.6-14.2 30.5-37.4 55.2-69.2 73.7-44 25.6-89.1 29.6-89.6 29.6l1.3 15.9 1.3 15.9c2.1-.2 51.8-4.4 102-33.2 47.1-27 103.3-81.3 103.3-186.1.1-1.4.1-2.8.1-4.3 0-57.3-46.6-103.9-104-103.9zm344 104c0-57.4-46.6-104-104-104s-104 46.6-104 104 46.6 104 104 104c20.1 0 38.9-5.7 54.8-15.6-14.2 30.5-37.4 55.2-69.2 73.7-44 25.6-89.1 29.6-89.6 29.6l2.6 31.9c2.1-.2 51.8-4.4 102-33.2 47.1-27 103.3-81.3 103.3-186.1.1-1.4.1-2.8.1-4.3z" />',
        viewBox: '0 0 512 512'
    };

    var wholeWordIcon = {
        name: 'whole-word',
        content: '<path d="M379 243.6c-2.7-9.3-6.5-17.2-11.7-23.8-5-6.4-11.4-11.4-18.6-15-7.4-3.5-15.9-5.2-25.3-5.2-16.3 0-30 6.9-41.4 20.5V160h-26v192h26v-14.8c10.8 9.8 24.1 14.8 39.7 14.8 8.7 0 16.9-1.8 24.3-5.4 7.5-3.8 14-8.9 19.5-15.5 5.5-6.8 9.7-14.9 12.9-24.4 3-9.6 4.6-20.3 4.6-32.1 0-11.5-1.3-21.8-4-31zm-31.8 73.7c-6.6 9.5-15.6 14.2-26.8 14.2-14.5 0-27.3-5.9-38.4-17.8v-69.1c11.9-16.6 25-24.9 39.4-24.9 11.4 0 20 4.6 26.2 13.9 6.1 9.2 9.3 22.9 9.3 41 0 18.9-3.3 33.3-9.7 42.7zm-139-107.8c-10.6-7.5-25.2-11.1-44.1-11.1-40.5 0-61.7 15-63.6 44.6h26.1c.7-16.2 12.8-24.4 36-24.4 11 0 19.2 1.6 24.4 4.8 2.6 1.6 4.6 3.4 6.2 5.1 1.5 1.8 2.5 4 3.2 6.6s1.1 5.6 1.4 9.4c.1 3.6.1 8.3.1 13.5h-12.8c-59.3.1-89.1 17.3-89.1 51.5 0 6.4 1.3 12 3.8 17.2 2.4 5.3 5.9 9.6 10.4 13.4 4.4 3.8 9.8 6.7 16 8.7 6.1 2.2 12.7 3.2 20 3.2 20.9 0 51.8-18.6 51.8-18.6V351h26v-97.5c0-22-5.4-36.6-15.8-44zm-10.2 100c-2.3 3.4-5.1 6.3-8.4 9-3.2 2.6-6.8 4.9-10.7 6.8-3.9 1.8-8 3.3-12.2 4.3s-8.6 1.4-12.8 1.4c-9.6 0-17-2-22.5-5.9-5.5-4.1-8.3-9.8-8.3-17.2 0-20.6 18.9-30.9 56.9-30.9h18v32.5zM448 96h-32v320h32V96zm0-32H64V32h384v32zm0 415.6H64v-32h384v32z" />',
        viewBox: '0 0 512 512'
    };

    var dataSdsIcon = {
        name: 'data-sds',
        content: '<path d="M224 152.54c105.6 0 191.4-27.4 191.9-61.3v-.3c0-34-85.9-61.6-191.9-61.6S32.1 56.94 32.1 90.94v.3c.5 33.9 86.3 61.3 191.9 61.3Zm-191.9 71.9c.5 33.9 86.3 61.3 191.9 61.3s191.4-27.4 192-61.3v-.3l-.1-86.5c-.5 33.9-86.3 61.3-191.9 61.3s-191.49-27.4-192-61.29l.1 86.49v.3Zm-.1 41.21.1 86.49v.3c.4 26.7 53.7 49.3 127.9 57.8v-86.8c-74.29-8.4-127.59-31.1-128-57.79Zm320 37.69 105 70-105 70v-52.5H189v-35h163v-52.5Z" />',
        viewBox: '0 0 512 512'
    };

    var downloadLightIcon = {
        name: 'download-light',
        content: '<path d="M368 256 256 384 144 256h96V32h32v224h96Zm112 192H32v32h448v-32Z" />',
        viewBox: '0 0 512 512'
    };

    var eyeSlashIcon = {
        name: 'eye-slash',
        content: '<path d="m245.43 358.68 24.92 24.92c-4.75.26-9.54.4-14.34.4-94.7 0-179.7-51.5-224-128 13.19-22.83 30.01-43.43 49.65-61.1l23.01 23.01C91.46 229.29 79.51 242.07 69.8 256c26.33 33.77 54.15 53.86 72.6 65.1 39.18 23.88 77.54 33.37 103.03 37.58m131.42-4.44L480 457.39 457.39 480 345.51 368.12s-.07.03-.1.04L232.2 254.94l.11-.03-39.21-39.21-.03.11-26.8-26.8s.04-.05.06-.08l-7.01-7.01s-.06.03-.09.04l-24.17-24.17s.06-.03.09-.05L32 54.61 54.61 32l111.87 111.87A260.193 260.193 0 0 1 256 128c94.8 0 179.8 51.5 224 128-24 41.53-60.05 75.69-103.15 98.24Zm-7.25-33.14c27.8-16.4 54.1-38.7 72.6-65.1-18.4-26.4-44.8-48.7-72.6-65.1-12.2-7.2-25.1-13.2-38.4-17.9 22.6 20.5 36.8 50.1 36.8 83 0 25.15-8.31 48.37-22.32 67.08l7.01 7.01c5.76-2.76 11.41-5.74 16.91-8.99Z" />',
        viewBox: '0 0 512 512'
    };

    var displayInlineBlockIcon = {
        name: 'display-inline-block',
        content: '<path d="M448 32h32v448h-32zM32 32h32v448H32zm64 352h320V128H96v256zm64-192h192v128H160V192z" />',
        viewBox: '0 0 512 512'
    };

    var paperPlaneIcon = {
        name: 'paper-plane',
        content: '<path d="M469.783 271.879 54.329 446.734c-13.149 5.534-26.266-8.042-21.225-21.967l48.3-133.404c2.16-5.966 7.298-10.169 13.326-10.901C312.467 256 239.85 263.839 312.467 256c-72.618-7.839 0 0-217.739-24.462-6.027-.732-11.165-4.935-13.325-10.901l-48.3-133.404C28.063 73.308 41.18 59.732 54.33 65.266l415.454 174.855c13.623 5.734 13.623 26.024 0 31.758Z" />',
        viewBox: '0 0 512 512'
    };

    var gaugeLinearIcon = {
        name: 'gauge-linear',
        content: '<path d="M16 164h480v184H16V164ZM90 58h110l-55 74-55-74ZM16 380h36v74H16v-74Zm444 0h36v74h-36v-74Zm-222 0h36v74h-36v-74Zm-111 0h36v36h-36v-36Zm222 0h36v36h-36v-36Z" />',
        viewBox: '0 0 512 512'
    };

    var gaugeRadialIcon = {
        name: 'gauge-radial',
        content: '<path d="M256 16C123.5 16 16 123.5 16 256s107.5 240 240 240 240-107.5 240-240S388.5 16 256 16Zm0 445.7c-113.4 0-205.7-92.3-205.7-205.7 0-113.4 92.3-205.7 205.7-205.7 113.4 0 205.7 92.3 205.7 205.7 0 113.4-92.3 205.7-205.7 205.7Zm0-377.1c94.7 0 171.4 76.7 171.5 171.5h-68.6c0-56.8-46.2-102.9-102.9-102.9-22.2 0-42.8 7-59.6 19l37.4 37.4c6.7-3.2 14.3-5 22.2-5 28.4 0 51.4 23 51.4 51.4s-23 51.4-51.4 51.4-51.4-23-51.4-51.4c0-8 1.8-15.5 5-22.2l-37.4-37.4c-11.9 16.9-19 37.4-19 59.6H84.6c0-41.2 14.5-78.9 38.7-108.5l-12.7-12.7 24.2-24.2 12.7 12.7c29.6-24.2 67.3-38.7 108.5-38.7Z" />',
        viewBox: '0 0 512 512'
    };

    var envelopeBoxIcon = {
        name: 'envelope-box',
        content: '<path d="m377 182.4-88.8 88.8-31.2 29-33.2-29-88.8-88.8c-7.7 2-13.8 8.1-15.8 15.8l73 73-73 73c2 7.7 8.1 13.8 15.8 15.8l73-73 49 44.8 47-44.8 73 73c7.7-2 13.8-8.1 15.8-15.8l-73-73 73-73c-2-7.7-8.1-13.8-15.8-15.8zM448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-32 329.6c0 12.4-10 22.4-22.4 22.4H118.4C106 384 96 374 96 361.6V182.4c0-12.4 10-22.4 22.4-22.4h275.2c12.4 0 22.4 10 22.4 22.4v179.2z" />',
        viewBox: '0 0 512 512'
    };

    var envelopeLinkIcon = {
        name: 'envelope-link',
        content: '<path d="M224 432c0-5.1.8-10.1 2.3-14.7C232.5 398 250.6 384 272 384h64c-1.5-1.9-3-3.8-4.6-5.6-14.6-16.2-35.8-26.4-59.4-26.4-12.2 0-23.8 2.7-34.1 7.6-4.4 2.1-8.6 4.6-12.5 7.4-16.4 11.8-28.2 29.7-32 50.4-.9 4.7-1.4 9.6-1.4 14.6 0 44.2 35.8 80 80 80 26.2 0 49.4-12.6 64-32h-64c-26.5 0-48-21.5-48-48zm208-80c-26.2 0-49.4 12.6-64 32h64c26.5 0 48 21.5 48 48s-21.5 48-48 48h-64c14.6 19.4 37.8 32 64 32 44.2 0 80-35.8 80-80s-35.8-80-80-80zm0 64H272c-8.8 0-16 7.2-16 16s7.2 16 16 16h160c8.8 0 16-7.2 16-16s-7.2-16-16-16zM32 0C14.3 0 0 14.3 0 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H32zm23.7 32L224 200.3 392.3 32c11 2.9 19.7 11.6 22.6 22.6L310.6 158.9l104.3 104.3c-2.9 11-11.6 19.7-22.6 22.6L288 181.5l-64 64-64-64L55.7 285.8c-11-2.9-19.7-11.6-22.6-22.6l104.3-104.3L33.1 54.6C36 43.6 44.7 34.9 55.7 32z" />',
        viewBox: '0 0 512 512'
    };

    var envelopeIcon = {
        name: 'envelope',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm23.7 32L256 296.3 424.3 128c11 2.9 19.7 11.6 22.6 22.6L342.6 254.9l104.3 104.3c-2.9 11-11.6 19.7-22.6 22.6L320 277.5l-64 64-64-64L87.7 381.8c-11-2.9-19.7-11.6-22.6-22.6l104.3-104.3L65.1 150.6c2.9-11 11.6-19.7 22.6-22.6z" />',
        viewBox: '0 0 512 512'
    };

    var warningCircleIcon = {
        name: 'warning-circle',
        content: '<path d="M256 480c123.7 0 224-100.3 224-224S379.7 32 256 32 32 132.3 32 256s100.3 224 224 224Zm-32-352v160h64V128h-64Zm0 256v-64h64v64h-64Z" />',
        viewBox: '0 0 512 512'
    };

    var warningTriangleIcon = {
        name: 'warning-triangle',
        content: '<path d="M256 32 0 480h512L256 32Zm-32 160h64v160h-64V192Zm0 256v-64h64v64h-64Z" />',
        viewBox: '0 0 512 512'
    };

    var fontGrowIcon = {
        name: 'font-grow',
        content: '<path d="m384 32-96 128h192L384 32ZM222 96h-60L32 480h60l32.4-96h135.2l32.4 96h60L222 96Zm-78 230.4 48-141.7 48 141.7h-96Z" />',
        viewBox: '0 0 512 512'
    };

    var fontShrinkIcon = {
        name: 'font-shrink',
        content: '<path d="m384 160 96-128H288l96 128Zm-152 0h-48L80 480h48l25.9-80h108.2l25.9 80h48L232 160Zm-62.4 192L208 233.9 246.4 352h-76.8Z" />',
        viewBox: '0 0 512 512'
    };

    var textOverflowIcon = {
        name: 'text-overflow',
        content: '<path d="M288 304v176h32V304h-32zm0-272v176h32V32h-32zM64 32v448h32V32H64zm288 288v-48H128v-32h224v-48l96 64-96 64z" />',
        viewBox: '0 0 512 512'
    };

    var textWrapArrowIcon = {
        name: 'text-wrap-arrow',
        content: '<path d="M64 176v32h384v-32H64Zm0-64v32h384v-32H64Zm0 256v32h160v-32H64Zm0-64v32h160v-32H64Zm0 128v32h160v-32H64Zm288-32v.12c5.22.04 10.43.04 16.04-.12H352Zm94.44-64.64c-1.28 7.68-4.16 15.04-8 22.4-2.06 3.65-4.27 7.06-6.65 10.24-15.2 20.5-36.6 31.17-63.75 32H352v48l-96-64 96-64v48h14.12c18.88 0 33.28-7.68 43.2-23.68 2.24-3.84 3.84-7.68 5.12-11.52 2.24-8.32 2.24-16.96 0-24.96-2.88-10.56-9.28-20.48-18.88-26.88-8.64-6.08-18.24-8.96-28.8-8.96H64v-32h305.32c34.24.32 65.6 24.32 75.2 56.96.96 3.2 1.6 6.08 1.92 9.28 1.92 9.92 2.24 19.52 0 29.12ZM64 48v32h384V48H64Z" />',
        viewBox: '0 0 512 512'
    };

    var textTruncateIcon = {
        name: 'text-truncate',
        content: '<path d="M448 32v384h-32V64H95.92L96 480H64V32h384Zm0 416h-32v32h32v-32Zm-64 .08h-31.92V480H384v-31.92Zm-64-.08h-32v32h32v-32Z" />',
        viewBox: '0 0 512 512'
    };

    var textClipIcon = {
        name: 'text-clip',
        content: '<path d="M64 32v448h32V32H64Zm384 448V32h-32v448h32ZM320 320v-48H128v-32h192v-48l96 64-96 64Z" />',
        viewBox: '0 0 512 512'
    };

    var borderColorIcon = {
        name: 'border-color',
        content: '<path d="M480 384v96H168l95.9-96H480Zm-80-182.14L121.86 480H32v-89.86L310.14 112 400 201.86Zm-65.28-24.89-22.4-22.4L82.56 384.01l-5.44 5.44 22.72 22.72L128 384.01l206.72-207.04Zm136.02-45.98L426.03 176 336 86.29l45.01-45.02c12.36-12.36 32.33-12.36 45.01 0l44.71 45.02c12.36 12.04 12.36 32.33 0 44.69l.01.01Z" />',
        viewBox: '0 0 512 512'
    };

    var borderTypeIcon = {
        name: 'border-type',
        content: '<path d="M479 96H33v64h446V96ZM96 384c0-17.67-14.33-32-32-32s-32 14.33-32 32 14.33 32 32 32 32-14.33 32-32Zm128 0c0-17.67-14.33-32-32-32s-32 14.33-32 32 14.33 32 32 32 32-14.33 32-32Zm128 0c0-17.67-14.33-32-32-32s-32 14.33-32 32 14.33 32 32 32 32-14.33 32-32Zm128 0c0-17.67-14.33-32-32-32s-32 14.33-32 32 14.33 32 32 32 32-14.33 32-32ZM224 224H32v64h192v-64Zm256 0H288v64h192v-64Z" />',
        viewBox: '0 0 512 512'
    };

    var undoIcon = {
        name: 'undo',
        content: '<path d="M479.9 416c-57.7-56.6-136.7-96-223.9-96v128L32 256 256 64v128c122.2 0 221.5 102.4 223.9 224z" />',
        viewBox: '0 0 512 512'
    };

    var redoIcon = {
        name: 'redo',
        content: '<path d="M256 192V64l224 192-224 192V320c-87.2 0-166.2 39.4-223.9 96C34.5 294.4 133.9 192 256 192z" />',
        viewBox: '0 0 512 512'
    };

    var arrowRotateCcwIcon = {
        name: 'arrow-rotate-ccw',
        content: '<path d="m62 176 55.5 32C103.8 231.6 96 258.9 96 288c0 88.2 71.8 160 160 160s160-71.8 160-160-71.8-160-160-160v64L96 96 256 0v64c123.7 0 224 100.3 224 224S379.7 512 256 512 32 411.7 32 288c0-40.8 10.9-79.1 30-112z" />',
        viewBox: '0 0 512 512'
    };

    var arrowRotateCwIcon = {
        name: 'arrow-rotate-cw',
        content: '<path d="M480 288c0 123.7-100.3 224-224 224S32 411.7 32 288 132.3 64 256 64V0l160 96-160 96v-64c-88.2 0-160 71.8-160 160s71.8 160 160 160 160-71.8 160-160c0-29.1-7.8-56.4-21.5-80l55.5-32c19.1 32.9 30 71.2 30 112z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsNoRepeatIcon = {
        name: 'arrows-no-repeat',
        content: '<path d="m321 434.2 47.5 47.5C335.5 501 297 512 256 512 132.3 512 32 411.7 32 288c0-41 11-79.5 30.3-112.6l47.5 47.5c-8.9 19.9-13.8 41.9-13.8 65 0 88.2 71.8 160 160 160 23.1.1 45.2-4.8 65-13.7zm118.3-17.5c12.9-18.3 23.1-38.7 30.1-60.4 6.9-21.5 10.6-44.5 10.6-68.3 0-40.8-10.9-79.1-30-112l-55.5 32c13.6 23.5 21.5 50.9 21.5 80 0 4.8-.2 9.5-.6 14.2-2.2 24.8-10.1 47.9-22.3 68.2L173.6 150.9c20.3-12.2 43.4-20.1 68.2-22.3 4.7-.4 9.4-.6 14.2-.6v64l160-96L256 0v64c-23.8 0-46.7 3.7-68.3 10.6-21.8 7-42.1 17.2-60.4 30.1L22.6 0 0 22.6 489.4 512l22.6-22.6-72.7-72.7z" />',
        viewBox: '0 0 512 512'
    };

    var arrowRotateCcwSmallIcon = {
        name: 'arrow-rotate-ccw-small',
        content: '<path d="m101.4 238.6 46.4 12.4c-2.5 9.3-3.8 19-3.8 29 0 61.8 50.2 112 112 112s112-50.2 112-112-50.2-112-112-112v56l-128-80 128-80v56c88.4 0 160 71.6 160 160s-71.6 160-160 160S96 368.4 96 280c0-14.3 1.9-28.2 5.4-41.4z" />',
        viewBox: '0 0 512 512'
    };

    var arrowRotateCwSmallIcon = {
        name: 'arrow-rotate-cw-small',
        content: '<path d="M416 280c0 88.4-71.6 160-160 160S96 368.4 96 280s71.6-160 160-160V64l128 80-128 80v-56c-61.8 0-112 50.2-112 112s50.2 112 112 112 112-50.2 112-112c0-10-1.3-19.7-3.8-29l46.4-12.4c3.5 13.2 5.4 27.1 5.4 41.4z" />',
        viewBox: '0 0 512 512'
    };

    var clockIcon = {
        name: 'clock',
        content: '<path d="M256 128h-32v160h160v-32H256V128zm0-96C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 416c-105.9 0-192-86.1-192-192S150.1 64 256 64s192 86.1 192 192-86.1 192-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var calendarIcon = {
        name: 'calendar',
        content: '<path d="M416 416H288V288h128v128zm64-352v384c0 17.6-14.4 32-32 32H64c-17.6 0-32-14.4-32-32V64c0-17.6 14.4-32 32-32h64V0h64v32h128V0h64v32h64c17.6 0 32 14.4 32 32zm-32 128H64v255.9l.1.1 383.9-.1V192zm0-127.9c-.1-.1-.1-.1 0 0l-64-.1v32h-64V64H192v32h-64V64H64.1l-.1.1V160h384V64.1z" />',
        viewBox: '0 0 512 512'
    };

    var saveIcon = {
        name: 'save',
        content: '<path d="M384 32H64c-17.6 0-32 14.4-32 32v384c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V128l-96-96zm-64 32v128h-64V64h64zm128 384-383.9.1-.1-.1V64.1l.1-.1H96v160h256V64h18.7l77.3 77.3V448z" />',
        viewBox: '0 0 512 512'
    };

    var printIcon = {
        name: 'print',
        content: '<path d="M448 160h-32V96l-64-64H128c-17.7 0-32 14.3-32 32v96H64c-17.6 0-32 14.4-32 32v160c0 17.6 14.4 32 32 32h32v64c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32v-64h32c17.6 0 32-14.4 32-32V192c0-17.6-14.4-32-32-32zM128 64h192v64h64v64H128V64zm320 256h-64v127.9l-.1.1H128.1l-.1-.1V320H64v-32h384v32zm-288 0h192v32H160v-32zm0 64h160v32H160v-32z" />',
        viewBox: '0 0 512 512'
    };

    var pencilIcon = {
        name: 'pencil',
        content: '<path d="m334.9 86.6 45.3-45.3c12.4-12.4 32.8-12.4 45.3 0l45.3 45.3c12.4 12.4 12.4 32.8 0 45.3l-45.3 45.3-90.6-90.6zm-22.6 22.6L32 389.5V480h90.5l280.3-280.3-90.5-90.5zM99.9 412.1l-22.6-22.6 235-235 22.6 22.6-235 235z" />',
        viewBox: '0 0 512 512'
    };

    var trashIcon = {
        name: 'trash',
        content: '<path d="M416 96h-96V64c0-17.6-14.4-32-32-32h-96c-17.6 0-32 14.4-32 32v32H64v64h32v288c0 17.6 14.4 32 32 32h224c17.6 0 32-14.4 32-32V160h32V96zM192 64h95.9l.1.1V96h-96c.1-.1.1-32.1 0-32zm160 384H128.1l-.1-.1V160h32v256h32V160h32v256h32V160h32v256h32V160h32v288z" />',
        viewBox: '0 0 512 512'
    };

    var paperclipIcon = {
        name: 'paperclip',
        content: '<path d="M384 128v256h-32V128c0-52.9-43.1-96-96-96s-96 43.1-96 96v288c0 35.3 28.7 64 64 64s64-28.7 64-64V128c0-17.6-14.4-32-32-32s-32 14.4-32 32v256h-32V128c0-35.3 28.7-64 64-64s64 28.7 64 64v288c0 52.9-43.1 96-96 96s-96-43.1-96-96V128C128 57.4 185.4 0 256 0s128 57.4 128 128z" />',
        viewBox: '0 0 512 512'
    };

    var paperclipAltIcon = {
        name: 'paperclip-alt',
        content: '<path d="M407 452.1c-18.6 18.6-43 27.9-67.5 27.9s-48.9-9.3-67.6-27.9L69.3 249.4c-49.7-49.7-49.7-130.5 0-180.2s130.5-49.7 180.2 0l180.2 180.2-22.7 22.5L226.9 91.8c-37.2-37.2-97.9-37.2-135.1 0-37.2 37.2-37.2 97.9 0 135.1l202.7 202.7c24.8 24.8 65.2 24.8 90.1 0 24.8-24.8 24.8-65.2 0-90.1L181.9 136.8c-12.4-12.4-32.7-12.4-45 0s-12.4 32.7 0 45L317 362l-22.5 22.5-180.2-180.1c-24.8-24.8-24.8-65.2 0-90.1s65.2-24.8 90.1 0L407 317c37.3 37.2 37.3 97.9 0 135.1z" />',
        viewBox: '0 0 512 512'
    };

    var linkIcon = {
        name: 'link',
        content: '<path d="M384 384c-47.4 0-88.7-25.8-110.8-64H384c35.4 0 64-28.6 64-64s-28.7-64-64-64H273.2c22.1-38.2 63.5-64 110.8-64 70.7 0 128 57.3 128 128s-57.3 128-128 128zM96 256c0-17.7 14.3-32 32-32h256c17.7 0 32 14.3 32 32s-14.3 32-32 32H128c-17.7 0-32-14.3-32-32zm-32 0c0 35.4 28.6 64 64 64h110.8c-22.1 38.2-63.5 64-110.8 64C57.3 384 0 326.7 0 256s57.3-128 128-128c47.4 0 88.7 25.8 110.8 64H128c-35.4 0-64 28.6-64 64z" />',
        viewBox: '0 0 512 512'
    };

    var unlinkIcon = {
        name: 'unlink',
        content: '<path d="M384 384c-47.4 0-88.7-25.8-110.8-64H384c35.4 0 64-28.6 64-64s-28.7-64-64-64H273.2c22.1-38.2 63.5-64 110.8-64 70.7 0 128 57.3 128 128s-57.3 128-128 128zM64 256c0 35.4 28.6 64 64 64h110.8c-22.1 38.2-63.5 64-110.8 64C57.3 384 0 326.7 0 256s57.3-128 128-128c47.4 0 88.7 25.8 110.8 64H128c-35.3 0-64 28.6-64 64zM272 97.6V0h-32v97.6c5.2-1 10.5-1.6 16-1.6s10.8.6 16 1.6zm-60.1 11.7-69-69-22.6 22.6 69 69c5.9-9 13.6-16.7 22.6-22.6zm110.8 22.6 69-69-22.6-22.6-69 69c9 5.9 16.7 13.6 22.6 22.6zM256 416c-5.5 0-10.8-.6-16-1.6V512h32v-97.6c-5.2 1-10.5 1.6-16 1.6zm-66.7-35.9-69 69 22.6 22.6 69-69c-9-5.9-16.7-13.6-22.6-22.6zm110.8 22.6 69 69 22.6-22.6-69-69c-5.9 9-13.6 16.7-22.6 22.6z" />',
        viewBox: '0 0 512 512'
    };

    var linkVerticalIcon = {
        name: 'link-vertical',
        content: '<path d="M128 384c0-47.4 25.8-88.7 64-110.8V384c0 35.4 28.6 64 64 64s64-28.7 64-64V273.2c38.2 22.1 64 63.5 64 110.8 0 70.7-57.3 128-128 128s-128-57.3-128-128zM256 96c17.7 0 32 14.3 32 32v256c0 17.7-14.3 32-32 32s-32-14.3-32-32V128c0-17.7 14.3-32 32-32zm0-32c-35.4 0-64 28.6-64 64v110.8c-38.2-22.1-64-63.5-64-110.8C128 57.3 185.3 0 256 0s128 57.3 128 128c0 47.4-25.8 88.7-64 110.8V128c0-35.4-28.6-64-64-64z" />',
        viewBox: '0 0 512 512'
    };

    var unlinkVerticalIcon = {
        name: 'unlink-vertical',
        content: '<path d="M414.4 272H512v-32h-97.6c1 5.2 1.6 10.5 1.6 16s-.5 10.8-1.6 16zm-11.6-60.1 69-69-22.6-22.6-69 69c8.9 5.9 16.6 13.6 22.6 22.6zm-22.7 110.8 69 69 22.6-22.6-69-69c-5.9 9-13.6 16.7-22.6 22.6zM96 256c0-5.5.6-10.8 1.6-16H0v32h97.6c-1-5.2-1.6-10.5-1.6-16zm35.9-66.8-69-69-22.6 22.6 69 69c5.9-8.9 13.6-16.6 22.6-22.6zm-22.6 110.9-69 69 22.6 22.6 69-69c-9-5.9-16.7-13.6-22.6-22.6zM128 384c0-47.4 25.8-88.7 64-110.8V384c0 35.4 28.6 64 64 64s64-28.7 64-64V273.2c38.2 22.1 64 63.5 64 110.8 0 70.7-57.3 128-128 128s-128-57.3-128-128zM256 64c-35.4 0-64 28.6-64 64v110.8c-38.2-22.1-64-63.5-64-110.8C128 57.3 185.3 0 256 0s128 57.3 128 128c0 47.4-25.8 88.7-64 110.8V128c0-35.4-28.6-64-64-64z" />',
        viewBox: '0 0 512 512'
    };

    var lockIcon = {
        name: 'lock',
        content: '<path d="M384 224h-32v-96c0-53-43-96-96-96s-96 43-96 96v96h-32c-17.6 0-32 14.4-32 32v192c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32V256c0-17.6-14.4-32-32-32zm-192-96c0-35.3 28.7-64 64-64s64 28.7 64 64v96H192v-96zm64 256c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z" />',
        viewBox: '0 0 512 512'
    };

    var unlockIcon = {
        name: 'unlock',
        content: '<path d="M416 224H224v-96c0-53-43-96-96-96s-96 43-96 96v128h32V128c0-35.3 28.7-64 64-64s64 28.7 64 64v96h-32c-17.6 0-32 14.4-32 32v192c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32V256c0-17.6-14.4-32-32-32zM288 384c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z" />',
        viewBox: '0 0 512 512'
    };

    var cancelIcon = {
        name: 'cancel',
        content: '<path d="M256 32c-50.3 0-96.8 16.6-134.1 44.6-17.2 12.8-32.4 28.1-45.3 45.3C48.6 159.2 32 205.7 32 256c0 123.7 100.3 224 224 224 50.3 0 96.8-16.6 134.1-44.6 17.2-12.8 32.4-28.1 45.3-45.3 28-37.4 44.6-83.8 44.6-134.1 0-123.7-100.3-224-224-224zm0 384c-88.2 0-160-71.8-160-160 0-32.6 9.8-62.9 26.6-88.2l221.6 221.6C318.9 406.2 288.6 416 256 416zm133.4-71.8L167.8 122.6C193.1 105.8 223.4 96 256 96c88.2 0 160 71.8 160 160 0 32.6-9.8 62.9-26.6 88.2z" />',
        viewBox: '0 0 512 512'
    };

    var cancelOutlineIcon = {
        name: 'cancel-outline',
        content: '<path d="M256 32c-56.1 0-107.4 20.6-146.7 54.7-8.1 7-15.6 14.6-22.6 22.6C52.6 148.6 32 199.9 32 256c0 123.7 100.3 224 224 224 56.1 0 107.4-20.6 146.7-54.7 8.1-7 15.6-14.6 22.6-22.6C459.4 363.4 480 312.1 480 256c0-123.7-100.3-224-224-224zm0 416c-106 0-192-86-192-192 0-47.2 17.1-90.5 45.4-124L380 402.6c-33.5 28.3-76.8 45.4-124 45.4zm146.6-68L132 109.4C165.5 81.1 208.8 64 256 64c106 0 192 86 192 192 0 47.2-17.1 90.5-45.4 124z" />',
        viewBox: '0 0 512 512'
    };

    var cancelCircleIcon = {
        name: 'cancel-circle',
        content: '<path d="m169.4 214.6 128 128c-12.5 6-26.6 9.4-41.4 9.4-52.9 0-96-43.1-96-96 0-14.8 3.4-28.8 9.4-41.4zM256 160c-14.8 0-28.8 3.4-41.4 9.4l128 128c6-12.5 9.4-26.6 9.4-41.4 0-52.9-43.1-96-96-96zm224 96c0 123.7-100.3 224-224 224S32 379.7 32 256 132.3 32 256 32s224 100.3 224 224zm-64 0c0-88.2-71.8-160-160-160-32.6 0-62.9 9.8-88.2 26.6-17.9 11.9-33.4 27.3-45.3 45.3C105.8 193.1 96 223.4 96 256c0 88.2 71.8 160 160 160 32.6 0 62.9-9.8 88.2-26.6 17.9-11.9 33.4-27.3 45.3-45.3 16.7-25.2 26.5-55.5 26.5-88.1z" />',
        viewBox: '0 0 512 512'
    };

    var checkIcon = {
        name: 'check',
        content: '<path d="M434.7 82.7 480 128 192 416 32 256l45.3-45.3L192 325.5 434.7 82.7z" />',
        viewBox: '0 0 512 512'
    };

    var checkOutlineIcon = {
        name: 'check-outline',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 416c-106 0-192-86-192-192S150 64 256 64s192 86 192 192-86 192-192 192zm-32-154-83-83-45 45 128 128 176-176-45-45-131 131z" />',
        viewBox: '0 0 512 512'
    };

    var checkCircleIcon = {
        name: 'check-circle',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm-32 352L96 256l45-45 83 83 147-147 45 45-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var xIcon = {
        name: 'x',
        content: '<path d="M416 141.3 301.3 256 416 370.7 370.7 416 256 301.3 141.3 416 96 370.7 210.7 256 96 141.3 141.3 96 256 210.7 370.7 96l45.3 45.3z" />',
        viewBox: '0 0 512 512'
    };

    var xOutlineIcon = {
        name: 'x-outline',
        content: '<path d="M384 338.7 338.7 384 256 301.3 173.3 384 128 338.7l82.7-82.7-82.7-82.7 45.3-45.3 82.7 82.7 82.7-82.7 45.3 45.3-82.7 82.7 82.7 82.7zM256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 416c-106 0-192-86-192-192S150 64 256 64s192 86 192 192-86 192-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var xCircleIcon = {
        name: 'x-circle',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm128 306.7L338.7 384 256 301.3 173.3 384 128 338.7l82.7-82.7-82.7-82.7 45.3-45.3 82.7 82.7 82.7-82.7 45.3 45.3-82.7 82.7 82.7 82.7z" />',
        viewBox: '0 0 512 512'
    };

    var plusIcon = {
        name: 'plus',
        content: '<path d="M288 224V96h-64v128H96v64h128v128h64V288h128v-64H288z" />',
        viewBox: '0 0 512 512'
    };

    var plusOutlineIcon = {
        name: 'plus-outline',
        content: '<path d="M288 288v96h-64v-96h-96v-64h96v-96h64v96h96v64h-96zM256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 416c-106 0-192-86-192-192S150 64 256 64s192 86 192 192-86 192-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var plusCircleIcon = {
        name: 'plus-circle',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm32 256v96h-64v-96h-96v-64h96v-96h64v96h96v64h-96z" />',
        viewBox: '0 0 512 512'
    };

    var minusIcon = {
        name: 'minus',
        content: '<path d="M96 224v64h320v-64H96z" />',
        viewBox: '0 0 512 512'
    };

    var minusOutlineIcon = {
        name: 'minus-outline',
        content: '<path d="M128 224h256v64H128v-64zM256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm0 416c-106 0-192-86-192-192S150 64 256 64s192 86 192 192-86 192-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var minusCircleIcon = {
        name: 'minus-circle',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zM128 288v-64h256v64H128z" />',
        viewBox: '0 0 512 512'
    };

    var sortAscIcon = {
        name: 'sort-asc',
        content: '<path d="M96 352h320v64H96v-64zm0-128h224v64H96v-64zm0-128h128v64H96V96z" />',
        viewBox: '0 0 512 512'
    };

    var sortDescIcon = {
        name: 'sort-desc',
        content: '<path d="M96 96h320v64H96V96zm0 128h224v64H96v-64zm0 128h128v64H96v-64z" />',
        viewBox: '0 0 512 512'
    };

    var sortClearIcon = {
        name: 'sort-clear',
        content: '<path d="m110.9 224 64 64H96v-64h14.9zM96 416h128v-64H96v64zm214.6-128h9.4v-64h-73.4l-64-64H416V96H118.6l-64-64L32 54.6 457.4 480l22.6-22.6L310.6 288z" />',
        viewBox: '0 0 512 512'
    };

    var sortAscSmallIcon = {
        name: 'sort-asc-small',
        content: '<path d="M256 192v224h-32V192h-96L240 64l112 128h-96z" />',
        viewBox: '0 0 512 512'
    };

    var sortDescSmallIcon = {
        name: 'sort-desc-small',
        content: '<path d="M352 288 240 416 128 288h96V64h32v224h96z" />',
        viewBox: '0 0 512 512'
    };

    var filterIcon = {
        name: 'filter',
        content: '<path d="M64 64v32l160 160v224l64-64V256L448 96V64H64z" />',
        viewBox: '0 0 512 512'
    };

    var filterClearIcon = {
        name: 'filter-clear',
        content: '<path d="m143.5 64 168.2 168.2L288 256v160l-64 64V256L64 96V64h79.5zm236.1 100.4L448 96V64H279.3l-64-64L192 22l298 298 22-23.3-132.4-132.3z" />',
        viewBox: '0 0 512 512'
    };

    var filterSmallIcon = {
        name: 'filter-small',
        content: '<path d="M128 128h256v32l-96 96v96l-64 64V256l-96-96v-32z" />',
        viewBox: '0 0 512 512'
    };

    var filterSortAscSmallIcon = {
        name: 'filter-sort-asc-small',
        content: '<path d="M448 128v32l-96 96v64l-32 64V256l-96-96v-32h224zM64 224h64v160h32V224h64l-80-96-80 96z" />',
        viewBox: '0 0 512 512'
    };

    var filterSortDescSmallIcon = {
        name: 'filter-sort-desc-small',
        content: '<path d="M448 128v32l-96 96v64l-32 64V256l-96-96v-32h224zM144 384l80-96h-64V128h-32v160H64l80 96z" />',
        viewBox: '0 0 512 512'
    };

    var filterAddExpressionIcon = {
        name: 'filter-add-expression',
        content: '<path d="M480 64v32H32V64h448zm-192 96h192v-32H288v32zm0 128h192v-64H288v64zm0 96h192v-32H288v32zm0 64h192v-32H288v32zM96 352h64v-64h64v-64h-64v-64H96v64H32v64h64v64z" />',
        viewBox: '0 0 512 512'
    };

    var filterAddGroupIcon = {
        name: 'filter-add-group',
        content: '<path d="M352 352v32h-32v64h32v32h-64V352h64zm64 0v32h32v64h-32v32h64V352h-64zM160 160H96v64H32v64h64v64h64v-64h64v-64h-64v-64zm128 0h192v-32H288v32zM32 64v32h448V64H32zm256 224h192v-64H288v64z" />',
        viewBox: '0 0 512 512'
    };

    var loginIcon = {
        name: 'login',
        content: '<path d="M384 480h96V32h-96v448zM32 224v64h128v96l160-128-160-128v96H32z" />',
        viewBox: '0 0 512 512'
    };

    var logoutIcon = {
        name: 'logout',
        content: '<path d="M128 32H32v448h96V32zm64 192v64h128v96l160-128-160-128v96H192z" />',
        viewBox: '0 0 512 512'
    };

    var downloadIcon = {
        name: 'download',
        content: '<path d="M32 384v96h448v-96H32zM288 32h-64v128h-96l128 160 128-160h-96V32z" />',
        viewBox: '0 0 512 512'
    };

    var uploadIcon = {
        name: 'upload',
        content: '<path d="M32 384v96h448v-96H32zm192-64h64V192h96L256 32 128 192h96v128z" />',
        viewBox: '0 0 512 512'
    };

    var hyperlinkOpenIcon = {
        name: 'hyperlink-open',
        content: '<path d="M32 480h448V256h-32v192H64V64h192V32H32v448zM320 32l56.9 56.9.5.5L224 242.7l45.3 45.3 153.3-153.4L480 192V32H320z" />',
        viewBox: '0 0 512 512'
    };

    var hyperlinkOpenSmIcon = {
        name: 'hyperlink-open-sm',
        content: '<path d="M96 416h320v-96h-32v64H128V128h64V96H96v320zM256 96h160v160l-57.4-57.4L237.3 320 192 274.7l121.4-121.4-.5-.5L256 96z" />',
        viewBox: '0 0 512 512'
    };

    var launchIcon = {
        name: 'launch',
        content: '<path d="M96 96v320h96v-32h-64V128h256v64h32V96H96zm320 160v160H256l57.4-57.4L192 237.3l45.3-45.3 121.4 121.4.5-.5L416 256z" />',
        viewBox: '0 0 512 512'
    };

    var windowIcon = {
        name: 'window',
        content: '<path d="M96 96v320h320V96H96zm288 288H128V192h256v192z" />',
        viewBox: '0 0 512 512'
    };

    var windowRestoreIcon = {
        name: 'window-restore',
        content: '<path d="M448 32v288h-32V128H160V32h288zM64 192h288v288H64V192zm32 256h224V288H96v160z" />',
        viewBox: '0 0 512 512'
    };

    var windowMinimizeIcon = {
        name: 'window-minimize',
        content: '<path d="M416 288v64H96v-64h320z" />',
        viewBox: '0 0 512 512'
    };

    var gearIcon = {
        name: 'gear',
        content: '<path d="m462.7 317.9-41.5-31.4c1.8-9.9 2.8-20.1 2.8-30.5 0-10.4-1-20.6-2.8-30.5l41.5-31.4c6.4-4.9 8.2-13.8 4.2-20.8L433 114.6c-4-7-12.6-9.9-20.1-6.7l-48 20.2c-15.4-13.2-33.3-23.6-52.8-30.5L305.8 46c-1-8-7.8-14-15.9-14h-67.8c-8.1 0-14.9 6-15.9 14l-6.5 51.6c-19.5 6.9-37.4 17.3-52.8 30.5l-48-20.2c-7.4-3.1-16-.2-20.1 6.7l-33.9 58.7c-4 7-2.2 15.9 4.2 20.8l41.5 31.4C89 235.4 88 245.6 88 256c0 10.4 1 20.6 2.8 30.5l-41.5 31.4c-6.4 4.9-8.2 13.8-4.2 20.8L79 397.4c4 7 12.6 9.9 20.1 6.7l48-20.2c15.4 13.2 33.3 23.6 52.8 30.5l6.5 51.6c1 8 7.8 14 15.9 14h67.8c8.1 0 14.9-6 15.9-14l6.5-51.6c19.5-6.9 37.4-17.3 52.8-30.5l48 20.2c7.4 3.1 16 .2 20.1-6.7l33.9-58.7c3.7-7 1.9-15.9-4.6-20.8zM256 340c-46.4 0-84-37.6-84-84s37.6-84 84-84 84 37.6 84 84-37.6 84-84 84z" />',
        viewBox: '0 0 512 512'
    };

    var gearsIcon = {
        name: 'gears',
        content: '<path d="m331.9 364.2-29.6-22.4c1.3-7.1 2-14.3 2-21.8 0-7.4-.7-14.7-2-21.8l29.6-22.4c4.6-3.5 5.9-9.8 3-14.8l-24.2-42c-2.9-5-9-7.1-14.3-4.8L262 228.7c-11-9.4-23.8-16.9-37.7-21.8l-4.6-36.9c-.7-5.7-5.6-10-11.3-10H160c-5.8 0-10.6 4.3-11.3 10l-4.6 36.9c-13.9 4.9-26.7 12.4-37.7 21.8l-34.3-14.5c-5.3-2.2-11.5-.2-14.3 4.8l-24.3 42c-2.9 5-1.6 11.3 3 14.8l29.6 22.4c-1.3 7.1-2 14.3-2 21.8 0 7.4.7 14.7 2 21.8l-29.6 22.4c-4.6 3.5-5.9 9.8-3 14.8l24.2 42c2.9 5 9 7.1 14.3 4.8l34.3-14.5c11 9.4 23.8 16.9 37.7 21.8l4.6 36.9c.7 5.7 5.6 10 11.3 10h48.4c5.8 0 10.6-4.3 11.3-10l4.6-36.9c13.9-4.9 26.7-12.4 37.7-21.8l34.3 14.5c5.3 2.2 11.5.2 14.3-4.8l24.2-41.9c3-5 1.8-11.4-2.8-14.9zM184.2 380c-33.1 0-60-26.9-60-60s26.9-60 60-60 60 26.9 60 60-26.9 60-60 60zm293.1-225.5L459.4 141c.8-4.2 1.2-8.6 1.2-13 0-4.5-.4-8.8-1.2-13l17.8-13.4c2.7-2.1 3.5-5.9 1.8-8.9l-14.5-25.2c-1.8-3-5.4-4.2-8.6-2.8l-20.6 8.7c-6.7-5.7-14.3-10.1-22.7-13.1L409.9 38c-.4-3.4-3.3-6-6.8-6h-29c-3.4 0-6.4 2.5-6.8 6l-2.7 22.2c-8.3 2.9-16 7.5-22.7 13.1l-20.6-8.7c-3.2-1.4-6.9-.1-8.6 2.8l-14.5 25.2c-1.8 3-1 6.9 1.8 8.9l17.8 13.4c-.8 4.2-1.2 8.6-1.2 13 0 4.5.4 8.8 1.2 13L300 154.5c-2.7 2.1-3.5 5.9-1.8 8.9l14.5 25.2c1.8 3 5.4 4.2 8.6 2.8l20.6-8.7c6.7 5.7 14.3 10.1 22.7 13.1l2.7 22.2c.4 3.4 3.3 6 6.8 6h29c3.4 0 6.4-2.5 6.8-6l2.7-22.2c8.3-2.9 16-7.5 22.7-13.1l20.6 8.7c3.2 1.4 6.9.1 8.6-2.8l14.5-25.2c1.8-3 1-6.9-1.7-8.9zm-88.7 9.5c-19.9 0-36.1-16.2-36.1-36.1s16.2-36.1 36.1-36.1c19.9 0 36.1 16.2 36.1 36.1-.1 19.9-16.1 36.1-36.1 36.1z" />',
        viewBox: '0 0 512 512'
    };

    var wrenchIcon = {
        name: 'wrench',
        content: '<path d="M470.7 402.7 306 238.1c9-18.8 14-39.8 14-62.1 0-79.5-64.5-144-144-144-22.2 0-43.3 5-62.1 14l76.4 76.4c12.4 12.4 12.4 32.8 0 45.3l-22.6 22.6c-12.4 12.4-32.8 12.4-45.3 0L46 113.9c-9 18.8-14 39.9-14 62.1 0 79.5 64.5 144 144 144 22.3 0 43.4-5.1 62.2-14.1l164.7 164.7c12.3 12.5 32.7 12.5 45.1.1l22.7-22.7c12.4-12.4 12.4-32.8 0-45.3zM448 425.5 425.4 448 265.8 288.5c8.3-6.7 15.9-14.3 22.6-22.6L448 425.5z" />',
        viewBox: '0 0 512 512'
    };

    var eyeIcon = {
        name: 'eye',
        content: '<path d="M256 128c-94.8 0-179.8 51.5-224 128 44.3 76.5 129.3 128 224 128s179.8-51.5 224-128c-44.2-76.5-129.2-128-224-128zm-32 64c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM69.8 256c18.4-26.4 44.8-48.7 72.6-65.1 12.2-7.2 25.1-13.2 38.4-17.9-22.6 20.5-36.8 50.1-36.8 83s14.2 62.5 36.8 83c-13.3-4.7-26.2-10.7-38.4-17.9-27.8-16.4-54.2-38.7-72.6-65.1zm299.8 65.1c-12.2 7.2-25.1 13.2-38.4 17.9 22.6-20.5 36.8-50.1 36.8-83s-14.2-62.5-36.8-83c13.3 4.7 26.2 10.7 38.4 17.9 27.8 16.4 54.2 38.7 72.6 65.1-18.5 26.4-44.8 48.7-72.6 65.1z" />',
        viewBox: '0 0 512 512'
    };

    var searchIcon = {
        name: 'search',
        content: '<path d="M365.3 320h-22.7l-26.7-26.7C338.5 265.7 352 230.4 352 192c0-88.4-71.6-160-160-160S32 103.6 32 192s71.6 160 160 160c38.4 0 73.7-13.5 101.3-36.1l26.7 26.7v22.7L434.7 480l45.3-45.3L365.3 320zM64 192c0-70.7 57.3-128 128-128s128 57.3 128 128-57.3 128-128 128S64 262.7 64 192z" />',
        viewBox: '0 0 512 512'
    };

    var zoomInIcon = {
        name: 'zoom-in',
        content: '<path d="M288 224h-64v64h-64v-64H96v-64h64V96h64v64h64v64zm192 210.7L434.7 480 320 365.3v-22.7l-26.7-26.7C265.7 338.5 230.4 352 192 352c-88.4 0-160-71.6-160-160S103.6 32 192 32s160 71.6 160 160c0 38.4-13.5 73.7-36.1 101.3l26.7 26.7h22.7L480 434.7zM192 320c70.7 0 128-57.3 128-128S262.7 64 192 64 64 121.3 64 192s57.3 128 128 128z" />',
        viewBox: '0 0 512 512'
    };

    var zoomOutIcon = {
        name: 'zoom-out',
        content: '<path d="M288 224H96v-64h192v64zm192 210.7L434.7 480 320 365.3v-22.7l-26.7-26.7C265.7 338.5 230.4 352 192 352c-88.4 0-160-71.6-160-160S103.6 32 192 32s160 71.6 160 160c0 38.4-13.5 73.7-36.1 101.3l26.7 26.7h22.7L480 434.7zM192 320c70.7 0 128-57.3 128-128S262.7 64 192 64 64 121.3 64 192s57.3 128 128 128z" />',
        viewBox: '0 0 512 512'
    };

    var arrowsMoveIcon = {
        name: 'arrows-move',
        content: '<path d="M384 320v-32h-96v96h32l-64 96-64-96h32v-96h-96v32l-96-64 96-64v32h96v-96h-32l64-96 64 96h-32v96h96v-32l96 64-96 64z" />',
        viewBox: '0 0 512 512'
    };

    var calculatorIcon = {
        name: 'calculator',
        content: '<path d="M64 64v384h384V64H64zm96 352H96v-64h64v64zm0-96H96v-64h64v64zm96 96h-64v-64h64v64zm0-96h-64v-64h64v64zm160 96h-96V256h96v160zm0-224H96V96h320v96z" />',
        viewBox: '0 0 512 512'
    };

    var cartIcon = {
        name: 'cart',
        content: '<path d="M192 368c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm144-48c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM128 96V64H32v32h64v192h288v-32H128V96zm32 128h256v-32H160v32zm0-96v32h288v-32H160z" />',
        viewBox: '0 0 512 512'
    };

    var connectorIcon = {
        name: 'connector',
        content: '<path d="M416 112c0 26.51-21.49 48-48 48-20.898 0-38.667-13.359-45.258-32H256v288h-98.742c-6.591 18.641-24.36 32-45.258 32-26.51 0-48-21.49-48-48s21.49-48 48-48c20.898 0 38.667 13.359 45.258 32H224V96h98.742c6.591-18.641 24.36-32 45.258-32 26.51 0 48 21.49 48 48z" />',
        viewBox: '0 0 512 512'
    };

    var plusSmIcon = {
        name: 'plus-sm',
        content: '<path d="M352 224v64h-64v64h-64v-64h-64v-64h64v-64h64v64h64z" />',
        viewBox: '0 0 512 512'
    };

    var minusSmIcon = {
        name: 'minus-sm',
        content: '<path d="M352 224v64H160v-64h192z" />',
        viewBox: '0 0 512 512'
    };

    var kpiStatusDenyIcon = {
        name: 'kpi-status-deny',
        content: '<path d="M480 256 256 480 32 256 256 32l224 224z" />',
        viewBox: '0 0 512 512'
    };

    var kpiStatusHoldIcon = {
        name: 'kpi-status-hold',
        content: '<path d="M256 64 32 448h448L256 64z" />',
        viewBox: '0 0 512 512'
    };

    var kpiStatusOpenIcon = {
        name: 'kpi-status-open',
        content: '<path d="M480 256c0 123.7-100.3 224-224 224S32 379.7 32 256 132.3 32 256 32s224 100.3 224 224z" />',
        viewBox: '0 0 512 512'
    };

    var equalIcon = {
        name: 'equal',
        content: '<path d="M96 288h320v64H96v-64zm0-128v64h320v-64H96z" />',
        viewBox: '0 0 512 512'
    };

    var notEqualIcon = {
        name: 'not-equal',
        content: '<path d="m290.7 224-37.3 64H416v64H216l-56 96h-48l56-96H96v-64h109.3l37.3-64H96v-64h184l56-96h48l-56 96h88v64H290.7z" />',
        viewBox: '0 0 512 512'
    };

    var lessOrEqualIcon = {
        name: 'less-or-equal',
        content: '<path d="m318.1 352-160-160 160-160L352 65.9 225.9 192 352 318.1 318.1 352zM128 416v32h256v-32H128z" />',
        viewBox: '0 0 512 512'
    };

    var greaterOrEqualIcon = {
        name: 'greater-or-equal',
        content: '<path d="M160 318.1 286.1 192 160 65.9 193.9 32l160 160-160 160-33.9-33.9zM128 416v32h256v-32H128z" />',
        viewBox: '0 0 512 512'
    };

    var divideIcon = {
        name: 'divide',
        content: '<path d="M416 64 192 448h-64L352 64h64z" />',
        viewBox: '0 0 512 512'
    };

    var accessibilityIcon = {
        name: 'accessibility',
        content: '<path d="M208 48c0-26.5 21.5-48 48-48s48 21.5 48 48-21.5 48-48 48-48-21.5-48-48zm240 112v-32H64v32l128 16v80l-32 224h48l32-160h32l32 160h48l-32-224v-80l128-16z" />',
        viewBox: '0 0 512 512'
    };

    var barcodeOutlineIcon = {
        name: 'barcode-outline',
        content: '<path d="M96 384H64V128h32v256zm96-256h-64v224h64V128zm64 0h-32v224h32V128zm64 0h-32v224h32V128zm64 0h-32v224h32V128zm64 0h-32v256h32V128zm64-32v320c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h448c17.7 0 32 14.3 32 32zm-32 0H32v320h448V96z" />',
        viewBox: '0 0 512 512'
    };

    var barcodeIcon = {
        name: 'barcode',
        content: '<path d="M480 64H32C14.3 64 0 78.3 0 96v320c0 17.7 14.3 32 32 32h448c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zM96 384H64V128h32v256zm96-32h-64V128h64v224zm64 0h-32V128h32v224zm64 0h-32V128h32v224zm64 0h-32V128h32v224zm64 32h-32V128h32v256z" />',
        viewBox: '0 0 512 512'
    };

    var barcodeScannerIcon = {
        name: 'barcode-scanner',
        content: '<path d="M32 96H0V0h96v32H32v64zm0 288H0v96h96v-32H32v-64zM416 0v32h64v64h32V0h-96zm64 448h-64v32h96v-96h-32v64zm-192-32h32V288h-32v128zm32-352h-32v128h32V64zm-64 0h-32v128h32V64zM128 416h64V288h-64v128zm-64 0h32V288H64v128zM192 64h-64v128h64V64zm32 352h32V288h-32v128zM64 64v128h32V64H64zm384 0h-32v128h32V64zm0 352V288h-32v128h32zm-96 0h32V288h-32v128zm32-352h-32v128h32V64zm96 160H32v32h448v-32z" />',
        viewBox: '0 0 512 512'
    };

    var qrCodeOutlineIcon = {
        name: 'qr-code-outline',
        content: '<path d="M192 224v32h-32v-32h32zm-64 64h32v-32h-32v32zm-32-64v32h32v-32H96zm-32 64h32v-32H64v32zm128 0h32v-32h-32v32zm64-64h-32v32h32v-32zm32-32h-32v32h32v-32zm-64-32v32h32v-32h-32zm64-32h-32v32h32v-32zm-64-32v32h32V96h-32zm64-32h-32v32h32V64zm32 192v-32h-32v32h32zm-96 32v32h32v-32h-32zm64-32h-32v32h32v-32zm0 64h-32v32h32v-32zm-64 32v32h32v-32h-32zm32 32v32h32v-32h-32zm-32 64h32v-32h-32v32zm64-96v32h32v-32h-32zm32-32v-32h-32v32h32zm32-32v-32h-32v32h32zm32-64h-32v32h32v-32zm32 64v-32h-32v32h32zm32-64h-32v32h32v-32zm-64 96v-32h-32v32h32zm-32 32v-32h-32v32h32zm0 32h32v-32h-32v32zm32-32h32v-32h-32v32zm64-32v-32h-32v32h32zm-128 64v32h32v-32h-32zm-32 64h32v-32h-32v32zm64 0h32v-32h-32v32zm32-32h32v-32h-32v32zm64-32v-32h-32v32h32zm0 64v-32h-32v32h32zM512 0v512H0V0h512zm-32 32H32v448h448V32zm-32 160H320V64h128v128zm-32-32-.5-64H352v64h64zm-224 32H64V64h128v128zm-32-32-.5-64H96v64h64zm32 288H64V320h128v128zm-32-32-.5-64H96v64h64z" />',
        viewBox: '0 0 512 512'
    };

    var qrCodeIcon = {
        name: 'qr-code',
        content: '<path d="M320 0v192h192V0H320zm160 160H352V32h128v128zm-32-32h-64V64h64v64zM0 0v192h192V0H0zm160 160H32V32h128v128zm-32-32H64V64h64v64zM0 320v192h192V320H0zm160 160H32V352h128v128zm-32-32H64v-64h64v64zm32-224h32v32h-32v-32zm0 64h-32v-32h32v32zm-64-64h32v32H96v-32zm-32 32H32v-32h32v32zm32 32H64v-32h32v32zm128 0h-32v-32h32v32zm32-32h-32v-32h32v32zm0-64h32v32h-32v-32zm0 0h-32v-32h32v32zm0-64h32v32h-32v-32zm0 0h-32V96h32v32zm0-64h32v32h-32V64zm0 0h-32V32h32v32zm64 192h-32v-32h32v32zm-96 32h32v32h-32v-32zm64 0h-32v-32h32v32zm0 64h-32v-32h32v32zm-32 32h-32v-32h32v32zm0 0h32v32h-32v-32zm0 64h-32v-32h32v32zm64-64h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h32v32h-32v-32zm64 0h-32v-32h32v32zm32 32h-32v-32h32v32zm32-32h-32v-32h32v32zm-96 32h32v32h-32v-32zm0 64h-32v-32h32v32zm0 0h32v32h-32v-32zm32-32h32v32h-32v-32zm32-32h32v32h-32v-32zm-96 96h32v32h-32v-32zm0 64h-32v-32h32v32zm-32 32h-32v-32h32v32zm192-192h-32v-32h32v32zM352 416h32v32h-32v-32zm0 64h-32v-32h32v32zm64-64h-32v-32h32v32zm32-96h32v32h-32v-32zm0 64h-32v-32h32v32zm-32 32h32v32h-32v-32zm0 64h-32v-32h32v32zm64-64h-32v-32h32v32zm0 64h-32v-32h32v32zm32-32h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32v-32h32v32zM256 512h-32v-32h32v32zm64 0h-32v-32h32v32zm32-32h32v32h-32v-32zm64 0h32v32h-32v-32zm96 32h-32v-32h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var qrCodeScannerIcon = {
        name: 'qr-code-scanner',
        content: '<path d="M512 0v96h-32V32h-64V0h96zm-32 448h-64v32h96v-96h-32v64zM64 64h128v128H64V64zm32 96h64V96H96v64zM32 32h64V0H0v96h32V32zm0 224h448v-32H32v32zm0 128H0v96h96v-32H32v-64zM288 96h-32v32h32V96zm-64-32v32h32V64h-32zm224 128H320V64h128v128zm-32-96h-64v64h64V96zm-128 96v-32h-32v32h32zm-32-64h-32v32h32v-32zM64 288h128v128H64V288zm32 96h64v-64H96v64zm192-64h-32v32h32v-32zm-64-32v32h32v-32h-32zm32 128h32v-32h-32v32zm-32-64v32h32v-32h-32zm96-64h-32v32h32v-32zm-32 64v32h32v-32h-32zm64 0v-32h-32v32h32zm-32 64h32v-32h-32v32zm64-128h-32v32h32v-32zm-32 64v32h32v-32h-32zm64 0v-32h-32v32h32zm0 64v-32h-32v32h32zm32-128h-32v32h32v-32zm0 96v-32h-32v32h32z" />',
        viewBox: '0 0 512 512'
    };

    var barcodeQrCodeScannerIcon = {
        name: 'barcode-qr-code-scanner',
        content: '<path d="M256 288h32v128h-32V288zm64 128h64V288h-64v128zm128 0V288h-32v128h32zM32 32h64V0H0v96h32V32zm0 352H0v96h96v-32H32v-64zM416 0v32h64v64h32V0h-96zm64 448h-64v32h96v-96h-32v64zm0-224H32v32h448v-32zM288 64h-32v128h32V64zm96 0h-64v128h64V64zm64 0h-32v128h32V64zM64 64h96v96H64V64zm32 64h32V96H96v32zm128 32h-32v32h32v-32zm0-96h-32v64h32V64zM64 320h96v96H64v-96zm32 64h32v-32H96v32zm96 0v32h32v-64h-32v32zm0-64h32v-32h-32v32z" />',
        viewBox: '0 0 512 512'
    };

    var signatureIcon = {
        name: 'signature',
        content: '<path d="M32 448h448v32H32v-32zM448 32H288v64h160V32zm-96 340.9L256 224l32-96h160l32 96-96 148.9V416h-32v-43.1zm0-59.1V256h32v57.8l60.8-94.3-19.9-59.5H311.1l-19.9 59.6 60.8 94.2zM78.8 377.3c8.7-10.3 23.9-25.6 37.2-17.3 14.9 9.3 25.1 42.1 56.9 43.8 27.2-.6 18.9-34.6 36.7-33.2 16.6 0 19.5 47.8 46.5 47.9 25.7.1 37.4-14.5 37.3-28 .1-29-62.5-87.7-85.4-98-21.4-9.6-34-2.3-39.7 6-5.3 7.9 9.3 34.5-13.7 41.2-17.3 1.5-29.2-33.2-62.1-33.2S77 354.1 32 352c13.1 6 32.8 42 46.8 25.3z" />',
        viewBox: '0 0 512 512'
    };

    var handIcon = {
        name: 'hand',
        content: '<path d="M442.5 130.7c-15.5-6.7-33.7-.2-41.4 15.1-8.2 21.3-23.3 79.9-25.8 87.6-2.1 6.5-5 12-11.3 9.7-4.7-1.7-3.5-7.2-2.4-12.6l2.7-17 18.1-112.4c2.8-17.4-9-33.8-26.5-36.6-17.4-2.8-33.8 9-36.6 26.5L304 197.9s-2.1 14.1-3 18.7c-1 5.2-1.4 12.3-7.7 11.9-5-.3-5.3-3.8-5.3-7.3V64c0-17.6-14.2-31.9-31.8-32h.1-.3c-17.7 0-32 14.3-32 32v.4c0 1.1.9 140.6.6 149.7-.2 5.4-.7 9.5-6.8 10.3-7.8 1.1-8.6-8-8.6-8l-3.1-20.9v.7L190 90.8v.1c-2.6-17.5-18.9-29.5-36.2-26.9-17.5 2.6-29.5 18.9-26.9 36.2 0 .1 0 .2.1.3l24.8 165.3 2.4 15.9c.5 3.2-.7 6.6-3.3 8.6l-.1.1c-4.1 3.1-10 2.5-13.5-1.4l-12.2-13.2-37.3-41-.1-.1c-11.9-13-32.1-14-45.3-2.1-13 11.9-14 32.1-2.1 45.2l55.7 61s34.1 49 62.5 88.4c28.3 39.3 72.3 52.4 129.5 52.4s113.9-21.8 126.9-95.4c13.7-78.5 6.5-107.9 23.7-150.4 11.6-28.9 15.1-45.8 21.1-63.2 5.4-15.6-1.9-33.3-17.2-39.9z" />',
        viewBox: '0 0 512 512'
    };

    var pointerIcon = {
        name: 'pointer',
        content: '<path d="m285.5 326.1 43.9 124.4-83.5 29.5-43.8-124.2L128 416V32l256 288-98.5 6.1z" />',
        viewBox: '0 0 512 512'
    };

    var stickIcon = {
        name: 'stick',
        content: '<path d="M192 96c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32v32h128V96zm128 160c0 35.3-28.7 64-64 64s-64-28.7-64-64v-96H64v96c0 106 86 192 192 192s192-86 192-192v-96H320v96zm96-192h-64c-17.7 0-32 14.3-32 32v32h128V96c0-17.7-14.3-32-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var unstickIcon = {
        name: 'unstick',
        content: '<path d="M290.6 131.4c12.4-12.4 12.4-32.6 0-45l-45-45c-12.4-12.4-32.6-12.4-45 0L178 63.8l90.1 90 22.5-22.4zM268.1 334c-24.9 24.9-65.2 24.9-90.1 0s-24.9-65.2 0-90.1l67.5-67.5-90-90.1L88 153.9C13.4 228.5 13.4 349.4 88 424s195.5 74.6 270.1 0l67.5-67.5-90-90.1-67.5 67.6zm202.6-67.5-45-45c-12.4-12.4-32.6-12.4-45 0L358.2 244l90 90 22.5-22.5c12.4-12.4 12.4-32.6 0-45z" />',
        viewBox: '0 0 512 512'
    };

    var setColumnPositionIcon = {
        name: 'set-column-position',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM192 416H96V96h96v320zm224 0H224v-32h192v32zm0-64H224v-64h192v64zm0-96H224v-64h192v64zm0-96H224V96h192v64z" />',
        viewBox: '0 0 512 512'
    };

    var clockArrowRotateIcon = {
        name: 'clock-arrow-rotate',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256h32c0-105.9 86.1-192 192-192s192 86.1 192 192-86.1 192-192 192c-57 0-108.3-25-143.5-64.5L176 320H32v144l57.8-57.8C130.8 451.5 190 480 256 480c123.7 0 224-100.3 224-224S379.7 32 256 32Zm-32 96v160h160v-32H256V128h-32Z" />',
        viewBox: '0 0 512 512'
    };

    var playIcon = {
        name: 'play',
        content: '<path d="M0 512V0l512 256L0 512z" />',
        viewBox: '0 0 512 512'
    };

    var pauseIcon = {
        name: 'pause',
        content: '<path d="M320 0h160v512H320V0zM32 512h160V0H32v512z" />',
        viewBox: '0 0 512 512'
    };

    var stopIcon = {
        name: 'stop',
        content: '<path d="M512 512H0V0h512v512z" />',
        viewBox: '0 0 512 512'
    };

    var rewindIcon = {
        name: 'rewind',
        content: '<path d="M256 256 512 96v320L256 256zm0 160V96L0 256l256 160z" />',
        viewBox: '0 0 512 512'
    };

    var forwardIcon = {
        name: 'forward',
        content: '<path d="M0 416V96l256 160L0 416zm512-160L256 96v320l256-160z" />',
        viewBox: '0 0 512 512'
    };

    var volumeDownIcon = {
        name: 'volume-down',
        content: '<path d="M0 352h96l128 128V32L96 160H0v192zm288 28V132c55.2 14.2 96 64.3 96 124s-40.8 109.8-96 124z" />',
        viewBox: '0 0 512 512'
    };

    var volumeUpIcon = {
        name: 'volume-up',
        content: '<path d="M0 352h96l128 128V32L96 160H0v192zm288 28V132c55.2 14.2 96 64.3 96 124s-40.8 109.8-96 124zm0-380v44.8c45.2 0 88.3 20.8 121.2 58.4C444.6 143.6 464 197.8 464 256s-19.4 112.4-54.8 152.8c-33 37.7-76 58.4-121.2 58.4V512c123.7 0 224-114.6 224-256S411.7 0 288 0z" />',
        viewBox: '0 0 512 512'
    };

    var volumeMuteIcon = {
        name: 'volume-mute',
        content: '<path d="M96 160 224 32v448L96 352H0V160h96zm416 29.3L466.7 144 400 210.7 333.2 144 288 189.3l66.7 66.7-66.7 66.7 45.3 45.3 66.7-66.7 66.7 66.7 45.3-45.3-66.8-66.7 66.8-66.7z" />',
        viewBox: '0 0 512 512'
    };

    var hdIcon = {
        name: 'hd',
        content: '<path d="M480 64H32C14.4 64 0 78.4 0 96v320c0 17.6 14.4 32 32 32h448c17.6 0 32-14.4 32-32V96c0-17.6-14.4-32-32-32zM256 384h-64v-96h-64v96H64V128h64v96h64v-96h64v256zm210.3-68.9c-5.1 16.2-11.8 29.4-19.8 39.1-8.2 9.8-18.2 17.4-29.8 22.4-11.5 4.9-26.3 7.4-43.9 7.4H288V128h82.6c20.3 0 35.4 2.2 46.1 6.8 10.7 4.6 20.6 12.2 29.5 22.8 8.7 10.5 15.7 24.1 20.6 40.6 4.8 16.2 7.3 36.5 7.3 60.3-.1 21.5-2.7 40.6-7.8 56.6zm-54.2-94.2c2.6 8.5 3.9 20.5 3.9 35.6 0 14.5-1.3 26.3-3.9 35.1-2.5 8.4-5.5 14.4-8.9 18-3.3 3.5-7.5 6-12.8 7.7-3.8 1.2-11.8 2.7-28.3 2.7H336V192h12.9c21.4 0 30.6.9 34.5 1.7 6.9 1.4 12.6 4.1 17.5 8.4 4.9 4.5 8.7 10.8 11.2 18.8z" />',
        viewBox: '0 0 512 512'
    };

    var closedCaptionsIcon = {
        name: 'closed-captions',
        content: '<path d="M480 64H32S0 64 0 96v320c0 32 32 32 32 32h448c32 0 32-32 32-32V96s0-32-32-32zM240 205c-6.1-4.5-13.5-7.8-21.9-10.1-8.5-2.3-17.1-3.5-25.8-3.5-18 0-32.2 5.8-42.6 17.4-10.4 11.6-15.6 27.4-15.6 47.3 0 19.8 5.2 35.4 15.6 46.9 10.4 11.5 24.3 17.2 41.7 17.2 16.1 0 32.3-4.6 47.6-13.8V373c-17.2 7.4-38.2 11-62.1 11-23.4 0-43.6-5-60.6-15.1s-29.9-24.4-38.9-43-13.4-40-13.4-64.3c0-26.1 5-49.4 15-69.7 10-20.4 24.2-36.1 42.5-47.2s39.4-16.7 63.2-16.7c19 0 37.4 2.6 55.3 7.8V205zm208 0c-6.1-4.5-13.5-7.8-21.9-10.1-8.5-2.3-17.1-3.5-25.8-3.5-18 0-32.2 5.8-42.6 17.4-10.4 11.6-15.6 27.4-15.6 47.3 0 19.8 5.2 35.4 15.6 46.9s24.3 17.2 41.7 17.2c16.1 0 32.3-4.6 47.6-13.8V373c-17.2 7.4-38.2 11-62.1 11-23.4 0-43.6-5-60.6-15.1s-29.9-24.4-38.9-43-13.4-40-13.4-64.3c0-26.1 5-49.4 15-69.7 10-20.4 24.2-36.1 42.5-47.2s39.4-16.7 63.2-16.7c19 0 37.4 2.6 55.3 7.8V205z" />',
        viewBox: '0 0 512 512'
    };

    var playlistIcon = {
        name: 'playlist',
        content: '<path d="M0 256h320v64H0v-64zM512 64H0V0h512v64zm-128 64.8V397c-13.4-8-30-12.8-48-12.8-44.2 0-80 28.7-80 64s35.8 64 80 64 80-28.7 80-64V193h96v-65l-128 .8zM0 128v64h320v-64H0z" />',
        viewBox: '0 0 512 512'
    };

    var musicNotesIcon = {
        name: 'music-notes',
        content: '<path d="M160 170v-64m0-.2v259c-13.4-8-30-12.8-48-12.8-44.2 0-80 28.7-80 64s35.8 64 80 64 80-28.7 80-64V162.5l256-59.1v165.4c-13.4-8-30-12.8-48-12.8-44.2 0-80 28.7-80 64s35.8 64 80 64 80-28.7 80-64V32l-320 73.8z" />',
        viewBox: '0 0 512 512'
    };

    var playSmIcon = {
        name: 'play-sm',
        content: '<path d="M96 416V96l320 160L96 416z" />',
        viewBox: '0 0 512 512'
    };

    var pauseSmIcon = {
        name: 'pause-sm',
        content: '<path d="M288 96h96v320h-96V96zM96 416h96V96H96v320z" />',
        viewBox: '0 0 512 512'
    };

    var stopSmIcon = {
        name: 'stop-sm',
        content: '<path d="M416 416H96V96h320v320z" />',
        viewBox: '0 0 512 512'
    };

    var heartOutlineIcon = {
        name: 'heart-outline',
        content: '<path d="M447.2 96.8c-43.7-43.7-114.7-43.7-158.4 0L256 129.6l-32.8-32.8c-43.7-43.7-114.7-43.7-158.4 0s-43.7 116.3 0 160l32.8 32.8L256 448l158.4-158.4 32.8-32.8c43.7-43.7 43.7-116.3 0-160zm-22.6 137.4L256 402.7 87.4 234.2C72.3 219.1 64 198.7 64 176.8s8.3-42.3 23.4-57.4C102.5 104.3 122.6 96 144 96s41.5 8.3 56.6 23.4l55.4 55.4 55.4-55.4C326.5 104.3 346.6 96 368 96s41.5 8.3 56.6 23.4c15.1 15.1 23.4 35.5 23.4 57.4s-8.3 42.3-23.4 57.4z" />',
        viewBox: '0 0 512 512'
    };

    var heartIcon = {
        name: 'heart',
        content: '<path d="m447.2 256.8-32.8 32.8L256 448 97.6 289.6l-32.8-32.8c-43.7-43.7-43.7-116.3 0-160s114.7-43.7 158.4 0l32.8 32.8 32.8-32.8c43.7-43.7 114.7-43.7 158.4 0s43.7 116.3 0 160z" />',
        viewBox: '0 0 512 512'
    };

    var starOutlineIcon = {
        name: 'star-outline',
        content: '<path d="M480 202.4 319.1 188 256 32l-63.1 156L32 202.4l122 111.7L117.2 480 256 391.5 394.8 480 358 314.1l122-111.7zM256 353.6l-90.8 57.9 24-108.5-82.1-75.2 108.1-9.7L256 117.3l40.8 100.8 108.1 9.7-82.1 75.2 24.1 108.5-90.9-57.9z" />',
        viewBox: '0 0 512 512'
    };

    var starIcon = {
        name: 'star',
        content: '<path d="M256 391.5 117.2 480 154 314.1 32 202.4 192.9 188 256 32l63.1 156L480 202.4 358 314.1 394.8 480 256 391.5z" />',
        viewBox: '0 0 512 512'
    };

    var checkboxIcon = {
        name: 'checkbox',
        content: '<path d="M64 64v384h384V64H64zm352 352H96V96h320v320z" />',
        viewBox: '0 0 512 512'
    };

    var checkboxCheckedIcon = {
        name: 'checkbox-checked',
        content: '<path d="M64 64v384h384V64H64zm352 352H96V96h320v320zm-77.3-269.3L384 192 224 352l-96-96 45.3-45.3 50.7 50.7 114.7-114.7z" />',
        viewBox: '0 0 512 512'
    };

    var checkboxIndeterminateIcon = {
        name: 'checkbox-indeterminate',
        content: '<path d="M128 128h256v256H128V128zM64 64v384h384V64H64zm352 352H96V96h320v320z" />',
        viewBox: '0 0 512 512'
    };

    var checkboxNullIcon = {
        name: 'checkbox-null',
        content: '<path d="M192 64h128v32H192V64zm224 0h-64v32h64v64h32V64h-32zm0 256h32V192h-32v128zm0 96h-64v32h96v-96h-32v64zm-224 32h128v-32H192v32zm-96-96H64v96h96v-32H96v-64zm0-160H64v128h32V192zM64 64v96h32V96h64V64H64z" />',
        viewBox: '0 0 512 512'
    };

    var circleIcon = {
        name: 'circle',
        content: '<path d="M384 256c0 70.7-57.3 128-128 128s-128-57.3-128-128 57.3-128 128-128 128 57.3 128 128z" />',
        viewBox: '0 0 512 512'
    };

    var radiobuttonIcon = {
        name: 'radiobutton',
        content: '<path d="M256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64zm0 352c-88.4 0-160-71.6-160-160S167.6 96 256 96s160 71.6 160 160-71.6 160-160 160z" />',
        viewBox: '0 0 512 512'
    };

    var radiobuttonCheckedIcon = {
        name: 'radiobutton-checked',
        content: '<path d="M351.6 255.3c0 53.2-43.1 96.4-96.4 96.4s-96.4-43.1-96.4-96.4 43.1-96.4 96.4-96.4 96.4 43.2 96.4 96.4zM256 64C150 64 64 150 64 256s86 192 192 192 192-86 192-192S362 64 256 64zm0 352c-88.4 0-160-71.6-160-160S167.6 96 256 96s160 71.6 160 160-71.6 160-160 160z" />',
        viewBox: '0 0 512 512'
    };

    var bellIcon = {
        name: 'bell',
        content: '<path d="M192 416h128c0 35.3-28.7 64-64 64s-64-28.7-64-64zm160-256c0-42-26.9-77.6-64.4-90.7.3-1.7.4-3.5.4-5.3 0-17.7-14.3-32-32-32s-32 14.3-32 32c0 1.8.2 3.6.4 5.3C186.9 82.4 160 118 160 160c0 88.4-43 160-96 160v64h384v-64c-53 0-96-71.6-96-160z" />',
        viewBox: '0 0 512 512'
    };

    var infoCircleIcon = {
        name: 'info-circle',
        content: '<path d="M288 352h32v32H192v-32h32v-96h-32v-32h96v128zm0-224h-64v64h64v-64zm192 128c0 123.7-100.3 224-224 224S32 379.7 32 256 132.3 32 256 32s224 100.3 224 224zm-32 0c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" />',
        viewBox: '0 0 512 512'
    };

    var questionCircleIcon = {
        name: 'question-circle',
        content: '<path d="M352 192c0 45.2-23.4 65.9-40.6 81-15.1 13.3-23.4 20.7-23.4 47h-64c0-55.2 27.1-79.2 45.1-95 13.8-12.1 18.9-16.7 18.9-33 0-17.6-14.4-32-32-32s-32 14.4-32 32h-64c0-53 43-96 96-96s96 43 96 96zM224 416h64v-64h-64v64zm256-160c0 123.7-100.3 224-224 224S32 379.7 32 256 132.3 32 256 32s224 100.3 224 224zm-32 0c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" />',
        viewBox: '0 0 512 512'
    };

    var exclamationCircleIcon = {
        name: 'exclamation-circle',
        content: '<path d="M224 128h64v160h-64V128zm0 256h64v-64h-64v64zm256-128c0 123.7-100.3 224-224 224S32 379.7 32 256 132.3 32 256 32s224 100.3 224 224zm-32 0c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z" />',
        viewBox: '0 0 512 512'
    };

    var cameraIcon = {
        name: 'camera',
        content: '<path d="M448 128h-64l-64-64H192l-64 64H64c-17.6 0-32 14.4-32 32v288c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V160c0-17.6-14.4-32-32-32zM256 416c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112zm64-112c0 35.3-28.7 64-64 64s-64-28.7-64-64 28.7-64 64-64 64 28.7 64 64z" />',
        viewBox: '0 0 512 512'
    };

    var imageIcon = {
        name: 'image',
        content: '<path d="M304 160c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm144-96H64c-17.6 0-32 14.4-32 32v320c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V96c0-17.6-14.4-32-32-32zm-.1 272-64-64-80 80L176 224 64 336V96.1l.1-.1h383.8l.1.1-.1 239.9z" />',
        viewBox: '0 0 512 512'
    };

    var imageExportIcon = {
        name: 'image-export',
        content: '<path d="M384 384v-79.9l-32-32-80 80-128-128-112 112v-240l.1-.1h383.8l.1.1-.1 223.9H448V96c0-17.6-14.4-32-32-32H32C14.4 64 0 78.4 0 96v320c0 17.6 14.4 32 32 32h256v-64h96zM272 160c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm48 288h96v64l96-80-96-80v64h-96v32z" />',
        viewBox: '0 0 512 512'
    };

    var zoomActualSizeIcon = {
        name: 'zoom-actual-size',
        content: '<path d="M0 32v128L128 32H0zm384 0 128 128V32H384zm-260.6 96c-15.1 0-27.4 12.3-27.4 27.4v201.2c0 15.1 12.3 27.4 27.4 27.4h265.2c15.1 0 27.4-12.3 27.4-27.4V155.4c0-15.1-12.3-27.4-27.4-27.4H123.4zM384 160v160l-48-64-48 64-80-96-80 96V160h256zm-96 32c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32zM0 352v128h128L0 352zm512 0L384 480h128V352z" />',
        viewBox: '0 0 512 512'
    };

    var zoomBestFitIcon = {
        name: 'zoom-best-fit',
        content: '<path d="M388.6 128H123.4c-15.1 0-27.4 12.3-27.4 27.4v201.2c0 15.1 12.3 27.4 27.4 27.4h265.2c15.1 0 27.4-12.3 27.4-27.4V155.4c0-15.1-12.3-27.4-27.4-27.4zM384 320l-48-64-48 64-80-96-80 96V160h256v160zM0 160l96 96-96 96V160zm160 320 96-96 96 96H160zM352 32l-96 96-96-96h192zm160 128v192l-96-96 96-96zm-256 64c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var imageResizeIcon = {
        name: 'image-resize',
        content: '<path d="M427.3 404.7 352 329.4V32H32v320h297.4l75.3 75.3L352 480h128V352l-52.7 52.7zM64 320V64h256v233.4L203.3 180.7 256 128H128v128l52.7-52.7L297.4 320H64z" />',
        viewBox: '0 0 512 512'
    };

    var cropIcon = {
        name: 'crop',
        content: '<path d="M0 96h64v64H0V96zm448 256v64h64v-64h-64zm-32-224c0-17.6-14.4-32-32-32H192v64h160v320h64V128zM96 384c0 17.6 14.4 32 32 32h192v-64H160V32H96v352z" />',
        viewBox: '0 0 512 512'
    };

    var mirrorIcon = {
        name: 'mirror',
        content: '<path d="M192 64H32v384h160V64zm-31 352s0 .1 0 0l-96.9.1-.1-.1V96.1l.1-.1H160v320h1zm95 64h-32V32h32v448zm32-416h160v384H288V64z" />',
        viewBox: '0 0 512 512'
    };

    var flipHorizontalIcon = {
        name: 'flip-horizontal',
        content: '<path d="M448 448H288V64l160 384zm-384 0L224 64v384H64zm128-224-80 192h80V224z" />',
        viewBox: '0 0 512 512'
    };

    var flipVerticalIcon = {
        name: 'flip-vertical',
        content: '<path d="M64 288h384L64 448V288zm0-224v160h384L64 64zm32 128v-80l192 80H96z" />',
        viewBox: '0 0 512 512'
    };

    var rotateIcon = {
        name: 'rotate',
        content: '<path d="M256 448c8.2 0 16.2-.6 24-1.8v32.3c-7.9 1-15.9 1.5-24 1.5s-16.1-.5-24-1.5v-32.3c7.8 1.2 15.8 1.8 24 1.8zm-116-7c12.7 9.7 26.6 17.8 41.5 24l16.2-28c-15.1-5.9-29.1-14.1-41.5-24.1L140 441zm-61-78.5c6.3 14.9 14.4 28.8 24 41.5l28-16.2c-10-12.5-18.1-26.4-24.1-41.5L79 362.5zM256 128v64l128-80-128-80v64c-8.1 0-16.1.5-24 1.5-17.7 2.2-34.6 6.8-50.5 13.5-14.9 6.3-28.8 14.4-41.5 24-14 10.6-26.4 23-37 37-9.7 12.7-17.8 26.6-24 41.5-6.7 15.9-11.3 32.8-13.5 50.5-1 7.9-1.5 15.9-1.5 24s.5 16.1 1.5 24h32.3c-1.2-7.8-1.8-15.8-1.8-24s.6-16.2 1.8-24c1.8-11.9 4.9-23.4 9.2-34.3 5.9-15.1 14.1-29.1 24.1-41.5 7.4-9.3 15.8-17.7 25.1-25.1 12.5-10 26.4-18.1 41.5-24.1 10.9-4.3 22.4-7.4 34.3-9.2 7.8-1.2 15.8-1.8 24-1.8zm190.5 136h-32.3c1.2 7.8 1.8 15.8 1.8 24s-.6 16.2-1.8 24h32.3c1-7.9 1.5-15.9 1.5-24s-.5-16.1-1.5-24zm-65.6 123.8 28 16.2c9.7-12.7 17.8-26.6 24-41.5l-28-16.2c-5.8 15.1-14 29.1-24 41.5zM314.3 437l16.2 28c14.9-6.3 28.8-14.4 41.5-24l-16.2-28c-12.4 9.9-26.4 18.1-41.5 24z" />',
        viewBox: '0 0 512 512'
    };

    var rotateRightIcon = {
        name: 'rotate-right',
        content: '<path d="M320 448V64l160 384H320zm-32 0H32l256-160v160zm-32-102.3L143.6 416H256v-70.3zM64 160v128h32v-96h96v64l96-80-96-80v64H64z" />',
        viewBox: '0 0 512 512'
    };

    var rotateLeftIcon = {
        name: 'rotate-left',
        content: '<path d="M32 448 192 64v384H32zm192-160 256 160H224V288zm32 128h112.4L256 345.7V416zm64-256V96l-96 80 96 80v-64h96v96h32V160H320z" />',
        viewBox: '0 0 512 512'
    };

    var brushIcon = {
        name: 'brush',
        content: '<path d="M32 480s46.4-5.6 96-16c22.3-4.7 46.9-14 70.7-37.7 56.9-56.9.2-112.9.2-112.9s-56.7-56.9-113.3-.2c-23.4 23.4-20.1 57.1-19.7 89.8.8 59.7-33.9 77-33.9 77zM470.7 64 448 41.3c-12.4-12.4-32.8-12.4-45.3 0L204.3 239.8c11.5 5.8 20.8 12.2 27.7 17.6 5.3 4.2 9.2 7.7 11.3 9.8l.8.8.8.8c2.1 2.1 5.6 5.9 9.7 11.1 5.4 6.8 11.8 16.2 17.6 27.6l23.5-23.5 174.9-174.9c12.5-12.3 12.5-32.7.1-45.1zM448 86.6 277.4 257.3c-4.8-5.8-8.6-9.9-10.6-11.9-2.3-2.3-6.3-6.1-12-10.7L425.4 64h.1L448 86.6z" />',
        viewBox: '0 0 512 512'
    };

    var paletteIcon = {
        name: 'palette',
        content: '<path d="m206 256.6 160-160c-2.2-5.7-4.8-11.1-7.9-16.3-24.2-40.8-60.1-66-107.8-75.9-2.3-.5-4.7-1-7.1-1.4C192-5.8 143.1 4.8 96.5 34.6 49.3 64.7 19.2 107.2 6.1 162c-13 54.8-5.2 106.4 23.4 154.6 14.2 23.8 31.3 43.2 51.4 58.4 3.8-25.2 13.4-52 36.4-75 31.3-31.4 64-41.3 88.7-43.4zM288 64c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm-96-32c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM64 256c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm0-128c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm438.7 12.9L480 118.3c-12.4-12.4-32.8-12.4-45.3 0L281.1 271.9c11.5 5.8 20.8 12.2 27.7 17.6 5.3 4.2 9.2 7.7 11.3 9.8l11.3 12.7c5.4 6.8 11.8 16.2 17.6 27.6l153.5-153.5c12.6-12.4 12.6-32.8.2-45.2zM354.3 289.3c-4.8-5.8-8.6-9.9-10.6-11.9-2.3-2.3-6.3-6.1-12-10.7L457.4 141h.1l22.5 22.5-125.7 125.8zm-78.7 169c-23.8 23.7-48.4 33-70.7 37.7-49.6 10.4-96 16-96 16s34.7-17.3 33.9-77c-.4-32.7-3.7-66.4 19.7-89.8 56.6-56.7 113.3.2 113.3.2s56.7 56-.2 112.9z" />',
        viewBox: '0 0 512 512'
    };

    var dropletIcon = {
        name: 'droplet',
        content: '<path d="M256 384v32c-53 0-96-43-96-96h32c0 35.3 28.7 64 64 64zm160-72c0 92.8-71.6 168-160 168S96 404.8 96 312C96 181.3 256 32 256 32s160 149.3 160 280zm-32 0c0-46.3-25.3-104.7-73-169-20-27-40.3-49.8-55-65.4-14.7 15.6-34.9 38.5-55 65.4-47.8 64.3-73 122.8-73 169 0 75 57.4 136 128 136s128-61 128-136z" />',
        viewBox: '0 0 512 512'
    };

    var shapeLineIcon = {
        name: 'shape-line',
        content: '<path d="M480 54.6 54.6 480 32 457.4 457.4 32 480 54.6z" />',
        viewBox: '0 0 512 512'
    };

    var brightnessContrastIcon = {
        name: 'brightness-contrast',
        content: '<path d="M165.5 346.5c12.4 12.5 12.4 32.9 0 45.3l-22.6 22.6c-12.5 12.4-32.8 12.4-45.3 0-12.4-12.5-12.4-32.9 0-45.3l22.6-22.6c12.5-12.4 32.9-12.4 45.3 0zM256 128c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32s-32 14.4-32 32v32c0 17.6 14.4 32 32 32zm135.8 37.5 22.6-22.6c12.4-12.4 12.4-32.8 0-45.3-12.4-12.4-32.8-12.4-45.3 0l-22.6 22.6c-12.4 12.4-12.4 32.8 0 45.3 12.5 12.4 32.8 12.4 45.3 0zm-271.6 0c12.4 12.4 32.8 12.4 45.3 0 12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6c-12.4-12.4-32.8-12.4-45.3 0-12.4 12.5-12.4 32.8 0 45.3l22.6 22.6zM128 256c0-17.6-14.4-32-32-32H64c-17.6 0-32 14.4-32 32s14.4 32 32 32h32c17.6 0 32-14.4 32-32zm263.8 90.5c-12.4-12.4-32.8-12.4-45.3 0-12.4 12.5-12.4 32.8 0 45.3l22.6 22.6c12.4 12.4 32.8 12.4 45.3 0 12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6zM448 224h-32c-17.6 0-32 14.4-32 32s14.4 32 32 32h32c17.6 0 32-14.4 32-32s-14.4-32-32-32zm-96 32c0 53-43 96-96 96s-96-43-96-96 43-96 96-96 96 43 96 96zm-32 0c0-35.3-28.7-64-64-64v128c35.3 0 64-28.7 64-64zm-64 128c-17.6 0-32 14.4-32 32v32c0 17.6 14.4 32 32 32s32-14.4 32-32v-32c0-17.6-14.4-32-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var slidersIcon = {
        name: 'sliders',
        content: '<path d="M480 96v32H285.3c-6.6 18.6-24.4 32-45.3 32s-38.7-13.4-45.3-32H32V96h162.7c6.6-18.6 24.4-32 45.3-32s38.7 13.4 45.3 32H480zm-112 96c-20.9 0-38.7 13.4-45.3 32H32v32h290.7c6.6 18.6 24.4 32 45.3 32s38.7-13.4 45.3-32H480v-32h-66.7c-6.6-18.6-24.4-32-45.3-32zM176 320c-20.9 0-38.7 13.4-45.3 32H32v32h98.7c6.6 18.6 24.4 32 45.3 32s38.7-13.4 45.3-32H480v-32H221.3c-6.6-18.6-24.4-32-45.3-32z" />',
        viewBox: '0 0 512 512'
    };

    var invertColorsIcon = {
        name: 'invert-colors',
        content: '<path d="m320 32-64 48 64 48V96h64v64h-32l48 64 48-64h-32V64h-96V32zM32 64v192h192V64H32zm192 192v192h192V256H224zM64 96h128v128H64V96z" />',
        viewBox: '0 0 512 512'
    };

    var transparencyIcon = {
        name: 'transparency',
        content: '<path d="M64 64v352h352V64H64zm32 32h96v96h96V96h96v96h-96v96h96v96h-96v-96h-96v96H96v-96h96v-96H96V96z" />',
        viewBox: '0 0 512 512'
    };

    var grayscaleIcon = {
        name: 'grayscale',
        content: '<path d="M32 64C14.3 64 0 78.3 0 96v320c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32H32zm0 32h416v320H32V96zm48 32c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm64 0c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V144c0-8.8-7.2-16-16-16zm0 4c6.6 0 12 5.4 12 12v224c0 6.6-5.4 12-12 12s-12-5.4-12-12V144c0-6.6 5.4-12 12-12zm-64 1c6.1 0 11 4.9 11 11v224c0 6.1-4.9 11-11 11s-11-4.9-11-11V144c0-6.1 4.9-11 11-11zm-64 2c5 0 9 4 9 9v224c0 5-4 9-9 9s-9-4-9-9V144c0-5 4-9 9-9zm-64 1c4.4 0 8 3.6 8 8v224c0 4.4-3.6 8-8 8s-8-3.6-8-8V144c0-4.4 3.6-8 8-8zm-64 4c2.2 0 4 1.8 4 4v224c0 2.2-1.8 4-4 4s-4-1.8-4-4V144c0-2.2 1.8-4 4-4z" />',
        viewBox: '0 0 512 512'
    };

    var blurIcon = {
        name: 'blur',
        content: '<path d="M384 320c0 64-32 128-128 128-64 0-128-48-128-128 0-96 128-128 128-256 0 0 128 129.1 128 256z" />',
        viewBox: '0 0 512 512'
    };

    var sharpenIcon = {
        name: 'sharpen',
        content: '<path d="M256 32 128 480h256L256 32zm0 116.5L341.6 448H170.4L256 148.5z" />',
        viewBox: '0 0 512 512'
    };

    var shapesIcon = {
        name: 'shapes',
        content: '<path d="M480 32H160v131.204C86.969 178.029 32 242.594 32 320c0 88.365 71.635 160 160 160 77.406 0 141.972-54.969 156.797-128H480V32zM192 448c-70.692 0-128-57.308-128-128 0-59.643 40.793-109.758 96-123.967 1.173-.302 2.354-.583 3.539-.852.357-.081.717-.156 1.076-.234a125.086 125.086 0 0 1 3.764-.762 126.34 126.34 0 0 1 2.557-.448c.369-.061.736-.125 1.105-.184 2.423-.379 4.869-.69 7.335-.932.379-.037.759-.067 1.139-.101a132.167 132.167 0 0 1 3.913-.29c.872-.051 1.747-.091 2.623-.125.392-.015.782-.033 1.174-.045 1.254-.036 2.512-.06 3.775-.06 70.692 0 128 57.308 128 128 0 1.264-.023 2.521-.06 3.775-.012.393-.03.782-.045 1.174a126.511 126.511 0 0 1-.207 3.922c-.06.874-.13 1.744-.207 2.613-.034.38-.064.761-.102 1.14a127.326 127.326 0 0 1-.933 7.339c-.057.365-.121.728-.181 1.092a128.132 128.132 0 0 1-.683 3.785c-.17.86-.349 1.718-.535 2.571-.075.346-.147.692-.226 1.037a135.047 135.047 0 0 1-.855 3.552c-14.208 55.207-64.323 96-123.966 96zm256-128h-96c0-88.365-71.635-160-160-160V64h256v256z" />',
        viewBox: '0 0 512 512'
    };

    var roundCornersIcon = {
        name: 'round-corners',
        content: '<path d="M448 320c0 70.692-57.308 128-128 128H192c-70.692 0-128-57.308-128-128V192c0-70.692 57.308-128 128-128h128c70.692 0 128 57.308 128 128v128z" />',
        viewBox: '0 0 512 512'
    };

    var bringToFrontIcon = {
        name: 'bring-to-front',
        content: '<path d="M96 128V96h96V64H64v128h32v-64zm224 256h64V128H128v256h192zm96-64v96h-96v32h128V320h-32z" />',
        viewBox: '0 0 512 512'
    };

    var bringToBackIcon = {
        name: 'bring-to-back',
        content: '<path d="M128 192h64V64H64v128h64zM96 96h64v64H96V96zm192 192h96V128H224v96h-96v160h160v-96zm128 32h-96v128h128V320h-32zm0 96h-64v-64h64v64z" />',
        viewBox: '0 0 512 512'
    };

    var bringForwardIcon = {
        name: 'bring-forward',
        content: '<path d="M448 192v256H192V320H64V64h256v128h128zm-32 32h-96v96h-96v96h192V224z" />',
        viewBox: '0 0 512 512'
    };

    var bringBackwardIcon = {
        name: 'bring-backward',
        content: '<path d="M192 192v256h256V192H192zm224 224H224V224h192v192zM320 64H64v256h96V160h160V64z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfStartIcon = {
        name: 'align-self-start',
        content: '<path d="M31 32h32v448H31V32zm288 64H95v128h224V96zm128 192v128H95V288h352zm-32 32H127v64h288v-64z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfCenterIcon = {
        name: 'align-self-center',
        content: '<path d="M255 288v-64h96V96h-96V32h-32v64h-96v128h96v64H63v128h160v64h32v-64h160V288H255zm128 96H95v-64h288v64z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfEndIcon = {
        name: 'align-self-end',
        content: '<path d="M64 416h352V288H64v128zm32-96h288v64H96v-64zm96-224h224v128H192V96zm288-64v448h-32V32h32z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfStartAltIcon = {
        name: 'align-self-start-alt',
        content: '<path d="M95 96h128v224H95V96zm192 0h128v352H287V96zm32 320h64V128h-64v288zM31 32v32h448V32H31z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfCenterAltIcon = {
        name: 'align-self-center-alt',
        content: '<path d="M415 224V64H287v160h-64v-96H95v96H31v32h64v96h128v-96h64v160h128V256h64v-32h-64zm-32 0v160h-64V96h64v128z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfEndAltIcon = {
        name: 'align-self-end-alt',
        content: '<path d="M479 449v32H31v-32h448zM223 193H95v224h128V193zm192 224H287V65h128v352zM383 97h-64v288h64V97z" />',
        viewBox: '0 0 512 512'
    };

    var thumbnailsUpIcon = {
        name: 'thumbnails-up',
        content: '<path d="M352 32h96v96h-96V32zm-160 0h96v96h-96V32zM32 32h96v96H32V32zm0 160h416v256H32V192z" />',
        viewBox: '0 0 512 512'
    };

    var thumbnailsRightIcon = {
        name: 'thumbnails-right',
        content: '<path d="M352 352h96v96h-96v-96zm0-160h96v96h-96v-96zm0-160h96v96h-96V32zM32 32h256v416H32V32z" />',
        viewBox: '0 0 512 512'
    };

    var thumbnailsDownIcon = {
        name: 'thumbnails-down',
        content: '<path d="M352 352h96v96h-96v-96zm-160 0h96v96h-96v-96zm-160 0h96v96H32v-96zm0-320h416v256H32V32z" />',
        viewBox: '0 0 512 512'
    };

    var thumbnailsLeftIcon = {
        name: 'thumbnails-left',
        content: '<path d="M32 32v96h96V32H32zm160 0v416h256V32H192zM32 192v96h96v-96H32zm0 160v96h96v-96H32z" />',
        viewBox: '0 0 512 512'
    };

    var fullscreenIcon = {
        name: 'fullscreen',
        content: '<path d="M0 32h160v64H64v96H0V32zm64 288H0v160h160v-64H64v-96zM352 32v64h96v96h64V32H352zm96 384h-96v64h160V320h-64v96z" />',
        viewBox: '0 0 512 512'
    };

    var fullscreenExitIcon = {
        name: 'fullscreen-exit',
        content: '<path d="M160 32H96v96H0v64h160V32zM96 480h64V320H0v64h96v96zm416-288v-64h-96V32h-64v160h160zm-96 192h96v-64H352v160h64v-96z" />',
        viewBox: '0 0 512 512'
    };

    var dropletSlashIcon = {
        name: 'droplet-slash',
        content: '<path d="m317.9 431 23.2 23.2C316.5 470.6 287.3 480 256 480c-88.4 0-160-75.2-160-168 0-27.8 7.2-56.4 18.6-84.2l24.8 24.8C131.9 274 128 293.9 128 312c0 75 57.4 136 128 136 22.4 0 43.5-6.2 61.9-17zM256 416v-32c-35.3 0-64-28.7-64-64h-32c0 53 43 96 96 96zm224 41.4L457.4 480 32 54.6 54.6 32l108.7 108.7C207 77.7 256 32 256 32s160 149.3 160 280c0 24.1-4.9 47.1-13.6 67.8l77.6 77.6zM384 312c0-46.3-25.3-104.7-73-169-20-27-40.3-49.8-55-65.4-14.7 15.6-34.9 38.5-55 65.4-1.4 1.9-2.7 3.7-4.1 5.6-.8 1.1-1.5 2.1-2.3 3.2l-1.5 2.1-3 4.2c-.2.3-.4.5-.6.8-1 1.5-2.1 3-3.1 4.5-.1.1-.1.2-.2.3l191.2 191.2c.5-1.6 1-3.3 1.4-4.9 0-.2.1-.4.1-.5.4-1.5.8-2.9 1.1-4.4.1-.3.1-.6.2-.9.3-1.4.6-2.7.9-4.1.1-.4.2-.8.2-1.2.2-1.3.5-2.6.7-3.9.1-.5.2-1 .2-1.5.2-1.2.3-2.5.5-3.7.1-.5.1-1.1.2-1.6l.3-3.6c0-.6.1-1.1.1-1.7.1-1.3.2-2.5.2-3.8 0-.5.1-1 .1-1.6.4-1.9.4-3.7.4-5.5z" />',
        viewBox: '0 0 512 512'
    };

    var photosIcon = {
        name: 'photos',
        content: '<path d="M256 288c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm96-64v192c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32V224c0-17.7 14.3-32 32-32h256c17.7 0 32 14.3 32 32zm-31.8 0c-.1-.1-.1-.1 0 0l-256.1-.1-.1.1v149.9l74.6-70 85.3 80 53.3-50 42.7 40 .3-149.9zm63.8-96H128c-17.7 0-32 14.3-32 32h288v224c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32zm64-64H192c-17.7 0-32 14.3-32 32h288v224c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignToGridIcon = {
        name: 'align-to-grid',
        content: '<path d="M320 320H128V128h192v192zM96 0H64v512h32V0zm352 0h-32v512h32V0zm64 64H0v32h512V64zm0 352H0v32h512v-32z" />',
        viewBox: '0 0 512 512'
    };

    var sizeToGridIcon = {
        name: 'size-to-grid',
        content: '<path d="M384 384H128V128h256v256zM96 0H64v512h32V0zm352 0h-32v512h32V0zm64 64H0v32h512V64zm0 352H0v32h512v-32z" />',
        viewBox: '0 0 512 512'
    };

    var makeSameSizeIcon = {
        name: 'make-same-size',
        content: '<path d="M288 192v96h-96v-96h96zM240.1 0l-48.4 64H224v64h33V64h31.6L240.1 0zM256 416v-64h-32v64h-32l48 64 48-64h-32zm224-175.9-64-48.4V224h-64v33h64v31.6l64-48.5zM64 224v-32L0 240l64 48v-32h64v-32H64zM128 0H0v128h32V32h96V0zm320 0h-96v32h96v96h32V0h-32zM32 448v-96H0v128h128v-32H32zm416-96v96h-96v32h128V352h-32z" />',
        viewBox: '0 0 512 512'
    };

    var makeSameWidthIcon = {
        name: 'make-same-width',
        content: '<path d="M480 128H0V32h480v96zm-192 96h-96v96h96v-96zm192 48.1-64-48.4V256h-64v33h64v31.6l64-48.5zM64 256v-32L0 272l64 48v-32h64v-32H64zm384 96v96h-96v32h128V352h-32zM32 448v-96H0v128h128v-32H32z" />',
        viewBox: '0 0 512 512'
    };

    var makeSameHeightIcon = {
        name: 'make-same-height',
        content: '<path d="M128 0v480H32V0h96zm96 192v96h96v-96h-96zM272.1 0l-48.4 64H256v64h33V64h31.6L272.1 0zM288 416v-64h-32v64h-32l48 64 48-64h-32zM448 0h-96v32h96v96h32V0h-32zm0 352v96h-96v32h128V352h-32z" />',
        viewBox: '0 0 512 512'
    };

    var makeHorizontalSpacingEqualIcon = {
        name: 'make-horizontal-spacing-equal',
        content: '<path d="M480 160v160h-96v-64h-96v160h-96V256H96v96H32V128h64v96h96V64h96v160h96v-64h96z" />',
        viewBox: '0 0 512 512'
    };

    var increaseHorizontalSpacingIcon = {
        name: 'increase-horizontal-spacing',
        content: '<path d="M480 96v160h-96v-64h-96v160h-96V192H96v96H32V64h64v96h96V0h96v160h96V96h96zM335.7 352l-22.6 22.6 57.4 57.4-57.4 57.4 22.6 22.6 80-80-80-80zM64 432l80 80 22.6-22.6-57.3-57.4 57.4-57.4L144 352l-80 80z" />',
        viewBox: '0 0 512 512'
    };

    var decreaseHorizontalSpacingIcon = {
        name: 'decrease-horizontal-spacing',
        content: '<path d="M480 96v160h-96v-64h-96v160h-96V192H96v96H32V64h64v96h96V0h96v160h96V96h96zM111.6 352 89 374.6l57.4 57.4L89 489.4l22.6 22.6 80-80-80-80zM288 432l80 80 22.6-22.6-57.3-57.4 57.4-57.4L368 352l-80 80z" />',
        viewBox: '0 0 512 512'
    };

    var removeHorizontalSpacingIcon = {
        name: 'remove-horizontal-spacing',
        content: '<path d="M480 96v160h-96v-64h-96v160h-96V192H96v96H32V64h64v96h96V0h96v160h96V96h96zm-32.5 278.2-22.6-22.6-57.4 57.4-57.4-57.4-22.6 22.6 57.4 57.4-57.4 57.4 22.6 22.6 57.4-57.4 57.4 57.4 22.6-22.6-57.4-57.4 57.4-57.4zm-256 0-22.6-22.6-57.4 57.4-57.4-57.4-22.6 22.6 57.4 57.4L31.5 489l22.6 22.6 57.4-57.4 57.4 57.4 22.6-22.6-57.4-57.4 57.4-57.4z" />',
        viewBox: '0 0 512 512'
    };

    var makeVerticalSpacingEqualIcon = {
        name: 'make-vertical-spacing-equal',
        content: '<path d="M256 320v96h96v64H128v-64h96v-96H64v-96h160v-96h-64V32h160v96h-64v96h160v96H256z" />',
        viewBox: '0 0 512 512'
    };

    var increaseVerticalSpacingIcon = {
        name: 'increase-vertical-spacing',
        content: '<path d="M192 320v96h96v64H64v-64h96v-96H0v-96h160v-96H96V32h160v96h-64v96h160v96H192zm320 48.1-22.6-22.6-57.4 57.3-57.4-57.4-22.6 22.7 80 80 80-80zM432 96l-80 80 22.6 22.6 57.4-57.4 57.4 57.4L512 176l-80-80z" />',
        viewBox: '0 0 512 512'
    };

    var decreaseVerticalSpacingIcon = {
        name: 'decrease-vertical-spacing',
        content: '<path d="M191 320v96h96v64H63v-64h96v-96H-1v-96h160v-96H95V32h160v96h-64v96h160v96H191zm160 105.4 22.6 22.6 57.4-57.4 57.4 57.4 22.6-22.6-80-80-80 80zm80-226.8 80-80L488.4 96 431 153.4 373.6 96 351 118.6l80 80z" />',
        viewBox: '0 0 512 512'
    };

    var removeVerticalSpacingIcon = {
        name: 'remove-vertical-spacing',
        content: '<path d="M192 320v96h96v64H64v-64h96v-96H0v-96h160v-96H96V32h160v96h-64v96h160v96H192zm320 22.6L489.4 320 432 377.4 374.6 320 352 342.6l57.4 57.4-57.4 57.4 22.6 22.6 57.4-57.4 57.4 57.4 22.6-22.6-57.4-57.4 57.4-57.4zm0-288L489.4 32 432 89.4 374.6 32 352 54.6l57.4 57.4-57.4 57.4 22.6 22.6 57.4-57.4 57.4 57.4 22.6-22.6-57.4-57.4L512 54.6z" />',
        viewBox: '0 0 512 512'
    };

    var eyedropperIcon = {
        name: 'eyedropper',
        content: '<path d="m461.1 56.9-6.2-6.2c-25-25-65.5-25-90.5 0l-60.8 60.8-4.3-4.3c-6.2-6.2-16.4-6.2-22.6 0l-9.4 9.4c-6.2 6.2-6.2 16.4 0 22.6l4.3 4.3L70.8 344.4c-8.2 8.2-14 18.5-16.8 29.7l-21.5 85.7c-2.2 8.6 3.1 17.4 11.7 19.5 2.6.6 5.2.6 7.8 0l85.7-21.4c11.3-2.8 21.5-8.6 29.7-16.8l200.8-200.8 4.4 4.4c6.2 6.2 16.4 6.2 22.6 0l9.4-9.4c6.2-6.2 6.2-16.4 0-22.6l-4.4-4.4 60.8-60.8c25-25 24.9-65.5.1-90.6zM224 320h-64l144-144 32 32-112 112z" />',
        viewBox: '0 0 512 512'
    };

    var snapGridIcon = {
        name: 'snap-grid',
        content: '<path d="M480 128V96h-96V0h-32v96h-96V0h-32v96h-96V0H96v96H0v32h96v96H0v32h96v96H0v32h96v96h32v-96h96v96h32v-96h96v96h32v-96h96v-32h-96v-96h96v-32h-96v-96h96zm-352 0h96v96h-96v-96zm0 224v-96h96v96h-96zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var snapToGridlinesIcon = {
        name: 'snap-to-gridlines',
        content: '<path d="M160 32H0v416h288V32H160zm-32 384H32v-96h96v96zm0-128H32v-96h96v96zm0-128H32V64h96v96zm128 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96zm256 80c0 44.2-35.8 80-80 80h-32v-32h32c26.5 0 48-21.5 48-48s-21.5-48-48-48h-32v-32h32c44.2 0 80 35.8 80 80zm-160-48h32v-32h-32v32zm0 128h32v-32h-32v32z" />',
        viewBox: '0 0 512 512'
    };

    var snapToSnaplinesIcon = {
        name: 'snap-to-snaplines',
        content: '<path d="M224 128h96V96h-96V32h-32v64h-64V32H96v64H32v32h64v256H32v32h64v64h32v-64h64v64h32v-64h256v-32H224V128zm-32 256h-64V128h64v256zm208-64h-32v-32h32c26.5 0 48-21.5 48-48s-21.5-48-48-48h-32v-32h32c44.2 0 80 35.8 80 80s-35.8 80-80 80zm-48-160h-32v32h32v-32zm-32 160h32v-32h-32v32z" />',
        viewBox: '0 0 512 512'
    };

    var dimensionsIcon = {
        name: 'dimensions',
        content: '<path d="M320 0H0v512h128V128h384V0H320zM32 32h64v64H32V32zm64 352H64v32h32v64H32V320h64v64zm0-192H64v32h32v64H32V128h64v64zm128-96V64h-32v32h-64V32h160v64h-64zm256 0h-64V64h-32v32h-64V32h160v64z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfStretchIcon = {
        name: 'align-self-stretch',
        content: '<path d="M95 96h320v128H95V96zM31 480h32V32H31v448zm64-192h320v128H95V288zm32 96h256v-64H127v64zM447 32v448h32V32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignSelfStretchAltIcon = {
        name: 'align-self-stretch-alt',
        content: '<path d="M223 96v320H95V96h128zM31 480h448v-32H31v32zM415 96v320H287V96h128zm-32 32h-64v256h64V128zM31 32v32h448V32H31z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsStartIcon = {
        name: 'align-items-start',
        content: '<path d="M319 224H95V96h224v128zM31 480h32V32H31v448zm64-192v128h352V288H95z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsCenterIcon = {
        name: 'align-items-center',
        content: '<path d="M415 416H255v64h-32v-64H63V288h160v-64h-96V96h96V32h32v64h96v128h-96v64h160v128z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsEndIcon = {
        name: 'align-items-end',
        content: '<path d="M192 96h224v128H192V96zm256-64v448h32V32h-32zM64 416h352V288H64v128z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsStretchIcon = {
        name: 'align-items-stretch',
        content: '<path d="M415 224H95V96h320v128zM31 480h32V32H31v448zM447 32v448h32V32h-32zM96 416h320V288H96v128z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsBaselineIcon = {
        name: 'align-items-baseline',
        content: '<path d="M415 224V64H287v160h-64v-96H95v96H31v32h64v96h128v-96h64v160h128V256h64v-32h-64zm-224 96h-64v-64h64v64zm192 64h-64V256h64v128z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsStartAltIcon = {
        name: 'align-items-start-alt',
        content: '<path d="M96 96h128v224H96V96zM32 32v32h448V32H32zm256 416h128V96H288v352z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsCenterAltIcon = {
        name: 'align-items-center-alt',
        content: '<path d="M479 256h-64v160H287V256h-64v96H95v-96H31v-32h64v-96h128v96h64V64h128v160h64v32z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsEndAltIcon = {
        name: 'align-items-end-alt',
        content: '<path d="M223 417H95V193h128v224zM31 449v32h448v-32H31zM415 65H287v352h128V65z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsStretchAltIcon = {
        name: 'align-items-stretch-alt',
        content: '<path d="M223 96v320H95V96h128zM31 480h448v-32H31v32zm0-448v32h448V32H31zm256 63v320h128V95H287z" />',
        viewBox: '0 0 512 512'
    };

    var alignItemsBaselineAltIcon = {
        name: 'align-items-baseline-alt',
        content: '<path d="M255 288v-64h96V96h-96V32h-32v64h-96v128h96v64H63v128h160v64h32v-64h160V288H255zm-32 96H95v-64h128v64zm0-192h-64v-64h64v64z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentStartIcon = {
        name: 'justify-content-start',
        content: '<path d="M95 96h128v320H95V96zM31 480h32V32H31v448zM255 95v320h128V95H255z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentCenterIcon = {
        name: 'justify-content-center',
        content: '<path d="M63 96h128v320H63V96zm160 384h32V32h-32v448zm64-385v320h128V95H287z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentEndIcon = {
        name: 'justify-content-end',
        content: '<path d="M128 96h128v320H128V96zm320-64v448h32V32h-32zM288 415h128V95H288v320z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentBetweenIcon = {
        name: 'justify-content-between',
        content: '<path d="M63 96h128v320H63V96zm416-64v448h32V32h-32zM319 415h128V95H319v320zM-1 480h32V32H-1v448z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentAroundIcon = {
        name: 'justify-content-around',
        content: '<path d="M95 96h128v320H95V96zm384-64v448h32V32h-32zM287 415h128V95H287v320zM-1 480h32V32H-1v448z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentStartAltIcon = {
        name: 'justify-content-start-alt',
        content: '<path d="M415 224H95V96h320v128zM31 32v32h448V32H31zm65 352h320V256H96v128z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentCenterAltIcon = {
        name: 'justify-content-center-alt',
        content: '<path d="M415 192H95V64h320v128zM31 224v32h448v-32H31zm65 192h320V288H96v128z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentEndAltIcon = {
        name: 'justify-content-end-alt',
        content: '<path d="M415 257H95V129h320v128zM31 449v32h448v-32H31zm65-32h320V289H96v128z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentBetweenAltIcon = {
        name: 'justify-content-between-alt',
        content: '<path d="M95 64h320v128H95V64zM31 512h448v-32H31v32zm65-64h320V320H96v128zM31 0v32h448V0H31z" />',
        viewBox: '0 0 512 512'
    };

    var justifyContentAroundAltIcon = {
        name: 'justify-content-around-alt',
        content: '<path d="M95 96h320v128H95V96zM31 512h448v-32H31v32zm65-96h320V288H96v128zM31 0v32h448V0H31z" />',
        viewBox: '0 0 512 512'
    };

    var fileWrenchIcon = {
        name: 'file-wrench',
        content: '<path d="M470.7 480 448 502.7c-12.4 12.4-32.8 12.4-45.1-.1l-93.1-93.1c-11.8 4.2-24.5 6.5-37.8 6.5-61.9 0-112-50.1-112-112 0-13.2 2.3-25.9 6.5-37.6l48.9 48.9c12.4 12.4 32.8 12.4 45.3 0l22.6-22.6c12.4-12.4 12.4-32.8 0-45.3l-48.9-48.9c11.8-4.2 24.4-6.5 37.6-6.5 61.9 0 112 50.1 112 112 0 13.2-2.3 25.9-6.5 37.6l93.2 93.1c12.4 12.5 12.4 32.9 0 45.3zm-22.8-23-86.3-86.3c-6.4 8.6-14 16.2-22.6 22.6l86.4 86.3 22.6-22.5v-.1h-.1zM96 64h224v96h96v128h32V128l-96-96H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h160v-32H96V64z" />',
        viewBox: '0 0 512 512'
    };

    var boldIcon = {
        name: 'bold',
        content: '<path d="M128 96h115.8c25.3 0 44.2 1.1 56.6 3.2 12.4 2.1 23.6 6.5 33.4 13.2 9.8 6.7 18 15.6 24.6 26.7 6.6 11.1 9.8 23.6 9.8 37.4 0 15-4.1 28.7-12.1 41.2-8.1 12.5-19.1 21.9-32.9 28.2 19.5 5.7 34.5 15.4 45 29s15.7 29.8 15.7 48.2c0 14.6-3.4 28.7-10.2 42.4-6.7 13.8-16 24.8-27.7 33s-26.1 13.3-43.3 15.2c-10.8 1.2-36.7 1.9-78 2.2H128V96zm64 53v74h30.9c25.2 0 40.8-.4 46.9-1.1 11.1-1.3 19.7-5.2 26.1-11.5 6.3-6.3 9.5-14.7 9.5-25 0-9.9-2.7-18-8.2-24.1-5.5-6.2-13.6-10-24.4-11.2-6.4-.7-24.8-1.1-55.2-1.1H192zm0 127.1V362h48.6c23.4 0 38.1-.7 44.5-2 9.6-1.8 17.5-6 23.6-12.8 6.1-6.8 9-15.9 9-27.3 0-9.6-2.3-17.9-7-24.6-4.7-6.7-11.4-11.6-20.3-14.7-8.8-3.1-28-4.6-57.5-4.6l-40.9.1z" />',
        viewBox: '0 0 512 512'
    };

    var italicIcon = {
        name: 'italic',
        content: '<path d="m377.2 128 6.8-32H198.8l-6.8 32h59.2l-54.4 256h-62l-6.8 32h185.2l6.8-32h-59.2l54.4-256h62z" />',
        viewBox: '0 0 512 512'
    };

    var underlineIcon = {
        name: 'underline',
        content: '<path d="M128 416h256v32H128v-32zM320 64v224c0 11.6-3.5 16-10.3 20.3-11.8 7.4-31.3 11.7-53.7 11.7s-41.9-4.3-53.7-11.7c-6.8-4.3-10.3-8.7-10.3-20.3V64h-64v224c0 70.4 64.3 96 128 96s128-25.6 128-96V64h-64z" />',
        viewBox: '0 0 512 512'
    };

    var fontFamilyIcon = {
        name: 'font-family',
        content: '<path d="M224 416V160h-95l-.8-64H384v64h-96v256h-64z" />',
        viewBox: '0 0 512 512'
    };

    var foregroundColorIcon = {
        name: 'foreground-color',
        content: '<path d="M299.5 96h-87.1L96 416h64l23.3-64h145.4l23.3 64h64L299.5 96zm-92.9 192L256 152.2 305.4 288h-98.8z" />',
        viewBox: '0 0 512 512'
    };

    var convertLowercaseIcon = {
        name: 'convert-lowercase',
        content: '<path d="M480.1 416H436v-36h-.7c-13.8 24-34.1 36-60.8 36-19.7 0-35.1-5.3-46.3-16-11.1-10.7-16.7-24.9-16.7-42.5 0-37.8 21.7-59.9 65.3-66.2l59.4-8.4c0-28.6-13.5-42.8-40.7-42.8-23.8 0-45.4 8.2-64.5 24.7V225c21.1-12.5 45.5-18.8 73.1-18.8 50.6 0 75.9 25 75.9 74.8v135h.1zM436 313.1l-42 5.9c-13 1.7-22.8 4.9-29.4 9.5s-9.9 12.7-9.9 24.3c0 8.5 3 15.4 9.1 20.8s14.2 8.1 24.3 8.1c13.8 0 25.2-4.8 34.3-14.5 9-9.7 13.6-21.9 13.6-36.6v-17.5zM240 416h48L184 96h-48L32 416h48l26-80h108l26 80zM121.6 288 160 169.8 198.4 288h-76.8z" />',
        viewBox: '0 0 512 512'
    };

    var convertUppercaseIcon = {
        name: 'convert-uppercase',
        content: '<path d="M200.1 416H156v-36h-.7c-13.8 24-34.1 36-60.8 36-19.7 0-35.1-5.3-46.3-16-11.1-10.7-16.7-24.9-16.7-42.5 0-37.8 21.7-59.9 65.3-66.2l59.4-8.4c0-28.6-13.5-42.8-40.7-42.8-23.8 0-45.4 8.2-64.5 24.7V225c21.1-12.5 45.5-18.8 73.1-18.8 50.6 0 75.9 25 75.9 74.8v135h.1zM157 313.1l-42 5.9c-13 1.7-22.8 4.9-29.4 9.5s-9.9 12.7-9.9 24.3c0 8.5 3 15.4 9.1 20.8s14.2 8.1 24.3 8.1c13.8 0 25.2-4.8 34.3-14.5 9-9.7 13.6-21.9 13.6-36.6v-17.5zM432 416h48L376 96h-48L224 416h48l26-80h108l26 80zM313.6 288 352 169.8 390.4 288h-76.8z" />',
        viewBox: '0 0 512 512'
    };

    var strikethroughIcon = {
        name: 'strikethrough',
        content: '<path d="M393.9 320c.1-23.9 4.5-41.4 13.5-52.5 9.1-11.1 20.8-16.7 35.3-16.7 9.6 0 17.7 3.1 24.5 9.3 6.8 6.2 11.4 15.4 14.1 27.7l27.9-4.7c-3.3-18.4-10.8-32.7-22.5-42.7s-26.8-15-45.2-15c-14.5 0-28.1 3.6-40.4 11.1-12.4 7.4-21.6 18.5-27.7 33.2-5.9 14.4-8.9 31.2-9.1 50.4h-25.5v-2.2c0-13.2-1.7-25.6-5.1-37.1-3.4-11.5-8.1-21.4-14.2-29.6-6-8.1-13.7-14.5-23-19s-19.2-6.8-29.6-6.8c-18.9 0-34.3 8.2-46.4 24.6v-90H192v160h-45v-25.8c0-13.7-.5-23.3-1.4-28.5-1.7-8.5-4.7-15.5-9-21.1-4.3-5.5-10.9-10.2-19.9-13.8-9-3.6-20.8-5.5-35.3-5.5-14.6 0-27.4 2.1-38.5 6.4-11.1 4.3-19.5 10.4-25.4 18.4-5.8 8-10 18.4-12.6 31.4l28.1 4.1c3.1-13 7.8-22 14.3-27.1s16.4-7.7 29.9-7.7c14.5 0 25.4 3.5 32.7 10.5 5.4 5.1 8.1 14 8.1 26.6 0 1.1 0 3.8-.2 8.1-11 4.1-28 7.7-51.2 10.7-11.4 1.5-19.9 3-25.5 4.7-6.7 2-12.9 4.9-18.5 8.6H0v32h1.2c-.8 3.8-1.2 7.7-1.2 11.8 0 15.2 5 27.8 15 37.6S39.3 416 57.9 416c11.3 0 21.8-1.9 31.6-6s20.1-10.9 30.7-20.6h.1c.8 8.6 2.7 20.3 5.7 26.7h30c-3.6-7-6-18.4-7.3-26.1-1-6-1.6-18.7-1.8-37.9h45v64h26.6V389c11.4 18 27.1 27 47.1 27 20.1 0 37.3-8.5 51.7-25.6 8.6-10.2 14.6-23 18-38.3h31.8c3.3 16 9.4 29.2 18.3 39.5 14.1 16.3 32.7 24.5 55.9 24.5 18.5 0 34.1-6 46.8-17.8 12.1-11.3 19.8-26.7 23.2-46.2h.5v-32H393.9zm-280.7 42.6c-4.1 9-10.4 16.1-19 21.4-8.6 5.2-18.4 7.8-29.5 7.8-11.2 0-19.6-2.8-25.4-8.2-5.8-5.6-8.7-12.4-8.7-20.7 0-3.9.7-7.5 2.1-10.9h83.6c-.7 4.1-1.8 7.7-3.1 10.6zm105.1-43.3c0-22.2 4.6-39.2 13.7-50.9 9.1-11.8 20-17.6 32.5-17.6s23.1 5.6 31.8 17c8.8 11.3 13.1 28.7 13.2 52.3h-91.3c.1-.3.1-.6.1-.8zm77.6 53.6c-9.1 11.8-20 17.7-32.5 17.7-15.5 0-27.7-8-36.7-23.9-2.2-3.9-4-8.8-5.3-14.7H306c-2.4 8.3-5.7 15.3-10.1 20.9zm173.5 6.6c-7.5 7.5-16.9 11.2-28.2 11.2-14 0-25.4-5.6-34.1-16.7-4.4-5.6-7.7-12.9-9.9-21.9h85.5c-2.6 11.9-7 21.1-13.3 27.4z" />',
        viewBox: '0 0 512 512'
    };

    var subscriptIcon = {
        name: 'subscript',
        content: '<path d="m198.6 304 89.4 89.4-22.6 22.6-89.4-89.4L86.6 416 64 393.4l89.4-89.4L64 214.6 86.6 192l89.4 89.4 89.4-89.4 22.6 22.6-89.4 89.4zm167.7 144h81.4v32H320v-11.9c0-8 1.7-15.3 5-21.7 3.3-6.4 7.5-12.1 12.5-17.2s10.5-9.6 16.4-13.5c5.9-3.9 11.6-7.4 16.9-10.6 5.6-3.3 10.6-6.4 14.8-9.4 4.2-3 7.8-6 10.7-8.9 2.9-3 5.1-6 6.5-9 1.4-3 2.1-6.3 2.1-9.7 0-6.7-2.3-11.8-7-15.3-4.6-3.4-11.7-5.2-21.3-5.2-16.5 0-32.3 5.4-47.4 16.1v-30.5c16.7-8.9 35.5-13.3 56.5-13.3 9.7 0 18.5 1 26.2 3.1 7.7 2.1 14.3 5.1 19.6 8.9 5.4 3.9 9.4 8.6 12.3 14.1 2.8 5.5 4.2 11.7 4.2 18.5 0 7.2-1.4 13.7-4.1 19.3-2.7 5.6-6.3 10.8-10.8 15.4-4.5 4.6-9.7 8.8-15.6 12.7-5.9 3.8-12 7.6-18.3 11.1-4.3 2.5-8.4 5-12.4 7.4-4 2.5-7.5 4.9-10.5 7.2-3.1 2.6-7.1 6.6-10 10.4z" />',
        viewBox: '0 0 512 512'
    };

    var supscriptIcon = {
        name: 'supscript',
        content: '<path d="m198.6 304 89.4 89.4-22.6 22.6-89.4-89.4L86.6 416 64 393.4l89.4-89.4L64 214.6 86.6 192l89.4 89.4 89.4-89.4 22.6 22.6-89.4 89.4zm167.7-112h81.4v32H320v-11.9c0-8 1.7-15.3 5-21.7s7.5-12.1 12.5-17.2 10.5-9.6 16.4-13.5 11.6-7.4 16.9-10.6c5.6-3.3 10.6-6.4 14.8-9.4 4.2-3 7.8-6 10.7-8.9 2.9-3 5.1-6 6.5-9s2.1-6.3 2.1-9.7c0-6.7-2.3-11.8-7-15.3-4.6-3.4-11.7-5.2-21.3-5.2-16.5 0-32.3 5.4-47.4 16.1V77.3c16.7-8.9 35.5-13.3 56.5-13.3 9.7 0 18.5 1 26.2 3.1s14.3 5.1 19.6 8.9c5.4 3.9 9.4 8.6 12.3 14.1 2.8 5.5 4.2 11.7 4.2 18.5 0 7.2-1.4 13.7-4.1 19.3-2.7 5.6-6.3 10.8-10.8 15.4-4.5 4.6-9.7 8.8-15.6 12.7-5.9 3.8-12 7.6-18.3 11.1-4.3 2.5-8.4 5-12.4 7.4-4 2.5-7.5 4.9-10.5 7.2-3.1 2.5-7.1 6.5-10 10.3z" />',
        viewBox: '0 0 512 512'
    };

    var divIcon = {
        name: 'div',
        content: '<path d="M0 416v-6h7.1c7.9 0 13.6-3 16.9-9.1 2-3.6 3-11.8 3-24.5V231.6c0-14-1.3-22.8-3.9-26.3-3.6-4.9-9-7.3-16.1-7.3H0v-6h77.6c28.5 0 50.2 3.8 65 11.4 14.9 7.6 26.8 20.3 35.8 38 9 17.7 13.6 38.2 13.6 61.5 0 31.2-8.1 57.2-24.2 78.1-18.1 23.3-45.6 35-82.6 35H0zm54-16.2c11.9 3.1 21.9 4.6 29.9 4.6 21.7 0 39.8-9 54.1-26.9 14.3-17.9 21.5-42.3 21.5-73 0-30.9-7.2-55.3-21.5-73.2-14.3-17.8-32.8-26.8-55.2-26.8-8.4 0-18 1.6-28.8 4.8v190.5zM298 410v6h-83v-6h6.7c7.8 0 13.5-2.7 17-8.1 2.2-3.5 3.3-12 3.3-25.5V231.6c0-11.4-.6-18.9-1.8-22.5-.9-2.8-2.8-5.1-5.7-7.1-4.1-2.6-8.4-4-12.8-4H215v-6h83v6h-7c-7.9 0-13.7 2.7-17.4 8.1-2.4 3.5-3.6 12-3.6 25.5v144.9c0 11.4.6 18.9 1.9 22.5 1 2.8 3 5.1 6 7.1 4.1 2.6 8.5 4 13.1 4h7zm214-218v6c-6.4 1.4-11.3 3.9-14.6 7.4-4.7 5.3-8.9 13.4-12.6 24.2L421.6 416h-4.9l-67.9-188.8c-3.5-9.7-5.9-15.6-7.4-17.8-2.2-3.3-5-5.9-8.2-7.8-3.3-1.9-7.6-3.1-13.2-3.6v-6h74v6c-8.4 1-13.8 2.7-16.3 5.2s-3.7 5.7-3.7 9.5c0 5.4 2 13.8 6.1 25.2l46.1 128.4L469 239.5c4.2-12.5 6.3-21.2 6.3-26 0-3.1-1.3-6.1-3.9-9-2.6-2.9-6.9-4.9-13.1-6.1-.4-.1-1.2-.3-2.3-.5v-6h56zm0-96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var allIcon = {
        name: 'all',
        content: '<path d="M120.1 343H52l-12 34.4c-2.9 8.5-4.4 14.8-4.4 19 0 3.3 1.3 6.2 3.8 8.8s8.1 4.2 16.5 4.9v5.9H0v-6c7.4-1.6 12.2-3.7 14.4-6.3 4.4-5.2 9.4-15.7 14.8-31.5L91.4 192H96l61.6 182.2c5 14.6 9.5 24.1 13.5 28.5 4 4.4 9.7 6.8 16.9 7.3v6h-70v-5.9c7-.4 11.7-1.9 14.2-4.3 2.5-2.5 3.7-5.5 3.7-9 0-4.7-1.7-12.2-5.2-22.3L120.1 343zm-3.5-12-30-88.5L55.8 331h60.8zm227.7 23.1 4.3 1.2-15.1 60.7H197v-6h6.5c7.4 0 12.6-3.1 15.8-9.3 1.8-3.5 2.7-11.7 2.7-24.5V222.7c0-14-1.2-13.9-3.6-17.5-3.3-4.9-8.3-7.3-14.9-7.3H196v-6h80v6.1s-15.4 1-19.2 3.3c-3.8 2.3-6.4 5.2-7.8 8.8-1.4 3.5-2.1 3.1-2 16.5v149.6c-.1 9.1.6 15.4 2 18.8 1 2.3 2.7 4 4.8 5.1 2.2 1.1 9 1.7 20.4 1.9h12.9c13.6-.2 23.1-1.5 28.6-4s10.5-7 15-13.5 9.1-16.6 13.6-30.4zm163.4 0 4.3 1.2-15.1 60.7H360v-6h6.5c7.4 0 12.6-3.1 15.8-9.3 1.8-3.5 2.7-11.7 2.7-24.5V222.7c0-14-1.2-13.9-3.6-17.5-3.3-4.9-8.3-7.3-14.9-7.3H360v-6h80v6.1s-16.1 1-19.9 3.3-6.4 5.2-7.8 8.8c-1.4 3.5-2.1 3.1-2.4 16.5v149.6c.3 9.1 1 15.4 2.4 18.8 1 2.3 2.7 4 4.8 5.1s9 1.7 20.4 1.9h12.9c13.6-.2 23.1-1.5 28.6-4s10.5-7 15-13.5 9.2-16.6 13.7-30.4zM512 96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h1Icon = {
        name: 'h1',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm192-69.9 63-26.1h1v185.3c0 12.3.5 20 1.5 23s3.2 5.3 6.4 7 14.1 2.5 24.1 2.8v6h-96v-6c10.4-.2 20.9-1.1 23.9-2.7s5.1-3.7 6.3-6.3c1.2-2.6 1.8-10.5 1.8-23.7V258.8c0-16-.5-26.2-1.6-30.8-.8-3.5-2.1-6-4.1-7.6-2-1.6-4.4-2.4-7.2-2.4-4 0-9.5 1.7-16.7 5l-2.4-4.9zM512 96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h2Icon = {
        name: 'h2',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm336 86-15.3 42H320v-5.5c38.2-34.9 65.1-63.3 80.7-85.4 15.6-22.1 23.4-42.3 23.4-60.6 0-14-4.3-25.4-12.8-34.4-8.6-9-18.8-13.5-30.7-13.5-10.8 0-20.5 3.2-29.1 9.5-8.6 6.3-15 15.6-19.1 27.8h-6c2.7-20 9.7-35.4 20.9-46.1 11.2-10.7 25.2-16.1 42-16.1 17.9 0 32.8 5.7 44.7 17.2 12 11.5 17.9 25 17.9 40.6 0 11.1-2.6 22.3-7.8 33.4-8 17.5-21 36.1-39 55.7-27 29.4-43.8 47.2-50.5 53.3h56.9c11.8 0 20-.4 24.8-1.3 4.7-.9 9-2.6 12.8-5.3 3.8-2.7 7.1-6.5 10-11.4l4.9.1zm48-278H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h3Icon = {
        name: 'h3',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm195.6-50.6c6.4-14.5 14.5-25.7 24.3-33.6 9.8-7.9 22-11.9 36.6-11.9 18 0 31.9 5.6 41.5 16.9 7.3 8.4 11 17.3 11 26.9 0 15.7-10.3 31.9-30.9 48.7 13.8 5.2 24.3 12.6 31.4 22.3 7.1 9.7 10.6 21 10.6 34 0 18.7-6.2 34.8-18.6 48.5-16.2 17.8-39.6 26.7-70.2 26.7-15.2 0-25.5-1.8-31-5.4s-8.2-7.5-8.2-11.6c0-3.1 1.3-5.8 3.9-8.1 2.6-2.3 5.7-3.5 9.4-3.5 2.8 0 5.6.4 8.5 1.3 1.9.5 6.1 2.5 12.8 5.8 6.6 3.3 11.2 5.3 13.8 6 4.1 1.2 8.5 1.8 13.1 1.8 11.3 0 21.1-4.2 29.5-12.6s12.5-18.3 12.5-29.8c0-8.4-1.9-16.5-5.8-24.5-2.9-5.9-6-10.4-9.5-13.5-4.8-4.2-11.3-8.1-19.6-11.5s-16.8-5.2-25.4-5.2H358v-4.8c8.7-1.1 17.5-4.1 26.3-9.1s15.2-11 19.2-18 6-14.7 6-23.1c0-10.9-3.6-19.8-10.7-26.5s-16-10.1-26.6-10.1c-17.2 0-31.5 8.8-43 26.4l-5.6-2.5zM512 96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h4Icon = {
        name: 'h4',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm341 47v23h-29v58h-27v-58h-93v-20.7L422.1 192H440v143h29zm-56 0V226.1L336 335h77zm99-239H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h5Icon = {
        name: 'h5',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm320-96-12.6 28h-66L355 249.1c28.6 4.2 51.2 14.9 68 32 14.3 14.7 21.5 32 21.5 51.9 0 11.6-2.3 22.3-7 32.1s-10.6 18.2-17.7 25.2c-7.1 6.9-15 12.5-23.8 16.7-12.4 6-25.1 8.9-38.2 8.9-13.2 0-22.7-2.2-28.7-6.7s-9-9.4-9-14.9c0-3 1.2-5.7 3.7-8s5.6-3.5 9.4-3.5c2.8 0 5.3.4 7.4 1.3 2.1.9 5.7 3.1 10.8 6.7 8.1 5.6 16.3 8.4 24.6 8.4 12.6 0 23.7-4.8 33.3-14.4s14.3-21.2 14.3-35c0-13.3-4.3-25.7-12.8-37.3-8.5-11.5-20.3-20.4-35.3-26.7-11.8-4.9-27.8-7.7-48.1-8.4l42.1-85.5H448zm64-96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var h6Icon = {
        name: 'h6',
        content: '<path d="M128 288h96v-57c0-11.2-.7-18.6-2.1-22.2-1.1-2.7-3.3-5-6.8-7-4.6-2.6-10.1-3.9-15.3-3.9H192v-6h96v6h-7.7c-5.1 0-10 1.2-14.5 3.7-3.4 1.7-5.7 4.3-7 7.8-1.2 3.5-1.8 10.7-1.8 28.3V384c0 4.3.7 11.6 2.1 15.2 1.1 2.7 3.2 5 6.6 7 4.7 2.6 9.6 3.9 14.7 3.9h7.7v6h-96v-6h7.7c9 0 16.2-2.6 20.3-7.9 2.7-3.5 4.1-11.8 4.1-24.9V304h-96v73.1c0 11.1.7 18.4 2.1 22 1.1 2.7 3.4 5 6.8 7 4.7 2.6 9.6 3.9 14.8 3.9h8.3v6H64v-6h7.8c9.1 0 16.2-2.6 20.3-7.9 2.6-3.5 3.9-11.8 3.9-18.1V237.9c0-18.1-.7-25.5-2.1-29-1.1-2.7-3.3-5-6.6-7-4.8-2.6-10.3-3.9-15.5-3.9H64v-6h96v6h-8c-5.3 0-10.2 1.2-14.9 3.7-3.4 1.7-5.7 4.3-7.1 7.8-1.3 3.5-2 10.7-2 21.4V288zm316-96v5.9c-13.1 1.4-23.9 4.2-32.2 8.4s-16.5 10.6-24.6 19.2c-8.1 8.6-14.8 18.2-20.2 28.7-5.3 10.6-9.8 23.1-13.4 37.6 14.3-10.5 28.7-15.8 43.2-15.8 13.8 0 25.8 5.9 36 17.8S448 321 448 339.6c0 18-5.1 34.5-15.4 49.3-12.3 18-28.7 27-49 27-13.8 0-25.6-4.9-35.2-14.6-18.9-19-28.4-43.6-28.4-73.8 0-19.3 3.6-37.7 10.9-55s17.6-32.8 31.1-46.3 26.4-22.5 38.8-27.2 23.8-7 34.5-7h8.7zm-92.9 111.4c-1.8 14.3-2.7 25.9-2.7 34.7 0 10.2 1.8 21.2 5.3 33.2 3.5 11.9 8.8 21.4 15.8 28.4 5.1 5 11.3 7.5 18.5 7.5 8.7 0 16.4-4.3 23.2-13 6.8-8.7 10.2-21.1 10.2-37.2 0-18.1-3.4-33.8-10.2-47.1S394.8 290 382.4 290c-3.8 0-7.8.8-12.2 2.5-4.3 1.6-10.7 5.2-19.1 10.9zM512 96H0v32h512V96z" />',
        viewBox: '0 0 512 512'
    };

    var listOrderedIcon = {
        name: 'list-ordered',
        content: '<path d="M192 64h288v32H192V64zm0 160h288v32H192v-32zm0 160h288v32H192v-32zM96 32v128H64V64c-1.5 1.3-14.9 7.8-22.1 10V50.8c7.2-2.1 13.9-4.8 20.3-8 6.3-3.3 12.1-6.8 17.2-10.7L96 32zM66.7 297h61.1v23H32v-9.5c0-6.4 1.2-12.2 3.7-17.3 2.5-5.1 5.6-9.7 9.3-13.8 3.7-4.1 7.8-7.7 12.3-10.8 4.5-3.1 8.7-6 12.7-8.5 4.2-2.6 7.9-5.1 11.1-7.6 3.2-2.4 5.9-4.8 8-7.2 2.2-2.4 3.8-4.8 4.9-7.2s1.6-5 1.6-7.8c0-5.4-1.7-9.5-5.2-12.2-3.5-2.8-8.8-4.1-16-4.1-12.4 0-24.2 4.3-35.5 12.9v-24.4c12.5-7.1 26.6-10.6 42.4-10.6 7.3 0 13.8.8 19.6 2.5 5.8 1.7 10.7 4.1 14.7 7.2 4 3.1 7.1 6.9 9.2 11.3 2.1 4.4 3.2 9.3 3.2 14.8 0 5.8-1 10.9-3.1 15.5-2 4.5-4.8 8.6-8.1 12.3-3.4 3.7-7.3 7.1-11.7 10.1-4.4 3.1-9 6-13.8 8.9-3.2 2-6.3 4-9.3 5.9-3 2-5.6 3.9-7.9 5.8s-4.1 3.8-5.4 5.6c-1.3 1.8-2 3.6-2 5.2zM32 473.8V450c10.1 6 21.8 9.1 35.3 9.1 8.5 0 15.1-1.5 19.8-4.5 4.7-3 7.1-7.2 7.1-12.5 0-5.5-2.9-9.8-8.8-12.8-5.8-3-13.9-4.5-24.1-4.5h-14V404h12.9c19.6 0 29.4-5.4 29.4-16.1 0-10.1-7.5-15.1-22.6-15.1-10.1 0-19.9 2.7-29.4 8v-22.3c10.6-4.4 22.9-6.6 37-6.6 15.4 0 27.4 2.8 36 8.5s12.9 13.1 12.9 22.2c0 16.2-10 26.3-29.9 30.4v.4c10.6 1.1 19 4.3 25.2 9.5 6.2 5.3 9.2 11.7 9.2 19.4 0 11.6-5.1 20.7-15.4 27.4S88.1 480 69.9 480c-15.5 0-28.2-2.1-37.9-6.2z" />',
        viewBox: '0 0 512 512'
    };

    var listUnorderedIcon = {
        name: 'list-unordered',
        content: '<path d="M192 64h288v32H192V64zm0 160h288v32H192v-32zm0 160h288v32H192v-32zM80 32c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm0 160c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm0 160c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z" />',
        viewBox: '0 0 512 512'
    };

    var indentIcon = {
        name: 'indent',
        content: '<path d="M480 64H32V32h448v32zm0 32H224v32h256V96zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H32v32h448v-32zM160 240 32 128v224l128-112z" />',
        viewBox: '0 0 512 512'
    };

    var outdentIcon = {
        name: 'outdent',
        content: '<path d="M480 64H32V32h448v32zm0 32H224v32h256V96zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H224v32h256v-32zm0 64H32v32h448v-32zm-320-64V128L32 240l128 112z" />',
        viewBox: '0 0 512 512'
    };

    var insertTopIcon = {
        name: 'insert-top',
        content: '<path d="M192 320h192v32H192v-32zm0-128h288v-32H192v32zm192 64H192v32h192v-32zM32 64v224l96-112L32 64z" />',
        viewBox: '0 0 512 512'
    };

    var insertMiddleIcon = {
        name: 'insert-middle',
        content: '<path d="M192 128h192v32H192v-32zm0 128h288v-32H192v32zm192 64H192v32h192v-32zM32 128v224l96-112-96-112z" />',
        viewBox: '0 0 512 512'
    };

    var insertBottomIcon = {
        name: 'insert-bottom',
        content: '<path d="M192 224h192v32H192v-32zm0 128h288v-32H192v32zm192-192H192v32h192v-32zM32 224v224l96-112-96-112z" />',
        viewBox: '0 0 512 512'
    };

    var alignTopIcon = {
        name: 'align-top',
        content: '<path d="M480 64H32V32h448v32zm-64 32H96v32h320V96zm64 64H32v32h448v-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignMiddleIcon = {
        name: 'align-middle',
        content: '<path d="M480 192H32v-32h448v32zm-64 32H96v32h320v-32zm64 64H32v32h448v-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignBottomIcon = {
        name: 'align-bottom',
        content: '<path d="M480 352H32v-32h448v32zm-64 32H96v32h320v-32zm64 64H32v32h448v-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignLeftIcon = {
        name: 'align-left',
        content: '<path d="M448 96H64V64h384v32zm-96 32H64v32h288v-32zm96 64H64v32h384v-32zm-96 64H64v32h288v-32zm96 64H64v32h384v-32zm-96 64H64v32h288v-32z" />',
        viewBox: '0 0 512 512'
    };

    var alignCenterIcon = {
        name: 'align-center',
        content: '<path d="M448 96H64V64h384v32zm-64 64H128v-32h256v32zm64 64H64v-32h384v32zm-64 64H128v-32h256v32zm64 64H64v-32h384v32zm-64 64H128v-32h256v32z" />',
        viewBox: '0 0 512 512'
    };

    var alignRightIcon = {
        name: 'align-right',
        content: '<path d="M64 192h384v32H64v-32zm384-96V64H64v32h384zm-288 64h288v-32H160v32zM64 320v32h384v-32H64zm96-32h288v-32H160v32zm0 96v32h288v-32H160z" />',
        viewBox: '0 0 512 512'
    };

    var alignJustifyIcon = {
        name: 'align-justify',
        content: '<path d="M448 160H64v-32h384v32zm0-96H64v32h384V64zM64 352h384v-32H64v32zm0-64h384v-32H64v32zm0-64h384v-32H64v32zm0 192h384v-32H64v32z" />',
        viewBox: '0 0 512 512'
    };

    var alignRemoveIcon = {
        name: 'align-remove',
        content: '<path d="m78.9 192 32 32H64v-32h14.9zM64 288h110.9l-32-32H64v32zm0 64h174.9l-32-32H64v32zm0 32v32h238.9l-32-32H64zm393.4 96 22.6-22.6-41.4-41.4h9.4v-32h-41.4l-32-32H448v-32H342.6l-32-32H448v-32H278.6l-32-32H448v-32H214.6l-32-32H448v-32H150.6l-32-32H448V64H86.6l-32-32L32 54.6" />',
        viewBox: '0 0 512 512'
    };

    var textWrapIcon = {
        name: 'text-wrap',
        content: '<path d="M480 96v32H96V96h384zM352 256v224H32V256h320zm-32 32H64v160h256V288zm-32 32H96v32h192v-32zm0 96v-32H96v32h192zM64 64h288V32H32v160h320v-32H64V64z" />',
        viewBox: '0 0 512 512'
    };

    var horizontalRuleIcon = {
        name: 'horizontal-rule',
        content: '<path d="M320 96H32V64h288v32zm96 32H32v32h384v-32zm64 96H32v64h448v-64zM320 352H32v32h288v-32zm96 64H32v32h384v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignTopLeftIcon = {
        name: 'table-align-top-left',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm32 64h192V64H96v32zm0 64h320v-32H96v32zm0 64h192v-32H96v32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignTopCenterIcon = {
        name: 'table-align-top-center',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm288 32H160v32h192V64zm64 64H96v32h320v-32zm-64 64H160v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignTopRightIcon = {
        name: 'table-align-top-right',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm352 32H224v32h192V64zm0 64H96v32h320v-32zm0 64H224v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignMiddleLeftIcon = {
        name: 'table-align-middle-left',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm32 160h192v-32H96v32zm0 64h320v-32H96v32zm0 64h192v-32H96v32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignMiddleCenterIcon = {
        name: 'table-align-middle-center',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm288 128H160v32h192v-32zm64 64H96v32h320v-32zm-64 64H160v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignMiddleRightIcon = {
        name: 'table-align-middle-right',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm352 128H224v32h192v-32zm0 64H96v32h320v-32zm0 64H224v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignBottomLeftIcon = {
        name: 'table-align-bottom-left',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm32 256h192v-32H96v32zm0 64h320v-32H96v32zm0 64h192v-32H96v32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignBottomCenterIcon = {
        name: 'table-align-bottom-center',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm288 224H160v32h192v-32zm64 64H96v32h320v-32zm-64 64H160v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignBottomRightIcon = {
        name: 'table-align-bottom-right',
        content: '<path d="M32 480V0h448v480H32zM64 32v416h384V32H64zm352 224H224v32h192v-32zm0 64H96v32h320v-32zm0 64H224v32h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAlignRemoveIcon = {
        name: 'table-align-remove',
        content: '<path d="M32 0v480h448V0H32zm416 448H64V32h384v416zM131.6 224l29.9 32H128v-32h3.6zm-3.6 64h63.4l29.9 32H128v-32zm123.1 64 29.9 32H128v-32h123.1zM96 92l22.6-22.6L143.5 96H384v32H173.4l29.9 32H384v32H233.1l29.9 32h121v32h-91.2l29.9 32H384v32h-31.4l63.4 68-22.6 22.6L96 92z" />',
        viewBox: '0 0 512 512'
    };

    var bordersAllIcon = {
        name: 'borders-all',
        content: '<path d="M32 32v416h416V32H32zm32 32h160v160H64V64zm0 352V256h160v160H64zm352 0H256V256h160v160zm0-192H256V64h160v160z" />',
        viewBox: '0 0 512 512'
    };

    var bordersOutsideIcon = {
        name: 'borders-outside',
        content: '<path d="M128 256H96v-32h32v32zm64-32h-32v32h32v-32zm64 0h-32v32h32v-32zm0-64h-32v32h32v-32zm0-64h-32v32h32V96zm0 256h-32v32h32v-32zm0-64h-32v32h32v-32zm64-64h-32v32h32v-32zm64 0h-32v32h32v-32zm64-192v416H32V32h416zm-32 32H64v352h352V64z" />',
        viewBox: '0 0 512 512'
    };

    var bordersInsideIcon = {
        name: 'borders-inside',
        content: '<path d="M64 64H32V32h32v32zm0 32H32v32h32V96zm0 64H32v32h32v-32zm0 128H32v32h32v-32zm0 64H32v32h32v-32zM448 96h-32v32h32V96zm0 64h-32v32h32v-32zm0 128h-32v32h32v-32zm0 64h-32v32h32v-32zM128 32H96v32h32V32zm64 0h-32v32h32V32zM64 416H32v32h32v-32zm64 0H96v32h32v-32zm64 0h-32v32h32v-32zm128 0h-32v32h32v-32zm64 0h-32v32h32v-32zm64 0h-32v32h32v-32zM320 32h-32v32h32V32zm64 0h-32v32h32V32zm64 0h-32v32h32V32zm0 192H256V32h-32v192H32v32h192v192h32V256h192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var bordersInsideHorizontalIcon = {
        name: 'borders-inside-horizontal',
        content: '<path d="M448 224v32H32v-32h416zM64 32H32v32h32V32zm0 96H32V96h32v32zm0 64H32v-32h32v32zm0 128H32v-32h32v32zm0 64H32v-32h32v32zm384-256h-32V96h32v32zm0 64h-32v-32h32v32zm0 128h-32v-32h32v32zm0 64h-32v-32h32v32zM128 64H96V32h32v32zm64 0h-32V32h32v32zm64 0h-32V32h32v32zm0 64h-32V96h32v32zm0 64h-32v-32h32v32zm0 128h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zM64 416H32v32h32v-32zm64 32H96v-32h32v32zm64 0h-32v-32h32v32zm128-32h-32v32h32v-32zm64 32h-32v-32h32v32zm64 0h-32v-32h32v32zM320 32h-32v32h32V32zm64 32h-32V32h32v32zm64 0h-32V32h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var bordersInsideVerticalIcon = {
        name: 'borders-inside-vertical',
        content: '<path d="M256 448h-32V32h32v416zM448 64V32h-32v32h32zm-96 0V32h32v32h-32zm-64 0V32h32v32h-32zm-128 0V32h32v32h-32zm-64 0V32h32v32H96zm256 384v-32h32v32h-32zm-64 0v-32h32v32h-32zm-128 0v-32h32v32h-32zm-64 0v-32h32v32H96zm320-320V96h32v32h-32zm0 64v-32h32v32h-32zm0 64v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-128 0v-32h32v32h-32zm-64 0v-32h32v32H96zm-64 0v-32h32v32H32zM64 64V32H32v32h32zm-32 64V96h32v32H32zm0 64v-32h32v32H32zm32 128v-32H32v32h32zm-32 64v-32h32v32H32zm0 64v-32h32v32H32zm416-128v-32h-32v32h32zm-32 64v-32h32v32h-32zm0 64v-32h32v32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var borderTopIcon = {
        name: 'border-top',
        content: '<path d="M448 32v32H32V32h416zM64 96H32v32h32V96zm0 96H32v-32h32v32zm0 64H32v-32h32v32zm0 64H32v-32h32v32zm0 64H32v-32h32v32zm384-192h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zM128 256H96v-32h32v32zm64 0h-32v-32h32v32zm64-128h-32V96h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zm0 64h-32v-32h32v32zM64 416H32v32h32v-32zm64 32H96v-32h32v32zm64 0h-32v-32h32v32zm128-32h-32v32h32v-32zm64 32h-32v-32h32v32zm64 0h-32v-32h32v32zM320 224h-32v32h32v-32zm64 32h-32v-32h32v32zm64-128h-32V96h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var borderBottomIcon = {
        name: 'border-bottom',
        content: '<path d="M32 448v-32h416v32H32zm32-96H32v32h32v-32zm0-32H32v-32h32v32zm0-64H32v-32h32v32zm0-64H32v-32h32v32zm0-64H32V96h32v32zm384 192h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32V96h32v32zM128 256H96v-32h32v32zm64 0h-32v-32h32v32zm64 128h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32v-32h32v32zm0-64h-32V96h32v32zm0-64h-32V32h32v32zM64 32H32v32h32V32zm64 32H96V32h32v32zm64 0h-32V32h32v32zm128-32h-32v32h32V32zm64 32h-32V32h32v32zm64 0h-32V32h32v32zM320 224h-32v32h32v-32zm64 32h-32v-32h32v32zm64 128h-32v-32h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var borderLeftIcon = {
        name: 'border-left',
        content: '<path d="M32 32h32v416H32V32zm96 32V32H96v32h32zm32 0V32h32v32h-32zm64 0V32h32v32h-32zm64 0V32h32v32h-32zm64 0V32h32v32h-32zM160 448v-32h32v32h-32zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zM224 128V96h32v32h-32zm0 64v-32h32v32h-32zM96 256v-32h32v32H96zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zm64 0v-32h32v32h-32zm32-192V32h-32v32h32zm-32 64V96h32v32h-32zm0 64v-32h32v32h-32zm32 128v-32h-32v32h32zm-32 64v-32h32v32h-32zm0 64v-32h32v32h-32zM256 320v-32h-32v32h32zm-32 64v-32h32v32h-32zM96 448v-32h32v32H96z" />',
        viewBox: '0 0 512 512'
    };

    var borderRightIcon = {
        name: 'border-right',
        content: '<path d="M448 448h-32V32h32v416zM384 64V32h-32v32h32zm-96 0V32h32v32h-32zm-64 0V32h32v32h-32zm-64 0V32h32v32h-32zm-64 0V32h32v32H96zm192 384v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32H96zm128-320V96h32v32h-32zm0 64v-32h32v32h-32zm128 64v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32H96zm-64 0v-32h32v32H32zM64 64V32H32v32h32zm-32 64V96h32v32H32zm0 64v-32h32v32H32zm32 128v-32H32v32h32zm-32 64v-32h32v32H32zm0 64v-32h32v32H32zm224-128v-32h-32v32h32zm-32 64v-32h32v32h-32zm128 64v-32h32v32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var bordersNoneIcon = {
        name: 'borders-none',
        content: '<path d="M384 64V32h-32v32h32zm-96 0V32h32v32h-32zm-64 0V32h32v32h-32zm-64 0V32h32v32h-32zm-64 0V32h32v32H96zm192 384v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32H96zm128-320V96h32v32h-32zm0 64v-32h32v32h-32zm128 64v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32h-32zm-64 0v-32h32v32H96zm-64 0v-32h32v32H32zM64 64V32H32v32h32zm-32 64V96h32v32H32zm0 64v-32h32v32H32zm32 128v-32H32v32h32zm-32 64v-32h32v32H32zm0 64v-32h32v32H32zm384-192v-32h32v32h-32zm32-192V32h-32v32h32zm-32 64V96h32v32h-32zm0 64v-32h32v32h-32zm32 128v-32h-32v32h32zm-32 64v-32h32v32h-32zm0 64v-32h32v32h-32zM256 320v-32h-32v32h32zm-32 64v-32h32v32h-32zm128 64v-32h32v32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var bordersShowHideIcon = {
        name: 'borders-show-hide',
        content: '<path d="M64 448h128v32H32V32h448v128h-32V64H64v384zm384 0h-64v32h96v-96h-32v64zM160 288v-64H96v64h64zm64 0h64v-64h-64v64zm160-32v-32h-32v32h32zM288 96h-64v64h64V96zm0 384L160 352l45-45 83 83 147-147 45 45-192 192z" />',
        viewBox: '0 0 512 512'
    };

    var formIcon = {
        name: 'form',
        content: '<path d="M416 32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32H96V0H64v32H32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32V96h32V64h-32V32h-32zm0 384H64V64h352v352zm32 64v-32h32v32h-32zm32-448h-32V0h32v32zM0 448h32v32H0v-32zM32 0v32H0V0h32z" />',
        viewBox: '0 0 512 512'
    };

    var formElementIcon = {
        name: 'form-element',
        content: '<path d="M416 32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32H96V0H64v32H32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32V96h32V64h-32V32h-32zm0 384H64V64h352v352zm32 64v-32h32v32h-32zm32-448h-32V0h32v32zM0 448h32v32H0v-32zM32 0v32H0V0h32zm160 128H96v32h96v-32zm192 0H224v32h160v-32zm0 64H224v32h160v-32zm0 64H224v32h160v-32zm0 64H224v32h160v-32zm-192 0H96v32h96v-32zm0-64H96v32h96v-32zm0-64H96v32h96v-32z" />',
        viewBox: '0 0 512 512'
    };

    var codeSnippetIcon = {
        name: 'code-snippet',
        content: '<path d="M416 32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32h-32V0h-32v32H96V0H64v32H32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32H0v32h32v32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v32h32v-32h32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32v-32h32v-32h-32V96h32V64h-32V32h-32zm0 256v128H64V64h352v224zM32 0v32H0V0h32zM0 448h32v32H0v-32zm198.6-265.4L141.3 240l57.4 57.4L176 320l-80-80 80-80 22.6 22.6zM304 160l80 80-80 80-22.6-22.6 57.4-57.4-57.4-57.4L304 160zM480 32h-32V0h32v32zm-32 448v-32h32v32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var selectAllIcon = {
        name: 'select-all',
        content: '<path d="M448 448h32v32h-32v-32zm0-448h32v32h-32V0zM0 448h32v32H0v-32zM0 0h32v32H0V0zm448 384h32v32h-32v-32zm0-64h32v32h-32v-32zm0-64h32v32h-32v-32zm0-64h32v32h-32v-32zm0-64h32v32h-32v-32zm0-64h32v32h-32V64zM0 384h32v32H0v-32zm0-64h32v32H0v-32zm0-64h32v32H0v-32zm0-64h32v32H0v-32zm0-64h32v32H0v-32zm0-64h32v32H0V64zm128 384h32v32h-32v-32zm-64 0h32v32H64v-32zm128 0h32v32h-32v-32zm64 0h32v32h-32v-32zm64 0h32v32h-32v-32zm64 0h32v32h-32v-32zM64 0h32v32H64V0zm64 0h32v32h-32V0zm64 0h32v32h-32V0zm64 0h32v32h-32V0zm64 0h32v32h-32V0zm64 0h32v32h-32V0zm-96 64 53.4 53.4L240 218.9 138.6 117.4 192 64H64v128l53.5-53.5L218.9 240 117.5 341.5 64 288v128h128l-53.4-53.4L240 261.1l101.4 101.5L288 416h128V288l-53.5 53.5L261.1 240l101.4-101.5L416 192V64H288z" />',
        viewBox: '0 0 512 512'
    };

    var buttonIcon = {
        name: 'button',
        content: '<path d="m130.1 130.1 36.1 93.9H64c-17.6 0-32-14.4-32-32V64c0-17.6 14.4-32 32-32h384c17.6 0 32 14.4 32 32v128c0 17.6-14.4 32-32 32h-73.8l-244.1-93.9zM480 299 185.8 185.8 299 480l22.6-113.1L434.7 480l45.3-45.3-113.1-113.1L480 299z" />',
        viewBox: '0 0 512 512'
    };

    var selectBoxIcon = {
        name: 'select-box',
        content: '<path d="M384 352H128v-32h256v32zm0 32H128v32h256v-32zm0-128H128v32h256v-32zm96-192v128c0 17.6-14.4 32-32 32v224c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V224c-17.6 0-32-14.4-32-32V64c0-17.6 14.4-32 32-32h384c17.6 0 32 14.4 32 32zM352 96l32 64 32-64h-64zm64 128H96v224h320V224z" />',
        viewBox: '0 0 512 512'
    };

    var calendarDateIcon = {
        name: 'calendar-date',
        content: '<path d="M448 32h-64V0h-64v32H192V0h-64v32H64c-17.6 0-32 14.4-32 32v384c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32zm0 416-383.9.1-.1-.1V192h384v256zm0-288H64V64.1l.1-.1H128v32h64V64h128v32h64V64h63.9l.1.1V160zM192 270.6S171.9 288 142 288v-32c29.9 0 58-32 58-32h24v192h-32V270.6zM384 416H256v-14.2c0-9.7 1.6-18.4 4.8-26 3.3-7.7 7.3-14.6 12.2-20.7 4.8-6.1 10.2-11.5 15.9-16.2 5.7-4.7 11.3-8.9 16.4-12.7 5.5-3.9 10.3-7.7 14.4-11.3 4.2-3.6 7.6-7.2 10.4-10.7 2.8-3.5 4.9-7.1 6.3-10.8 1.4-3.6 2.1-7.5 2.1-11.7 0-8.1-2.3-14.1-6.8-18.4-4.5-4.1-11.5-6.2-20.7-6.2-16 0-31.5 6.4-46.1 19.4v-37.1c16.5-10.6 35-16.1 55.5-16.1 9.6 0 18.2 1.3 25.7 3.8 7.6 2.5 14.1 6.1 19.3 10.7s9.3 10.3 12.1 17c2.7 6.6 4.1 14.1 4.1 22.3 0 8.7-1.4 16.6-4 23.3-2.7 6.8-6.3 12.9-10.6 18.5-4.5 5.6-9.5 10.6-15.3 15.2-5.8 4.6-11.8 9.1-18 13.4-4.2 3-8.3 5.9-12.2 8.9-3.9 2.9-7.4 5.8-10.4 8.7-3 2.9-5.3 5.7-7.1 8.4-1.9 2.7-2.7 7.8-2.7 10.3H384V416z" />',
        viewBox: '0 0 512 512'
    };

    var groupBoxIcon = {
        name: 'group-box',
        content: '<path d="M144 81.6c-10.6-7.5-25.2-11.1-44.1-11.1-40.5 0-61.7 15-63.6 45.2h26.1c.7-16.8 12.8-25 36-25 11 0 19.2 1.6 24.4 4.8 2.6 1.6 4.6 3.3 6.2 5.1 1.5 1.9 2.5 4 3.2 6.6.7 2.6 1.2 5.6 1.4 9.4.1 3.6.1 8.2.1 13.6h-12.8c-59.4 0-89.1 17.2-89.1 51.4 0 6.4 1.3 12 3.8 17.2 2.5 5.3 6 9.7 10.4 13.4 4.4 3.8 9.7 6.6 16 8.7 6.1 2.2 12.8 3.2 20 3.2 20.9 0 38.2-6.2 51.7-18.6v17.9H160v-97.8c0-22.1-5.4-36.7-16-44zm-10.1 100.2c-2.3 3.3-5.1 6.2-8.4 9-3.2 2.6-6.8 4.9-10.7 6.8-3.9 1.9-8 3.3-12.2 4.3-4.2 1-8.6 1.4-12.8 1.4-9.6 0-17-2-22.5-5.9-5.5-4-8.3-9.8-8.3-17.2 0-20.7 18.9-30.9 56.9-30.9h18v32.5zM316 115.7c-2.7-9.3-6.6-17.2-11.8-23.8-5-6.4-11.4-11.5-18.7-15-7.5-3.4-16-5.2-25.5-5.2-16.4 0-30.2 6.9-41.7 20.5V32H192v192h26.2v-14.8c10.9 9.7 24.3 14.8 40 14.8 8.8 0 17-1.9 24.5-5.4 7.6-3.7 14.1-8.9 19.7-15.5 5.5-6.7 9.8-14.9 13-24.4 3-9.6 4.6-20.4 4.6-32.1 0-11.5-1.3-21.8-4-30.9zm-32.6 73.6c-6.6 9.5-15.6 14.2-26.8 14.2-14.5 0-27.4-5.9-38.4-17.8v-69.1c11.9-16.6 25-24.9 39.4-24.9 11.4 0 20 4.6 26.2 13.9 6.2 9.2 9.3 22.9 9.3 41 .1 18.9-3.2 33.3-9.7 42.7zM450 110c1.8 3.2 2.7 6.9 3 11.2h27c-.9-7.3-3.1-13.8-6.4-19.6-3.3-5.8-7.6-10.5-12.7-14.2-5.2-3.9-11.2-6.8-18-8.8-6.9-2-14.2-3-22.2-3-10.3 0-19.5 1.6-28 4.9-8.5 3.3-15.7 8.1-21.8 14.4-6 6.3-10.7 14.1-14 23.3-3.3 9.2-4.9 19.7-4.9 31.5 0 11.9 1.6 22.5 4.9 31.7 3.1 9.2 7.8 17 13.9 23.2 6 6.3 13.3 11.1 21.8 14.4 8.3 3.3 17.9 5 28.2 5 8 0 15.3-1 22.2-3 6.8-2 12.8-4.9 18-8.8 5.1-3.9 9.4-8.8 12.7-14.4 3.3-5.6 5.5-12.1 6.4-19.6h-27c-.3 4.2-1.2 7.9-3 11.2-1.8 3.2-4.2 5.9-7 8.1-3 2.2-6.3 3.9-10.1 4.9-3.9 1.2-7.9 1.7-12.2 1.7-6.3 0-11.9-1.2-17-3.5-5.2-2.3-9.7-5.8-13.4-10.4-3.7-4.5-6.6-10.2-8.5-17-2.1-6.8-3.1-14.7-3.1-23.6 0-9.1 1-17.1 3.1-23.9 2.1-6.9 5.1-12.5 8.8-17.1 3.7-4.5 8-7.8 13.3-10.1 5.1-2.3 10.7-3.5 16.8-3.5 4.3 0 8.3.6 12.2 1.7 3.9 1.2 7.2 2.7 10.1 4.9 2.8 2.4 5.2 5.1 6.9 8.4zM128 256h256v32H128v-32zm0 64h256v32H128v-32zm0 64h256v32H128v-32zm256 32H128v-32h256v32zm0-128H128v-32h256v32zm0 64H128v-32h256v32zm32-96h32v192c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V256h32v192h320V256z" />',
        viewBox: '0 0 512 512'
    };

    var textareaIcon = {
        name: 'textarea',
        content: '<path d="M448 448h-32V256h32v192zM194 334c1.8 3.2 2.7 6.9 3 11.2h27c-.9-7.3-3.1-13.8-6.4-19.6-3.3-5.8-7.6-10.5-12.7-14.2-5.2-3.9-11.2-6.8-18-8.8-6.9-2-14.2-3-22.2-3-10.3 0-19.5 1.6-28 4.9-8.5 3.3-15.7 8.1-21.8 14.4-6 6.3-10.7 14.1-14 23.3-3.3 9.2-4.9 19.7-4.9 31.5 0 11.9 1.6 22.5 4.9 31.7 3.1 9.2 7.8 17 13.9 23.2 6 6.3 13.3 11.1 21.8 14.4 8.3 3.3 17.9 5 28.2 5 8 0 15.3-1 22.2-3 6.8-2 12.8-4.9 18-8.8 5.1-3.9 9.4-8.8 12.7-14.4 3.3-5.6 5.5-12.1 6.4-19.6h-27c-.3 4.2-1.2 7.9-3 11.2-1.8 3.2-4.2 5.9-7 8.1-3 2.2-6.3 3.9-10.1 4.9-3.9 1.2-7.9 1.7-12.2 1.7-6.3 0-11.9-1.2-17-3.5-5.2-2.3-9.7-5.8-13.4-10.4-3.7-4.5-6.6-10.2-8.5-17-2.1-6.8-3.1-14.7-3.1-23.6 0-9.1 1-17.1 3.1-23.9 2.1-6.9 5.1-12.5 8.8-17.1 3.7-4.5 8-7.8 13.3-10.1 5.1-2.3 10.7-3.5 16.8-3.5 4.3 0 8.3.6 12.2 1.7 3.9 1.2 7.2 2.7 10.1 4.9 2.8 2.4 5.2 5.1 6.9 8.4zm14-252.4c-10.6-7.5-25.2-11.1-44.1-11.1-40.5 0-61.7 15-63.6 45.2h26.1c.7-16.8 12.8-25 36-25 11 0 19.2 1.6 24.4 4.8 2.6 1.6 4.6 3.3 6.2 5.1 1.5 1.9 2.5 4 3.2 6.6.7 2.6 1.2 5.6 1.4 9.4.1 3.6.1 8.2.1 13.6h-12.8c-59.4 0-89.1 17.2-89.1 51.4 0 6.4 1.3 12 3.8 17.2 2.5 5.3 6 9.7 10.4 13.4 4.4 3.8 9.7 6.6 16 8.7 6.1 2.2 12.8 3.2 20 3.2 20.9 0 38.2-6.2 51.7-18.6v17.9H224v-97.8c0-22.1-5.4-36.7-16-44zm-10.1 100.2c-2.3 3.3-5.1 6.2-8.4 9-3.2 2.6-6.8 4.9-10.7 6.8-3.9 1.9-8 3.3-12.2 4.3-4.2 1-8.6 1.4-12.8 1.4-9.6 0-17-2-22.5-5.9-5.5-4-8.3-9.8-8.3-17.2 0-20.7 18.9-30.9 56.9-30.9h18v32.5zM380 115.7c-2.7-9.3-6.6-17.2-11.8-23.8-5-6.4-11.4-11.5-18.7-15-7.5-3.4-16-5.2-25.5-5.2-16.4 0-30.2 6.9-41.7 20.5V32H256v192h26.2v-14.8c10.9 9.7 24.3 14.8 40 14.8 8.8 0 17-1.9 24.5-5.4 7.6-3.7 14.1-8.9 19.7-15.5 5.5-6.7 9.8-14.9 13-24.4 3-9.6 4.6-20.4 4.6-32.1 0-11.5-1.3-21.8-4-30.9zm-32.6 73.6c-6.6 9.5-15.6 14.2-26.8 14.2-14.5 0-27.4-5.9-38.4-17.8v-69.1c11.9-16.6 25-24.9 39.4-24.9 11.4 0 20 4.6 26.2 13.9 6.2 9.2 9.3 22.9 9.3 41 .1 18.9-3.2 33.3-9.7 42.7zM256 370.6c0 11.8 1.6 22.5 4.6 32.1 3.2 9.5 7.5 17.6 13 24.4 5.6 6.6 12.1 11.8 19.7 15.5 7.5 3.6 15.7 5.4 24.5 5.4 15.7 0 29.1-5 40-14.8V448H384V256h-26.2v60.1c-11.5-13.6-25.3-20.5-41.7-20.5-9.5 0-18 1.7-25.5 5.2-7.3 3.6-13.7 8.6-18.7 15-5.2 6.6-9.1 14.5-11.8 23.8-2.8 9.2-4.1 19.5-4.1 31zm26.8 0c0-18.1 3.2-31.8 9.3-41 6.2-9.3 14.8-13.9 26.2-13.9 14.4 0 27.5 8.3 39.4 24.9v69.1c-11.1 11.9-23.9 17.8-38.4 17.8-11.2 0-20.2-4.7-26.8-14.2-6.4-9.4-9.7-23.8-9.7-42.7z" />',
        viewBox: '0 0 512 512'
    };

    var textboxIcon = {
        name: 'textbox',
        content: '<path d="M208 209.6c-10.6-7.5-25.2-11.1-44.1-11.1-40.5 0-61.7 15-63.6 45.2h26.1c.7-16.8 12.8-25 36-25 11 0 19.2 1.6 24.4 4.8 2.6 1.6 4.6 3.3 6.2 5.1 1.5 1.9 2.5 4 3.2 6.6.7 2.6 1.2 5.6 1.4 9.4.1 3.6.1 8.2.1 13.6h-12.8c-59.4 0-89.1 17.2-89.1 51.4 0 6.4 1.3 12 3.8 17.2 2.5 5.3 6 9.7 10.4 13.4 4.4 3.8 9.7 6.6 16 8.7 6.1 2.2 12.8 3.2 20 3.2 20.9 0 38.2-6.2 51.7-18.6v17.9H224v-97.8c0-22.1-5.4-36.7-16-44zm-10.1 100.2c-2.3 3.3-5.1 6.2-8.4 9-3.2 2.6-6.8 4.9-10.7 6.8-3.9 1.9-8 3.3-12.2 4.3-4.2 1-8.6 1.4-12.8 1.4-9.6 0-17-2-22.5-5.9-5.5-4-8.3-9.8-8.3-17.2 0-20.7 18.9-30.9 56.9-30.9h18v32.5zm170.3-89.9c-5-6.4-11.4-11.5-18.7-15-7.5-3.4-16-5.2-25.5-5.2-16.4 0-30.2 6.9-41.7 20.5V160H256v192h26.2v-14.8c10.9 9.7 24.3 14.8 40 14.8 8.8 0 17-1.9 24.5-5.4 7.6-3.7 14.1-8.9 19.7-15.5 5.5-6.7 9.8-14.9 13-24.4 3-9.6 4.6-20.4 4.6-32.1 0-11.5-1.3-21.8-4-31-2.8-9.3-6.7-17.1-11.8-23.7zm-20.8 97.4c-6.6 9.5-15.6 14.2-26.8 14.2-14.5 0-27.4-5.9-38.4-17.8v-69.1c11.9-16.6 25-24.9 39.4-24.9 11.4 0 20 4.6 26.2 13.9 6.2 9.2 9.3 22.9 9.3 41 .1 18.9-3.2 33.3-9.7 42.7zM448 64v384h-32V64h32z" />',
        viewBox: '0 0 512 512'
    };

    var textboxHiddenIcon = {
        name: 'textbox-hidden',
        content: '<path d="M0 160h32v64H0v-64zm0-32h32V64H0v64zm0 288h32v-64H0v64zm160 96h64v-32h-64v32zm-96 0h64v-32H64v32zM352 0h-64v32h64V0zm-96 0h-64v32h64V0zM0 512h32v-64H0v64zM448 0h-64v32h64V0zM160 0H96v32h64V0zM64 0H0v32h64V0zM0 320h32v-64H0v64zm480 128h32v-64h-32v64zm0-96h32v-64h-32v64zm0-96h32v-64h-32v64zm0-96h32V96h-32v64zm0-160v64h32V0h-32zm-32 512h64v-32h-64v32zm-192 0h64v-32h-64v32zm96 0h64v-32h-64v32zm-6-165.4c-7.4 3.6-15.6 5.4-24.3 5.4-15.6 0-28.9-5-39.7-14.8V352h-26V160h26v60.1c11.4-13.6 25.1-20.5 41.4-20.5 9.4 0 17.9 1.7 25.3 5.2 7.2 3.6 13.6 8.6 18.6 15 5.2 6.6 9 14.5 11.7 23.8 2.7 9.2 4 19.5 4 31 0 11.8-1.6 22.5-4.6 32.1-3.2 9.5-7.4 17.6-12.9 24.4-5.5 6.6-12 11.7-19.5 15.5zm10.9-72c0-18.1-3.2-31.8-9.3-41-6.2-9.3-14.8-13.9-26.2-13.9-14.4 0-27.5 8.3-39.4 24.9v69.1c11.1 11.9 23.9 17.8 38.4 17.8 11.2 0 20.2-4.7 26.8-14.2 6.4-9.4 9.7-23.8 9.7-42.7zM224 253.5V351h-26v-17.6S167.1 352 146.2 352c-7.3 0-13.9-1-20-3.2-6.2-2-11.6-4.9-16-8.7-4.5-3.8-8-8.1-10.4-13.4-2.5-5.2-3.8-10.8-3.8-17.2 0-34.2 29.8-51.4 89.1-51.5h12.8c0-5.2 0-9.9-.1-13.5-.3-3.8-.7-6.8-1.4-9.4-.7-2.6-1.7-4.8-3.2-6.6-1.6-1.7-3.6-3.5-6.2-5.1-5.2-3.2-13.4-4.8-24.4-4.8-23.2 0-35.3 8.2-36 24.4h-26.1c1.9-29.6 23.1-44.6 63.6-44.6 18.9 0 33.5 3.6 44.1 11.1 10.4 7.4 15.8 22 15.8 44zM198 277h-18c-38 0-56.9 10.3-56.9 30.9 0 7.4 2.8 13.1 8.3 17.2 5.5 3.9 12.9 5.9 22.5 5.9 4.2 0 8.6-.4 12.8-1.4s8.3-2.5 12.2-4.3c3.9-1.9 7.5-4.2 10.7-6.8 3.3-2.7 6.1-5.6 8.4-9V277zM448 64h-32v384h32V64z" />',
        viewBox: '0 0 512 512'
    };

    var passwordIcon = {
        name: 'password',
        content: '<path d="M480 64v384h-32V64h32zM174.2 221.1l-11.3-11.3-34.9 34.9V192H96v52.7l-34.9-34.9-11.3 11.3L84.7 256H32v32h52.7l-34.9 34.9 11.3 11.3L96 299.3V352h32v-52.7l34.9 34.9 11.3-11.3-34.9-34.9H192v-32h-52.7l34.9-34.9zm224 0-11.3-11.3-34.9 34.9V192h-32v52.7l-34.9-34.9-11.3 11.3 34.9 34.9H256v32h52.7l-34.9 34.9 11.3 11.3 34.9-34.9V352h32v-52.7l34.9 34.9 11.3-11.3-34.9-34.9H416v-32h-52.7l34.9-34.9z" />',
        viewBox: '0 0 512 512'
    };

    var paragraphAddIcon = {
        name: 'paragraph-add',
        content: '<path d="M320 96h-64v352h-32V96h-64v352h-32V256c-53 0-96-43-96-96s43-96 96-96h192v32zm96 256v-64h-32v64h-64v32h64v64h32v-64h64v-32h-64z" />',
        viewBox: '0 0 512 512'
    };

    var editToolsIcon = {
        name: 'edit-tools',
        content: '<path d="m260.6 288 11.5 31.5 56.2-56.6L244.2 32H139.8L0 416h76.8l28-76.8 18.6-51.2h137.2zm-17.5-48H140.9L192 99.5 243.1 240zM224 413.3V480h66.7l169.7-168.5-67.9-67.9L224 413.3zm55.3 34-22.6-22.6 135.8-135.8 22.6 22.6-135.8 135.8zm223.4-178-22.6 22.6-67.9-67.9 22.5-22.7c12.5-12.4 32.9-12.4 45.3 0l22.7 22.7c12.4 12.4 12.4 32.8 0 45.3z" />',
        viewBox: '0 0 512 512'
    };

    var templateManagerIcon = {
        name: 'template-manager',
        content: '<path d="M377.2 292.1c-5.5 5.3-7.2 6.4-7.4 6.6-.2.1-.4.2-.9.2-.1-.2-.3-.7-.5-1.7s-.5-4.2-.5-15.1v-31.7c0-9.9-.7-16.2-2.3-19.7-2.4-5.4-6.1-9.4-11.2-12-6.2-3.1-14-4.7-23.3-4.7-12.3 0-22.1 2.8-29 8.4-7.2 5.7-10.9 12.3-10.9 19.4 0 4.1 1.2 7.5 3.6 10 2.5 2.7 5.7 4 9.6 4 3.9 0 7.2-1.3 9.6-3.8 2.4-2.4 3.6-5.9 3.6-10.2l-.2-5.8c0-1.9.9-3.5 2.7-5.1 1.8-1.6 4.4-2.4 7.9-2.4 4.7 0 8.1 1.3 10.4 3.9 1.7 1.9 3.6 6.3 3.6 16.8v.9c-15.6 5.6-26.5 10.2-33.4 14.1-7.8 4.4-13.1 9.1-16.3 14.3-2.5 3.9-3.7 8.5-3.7 13.8 0 8.2 2.5 14.9 7.5 20 5 5.2 11.6 7.8 19.4 7.8 4.9 0 9.5-1 13.8-2.9 2.2-1 6.6-3.9 13.5-8.9.7 2.9 1.9 5.2 3.5 6.9 2.8 3.1 6.6 4.7 11.2 4.7 8.5 0 17.1-5.6 25.7-16.8l.8-1v-16.3l-6.8 6.3zm-35.2-.2c-8.9 6.7-14.1 8.1-16.9 8.1h-.1c-2.8 0-5.1-1.1-7.4-3.6-2.3-2.4-3.5-5.6-3.5-9.5 0-3 .9-5.8 2.8-8.4 2.1-2.8 5.7-5.6 10.6-8.2 2.4-1.3 7.2-3.4 14.4-6.2l.1 27.8zm-97.9 12.2c-1.3-1.4-4-5.6-7.9-17.9L195.6 160h-7.7l-41 124.9c-4.1 12.7-7 17.9-8.8 20.1-.3.4-1.8 1.8-7.4 3.1l-2.8.6V320h43v-11.7l-3.2-.3c-6.6-.6-8.3-2-8.6-2.3-.9-.9-1.3-1.9-1.3-3 0-1.6.5-4.8 2.6-11.5l5.3-16.2h42.1l4.6 14c2.6 8.1 3.1 12 3.1 13.8 0 1.3-.4 2.2-1.3 3.2-.3.4-1.9 1.6-7 1.9l-3.3.2V320h52v-11.8l-3.2-.3c-3.8-.3-6.6-1.5-8.6-3.8zM172.5 254l14.7-44.6 14.4 44.6h-29.1zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-224-32h-64v-64h64v64zm96 0h-64v-64h64v64zm96 0h-64v-64h64v64z" />',
        viewBox: '0 0 512 512'
    };

    var changeManuallyIcon = {
        name: 'change-manually',
        content: '<path d="m416 353 32-32v159H32V32h416v64h-32V64H64v384h352v-95zm-192-3.7V416h66.7l169.7-168.5-67.9-67.9L224 349.3zm55.3 34-22.6-22.6 135.8-135.8 22.6 22.6-135.8 135.8zM502.7 160 480 137.3c-12.4-12.4-32.8-12.4-45.3 0L412.2 160l67.9 67.9 22.6-22.6c12.4-12.5 12.4-32.9 0-45.3zM191.9 416H167v-22h-.6c-7.9 14.6-19.4 22-34.6 22-11.2 0-20-3.3-26.3-9.8S96 391 96 380.3c0-23.1 12.4-36.5 37.2-40.4l33.9-5.1c0-17.4-7.7-26.1-23.2-26.1-13.6 0-25.8 5-36.8 15v-24.2c12-7.6 25.9-11.5 41.7-11.5 28.8 0 43.3 15.2 43.3 45.6V416h-.2zM167 353.1l-23.9 3.6c-7.4 1-13 3-16.8 5.8s-5.6 7.8-5.6 14.9c0 5.2 1.7 9.4 5.2 12.7 3.5 3.3 8.1 5 13.9 5 7.9 0 14.4-3 19.5-8.9 5.2-5.9 7.7-13.4 7.7-22.4v-10.7z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesIcon = {
        name: 'track-changes',
        content: '<path d="m412.2 256 22.6-22.6c12.4-12.4 32.8-12.4 45.3 0l22.6 22.6c12.4 12.4 12.4 32.8 0 45.3L480 323.8 412.2 256zm-19.7 19.6L250.9 417.2 224 445.3V512h66.7l28.1-26.9 141.6-141.6-67.9-67.9zM279.3 479.3 268 468l-11.3-11.3 135.8-135.8 22.6 22.6-135.8 135.8zM288 160H160v32h128v-32zm64 64H160v32h192v-32zm-64 64H160v32h128v-32zm-64 64h-64v32h64v-32zm188.2-96 22.6-22.6c12.4-12.4 32.8-12.4 45.3 0l22.6 22.6c12.4 12.4 12.4 32.8 0 45.3L480 323.8 412.2 256zm-19.7 19.6L250.9 417.2 224 445.3V512h66.7l28.1-26.9 141.6-141.6-67.9-67.9zM279.3 479.3 268 468l-11.3-11.3 135.8-135.8 22.6 22.6-135.8 135.8zM96 416V64h224v96h96v32h32v-64l-96-96H96c-17.7 0-32 14.3-32 32v352c0 17.7 14.3 32 32 32h96v-32H96zM0 512h192v-32H0v32z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesEnableIcon = {
        name: 'track-changes-enable',
        content: '<path d="M502.7 173.3 480 195.8 412.2 128l22.6-22.6c12.4-12.4 32.8-12.4 45.3 0l22.6 22.6c12.4 12.4 12.4 32.8 0 45.3zm-110.2-25.7 67.9 67.9-141.6 141.6-28.1 26.9H224v-66.7l26.9-28.1 141.6-141.6zm22.6 67.9-22.6-22.6-135.8 135.8L268 340l11.3 11.3 135.8-135.8zM160 320h32v-32h-32v32zm0-64h96v-32h-96v32zm128-96H160v32h128v-32zM160 384h32v-32h-32v32zm256 64H96V64h224v96l80.11-79.89L352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V273.155l-32 32V448z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesAcceptIcon = {
        name: 'track-changes-accept',
        content: '<path d="M128 128H96V64c0-17.7 14.3-32 32-32h224l64 64h-96V64H128v64zm122.9 193.2L224 349.3V416h66.7l28.1-26.9 141.6-141.6-67.9-67.9-141.6 141.6zm28.4 62.1L268 372l-11.3-11.3 135.8-135.8 22.6 22.6-135.8 135.8zM416 337.155l32-32V448c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32v-96h32v96h288V337.155zM502.7 205.3 480 227.8 412.2 160l22.6-22.6c12.4-12.4 32.8-12.4 45.3 0l22.6 22.6c12.4 12.4 12.4 32.8 0 45.3zM288 144 112 320 0 208l45-45 67 67L243 99l45 45zm-96 272h-32v-32h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesAcceptAllIcon = {
        name: 'track-changes-accept-all',
        content: '<path d="M128 160H96V96c0-17.7 14.3-32 32-32h224l64 64h-96V96H128v64zm264.5 51.6 67.9 67.9-141.6 141.6-28.1 26.9H224v-66.7l26.9-28.1 141.6-141.6zm22.6 67.9-22.6-22.6-135.8 135.8L268 404l11.3 11.3 135.8-135.8zM416 480H128v-96H96v96c0 17.7 14.3 32 32 32h288c17.7 0 32-14.3 32-32V337.155l-32 32V480zm86.7-288-22.6-22.6c-12.5-12.4-32.9-12.4-45.3 0L412.2 192l67.8 67.8 22.7-22.5c12.4-12.5 12.4-32.9 0-45.3zM160 448h32v-32h-32v32zM64 32h256L288 0H64C46.3 0 32 14.3 32 32v128h32V32zm0 352H32v32c0 17.7 14.3 32 32 32v-64zm179-253L112 262l-67-67-45 45 112 112 176-176-45-45z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesRejectIcon = {
        name: 'track-changes-reject',
        content: '<path d="M102.627 272 160 329.373 137.373 352 80 294.627 22.627 352 0 329.373 57.373 272 0 214.627 22.627 192 80 249.373 137.373 192 160 214.627 102.627 272zM192 384v-32h-32v32h32zm310.7-256-22.6-22.6c-12.5-12.4-32.9-12.4-45.3 0L412.2 128l67.8 67.8 22.7-22.5c12.4-12.5 12.4-32.9 0-45.3zM96 64h224v96l80.11-79.89L352 32H96c-17.7 0-32 14.3-32 32v96h32V64zm296.5 83.6 67.9 67.9-141.6 141.6-28.1 26.9H224v-66.7l26.9-28.1 141.6-141.6zm22.6 67.9-22.6-22.6-135.8 135.8L268 340l11.3 11.3 135.8-135.8zM416 448H96v-64H64v64c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V273.155l-32 32V448z" />',
        viewBox: '0 0 512 512'
    };

    var trackChangesRejectAllIcon = {
        name: 'track-changes-reject-all',
        content: '<path d="M102.627 272 160 329.373 137.373 352 80 294.627 22.627 352 0 329.373 57.373 272 0 214.627 22.627 192 80 249.373 137.373 192 160 214.627 102.627 272zM128 96h192v32h96l-64-64H128c-17.7 0-32 14.3-32 32v64h32V96zm264.5 115.6 67.9 67.9-141.6 141.6-28.1 26.9H224v-66.7l26.9-28.1 141.6-141.6zm22.6 67.9-22.6-22.6-135.8 135.8L268 404l11.3 11.3 135.8-135.8zM416 480H128v-96H96v96c0 17.7 14.3 32 32 32h288c17.7 0 32-14.3 32-32V337.155l-32 32V480zm86.7-288-22.6-22.6c-12.5-12.4-32.9-12.4-45.3 0L412.2 192l67.8 67.8 22.7-22.5c12.4-12.5 12.4-32.9 0-45.3zM160 448h32v-32h-32v32zM64 32h256L288 0H64C46.3 0 32 14.3 32 32v128h32V32zm0 352H32v32c0 17.7 14.3 32 32 32v-64z" />',
        viewBox: '0 0 512 512'
    };

    var documentManagerIcon = {
        name: 'document-manager',
        content: '<path d="M64 416h224v32H64v-32zm224-64H64v32h224v-32zM400 0C288 0 288 96 288 96v160s0 64 80 64 80-64 80-64V96s0-32-48-32-48 32-48 32v128h32V116c0-11 .6-20 16-20s16 9 16 20v140s0 32-48 32-48-32-48-32V96s0-64 80-64 80 64 80 64v128h32V96s0-96-112-96zM106.7 288 96 320H64l64-192h32l64 192h-32l-10.7-32h-74.6zm10.6-32h53.3L144 176l-26.7 80zM320 480H32V96h224V64H32C14.3 64 0 78.3 0 96v384c0 17.7 14.3 32 32 32h288c17.7 0 32-14.3 32-32V352h-32v128z" />',
        viewBox: '0 0 512 512'
    };

    var customIconIcon = {
        name: 'custom-icon',
        content: '<path d="M352 249H196.6c.6 23.8 7.2 42.2 19.8 55.2s30 18.8 52 19.4c4.9.1-1.1 28.8-12.4 28.8-30.9 0-51.6-9.7-69.3-29.1-17.8-19.4-26.7-46.8-26.7-82 0-33.3 9.7-60.4 29.1-81.4s43.5-31.4 72.4-31.4c28.8 0 51.1 9.1 66.9 27.2S352 199 352 231.1V249zm-36-29.9c-.1-19.8-5.1-35.2-14.7-46.2-9.7-11-23.1-16.5-40.3-16.5-16.6 0-30.7 5.8-42.4 17.3-11.6 11.6-18.8 26.7-21.5 45.3l118.9.1zM448 384V64c0-17.7-14.3-32-32-32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h256l96-96zm-32-32h-96v96H96V64h320v288z" />',
        viewBox: '0 0 512 512'
    };

    var bookIcon = {
        name: 'book',
        content: '<path d="M448 480V96h-32v352H128c-17.6 0-32-14.4-32-32s14.4-32 32-32h256V32H128c-35.2 0-64 28.8-64 64v320c0 23.6 12.9 44.2 32 55.3 9.4 5.5 20.4 8.7 32 8.7h320zM128 64h224v288H128V64zm192 64H160V96h160v32zm0 128H160v-32h160v32zm-32-64H160v-32h128v32z" />',
        viewBox: '0 0 512 512'
    };

    var imageAddIcon = {
        name: 'image-add',
        content: '<path d="M272 160c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm80 112-16 16-64 64-128-128L32 336V96.1l.1-.1h383.8l.1.1-.1 191.9H448V96c0-17.6-14.4-32-32-32H32C14.4 64 0 78.4 0 96v320c0 17.6 14.4 32 32 32h256v-64h64V272zm128 144h-32v-64h-32v64h-64v32h64v64h32v-64h64v-32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var imageEditIcon = {
        name: 'image-edit',
        content: '<path d="M304 160c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm-32.6 159.4L176 224 64 336V96.1l.1-.1h383.8l.1.1V160h32V96c0-17.6-14.4-32-32-32H64c-17.6 0-32 14.4-32 32v320c0 17.6 14.4 32 32 32h128v-47.5l79.4-81.1zm189-7.9L290.7 480H224v-66.7l168.5-169.7 67.9 67.9zm-45.3 0-22.6-22.6-135.8 135.8 22.6 22.6 135.8-135.8zm64.9 25.6zM447.9 448c17.7 0 32.1-14.4 32.1-32v-78.9L369.1 448h78.8zm54.8-224L480 201.3c-12.4-12.4-32.8-12.4-45.3 0L412.2 224l67.9 67.9 22.6-22.6c12.4-12.5 12.4-32.9 0-45.3z" />',
        viewBox: '0 0 512 512'
    };

    var imageMapEditorIcon = {
        name: 'image-map-editor',
        content: '<path d="M448 64H64c-17.6 0-32 14.4-32 32v320c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V96c0-17.6-14.4-32-32-32zM96 384H64v-32h32v32zm96 0h-64v-32h64v32zm96 0h-64v-32h64v32zm96 0h-64v-32h64v32zm64 0h-32v-32h32v32zm-.1-48-64-64-80 80L176 224 64 336V192h32v-32H64V96.1l.1-.1H128v32h32V96h287.9l.1.1-.1 239.9zM352 208c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm-224-48h32v32h-32v-32z" />',
        viewBox: '0 0 512 512'
    };

    var commentIcon = {
        name: 'comment',
        content: '<path d="M448 32H64c-17.6 0-32 14.4-32 32v416l96-96h320c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32zm0 319.942a.53.53 0 0 1-.058.058H114.745L64 402.745V64.057a.511.511 0 0 1 .057-.057h383.885c.02.017.041.038.058.057v287.885z" />',
        viewBox: '0 0 512 512'
    };

    var commentRemoveIcon = {
        name: 'comment-remove',
        content: '<path d="M114.745 352 64 402.745V64.057a.511.511 0 0 1 .057-.057h383.885c.02.017.041.038.058.057V256h32V64c0-17.6-14.4-32-32-32H64c-17.6 0-32 14.4-32 32v416l96-96h128v-32H114.745zM480 342.627 457.373 320 400 377.373 342.627 320 320 342.627 377.373 400 320 457.373 342.627 480 400 422.627 457.373 480 480 457.373 422.627 400 480 342.627z" />',
        viewBox: '0 0 512 512'
    };

    var commentsRemoveIcon = {
        name: 'comments-remove',
        content: '<path d="M480 64c0-17.6-14.4-32-32-32H160c-17.6 0-32 14.4-32 32v32h32V64.1l.1-.1H448l.1.1V256l-.1.1h32V64zM377.4 400l22.6 22.6-57.4 57.4-22.6-22.6 57.4-57.4zm0 0L320 342.6l22.6-22.6 57.4 57.4-22.6 22.6zm45.2 0 57.4 57.4-22.6 22.6-57.4-57.4-22.6-22.6 22.6-22.6 57.4-57.4 22.6 22.6-57.4 57.4zm-304.3-16L64 420.2V160.1l.1-.1H352l.1.1V256h32v-96c0-17.6-14.4-32-32-32H64c-17.6 0-32 14.4-32 32v320l96-64h128v-32H118.3z" />',
        viewBox: '0 0 512 512'
    };

    var silverlightIcon = {
        name: 'silverlight',
        content: '<path d="M256 0 0 256l256 256 256-256L256 0zm-75.9 324c-21.6 0-40.5-6.3-52.1-13.7v-33.2c14.5 10.8 32.9 17.9 51.4 17.9 16.3 0 28.6-5 28.6-17.6 0-10.6-6.8-14.5-18.9-18.9l-23.6-7.9c-23.9-7.9-39.7-20.3-39.7-47 0-29.9 25.7-46.2 57.3-46.2 19.7 0 35.8 4.7 48.8 12.6v32.9c-13.9-10.2-29.1-16.8-47.8-16.8-14.5 0-25.5 4.9-25.5 16 0 9.9 6.5 13.9 17.9 17.6l25.2 8.6c27.1 9.2 39.4 23.9 39.4 47.8.2 31.9-26.8 47.9-61 47.9zm95.9-4V160h32v128h76v32H276z" />',
        viewBox: '0 0 512 512'
    };

    var mediaManagerIcon = {
        name: 'media-manager',
        content: '<path d="M192 384V128l192 128-192 128zm32-319.3V0C108.2 14.4 14.4 108.2 0 224h64.7c13.5-80.3 79-145.8 159.3-159.3zm64 382.6V512c115.8-14.4 209.6-108.2 224-224h-64.7c-13.5 80.3-79 145.8-159.3 159.3zM64.7 288H0c14.4 115.8 108.2 209.6 224 224v-64.7c-80.3-13.5-145.8-79-159.3-159.3zm382.6-64H512C497.6 108.2 403.8 14.4 288 0v64.7c80.3 13.5 145.8 79 159.3 159.3z" />',
        viewBox: '0 0 512 512'
    };

    var videoExternalIcon = {
        name: 'video-external',
        content: '<path d="M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm-64 384V128l192 128-192 128z" />',
        viewBox: '0 0 512 512'
    };

    var flashManagerIcon = {
        name: 'flash-manager',
        content: '<path d="M255.9 0C114.6 0 0 114.6 0 256.1 0 397.4 114.6 512 255.9 512 397.4 512 512 397.4 512 256.1 512 114.6 397.4 0 255.9 0zM384 160c-30.1.3-48.4-4.6-81.2 64H352v64h-64s-53.5 129.4-160 128c-.8-14.2 0-43.9 0-64 70.5-10.7 93.6-88.3 109.9-126.9C286.3 74.5 384 95.1 384 95.1V160z" />',
        viewBox: '0 0 512 512'
    };

    var binocularsIcon = {
        name: 'binoculars',
        content: '<path d="M480 288v96c0 17.7-14.3 32-32 32h-96c-17.7 0-32-14.3-32-32v-64H192v64c0 17.7-14.3 32-32 32H64c-17.7 0-32-14.3-32-32v-96c0-17.7 14.3-32 32-32v-64c0-17.7 14.3-32 32-32v-32c0-17.7 14.3-32 32-32h64s32 0 32 32v128h64V128c0-32 32-32 32-32h64c17.7 0 32 14.3 32 32v32c17.7 0 32 14.3 32 32v64c17.7 0 32 14.3 32 32zM208 64h16V32h-96v32h80zm160 0h16V32h-96v32h80zM48 448H32v32h160v-32H48zm272 32h160v-32H320v32z" />',
        viewBox: '0 0 512 512'
    };

    var copyIcon = {
        name: 'copy',
        content: '<path d="M384 96H192c-17.7 0-32 14.3-32 32v320c0 17.7 14.3 32 32 32h256c17.7 0 32-14.3 32-32V192l-96-96zm64 352H192V128h160v96h96v224zM64 384h64v32H64c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32h192l32 32H64v320z" />',
        viewBox: '0 0 512 512'
    };

    var cutIcon = {
        name: 'cut',
        content: '<path d="M480 32h-45.3L256 210.7 210.7 256l-69.5 69.5c-9.1-3.6-18.9-5.5-29.2-5.5-44.2 0-80 35.8-80 80 0 10.3 2 20.2 5.5 29.2 8.1 20.7 24.6 37.1 45.3 45.3 9.1 3.6 18.9 5.5 29.2 5.5 44.2 0 80-35.8 80-80 0-10.3-2-20.2-5.5-29.2l69.5-69.5 69.5 69.5c-3.6 9.1-5.5 18.9-5.5 29.2 0 44.2 35.8 80 80 80 10.3 0 20.2-2 29.2-5.5 20.7-8.1 37.1-24.6 45.3-45.3 3.6-9.1 5.5-18.9 5.5-29.2 0-44.2-35.8-80-80-80-10.3 0-20.2 2-29.2 5.5L301.3 256 480 77.3V32zM160 400c0 26.5-21.5 48-48 48-.9 0-1.8 0-2.7-.1-24.4-1.3-43.9-20.9-45.3-45.3 0-.9-.1-1.8-.1-2.7 0-26.5 21.5-48 48-48 .9 0 1.8 0 2.7.1 24.4 1.3 43.9 20.9 45.3 45.3.1.9.1 1.8.1 2.7zm237.3-47.9c.9 0 1.8-.1 2.7-.1 26.5 0 48 21.5 48 48 0 .9 0 1.8-.1 2.7-1.3 24.4-20.9 43.9-45.3 45.3-.9 0-1.8.1-2.7.1-26.5 0-48-21.5-48-48 0-.9 0-1.8.1-2.7 1.4-24.5 20.9-44 45.3-45.3zM240 256c0-8.8 7.2-16 16-16s16 7.2 16 16-7.2 16-16 16-16-7.2-16-16zm-74.5-45.3L32 77.3V32h45.3l133.5 133.5-45.3 45.2z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardIcon = {
        name: 'clipboard',
        content: '<path d="M416 32H311.4C300.3 12.9 279.7 0 256 0s-44.3 12.9-55.4 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-160 0c17.7 0 32 14.3 32 32h-64c0-17.7 14.3-32 32-32zm160 416H96V64h64v64h192V64h64v384z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardCodeIcon = {
        name: 'clipboard-code',
        content: '<path d="M214.6 361.4 192 384l-80-80 80-80 22.6 22.6-57.3 57.4 57.3 57.4zM448 64v384c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32h104.6C211.7 12.9 232.3 0 256 0s44.3 12.9 55.4 32H416c17.7 0 32 14.3 32 32zm-224 0h64c0-17.7-14.3-32-32-32s-32 14.3-32 32zm192 0h-64v64H160V64H96v384h320V64zM297.4 246.6l57.4 57.4-57.4 57.4L320 384l80-80-80-80-22.6 22.6z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardWordIcon = {
        name: 'clipboard-word',
        content: '<path d="m128 160 48.5 192h46.7L256 238.4 285.3 352h43.1L384 160h-73v35h19.3l-22.2 86-28.8-121h-45.4l-33.1 119.3-25-119.3H128zM416 32H311.4C300.3 12.9 279.7 0 256 0s-44.3 12.9-55.4 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-160 0c17.7 0 32 14.3 32 32h-64c0-17.7 14.3-32 32-32zm160 416H96V64h64v64h192V64h64v384zm-32-32H128v-32h256v32z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardWordAltIcon = {
        name: 'clipboard-word-alt',
        content: '<path d="m128 160 48.5 192h46.7L256 238.4 285.3 352h43.1L384 160h-73v35h19.3l-22.2 86-28.8-121h-45.4l-33.1 119.3-25-119.3H128zM416 32H311.4C300.3 12.9 279.7 0 256 0s-44.3 12.9-55.4 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-160 0c17.7 0 32 14.3 32 32h-64c0-17.7 14.3-32 32-32zm160 416H96V64h64v64h192V64h64v384z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardHtmlIcon = {
        name: 'clipboard-html',
        content: '<path d="M214.6 361.4 192 384l-80-80 80-80 22.6 22.6-57.3 57.4 57.3 57.4zM448 64v384c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32h104.6C211.7 12.9 232.3 0 256 0s44.3 12.9 55.4 32H416c17.7 0 32 14.3 32 32zm-224 0h64c0-17.7-14.3-32-32-32s-32 14.3-32 32zm192 0h-64v64H160V64H96v384h320V64zM271.2 183.9 209.8 416l30.9 8.3L302.2 192l-31-8.1zm26.2 62.7 57.4 57.4-57.4 57.4L320 384l80-80-80-80-22.6 22.6z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardMarkdownIcon = {
        name: 'clipboard-markdown',
        content: '<path d="M226 224h30v128h-32v-72.8l-32.2 45.6L160 279v73h-32V224h32l31.8 46.2L226 224zm126 64h32l-48 64-48-64h32l.2-64H352v64zm64-256H311.4C300.3 12.9 279.7 0 256 0s-44.3 12.9-55.4 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-160 0c17.7 0 32 14.3 32 32h-64c0-17.7 14.3-32 32-32zm160 416H96V64h64v64h192V64h64v384z" />',
        viewBox: '0 0 512 512'
    };

    var clipboardTextIcon = {
        name: 'clipboard-text',
        content: '<path d="M416 32H311.4C300.3 12.9 279.7 0 256 0s-44.3 12.9-55.4 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-160 0c17.7 0 32 14.3 32 32h-64c0-17.7 14.3-32 32-32zm160 416H96V64h64v64h192V64h64v384zm-32-224H128v-32h256v32zm0 64H128v-32h256v32zm0 64H128v-32h256v32zm0 64H128v-32h256v32z" />',
        viewBox: '0 0 512 512'
    };

    var applyFormatIcon = {
        name: 'apply-format',
        content: '<path d="M380.984 313.69c12.445 12.445 12.445 32.81 0 45.255L266.529 470.658c-12.445 12.445-32.787 12.467-45.255 0L0 248.898c18.584 18.584 40.255-4.835 40.255-4.835L154.71 132.671c12.445-12.445 32.81-12.445 45.255 0L380.984 313.69zm89.682-227.101-45.255-45.255c-12.445-12.445-32.81-12.445-45.255 0l-67.882 67.882-22.627-22.627c-12.445-12.445-32.81-12.445-45.255 0l-22.627 22.627 181.019 181.019 22.627-22.627c12.445-12.445 12.445-32.81 0-45.255l-22.627-22.627 67.882-67.882c12.445-12.446 12.445-32.81 0-45.255z" />',
        viewBox: '0 0 512 512'
    };

    var clearCssIcon = {
        name: 'clear-css',
        content: '<path d="M402.784 290.235 221.765 109.216l22.627-22.627c12.445-12.445 32.81-12.445 45.255 0l22.627 22.627 67.882-67.882c12.445-12.445 32.81-12.445 45.255 0l45.255 45.255c12.445 12.445 12.445 32.81 0 45.255l-67.882 67.882 22.627 22.627c12.445 12.445 12.445 32.81 0 45.255l-22.627 22.627zm-21.8 23.455-181.02-181.019c-12.346-12.346-32.483-12.437-44.953-.287L54.627 32 32 54.627l100.074 100.074-91.819 89.362S18.585 267.482 0 248.898l221.274 221.76c12.467 12.467 32.81 12.445 45.255 0l91.851-89.651L457.373 480 480 457.373l-98.73-98.73c12.151-12.47 12.06-32.607-.286-44.953z" />',
        viewBox: '0 0 512 512'
    };

    var copyFormatIcon = {
        name: 'copy-format',
        content: '<path d="M96 480h160v32H64v-64H0V288h32v128h32v-64h32v128zm32-32h96v-32h-96v32zm0-96v32h32v-32h-32zm284.2-92.6L253.8 101c-12.4-12.4-32.9-12.4-45.3.1l-69.8 69.8-.2.2c-11.6 11.6-30 12.7-42.5 2.7l200.9 200.9c12.5 12.5 32.8 12.4 45.3 0l69.9-69.9c12.5-12.5 12.5-33 .1-45.4zM502.7 32 480 9.3c-12.4-12.4-32.8-12.4-45.3 0l-67.9 67.9-22.6-22.6c-12.4-12.4-32.8-12.4-45.3 0l-22.6 22.6 158.4 158.4 22.6-22.6c12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6 67.9-67.9c12.5-12.4 12.5-32.8.1-45.2z" />',
        viewBox: '0 0 512 512'
    };

    var stripAllFormattingIcon = {
        name: 'strip-all-formatting',
        content: '<path d="M32 480h224v32H0v.1V256h32v224zm32-32h159v-32H64v32zm97-96H63v32h98v-32zm-65-64H64v32h32v-32zm316.2-28.6L253.8 101c-12.4-12.4-32.9-12.4-45.3.1l-69.8 69.8-.2.2c-11.6 11.6-30 12.7-42.5 2.7l200.9 200.9c12.5 12.5 32.8 12.4 45.3 0l69.9-69.9c12.5-12.5 12.5-33 .1-45.4zM502.7 32 480 9.3c-12.4-12.4-32.8-12.4-45.3 0l-67.9 67.9-22.6-22.6c-12.4-12.4-32.8-12.4-45.3 0l-22.6 22.6 158.4 158.4 22.6-22.6c12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6 67.9-67.9c12.5-12.4 12.5-32.8.1-45.2z" />',
        viewBox: '0 0 512 512'
    };

    var stripCssFormatIcon = {
        name: 'strip-css-format',
        content: '<path d="M0 288v224h416V288H0zm145 65.9c-10-6.2-21-9.3-33.4-9.3-13.6 0-24.5 4.6-32.9 13.7-8.3 9.1-12.5 21.5-12.5 37.1 0 15 3.9 26.9 11.8 35.8s18.4 13.3 31.7 13.3c12.7 0 24.3-3.3 34.3-9.9v31.8c-9.9 5.5-23.7 8.2-40.7 8.2-22.2 0-39.6-7-52.3-20.9-12.7-14-19-32.5-19-55.8 0-24.7 7.1-44.8 21.4-60.2 14.3-15.4 32.8-23.1 55.6-23.1 14.1 0 26 1.9 36 5.7v33.6zM260.6 450c-3.1 5.9-7.2 10.6-12.4 14.2-5.2 3.6-11.3 6.2-18.2 7.8-7 1.6-14.3 2.4-21.9 2.4-7.9 0-15.4-.7-22.5-2.2-7.2-1.4-13.4-3.6-18.5-6.5v-34.4c5.8 5.3 12.2 9.2 18.9 11.8 6.9 2.6 13.8 3.9 20.7 3.9 4.1 0 7.7-.4 10.7-1.2 3.1-.8 5.6-1.9 7.7-3.3 2-1.4 3.6-3.1 4.6-5 1-1.9 1.5-4 1.5-6.2 0-3-.8-5.7-2.4-8.1-1.6-2.4-3.8-4.6-6.6-6.6s-6.1-4-9.9-5.8c-3.8-1.9-8-3.8-12.4-5.7-11.3-5-19.6-11.2-25.1-18.4-5.5-7.3-8.3-15.9-8.3-26.2 0-8.1 1.5-15 4.5-20.7s7.1-10.6 12.3-14.3c5.2-3.7 11.2-6.5 18-8.3 6.9-1.8 14.1-2.6 21.7-2.6 7.5 0 14.2.5 19.9 1.5 5.8 1 11.2 2.5 16 4.5v32.2c-2.4-1.8-5.1-3.4-7.9-4.7-2.9-1.4-5.8-2.5-8.8-3.4s-6-1.6-9-2c-3-.4-5.8-.6-8.5-.6-3.7 0-7.1.4-10.1 1.1-3 .8-5.6 1.8-7.7 3.2-2.1 1.4-3.7 3-4.8 4.9-1.1 1.9-1.7 4-1.7 6.4 0 2.6.6 4.9 1.9 7 1.3 2.1 3.1 4 5.4 5.8 2.3 1.8 5.2 3.6 8.6 5.4s7.2 3.6 11.4 5.5c5.8 2.6 11 5.3 15.5 8.3 4.6 2.9 8.6 6.2 11.8 9.9 3.3 3.7 5.8 7.9 7.6 12.6 1.7 4.7 2.6 10.2 2.6 16.3 0 8.5-1.6 15.7-4.6 21.5zm119 0c-3.1 5.9-7.2 10.6-12.4 14.2-5.2 3.6-11.3 6.2-18.2 7.8-7 1.6-14.3 2.4-21.9 2.4-7.9 0-15.4-.7-22.5-2.2-7.2-1.4-13.4-3.6-18.5-6.5v-34.4c5.8 5.3 12.2 9.2 18.9 11.8 6.9 2.6 13.8 3.9 20.7 3.9 4.1 0 7.7-.4 10.7-1.2 3.1-.8 5.6-1.9 7.7-3.3 2-1.4 3.6-3.1 4.6-5 1-1.9 1.5-4 1.5-6.2 0-3-.8-5.7-2.4-8.1-1.6-2.4-3.8-4.6-6.6-6.6s-6.1-4-9.9-5.8c-3.8-1.9-8-3.8-12.4-5.7-11.3-5-19.6-11.2-25.1-18.4-5.5-7.3-8.3-15.9-8.3-26.2 0-8.1 1.5-15 4.5-20.7 3-5.8 7.1-10.6 12.3-14.3 5.2-3.7 11.2-6.5 18-8.3 6.9-1.8 14.1-2.6 21.7-2.6 7.5 0 14.2.5 19.9 1.5 5.8 1 11.2 2.5 16 4.5v32.2c-2.4-1.8-5.1-3.4-7.9-4.7-2.9-1.4-5.8-2.5-8.8-3.4-3-.9-6-1.6-9-2-3-.4-5.8-.6-8.5-.6-3.7 0-7.1.4-10.1 1.1-3 .8-5.6 1.8-7.7 3.2-2.1 1.4-3.7 3-4.8 4.9-1.1 1.9-1.7 4-1.7 6.4 0 2.6.6 4.9 1.9 7 1.3 2.1 3.1 4 5.4 5.8 2.4 1.8 5.2 3.6 8.6 5.4 3.4 1.8 7.2 3.6 11.4 5.5 5.8 2.6 11 5.3 15.5 8.3 4.6 2.9 8.5 6.2 11.8 9.9 3.3 3.7 5.8 7.9 7.6 12.6 1.7 4.7 2.6 10.2 2.6 16.3 0 8.5-1.5 15.7-4.6 21.5zM502.7 32 480 9.3c-12.4-12.4-32.8-12.4-45.3 0l-67.9 67.9-22.6-22.6c-12.4-12.4-32.8-12.4-45.3 0l-22.6 22.6 158.4 158.4 22.6-22.6c12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6 67.9-67.9c12.5-12.4 12.5-32.8.1-45.2zm-246.9 69.9c-12.4-12.4-32.8-12.4-45.3 0l-79.7 79.7c-12.4 12.4-32.8 12.4-45.3 0L160 256h249.9L255.8 101.9z" />',
        viewBox: '0 0 512 512'
    };

    var stripFontElementsIcon = {
        name: 'strip-font-elements',
        content: '<path d="M502.666 31.961 480.039 9.334c-12.445-12.445-32.81-12.445-45.255 0l-67.882 67.882-22.627-22.627c-12.445-12.445-32.81-12.445-45.255 0l-22.627 22.627 158.392 158.392 22.627-22.627c12.445-12.445 12.445-32.81 0-45.255l-22.627-22.627 67.882-67.882c12.444-12.446 12.444-32.811-.001-45.256zm-246.848 69.936c-12.445-12.445-32.81-12.445-45.255 0l-79.706 79.706c-12.445 12.445-32.81 12.445-45.255 0L160 256h249.921L255.818 101.897zM176 348.121 200.706 416h-49.412L176 348.121zM0 288v224h352V288H0zm224 192-11.647-32h-72.706L128 480H96l58.235-160h43.53L256 480h-32z" />',
        viewBox: '0 0 512 512'
    };

    var stripSpanElementsIcon = {
        name: 'strip-span-elements',
        content: '<path d="M96 288 0 400l96 112h256V288H96zm170.3 167.5c-3.9 5.9-9.3 10.6-16.1 14.2-6.8 3.6-14.6 6.2-23.6 7.8-9 1.6-18.4 2.4-28.4 2.4-10.2 0-20-.7-29.2-2.2-9.2-1.4-17.2-3.6-24-6.5v-34.5c7.5 5.2 15.7 9.2 24.6 11.8 8.8 2.6 17.8 3.9 26.8 3.9 5.3 0 9.9-.4 13.9-1.2 3.9-.8 7.2-1.9 9.9-3.3 2.6-1.4 4.6-3.1 5.9-5 1.3-1.9 2-4 2-6.2 0-3-1-5.7-3.1-8.1-2.1-2.4-4.9-4.6-8.5-6.6-3.6-2-7.9-4-12.8-5.8-4.9-1.9-10.3-3.8-16-5.7-14.6-5-25.4-11.2-32.6-18.4-7.2-7.3-10.7-16-10.7-26.3 0-8.1 2-15 5.9-20.8 3.9-5.8 9.2-10.5 15.9-14.3 6.7-3.7 14.5-6.5 23.3-8.3 8.8-1.8 18.2-2.6 28.1-2.6 9.7 0 18.3.5 25.8 1.5s14.4 2.5 20.7 4.5v32.3c-3.1-1.8-6.5-3.4-10.2-4.7-3.7-1.4-7.5-2.5-11.4-3.4-3.9-.9-7.8-1.6-11.6-2-3.9-.4-7.5-.6-11-.6-4.8 0-9.1.4-13 1.1-3.9.8-7.2 1.8-9.9 3.2-2.7 1.4-4.8 3-6.2 4.9-1.5 1.9-2.2 4-2.2 6.4 0 2.6.8 4.9 2.5 7 1.6 2.1 4 4 7 5.8 3 1.8 6.7 3.6 11.1 5.4 4.3 1.8 9.2 3.6 14.7 5.4 7.5 2.6 14.2 5.3 20.1 8.3 5.9 2.9 11 6.2 15.3 9.9 4.2 3.7 7.5 7.9 9.8 12.6 2.3 4.7 3.4 10.2 3.4 16.4-.3 8.6-2.3 15.9-6.2 21.7zM502.7 32 480 9.3c-12.4-12.4-32.8-12.4-45.3 0l-67.9 67.9-22.6-22.6c-12.4-12.4-32.8-12.4-45.3 0l-22.6 22.6 158.4 158.4 22.6-22.6c12.4-12.4 12.4-32.8 0-45.3l-22.6-22.6 67.9-67.9c12.5-12.4 12.5-32.8.1-45.2zm-246.9 69.9c-12.4-12.4-32.8-12.4-45.3 0l-79.7 79.7c-12.4 12.4-32.8 12.4-45.3 0L160 256h249.9L255.8 101.9z" />',
        viewBox: '0 0 512 512'
    };

    var stripWordFormattingIcon = {
        name: 'strip-word-formatting',
        content: '<path d="M0 288v224h352V288H0zm239.3 192h-37.7L176 385.4 147.4 480h-40.9L64 320h40.6l21.9 100.4L155.8 320h40.4l25.2 100.4 19.4-71.4H224v-29h64l-48.7 160zM502.7 77.2l-67.9 67.9 22.6 22.6c12.4 12.4 12.4 32.8 0 45.3l-22.6 22.6L276.4 77.2 299 54.6c12.4-12.4 32.8-12.4 45.3 0l22.6 22.6 67.9-67.9c12.4-12.4 32.8-12.4 45.3 0L502.7 32c12.4 12.4 12.4 32.8 0 45.2zM409.9 256H160l-74.4-74.4c12.4 12.4 32.8 12.4 45.3 0l79.7-79.7c12.4-12.4 32.8-12.4 45.3 0l154 154.1z" />',
        viewBox: '0 0 512 512'
    };

    var formatCodeBlockIcon = {
        name: 'format-code-block',
        content: '<path d="M224 352v160h288V352H224zm102.6 105.4L304 480l-48-48 22.6-22.6L304 384l22.6 22.6-25.3 25.4 25.3 25.4zM432 480l-22.6-22.6 25.4-25.4-25.4-25.4L432 384l25.4 25.4L480 432l-48 48zM192 160V32c0-17.6-14.4-32-32-32h-32c-17.6 0-32 14.4-32 32v128L0 256h288l-96-96zm96 128H0v192h64V320h32v160h32V320h32v160h32V320h96v-32z" />',
        viewBox: '0 0 512 512'
    };

    var buildingBlocksIcon = {
        name: 'building-blocks',
        content: '<path d="M127.9 289V128H160V80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h64V80c0-8.8 7.2-16 16-16h32c8.8 0 16 7.2 16 16v48h32v160l-256.1 1zM96 320v-48c0-8.8-7.2-16-16-16H48c-8.8 0-16 7.2-16 16v48H0v128h224V320H96zm384 0v-48c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v48H288v128h224V320h-32z" />',
        viewBox: '0 0 512 512'
    };

    var puzzlePieceIcon = {
        name: 'puzzle-piece',
        content: '<path d="M480 352c0 1 0 2-.1 2.9v.8c0 .8-.1 1.7-.2 2.5v.5c-.1 1-.2 1.9-.4 2.8-.1.4-.1.9-.2 1.3s-.1.8-.2 1.2c-.1.4-.2.7-.2 1.1l-.6 2.7c-.1.4-.2.7-.3 1.1 0 .2-.1.5-.2.7-.2.5-.4 1.1-.5 1.7-.3.9-.6 1.8-.9 2.6 0 .1-.1.2-.1.3-.3.8-.6 1.6-.9 2.3-.1.2-.2.5-.3.7-.3.8-.7 1.5-1 2.3 0 .1-.1.2-.1.2-.4.8-.8 1.6-1.3 2.4l-.6 1.2c-.2.4-.4.7-.6 1.1-.2.3-.3.6-.5.8-.5.8-1 1.5-1.5 2.3l-.6.9c-.2.4-.5.7-.7 1-.2.3-.5.6-.7.9-.5.7-1.1 1.4-1.7 2.1l-.3.3-1.5 1.8c-.2.2-.3.4-.5.5-.6.7-1.2 1.3-1.9 2-.6.6-1.3 1.3-2 1.9-.4.3-.7.7-1.1 1-.3.3-.7.6-1 .9-.2.1-.3.3-.5.4-.7.6-1.4 1.1-2.1 1.7-.3.3-.7.5-1 .8-.3.2-.6.5-1 .7l-.9.6c-.8.5-1.5 1-2.3 1.5-.2.1-.5.3-.7.4-.4.2-.7.4-1.1.6-.4.2-.8.5-1.3.7-.8.4-1.6.9-2.4 1.3-.1.1-.2.1-.3.2-.3.2-.7.4-1 .5-.6.2-1.2.5-1.9.8-.8.3-1.6.6-2.3.9-.1 0-.2.1-.3.1-.9.3-1.7.6-2.6.9-.6.2-1.2.3-1.7.6-.2.1-.5.1-.7.2-.4.1-.7.2-1.1.3l-2.7.6c-.3.1-.5.1-.8.2-.5.1-1.1.2-1.7.3-.4.1-.8.1-1.2.2-.9.1-1.9.3-2.8.4-.2 0-.5 0-.7.1-.4.1-.9.1-1.3.1-.6 0-1.1.1-1.7.1-1 0-2 .1-2.9.1-1.2 0-2.3 0-3.5-.1-.4 0-.7-.1-1.1-.1-.8-.1-1.6-.1-2.3-.2-.4 0-.9-.1-1.3-.2l-2.1-.3c-.4-.1-.9-.2-1.3-.2-.7-.1-1.4-.3-2-.4-.4-.1-.9-.2-1.3-.3-.7-.2-1.4-.3-2-.5l-1.2-.3c-.7-.2-1.4-.4-2.1-.7-.4-.1-.7-.2-1.1-.4-.8-.3-1.5-.6-2.3-.9-.3-.1-.5-.2-.8-.3-1-.4-1.9-.8-2.8-1.2-.1 0-.1-.1-.2-.1-3.1-1.5-6-3.2-8.8-5.1-.1 0-.1-.1-.2-.2-.8-.6-1.7-1.2-2.5-1.8-.1-.1-.2-.2-.3-.2-.8-.6-1.6-1.2-2.3-1.9-.3-.2-.6-.5-.8-.7-.5-.4-1-.8-1.4-1.3l-.5-.5c-.8-.8-1.6-1.5-2.3-2.3l-1.5-1.5c-.3-.3-.5-.6-.7-.9-.1-.2-.2-.3-.4-.5-4.9-5.7-12-8.9-19.5-8.9h-1.4c-14.3 0-25.9 11.6-25.9 25.9v70H217.9c-14.3 0-25.9-11.6-25.9-25.9v-1.4c0-7.5 3.3-14.6 8.9-19.5 15-12.5 24.2-31.6 23-52.9-1.8-32.5-28.3-58.7-60.9-60.2-36.7-1.7-67 27.6-67 63.9 0 19.6 8.8 37.1 22.6 48.8 5.9 5 9.4 12.2 9.4 19.9v1.4c0 14.3-11.6 25.9-25.9 25.9H32V192h70.1c14.3 0 25.9-11.6 25.9-25.9v-1.4c0-7.5-3.3-14.6-8.9-19.5l-.3-.3c-.7-.5-1.4-1.1-2-1.7l-.6-.6c-.8-.8-1.6-1.5-2.3-2.3l-.2-.2c-.7-.7-1.4-1.5-2.1-2.3-.1-.1-.2-.2-.2-.3-.7-.8-1.3-1.5-1.9-2.3-.1-.1-.2-.2-.2-.3-.6-.8-1.2-1.6-1.8-2.5l-.2-.2c-1.9-2.8-3.6-5.7-5.1-8.8 0-.1-.1-.1-.1-.2-.4-.9-.9-1.9-1.2-2.8-.1-.3-.2-.5-.3-.8-.3-.8-.6-1.5-.9-2.3-.1-.3-.2-.7-.4-1.1-.2-.7-.5-1.4-.7-2.1l-.3-1.2c-.2-.7-.4-1.4-.5-2-.1-.4-.2-.9-.3-1.3-.1-.7-.3-1.4-.4-2-.1-.4-.2-.9-.2-1.3l-.3-2.1c-.1-.4-.1-.9-.2-1.3-.1-.8-.1-1.6-.2-2.3 0-.4-.1-.7-.1-1.1-.1-1.2-.1-2.3-.1-3.5 0-1 0-2 .1-2.9 0-.4 0-.9.1-1.3 0-.7.1-1.4.2-2v-.4c.1-.9.2-1.9.4-2.8 0-.2.1-.4.1-.7.1-.8.3-1.6.4-2.4 0-.2.1-.4.1-.5l.6-2.7c0-.1.1-.3.1-.4.2-.7.4-1.4.6-2.2l.3-.9c.3-.9.6-1.8.9-2.6 0-.1.1-.2.1-.3.3-.8.6-1.6.9-2.3.1-.2.2-.5.3-.7.3-.8.7-1.5 1-2.3 0-.1.1-.2.1-.3.4-.8.8-1.6 1.3-2.4l.3-.6c.4-.7.7-1.3 1.1-1.9.1-.2.2-.3.3-.5.5-.8 1-1.5 1.5-2.3.1-.1.2-.3.3-.4.4-.6.9-1.2 1.3-1.8.1-.2.3-.4.4-.6.5-.7 1.1-1.4 1.7-2.1l.3-.3 1.5-1.8c.2-.2.3-.4.5-.5.6-.7 1.2-1.3 1.9-2 .6-.6 1.3-1.3 2-1.9.2-.2.4-.3.5-.5l1.8-1.5.3-.3c.7-.6 1.4-1.1 2.1-1.7.2-.1.3-.3.5-.4.6-.5 1.3-.9 1.9-1.3.2-.1.3-.2.5-.3.8-.5 1.5-1 2.3-1.5.1-.1.3-.2.4-.2.6-.4 1.3-.8 1.9-1.1.2-.1.5-.3.7-.4.8-.4 1.6-.9 2.4-1.3.1 0 .2-.1.2-.1.8-.4 1.5-.7 2.3-1 .2-.1.5-.2.7-.3.8-.3 1.5-.6 2.3-.9.1 0 .2-.1.3-.1.9-.3 1.7-.6 2.6-.9.3-.1.6-.2.8-.3.7-.2 1.4-.4 2.2-.6.2 0 .3-.1.5-.1l2.7-.6c.2 0 .4-.1.6-.1.8-.2 1.6-.3 2.3-.4.2 0 .5-.1.7-.1.9-.1 1.9-.3 2.8-.4.2 0 .4 0 .5-.1.8-.1 1.6-.1 2.5-.2h.7c1 0 1.9-.1 2.9-.1s2 0 3 .1h.7c.9.1 1.8.1 2.7.2h.2c30 3.1 53.9 26.9 57.1 57 0 .3.1.7.1 1 .1.7.1 1.4.2 2.1 0 .5 0 .9.1 1.4v5c0 .5-.1 1-.1 1.4 0 .6-.1 1.2-.1 1.7s-.1 1-.2 1.5c-.1.6-.1 1.1-.2 1.7-.1.5-.1 1-.2 1.5s-.2 1.1-.3 1.6l-.3 1.5c-.1.5-.2 1-.4 1.5-.1.5-.2 1-.4 1.5-.1.5-.3.9-.4 1.4-.2.5-.3 1-.5 1.5-.1.4-.3.9-.4 1.3-.2.5-.4 1.1-.6 1.6-.1.4-.3.8-.5 1.2-.2.6-.4 1.1-.7 1.7-.1.3-.3.7-.4 1-.3.6-.5 1.2-.8 1.8-.1.2-.2.5-.4.7-.3.7-.7 1.3-1 2 0 .1-.1.2-.1.2-3.8 6.7-8.7 12.7-14.5 17.7h-.1c-5.8 5-9.4 12.2-9.4 19.9v1.4c0 14.3 11.6 25.9 25.9 25.9H320v116.7c0 6.3 5.1 11.3 11.3 11.3H357c5.2 0 9.1-4.1 10-9.2 0-.1.1-.1.1-.2 5-5.8 10.9-10.8 17.7-14.5.1 0 .2-.1.2-.1.7-.4 1.3-.7 2-1 .2-.1.5-.2.7-.4.6-.3 1.2-.6 1.8-.8.3-.1.7-.3 1-.4.6-.2 1.1-.5 1.7-.7.4-.2.8-.3 1.2-.5.5-.2 1.1-.4 1.6-.6.4-.2.9-.3 1.3-.4.5-.2 1-.3 1.5-.5.5-.1.9-.3 1.4-.4.5-.1 1-.3 1.5-.4.5-.1 1-.2 1.5-.4l1.5-.3c.5-.1 1.1-.2 1.6-.3.5-.1 1-.2 1.5-.2.6-.1 1.1-.1 1.7-.2.5-.1 1-.1 1.5-.2.6-.1 1.1-.1 1.7-.1.5 0 1-.1 1.4-.1h5c.5 0 .9 0 1.4.1.7 0 1.4.1 2.1.2.3 0 .7.1 1 .1 30 3.1 53.9 27 57 57.1v.2c.1.9.2 1.8.2 2.7v.7c.2.4.2 1.4.2 2.4z" />',
        viewBox: '0 0 512 512'
    };

    var linkAddIcon = {
        name: 'link-add',
        content: '<path d="M384 384zm64 32v-64h-32v64h-64v32h64v64h32v-64h64v-32h-64zM96 256c0-17.7 14.3-32 32-32h256c17.7 0 32 14.3 32 32s-14.3 32-32 32H128c-17.7 0-32-14.3-32-32zm-32 0c0 35.4 28.6 64 64 64h110.8c-22.1 38.2-63.5 64-110.8 64C57.3 384 0 326.7 0 256s57.3-128 128-128c47.4 0 88.7 25.8 110.8 64H128c-35.4 0-64 28.6-64 64zm416 84.7c19.9-22.6 32-52.2 32-84.7 0-70.7-57.3-128-128-128-47.3 0-88.7 25.8-110.8 64H384c35.3 0 64 28.6 64 64s-28.6 64-64 64h96v20.7zM384 320H273.2c22.1 38.2 63.4 64 110.8 64v-64z" />',
        viewBox: '0 0 512 512'
    };

    var globeLinkIcon = {
        name: 'globe-link',
        content: '<path d="M161.7 412.6C69.1 391.2 0 308.1 0 209 0 93.6 93.6 0 209 0s209 93.6 209 209c0 58.2-23.8 110.8-62.2 148.7-20.5-23.1-50.4-37.7-83.8-37.7-3.9 0-7.8.2-11.6.6 12-15.9 26.4-28.8 41.3-33 22.6-18.6 21.6-35.2 18.6-50.2-7-12.6-38.7-23.6-68.8-49.7-18.1-4-40.2 7.5-48.7-3.5-8.5-11.1-48.7-27.1-31.1-44.7s44.2.5 54.8-35.7C236.9 67.6 259 82.6 270 82.6c11.1 0 13.1-26.1-7.5-35.7-20.6-9.5-49.7-19.6-100.5-14.6-50.7 5-86.4 27.6-75.4 47.7 11.1 20.1 44.2 83.9 81.4 94.5 37.2 10.6 35.7 20.2 41.7 27.1 6 7-11.3 22.2 5.1 50.8 8.9 12 17 5 21 25.1 1.9 9.4-2.7 30.3-6.4 50.8-34.9 14.4-61 46-67.7 84.3zM224 432c0-5.1.8-10.1 2.3-14.7C232.5 398 250.6 384 272 384h64c-1.5-1.9-3-3.8-4.6-5.6-14.6-16.2-35.8-26.4-59.4-26.4-12.2 0-23.8 2.7-34.1 7.6-4.4 2.1-8.6 4.6-12.5 7.4-16.4 11.8-28.2 29.7-32 50.4-.9 4.7-1.4 9.6-1.4 14.6 0 44.2 35.8 80 80 80 26.2 0 49.4-12.6 64-32h-64c-26.5 0-48-21.5-48-48zm208-80c-26.2 0-49.4 12.6-64 32h64c26.5 0 48 21.5 48 48s-21.5 48-48 48h-64c14.6 19.4 37.8 32 64 32 44.2 0 80-35.8 80-80s-35.8-80-80-80zm0 64H272c-8.8 0-16 7.2-16 16s7.2 16 16 16h160c8.8 0 16-7.2 16-16s-7.2-16-16-16z" />',
        viewBox: '0 0 512 512'
    };

    var globeUnlinkIcon = {
        name: 'globe-unlink',
        content: '<path d="M161.7 412.6C69.1 391.2 0 308.1 0 209 0 93.6 93.6 0 209 0s209 93.6 209 209c0 58.2-23.8 110.8-62.2 148.7-20.5-23.1-50.4-37.7-83.8-37.7-3.9 0-7.8.2-11.6.6 12-15.9 26.4-28.8 41.3-33 22.6-18.6 21.6-35.2 18.6-50.2-7-12.6-38.7-23.6-68.8-49.7-18.1-4-40.2 7.5-48.7-3.5-8.5-11.1-48.7-27.1-31.1-44.7s44.2.5 54.8-35.7C236.9 67.6 259 82.6 270 82.6s13.1-26.1-7.5-35.7c-20.6-9.5-49.7-19.6-100.5-14.6-50.7 5-86.4 27.6-75.4 47.7 11.1 20.1 44.2 83.9 81.4 94.5 37.2 10.6 35.7 20.2 41.7 27.1 6 7-11.3 22.2 5.1 50.8 8.9 12 17 5 21 25.1 1.9 9.4-2.7 30.3-6.4 50.8-34.9 14.4-61 46-67.7 84.3M224 432c0-5.1.8-10.1 2.3-14.7C232.5 398 250.6 384 272 384h64c-1.5-1.9-3-3.8-4.6-5.6-14.6-16.2-35.8-26.4-59.4-26.4-12.2 0-23.8 2.7-34.1 7.6-4.4 2.1-8.6 4.6-12.5 7.4-16.4 11.8-28.2 29.7-32 50.4-.9 4.7-1.4 9.6-1.4 14.6 0 44.2 35.8 80 80 80 26.2 0 49.4-12.6 64-32h-64c-26.5 0-48-21.5-48-48m208-80c-26.2 0-49.4 12.6-64 32h64c26.5 0 48 21.5 48 48s-21.5 48-48 48h-64c14.6 19.4 37.8 32 64 32 44.2 0 80-35.8 80-80s-35.8-80-80-80" />',
        viewBox: '0 0 512 512'
    };

    var envelopLinkIcon = {
        name: 'envelop-link',
        content: '<path d="M224 432c0-5.1.8-10.1 2.3-14.7C232.5 398 250.6 384 272 384h64c-1.5-1.9-3-3.8-4.6-5.6-14.6-16.2-35.8-26.4-59.4-26.4-12.2 0-23.8 2.7-34.1 7.6-4.4 2.1-8.6 4.6-12.5 7.4-16.4 11.8-28.2 29.7-32 50.4-.9 4.7-1.4 9.6-1.4 14.6 0 44.2 35.8 80 80 80 26.2 0 49.4-12.6 64-32h-64c-26.5 0-48-21.5-48-48zm208-80c-26.2 0-49.4 12.6-64 32h64c26.5 0 48 21.5 48 48s-21.5 48-48 48h-64c14.6 19.4 37.8 32 64 32 44.2 0 80-35.8 80-80s-35.8-80-80-80zm0 64H272c-8.8 0-16 7.2-16 16s7.2 16 16 16h160c8.8 0 16-7.2 16-16s-7.2-16-16-16zM32 0C14.3 0 0 14.3 0 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V32c0-17.7-14.3-32-32-32H32zm23.7 32L224 200.3 392.3 32c11 2.9 19.7 11.6 22.6 22.6L310.6 158.9l104.3 104.3c-2.9 11-11.6 19.7-22.6 22.6L288 181.5l-64 64-64-64L55.7 285.8c-11-2.9-19.7-11.6-22.6-22.6l104.3-104.3L33.1 54.6C36 43.6 44.7 34.9 55.7 32z" />',
        viewBox: '0 0 512 512'
    };

    var anchorIcon = {
        name: 'anchor',
        content: '<path d="m352 288 44.5 44.5c-22.3 40.7-61.7 70.7-108.5 80.3V151.4c19.1-11.1 32-31.8 32-55.4 0-35.3-28.7-64-64-64s-64 28.7-64 64c0 23.6 12.9 44.3 32 55.4v261.4c-46.8-9.5-86.2-39.6-108.5-80.3L160 288H32v128l36.9-36.9C108.9 439.9 177.8 480 256 480s147.1-40.1 187.1-100.9L480 416V288H352zM256 64c17.6 0 32 14.4 32 32s-14.4 32-32 32-32-14.4-32-32 14.4-32 32-32z" />',
        viewBox: '0 0 512 512'
    };

    var tableAddIcon = {
        name: 'table-add',
        content: '<path d="M448 320V32H32v416h288V320h128zm-288 96H64v-96h96v96zm0-128H64v-96h96v96zm0-128H64V64h96v96zm128 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96zm32-96h96v96h-96V64zm0 224v-96h96v96h-96zm192 128v32h-64v64h-32v-64h-64v-32h64v-64h32v64h64z" />',
        viewBox: '0 0 512 512'
    };

    var tableIcon = {
        name: 'table',
        content: '<path d="M32 32v416h416V32H32zm256 32v96h-96V64h96zm0 128v96h-96v-96h96zM64 64h96v96H64V64zm0 128h96v96H64v-96zm0 224v-96h96v96H64zm128 0v-96h96v96h-96zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var tablePropertiesIcon = {
        name: 'table-properties',
        content: '<path d="m502.666 77.216-22.627 22.627-67.882-67.882 22.627-22.627c12.445-12.445 32.81-12.445 45.255 0l22.627 22.627c12.445 12.445 12.445 32.81 0 45.255zM392.483 51.635l67.882 67.882L290.66 288H224v-66.66L392.483 51.635zm22.627 67.882L392.483 96.89 256.719 232.654l22.627 22.627L415.11 119.517zM384 256l32-32v288H0V96h288l-32 32h-96v224h224v-96zM128 384H32v96h96v-96zm0-128H32v96h96v-96zm0-128H32v96h96v-96zm128 256h-96v96h96v-96zm128 0h-96v96h96v-96z" />',
        viewBox: '0 0 512 512'
    };

    var tableCellIcon = {
        name: 'table-cell',
        content: '<path d="M32 32v416h416V32H32zm128 384H64v-96h96v96zm0-128H64v-96h96v96zm0-128H64V64h96v96zm128 256h-96v-96h96v96zm0-256h-96V64h96v96zm128 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var tableCellPropertiesIcon = {
        name: 'table-cell-properties',
        content: '<path d="m502.666 77.216-22.627 22.627-67.882-67.882 22.627-22.627c12.445-12.445 32.81-12.445 45.255 0l22.627 22.627c12.445 12.445 12.445 32.81 0 45.255zM384 256l32-32v288H0V96h288l-32 32h-96v96h32v96h96v32h96v-96zM128 384H32v96h96v-96zm0-128H32v96h96v-96zm0-128H32v96h96v-96zm128 256h-96v96h96v-96zm128 0h-96v96h96v-96zm8.483-332.365 67.882 67.882-141.588 141.588L290.66 288H224v-66.66l26.895-28.118L392.483 51.635zm22.627 67.882L392.483 96.89 256.719 232.654l11.314 11.314 11.314 11.314L415.11 119.517z" />',
        viewBox: '0 0 512 512'
    };

    var tableColumnInsertLeftIcon = {
        name: 'table-column-insert-left',
        content: '<path d="M32 480V0h128v480H32zM480 32v416H192V32h288zM224 160h96V64h-96v96zm0 128h96v-96h-96v96zm0 128h96v-96h-96v96zm224-96h-96v96h96v-96zm0-32v-96h-96v96h96zm0-224h-96v96h96V64z" />',
        viewBox: '0 0 512 512'
    };

    var tableColumnInsertRightIcon = {
        name: 'table-column-insert-right',
        content: '<path d="M352 480V0h128v480H352zM320 32v416H32V32h288zm-32 32h-96v96h96V64zm0 128h-96v96h96v-96zm0 128h-96v96h96v-96zM64 416h96v-96H64v96zm96-128v-96H64v96h96zM64 160h96V64H64v96z" />',
        viewBox: '0 0 512 512'
    };

    var tableRowInsertAboveIcon = {
        name: 'table-row-insert-above',
        content: '<path d="M480 160H0V32h480v128zM32 192h416v288H32V192zm32 32v96h96v-96H64zm128 0v96h96v-96h-96zm128 0v96h96v-96h-96zm96 224v-96h-96v96h96zm-128-96h-96v96h96v-96zm-128 96v-96H64v96h96z" />',
        viewBox: '0 0 512 512'
    };

    var tableRowInsertBelowIcon = {
        name: 'table-row-insert-below',
        content: '<path d="M480 480H0V352h480v128zM32 32h416v288H32V32zm128 256v-96H64v96h96zm128 0v-96h-96v96h96zm128 0v-96h-96v96h96zM320 64v96h96V64h-96zm-32 0h-96v96h96V64zM64 64v96h96V64H64z" />',
        viewBox: '0 0 512 512'
    };

    var tableColumnDeleteIcon = {
        name: 'table-column-delete',
        content: '<path d="M192 288v224h128V288H192zm0-288v64h128V0H192zm160 32h128v416H352V32zm96 288h-64v96h64v-96zm0-128h-64v96h64v-96zm0-128h-64v96h64V64zM32 32h128v416H32V32zm96 288H64v96h64v-96zm0-128H64v96h64v-96zm0-128H64v96h64V64zm128 89.373L313.373 96 336 118.627 278.627 176 336 233.373 313.373 256 256 198.627 198.627 256 176 233.373 233.373 176 176 118.627 198.627 96 256 153.373z" />',
        viewBox: '0 0 512 512'
    };

    var tableRowDeleteIcon = {
        name: 'table-row-delete',
        content: '<path d="M224 192H0v128h224V192zm288 0h-64v128h64V192zm-32 160v128H64V352h416zm-288 96v-64H96v64h96zm128 0v-64h-96v64h96zm128 0v-64h-96v64h96zm32-416v128H64V32h416zm-288 96V64H96v64h96zm128 0V64h-96v64h96zm128 0V64h-96v64h96zm-89.373 128L416 313.373 393.373 336 336 278.627 278.627 336 256 313.373 313.373 256 256 198.627 278.627 176 336 233.373 393.373 176 416 198.627 358.627 256z" />',
        viewBox: '0 0 512 512'
    };

    var tableCellDeleteIcon = {
        name: 'table-cell-delete',
        content: '<path d="M96 192h160v128H96V192zM32 352h160v128H32V352zm32 32v64h96v-64H64zm128-224H32V32h160v128zm-32-96H64v64h96V64zm262.627 192L480 313.373 457.373 336 400 278.627 342.627 336 320 313.373 377.373 256 320 198.627 342.627 176 400 233.373 457.373 176 480 198.627 422.627 256z" />',
        viewBox: '0 0 512 512'
    };

    var tableDeleteIcon = {
        name: 'table-delete',
        content: '<path d="M32 32v416h416V32H32zm384 128h-64v32h64v96h-64v32h64v96h-96v-64h-32v64h-96v-64h-32v64H64v-96h64v-32H64v-96h64v-32H64V64h96v64h32V64h96v64h32V64h96v96zm-153.4 80 57.4 57.4-22.6 22.6-57.4-57.4-57.4 57.4-22.6-22.6 57.4-57.4-57.4-57.4 22.6-22.6 57.4 57.4 57.4-57.4 22.6 22.6-57.4 57.4z" />',
        viewBox: '0 0 512 512'
    };

    var cellsMergeIcon = {
        name: 'cells-merge',
        content: '<path d="M32 32v448h416V32H32zm160 32h96v64h-96V64zM64 64h96v64H64V64zm96 384H64v-64h96v64zm128 0h-96v-64h96v64zm128 0h-96v-64h96v64zm0-96H64V160h352v192zm0-224h-96V64h96v64z" />',
        viewBox: '0 0 512 512'
    };

    var cellsMergeHorizontallyIcon = {
        name: 'cells-merge-horizontally',
        content: '<path d="M32 32v416h416V32H32zm160 32h96v96h-96V64zM64 64h96v96H64V64zm96 352H64v-96h96v96zm128 0h-96v-96h96v96zm128 0h-96v-96h96v96zm0-128H64v-96h352v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var cellsMergeVerticallyIcon = {
        name: 'cells-merge-vertically',
        content: '<path d="M32 448h416V32H32v416zm32-160v-96h96v96H64zm0 128v-96h96v96H64zm352-96v96h-96v-96h96zm0-128v96h-96v-96h96zm0-128v96h-96V64h96zm-128 0v352h-96V64h96zm-128 0v96H64V64h96z" />',
        viewBox: '0 0 512 512'
    };

    var cellSplitHorizontallyIcon = {
        name: 'cell-split-horizontally',
        content: '<path d="M32 32v416h416V32H32zm32 32h160v64H64V64zm160 160h-64v-64h64v64zM64 160h64v64H64v-64zm0 96h160v64H64v-64zm0 160v-64h160v64H64zm192-256h64v64h-64v-64zm160 256H256v-64h160v64zm0-96H256v-64h160v64zm0-96h-64v-64h64v64zm0-96H256V64h160v64z" />',
        viewBox: '0 0 512 512'
    };

    var cellSplitVerticallyIcon = {
        name: 'cell-split-vertically',
        content: '<path d="M32 448h416V32H32v416zm32-32V256h64v160H64zm160-160v64h-64v-64h64zm-64 160v-64h64v64h-64zm96 0V256h64v160h-64zm160 0h-64V256h64v160zM160 224v-64h64v64h-64zM416 64v160h-64V64h64zm-96 0v160h-64V64h64zm-96 0v64h-64V64h64zm-96 0v160H64V64h64z" />',
        viewBox: '0 0 512 512'
    };

    var tableUnmergeIcon = {
        name: 'table-unmerge',
        content: '<path d="M32 32v416h416V32H32zm160 32h96v96h-96V64zm96 128v96h-96v-96h96zM64 64h96v96H64V64zm0 128h96v96H64v-96zm96 224H64v-96h96v96zm128 0h-96v-96h96v96zm128 0h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var paneFreezeIcon = {
        name: 'pane-freeze',
        content: '<path d="M32 32v416h416V32H32zm256 32 96 96h-64l-96-96h64zm-128 0 96 96h-64L96 64h64zM64 96l96 96v64l-96-96V96zm0 128 96 96v64l-96-96v-64zm0 192v-64l64 64H64zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96zm128 128h-96v-96h96v96zm0-128h-96v-96h96v96zM352 64h64v64l-64-64z" />',
        viewBox: '0 0 512 512'
    };

    var rowFreezeIcon = {
        name: 'row-freeze',
        content: '<path d="M32 448h416V32H32v416zM64 96l64 64H64V96zm96-32 96 96h-64L96 64h64zm128 0 96 96h-64l-96-96h64zm128 64-64-64h64v64zm-96 160v-96h96v96h-96zm-128 0v-96h96v96h-96zm-32 0H64v-96h96v96zm160 128v-96h96v96h-96zm-128 0v-96h96v96h-96zm-128 0v-96h96v96H64z" />',
        viewBox: '0 0 512 512'
    };

    var columnFreezeIcon = {
        name: 'column-freeze',
        content: '<path d="M32 32v416h416V32H32zm128 32v64L96 64h64zM64 96l96 96v64l-96-96V96zm0 128 96 96v64l-96-96v-64zm0 192v-64l64 64H64zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96zm-96-128V64h96v96h-96zm224 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var toolbarFloatIcon = {
        name: 'toolbar-float',
        content: '<path d="M64 352h416v128H64V352zm96 32H96v64h96v-64h-32zm160 0h-96v64h96v-64zm32 0v64h96v-64h-96zM63.961 131.844l90.51 90.51 45.255-45.255-90.51-90.51-45.255 45.255zm0 0 90.51 90.51 45.255-45.255-90.51-90.51-45.255 45.255zm158.392 67.882 67.882-67.882-22.627-22.627-22.627 22.627-90.51-90.51c-12.445-12.445-32.81-12.445-45.255 0l-67.882 67.882c-12.445 12.445-12.445 32.81 0 45.255l90.51 90.51-22.627 22.627 22.627 22.627 67.882-67.882L297.373 320 320 297.373l-97.647-97.647zm-67.882 22.627-90.51-90.51 45.255-45.255 90.51 90.51-45.255 45.255zM480 256h-64v64h64v-64z" />',
        viewBox: '0 0 512 512'
    };

    var spellCheckerIcon = {
        name: 'spell-checker',
        content: '<path d="M113.2 206.2c-7.4 6.2-15.6 10.7-24.6 13.5s-19.3 4.2-31 4.2c-8.4 0-16.1-1-23.1-2.9s-13.1-4.9-18.2-8.8c-5.1-3.9-9.1-8.8-12-14.6C1.4 192 0 185.2 0 177.5c0-18.9 8.1-32.9 24.4-41.9s40.9-13.5 74-13.5h13.7c0-2.6 0-5.3-.1-8.2-.1-2.9-.3-5.4-.7-7.6-.8-7.6-3.5-13.2-8-17-4.5-3.7-11.8-5.6-21.7-5.6-10.4 0-18.1 1.9-23.3 5.8s-7.8 9.5-7.8 16.8H7c2.4-32.7 27.8-49 76.3-49 6.6 0 12.6.2 17.9.6 5.3.4 10.2 1.1 14.6 2 4.4 1 8.6 2.2 12.5 3.7 3.9 1.5 7.6 3.4 11.4 5.7 3.5 2.2 6.4 4.7 9 7.4 2.5 2.8 4.6 6.1 6.4 9.9 1.7 3.9 3 8.3 3.8 13.3s1.2 10.8 1.2 17.4V224h-46.8l-.1-17.8zm-1-58H96.8c-16.2 0-28.4 2-36.5 5.9s-12.2 10.6-12.2 20.2c0 7.3 2.5 12.7 7.5 16.2s11.5 5.2 19.4 5.2c7.6 0 14.6-1.5 21.2-4.5s11.9-6.9 15.8-11.7v-31.3h.2zm125.2-61.6c5.5-7.2 12.3-12.8 20.2-16.7C265.5 66 274 64 283.1 64c10.2 0 19.2 1.9 26.8 5.7 7.7 3.8 14.1 9.2 19.3 16.3 5.2 7.1 9.1 15.7 11.7 25.9s4 21.6 4 34.3-1.2 19-4.3 29.4c-3 10.4-7.6 17.9-13.3 25.2-5.7 7.3-12.6 13-20.7 17.1s-17.3 6.1-27.5 6.1c-17.5 0-31.9-5.2-43.3-15.6V224H192V0h45.4v86.6zm0 91.7c4.4 4.1 9.1 7.2 14.1 9.4 5 2.1 10.5 3.2 16.5 3.2 9.8 0 17.4-4.3 22.7-12.8 5.3-8.6 7.9-14.7 7.9-31.8 0-32.7-9.6-49-28.7-49-6.2 0-12 1.9-17.4 5.6s-10.5 9-15.1 15.8v59.6zM442.2 224c-12.4 0-23.4-1.8-33.3-5.4-9.8-3.6-18.1-8.8-25-15.6-6.8-6.8-12-15.2-15.7-25.1-3.7-9.9-5.5-21.3-5.5-34s1.8-24 5.5-33.9 8.9-18.2 15.9-25.1c6.9-6.9 15.3-12.1 25.2-15.6 9.9-3.6 21.1-5.4 33.6-5.4 20 0 36 4.7 48 14.1s19 23 21 40.9h-41c-1-7-3.9-12.7-8.8-16.9-4.9-4.2-11.2-6.3-19.2-6.3-10.2 0-18.4 3.9-24.5 11.6s-9.2 19.9-9.2 36.6c0 16.5 3.1 28.7 9.2 36.5s14.3 11.7 24.5 11.7c7.9 0 14.4-2.1 19.3-6.3s7.8-9.8 8.7-16.9h41c-2.5 17.7-9.7 31.2-21.5 40.7-11.6 9.6-27.7 14.4-48.2 14.4zm69.8 0L224 512 64 352l64-64 96 96 288-160" />',
        viewBox: '0 0 512 512'
    };

    var validationXhtmlIcon = {
        name: 'validation-xhtml',
        content: '<path d="M192 224h-54l-26.2-96L86 224H32L0 64h42l22 96 22-96h52l22 96 22-96h42l-32 160zm272.5-121.8c4.7 4.2 7.4 9.8 8.5 16.8h38.9c-2-17.9-8.6-31.3-19.9-40.8-11.5-9.3-26.5-14-45.6-14-11.9 0-22.5 1.7-32 5.3-9.4 3.6-17.4 8.9-23.9 15.7-6.7 6.9-11.6 15.2-15.1 25-3.5 10-5.3 21.2-5.3 33.8 0 12.8 1.8 24 5.3 33.8 3.5 10 8.3 18.4 14.8 25.1 6.5 6.7 14.5 11.8 23.8 15.4 9.4 3.6 20 5.4 31.6 5.4 19.4 0 34.7-4.8 45.9-14.3 11.2-9.5 18-23 20.4-40.5H473c-.9 7-3.7 12.6-8.3 16.8-4.7 4.3-10.7 6.3-18.3 6.3-9.8 0-17.5-3.9-23.5-11.7-5.8-7.8-8.6-19.9-8.6-36.3 0-16.7 2.8-28.7 8.6-36.5 5.9-7.8 13.6-11.5 23.5-11.5 7.5 0 13.6 2 18.1 6.2zM316.7 219.8c7.3-2.3 13.6-5.8 18.9-10.2l.1-.1c5.2-4.6 9.1-9.9 11.8-16.1 2.8-6 4.2-12.7 4.2-20.7 0-10-2.7-18.4-8-25.3-3.5-4.4-7.9-7.9-13.2-10.5.3-.3.7-.5 1-.8 3.1-2.4 5.5-5 7.6-8.1 2-3 3.5-6.2 4.5-9.4 1-3.5 1.5-6.9 1.5-10.4 0-6.6-1.3-12.6-3.9-18.1-2.6-5.4-6.4-10.3-11.4-14.2-4.8-4.2-10.5-7.2-17-9.1-6.3-1.8-13.7-2.8-22.1-2.8-7.4 0-14.3 1-20.8 3.1-6.3 2.1-11.7 5.2-16.9 9.3-5 4.1-9 9.2-11.9 15.1-3 5.9-4.9 12.7-5.6 20.3l-.5 5.1h38.2l.5-4.4c1.6-14.6 9.9-16.5 16.9-16.5 4.8 0 8.3 1.1 10.7 3.3l.1.1c2.7 2.5 3.3 7.1 3.3 10.4 0 5.6-1.2 9.4-3.8 11.4l-.1.1c-2.8 2.4-7.2 3.5-13.4 3.5H276v31h13.7c7.4 0 12.8 1.4 16.3 4 3.3 2.7 4.9 6.5 4.9 12.2 0 2.9-.5 5.6-1.4 8-.9 2.3-2.1 4.1-3.9 5.9-1.4 1.5-3.4 2.7-5.9 3.6-2.4.9-5.2 1.4-8.4 1.4-3.4 0-6.3-.4-9-1.3-2.2-.8-4.1-2-5.7-3.5-1.6-1.6-2.8-3.3-3.7-5.2-.8-1.9-1.2-4.1-1.5-6.7l-.4-4.2h-39.1l.3 5c.5 7.4 2.3 14.5 5.3 21 3.1 6.1 7.8 11.8 14.2 16.6 4.9 3.8 10.8 6.6 17.8 8.4h.4c6.4 1.5 13.8 2.3 22.1 2.3 9.5 0 17.5-1.2 24.7-3.5zM64 352l64-64 96 96 288-160-288 288L64 352z" />',
        viewBox: '0 0 512 512'
    };

    var validationDataIcon = {
        name: 'validation-data',
        content: '<path d="m64 352 64-64 96 96 288-160-288 288L64 352zm48.6-193.6c0 13-2.5 24.4-7.6 34.4s-12.3 17.7-21.8 23.1c-9.4 5.4-20.3 8.1-32.7 8.1H0V96h49.5c42.1 0 63.1 20.8 63.1 62.4zm-38 .3c0-6.3-1.2-12-3.5-17-2.4-5-5.7-8.9-10.1-11.7-4.4-2.7-9.6-4.1-15.6-4.1H36v68h10.1c8.6 0 15.6-3.2 20.7-9.5 5.2-6.4 7.8-14.9 7.8-25.7zM216.2 224l-5.5-24h-37.2l-5.9 24H128l42.3-128h45.9L256 224h-39.8zm-23.6-100h-.9c-.1 1.4-.5 3.8-1.2 7.1s-4.1 17.2-10.4 41.9h23.4l-8.6-34.7c-1.1-5-1.9-9.8-2.3-14.3zm127.4 4v96h-32v-96h-32V96h98v32h-34zm120.2 96-5.5-24h-37.2l-5.9 24H352l42.3-128h45.9L480 224h-39.8zm-23.6-100h-.9c-.1 1.4-.5 3.8-1.2 7.1s-4.1 17.2-10.4 41.9h23.4l-8.6-34.7c-1.1-5-1.9-9.8-2.3-14.3z" />',
        viewBox: '0 0 512 512'
    };

    var toggleFullScreenModeIcon = {
        name: 'toggle-full-screen-mode',
        content: '<path d="M448 32H64c-17.6 0-32 14.4-32 32v288c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32zm0 319.942a.53.53 0 0 1-.058.058H64.058a.454.454 0 0 1-.058-.058V64.057a.511.511 0 0 1 .057-.057h383.885c.02.017.041.038.058.057v287.885zM384 480H128c35.346 0 64-28.654 64-64h128c0 35.346 28.654 64 64 64zm32-160H96c58.263-113.973 183.21-192 320-192v192z" />',
        viewBox: '0 0 512 512'
    };

    var formulaFxIcon = {
        name: 'formula-fx',
        content: '<path d="m214 183.4-24.7 110c-11.5 53.4-22.7 92.1-33.7 116.1-11 24-23.8 41.8-38.4 53.2-14.7 11.6-31.5 17.3-50.5 17.3-12 0-20.7-2.7-26.3-8-5.6-5.3-8.4-11.5-8.4-18.7 0-6.7 2.3-12.5 7-17.4 4.7-4.9 10.8-7.3 18.3-7.3 6.3 0 11.2 1.9 14.5 5.6 3.4 3.7 5.1 8.5 5.1 14.2 0 5.2-1 9.1-3.2 11.6-2.1 2.5-3.2 4.2-3.2 5l1 1.7c.8.8 1.8 1.2 3 1.2 4.2 0 7.8-1.5 10.8-4.7 7.4-7.7 13-17 16.6-27.9 2.5-7.5 7.4-27.4 14.5-59.5l43-192.6h-29.3l7-28.7c10.5.2 18.2-1.4 23-4.7 4.8-3.3 9.8-10.6 15.2-22 15.4-33.1 31.7-60.1 48.9-74.4S260.4 32 281.5 32c13.5 0 23.3 3 29.4 9.1 6.1 6.1 9.2 13.9 9.2 23.5 0 8.5-2 15.2-6.1 20.2-4.1 5.1-9.2 7.5-15.2 7.5-5.6 0-10.3-2-13.9-6.1-3.6-4.1-5.5-9-5.5-14.7 0-4.1 1.1-8.4 3.5-13 2.3-4.6 3.5-7.7 3.5-9.3 0-1.8-.5-3.3-1.6-4.4-1-1.1-2.4-1.7-4.1-1.7-8.3 0-16.8 5.9-25.5 17.9-14.3 19.1-25.9 52.5-34.5 93.8h30.5l-7.4 28.7-29.8-.1zm78.7 22.7 68.9-14.1c12.5 23.3 21.3 48.9 26.5 76.9 12.9-22.7 22.7-38.6 29.3-47.6 8.8-12.2 16.1-20.1 21.8-23.8 5.8-3.7 11.9-5.5 18.3-5.5 7.2 0 12.8 2.4 16.7 7 3.9 4.7 5.8 11 5.8 19 0 7.5-2 13.6-5.8 18.4-3.9 4.7-8.7 7.1-14.5 7.1-4.2 0-9-.9-14.5-2.7-5.4-1.8-9.3-2.7-11.3-2.7-5.6 0-10.8 2.4-15.8 7-6.8 6.4-15.2 20.1-25.3 41 11.2 46.9 20.1 75.5 26.9 85.8 3.9 6.1 7.9 9.2 12.1 9.2 3.4 0 6.4-1 8.9-3 3.8-3.3 9.7-11.5 17.6-24.6l7.1 4.9c-11.6 22.2-22.9 37.9-34 46.9-8.4 7-16.7 10.6-24.9 10.6-8.4 0-15.4-2.3-21-6.7-5.6-4.5-10.6-11.7-14.9-21.8-4.4-10-9.5-26.2-15.4-48.4-15.4 23.3-27.5 40.3-36.3 51-8.7 10.7-16 17.7-21.8 21-5.8 3.3-12 4.9-18.6 4.9-6.8 0-12.3-2.4-16.3-7-4-4.7-6-10.8-6-18.3 0-7.9 2.2-14.5 6.5-19.6 4.3-5.2 9.9-7.7 16.6-7.7 3.6 0 7.6 1.3 12.1 3.7 6.6 3.8 11.3 5.7 14.2 5.7 3.8 0 7.2-.9 10.3-2.8 3.9-2.4 9-7.4 15-15.3 3.7-4.8 10.5-15.1 20.4-31-12.6-55.8-22.5-89.1-29.6-100-4.5-7-10.2-10.6-17-10.6-3.6 0-7.9.6-13 1.9l1-8.8z" />',
        viewBox: '0 0 512 512'
    };

    var sumIcon = {
        name: 'sum',
        content: '<path d="M416 64v128l-64-64H160l128 128-128 128h192l64-64v128H96v-64l128-128L96 128V64h320z" />',
        viewBox: '0 0 512 512'
    };

    var symbolIcon = {
        name: 'symbol',
        content: '<path d="m448 416 32-32v96H320V375.8c11.4-5.1 22.2-11.5 32-19 38.9-29.7 64-76.9 64-130.1C416 136.8 344.4 64 256 64S96 136.8 96 226.7c0 53.2 25.1 100.5 64 130.1 9.8 7.5 20.6 13.9 32 19V480H32v-96l32 32h96v-18.5C84.3 366.7 32 300.6 32 224 32 118 132.3 32 256 32s224 86 224 192c0 76.6-52.3 142.7-128 173.5V416h96z" />',
        viewBox: '0 0 512 512'
    };

    var dollarIcon = {
        name: 'dollar',
        content: '<path d="M326.6 273c-8.3-7.3-18.4-13.6-30.4-19.1-11.8-5.4-25.2-10.2-40.2-14.5V131.3c6.5.8 13 2.2 17.7 4.2 7.5 3.3 13.7 7.8 18.8 13.7 5.1 5.8 8.9 12.7 11.4 20.7 2.6 8 3.8 16.7 3.8 26.2H352c0-29.2-7.5-52-22.5-68.8s-36-26.8-62.9-30.1c0 0-5-.4-10.6-.8V32h-32v66.2c-11.9 1.5-22.6 4.3-32.2 8.4-10.6 4.5-19.6 10.3-27.1 17.5-7.5 7.2-13.2 15.6-17.2 25.4-4 9.7-6 20.5-6 32.2 0 12.7 2.2 23.8 6.7 33.4s11 18.2 19.5 25.6 18.8 13.8 30.9 19.3c7.8 3.5 16.3 6.8 25.4 9.7v110.7c-2.7-.4-5.4-.9-8.1-1.5-7.9-1.8-15.2-5.1-21.7-9.8-6.5-4.7-11.8-11-15.8-19s-6-18-6-30H128c0 16.2 2.6 30 7.9 41.6 5.3 11.6 12.4 21.2 21.3 28.6 8.9 7.5 19.1 13.3 30.6 17.3s23.4 6.5 35.7 7.5c0 0 .2 0 .5.1V480h32v-64.7c1.9-.2 3.1-.3 3.1-.3 14.1-1.3 26.9-4.1 38.4-8.3 11.5-4.3 21.3-10 29.4-17.1 8.1-7.1 14.3-15.6 18.6-25.4 4.3-9.8 6.5-20.9 6.5-33.2 0-12.5-2.2-23.5-6.5-33-4.3-9.4-10.6-17.8-18.9-25zm-104.7-46.2c-8.8-4.1-15.9-8.4-21.2-12.9s-9.1-9.6-11.3-15c-2.2-5.5-3.4-11.6-3.4-18.5 0-7.4 1.2-14.1 3.6-20.3 2.4-6.1 6-11.3 10.8-15.7 4.8-4.3 10.9-7.7 18.3-10.1 1.7-.6 3.5-1 5.3-1.5v94.9c-.6-.2-1.4-.5-2.1-.9zm81 125.2c-3 6.2-7.5 11.4-13.2 15.8-5.8 4.3-12.8 7.7-21.2 10-3.9 1.1-8.1 1.9-12.5 2.5V279.2c5.6 2 10.7 4.1 15.3 6.2 8.6 4 15.6 8.3 20.9 13 5.4 4.7 9.3 9.7 11.7 15.1 2.4 5.4 3.6 11.3 3.6 17.7 0 7.7-1.5 14.7-4.6 20.8z" />',
        viewBox: '0 0 512 512'
    };

    var percentIcon = {
        name: 'percent',
        content: '<path d="M352 64h32L160 448h-32L352 64zm16 160c-44.2 0-80 50.1-80 112s35.8 112 80 112 80-50.1 80-112-35.8-112-80-112zm0 192c-22.7 0-48-32.9-48-80s25.3-80 48-80 48 32.9 48 80-25.3 80-48 80zM144 64c-44.2 0-80 50.1-80 112s35.8 112 80 112 80-50.1 80-112-35.8-112-80-112zm0 192c-22.7 0-48-32.9-48-80s25.3-80 48-80 48 32.9 48 80-25.3 80-48 80z" />',
        viewBox: '0 0 512 512'
    };

    var customFormatIcon = {
        name: 'custom-format',
        content: '<path d="M128 128v224H80V182.4s-13.1 19.1-48 19.1v-40.6c34.9 0 61.7-32.9 61.7-32.9H128zm94.4 184H320v40H169v-16.6c.3-11.3 2.2-21.4 6-30.3 3.8-9 8.6-17 14.3-24.1s12-13.4 18.8-18.9 13.3-10.4 19.4-14.8c6.5-4.6 12.1-9 17-13.2s9-8.4 12.3-12.5 5.8-8.3 7.5-12.6c1.6-4.2 2.5-8.8 2.5-13.6 0-9.4-2.7-16.5-8-21.4-5.3-4.8-13.5-7.2-24.4-7.2-18.9 0-37.1 7.5-54.4 22.6v-42.7c19.2-12.4 40.8-18.6 64.8-18.6 11.2 0 21.2 1.5 30 4.4 8.9 2.9 16.4 7.1 22.5 12.5s10.8 12 14.1 19.7c3.2 7.7 4.8 16.4 4.8 25.9 0 10.1-1.6 19.2-4.7 27-3.1 7.9-7.3 15.1-12.4 21.5-5.2 6.5-11.1 12.4-17.9 17.7-6.8 5.4-13.8 10.6-21 15.6-4.9 3.5-9.7 6.9-14.2 10.4-4.6 3.4-8.6 6.8-12.1 10.1s-6.2 6.6-8.3 9.8c-2.2 3.1-3.2 9.3-3.2 9.3zM341 341.2v-41.7s32.1 15.8 51.5 15.8c12.2 0 21.8-2.6 28.6-7.9 6.8-5.3 10.2-12.5 10.2-21.9 0-9.7-4.2-17.1-12.7-22.3-8.4-5.3-20-7.9-34.8-7.2H364v-37h17.7c28.4 0 42.6-9.4 42.6-28.1 0-17.6-10.9-26.4-32.7-26.4-14.7 0-28.8 4.7-42.6 14v-38.9c15.4-7.7 33.1-11.5 53.6-11.5 22.3 0 39.6 5 52.1 14.9 12.4 10 18.7 22.9 18.7 38.8 0 28.3-14.5 46-43.4 53.2v.3c15.5 1.9 27.6 7.5 36.5 16.8 8.9 9.2 13.3 20.6 13.3 34 0 20.3-7.4 36.4-22.4 48.2-15 11.8-35.5 17.7-61.7 17.7-22.3.1-40.6-3.5-54.7-10.8z" />',
        viewBox: '0 0 512 512'
    };

    var decimalIncreaseIcon = {
        name: 'decimal-increase',
        content: '<path d="M384 256c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64 35.4 0 64-28.7 64-64v-64c0-35.3-28.6-64-64-64zm32 118c0 23.6-14.3 42.7-32 42.7-17.6 0-32-19.1-32-42.7v-42.7c0-23.5 14.4-42.6 32-42.6 17.7 0 32 19.1 32 42.6V374zM384 32c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64 35.4 0 64-28.7 64-64V96c0-35.3-28.6-64-64-64zm32 118c0 23.6-14.3 42.7-32 42.7-17.6 0-32-19.1-32-42.7v-42.7c0-23.6 14.4-42.7 32-42.7 17.7 0 32 19.1 32 42.7V150zM224 256c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64s64-28.7 64-64v-64c0-35.3-28.6-64-64-64zm32 118c0 23.6-14.3 42.7-32 42.7s-32-19.1-32-42.7v-42.7c0-23.5 14.3-42.6 32-42.6s32 19.1 32 42.6V374zM96 416h32v32H96v-32zm160-224h32v32h-32v-32zM192 32v192L64 128l128-96z" />',
        viewBox: '0 0 512 512'
    };

    var decimalDecreaseIcon = {
        name: 'decimal-decrease',
        content: '<path d="M384 32c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64 35.4 0 64-28.7 64-64V96c0-35.3-28.6-64-64-64zm32 116.7c0 23.5-14.3 42.6-32 42.6-17.6 0-32-19.1-32-42.6V106c0-23.6 14.4-42.7 32-42.7 17.7 0 32 19.1 32 42.7v42.7zM384 256c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64 35.4 0 64-28.7 64-64v-64c0-35.3-28.6-64-64-64zm32 116.7c0 23.6-14.3 42.7-32 42.7-17.6 0-32-19.1-32-42.7V330c0-23.6 14.4-42.7 32-42.7 17.7 0 32 19.1 32 42.7v42.7zM224 32c-35.3 0-64 28.7-64 64v64c0 35.3 28.7 64 64 64 35.4 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64zm32 116.7c0 23.5-14.3 42.6-32 42.6s-32-19.1-32-42.6V106c0-23.6 14.3-42.7 32-42.7s32 19.1 32 42.7v42.7zM128 224H96v-32h32v32zm128 192h32v32h-32v-32zM64 256l128 96-128 96V256z" />',
        viewBox: '0 0 512 512'
    };

    var fontSizeIcon = {
        name: 'font-size',
        content: '<path d="M97 224 32 416h29l16.9-50H146l16.9 50h29l-65-192H97zm-8.9 112 23.9-70.6 23.9 70.6H88.1zM376 96h-48L224 416h48l26-80h108l26 80h48L376 96zm-62.4 192L352 169.8 390.4 288h-76.8z" />',
        viewBox: '0 0 512 512'
    };

    var imageAbsolutePositionIcon = {
        name: 'image-absolute-position',
        content: '<path d="M416 240c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48zm96-80v320c0 17.7-14.3 32-32 32H160c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h320c17.7 0 32 14.3 32 32zm-32 26.7c0-14.7-11.9-26.7-26.7-26.7H186.7c-14.7 0-26.7 11.9-26.7 26.7V384l96-96 96 96 64-64 64 64V186.7zM32 0H0v512h32v-64h32v-32H32v-64h32v-32H32v-64h32v-32H32v-64h32v-32H32V32h96v32h32V32h64v32h32V32h64v32h32V32h64v32h32V32h64V0H32z" />',
        viewBox: '0 0 512 512'
    };

    var tableWizardIcon = {
        name: 'table-wizard',
        content: '<path d="M160 384V160h224v96l32 32V0H0v416h288l-32-32h-96zM288 32h96v96h-96V32zm-128 0h96v96h-96V32zm-32 352H32v-96h96v96zm0-128H32v-96h96v96zm0-128H32V32h96v96zm376.6 362.1-15.5 15.5c-8.6 8.6-22.4 8.6-31 0l-124-124c-8.6-8.6-8.6-22.4 0-31l15.5-15.5c8.6-8.6 22.4-8.6 31 0l124 124c8.6 8.5 8.6 22.4 0 31zm-158.5-209-21-14.8c-3.2-2.3-5.1-6-5.1-10l.3-25.7c.1-6.6-5.2-12.1-11.8-12.2-2.6 0-5.2.8-7.3 2.4l-20.6 15.4c-3.2 2.4-7.3 3-11 1.8l-24.3-8.3c-6.8-2.3-14.3 1.9-15.7 9.3-.4 2.1-.1 4.2.5 6.2l8.2 24.1c1.3 3.7.6 7.8-1.8 11l-15.4 20.6c-4.3 5.8-2.6 14.2 4 17.8 1.9 1 4 1.4 6.1 1.4l25.4-.3c3.9-.1 7.7 1.8 10 5.1l14.8 21c4.2 5.9 12.7 6.9 18.1 1.7 1.5-1.5 2.6-3.3 3.2-5.3l7.5-24.3c1.2-3.8 4.1-6.7 7.9-7.9l24.5-7.6c6.3-2 9.8-8.7 7.9-15-.7-2.7-2.3-4.9-4.4-6.4z" />',
        viewBox: '0 0 512 512'
    };

    var crosstabIcon = {
        name: 'crosstab',
        content: '<path d="M192.3 32H32v160h1v288h447V32H192.3zm-.3 416H96v-96h96v96zm0-128H96v-96h96v96zm0-128H96V96h96v96zm128 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V96h96v96zm128 256h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V96h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var crosstabWizardIcon = {
        name: 'crosstab-wizard',
        content: '<path d="M192 416V192h224v96l32 32V0H0v160h1v288h318.7l-31.9-32H192zM320 64h96v96h-96V64zm-128 0h96v96h-96V64zm-32 352H64v-96h96v96zm0-128H64v-96h96v96zm0-128H64V64h96v96zm344.6 330.1-15.5 15.5c-8.6 8.6-22.4 8.6-31 0l-124-124c-8.6-8.6-8.6-22.4 0-31l15.5-15.5c8.6-8.6 22.4-8.6 31 0l124 124c8.6 8.5 8.6 22.4 0 31zM221.2 300.8c-4.3 5.8-2.6 14.2 4 17.8 1.9 1 4 1.4 6.1 1.4l25.4-.3c3.9-.1 7.7 1.8 10 5.1l14.8 21c4.2 5.9 12.7 6.9 18.1 1.7 1.5-1.5 2.6-3.3 3.2-5.3l7.5-24.3c1.2-3.8 4.1-6.7 7.9-7.9l24.5-7.6c6.3-2 9.9-8.7 7.9-15-.8-2.5-2.4-4.7-4.5-6.2l-21-14.8c-3.2-2.3-5.1-6-5.1-10l.3-25.7c.1-6.6-5.2-12.1-11.8-12.2-2.6 0-5.2.8-7.3 2.4l-20.6 15.4c-3.2 2.4-7.3 3-11 1.8l-24.3-8.3c-6.8-2.3-14.3 1.9-15.7 9.3-.4 2.1-.1 4.2.5 6.2l8.2 24.1c1.3 3.7.6 7.8-1.8 11l-15.3 20.4z" />',
        viewBox: '0 0 512 512'
    };

    var tableBodyIcon = {
        name: 'table-body',
        content: '<path d="M32 32v416h416V32H32zm256 32v96h-96V64h96zm128 256v64L224 192h64l128 128zM64 64h96v96H64V64zm0 128h96v96H64v-96zm0 224v-96h96v96H64zm128 0v-64l64 64h-64zm128 0L192 288v-64l192 192h-64zm96-160-64-64h64v64zm0-96h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var tableColumnGroupsIcon = {
        name: 'table-column-groups',
        content: '<path d="M32 32v416h416V32H32zm256 32v64l-64-64h64zm0 320-96-96v-64l96 96v64zM192 96l96 96v64l-96-96V96zM64 64h96v96H64V64zm0 128h96v96H64v-96zm0 224v-96h96v96H64zm128 0v-64l64 64h-64zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var tableCornerIcon = {
        name: 'table-corner',
        content: '<path d="M32 32v416h416V32H32zm256 32v96h-96V64h96zm0 128v96h-96v-96h96zM160 64v64L96 64h64zM64 96l64 64H64V96zm0 96h96v96H64v-96zm0 224v-96h96v96H64zm128 0v-96h96v96h-96zm224 0h-96v-96h96v96zm0-128h-96v-96h96v96zm0-128h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var tableRowGroupsIcon = {
        name: 'table-row-groups',
        content: '<path d="M32 32v416h416V32H32zm256 32v96h-96V64h96zm-64 128h64l96 96h-64l-96-96zm32 96h-64l-96-96h64l96 96zM64 64h96v96H64V64zm0 160 64 64H64v-64zm0 192v-96h96v96H64zm128 0v-96h96v96h-96zm224 0h-96v-96h96v96zm0-160-64-64h64v64zm0-96h-96V64h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var globeOutlineIcon = {
        name: 'globe-outline',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zM64 256c0-57 24.8-108.2 64.3-143.3.3 1.8 1 3.6 1.9 5.4 11.9 22.1 47.7 92.5 87.8 104.1 40.1 11.6 38.6 22.2 45 29.9 6.5 7.7-12.2 24.4 5.6 55.9 9.6 13.2 18.3 5.5 22.6 27.6 4.1 21-20.6 95-7.8 110.4-9 1.3-18.1 2-27.4 2-106 0-192-86-192-192zm222.4 189.6c10.5-37 41.8-89.2 75.8-98.9 24.4-20.5 23.3-38.8 20.1-55.4-7.6-13.9-41.7-26-74.3-54.8-19.5-4.4-43.4 8.3-52.6-3.9-9.2-12.2-52.6-29.9-33.6-49.3s47.7.6 59.1-39.3 35.2-23.2 47.2-23.2S342.2 92 320 81.5c-16.7-7.9-38.6-16.1-71.7-17.4 2.6-.1 5.2-.2 7.8-.2 106 0 192 86 192 192C448 351.7 378 431 286.4 445.6z" />',
        viewBox: '0 0 512 512'
    };

    var globeIcon = {
        name: 'globe',
        content: '<path d="M256 32C132.3 32 32 132.3 32 256s100.3 224 224 224 224-100.3 224-224S379.7 32 256 32zm106.2 314.7c-34.7 10-66.7 64.2-76.4 101.3-17.9-9.4 9.8-90.2 5.4-112.4-4.3-22.1-13-14.4-22.6-27.6-17.8-31.5.9-48.3-5.6-55.9-6.5-7.7-4.9-18.3-45-29.9-40.1-11.6-75.9-81.9-87.8-104.1-11.9-22.1 26.6-47 81.3-52.6 10.3-1 19.7-1.5 28.4-1.5 37.8.1 61.9 9 80 17.5 22.2 10.5 20.1 39.3 8.1 39.3s-35.8-16.6-47.2 23.2-40.1 19.9-59.1 39.3 24.4 37.1 33.6 49.3c9.2 12.2 33.1-.6 52.6 3.9 32.6 28.8 66.7 41 74.3 54.8 3.3 16.6 4.4 34.9-20 55.4z" />',
        viewBox: '0 0 512 512'
    };

    var mapMarkerIcon = {
        name: 'map-marker',
        content: '<path d="M256 0C158.8 0 80 78.8 80 176s176 336 176 336 176-238.8 176-336S353.2 0 256 0zm0 288c-61.9 0-112-50.1-112-112S194.1 64 256 64s112 50.1 112 112-50.1 112-112 112z" />',
        viewBox: '0 0 512 512'
    };

    var mapMarkerTargetIcon = {
        name: 'map-marker-target',
        content: '<path d="M256 0C158.8 0 80 78.8 80 176s176 336 176 336 176-238.8 176-336S353.2 0 256 0zm0 288c-61.9 0-112-50.1-112-112S194.1 64 256 64s112 50.1 112 112-50.1 112-112 112zm48-112c0 26.5-21.5 48-48 48s-48-21.5-48-48 21.5-48 48-48 48 21.5 48 48z" />',
        viewBox: '0 0 512 512'
    };

    var pinIcon = {
        name: 'pin',
        content: '<path d="M320 256V96c0-17.6-14.4-32-32-32h-96c-17.6 0-32 14.4-32 32v160H96v32h128v160h32V288h128v-32h-64zm-128 0V96h64v160h-64z" />',
        viewBox: '0 0 512 512'
    };

    var unpinIcon = {
        name: 'unpin',
        content: '<path d="M256 320h160c17.6 0 32-14.4 32-32v-96c0-17.6-14.4-32-32-32H256V96h-32v128H64v32h160v128h32v-64zm0-128h160v64H256v-64z" />',
        viewBox: '0 0 512 512'
    };

    var shareIcon = {
        name: 'share',
        content: '<path d="M480 432c0 44.2-35.8 80-80 80s-80-35.8-80-80c0-10.6 2.1-20.7 5.8-30l-158.6-88.1C152.9 327.6 133.4 336 112 336c-44.2 0-80-35.8-80-80s35.8-80 80-80c21.4 0 40.9 8.4 55.2 22.1L325.8 110c-3.8-9.3-5.8-19.4-5.8-30 0-44.2 35.8-80 80-80s80 35.8 80 80-35.8 80-80 80c-22 0-41.9-8.9-56.4-23.3l-158 87.8c4.1 9.7 6.4 20.3 6.4 31.5s-2.3 21.8-6.4 31.5l158 87.8C358.1 360.9 378 352 400 352c44.2 0 80 35.8 80 80z" />',
        viewBox: '0 0 512 512'
    };

    var userIcon = {
        name: 'user',
        content: '<path d="M352 128c0 53-43 96-96 96s-96-43-96-96 43-96 96-96 96 43 96 96zm-96 128c-106 0-192 86-192 192 0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32 0-106-86-192-192-192z" />',
        viewBox: '0 0 512 512'
    };

    var inboxIcon = {
        name: 'inbox',
        content: '<path d="M384 32H128L32 288v160c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V288L384 32zM150.2 64h211.6l84 224H352l-32 64H192l-32-64H66.2l84-224z" />',
        viewBox: '0 0 512 512'
    };

    var bloggerIcon = {
        name: 'blogger',
        content: '<path d="M188.9 64C119.9 64 64 119.5 64 188v136.1C64 392.5 119.9 448 188.9 448h134.4c69 0 124.7-55.5 124.7-123.9v-87.9c0-13.7-11-28.2-24.8-28.2h-21.5c-13.2 0-24.7-11.2-25.6-24 0-68.5-55.2-120-124.2-120h-63zm-4.9 96h72c13.2 0 24 10.8 24 24s-10.8 24-24 24h-72c-13.2 0-24-10.8-24-24s10.8-24 24-24zm0 144h144c13.2 0 24 10.8 24 24s-10.8 24-24 24H184c-13.2 0-24-10.8-24-24s10.8-24 24-24z" />',
        viewBox: '0 0 512 512'
    };

    var bloggerBoxIcon = {
        name: 'blogger-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-31 280.7c0 57.1-46.6 103.3-104.2 103.3H200.4C142.7 416 96 369.8 96 312.7V199.3C96 142.2 142.7 96 200.4 96h52.1C310 96 356 138.9 356 196c.7 10.7 10.4 20 21.4 20h18c11.5 0 20.7 12.1 20.6 23.5l1 73.2zM196 216h60c11 0 20-9 20-20s-9-20-20-20h-60c-11 0-20 9-20 20s9 20 20 20zm120 80H196c-11 0-20 9-20 20s9 20 20 20h120c11 0 20-9 20-20s-9-20-20-20z" />',
        viewBox: '0 0 512 512'
    };

    var deliciousIcon = {
        name: 'delicious',
        content: '<path d="M256 32h224v224H256V32zM32 256h224v224H32V256z" />',
        viewBox: '0 0 512 512'
    };

    var deliciousBoxIcon = {
        name: 'delicious-box',
        content: '<path d="M480 448V64c0-17.7-14.3-32-32-32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32zm-224-32V256H96V96h160v160h160v160H256z" />',
        viewBox: '0 0 512 512'
    };

    var diggIcon = {
        name: 'digg',
        content: '<path d="M96 96v64H32v160h96V96H96zm64 0v32h32V96h-32zm0 64v160h32V160h-32zm64 0v160h64v32h-64v32h96V160h-96zm128 0v160h64v32h-64v32h96V160h-96zM64 192h32v96H64v-96zm192 0h32v96h-32v-96zm128 0h32v96h-32v-96z" />',
        viewBox: '0 0 512 512'
    };

    var diggBoxIcon = {
        name: 'digg-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM160 203.5V352H64V192h64v-64h32v75.5zM212 352h-32V192h32v160zm0-192h-32v-32h32v32zm119 153.7V416h-96v-32h64v-32h-64V192h96v121.7zm117 0V416h-96v-32h64v-32h-64V192h96v121.7zM96 224h32v96H96v-96zm171 0h32v96h-32v-96zm117 0h32v96h-32v-96z" />',
        viewBox: '0 0 512 512'
    };

    var envelopIcon = {
        name: 'envelop',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm23.7 32L256 296.3 424.3 128c11 2.9 19.7 11.6 22.6 22.6L342.6 254.9l104.3 104.3c-2.9 11-11.6 19.7-22.6 22.6L320 277.5l-64 64-64-64L87.7 381.8c-11-2.9-19.7-11.6-22.6-22.6l104.3-104.3L65.1 150.6c2.9-11 11.6-19.7 22.6-22.6z" />',
        viewBox: '0 0 512 512'
    };

    var envelopBoxIcon = {
        name: 'envelop-box',
        content: '<path d="m377 182.4-88.8 88.8-31.2 29-33.2-29-88.8-88.8c-7.7 2-13.8 8.1-15.8 15.8l73 73-73 73c2 7.7 8.1 13.8 15.8 15.8l73-73 49 44.8 47-44.8 73 73c7.7-2 13.8-8.1 15.8-15.8l-73-73 73-73c-2-7.7-8.1-13.8-15.8-15.8zM448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-32 329.6c0 12.4-10 22.4-22.4 22.4H118.4C106 384 96 374 96 361.6V182.4c0-12.4 10-22.4 22.4-22.4h275.2c12.4 0 22.4 10 22.4 22.4v179.2z" />',
        viewBox: '0 0 512 512'
    };

    var facebookIcon = {
        name: 'facebook',
        content: '<path d="M290 32c-59.8 0-96 32-96 96v64h-66v96h66v192h96V288h80l14-96h-94v-32c0-32 32-32 32-32h62V34.9c-7.2-.9-65.4-2.9-94-2.9z" />',
        viewBox: '0 0 512 512'
    };

    var facebookBoxIcon = {
        name: 'facebook-box',
        content: '<path d="M57.6 32C43.6 32 32 43.5 32 57.6v396.8c0 14 11.5 25.6 25.6 25.6h396.8c14 0 25.6-11.5 25.6-25.6V57.6c0-14-11.5-25.6-25.6-25.6H57.6zm315.8 65.5c24.1 0 42 2.3 42 2.3L414 155s-18.2-.2-38.1-.2c-21.5 0-24.9 9.9-24.9 26.1V224h64.1l-2.8 59H351v165h-63V283h-44v-59h44v-50.5c0-39.6 25.8-76 85.4-76z" />',
        viewBox: '0 0 512 512'
    };

    var googleIcon = {
        name: 'google',
        content: '<path d="M268.3 33c-16.1-1-33.4 1-52 4.9s-36.4 12.8-53.2 26.5c-12.6 11-21.9 23.4-28.3 37.3-6.3 13.9-9.4 27.7-9.4 41.5 0 11.4 2.1 22.7 6.5 33.8 4.3 11.1 10.6 21.1 18.8 29.7 8.2 8.6 18.4 15.6 30.6 20.9 12.2 5.3 26.1 7.9 41.8 7.9 3.1 0 6.2-.1 9.4-.3s6.3-.5 9.4-.9c-1.6 3.5-2.9 7-4.1 10.3-1.2 3.3-1.8 7.6-1.8 12.6 0 9 1.9 16.5 5.6 22.6s7.7 11.9 12 17.4c-6.7.4-14.5 1-23.5 1.8s-18.6 2.1-28.8 4.1-20.5 4.6-30.9 7.9-20.1 7.7-29.1 13.2c-17.2 10.2-29.1 22-35.6 35.6-6.5 13.6-9.7 25.6-9.7 36.2 0 11 2.6 21.5 7.7 31.5s12.9 18.9 23.5 26.7c10.6 7.9 23.8 14.1 39.7 18.8 15.9 4.7 34.4 7 55.5 7 25.1 0 47.3-3.2 66.7-9.7s35.6-14.9 48.5-25.3 22.7-22.3 29.4-35.6c6.7-13.3 10-26.9 10-40.6 0-10.2-1.4-19.3-4.2-27.1-2.7-7.9-6.4-14.9-10.8-21.2-4.5-6.3-9.8-12.2-15.9-17.7s-12.3-11-18.5-16.5l-21.1-16.5c-3.2-2.8-6.5-6-10-9.7s-5.3-8.9-5.3-15.6c0-6.7 1.8-12.2 5.3-16.5s7.2-8.4 11.2-12.4c6.2-4.7 12.4-9.7 18.2-15 5.9-5.3 11.2-11.2 15.9-17.6 4.7-6.5 8.4-13.8 11.2-22.1 2.7-8.2 4.1-17.9 4.1-28.8s-1.5-20.8-4.7-29.5c-3.1-8.6-6.8-16.2-11.2-22.7-4.3-6.5-8.8-12-13.5-16.5S315.3 52 315.3 52H352l31.7-20-115.4 1zm-37.1 17.8c12.2 0 22.8 3.6 32 10.9s17 16.4 23.2 27.5c6.2 11 11 22.8 14.1 35.4s4.7 24.2 4.7 34.8c0 5.5-.8 12.4-2.3 20.7s-5.7 15.7-12.4 22.4c-4.7 4.7-10.7 8.7-18 11.8-7.3 3.2-14.6 4.7-22 4.7-12.5 0-23.4-3.6-32.6-10.9-9.2-7.3-16.9-16.3-22.9-26.8-6.1-10.6-10.6-22-13.5-34.2s-4.4-23.2-4.4-33.1c0-7.9.9-15.5 2.7-23S185 76.6 190 70.3c4.7-5.9 10.8-10.6 18.2-14.1 7.5-3.6 15.1-5.4 23-5.4zM260 314h7.3c1.8 0 3.8.2 6.2.6 11 7.8 20.6 14.9 28.8 21.2 8.2 6.2 14.9 12.4 20 18.2 5.1 5.9 8.9 11.8 11.5 18 2.5 6 3.8 12.8 3.8 20.3 0 18.4-7.3 33.6-22 45.6-14.7 11.9-36.2 17.9-64.4 17.9-31.8 0-57-6.7-75.6-20s-27.9-30.6-27.9-51.7c0-10.6 2.1-19.4 6.2-26.5 4.1-7 8.9-12.9 14.4-17.6s11.1-8.3 16.8-10.8c5.7-2.6 10.1-4.4 13.2-5.6 6.3-2 12.7-3.6 19.4-5s12.9-2.4 18.8-3c5.9-.6 11-1 15.3-1.2 4.2-.2 7-.3 8.2-.4z" />',
        viewBox: '0 0 512 512'
    };

    var googleBoxIcon = {
        name: 'google-box',
        content: '<path d="M212.6 236.1c5.1-5.1 8.2-10.8 9.4-17.1s1.8-11.6 1.8-15.8c0-8.1-1.2-17-3.6-26.6s-6-18.6-10.8-27-10.7-15.4-17.7-21-15.2-8.4-24.4-8.4c-6 0-11.8 1.3-17.5 4.1s-10.3 6.3-13.9 10.8c-3.9 4.8-6.5 10-7.8 15.7s-2 11.6-2 17.6c0 7.5 1.1 15.9 3.4 25.2 2.3 9.3 5.7 18 10.3 26.1s10.5 14.9 17.5 20.5c7 5.5 15.3 8.3 24.9 8.3 5.7 0 11.3-1.2 16.8-3.6s10-5.2 13.6-8.8zM448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM270.9 394.1c-5.1 10.2-12.6 19.3-22.4 27.2s-22.2 14.4-37 19.4c-14.8 4.9-31.8 7.4-50.9 7.4-16.2 0-30.3-1.8-42.4-5.4s-22.2-8.4-30.3-14.4-14.1-12.8-18-20.4-5.9-15.6-5.9-24c0-8.1 2.5-17.2 7.4-27.6s14-19.4 27.2-27.2c6.8-4.2 14.3-7.6 22.2-10.1s15.8-4.6 23.6-6c7.8-1.5 15.1-2.5 22-3.1s12.9-1.1 18-1.3c-3.3-4.2-6.4-8.6-9.2-13.3s-4.3-10.4-4.3-17.3c0-3.9.4-7.1 1.3-9.7s1.9-5.2 3.1-7.9c-2.4.3-4.8.5-7.2.7s-4.8.2-7.2.2c-12 0-22.6-2-31.9-6-9.3-4-17.1-9.3-23.4-15.9-6.3-6.6-11.1-14.1-14.3-22.7s-4.9-17.2-4.9-25.8c0-10.5 2.4-21 7.2-31.6s12-20.1 21.6-28.5c12.8-10.5 26.4-17.2 40.6-20.2s27.5-4.5 39.7-4.6H288l-28.7 16h-27.8c2.7 1.9 5.8 4.7 9.4 8.1 3.6 3.5 7 7.6 10.3 12.6s6.1 10.7 8.5 17.3 3.6 14.1 3.6 22.5-1.1 15.7-3.1 22c-2.1 6.3-4.9 11.9-8.5 16.9s-7.6 9.4-12.1 13.5-9.2 7.9-13.9 11.5c-3 3-5.9 6.1-8.5 9.4s-4 7.5-4 12.6 1.3 9.1 4 11.9 5.2 5.3 7.6 7.4l16.2 12.6c4.8 4.2 9.5 8.4 14.1 12.6 4.6 4.2 8.7 8.7 12.1 13.5 3.5 4.8 6.2 10.1 8.3 16.2s3.2 12.9 3.2 20.7c-.1 10.2-2.6 20.5-7.8 30.8zm-34.1-42.6c-3.9-4.5-9-9.1-15.3-13.9s-13.6-10.2-22-16.2c-1.8-.3-3.4-.4-4.7-.4h-5.6c-.9 0-3 .1-6.3.2s-7.2.4-11.7.9-9.3 1.2-14.3 2.3-10 2.3-14.8 3.8c-2.4.9-5.8 2.3-10.1 4.3s-8.6 4.7-12.8 8.3-7.8 8.1-11 13.5c-3.1 5.4-4.7 12.1-4.7 20.2 0 16.2 7.1 29.3 21.3 39.5s33.4 15.3 57.7 15.3c21.5 0 37.9-4.5 49.2-13.7s16.8-20.7 16.8-34.8c0-5.7-1-10.8-2.9-15.5s-4.9-9.3-8.8-13.8z" />',
        viewBox: '0 0 512 512'
    };

    var googlePlusIcon = {
        name: 'google-plus',
        content: '<path d="M204.3 33c-16.1-1-33.4 1-52 4.9s-36.4 12.8-53.2 26.5c-12.6 11-22 23.4-28.3 37.3s-9.4 27.7-9.4 41.5c0 11.4 2.1 22.7 6.5 33.8 4.3 11.1 10.6 21.1 18.8 29.7 8.2 8.6 18.4 15.6 30.6 20.9 12.2 5.3 26.1 7.9 41.8 7.9 3.1 0 6.2-.1 9.4-.3s6.3-.5 9.4-.9c-1.6 3.5-2.9 7-4.1 10.3-1.2 3.3-1.8 7.6-1.8 12.6 0 9 1.9 16.5 5.6 22.6s7.7 11.9 12 17.4c-6.7.4-14.5 1-23.5 1.8s-18.6 2.1-28.8 4.1-20.5 4.6-30.9 7.9-20.1 7.7-29.1 13.2c-17.2 10.2-29.1 22-35.6 35.6-6.5 13.6-9.7 25.6-9.7 36.2 0 11 2.6 21.5 7.7 31.5s12.9 18.9 23.5 26.7C73.8 462 87 468.3 102.9 473s34.4 7 55.6 7c25.1 0 47.3-3.2 66.7-9.7s35.6-14.9 48.5-25.3 22.7-22.3 29.4-35.6c6.7-13.3 10-26.9 10-40.6 0-10.2-1.4-19.3-4.2-27.1-2.7-7.9-6.4-14.9-10.8-21.2-4.5-6.3-9.8-12.2-15.9-17.7s-12.3-11-18.5-16.5l-21.2-16.5c-3.2-2.8-6.5-6-10-9.7s-5.3-8.9-5.3-15.6c0-6.7 1.8-12.2 5.3-16.5s7.2-8.4 11.2-12.4c6.2-4.7 12.4-9.7 18.2-15 5.9-5.3 11.2-11.2 15.9-17.6 4.7-6.5 8.4-13.8 11.2-22.1 2.7-8.2 4.1-17.9 4.1-28.8s-1.5-20.8-4.7-29.5c-3.1-8.6-6.8-16.2-11.2-22.7-4.3-6.5-8.8-12-13.5-16.5S251.3 52 251.3 52H288l31.7-20-115.4 1zm-37 17.8c12.2 0 22.8 3.6 32 10.9s17 16.4 23.2 27.5c6.2 11 11 22.8 14.1 35.4s4.7 24.2 4.7 34.8c0 5.5-.8 12.4-2.3 20.7-1.6 8.3-5.7 15.7-12.4 22.4-4.7 4.7-10.7 8.7-18 11.8-7.3 3.2-14.6 4.7-22 4.7-12.5 0-23.4-3.6-32.6-10.9-9.2-7.3-16.9-16.3-22.9-26.8-6.1-10.6-10.6-22-13.5-34.2s-4.4-23.2-4.4-33.1c0-7.9.9-15.5 2.7-23S121 76.6 126 70.3c4.7-5.9 10.8-10.6 18.2-14.1 7.5-3.6 15.2-5.4 23.1-5.4zM196.1 314h7.3c1.8 0 3.8.2 6.2.6 11 7.8 20.6 14.9 28.8 21.2 8.2 6.2 14.9 12.4 20 18.2 5.1 5.9 8.9 11.8 11.5 18 2.5 6 3.8 12.8 3.8 20.3 0 18.4-7.3 33.6-22 45.6-14.7 11.9-36.2 17.9-64.4 17.9-31.8 0-57-6.7-75.6-20s-27.9-30.6-27.9-51.7c0-10.6 2.1-19.4 6.2-26.5s8.9-12.9 14.4-17.6 11.1-8.3 16.8-10.8c5.7-2.6 10.1-4.4 13.2-5.6 6.3-2 12.7-3.6 19.4-5s12.9-2.4 18.8-3c5.9-.6 11-1 15.3-1.2 4.2-.2 6.9-.3 8.2-.4zM384 32v64h-64v32h64v64h32v-64h64V96h-64V32h-32z" />',
        viewBox: '0 0 512 512'
    };

    var googlePlusBoxIcon = {
        name: 'google-plus-box',
        content: '<path d="M212.6 236.1c5.1-5.1 8.2-10.8 9.4-17.1s1.8-11.6 1.8-15.8c0-8.1-1.2-17-3.6-26.6s-6-18.6-10.8-27-10.7-15.4-17.7-21-15.2-8.4-24.4-8.4c-6 0-11.8 1.3-17.5 4.1s-10.3 6.3-13.9 10.8c-3.9 4.8-6.5 10-7.8 15.7s-2 11.6-2 17.6c0 7.5 1.1 15.9 3.4 25.2 2.3 9.3 5.7 18 10.3 26.1s10.5 14.9 17.5 20.5c7 5.5 15.3 8.3 24.9 8.3 5.7 0 11.3-1.2 16.8-3.6s10-5.2 13.6-8.8zM448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM270.9 394.1c-5.1 10.2-12.6 19.3-22.4 27.2s-22.2 14.4-37 19.4c-14.8 4.9-31.8 7.4-50.9 7.4-16.2 0-30.3-1.8-42.4-5.4s-22.2-8.4-30.3-14.4-14.1-12.8-18-20.4-5.9-15.6-5.9-24c0-8.1 2.5-17.2 7.4-27.6s14-19.4 27.2-27.2c6.8-4.2 14.3-7.6 22.2-10.1s15.8-4.6 23.6-6c7.8-1.5 15.1-2.5 22-3.1s12.9-1.1 18-1.3c-3.3-4.2-6.4-8.6-9.2-13.3s-4.3-10.4-4.3-17.3c0-3.9.4-7.1 1.3-9.7s1.9-5.2 3.1-7.9c-2.4.3-4.8.5-7.2.7s-4.8.2-7.2.2c-12 0-22.6-2-31.9-6-9.3-4-17.1-9.3-23.4-15.9-6.3-6.6-11.1-14.1-14.3-22.7s-4.9-17.2-4.9-25.8c0-10.5 2.4-21 7.2-31.6s12-20.1 21.6-28.5c12.8-10.5 26.4-17.2 40.6-20.2s27.5-4.5 39.7-4.6H288l-28.7 16h-27.8c2.7 1.9 5.8 4.7 9.4 8.1 3.6 3.5 7 7.6 10.3 12.6s6.1 10.7 8.5 17.3 3.6 14.1 3.6 22.5-1.1 15.7-3.1 22c-2.1 6.3-4.9 11.9-8.5 16.9s-7.6 9.4-12.1 13.5-9.2 7.9-13.9 11.5c-3 3-5.9 6.1-8.5 9.4s-4 7.5-4 12.6 1.3 9.1 4 11.9 5.2 5.3 7.6 7.4l16.2 12.6c4.8 4.2 9.5 8.4 14.1 12.6 4.6 4.2 8.7 8.7 12.1 13.5 3.5 4.8 6.2 10.1 8.3 16.2s3.2 12.9 3.2 20.7c-.1 10.2-2.6 20.5-7.8 30.8zM448 192h-64v64h-32v-64h-64v-32h64V96h32v64h64v32zM236.8 351.5c-3.9-4.5-9-9.1-15.3-13.9s-13.6-10.2-22-16.2c-1.8-.3-3.4-.4-4.7-.4h-5.6c-.9 0-3 .1-6.3.2s-7.2.4-11.7.9-9.3 1.2-14.3 2.3-10 2.3-14.8 3.8c-2.4.9-5.8 2.3-10.1 4.3s-8.6 4.7-12.8 8.3-7.8 8.1-11 13.5c-3.1 5.4-4.7 12.1-4.7 20.2 0 16.2 7.1 29.3 21.3 39.5s33.4 15.3 57.7 15.3c21.5 0 37.9-4.5 49.2-13.7s16.8-20.7 16.8-34.8c0-5.7-1-10.8-2.9-15.5s-4.9-9.3-8.8-13.8z" />',
        viewBox: '0 0 512 512'
    };

    var linkedinIcon = {
        name: 'linkedin',
        content: '<path d="M112 32c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zM64 160v288h96V160H64zm128 0v288h96V288c0-32 32-32 32-32s32 0 32 32v160h96V290.9c0-66.5-13.6-130.9-96-130.9-36.2 0-62.9 32-64 44.9V160h-96z" />',
        viewBox: '0 0 512 512'
    };

    var linkedinBoxIcon = {
        name: 'linkedin-box',
        content: '<path d="M448 32H64c-17.6 0-32 14.4-32 32v384c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32zM160 416H96V192h64v224zm-32-256c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm288 256h-64V288c0-17.7-14.3-32-32-32s-32 14.3-32 32v128h-64V192h64v39.7c13.2-18.1 33.4-39.7 56-39.7 39.8 0 72 35.8 72 80v144z" />',
        viewBox: '0 0 512 512'
    };

    var myspaceIcon = {
        name: 'myspace',
        content: '<path d="M400 64c-44.2 0-80 35.8-80 80s35.8 80 80 80 80-35.8 80-80-35.8-80-80-80zm-176 64c-35.4 0-64 28.6-64 64s28.6 64 64 64 64-28.6 64-64-28.6-64-64-64zM80 192c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm320 64c-44.2 0-80 36.1-80 80.5V448h160V336.5c0-44.5-35.8-80.5-80-80.5zm-176 32c-35.4 0-64 31.5-64 70.3V448h128v-89.7c0-38.8-28.6-70.3-64-70.3zM80 320c-26.5 0-48 21.8-48 48.7V448h96v-79.3c0-26.9-21.5-48.7-48-48.7z" />',
        viewBox: '0 0 512 512'
    };

    var myspaceBoxIcon = {
        name: 'myspace-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM128 416H64v-63.5c0-17.9 14.3-32.5 32-32.5s32 14.5 32 32.5V416zM96 288c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm160 128h-96v-75.3c0-29.1 21.5-52.7 48-52.7s48 23.6 48 52.7V416zm-48-160c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm208 160H288v-92.9c0-37.1 27.2-67.1 64-67.1s64 30 64 67.1V416zm-64-192c-35.4 0-64-28.6-64-64s28.6-64 64-64 64 28.6 64 64-28.6 64-64 64z" />',
        viewBox: '0 0 512 512'
    };

    var pinterestIcon = {
        name: 'pinterest',
        content: '<path d="M250.7 32C126.6 32 64 119.7 64 192.7c0 44.3 17 83.6 53.5 98.3 6 2.4 11.4.1 13.1-6.4 1.2-4.5 4.1-15.9 5.3-20.7 1.8-6.5 1.1-8.7-3.7-14.3-10.5-12.2-17.2-28.1-17.2-50.5 0-65.1 49.4-123.3 128.6-123.3 70.2 0 108.7 42.2 108.7 98.6 0 74.2-33.3 136.8-82.8 136.8-27.3 0-47.8-22.2-41.2-49.6 7.9-32.6 23.1-67.8 23.1-91.3 0-21.1-11.5-38.7-35.2-38.7-27.9 0-50.4 28.5-50.4 66.6 0 24.3 8.3 40.7 8.3 40.7s-28.6 119.3-33.6 140.2c-10 41.6-1.5 92.7-.8 97.8.5 3 4.4 3.7 6.2 1.5 2.6-3.3 35.9-43.8 47.2-84.2 3.2-11.4 18.4-70.8 18.4-70.8 9.1 17.1 35.6 32.1 63.8 32.1 84 0 141-75.4 141-176.4C416 103 350.3 32 250.7 32z" />',
        viewBox: '0 0 512 512'
    };

    var pinterestBoxIcon = {
        name: 'pinterest-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM276.6 327.3c-19.8 0-38.5-10.8-44.9-22.9 0 0-10.7 42.4-12.9 50.5-8 28.9-31.4 57.8-33.2 60.2-1.3 1.6-4.1 1.1-4.4-1.1-.5-3.7-6.5-40.1.5-69.9 3.5-14.9 23.6-100.2 23.6-100.2s-5.9-11.7-5.9-29.1c0-27.2 15.8-47.6 35.5-47.6 16.7 0 24.8 12.5 24.8 27.6 0 16.8-10.7 41.9-16.2 65.2-4.6 19.5 9.8 35.4 29 35.4 34.8 0 58.3-44.7 58.3-97.7 0-40.3-27.1-70.4-76.5-70.4-55.7 0-90.5 41.6-90.5 88 0 16 4.7 27.3 12.1 36.1 3.4 4 3.9 5.6 2.6 10.2-.9 3.4-2.9 11.5-3.7 14.8-1.2 4.6-5 6.3-9.2 4.6-25.6-10.4-37.6-38.5-37.6-70.2C128 158.6 172 96 259.4 96c70.2 0 116.4 50.8 116.4 105.3-.1 72.1-40.2 126-99.2 126z" />',
        viewBox: '0 0 512 512'
    };

    var redditIcon = {
        name: 'reddit',
        content: '<path d="M420.3 33c-7 0-14.5 1-22.4 3h-1.7c-12.4 4.8-21.9 12.3-28.8 22.5-17-7-34-10.4-50.7-10.4-6.3 0-12.6.6-19.1 1.9H296c-8.8 2.1-16.5 5.8-23.3 11s-12.4 11.6-16.6 19.1c-5.3 8.7-8.9 31.3-10.5 41.1-1.7 9.8-2.6 25-2.6 34.7-20.9 1.5-41.8 4.5-62.8 9.1s-40.6 11.9-59 21.9c-1.3.4-2.5.9-3.5 1.3s-2 .9-2.9 1.3c-6.2-4.5-13-8-20.5-10.6-7.8-2.6-16.1-3.9-24.9-3.9h-5.8c-8.7 0-16.7 1.6-24.1 4.8s-14.1 7.7-20.3 13.4c-5.8 5.8-10.3 12.2-13.9 19.4-3.6 7.3-5.3 14.8-5.3 22.7.4 10.8 4.4 21.3 11.8 31.4 5.7 8.3 13.8 15.4 24.3 21.1-.5 2.1-.7 4.4-1 6.8-.2 2.5-.3 4.8-.3 6.9 0 10 1.5 20 4.5 30.1 3 10.1 7.4 19.4 13.1 28.1 10.9 16.6 24.5 30.5 40.9 41.6 16.4 11 33.8 20.2 52.1 27.2 17.5 6.6 35.5 11.6 54 14.8 18.6 3.3 37.4 5 56.6 5 12.5 0 25.1-.8 37.5-2.4 12.5-1.6 25-3.7 37.6-6.3 23.2-5.5 45.5-13.9 66.8-25.1s39.4-26 54.3-44.3c17.1-20.5 25.6-43.4 25.6-68.8 0-2.6-.1-5.1-.4-7.5-.3-2.4-.5-4.7-.9-6.8 10-4.9 18.3-11.9 24.9-21.1 7.1-9.6 10.6-20.3 10.6-32v-3c-1.2-13.4-6.8-25.1-16.3-34.9-9.8-10-21.2-16.7-34.2-20.1h-.6c-6-1.3-11.6-1.9-16.9-1.9-14.1-.2-26.6 3.2-37.4 10.2-2.3 1.1-5.2 2.8-8.6 5.4-.8-.9-1.8-1.3-2.6-1.3l-.7-.6c-18.2-9.6-37.5-16.9-57.7-21.8-20.1-4.9-40.6-8-61.6-9.3 0-7.7.7-34.2 1.8-41.9s3.7-14.8 7.5-21.4c4.9-9.6 13.4-15.1 25.6-16.4h5.8c7.4 0 14.7 1.1 21.7 3 7.1 2 14.1 4.3 21.2 6.9v1.9c0 7.5 1.5 14.2 4.5 20.3 2.9 6 6.9 11.6 11.8 16.5 10.3 10.4 22.8 16.3 37.7 17.5h7.3c14.9 0 28.1-4.8 39.8-14.4 5.3-4.4 9.7-9.6 13.1-15.5s5.5-12.5 6.4-20c.4-1.3.6-3.2.6-5.8.2-11-3.3-21.4-10.3-30.9-7.1-9.2-15.8-15.7-26.2-19.5h-.5c-6.5-2.7-14.1-4.1-22.9-4zm1.2 27.4c7.2.1 13.2 2.7 18.3 7.7C446 73 449 79.2 449 86.7V88c-.8 6.8-3.9 12.7-9.3 17.6-5.5 4.9-11.9 7.4-19.1 7.4h-1.9c-7.1 0-13.4-2.5-19.4-7.4-5.5-4.7-8.3-10.6-8.3-17.6v-1.3c0-6.6 2.1-12.1 6.5-16.6 3.8-4.7 8.9-7.7 15.1-8.9 2-.4 4.4-.6 7.5-.6.4-.2.9-.2 1.4-.2zm-165 125.7c10 0 20.3.5 30.8 1.6 10.6 1.1 20.9 2.7 30.8 4.8l9.9 2.6 10.2 2.6c17.5 4.9 34.1 11.9 49.9 21.1 15.8 9.2 29 20.8 40 34.9 5.1 7.3 9.2 14.9 12.3 23 3.1 8.1 4.6 16.5 4.6 25.3v7.6c0 2.3-.4 4.6-1.3 6.7-2.8 12.4-8.5 24-17.3 34.9-7.4 10-17 19.2-28.8 27.5-17.5 11.7-36.4 20.7-56.9 26.9-20.4 6.2-41.3 10.1-62.7 11.8-3.6.5-7.3.6-10.8.6h-10.8c-21.3 0-42.4-2.2-63.1-6.6-20.8-4.4-40.3-11.4-58.6-21l-4.5-2.6-4.8-2.2c-13-8.3-24.4-17.5-34.5-27.5-10.2-11.5-17.2-24-21.1-37.4-1.7-5.2-2.6-11.2-2.6-18.2 0-18.1 5.6-34.2 16.9-48.3 11-14.1 24.4-25.8 40.1-35.2s32.2-16.5 49.7-21.4c26.2-7.7 53.7-11.6 82.6-11.5zM65.7 204h3.2c3.2 0 6.1.4 8.8 1.3 2.6.9 5.4 1.7 8.4 2.6-8.7 7-16.5 14.6-23.5 22.7-6.9 8.1-12.8 17-17.7 26.6-2.8-2-5.2-4.8-7.4-8.6-3-3.5-4.5-7.8-4.5-13.1v-2.1c.7-7.7 4-14.4 10.3-20.2 7.1-5.3 14.6-8.3 22.4-9.2zm377.6-.4c6.4 0 12.7 1.5 18.9 4.4 6.1 3.5 10.8 7.8 13.7 13.2 2.1 4.5 3.2 8.6 3.2 12.5 0 5.3-1.2 10.1-3.8 14.4-2.4 3.6-5 6.7-8 9.2-4.7-10-10.6-19.1-17.6-27.2-7-8.1-14.9-15.6-23.6-22.7 5.3-2.6 11-3.8 17.2-3.8zm-107.6 43.2c-3.6 0-7.4.7-11.2 1.9-6.2 2.2-11.2 5.9-15 11.2-4 4.7-6.1 10.3-6.1 16.9 0 2.4.2 4.2.6 5.5v.6c1.3 7.5 5.1 13.1 11.2 17 6.2 4.7 13.2 7 21.1 7 2.5 0 5.5-.6 9-1.9h.9c5.6-1.1 11-4.5 16.3-10.2 3.8-5.3 5.8-11.4 5.8-18 0-3-.6-6.2-2-9.6-1.6-6.2-5.6-11.3-11.8-15.3-5.9-3.3-12.2-5.1-18.8-5.1zm-158.8-.1c-2.6 0-4.7.2-6.3.7-5.8.9-10.8 3.1-15.2 6.9-4.4 3.7-7.4 8.3-9.1 13.6-.9 1.2-1.3 2.7-1.3 4.1v4.2c0 7 1.9 13.2 5.8 18.6 4.2 5.1 9.6 8.5 16.3 10.2 3 1.2 6.3 1.9 9.9 1.9 8.3 0 15.8-2.8 22.4-8.3 7.1-5.7 10.6-12.8 10.6-21.1v-2c0-7.9-3.3-14.6-9.9-20.1-7.2-5.8-14.9-8.7-23.2-8.7zm-1.6 94c-1.2 0-3.2.5-5.7 1.3h-.8c-2.6.8-5 2.7-7.3 5.7-1.2 2.1-1.9 4.8-1.9 8 0 2.6.6 5.2 1.9 8 1.3 2.2 3.2 3.9 5.8 5.1 24.5 15.4 51.4 23.1 80.7 23.1h4.8c14.1 0 27.8-1.3 41-4s26.1-6.9 38.5-12.6c1.7-.9 3.5-1.7 5.4-2.6 1.9-.8 3.9-1.9 6-3.2 2.2-.9 4-2.1 5.5-3.8 2.1-2.1 3.3-4.4 3.8-6.8.4-.8.7-1.9.7-3.2 0-1.3-.4-3.2-1.3-5.8-1.3-3.2-3.5-5.4-6.4-6.7-3.3-1.7-6.2-2.6-8.6-2.6-2.5 0-5.3.6-8 2-23.2 13-48.6 19.6-76 19.8-20.4 0-39.5-3.9-57-11.8-2.5-.9-5.7-2.9-9.2-6.1-.9-.4-1.8-.8-2.8-1.3-1-.5-2.2-.9-3.3-1.3-2.7-.8-4.6-1.3-5.8-1.2z" />',
        viewBox: '0 0 512 512'
    };

    var redditBoxIcon = {
        name: 'reddit-box',
        content: '<path d="M111.1 244.9c-5.2 6.1-9.6 12.7-13.2 19.9-2.1-1.5-3.9-3.6-5.5-6.5-2.3-2.6-3.4-5.9-3.4-9.8v-1.4c.5-5.8 3-10.8 7.7-15.1 5.3-4 10.9-6.3 16.8-7h2.4c2.4 0 4.6.3 6.6 1 2 .6 4.1 1.3 6.3 1.9a124.3 124.3 0 0 0-17.7 17zm252.1-94.3c4.4 3.7 9.1 5.4 14.4 5.4h1.4c5.3 0 10-1.8 14.2-5.4 4-3.7 6.3-8 6.9-13.1v-1c0-5.5-2.3-10.1-6.9-13.8-3.8-3.8-8.3-5.6-13.6-5.7h-1.1c-2.2 0-4.1.1-5.5.5-4.6.9-8.4 3.2-11.2 6.6-3.3 3.4-4.8 7.4-4.8 12.4v1c0 5.1 2 9.5 6.2 13.1zM394.5 279c2.3 6.1 3.5 12.4 3.5 19v5.7c0 1.8-.3 3.4-1 5-2.1 9.3-6.4 18-13 26.2-5.6 7.5-12.8 14.4-21.6 20.6-13.1 8.8-27.3 15.5-42.7 20.2-15.4 4.7-31 7.6-47 8.9-2.7.4-5.5.5-8.1.5h-8.1c-16 0-31.8-1.6-47.4-4.9s-30.2-8.5-44-15.7l-3.4-1.9-3.6-1.7c-9.8-6.2-18.3-13.1-25.8-20.6-7.7-8.6-12.9-18-15.8-28.1-1.3-3.9-1.9-8.4-1.9-13.7 0-13.6 4.2-25.7 12.7-36.3 8.3-10.6 18.3-19.3 30.1-26.4 11.8-7 24.2-12.4 37.3-16.1 19.6-5.7 40.2-8.7 61.8-8.7h.1c7.5 0 15.2.4 23.1 1.2s15.6 2 23.1 3.6l7.4 1.9 7.7 1.9c13.1 3.7 25.6 9 37.4 15.8 11.9 6.9 21.8 15.6 30 26.2 3.8 5.6 6.9 11.4 9.2 17.4zm-205.9 21.9c2.3.9 4.7 1.4 7.5 1.4 6.3 0 12-2.1 16.9-6.3 5.3-4.3 8-9.7 8-15.9v-1.5c0-5.9-2.5-11-7.5-15.2-5.3-4.3-11.2-6.6-17.4-6.6-1.9 0-3.5.1-4.7.5-4.3.6-8.2 2.3-11.5 5.2-3.3 2.8-5.5 6.3-6.9 10.3-.7.9-1 2-1 3.1v3.1c0 5.3 1.4 10 4.3 14 3.3 4 7.3 6.7 12.3 7.9zm139.5 38.2c0-1-.3-2.4-1-4.3-1-2.4-2.6-4.1-4.7-4.9-2.5-1.3-4.6-1.9-6.4-1.9-1.9 0-4 .5-5.9 1.5-17.2 9.6-36 14.5-56.2 14.7-15.1 0-29.3-3-42.2-8.8-1.9-.6-4.2-2.2-6.8-4.6-.6-.3-1.3-.6-2.1-1s-1.6-.6-2.4-1c-1.9-.6-3.4-1-4.3-1v.1c-.9 0-2.4.4-4.3 1h-.5c-1.9.6-3.7 2-5.4 4.3-.9 1.6-1.4 3.6-1.4 5.9 0 1.9.5 3.9 1.4 5.9 1 1.6 2.4 2.9 4.3 3.8 18.2 11.4 38.1 17.1 59.8 17.1h3.6c10.5 0 20.6-1 30.4-3 9.8-2 19.3-5.1 28.5-9.4 1.2-.6 2.6-1.3 4.1-1.9 1.4-.6 3-1.4 4.5-2.4 1.6-.7 3-1.6 4.1-2.9 1.6-1.6 2.5-3.3 2.9-5-.2-.4 0-1.2 0-2.2zm12.2-59.2c0-2.2-.5-4.6-1.5-7.2-1.2-4.6-4.2-8.4-8.8-11.5-4.5-2.6-9.2-3.9-14.1-3.9-2.7 0-5.5.5-8.4 1.4-4.6 1.6-8.4 4.4-11.3 8.4-3 3.5-4.6 7.8-4.6 12.7 0 1.8.2 3.1.4 4.1v.5c1 5.6 3.8 9.8 8.4 12.7 4.6 3.5 9.9 5.3 15.8 5.3 1.9 0 4.1-.5 6.7-1.4h.7c4.2-.8 8.2-3.4 12.2-7.7 3-3.9 4.5-8.4 4.5-13.4zM480 64v384c0 17.6-14.4 32-32 32H64c-17.6 0-32-14.4-32-32V64c0-17.6 14.4-32 32-32h384c17.6 0 32 14.4 32 32zm-32.3 181c-.9-10.3-5.2-19.1-12.4-26.6-7.4-7.6-16.2-12.7-26-15.4h-.1c-4.5-1-8.7-1.4-12.7-1.4-10.6-.2-19.8 2.4-28 7.7-1.7.8-3.9 2.1-6.5 4.1-.6-.6-1.3-1-1.9-1l-.5-.5c-13.7-7.2-28-12.7-43.1-16.3-15.1-3.7-30.4-6-46.1-7 0-5.8.5-25.5 1.4-31.3.9-5.8 2.8-11.1 5.6-16.1 3.6-7.2 10.1-11.3 19.1-12.3h4.3c5.6 0 11 .8 16.3 2.3s10.6 3.2 15.9 5.2v1.5c0 5.6 1.1 10.8 3.4 15.3 2.2 4.5 5.2 8.7 8.8 12.5 7.7 7.8 17.1 12.3 28.4 13.3h5.5c11.2 0 21.1-3.6 30.1-10.9 4-3.3 7.3-7.2 9.8-11.7 2.6-4.4 4.2-9.4 4.8-15.1.3-1 .5-2.4.5-4.3.2-8.3-2.4-16.2-7.7-23.4-5.3-6.9-11.9-11.9-19.7-14.7h-.5c-4.9-2.3-10.7-3.4-17.3-3.4-5.4 0-11.1.8-17.1 2.4h-.4c-9.7 3.8-17.1 9.7-22.5 17.6-13.3-5.4-26.5-8-39.5-8-4.9 0-9.9.5-14.9 1.4h.9c-6.6 1.6-12.4 4.4-17.5 8.3-5.1 3.9-9.3 8.7-12.5 14.3-4 6.5-6.6 23.5-7.9 30.9-1.3 7.3-1.9 18.7-1.9 26-15.7 1.1-31.3 3.4-47.2 6.8-15.7 3.5-30.4 8.9-44.2 16.4-1 .3-1.8.7-2.6 1s-1.5.6-2.2 1c-4.7-3.4-9.7-6-15.4-7.9-5.9-1.9-12.1-2.9-18.6-2.9h-4.3c-6.5 0-12.6 1.2-18.1 3.6s-10.6 5.8-15.2 10.1c-4.3 4.3-7.8 9.2-10.4 14.5-2.7 5.4-3.9 11-3.9 16.9.3 8.1 3.3 16 8.9 23.5 4.3 6.2 10.4 11.5 18.2 15.8-.4 1.6-.6 3.3-.7 5.1-.1 1.8-.2 3.6-.2 5.2 0 7.5 1.1 15 3.4 22.6 2.3 7.5 5.5 14.6 9.8 21.1 8.1 12.5 18.4 22.9 30.7 31.2s25.3 15.1 39.1 20.4c13.1 5 26.6 8.7 40.5 11.1 13.9 2.5 28.1 3.7 42.4 3.7 9.4 0 18.8-.6 28.1-1.8 9.4-1.2 18.8-2.8 28.2-4.7 17.4-4.1 34.1-10.4 50.2-18.8s29.5-19.5 40.8-33.2c12.8-15.4 19.2-32.6 19.2-51.7 0-1.9-.1-3.8-.3-5.6-.2-1.8-.4-3.6-.7-5.1 7.5-3.7 13.7-8.9 18.7-15.8 5.3-7.2 7.9-15.2 7.9-24V245h-.2zm-37.1-17c-4.7-2.2-9.4-3.3-14.1-3.3-4.6 0-8.9.9-12.9 2.9 6.5 5.3 12.5 10.9 17.7 17 5.3 6.1 9.7 12.9 13.2 20.4 2.2-1.9 4.2-4.2 6-6.9 1.9-3.2 2.9-6.8 2.9-10.8 0-2.9-.9-6-2.4-9.4-2.3-4-5.8-7.3-10.4-9.9z" />',
        viewBox: '0 0 512 512'
    };

    var stumbleUponIcon = {
        name: 'stumble-upon',
        content: '<path d="m288.1 256 26.8 8.4L352 256v64c1.1 18.9 12.8 32 32 32s30.9-13.1 32-32v-64h64v64s0 96-96 96-96-96-96-96l.1-64zm26.8-23.2L288 224v-32s0-32-32-32-32 32-32 32v128s0 96-96 96-96-96-96-96v-64h64v64c1.1 18.9 12.8 32 32 32 19.1 0 30.9-13.2 32.1-32h-.1V192s0-96 96-96 96 96 96 96v32l-37.1 8.8z" />',
        viewBox: '0 0 512 512'
    };

    var stumbleUponBoxIcon = {
        name: 'stumble-upon-box',
        content: '<path d="M64 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H64zm191.5 96.3c82.5 0 82.5 87.3 82.5 87.3v8.4l-31.9 8-23.1-8v-8.6s0-29.2-27.5-29.2-27.5 29.2-27.5 29.2v81.5s0 87-82 87-82-87-82-87V256h55v41h-.9c.9 17.2 11 29.1 27.5 29.1s26.6-12 27.6-29.1h-.2v-81.4s0-87.3 82.5-87.3zM283.1 256l23 7.6L338 256v40.7c.9 17.2 11 29.1 27.5 29.1s26.6-11.9 27.5-29.1V256h55v40.7s0 87.3-82.5 87.3-82.5-87.3-82.5-87.3l.1-40.7z" />',
        viewBox: '0 0 512 512'
    };

    var tellAFriendIcon = {
        name: 'tell-a-friend',
        content: '<path d="M383.5 64c-31.7 0-57.5 24-57.5 53.5v2.1c0 14.9-12.2 30.3-28.5 33.3-5.5.5-9.9 4.8-9.9 10.1 0 2.6 1.1 5 2.9 6.8 13.3 10.5 28.3 22.2 92.5 22.2s80.1-11.7 93.3-22.2c1.8-1.8 2.9-4.1 2.9-6.8 0-5.3-4.3-9.6-9.9-10.1-16.3-3-28.5-18.4-28.5-33.3v-2.1c0-29-25-52.7-55.9-53.5h-.5.2-1.1c.2 0 0 0 0 0zm.6 0h.9-.9zM128 224c-64.9 0-96 70-96 128v96h192v-96c0-52.7-34-128-96-128zm256 0c-96 0-96 224-96 224h192s0-224-96-224zm-192-96c0 35.3-28.7 64-64 64s-64-28.7-64-64 28.7-64 64-64 64 28.7 64 64z" />',
        viewBox: '0 0 512 512'
    };

    var tellAFriendBoxIcon = {
        name: 'tell-a-friend-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM144 96c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm80 320H64v-96c0-48.3 26-96 80.2-96 51.7 0 79.8 52.1 79.8 96v96zm223.6 0H288s0-192 80-192 79.6 192 79.6 192zm-2-240.7c-11.1 7.9-24.3 16.7-78 16.7s-66.3-8.8-77.3-16.7c-1.5-1.3-2.4-3.1-2.4-5.1 0-4 3.6-7.2 8.2-7.5 13.6-2.3 23.8-13.8 23.8-25v-1.6c0-22.1 21.4-40.1 48-40.1h.9c26.1.4 47.1 18.2 47.1 40.1v1.6c0 11.2 10.2 22.7 23.8 25 4.6.4 8.2 3.6 8.2 7.5.1 2-.8 3.8-2.3 5.1z" />',
        viewBox: '0 0 512 512'
    };

    var tumblrIcon = {
        name: 'tumblr',
        content: '<path d="M192.6 32c-2.8 23.1-8.1 42.1-15.7 57.1s-17.7 27.8-30.3 38.5-33 18.9-50.6 24.6V224h61v148.7c0 20.5 2.1 36.1 6.4 46.9s12 21 23.1 30.6c11.1 9.5 25 16.9 40.7 22.1s27.8 7.7 48.3 7.7c18 0 34.8-1.8 50.4-5.4 15.5-3.6 39.1-10.9 58.2-19.9V384c-22.3 14.8-51 22.9-73.7 22.9-12.8 0-24-3-33.9-8.9-7.5-4.4-14.3-12-17-19.2-2.8-7.4-2.4-22.3-2.4-48.2V224h96v-96h-96V32h-64.5z" />',
        viewBox: '0 0 512 512'
    };

    var tumblrBoxIcon = {
        name: 'tumblr-box',
        content: '<path d="M448 32H64c-17.6 0-32 14.4-32 32v384c0 17.6 14.4 32 32 32h384c17.6 0 32-14.4 32-32V64c0-17.6-14.4-32-32-32zm-96.1 366c-12.7 6.4-28.5 11.6-38.9 14.2-10.4 2.6-21.6 3.9-33.7 3.9-13.7 0-21.8-1.9-32.3-5.5-10.5-3.7-19.9-9-27.3-15.8-7.4-6.9-12.6-14.1-15.4-21.8-2.9-7.7-4.3-18.9-4.3-33.5V224h-40v-42.2c11.7-4.1 25.3-9.9 33.6-17.6 8.4-7.6 15.1-16.8 20.2-27.5s8.6-24.3 10.5-40.8H267v64h53v64h-53v85.2c0 18.6-.2 29.3 1.6 34.5 1.8 5.2 6.4 10.7 11.4 13.8 6.6 4.2 14.2 6.4 22.7 6.4 15.1 0 34.3-5.9 49.3-16.5V398h-.1z" />',
        viewBox: '0 0 512 512'
    };

    var twitterIcon = {
        name: 'twitter',
        content: '<path d="M342 64c-50.8 0-91.9 41.2-91.9 91.9 0 7.2.8 14.2 2.4 21-76.4-3.8-144.1-40.4-189.4-96-7.9 13.6-12.4 29.3-12.4 46.2 0 31.9 16.2 60 40.9 76.5-15.1-.5-29.2-4.6-41.6-11.5v1.2c0 44.5 31.7 81.7 73.7 90.1-7.7 2.1-15.8 3.3-24.2 3.3-5.9 0-11.7-.6-17.3-1.6 11.7 36.5 45.6 63.1 85.9 63.8-31.7 24.5-71.3 39.2-114.3 39.2-7.4 0-14.8-.4-22-1.3 40.7 26 89 41.3 140.9 41.3 169.1 0 261.5-140.1 261.5-261.5 0-4-.1-8-.2-11.9 18-12.9 33.5-29.1 45.9-47.6-16.5 7.3-34.2 12.3-52.8 14.5 19-11.4 33.6-29.4 40.4-50.8-17.8 10.5-37.4 18.2-58.4 22.3C392.3 75.1 368.4 64 342 64z" />',
        viewBox: '0 0 512 512'
    };

    var twitterBoxIcon = {
        name: 'twitter-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm-64.7 159.7c.1 2.8.2 5.6.2 8.4 0 85.4-66 183.9-186.8 183.9-37.1 0-71.6-10.7-100.6-29.1 5.1.6 10.4.9 15.7.9 30.8 0 59.1-10.4 81.5-27.7-28.7-.5-53-19.2-61.3-44.9 4 .7 8.1 1.2 12.4 1.2 6 0 11.8-.8 17.3-2.3-30-5.9-52.7-32-52.7-63.3v-.8c8.9 4.8 19 7.7 29.7 8.1-17.6-11.6-29.2-31.4-29.2-53.8 0-11.8 3.2-22.9 8.9-32.5 32.4 39.1 80.8 64.8 135.3 67.5-1.1-4.7-1.7-9.7-1.7-14.7 0-35.7 29.4-64.6 65.6-64.6 18.9 0 36 7.8 47.9 20.4 14.9-2.9 29-8.3 41.7-15.7-4.9 15.1-15.3 27.7-28.9 35.7 13.3-1.6 26-5.1 37.7-10.2-8.9 13.1-19.9 24.5-32.7 33.5z" />',
        viewBox: '0 0 512 512'
    };

    var yammerIcon = {
        name: 'yammer',
        content: '<path d="M263.9 32.1c-10.1-.2-19.6 6.8-23.2 18-.1.4-.3 1-.5 1.9 0 .1-.1.3-.1.4-8 25.9-73.6 235.6-73.6 235.6h-1.2l-84-239.2C75.6 35.3 61.6 28.7 48.9 34c-13 5.5-19.7 21.5-15.4 36.2 10.1 29 105.8 290.4 105.8 290.4l-6.3 15.6c-10.6 32.1-31.6 53.8-63.2 53.8-3.1 0-13.7-.7-14.4-.8-10.2-.6-19.7 6.9-22.5 18.4-3.1 13.1 3.7 26.6 15.3 30.4 8.4 1.6 17 2.2 24.7 2.2 58.3 0 86.8-37.7 106-92.8 0 0 101-300.5 105.8-312.9.8-2 1.4-3.7 2-5.4l-.1-.1c.1-.4.3-.7.4-1.1 4.1-14.5-3-29.9-15.8-34.5-2.5-.8-4.9-1.3-7.3-1.3zM383.5 96c-6.3.1-13.3 2.5-20.4 9.6-21.5 21.6-43 86.4-43 86.4s64.6-21.6 86.4-43.5-.4-42.8-.4-42.8-9.7-9.8-22.6-9.7zm64.6 128c-32 0-96 32-96 32s64 32 96.4 32 31.5-32 31.5-32 .1-32-31.9-32zm-128 96s21.5 64.8 43 86.4 43-.1 43-.1 22.1-21 .4-42.8c-21.8-21.9-86.4-43.5-86.4-43.5z" />',
        viewBox: '0 0 512 512'
    };

    var yammerBoxIcon = {
        name: 'yammer-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM332.5 148.6c15.4-15.4 30.7 0 30.7 0s15.8 15 .3 30.6-61.7 31.1-61.7 31.1 15.4-46.3 30.7-61.7zm-54.7-26.4c-.1.3-.2.5-.3.8h.1c-.4 1.2-.9 2.4-1.4 3.8-3.5 8.8-75.5 223.1-75.5 223.1-13.7 39.3-34 66.2-75.6 66.2-5.5 0-11.6-.4-17.6-1.6-8.3-2.7-13.2-12.3-10.9-21.7 2-8.2 8.8-13.6 16.1-13.2.5.1 8.1.6 10.3.6 22.6 0 37.5-15.5 45.1-38.3l4.5-11.1s-68.2-186.3-75.5-207c-3-10.5 1.7-22 11-25.9 9.1-3.8 19.1.9 23.2 10.6l.8 2.4L191.3 279h.9s46.7-149.5 52.5-168c0-.1 0-.2.1-.3.2-.6.3-1.1.4-1.3 3.2-9.8 12.7-15.1 21.6-11.9 8.9 3.4 14 14.4 11 24.7zm85.4 241.2s-15.3 15.5-30.7 0-30.8-61.7-30.8-61.7 46.1 15.4 61.7 31.1-.2 30.6-.2 30.6zm30.3-84.6c-23.2 0-68.9-22.8-68.9-22.8s45.7-22.8 68.6-22.8S416 256 416 256s.7 22.8-22.5 22.8z" />',
        viewBox: '0 0 512 512'
    };

    var behanceIcon = {
        name: 'behance',
        content: '<path d="M448 128H304V96h144v32zM245.335 254.873c7.09 11.573 10.665 25.65 10.665 42.197 0 17.067-4.069 32.379-12.176 45.903-5.178 9.005-11.62 16.58-19.358 22.691-8.723 7.022-18.988 11.833-30.855 14.467C181.744 382.732 168.89 384 155.02 384H32V96h131.927c33.321.504 56.901 10.744 70.803 30.705 8.323 12.24 12.515 26.869 12.515 43.936 0 17.588-4.192 31.729-12.607 42.425-4.716 5.982-11.683 11.443-20.868 16.385 13.963 5.364 24.474 13.817 31.565 25.422zm-158.9-45.318H152.8c11.867 0 21.484-2.406 28.913-7.152 7.367-4.763 11.097-13.215 11.097-25.292 0-13.426-4.901-22.285-14.672-26.609-8.446-2.991-19.204-4.486-32.273-4.486h-59.43v63.539zm111.923 83.452c0-15.019-5.795-25.292-17.385-30.917-6.504-3.121-15.597-4.746-27.31-4.876H86.435v76.787h66.303c11.836 0 21.084-1.69 27.68-5.071 11.96-6.275 17.94-18.238 17.94-35.923zM479.932 288H330.824c.813 21.182 7.938 34.778 21.409 43.322 8.157 5.287 18.002 7.931 29.503 7.931 12.189 0 22.096-3.224 29.722-9.704 4.157-3.482 7.813-8.318 11.001-14.541h54.693c-1.438 12.541-8.095 25.276-19.846 38.204C438.959 373.748 413.269 384 380.266 384c-27.253 0-51.286-8.64-72.132-25.985-20.846-17.28-31.222-45.522-31.222-84.532 0-36.624 9.376-64.672 28.19-84.21C323.917 169.785 348.294 160 378.328 160c17.814 0 33.847 3.288 48.129 9.898 14.282 6.593 26.096 17.023 35.378 31.24 8.407 12.573 13.876 27.114 16.346 43.685 1.438 9.704 2.033 24.929 1.751 43.177zm-55.567-37.696c-.969-14.669-5.72-25.759-14.283-33.4-8.532-7.576-19.095-11.348-31.753-11.348-13.72 0-24.377 3.998-31.94 12.058-7.563 8.028-12.314 18.957-14.282 32.691h92.258z" />',
        viewBox: '0 0 512 512'
    };

    var behanceBoxIcon = {
        name: 'behance-box',
        content: '<path d="M167.543 228.938h-56.884v-56.479h50.939c11.202 0 20.423 1.329 27.663 3.988 8.376 3.844 12.576 11.718 12.576 23.652 0 10.735-3.197 18.249-9.511 22.482-6.368 4.219-14.612 6.357-24.783 6.357zm220.527 11.836c-7.313-6.494-16.367-9.727-27.217-9.727-11.76 0-20.895 3.427-27.378 10.335-6.483 6.881-10.555 16.249-12.242 28.021h79.079c-.83-12.573-4.902-22.079-12.242-28.629zm-196.379 34.862c-5.575-2.774-13.369-4.219-23.409-4.335h-57.624v68.255h56.831c10.146 0 18.072-1.503 23.726-4.508 10.251-5.577 15.377-16.211 15.377-31.931 0-13.35-4.967-22.482-14.901-27.481zM480 64v384c0 17.664-14.336 32-32 32H64c-17.664 0-32-14.336-32-32V64c0-17.664 14.336-32 32-32h384c17.664 0 32 14.336 32 32zm-176 96h112v-32H304v32zm-48 146.729c0-14.709-3.065-27.221-9.142-37.509-6.078-10.316-15.087-17.829-27.056-22.597 7.873-4.392 13.845-9.247 17.887-14.564 7.213-9.507 10.806-22.077 10.806-37.711 0-15.171-3.593-28.175-10.727-39.055-11.916-17.743-32.128-26.846-60.689-27.293H64v256h105.445c11.889 0 22.907-1.127 33.079-3.439 10.172-2.341 18.97-6.618 26.447-12.859 6.632-5.433 12.154-12.166 16.592-20.17C252.512 335.51 256 321.899 256 306.729zm190.442-42.024c-2.117-14.204-6.804-26.667-14.01-37.444-7.956-12.187-18.082-21.126-30.324-26.777-12.242-5.665-25.985-8.484-41.254-8.484-25.744 0-46.638 8.387-62.765 25.091-16.127 16.746-24.163 40.788-24.163 72.18 0 33.437 8.894 57.644 26.762 72.456C318.555 376.594 339.155 384 362.514 384c28.288 0 50.308-8.788 66.033-26.391 10.072-11.081 15.778-26.86 17.011-37.609h-46.879c-1.178 6-2.512 10.667-9.429 17.327-6.536 5.555-15.028 8.318-25.476 8.318-9.858 0-18.297-2.266-25.288-6.798-11.546-7.323-17.654-18.977-18.35-37.133h127.807c.24-15.641-.269-28.691-1.501-37.009z" />',
        viewBox: '0 0 512 512'
    };

    var dribbbleIcon = {
        name: 'dribbble',
        content: '<path d="M256 32C132.469 32 32 132.469 32 256c0 123.5 100.469 224 224 224 123.5 0 224-100.5 224-224 0-123.531-100.5-224-224-224zm148.094 103.281c26.625 32.562 42.781 74.031 43.188 119.188-6.312-1.312-69.562-14.156-133.219-6.156a850.738 850.738 0 0 0-4.125-9.875c-3.969-9.312-8.25-18.594-12.688-27.719 70.75-28.875 102.812-69.969 106.844-75.438zM256 64.969c48.594 0 93.031 18.219 126.812 48.188-3.438 4.906-32.25 43.625-100.281 69.125-31.344-57.594-66.094-104.938-71.375-112A190.999 190.999 0 0 1 256 64.969zm-81.344 18.156c5.031 6.938 39.219 54.312 70.938 110.656-89.5 23.781-168.344 23.438-176.906 23.312 12.406-59.374 52.437-108.718 105.968-133.968zm-110 173.156c0-1.969.031-3.906.094-5.844 8.375.156 101.094 1.375 196.657-27.219 5.469 10.719 10.688 21.594 15.5 32.469a192.95 192.95 0 0 0-7.531 2.281c-98.688 31.875-151.188 118.812-155.531 126.25-30.564-33.937-49.189-78.812-49.189-127.937zM256 447.594c-44.25 0-85-15.094-117.438-40.375 3.438-7.031 42.156-81.875 150.094-119.5.406-.125.812-.281 1.25-.406 26.875 69.812 37.969 128.312 40.812 145.094-22.968 9.781-48.218 15.187-74.718 15.187zm106.875-32.719c-1.938-11.625-12.125-67.625-37.156-136.406 59.969-9.594 112.625 6.125 119.188 8.188-8.532 53.218-39.095 99.218-82.032 128.218z" />',
        viewBox: '0 0 512 512'
    };

    var dribbbleBoxIcon = {
        name: 'dribbble-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM256 448c-106 0-192-86-192-192S150 64 256 64s192 86 192 192-86 192-192 192zm28-164.8c-82.9 28.9-118.1 83.4-126.7 98.7 27.2 21.3 61.5 34.1 98.7 34.1 22.5 0 43.9-4.6 63.3-13-3.3-18.4-13.1-65.2-34.2-120.1-.4 0-.8.2-1.1.3zm-95.5-172.3c-44.9 20.9-78.5 62.1-89 111.8 17.1-.1 78.6-1.7 147.6-20-24.3-43.2-50.3-80.1-58.6-91.8zm79 146.8c2.1-.7 4.3-1.3 6.5-2-4.1-9.3-8.6-18.6-13.3-27.8-74.1 22.2-146.1 23.4-164.6 23.4 0 1.6-.1 3.1-.1 4.7 0 40.8 15.3 78 40.4 106.3 10.5-16.7 54.6-79.9 131.1-104.6zm94.9-121.1C334.2 111.3 296.9 96 256 96c-12.4 0-24.5 1.4-36 4.1 8.7 11.9 34.9 48.8 58.8 92.7 50.7-19 76-46.7 83.6-56.2zm-46.6 138.7C335 328 344 371.9 346.9 387.8c35.2-24.3 60.2-62.5 67.2-106.6-13.2-3.7-53.4-13.1-98.3-5.9zm-24.4-58.1c3.8 7.8 7.5 15.8 10.9 23.8 1.2 2.8 2.4 5.7 3.5 8.5 48-6 95.7 1.8 110.2 4.5-.5-37.2-13.7-71.4-35.4-98.3-8.4 10-36.1 39.8-89.2 61.5z" />',
        viewBox: '0 0 512 512'
    };

    var rssIcon = {
        name: 'rss',
        content: '<path d="M151.4 420c0 32.9-26.7 59.5-59.7 59.5S32 452.9 32 420s26.7-59.5 59.7-59.5 59.7 26.7 59.7 59.5zM32 184.3v85.9c56 0 108.5 21.8 148.1 61.3 39.6 39.6 61.4 92.3 61.4 148.5h86.2C327.6 317 195 184.3 32 184.3zM32 32v85.9c199.4 0 361.6 162.5 361.6 362.1h86.2C479.8 233 278.9 32 32 32z" />',
        viewBox: '0 0 512 512'
    };

    var rssBoxIcon = {
        name: 'rss-box',
        content: '<path d="M448 32H64c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM115.2 447.6c-28.3 0-51.2-22.8-51.2-51s22.9-51 51.2-51c28.3 0 51.2 22.8 51.2 51s-23 51-51.2 51zm128.8.4c0-48.1-18.7-93.3-52.8-127.3-34-33.9-79.2-52.6-127.2-52.6v-73.6c140.1 0 254.1 113.7 254.1 253.5H244zm129.9 0c0-171.2-139-310.4-309.9-310.4V64c211.6 0 383.8 172.3 383.8 384h-73.9z" />',
        viewBox: '0 0 512 512'
    };

    var vimeoIcon = {
        name: 'vimeo',
        content: '<path d="M479.783 152.805c-2 43.26-32.469 102.444-91.344 177.477C327.532 408.792 275.969 448 233.782 448c-26.094 0-48.188-23.873-66.25-71.742-12.063-43.896-24.094-87.854-36.157-131.657-13.407-47.901-27.782-71.835-43.188-71.835-3.344 0-15.032 6.985-35.125 20.955L32 166.744c22.094-19.201 43.844-38.526 65.282-57.773 29.407-25.316 51.5-38.556 66.25-39.938 34.782-3.353 56.219 20.287 64.282 70.78 8.625 54.559 14.719 88.475 18.032 101.777 10.031 45.2 21.093 67.769 33.156 67.769 9.344 0 23.375-14.591 42.157-43.818 18.75-29.29 28.782-51.548 30.125-66.868 2.656-25.27-7.375-37.827-30.125-37.827-10.719 0-21.782 2.251-33.157 6.969C310.126 96.647 352.283 62.08 414.533 64.082c46.156 1.289 67.906 30.935 65.25 88.723z" />',
        viewBox: '0 0 512 512'
    };

    var vimeoBoxIcon = {
        name: 'vimeo-box',
        content: '<path d="M448 32H64c-17.664 0-32 14.336-32 32v384c0 17.664 14.336 32 32 32h384c17.664 0 32-14.336 32-32V64c0-17.664-14.336-32-32-32zm-.186 140.119c-1.714 37.08-27.831 87.809-78.295 152.123-52.206 67.294-96.402 100.901-132.563 100.901-22.366 0-41.304-20.462-56.786-61.493-10.339-37.625-20.652-75.303-30.991-112.849-11.491-41.058-23.813-61.573-37.018-61.573-2.866 0-12.884 5.987-30.107 17.961L64 184.066c18.938-16.458 37.581-33.022 55.956-49.519 25.206-21.7 44.143-33.048 56.786-34.232 29.813-2.874 48.188 17.389 55.099 60.668 7.393 46.765 12.616 75.835 15.456 87.237 8.598 38.743 18.08 58.087 28.419 58.087 8.009 0 20.036-12.506 36.134-37.559 16.071-25.106 24.67-44.184 25.822-57.315 2.277-21.66-6.321-32.423-25.822-32.423-9.188 0-18.67 1.929-28.42 5.974 18.964-61.001 55.099-90.63 108.456-88.914 39.562 1.105 58.205 26.516 55.928 76.049z" />',
        viewBox: '0 0 512 512'
    };

    var youtubeIcon = {
        name: 'youtube',
        content: '<path d="M475.5 165s-4.4-31.4-17.8-45.2c-17-18.1-36.1-18.2-44.9-19.3C350.1 96 256.1 96 256.1 96h-.2s-94 0-156.7 4.6c-8.8 1.1-27.8 1.2-44.9 19.3C40.9 133.7 36.5 165 36.5 165S32 201.9 32 238.7v34.5c0 36.8 4.5 73.6 4.5 73.6s4.4 31.4 17.8 45.2c17 18.1 39.4 17.5 49.4 19.4C139.5 414.9 256 416 256 416s94.1-.1 156.8-4.7c8.8-1.1 27.9-1.2 44.9-19.3 13.4-13.8 17.8-45.2 17.8-45.2s4.5-36.8 4.5-73.6v-34.5c0-36.8-4.5-73.7-4.5-73.7zM192 336V176l144 80-144 80z" />',
        viewBox: '0 0 512 512'
    };

    var youtubeBoxIcon = {
        name: 'youtube-box',
        content: '<path d="M448 32H64c-17.664 0-32 14.336-32 32v384c0 17.664 14.336 32 32 32h384c17.664 0 32-14.336 32-32V64c0-17.664-14.336-32-32-32zm0 237.749c0 29.454-3.835 58.909-3.835 58.909s-3.752 25.082-15.265 36.128c-14.602 14.497-30.97 14.569-38.476 15.417C336.689 383.885 256 384 256 384s-99.838-.864-130.559-3.656c-8.546-1.519-27.734-1.061-42.341-15.558-11.513-11.045-15.26-36.128-15.26-36.128S64 299.203 64 269.749v-27.614c0-29.454 3.84-58.909 3.84-58.909s3.747-25.082 15.26-36.128c14.607-14.497 30.969-14.569 38.476-15.417C175.313 128 255.917 128 255.917 128h.167s80.606 0 134.341 3.682c7.506.849 23.873.92 38.476 15.417 11.513 11.045 15.265 36.128 15.265 36.128S448 212.681 448 242.136v27.613zM192 176l144 80-144 80V176z" />',
        viewBox: '0 0 512 512'
    };

    var folderIcon = {
        name: 'folder',
        content: '<path d="m242.8 128-32-32H96v288h320V192H128v-32h288c17.7 0 32 14.3 32 32v192c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h128l64 64" />',
        viewBox: '0 0 512 512'
    };

    var folderOpenIcon = {
        name: 'folder-open',
        content: '<path d="M425.6 160h-246c-17.6 0-37.2 14.4-43.6 32L64 384V96h114.8l32 32H256l-64-64H64c-17.7 0-32 14.3-32 32v288c0 17.7 14.3 32 32 32h268.4c17.6 0 37.2-14.4 43.6-32l70-192c6.4-17.6-2.8-32-20.4-32zM346 373.1c-2 5.5-10.1 10.9-13.6 10.9H98.1L166 202.9c2-5.5 10.1-10.9 13.6-10.9h232.3L346 373.1z" />',
        viewBox: '0 0 512 512'
    };

    var folderAddIcon = {
        name: 'folder-add',
        content: '<path d="M96 160h288c17.7 0 32 14.3 32 32v64h-32v-64H96v-32zm352 224h-32v-64h-32v64h-64v32h64v64h32v-64h64v-32h-32zM64 96h114.8l32 32H256l-64-64H64c-17.7 0-32 14.3-32 32v288c0 17.7 14.3 32 32 32h192v-32H64V96z" />',
        viewBox: '0 0 512 512'
    };

    var folderUpIcon = {
        name: 'folder-up',
        content: '<path d="M96 160h288c17.7 0 32 14.3 32 32v64l-32 32v-96H96v-32zM64 96h114.8l32 32H256l-64-64H64c-17.7 0-32 14.3-32 32v288c0 17.7 14.3 32 32 32h192l32-32H64V96zm336 240-80 80h64v64h32v-64h64l-80-80z" />',
        viewBox: '0 0 512 512'
    };

    var folderMoreIcon = {
        name: 'folder-more',
        content: '<path d="M64 384h96v32H64c-17.7 0-32-14.3-32-32V96c0-17.7 14.3-32 32-32h128l64 64h-45.2l-32-32H64v288zm192-32c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32zm160-64v-96c0-17.7-14.3-32-32-32H96v32h288v96h32zm32 64c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32zm-96 0c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32z" />',
        viewBox: '0 0 512 512'
    };

    var aggregateFieldsIcon = {
        name: 'aggregate-fields',
        content: '<path d="M128 128c-17.7 0-32 14.3-32 32v160c0 17.7 14.3 32 32 32h256c32 0 32-32 32-32H128V128zm-64 64c-17.7 0-32 14.3-32 32v160c0 17.7 14.3 32 32 32h256c32 0 32-32 32-32H64V192zM448 64H192c-17.6 0-32 14.4-32 32v160c0 17.6 14.4 32 32 32h256c17.6 0 32-14.4 32-32V96c0-17.6-14.4-32-32-32zm1 192s0 .1 0 0l-256.9.1-.1-.1V96.1l.1-.1H448v160h1z" />',
        viewBox: '0 0 512 512'
    };

    var fileIcon = {
        name: 'file',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileAddIcon = {
        name: 'file-add',
        content: '<path d="M512 416h-64v64h-32v-64h-64v-32h64v-64h32v64h64v32zM96 448V64h224v96h96v96h32V128l-96-96H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h224v-32" />',
        viewBox: '0 0 512 512'
    };

    var fileTxtIcon = {
        name: 'file-txt',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-32-96v32H128v-32h256zM256 160v32H128v-32m256 64v32H128v-32h256zm-256 96v-32h224v32H128z" />',
        viewBox: '0 0 512 512'
    };

    var fileCsvIcon = {
        name: 'file-csv',
        content: '<path d="M178.6 224c-10 0-18.9 2.1-26.7 6.2-7.7 4.2-13.7 10.1-17.9 17.7-4.2 7.6-6.3 16.3-6.3 26.1 0 9.1 1.9 17.1 5.7 24.1s9.2 12.3 16.4 16.1c7.2 3.8 15.7 5.7 25.6 5.7 10 0 18.9-1.4 26.6-4.1v-24.9c-6.9 3.5-13.8 5.2-20.5 5.2-7.3 0-13.2-2.1-17.6-6.4-4.4-4.3-6.6-10.1-6.6-17.6s2.2-13.4 6.6-17.7 10.4-6.5 18-6.5c3.7 0 7.3.4 10.9 1.3s6.7 2.1 9.2 3.6V227c-7.6-2-15.3-2.9-23.4-3zm73.8.1c-11.5 0-20.6 2.7-27.5 8.1-6.8 5.4-10.2 12.5-10.2 21.5 0 12.8 7.5 22.1 22.4 27.8 4.6 1.7 7.8 3.1 9.5 4.1 1.7 1 3 2 3.8 3.2.8 1.2 1.2 2.5 1.2 4 0 2.1-.8 3.7-2.5 4.8-1.7 1.1-4.1 1.7-7.1 1.7-4.1 0-8.4-.9-13.2-2.6-4.7-1.8-9-4-12.9-6.9V315c8.1 3.3 17 4.9 26.7 4.9 8.4 0 15.5-1.1 21.5-3.4 6-2.2 10.6-5.7 13.9-10.2 3.3-4.6 5-9.9 5-16.1 0-6.3-2-11.8-6-16.4-4-4.6-10.8-8.9-20.4-12.8-4.9-2-8.1-3.7-9.6-5-1.5-1.3-2.3-2.9-2.3-4.8 0-2 1-3.6 2.8-4.8 1.9-1.2 4.4-1.8 7.5-1.8 7.6 0 15.2 2.1 23 6.4v-23.6c-4-1.1-7.1-1.8-9.3-2.2-2.2-.4-4.7-.7-7.4-1-2.7-.1-5.8-.1-8.9-.1zm39.8-.1 30 96h31.4l30.4-96h-29.1l-13.8 58.9c-1.1 4.4-1.8 8.1-2 11.1h-.6c-.1-2.4-.8-5.9-1.9-10.7L322.4 224h-30.2zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileExcelIcon = {
        name: 'file-excel',
        content: '<path d="m288 304 64 112h-48l-48-84.5-31.5 52.5H256v32h-96l64-112-64-112h48l48 84 48-84h48l-64 112zm64-272H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileWordIcon = {
        name: 'file-word',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-32.4-256-6.9 32-41.6 192h-46.7l-32.8-132.5L222.9 416h-46.7l-48.6-224h47.8l24.8 139.2L233.3 192h44.5l33.1 139.2L330.1 224H311v-32h72.6z" />',
        viewBox: '0 0 512 512'
    };

    var fileMdbIcon = {
        name: 'file-mdb',
        content: '<path d="M231.1 192 144 416h80v-32h-25.5l14.8-38h85.6l27.2 70h42L281 192h-49.9zm-1.5 112 26.5-68 26.4 68h-52.9zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var filePptIcon = {
        name: 'file-ppt',
        content: '<path d="m192 192-32 32h32v192h49v-80h25.6c16.4 0 29.1-1.5 38.2-4.4 14.4-4.5 25.9-12.9 34.4-25.4s12.8-26.6 12.8-42.6c0-15.8-4-29.5-12-41.1s-18.8-20.1-32.4-25.4c-10.3-3.7-24.4-5.5-42-5.5M241 225h20.1c11.2.3 20.2 2.1 26.9 5.6 12.1 6.4 23.3 17.6 23.3 33.5 0 17.3-11.9 29-25.2 35-6.7 2.9-15.1 4.4-25.2 3.9H241v-78zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var filePdfIcon = {
        name: 'file-pdf',
        content: '<path d="M240.9 160c-7.6 0-13.8 4-15.4 9.9-4.9 18.6.2 46.3 9.4 82.3l-2.4 5.9c-6.6 16.4-14.8 33-22.1 47.6l-1 1.9c-7.7 15.3-14.6 28.4-21 39.4l-6.5 3.5c-.5.3-11.6 6.3-14.3 7.9-22.2 13.6-36.9 28.9-39.4 41.2-.8 3.9-.2 8.9 3.7 11.2l6.3 3.2c2.7 1.4 5.6 2.1 8.6 2.1 15.8 0 34.2-20.2 59.5-65.3 29.2-9.7 62.5-17.8 91.6-22.3 22.2 12.8 49.5 21.7 66.8 21.7 3.1 0 5.7-.3 7.8-.9 3.3-.9 6.1-2.8 7.8-5.4 3.4-5.2 4-12.2 3.1-19.5-.3-2.1-2-4.8-3.8-6.6-5.1-5.2-16.5-7.9-33.7-8.1-11.7-.1-25.8.9-40.6 3-6.6-3.9-13.5-8.2-18.8-13.3-14.4-13.8-26.5-32.9-34-53.9.5-2 .9-3.7 1.3-5.4 0 0 8.1-47.1 6-63.1-.3-2.2-.5-2.8-1.1-4.5l-.7-1.9c-2.2-5.2-6.5-10.7-13.3-10.4l-3.8-.2zm2.7 8.4c5.1 0 8 13.1 8.2 25.4.3 12.3-2.6 20.9-6 27.3-2.9-9.4-4.3-24.3-4.3-34-.1-.1-.3-18.7 2.1-18.7zm.4 104.1c8.6 16 19.3 29.5 31.9 40.4 1.6 1.3 3.2 2.7 5 4.1-25.6 5.2-47.7 11.5-67.1 19.1 3.6-6.5 7.2-13.3 11-20.6 9.1-17.7 14.9-31.6 19.2-43zm102.2 51.6c9.3 0 12 0 21.1 2.3 9.1 2.4 9.2 7.2 7.6 8.2-1.6 1-6 1.6-8.9 1.6-9.2 0-20.7-4.3-36.8-11.4 6.3-.4 11.9-.7 17-.7zm-165.4 35.8c-17.7 28.8-29.5 40.3-37.3 43.8 2.9-8.1 14.3-24 31.2-38.1 1.1-.9 3.7-3.4 6.1-5.7zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var filePsdIcon = {
        name: 'file-psd',
        content: '<path d="M128 160v256h45v-91h21.4c24.2 0 43.5-7.8 57.9-23.4 14.4-15.6 21.6-36.1 21.6-61.3 0-53.4-25.2-80.2-75.5-80.2H128zm45 44h17.5c23.7 0 35.5 12.8 35.5 38.6 0 26.3-11.8 39.4-35.5 39.4H173v-78zm164.6 51.7c-8.1 0-15.9.9-23.4 2.8-7.5 1.9-14.2 4.7-20 8.6-5.8 3.9-10.4 9-14 15.2-3.5 6.2-5.2 13.6-5.2 22.1 0 6.2.8 11.7 2.3 16.3 1.5 4.5 3.7 8.6 6.7 12.1 2.9 3.5 6.5 6.5 10.8 9.2 4.3 2.7 9.3 5.1 15 7.4 3.5 1.5 7.2 2.8 11 4 3.8 1.2 7.3 2.5 10.5 4s5.8 3.2 7.8 5.2 3 4.5 3 7.5c0 4.7-2.2 8.2-6.7 10.4-4.5 2.3-10.6 3.4-18.5 3.4-6.4 0-13.3-1.2-20.5-3.4s-14.5-5.8-21.7-10.4v38.3c13.4 5.2 27.9 7.7 43.7 7.7 8.5 0 16.8-.9 24.7-2.8 7.9-1.8 15-4.8 21.1-8.8s10.9-9.2 14.7-15.7 5.5-14.2 5.5-23.3c0-6.5-.9-12-2.7-16.8-1.8-4.7-4.4-8.7-7.8-12.2-3.4-3.5-7.4-6.5-12.2-9.1-4.7-2.6-10-5-15.9-7.1-3.2-1.2-6.5-2.4-9.8-3.5s-6.3-2.4-9-3.9-4.9-3.1-6.5-5.2c-1.6-2.1-2.5-4.4-2.5-7.1 0-2.1.5-3.9 1.7-5.6 1.1-1.7 2.6-3 4.6-4 2-1 4.2-1.8 6.7-2.4s5.2-.8 8.1-.8c6.1 0 12.3.9 18.8 2.6 6.4 1.7 12.3 4.4 18 7.8v-36.4c-6.3-2-12.8-3.5-19.3-4.5s-13-1.6-19.3-1.6h.3zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileFlashIcon = {
        name: 'file-flash',
        content: '<path d="M352 191.3V237c-21 .2-46.6-3.2-69.6 45H320v45h-47.9s-37.4 91.1-111.9 90.1c-.6-10 0-30.8 0-45 49.3-7.6 65.4-62.1 76.8-89.4 26.5-82.8 73.9-92 93.4-92.1 5.6 0 21.6.7 21.6.7zm96-63.3v320c0 17.7-14.3 32-32 32H96c-17.7 0-32-14.3-32-32V64c0-17.7 14.3-32 32-32h256l96 96zm-32 32h-96V64H96v384h320V160z" />',
        viewBox: '0 0 512 512'
    };

    var fileConfigIcon = {
        name: 'file-config',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-41.8-124.6-23.7-17.9c1-5.7 1.6-11.5 1.6-17.4 0-6-.5-11.8-1.6-17.4l23.7-17.9c3.7-2.8 4.7-7.9 2.4-11.9l-19.4-33.5c-2.3-4-7.2-5.6-11.5-3.9L318.4 215c-8.8-7.5-19-13.5-30.2-17.4l-3.7-29.5c-.6-4.6-4.5-8-9.1-8h-38.7c-4.6 0-8.5 3.4-9.1 8l-3.7 29.5c-11.1 4-21.3 9.9-30.2 17.4l-27.4-11.6c-4.2-1.8-9.2-.1-11.5 3.9l-19.4 33.5c-2.3 4-1.3 9.1 2.4 11.9l23.7 17.9c-1 5.7-1.6 11.5-1.6 17.4 0 6 .5 11.8 1.6 17.4l-23.7 17.9c-3.7 2.8-4.7 7.9-2.4 11.9l19.4 33.5c2.3 4 7.2 5.6 11.5 3.9l27.4-11.6c8.8 7.5 19 13.5 30.2 17.4l3.7 29.5c.6 4.6 4.5 8 9.1 8h38.7c4.6 0 8.5-3.4 9.1-8l3.7-29.5c11.1-4 21.3-9.9 30.2-17.4l27.4 11.6c4.2 1.8 9.2.1 11.5-3.9l19.4-33.5c2.2-4 1.2-9-2.5-11.8zM256 336c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z" />',
        viewBox: '0 0 512 512'
    };

    var fileAscxIcon = {
        name: 'file-ascx',
        content: '<path d="M384 224h-96v-32h96v32zm0 160h-96v-32h96v32zM256 256H128v-96h128v96zm0 160H128v-96h128v96zm96-384H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileBacIcon = {
        name: 'file-bac',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H289v-96h64l-96.5-96-95.5 96h64v96H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileZipIcon = {
        name: 'file-zip',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h64v32h32v32h-32v32h32v32h-32v32h32v32h-32v32h32v34.7c-18.6 6.6-32 24.4-32 45.3 0 26.5 21.5 48 48 48s48-21.5 48-48c0-20.9-13.4-38.7-32-45.3V256h32v-32h-32v-32h32v-32h-32v-32h32V96h-32V64h96v96h96v288zm-192-80c0 8.8-7.2 16-16 16s-16-7.2-16-16 7.2-16 16-16 16 7.2 16 16z" />',
        viewBox: '0 0 512 512'
    };

    var filmIcon = {
        name: 'film',
        content: '<path d="M416 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zM128 448H96v-32h32v32zm0-96H96v-64h32v64zm0-128H96v-64h32v64zm0-128H96V64h32v32zm224 352H160v-96h192v96zm0-128H160V192h192v128zm0-160H160V64h192v96zm64 288h-32v-32h32v32zm0-96h-32v-64h32v64zm0-128h-32v-64h32v64zm0-128h-32V64h32v32z" />',
        viewBox: '0 0 512 512'
    };

    var css3Icon = {
        name: 'css3',
        content: '<path d="m64 32 30.2 384L256 480l161.8-64L448 32H64zm65.6 82h250.3l-4.9 48.9L255.4 214h115.9L358 366.1l-102.1 29.7-102.4-30.2-6.6-76.6h50.9l3.3 39.7 54.4 13.8.5-.1v-.1l56.3-15.8 3.9-64.4H143.7l-3.8-47.8 123-51.2H135.7l-6.1-49.1z" />',
        viewBox: '0 0 512 512'
    };

    var html5Icon = {
        name: 'html5',
        content: '<path d="m64 32 30.4 384 161.3 64 161.7-64L448 32H64zm68 83h247.7l-1.2 13.2-2.2 24.8-1 11H186.1l4.5 51h180.1l-1.2 13.3-11.7 129.9-.7 8.4-101.3 37-101.2-37-6.9-77.6h49l3.5 39.7 55.5 24 55.6-24.1 5.8-64.6h-172L133 128.2l-1-13.2z" />',
        viewBox: '0 0 512 512'
    };

    var codeIcon = {
        name: 'code',
        content: '<path d="M512 256 384 384l-22.6-22.6L466.7 256 361.4 150.6 384 128l128 128zM150.6 361.4 45.3 256l105.4-105.4L128 128 0 256l128 128 22.6-22.6zM321.1 72.3 290.2 64l-99.4 375.7 30.9 8.3 99.4-375.7z" />',
        viewBox: '0 0 512 512'
    };

    var cssIcon = {
        name: 'css',
        content: '<path d="m192 96-32 .1S96 96 96 160v48c0 27.8-21.8 31.4-32 32H48c-2.2 0-4.3.4-6.2 1.2-.5.2-1 .4-1.4.7s-.9.5-1.3.8c-1.3.9-2.4 1.9-3.4 3.1-.2.2-.3.4-.5.6-.9 1.2-1.7 2.6-2.2 4.1-.2.5-.3 1-.5 1.5-.3 1-.4 2.1-.5 3.2v1.6c.1 1.1.2 2.1.5 3.2.1.5.3 1 .5 1.5.5 1.5 1.3 2.8 2.2 4.1.2.2.3.4.5.6 1 1.2 2.1 2.2 3.4 3.1.4.3.9.5 1.3.8s.9.5 1.4.7c1.9.8 4 1.2 6.2 1.2h16c10.2.6 32 4.2 32 32v48c0 64 64 63.9 64 63.9l32 .1v-32l-31.8-.1s-32.2.1-32.2-32v-48.5s0-29-19.6-47.9c19.6-18.8 19.6-47.9 19.6-47.9v-47.9c0-31.9 32.2-31.8 32.2-31.8l31.8-.1V96zm128-.1V128l31.7.1S384 128 384 160v48s0 29.1 19.5 48C384 274.9 384 304 384 304v48c0 32-32.1 31.9-32.1 31.9l-31.9.1v32l32.1-.1s63.9.1 63.9-63.7V304c0-27.8 21.8-31.4 32-32h16c2.2 0 4.3-.4 6.2-1.2.5-.2 1-.4 1.4-.7s.9-.5 1.3-.8c1.3-.9 2.4-1.9 3.4-3.1.2-.2.3-.4.5-.6.9-1.2 1.7-2.6 2.2-4.1.2-.5.3-1 .5-1.5.3-1 .4-2.1.5-3.2v-1.6c-.1-1.1-.2-2.1-.5-3.2-.1-.5-.3-1-.5-1.5-.5-1.5-1.3-2.8-2.2-4.1-.2-.2-.3-.4-.5-.6-1-1.2-2.1-2.2-3.4-3.1-.4-.3-.9-.5-1.3-.8s-.9-.5-1.4-.7c-1.9-.8-4-1.2-6.2-1.2h-16.1c-10.2-.6-31.9-4.2-31.9-32v-48c0-64-64.1-63.9-64.1-63.9l-31.9-.2z" />',
        viewBox: '0 0 512 512'
    };

    var jsIcon = {
        name: 'js',
        content: '<path d="M478.4 96C471 59.5 438.7 32 400 32H208c-38.7 0-71 27.5-78.4 64-1.1 5.2-1.6 10.5-1.6 16v272H32v16c0 5.5.5 10.8 1.6 16 7.4 36.5 39.7 64 78.4 64h192c38.7 0 71-27.5 78.4-64 1.1-5.2 1.6-10.5 1.6-16V128h96v-16c0-5.5-.5-10.8-1.6-16zm-124.8 0c-1.1 5.2-1.6 10.5-1.6 16v288c0 5.6-1 11-2.8 16-6.6 18.6-24.4 32-45.2 32-20.9 0-38.7-13.4-45.2-32-1.8-5-2.8-10.4-2.8-16v-16h-96V112c0-5.6 1-11 2.8-16 6.6-18.6 24.4-32 45.2-32h160c-7 9.3-12 20.2-14.4 32zM320 192H192v-32h128v32zm0 64H192v-32h128v32zm0 64H192v-32h128v32z" />',
        viewBox: '0 0 512 512'
    };

    var exeIcon = {
        name: 'exe',
        content: '<path d="M64 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H64zm160 32c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM64 160h384v288H64V160z" />',
        viewBox: '0 0 512 512'
    };

    var csprojIcon = {
        name: 'csproj',
        content: '<path d="M64 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H64zm157.9 32.1c19.3-1.2 35.2 14.7 34 34-1 15.9-13.9 28.8-29.9 29.9-19.3 1.2-35.2-14.7-34-34 1.1-16 14-28.9 29.9-29.9zm96 0c19.3-1.2 35.2 14.7 34 34-1 15.9-13.9 28.8-29.9 29.9-19.3 1.2-35.2-14.7-34-34 1.1-16 14-28.9 29.9-29.9zm96 0c19.3-1.2 35.2 14.7 34 34-1 15.9-13.9 28.8-29.9 29.9-19.3 1.2-35.2-14.7-34-34 1.1-16 14-28.9 29.9-29.9zM64 160h384v288H64V160zm119.7 64c-17.3 0-32.7 3.5-46 10.4s-23.6 16.8-30.9 29.5c-7.3 12.8-10.9 27.3-10.9 43.6 0 15.2 3.3 28.6 9.8 40.2s15.9 20.6 28.3 26.8c12.4 6.3 27 9.4 44.1 9.4 17.3 0 32.6-2.3 45.9-6.9v-41.5c-11.9 5.8-23.7 8.6-35.4 8.6-12.6 0-22.8-3.6-30.3-10.7s-11.4-16.9-11.4-29.2c0-12.4 3.8-22.3 11.3-29.6s17.9-10.9 31-10.9c6.3 0 12.6.7 18.8 2.1s11.5 3.5 16 6v-43c-13.1-3.2-26.4-4.8-40.3-4.8zm114.2 0-8.3 39h-17.4l-5.7 29H284l-6.1 26H262l-6.1 29h15.4l-7.7 37h30.9l7.9-37h26.8l-7.7 37h30.4l8.2-37h16.3l7.2-29h-17.2l6.1-26h15l6.3-29h-14.7l8.3-39H356l-8.3 39h-26.4l8.3-39h-31.7zm16.8 68h26.8l-6.3 27h-26.7l6.2-27z" />',
        viewBox: '0 0 512 512'
    };

    var vbprojIcon = {
        name: 'vbproj',
        content: '<path d="M64 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H64zm160 32c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zm96 0c17.7 0 32 14.3 32 32s-14.3 32-32 32-32-14.3-32-32 14.3-32 32-32zM64 160h384v288H64V160zm32 64 51.6 160h54.1L254 224h-50.2L180 321.9c-1.9 7.4-3 13.5-3.5 18.5h-1.1c-.2-3.9-1.3-9.9-3.2-17.9L147.8 224H96zm183.3 0v160h73c20.4 0 36.2-4.3 47.2-12.8s16.5-20.6 16.5-36.3c0-5.8-1.6-11.4-4.9-16.8s-7.9-9.9-14-13.5-12.8-5.9-20.4-6.8v-.4c6.5-1.3 12.5-3.6 18-7.1s9.5-7.6 12.2-12.2c2.7-4.6 4-9.8 4-15.3 0-25.8-21.2-38.7-63.7-38.7h-67.9v-.1zm48.2 32.3h8.9c15.6 0 23.3 5 23.3 14.8 0 4.5-1.7 8.3-5.1 11.1s-7.8 4.3-13.2 4.3h-14l.1-30.2zm0 62.5h19c5.5 0 9.9 1.5 13.3 4.4s5 6.8 5 11.4c0 5.2-1.9 9.3-5.7 12.3s-9 4.5-15.5 4.5h-16.1v-32.6z" />',
        viewBox: '0 0 512 512'
    };

    var csIcon = {
        name: 'cs',
        content: '<path d="M165.9 128c-26.4 0-49.8 5.6-70.1 16.7s-36 26.8-47.1 47.2S32 235.5 32 261.6c0 24.3 5 45.7 14.9 64.3s24.3 32.9 43.1 43 41.2 15.1 67.2 15.1c26.4 0 46.6-3.7 65.8-11v-66.5c-17.1 9.2-32 13.8-49.8 13.8-19.3 0-34.7-5.7-46.2-17.2s-17.3-27.1-17.3-46.9c0-19.9 5.8-35.7 17.3-47.3s27.3-17.4 47.2-17.4c9.6 0 16 1.2 25.4 3.5s17.5 5.5 24.4 9.7v-68.9c-19.7-5.2-37-7.8-58.1-7.8zm158.8 0-13.3 62h-29l-9.3 46h28.6l-10.3 43h-25.6l-9.8 46h25.2l-12.5 59h50l12.9-59h43.5l-12.5 59h49.2l13.3-59h26.8l11.5-46h-28.2l10.3-43h24.2l10.3-46h-23.7l13.5-63h-51.7l-13.5 63h-43.5l13.5-63h-50l.1 1zm26.9 108H395l-10.3 43h-43.3l10.2-43z" />',
        viewBox: '0 0 512 512'
    };

    var vbIcon = {
        name: 'vb',
        content: '<path d="m32 160 73.2 224h76.7L256 160h-71.1l-33.7 137c-2.6 10.3-4.3 19-4.9 25.9h-1.6c-.3-5.5-1.8-13.9-4.6-25L105.5 160H32zm252 0v224h104.6c29.3 0 51.9-6 67.7-17.9 15.8-11.9 23.7-28.9 23.7-50.8 0-8.1-2.4-16-7-23.5-4.7-7.6-11.4-13.9-20-18.9-8.7-5-18.4-8.2-29.3-9.5v-.6c9.4-1.8 18-5.1 25.8-10 7.8-4.9 13.7-10.6 17.5-17.1 3.8-6.5 5.8-13.7 5.8-21.5 0-36.1-30.5-54.2-91.4-54.2H284zm69.1 45.2h12.8c22.3 0 33.4 6.9 33.4 20.8 0 6.4-2.5 11.5-7.4 15.5s-11.2 6-18.9 6h-20l.1-42.3zm0 87.6h27.2c7.9 0 14.3 2.1 19 6.2s7.2 9.5 7.2 15.9c0 7.3-2.7 13-8.1 17.2-5.4 4.2-12.9 6.3-22.2 6.3h-23v-45.6h-.1z" />',
        viewBox: '0 0 512 512'
    };

    var slnIcon = {
        name: 'sln',
        content: '<path d="M352 32 172.5 211.5 64 128l-32 32v192l32 32 108.5-83.5L352 480l128-32V64L352 32zM64 320V192l64 64-64 64zm166.4-64L352 162.5v187.1L230.4 256z" />',
        viewBox: '0 0 512 512'
    };

    var cloudIcon = {
        name: 'cloud',
        content: '<path d="M442.2 243.6c3.7-11.2 5.8-23.2 5.8-35.6 0-61.9-50.1-112-112-112-37.8 0-71.3 18.8-91.6 47.5-15-9.8-33-15.5-52.3-15.5-52.9 0-95.8 42.9-95.8 95.8 0 1.8.1 3.6.2 5.5C58.9 242.3 32 278 32 320c0 53 43 96 96 96h256c53 0 96-43 96-96 0-31.1-14.8-58.8-37.8-76.4z" />',
        viewBox: '0 0 512 512'
    };

    var fileHorizontalIcon = {
        name: 'file-horizontal',
        content: '<path d="M384 64H64c-17.7 0-32 14.3-32 32v320c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V160l-96-96zm64 352H64V96h288v96h96v224z" />',
        viewBox: '0 0 512 512'
    };

    var subreportIcon = {
        name: 'subreport',
        content: '<path d="M448 480c0 17.7-14.3 32-32 32H128c-17.7 0-32-14.3-32-32v-96h32v96h288V96H128v64H96V96c0-17.7 14.3-32 32-32h288c17.7 0 32 14.3 32 32v384zM63.9 32l254.3-.2L286.4 0 63.8.2C46.2.2 32 14.4 32 32l.1 128H64l-.1-128zm.1 351H32v32c0 17.7 14.3 32 32 32v-64zm-32-62.9S64 288 95 288v32l65-48.1L96 224v32c-32.1 0-64 32.1-64 64.1zM352 384l-160 .1V416l160-.1V384zm-96-192c-35.3 0-64 28.7-64 64s28.7 64 64 64 64-28.7 64-64h-64v-64zm32-32v64h64c0-35.3-28.7-64-64-64z" />',
        viewBox: '0 0 512 512'
    };

    var dataIcon = {
        name: 'data',
        content: '<path d="M448 125.6v.3c-.5 33.9-86.3 61.3-192 61.3S64.5 159.8 64 125.9v-.3c0-34 86-61.6 192-61.6s192 27.6 192 61.6zm0 46.4v.3c-.5 33.9-86.3 61.3-192 61.3S64.5 206.2 64 172.3v-.3l1 86.8v.5c.5 33.7 85.8 61 191 61s190.5-27.3 191-61v-.5l1-86.8zm0 128v.3c-.5 33.9-86.3 61.3-192 61.3S64.5 334.2 64 300.3v-.3l1 86.8v.5c.5 33.7 85.8 61 191 61s190.5-27.3 191-61v-.5l1-86.8z" />',
        viewBox: '0 0 512 512'
    };

    var fileHeaderIcon = {
        name: 'file-header',
        content: '<path d="M416 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm0 416H96V64h320v384zm-32-64H128v-32h256v32zm0-96H128v32h256v-32zm0-160H128v96h256v-96z" />',
        viewBox: '0 0 512 512'
    };

    var fileFooterIcon = {
        name: 'file-footer',
        content: '<path d="M416 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32zm0 416H96V64h320v384zm-32-224H128v-32h256v32zm0-96H128v32h256v-32zm0 160H128v96h256v-96z" />',
        viewBox: '0 0 512 512'
    };

    var groupHeaderSectionIcon = {
        name: 'group-header-section',
        content: '<path d="m128 448 32 32H32V32h128l-32 32H64v384h64zm320-320H128v96h320v-96zm0 160H128v32h320v-32zm0 64H128v32h320v-32z" />',
        viewBox: '0 0 512 512'
    };

    var groupFooterSectionIcon = {
        name: 'group-footer-section',
        content: '<path d="m128 448 32 32H32V32h128l-32 32H64v384h64zm320-160H128v96h320v-96zm0-160H128v32h320v-32zm0 64H128v32h320v-32z" />',
        viewBox: '0 0 512 512'
    };

    var pageHeaderSectionIcon = {
        name: 'page-header-section',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-32-160H128v-96h256v96zm0 96H128v32h256v-32zm0-64H128v32h256v-32z" />',
        viewBox: '0 0 512 512'
    };

    var pageFooterSectionIcon = {
        name: 'page-footer-section',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zm-31-32H129v-96h256v96zm0-160H129v32h256v-32zm0-64H129v32h256v-32z" />',
        viewBox: '0 0 512 512'
    };

    var detailSectionIcon = {
        name: 'detail-section',
        content: '<path d="M96 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H96zm320 416H96V64h320v384zm-33-224h-63v-32h63v32zm-96-32h-63v32h63v-32zm-96 0h-63v32h63v-32zm192 96h-63v32h63v-32zm-96 0h-63v32h63v-32zm-96 0h-63v32h63v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tocSectionIcon = {
        name: 'toc-section',
        content: '<path d="M96 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H96zm320 416H96V64h320v384zm-32-288H224v-32h160v32zm-64 64h-96v-32h96v32zm0 64h-96v-32h96v32zm64 64H224v-32h160v32z" />',
        viewBox: '0 0 512 512'
    };

    var groupSectionIcon = {
        name: 'group-section',
        content: '<path d="m128 416 32 32H32V32h128l-32 32H64v352h64zm320-288H128v32h320v-32zm0 192H128v32h320v-32zm0-96H128v32h320v-32z" />',
        viewBox: '0 0 512 512'
    };

    var parametersIcon = {
        name: 'parameters',
        content: '<path d="M96 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H96zm320 416H96V64h320v384zM285.3 160c-8.9-25-36.3-38.1-61.4-29.2-13.7 4.8-24.4 15.6-29.2 29.2H128v32h66.7c8.9 25 36.3 38.1 61.4 29.2 13.7-4.8 24.4-15.6 29.2-29.2H384v-32h-98.7zM240 192c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm109.3 96c-8.9-25-36.3-38.1-61.4-29.2-13.7 4.8-24.4 15.6-29.2 29.2H128v32h130.7c8.9 25 36.3 38.1 61.4 29.2 13.7-4.8 24.4-15.6 29.2-29.2H384v-32h-34.7zM304 320c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z" />',
        viewBox: '0 0 512 512'
    };

    var dataCsvIcon = {
        name: 'data-csv',
        content: '<path d="M415.9 93.6v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.6 127.8 32.1 93.9v-.3C32.1 59.6 118 32 224 32s191.9 27.6 191.9 61.6zm0 46.4v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.5 174.2 32 140.3v-.3l.1 86.8v.3c.5 33.9 86.3 61.3 191.9 61.3s191.4-27.4 192-61.3v-.3l-.1-86.8zm.1 180-.1-52v.3c-.3 21.7-35.7 40.8-88.9 51.7h89zM271 420.8c-7.7 4.5-16.4 6.8-25.4 6.7-9.7 0-17.4-3-23.1-9s-8.6-14.1-8.6-24.3c0-10.6 3-19 9.1-25.2 6.1-6.2 14-9.3 23.9-9.3 8.4-.1 16.7 2 24 6.3v-22.8c-7-2.6-15.7-3.9-25.9-3.9-16.6 0-30 5.2-40.4 15.7-10.4 10.5-15.6 24.1-15.6 40.9 0 15.8 4.6 28.4 13.8 37.9 9.2 9.5 21.9 14.2 38 14.2 12.3 0 22.3-1.9 30-5.6l.2-21.6zm36.6 25.7c5.4 1 10.9 1.5 16.4 1.5 5.4 0 10.7-.5 16-1.6 4.7-.9 9.2-2.7 13.3-5.3 3.8-2.4 6.8-5.8 9-9.7 2.2-4 3.3-8.9 3.3-14.8.1-3.8-.6-7.6-1.9-11.2-1.3-3.2-3.1-6.1-5.5-8.5-2.6-2.6-5.5-4.9-8.6-6.7-3.6-2.1-7.4-4-11.3-5.6-3.1-1.3-5.8-2.5-8.3-3.7-2.2-1-4.3-2.3-6.2-3.7-1.5-1.1-2.9-2.4-4-4-.9-1.4-1.4-3-1.4-4.7 0-1.5.4-3.1 1.2-4.4.9-1.4 2.1-2.5 3.5-3.3 1.7-1 3.6-1.7 5.6-2.2 2.4-.5 4.9-.8 7.3-.8 2.1 0 4.1.2 6.2.4 2.2.3 4.4.8 6.5 1.4 2.2.6 4.3 1.4 6.4 2.3 2 .9 3.9 2 5.8 3.2v-21.9c-3.8-1.4-7.7-2.4-11.7-3-4.8-.7-9.7-1-14.5-1-5.3 0-10.6.6-15.8 1.8-4.7 1.1-9.1 3-13.1 5.6-3.7 2.5-6.8 5.8-9 9.7-2.3 4.3-3.4 9.2-3.3 14.1-.2 6.5 2 12.8 6 17.9 4 4.9 10.1 9.1 18.3 12.5 3.2 1.3 6.2 2.6 9 3.9 2.5 1.1 4.9 2.5 7.2 4 1.8 1.2 3.5 2.7 4.8 4.5 1.2 1.6 1.8 3.5 1.8 5.5 0 1.5-.4 2.9-1.1 4.2-.8 1.4-2 2.5-3.3 3.4-1.7 1-3.6 1.8-5.6 2.2-2.6.6-5.2.8-7.8.8-5.1 0-10.2-.9-15.1-2.7-5.1-1.8-9.8-4.5-13.9-8V442c4.5 2.3 9 3.8 13.8 4.5zm147.7-105.4-21.8 72.8c-1.1 3.5-1.8 7.1-2.3 10.8h-.4c-.3-3.6-1.1-7.1-2.1-10.5l-21.9-73.1h-25.5l35.7 105h26.8l36.2-105h-24.7zm-295.3-15C85.7 317.7 32.4 295 32 268.3v-.3l.1 86.8v.3c.4 26.7 53.7 49.3 127.9 57.8v-86.8z" />',
        viewBox: '0 0 512 512'
    };

    var dataJsonIcon = {
        name: 'data-json',
        content: '<path d="M415.9 93.6v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.6 127.8 32.1 93.9v-.3C32.1 59.6 118 32 224 32s191.9 27.6 191.9 61.6zm0 46.4v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.5 174.2 32 140.3v-.3l.1 86.8v.3c.5 33.9 86.3 61.3 191.9 61.3s191.4-27.4 192-61.3v-.3l-.1-86.8zm.1 180-.1-52v.3c-.3 21.7-35.7 40.8-88.9 51.7h89zm-251.3 21.1h-23.6v62.4c0 16-5.4 24-16.2 24-4.9.1-9.7-1.5-13.6-4.5v22.2c4.9 1.9 10.1 2.9 15.3 2.8 12.4 0 21.8-3.7 28.3-11.2s9.8-18.2 9.8-32.3v-63.4zm31.7 105.4c5.4 1 10.9 1.5 16.4 1.5 5.4 0 10.7-.5 16-1.6 4.7-.9 9.2-2.7 13.3-5.3 3.8-2.4 6.8-5.8 9-9.7 2.2-4 3.3-8.9 3.3-14.8.1-3.8-.6-7.6-1.9-11.2-1.3-3.2-3.1-6.1-5.5-8.5-2.6-2.6-5.4-4.9-8.6-6.7-3.6-2.1-7.4-4-11.3-5.6-3.1-1.3-5.8-2.5-8.3-3.7-2.2-1-4.3-2.3-6.2-3.7-1.6-1.1-2.9-2.4-4-4-.9-1.4-1.4-3-1.4-4.7 0-1.5.4-3.1 1.2-4.4.9-1.4 2.1-2.5 3.5-3.3 1.7-1 3.6-1.7 5.6-2.2 2.4-.5 4.9-.8 7.4-.7 2.1 0 4.1.1 6.2.4 2.2.3 4.4.8 6.6 1.4 2.2.6 4.3 1.4 6.4 2.3 2 .9 3.9 2 5.8 3.2v-21.9c-3.8-1.4-7.7-2.4-11.7-3-4.8-.7-9.7-1-14.5-1-5.3 0-10.6.6-15.8 1.8-4.7 1.1-9.1 3-13.1 5.6-3.7 2.5-6.8 5.8-9 9.7-2.3 4.3-3.4 9.2-3.3 14.1-.2 6.5 1.9 12.8 6 17.9 4 4.9 10.1 9.1 18.4 12.5 3.2 1.3 6.2 2.6 9 3.9 2.5 1.1 4.9 2.5 7.2 4 1.8 1.2 3.5 2.7 4.8 4.5 1.2 1.6 1.8 3.5 1.8 5.5 0 1.5-.4 2.9-1.1 4.2-.8 1.4-2 2.5-3.3 3.4-1.7 1-3.6 1.8-5.6 2.2-2.6.6-5.2.8-7.8.8-5.1 0-10.3-.9-15.1-2.7-5.1-1.8-9.7-4.5-13.8-8v23.4c4.1 2.2 8.7 3.7 13.4 4.4zm157.3-13.7c9.6-10.1 14.4-23.4 14.4-39.9 0-16.1-4.6-29-13.9-38.8-9.3-9.8-21.4-14.7-36.4-14.7-15.9 0-28.6 5.1-38.2 15.4-9.6 10.3-14.4 23.7-14.4 40.3 0 15.7 4.7 28.5 14.2 38.3s21.7 14.7 36.8 14.7c15.4-.1 27.9-5.2 37.5-15.3zm-17.5-64c4.6 6 6.9 14.5 7 25.4 0 10.4-2.4 18.6-7.2 24.5s-11.3 8.8-19.4 8.8c-7.5.2-14.6-3.2-19.2-9.1-4.9-6.1-7.3-14.3-7.3-24.7 0-10.2 2.4-18.5 7.3-24.7s11.5-9.3 19.8-9.3c8 0 14.4 3.1 19 9.1zM480 341.1h-22.3v58.1c-.1 4.8.1 9.6.6 14.4h-.3c-1.6-2.8-3.4-5.7-5.3-8.6L411 341.1h-25.5v105h22.3v-57.7c0-7.6-.2-13.3-.6-17h.3c1.6 3 3.4 5.9 5.3 8.7l43.3 66H480v-105zM96 313.9c-39-11.2-63.7-27.5-64-45.6v-.3l.1 86.8v.3c.3 18.1 24.9 34.3 63.9 45.6v-86.8z" />',
        viewBox: '0 0 512 512'
    };

    var dataSqlIcon = {
        name: 'data-sql',
        content: '<path d="M415.9 93.6v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.6 127.8 32.1 93.9v-.3C32.1 59.6 118 32 224 32s191.9 27.6 191.9 61.6zm0 46.4v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.5 174.2 32 140.3v-.3l.1 86.8v.3c.5 33.9 86.3 61.3 191.9 61.3s191.4-27.4 192-61.3v-.3l-.1-86.8zm.1 180-.1-52v.3c-.3 21.7-35.7 40.8-88.9 51.7h89zM209.1 448.6c5.4 1 10.9 1.5 16.4 1.5 5.4 0 10.7-.5 16-1.6 4.7-.9 9.2-2.7 13.3-5.3 3.8-2.4 6.8-5.8 9-9.7 2.2-4 3.3-8.9 3.3-14.8.1-3.8-.6-7.6-1.9-11.2-1.3-3.2-3.1-6.1-5.5-8.5-2.5-2.6-5.4-4.9-8.6-6.7-3.6-2.1-7.4-4-11.3-5.6-3.1-1.3-5.8-2.5-8.3-3.7-2.2-1-4.3-2.3-6.2-3.7-1.6-1.1-2.9-2.4-4-4-.9-1.4-1.4-3-1.4-4.7 0-1.5.4-3.1 1.3-4.4.9-1.4 2.1-2.5 3.5-3.3 1.7-1 3.6-1.7 5.6-2.2 2.4-.5 4.9-.8 7.3-.8 2.1 0 4.1.2 6.2.4 2.2.3 4.4.8 6.6 1.4 2.2.6 4.3 1.4 6.4 2.3 2 .9 3.9 2 5.8 3.2v-21.9c-3.8-1.4-7.7-2.4-11.7-3-4.8-.7-9.7-1-14.5-1-5.3 0-10.6.6-15.8 1.8-4.7 1.1-9.1 3-13.1 5.6-3.7 2.5-6.8 5.8-9 9.7-2.3 4.3-3.4 9.2-3.3 14.1-.2 6.5 1.9 12.8 6 17.9 4 4.9 10.1 9.1 18.4 12.5 3.2 1.3 6.2 2.6 9 3.9 2.5 1.1 4.9 2.4 7.2 4 1.8 1.2 3.5 2.7 4.8 4.5 1.2 1.6 1.8 3.5 1.8 5.5 0 1.5-.4 2.9-1.1 4.2-.8 1.4-2 2.5-3.3 3.4-1.7 1-3.6 1.8-5.6 2.2-2.6.6-5.2.8-7.8.8-5.1 0-10.3-.9-15.1-2.7-5.1-1.8-9.7-4.5-13.8-8v23.4c4 2.3 8.6 3.8 13.4 4.5zm172.8-21.2c5.7-9 8.5-19.8 8.5-32.4 0-16.1-4.6-29-13.9-38.8s-21.3-14.7-36.2-14.8c-16 0-28.8 5.1-38.5 15.4s-14.4 23.7-14.4 40.3c-.1 7 1.1 13.9 3.4 20.4 2.1 6.1 5.4 11.7 9.6 16.6 4.2 4.7 9.3 8.6 15 11.2 6.1 2.8 12.8 4.4 19.5 4.5 3.8 4.2 7.4 8.1 10.9 11.8 3.3 3.5 6.9 6.7 10.8 9.6 3.6 2.6 7.4 4.8 11.6 6.4 4.2 1.6 8.7 2.4 13.2 2.3 3.4 0 6.7-.2 10.1-.7 2.2-.3 4.3-.8 6.5-1.3V458c-.8.3-1.6.6-2.4.8l-2.7.6c-.9.2-1.9.3-2.8.4s-1.8.1-2.6.1c-2.7 0-5.4-.2-8-.6-2.5-.4-4.9-1.1-7.1-2.1-2.5-1.1-4.8-2.5-6.9-4.2-2.6-2-5-4.3-7.3-6.7 9.9-3.4 18.2-10.1 23.7-18.9zm-23.3-56.3c4.6 6 6.9 14.5 6.9 25.3 0 10.4-2.4 18.6-7.2 24.5-4.8 6-11.3 8.9-19.4 8.8-7.5.2-14.7-3.2-19.3-9.1-4.8-6.1-7.3-14.3-7.3-24.7 0-10.4 2.4-18.6 7.3-24.7 4.9-6.2 11.5-9.4 19.8-9.4 8.3.1 14.6 3.1 19.2 9.3zm121.4 58h-38.9v-85.8h-23.7v105H480v-19.2zm-320-103C85.7 317.7 32.4 295 32 268.3v-.3l.1 86.8v.3c.4 26.7 53.7 49.3 127.9 57.8v-86.8z" />',
        viewBox: '0 0 512 512'
    };

    var dataWebIcon = {
        name: 'data-web',
        content: '<path d="M415.9 93.6v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.6 127.8 32.1 93.9v-.3C32.1 59.6 118 32 224 32s191.9 27.6 191.9 61.6zm0 46.4v.3c-.5 33.9-86.3 61.3-191.9 61.3S32.5 174.2 32 140.3v-.3l.1 86.8v.3c.5 33.9 86.3 61.3 191.9 61.3s191.4-27.4 192-61.3v-.3l-.1-86.8zm.1 180-.1-52v.3c-.3 21.7-35.7 40.8-88.9 51.7h89zm-151.1 23-14.5 70.1c-.8 3.9-1.3 7.8-1.5 11.7h-.3c-.3-3.8-.9-7.6-1.7-11.3L229.6 343h-25.3l-19.1 69.6c-1.1 4-1.9 8.1-2.1 12.3h-.4c-.2-4-.6-8-1.4-12l-14.8-70h-25.8l27.6 105h27.3l17.9-67.4c1-3.9 1.6-7.8 1.9-11.8h.3c.1 4 .7 7.9 1.7 11.8l17.4 67.4H261l27.8-105h-23.9zm109.8 85.8h-39.3v-24h34.4v-19.2h-34.4v-23.4h36.9V343h-60.6v105h63v-19.2zm66.8 19.2c11.9 0 21.3-2.8 28.2-8.5 6.9-5.6 10.3-13.3 10.3-22.9.1-6.3-2.3-12.3-6.7-16.8-4.5-4.6-10.4-7.3-17.9-8.3v-.3c5.6-1.5 10.8-4.5 14.7-8.9 3.8-4 5.8-9.4 5.8-14.9 0-7.8-3.2-13.9-9.5-18.2-6.3-4.3-15.3-6.5-27-6.5h-38.3v105h40.4zm-7.9-87.6c11.5 0 17.3 3.9 17.3 11.6.2 3.7-1.4 7.3-4.2 9.8-2.8 2.4-6.6 3.6-11.5 3.5h-10.4v-24.9h8.8zm4.1 42.5c5.5 0 9.7 1.2 12.8 3.6 3 2.4 4.7 6 4.6 9.9.2 4-1.5 7.9-4.6 10.4-3.1 2.5-7.4 3.8-12.9 3.8h-12.8v-27.7h12.9zM96 313.9c-39-11.2-63.7-27.5-64-45.6v-.3l.1 86.8v.3c.3 18.1 24.9 34.3 63.9 45.6v-86.8z" />',
        viewBox: '0 0 512 512'
    };

    var groupCollectionIcon = {
        name: 'group-collection',
        content: '<path d="M448 352H160v-32h288v32zm0 32H160v32h288v-32zm0-288H160v32h288V96zm0 64H160v32h288v-32zM64 192V96h64l32-32H32v160h128l-32-32H64zm0 224v-96h64l32-32H32v160h128l-32-32H64z" />',
        viewBox: '0 0 512 512'
    };

    var parameterBooleanIcon = {
        name: 'parameter-boolean',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm384 288H64V128h384v256zM207 212h-39v114h-32V212H96v-26h111v26zm96.8-37-68.1 163h-27.5l67.9-163h27.7zM416 212h-49v34h45v26h-45v54h-32V186h81v26z" />',
        viewBox: '0 0 512 512'
    };

    var parameterDateTimeIcon = {
        name: 'parameter-date-time',
        content: '<path d="M416 202.8V128c0-17.7-14.3-32-32-32H64c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h304c61.9 0 112-50.1 112.1-111.9 0-43.3-25-82.8-64.1-101.3zM64.1 384 64 192h304c-61.9 0-112 50.2-112 112 0 30.1 12.1 58.9 33.6 80H64.1zm303.9 0c-44.2 0-80-35.8-80-80s35.8-80 80-80 80 35.8 80 80-35.8 80-80 80zm48-96v32h-64v-64h32v32h32zm-224 32H96v-96h96v96z" />',
        viewBox: '0 0 512 512'
    };

    var parameterFloatIcon = {
        name: 'parameter-float',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm384 288H64V128h384v256zm-276-55.6c-33.3 0-50-23.4-50-70.2 0-24.3 4.5-42.8 13.5-55.5s22.1-19.1 39.2-19.1c32.6 0 48.8 23.8 48.8 71.4 0 23.7-4.4 41.9-13.3 54.5-8.9 12.6-21.6 18.9-38.2 18.9zm1.4-121.3c-13.3 0-20 16.8-20 50.3 0 31.6 6.5 47.4 19.6 47.4 12.8 0 19.1-16.3 19.1-48.8s-6.2-48.9-18.7-48.9zm83.8 121.3c-4.7.1-9.2-1.5-12.7-4.7-3.3-2.9-5.2-7.1-5.1-11.5-.1-4.4 1.8-8.7 5.2-11.5 3.6-3 8.3-4.6 13-4.5 5.3 0 9.6 1.5 12.9 4.5 6.4 5.9 6.7 15.9.8 22.2l-.9.9c-3.3 3.1-7.8 4.6-13.2 4.6zM390 326h-88v-24h29v-87.2l-30 6.4v-25.5l60-12.1V302h29v24z" />',
        viewBox: '0 0 512 512'
    };

    var parameterIntegerIcon = {
        name: 'parameter-integer',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm384 288H64V128h384v256zm-262.6-58H96.8v-24.4h29v-87.2L96 220.8v-25l60.6-12.2v118h28.8V326zm59.2-26.2v.6h56.8V326h-92.2v-24l40.1-38.4c8.1-7.7 13.7-14.2 17-19.5 3.2-4.9 4.9-10.7 4.9-16.6 0-12.9-6.9-19.3-20.8-19.3-12 0-23.6 4.8-34.6 14.4v-27.2c12.2-7.9 25.9-11.8 41.2-11.8 14.3 0 25.5 3.6 33.5 10.8 8 7.2 12.1 16.9 12.1 29.1 0 16.3-9.8 33.2-29.4 50.7l-28.6 25.6zm82.1 21.6v-26.9c9.4 6.8 20.3 10.3 32.8 10.3 7.9 0 14-1.7 18.4-5.1 4.4-3.4 6.6-8.1 6.6-14.2 0-6.2-2.7-11.1-8.1-14.5-5.4-3.4-12.9-5.1-22.4-5.1h-12.6v-23.6H353c18.2 0 27.4-6.1 27.4-18.2 0-11.4-7-17.1-21-17.1-9.4 0-18.5 3-27.3 9.1V191c9.8-4.9 21.3-7.4 34.4-7.4 14.3 0 25.5 3.2 33.5 9.7 7.8 6 12.2 15.3 12 25.1 0 18.3-9.3 29.8-27.8 34.4v.5c9.9 1.2 17.7 4.8 23.4 10.8 5.7 5.9 8.8 13.8 8.6 21.9 0 13.1-4.8 23.4-14.4 31.1s-22.8 11.4-39.6 11.4c-14.7-.1-26.4-2.4-35.5-7.1z" />',
        viewBox: '0 0 512 512'
    };

    var parameterStringIcon = {
        name: 'parameter-string',
        content: '<path d="M127.3 328.9c13.2 0 23.1-5.6 29.8-16.8h.4v14.4h29.2v-59.8c0-28.5-14.3-42.7-42.8-42.7-6.9.1-13.7.9-20.4 2.5-7.4 1.7-13.3 3.6-17.6 5.9v23.2c10.8-7.1 22.1-10.6 34-10.6s17.8 5.5 17.8 16.4l-27.2 3.6c-23 3-34.5 14.2-34.5 33.6 0 9.2 2.8 16.5 8.3 22s13.2 8.3 23 8.3zm12.2-47.5 18.2-2.3v6.7c0 6.1-1.8 11.2-5.5 15.2-3.6 4-8.8 6.2-14.2 6-4.2 0-7.5-1.1-9.9-3.4-2.4-2.2-3.8-5.4-3.7-8.6 0-7.7 5-12.3 15.1-13.6zm209 33.5c-9.5-9.3-14.3-21.3-14.3-36 0-17 5.1-30.4 15.3-40.2 10.2-9.8 23.8-14.7 40.9-14.7 11.8 0 20.3 1.6 25.6 4.7v26.2c-6.2-4.7-13.8-7.3-21.6-7.2-8.9 0-15.9 2.6-21 7.8-5.2 5.2-7.8 12.3-7.8 21.4 0 8.9 2.5 15.8 7.4 20.9 4.9 5 11.8 7.6 20.4 7.6 7.7 0 15.2-2.4 22.6-7.3v24.8c-7 4-17 6-30.2 6-15.3 0-27.8-4.7-37.3-14zm-104 .5h.4c6.3 9.4 15.6 14.1 27.9 14.1 13.6 0 24.5-5 32.6-15.1 8.1-10.1 12.2-23.5 12.2-40.1 0-15.3-3.5-27.4-10.5-36.3s-16.9-13.3-29.8-13.3c-14.1 0-24.9 5.8-32.5 17.5h-.4V179h-30.9v148h30.9l.1-11.6zm-.5-42.2c0-7.4 2-13.4 6.1-18.1 3.8-4.5 9.5-7.1 15.4-6.9 6.6 0 11.6 2.3 15.2 7 3.5 4.7 5.3 11.1 5.3 19.4 0 10-1.9 17.7-5.8 23.1-3.9 5.4-9.3 8.2-16.4 8.2-5.5.1-10.7-2.2-14.3-6.4-3.7-4.2-5.6-9.6-5.6-16l.1-10.3zM448 96H64c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32zm0 288H64V128h384v256z" />',
        viewBox: '0 0 512 512'
    };

    var tocSectionLevelIcon = {
        name: 'toc-section-level',
        content: '<path d="M96 32c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V64c0-17.7-14.3-32-32-32H96zm320 416H96V64h320v384zm-32-288H192v-32h192v32zm0 64h-96v-32h96v32zm0 64h-96v-32h96v32zm0 64h-96v-32h96v32zm-192-32v-96l64 48-64 48z" />',
        viewBox: '0 0 512 512'
    };

    var inheritedIcon = {
        name: 'inherited',
        content: '<path d="M448 320v128H320V320h30.4L256 244.5 161.6 320H192v128H64V320h46.4l120-96H176V64h160v160h-54.4l120 96H448z" />',
        viewBox: '0 0 512 512'
    };

    var fileVideoIcon = {
        name: 'file-video',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zM304 304.8v-.8c0-8.8-7.2-16-16-16h-10.1c24.2-3.1 42.8-24.3 41.8-49.6-1-24.8-21.2-45-46-46-27.4-1.1-49.9 20.8-49.9 48 0 24.4 18.2 44.6 41.8 47.6h-70.4c17.2-1.7 30.3-16.9 28.7-34.8-1.4-15.5-14.1-27.9-29.6-28.9-18.7-1.3-34.2 13.5-34.2 31.9 0 16.6 12.7 30.2 28.8 31.8H176c-8.8 0-16 7.2-16 16v64c0 8.8 7.2 16 16 16h111.7c8.4 0 15.6-6.3 16.3-14.6.2-3.1-.3-6.1-1.7-8.7l1.8 1.1 44.9 27.1c1.3.8 2.7 1.2 4.1 1.2 1.3 0 2.7-.3 3.9-1 2.5-1.4 4.1-4.1 4.1-7v-95.8c0-2.9-1.5-5.5-4-6.9s-5.5-1.5-8 0L304 304.8zM193.5 272c-.5.1-1 .1-1.5.1s-1 0-1.5-.1h-.2c-8.6-.8-15.1-8.5-14.3-17.2.6-7.9 7.2-14.2 15.1-14.6 9.2-.5 16.8 6.9 16.8 16 .1 8.1-6.1 15-14.4 15.8zm82.3-.3c-.3 0-.6.1-.9.1-1 .1-2.1.2-3.1.2s-2.1 0-3.1-.2c-.3 0-.6-.1-.9-.1-15.9-2-27.9-15.7-27.9-31.7 0-17.6 14.4-32 32-32s32 14.4 32 32c-.1 16.1-12.1 29.7-28.1 31.7z" />',
        viewBox: '0 0 512 512'
    };

    var fileAudioIcon = {
        name: 'file-audio',
        content: '<path d="M218 353.8c-5.5-2.9-12.1-4.5-19-4.5-21 0-38 14.8-38 33.2s17 33.2 38 33.2 38-14.8 38-33.2V256.6l96-22.6v87.8c-5.5-2.9-12.1-4.5-19-4.5-21 0-38 14.8-38 33.2s17 33.2 38 33.2 38-14.8 38-33.2V192.2l-134 31.5v130.1zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileImageIcon = {
        name: 'file-image',
        content: '<path d="M298.7 385.2S272.2 288 213.1 288s-85 128-85 128h256s-11.9-78.7-42.7-78.7-42.7 47.9-42.7 47.9zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zM288 256c0 17.7 14.3 32 32 32s32-14.3 32-32-14.3-32-32-32-32 14.3-32 32z" />',
        viewBox: '0 0 512 512'
    };

    var filePresentationIcon = {
        name: 'file-presentation',
        content: '<path d="M127.5 214.4c0 9.9 6.1 18.2 14.5 21.2v113.1c0 12.4 9.6 22.4 21.3 22.4H246v11.8l-13.6 14.6c-1.9 2-3 4.8-3 8 0 6.3 4.7 11.3 10.5 11.3 2.8 0 5.5-1.3 7.4-3.3.1-.1.2-.3.4-.4l8.9-9.6 8.9 9.6c.1.1.2.3.4.4 1.9 2 4.5 3.3 7.4 3.3 5.8 0 10.5-5 10.5-11.3 0-3.1-1.2-6-3-8L267 382.8V371h78.8c11.1 0 20.1-9.3 20.9-21h1.3V235.9c9-2.6 15.7-11.3 15.7-21.6 0-12.4-9.5-22.4-21.3-22.4H148.8c-11.8.1-21.3 10.1-21.3 22.5zM299 237h43v89h-43v-89zm-64 26h43v63h-43v-63zm-64 18h43v45h-43v-45zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileDataIcon = {
        name: 'file-data',
        content: '<path d="M352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288zM128 229.3v149.4c0 20.6 19.1 37.3 42.7 37.3h170.6c23.6 0 42.7-16.7 42.7-37.3V229.3c0-20.6-19.1-37.3-42.7-37.3H170.7c-23.6 0-42.7 16.7-42.7 37.3zM247 379h-76v-47h76v47zm18-112h76v47h-76v-47zm0 65h76v47h-76v-47zm-18-19h-76v-47h76v47z" />',
        viewBox: '0 0 512 512'
    };

    var fileDiscImageIcon = {
        name: 'file-disc-image',
        content: '<path d="M256.1 322.7c3.7 0 7.2-1.1 10.1-3s5.2-4.5 6.7-7.6c1.2-2.5 1.9-5.2 1.9-8.1 0-10.3-8.4-18.7-18.7-18.7-2.8 0-5.4.6-7.7 1.7-3.4 1.6-6.3 4.1-8.3 7.3-1.7 2.8-2.7 6.1-2.7 9.7 0 10.4 8.3 18.7 18.7 18.7zm-52.5-117.8c-19.1 10.1-34.9 25.5-45.4 44.4-9 16.1-14.1 34.7-14.1 54.4 0 61.7 50 111.7 111.7 111.7 20 0 38.8-5.3 55.1-14.5 18.6-10.6 33.9-26.4 43.9-45.4 8.1-15.5 12.7-33.1 12.7-51.8 0-61.7-50-111.7-111.7-111.7-18.9 0-36.7 4.7-52.2 12.9zm89.8 99.2c0 6.1-1.4 11.8-4 16.9l48.7 25.8c-8.3 15.8-20.9 28.9-36.3 37.7l-26.6-48.3c-5.6 3.3-12.1 5.3-19.1 5.3-20.6 0-37.4-16.7-37.4-37.4 0-6.8 1.8-13.2 5-18.7l-49.2-27.1c8.8-15.7 22-28.6 38-37l26.8 49.3c5-2.5 10.7-3.9 16.7-3.9 20.7 0 37.4 16.7 37.4 37.4zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var fileProgrammingIcon = {
        name: 'file-programming',
        content: '<path d="m236 256-52.6-.2-48.6 48.6.1.1c-4.1 3.9-6.7 9.4-6.7 15.5 0 5.8 2.3 11 6 14.8l49.1 49.1 46.8-.2-59.7-59.7c.2-.9.3-1.8.3-2.8L236 256zm105.2 65.5c.1.9.2 1.9.3 2.8L281.9 384l46.8.2 49.1-49.1c3.7-3.8 6-9.1 6-14.8 0-6.1-2.6-11.6-6.7-15.5l.1-.1-48.6-48.7-52.6.2 65.2 65.3zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var parametersByteArrayIcon = {
        name: 'parameters-byte-array',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm384 288H64V128h384v256zm-306.2-55.6c-33.3 0-50-23.4-50-70.2 0-24.3 4.5-42.8 13.5-55.5s22.1-19.1 39.2-19.1c32.6 0 48.8 23.8 48.8 71.4 0 23.7-4.4 41.9-13.3 54.5-8.9 12.6-21.6 18.9-38.2 18.9zm1.4-121.3c-13.3 0-20 16.8-20 50.3 0 31.6 6.5 47.4 19.6 47.4 12.8 0 19.1-16.3 19.1-48.8s-6.2-48.9-18.7-48.9zm113.6 121.3c-33.3 0-50-23.4-50-70.2 0-24.3 4.5-42.8 13.5-55.5s22.1-19.1 39.2-19.1c32.6 0 48.8 23.8 48.8 71.4 0 23.7-4.4 41.9-13.3 54.5-8.8 12.6-21.6 18.9-38.2 18.9zm1.4-121.3c-13.3 0-20 16.8-20 50.3 0 31.6 6.5 47.4 19.6 47.4 12.8 0 19.2-16.3 19.2-48.8s-6.3-48.8-18.8-48.9zM420 326h-88v-24h29v-87.2l-30 6.4v-25.4l61-12.3V302h28v24z" />',
        viewBox: '0 0 512 512'
    };

    var parametersUnknownIcon = {
        name: 'parameters-unknown',
        content: '<path d="M64 96c-17.7 0-32 14.3-32 32v256c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32V128c0-17.7-14.3-32-32-32H64zm384 288H64V128h384v256zm-64-64h-64v-32h64v32zm-96 0h-64v-32h64v32zm-96 0h-64v-32h64v32z" />',
        viewBox: '0 0 512 512'
    };

    var fileErrorIcon = {
        name: 'file-error',
        content: '<path d="M160 320h32V160h-32v160zm16 32c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zM352 32H96c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h320c17.7 0 32-14.3 32-32V128l-96-96zm64 416H96V64h224v96h96v288z" />',
        viewBox: '0 0 512 512'
    };

    var filesErrorIcon = {
        name: 'files-error',
        content: '<path d="M64 64h224l-32-32H64c-17.7 0-32 14.3-32 32v320c0 17.7 14.3 32 32 32h64v-32H64V64zm208 320c-8.8 0-16 7.2-16 16s7.2 16 16 16 16-7.2 16-16-7.2-16-16-16zM384 96H192c-17.7 0-32 14.3-32 32v320c0 17.7 14.3 32 32 32h256c17.7 0 32-14.3 32-32V192l-96-96zm64 352H192V128h160v96h96v224zm-192-96h32V192h-32v160z" />',
        viewBox: '0 0 512 512'
    };

    var dataRestIcon = {
        name: 'data-rest',
        content: '<path d="M32 268v.33-.33zm0 .33.12 86.48v.32c.29 18.1 24.9 34.34 63.87 45.56l.01-86.77c-38.99-11.22-63.7-27.48-64-45.59zm192.01-113.1c105.67 0 191.4-27.41 191.93-61.29v-.33C415.94 59.59 330 32 224 32S32.06 59.59 32.07 93.61v.33c.53 33.88 86.27 61.29 191.94 61.29zM32 140.32s0 .01 0 0V140v.32zm384 86.81v-.32l-.12-86.81v.32c-.53 33.88-86.26 61.29-191.93 61.29-105.66 0-191.4-27.41-191.95-61.28l.12 86.48v.32c.53 33.88 86.26 61.29 191.93 61.29S415.46 261 416 227.13zM327 320h89l-.07-52v.32c-.34 21.73-35.73 40.8-88.93 51.68zm-130.74 96.93 19.85 31.05h-27.17l-16.33-27.03c-1.22-2.05-2.39-3.88-3.52-5.49-1.12-1.61-2.26-2.99-3.41-4.14-1.15-1.15-2.34-2.03-3.59-2.64-1.25-.61-2.6-.92-4.06-.92h-6.37v40.21H128V342.95h37.5c25.49 0 38.23 9.52 38.23 28.56 0 3.66-.56 7.04-1.68 10.14-1.12 3.1-2.71 5.9-4.76 8.39s-4.53 4.64-7.43 6.45c-2.91 1.81-6.14 3.22-9.7 4.25v.29c1.56.49 3.08 1.28 4.54 2.38 1.46 1.1 2.88 2.38 4.25 3.85 1.37 1.46 2.67 3.04 3.92 4.72 1.23 1.69 2.37 3.34 3.39 4.95zm-17.43-42.48c0-9.18-5.49-13.77-16.48-13.77h-10.69v29.22h10.25c5.08 0 9.16-1.46 12.23-4.39 3.13-2.98 4.69-6.67 4.69-11.06zm70.75 30.32h34.35v-19.19h-34.35v-23.36h36.91v-19.26h-60.57v105.03h62.99V428.8h-39.33v-24.03zm115.58-6.01c-2.39-2.49-5.26-4.72-8.61-6.7-3.34-1.98-7.12-3.85-11.32-5.6-3.08-1.27-5.84-2.5-8.28-3.7-2.44-1.2-4.52-2.42-6.23-3.66-1.71-1.24-3.03-2.56-3.96-3.96-.93-1.39-1.39-2.97-1.39-4.72 0-1.61.41-3.06 1.25-4.36.83-1.29 2-2.4 3.52-3.33 1.51-.93 3.37-1.65 5.57-2.16 2.2-.51 4.64-.77 7.32-.77 1.95 0 4.02.15 6.19.44s4.36.75 6.56 1.36 4.33 1.38 6.41 2.31c2.07.93 3.99 2 5.75 3.22v-21.9c-3.56-1.37-7.46-2.38-11.68-3.04-4.22-.66-9.07-.99-14.54-.99-5.57 0-10.84.6-15.82 1.79s-9.36 3.06-13.15 5.6c-3.78 2.54-6.77 5.77-8.97 9.7-2.2 3.93-3.3 8.63-3.3 14.1 0 6.98 2.01 12.94 6.04 17.87 4.03 4.93 10.14 9.11 18.35 12.52 3.22 1.32 6.23 2.61 9.01 3.88 2.78 1.27 5.19 2.59 7.21 3.96 2.03 1.37 3.63 2.86 4.8 4.47s1.76 3.44 1.76 5.49c0 1.51-.37 2.92-1.1 4.21-.73 1.29-1.84 2.42-3.33 3.37-1.49.95-3.34 1.7-5.57 2.23-2.22.54-4.82.81-7.8.81-5.08 0-10.11-.89-15.09-2.67s-9.59-4.46-13.84-8.02v23.44c3.81 1.95 8.31 3.42 13.51 4.39s10.68 1.46 16.44 1.46c5.61 0 10.95-.54 16-1.61 5.05-1.07 9.49-2.84 13.29-5.31s6.82-5.69 9.05-9.67c2.22-3.98 3.33-8.9 3.33-14.76 0-4.25-.63-7.97-1.9-11.17a26.091 26.091 0 0 0-5.48-8.52zm14.94-55.81v19.26h29.81v85.77h23.73v-85.77h29.96v-19.26h-83.5z" />',
        viewBox: '0 0 512 512'
    };

    var fileTypescriptIcon = {
        name: 'file-typescript',
        content: '<path d="M64 128h192v48h-72v208h-48V176H64v-48zm316.6 107.6c-35-12.6-50.1-21.6-50.1-40.6 0-14.6 12.9-29.9 43.3-29.9 24.6 0 42.9 7.1 52.3 11.8l11.5-36.6c-13.6-6.5-34.4-12.3-62.8-12.3-56.8 0-92.7 30.6-92.7 71.3 0 35.6 27.6 57.6 70.9 72.1 33.1 11.4 46.4 22.4 46.4 41.2 0 20.3-17.1 33.9-47.6 33.9-24.4 0-47.9-7.4-63.3-15.8l-10.6 37.6c14.3 8.3 43.1 15.8 70.8 15.8 67.6 0 99.3-34.6 99.3-74.6 0-35.8-21.9-57.4-67.4-73.9z" />',
        viewBox: '0 0 512 512'
    };

    var tablePositionStartIcon = {
        name: 'table-position-start',
        content: '<path d="M480 320v32H32v-32h448zM32 416h448v-32H32v32zm192-160H32V32h224v224h-32zm-64-128h64V64h-64v64zm-32 32H64v64h64v-64zm0-96H64v64h64V64zm32 160h64v-64h-64v64zM32 480h320v-32H32v32z" />',
        viewBox: '0 0 512 512'
    };

    var tablePositionCenterIcon = {
        name: 'table-position-center',
        content: '<path d="M352 256V32H128v224h224zM256 64h64v64h-64V64zm-32 160h-64v-64h64v64zm0-96h-64V64h64v64zm32 32h64v64h-64v-64zM32 448h320v32H32v-32zm448-128v32H32v-32h448zM32 384h448v32H32v-32z" />',
        viewBox: '0 0 512 512'
    };

    var tablePositionEndIcon = {
        name: 'table-position-end',
        content: '<path d="M32 384h448v32H32v-32zm0 96h320v-32H32v32zM480 32v224H256V32h224zM352 160h-64v64h64v-64zm0-96h-64v64h64V64zm96 96h-64v64h64v-64zm0-96h-64v64h64V64zM32 352h448v-32H32v32z" />',
        viewBox: '0 0 512 512'
    };

    var listRomanUpperIcon = {
        name: 'list-roman-upper',
        content: '<path d="M32 32h32v128H32V32zm0 288h32V192H32v128zm64 0h32V192H96v128zM32 480h32V352H32v128zm64 0h32V352H96v128zm64 0h32V352h-32v128zM128 96h352v32H128V96zm64 160h288v32H192v-32zm64 160h224v32H256v-32zM96 152c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm64 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm64 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8z" />',
        viewBox: '0 0 512 512'
    };

    var listRomanLowerIcon = {
        name: 'list-roman-lower',
        content: '<path d="M32 64h16v96H32V64zm0 256h16v-96H32v96zm32 0h16v-96H64v96zM32 480h16v-96H32v96zm32 0h16v-96H64v96zm32 0h16v-96H96v96zM48 40c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 112c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 160c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM48 200c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM48 360c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 0c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zm32 112c0 4.4-3.6 8-8 8s-8-3.6-8-8 3.6-8 8-8 8 3.6 8 8zM128 96h352v32H128V96zm32 160h320v32H160v-32zm32 160h288v32H192v-32z" />',
        viewBox: '0 0 512 512'
    };

    var importIcon = {
        name: 'import',
        content: '<path d="M96 480c-17.7 0-32-14.3-32-31.9V192c0-17.7 14.3-32 32-32h96.3v30.9H96.4V448h319.1V190.9h-95.9V160H416c17.7 0 32 14.3 32 31.9V448c0 17.7-14.3 32-31.9 32H96zm159.5-162 96.5-94h-64.5V32h-64v192H159l96.5 94z" />',
        viewBox: '0 0 512 512'
    };

    var exportIcon = {
        name: 'export',
        content: '<path d="M96 480c-4.3 0-8.5-.8-12.5-2.5-3.8-1.6-7.3-3.9-10.2-6.9-2.9-2.9-5.3-6.4-6.9-10.2-1.7-3.9-2.5-8.2-2.5-12.5V192c0-4.3.8-8.5 2.5-12.5 1.6-3.8 3.9-7.3 6.9-10.2 2.9-2.9 6.4-5.3 10.2-6.9 3.9-1.7 8.2-2.5 12.5-2.5h96.3v31.9H96.4v256.3h319.1V191.9h-95.9V160H416c17.7 0 32 14.3 32 31.9V448c0 17.7-14.3 32-31.9 32H96zm192-160V126h64.5L256 32l-96.5 94H224v194h64z" />',
        viewBox: '0 0 512 512'
    };

    var graphIcon = {
        name: 'graph',
        content: '<path d="M64 448h416v32H32V32h32v416zm128-192-96 96v64h384V160L288 320l-96-64zM416 64l14.2 14.2L288 192l-96-64-96 96v64l96-96 96 64 174.5-145.4L480 128V64h-64z" />',
        viewBox: '0 0 512 512'
    };

    var chartColumnClusteredIcon = {
        name: 'chart-column-clustered',
        content: '<path d="M320 96v352h-32V288H128v160H64V32H32v448h448V96H320zm-64 352h-96V320h96v128z" />',
        viewBox: '0 0 512 512'
    };

    var chartColumnStackedIcon = {
        name: 'chart-column-stacked',
        content: '<path d="M320 192v256h-32V96H128v352H64V32H32v448h448V192H320zM160 448V256h96v192h-96zm192 0v-96h96v96h-96z" />',
        viewBox: '0 0 512 512'
    };

    var chartColumnStacked100Icon = {
        name: 'chart-column-stacked100',
        content: '<path d="M320 32v416h-32V32H128v416H64V32H32v448h448V32H320zM160 448V192h96v256h-96zm192 0V288h96v160h-96z" />',
        viewBox: '0 0 512 512'
    };

    var chartColumnRangeIcon = {
        name: 'chart-column-range',
        content: '<path d="M480 448v32H32V32h32v416h416zM256 128h-96v224h96V128m32-32v288H128V96h160zm192-64H320v224h160V32z" />',
        viewBox: '0 0 512 512'
    };

    var chartBarClusteredIcon = {
        name: 'chart-bar-clustered',
        content: '<path d="M64 448v-64h160V224H64v-32h352V32H32v448h448v-32H64zm128-192v96H64v-96h128z" />',
        viewBox: '0 0 512 512'
    };

    var chartBarStackedIcon = {
        name: 'chart-bar-stacked',
        content: '<path d="M64 448v-64h352V224H64v-32h256V32H32v448h448v-32H64zm0-384h96v96H64V64zm192 192v96H64v-96h192z" />',
        viewBox: '0 0 512 512'
    };

    var chartBarStacked100Icon = {
        name: 'chart-bar-stacked100',
        content: '<path d="M480 192V32H32v448h448v-32H64v-64h416V224H64v-32h416zm-160 64v96H64v-96h256zM64 64h160v96H64V64z" />',
        viewBox: '0 0 512 512'
    };

    var chartBarRangeIcon = {
        name: 'chart-bar-range',
        content: '<path d="M480 448v32H32V32h32v416h416zm-96-192H160v96h224v-96m32-32v160H128V224h288zm64-192H256v160h224V32z" />',
        viewBox: '0 0 512 512'
    };

    var chartAreaClusteredIcon = {
        name: 'chart-area-clustered',
        content: '<path d="m405.5 200.3-88.2-88.2-91.2 114L192 192l-37.6 45.1L64 146.8V32H32v448h448V96l-74.5 104.3zM320 160l66.7 66.7L320 320l-71.1-71.1L320 160zM64 192l69.8 69.8L64 345.6V192z" />',
        viewBox: '0 0 512 512'
    };

    var chartAreaStackedIcon = {
        name: 'chart-area-stacked',
        content: '<path d="m320 165.3-128-64-128 128V32H32v448h448V32L320 165.3zm128 7.5L320 352 192 224 64 377.6v-103l134.3-134.3 126.1 63 123.6-103v72.5z" />',
        viewBox: '0 0 512 512'
    };

    var chartAreaStacked100Icon = {
        name: 'chart-area-stacked100',
        content: '<path d="M32 32v448h448V32H32zm416 108.8L320 320 192 192 64 345.6V64h384v76.8z" />',
        viewBox: '0 0 512 512'
    };

    var chartAreaRangeIcon = {
        name: 'chart-area-range',
        content: '<path d="M64 416v32h416v32H32V32h32v224l128-128 128 64L480 32v192L320 384l-127-64-129 96z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineIcon = {
        name: 'chart-line',
        content: '<path d="M64 448h416v32H32V32h32v416zm152.4-190.4L96 416v-51.2l97.2-129.6 41.2-33-27.3-34.1L96 224v-38l119.9-58.1 43.5 54.3 109-87.2 55.9 85.7L480 114v47l-38 46.7 38 58.3.5 53.3-58.5-87-82.5 101.3-85.1-106.4-38 30.4zm63-50.4 60.1 75.2 64.3-77.1-42.7-63.5-81.7 65.4z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineStackedIcon = {
        name: 'chart-line-stacked',
        content: '<path d="M480 448v32H32V32h32v416h416zM224 292l128 64 128-96v-36l-128 96-128-64-128 96v36l128-96zm0-160 128 92 128-60v-36l-128 60-128-92-128 64v36l128-64z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineStacked100Icon = {
        name: 'chart-line-stacked100',
        content: '<path d="M480 448v32H32V32h32v416h416zM224 228l128 64 128-96v-36l-128 96-128-64-128 96v36l128-96zM480 32H96v32h384V32z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineMarkersIcon = {
        name: 'chart-line-markers',
        content: '<path d="M480 448v32H0V32h32v416h448zm0-96c.1 17.7-14.2 32-31.9 32.1-17.7.1-32-14.2-32.1-31.9 0-1.3.1-2.7.2-4l-83.7-62.8c-8 3.4-17.1 3.4-25.2 0l-83.7 62.8c2.1 17.5-10.4 33.5-27.9 35.6s-33.5-10.4-35.6-27.9c-.7-6.2.3-12.4 3.1-18l-49-73.6-22.7 39.6c8.9 15.3 3.7 34.9-11.5 43.8s-34.9 3.7-43.8-11.5-3.7-34.9 11.5-43.8c4.9-2.8 10.4-4.3 16-4.4l30.6-53.5-28.4-42.6c-.7 0-1.4.1-2.1.1-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32c0 4.9-1.1 9.8-3.3 14.2l19.5 29.3 52.2-91.3c-8.9-15.3-3.8-34.9 11.5-43.8s34.9-3.8 43.8 11.5c2.5 4.4 4 9.2 4.3 14.3l78.4 39.2c14.7-9.7 34.6-5.7 44.3 9 .3.5.7 1.1 1 1.6h72.6c8.8-15.3 28.4-20.5 43.7-11.7 15.3 8.8 20.5 28.4 11.7 43.7s-28.4 20.5-43.7 11.7c-4.9-2.8-8.9-6.8-11.7-11.7h-72.6c-8.8 15.3-28.4 20.5-43.7 11.7-9.3-5.4-15.3-15.1-15.9-25.8l-78.4-39.2c-5.2 3.4-11.3 5.3-17.5 5.3l-60 105.2 57.9 86.9c.7 0 1.4-.1 2.1-.1 4.3 0 8.6.9 12.6 2.6l83.7-62.8c-2.2-17.5 10.3-33.5 27.8-35.7 17.5-2.2 33.5 10.3 35.7 27.8.3 2.6.3 5.2 0 7.8l83.7 62.8c16.2-7 35.1.6 42 16.8 1.6 4.1 2.5 8.4 2.5 12.7zm-48-192c0 8.8 7.2 16 16 16s16-7.2 16-16-7.2-16-16-16-16 7.2-16 16zm-128 0c0 8.8 7.2 16 16 16s16-7.2 16-16-7.2-16-16-16-16 7.2-16 16zM176 96c0 8.8 7.2 16 16 16s16-7.2 16-16-7.2-16-16-16-16 7.2-16 16zm-96 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm0 160c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 32c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineStackedMarkersIcon = {
        name: 'chart-line-stacked-markers',
        content: '<path d="M480 448v32H0V32h32v416h448zm0-320c0 17.7-14.3 32-32 32-6.9 0-13.7-2.2-19.2-6.4L352 192c0 17.7-14.3 32-32 32s-32-14.3-32-32c0-2.5.3-5 .9-7.4l-81.1-60.8c-11.1 6.3-24.8 5.4-35-2.2L96 160c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32c6.9 0 13.7 2.2 19.2 6.4L160 96c0-17.7 14.3-32 32-32s32 14.3 32 32c0 2.5-.3 5-.9 7.4l81.1 60.8c11.1-6.3 24.8-5.4 35 2.2L416 128c0-17.7 14.3-32 32-32s32 14.3 32 32zM80 160c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm16 128c0 17.7-14.3 32-32 32-5.5 0-11-1.4-15.8-4.2l-81.1 60.8c4.1 17.2-6.6 34.4-23.8 38.5-17.2 4.1-34.4-6.6-38.5-23.8-.6-2.4-.9-4.9-.9-7.4l-76.8-38.4c-10.2 7.6-23.9 8.5-35 2.2L95 376.5c4.1 17.2-6.6 34.4-23.8 38.5s-34.4-6.6-38.5-23.8 6.6-34.4 23.8-38.5c7.9-1.9 16.1-.7 23.1 3.3l81.1-60.8c-4.1-17.2 6.6-34.4 23.8-38.5 17.2-4.1 34.4 6.6 38.5 23.8.6 2.4.9 4.9.9 7.4l76.8 38.4c10.2-7.6 23.9-8.5 35-2.2l81.1-60.8c-4.1-17.2 6.5-34.5 23.7-38.6 17.2-4.1 34.5 6.5 38.6 23.7.6 2.5.9 5.1.9 7.6zM80 384c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartLineStacked100MarkersIcon = {
        name: 'chart-line-stacked100-markers',
        content: '<path d="M480 448v32H0V32h32v416h448zm0-192c0 17.7-14.3 32-32 32-5.5 0-11-1.4-15.8-4.2l-81.1 60.8c4.1 17.2-6.6 34.4-23.8 38.5-17.2 4.1-34.4-6.6-38.5-23.8-.6-2.4-.9-4.9-.9-7.4l-76.8-38.4c-10.2 7.6-23.9 8.5-35 2.2L95 376.5c4.1 17.2-6.6 34.4-23.8 38.5s-34.4-6.6-38.5-23.8 6.6-34.4 23.8-38.5c7.9-1.9 16.1-.7 23.1 3.3l81.1-60.8c-4.1-17.2 6.6-34.4 23.8-38.5 17.2-4.1 34.4 6.6 38.5 23.8.6 2.4.9 4.9.9 7.4l76.8 38.4c10.2-7.6 23.9-8.5 35-2.2l81.1-60.8c-4.1-17.2 6.5-34.5 23.7-38.6 17.2-4.1 34.5 6.5 38.6 23.7.6 2.5.9 5.1.9 7.6zM80 384c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128-96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm16-192c0 17.7-14.3 32-32 32-11.4 0-22-6.1-27.7-16h-72.6c-8.8 15.3-28.4 20.5-43.7 11.7-4.9-2.8-8.9-6.8-11.7-11.7h-72.6c-8.8 15.3-28.4 20.5-43.7 11.7-4.9-2.8-8.9-6.8-11.7-11.7H91.7C82.9 95.3 63.3 100.5 48 91.7S27.4 63.3 36.3 48 64.7 27.5 80 36.3c4.9 2.8 8.9 6.8 11.7 11.7h72.6c8.8-15.3 28.4-20.5 43.7-11.7 4.9 2.8 8.9 6.8 11.7 11.7h72.6c8.8-15.3 28.4-20.5 43.7-11.7 4.9 2.8 8.9 6.8 11.7 11.7h72.6c8.8-15.3 28.4-20.5 43.7-11.7 9.9 5.7 16 16.3 16 27.7zM80 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm128 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartPieIcon = {
        name: 'chart-pie',
        content: '<path d="M473 310.3c.9-2.1 1.4-4.2 1.8-6.3l.1-.5c.5-2.1.9-4.1 1.3-6.2v-.2c.8-4.4 1.5-8.8 1.8-13.3v-.4c.5-2 .7-3.9.9-5.9l.1-1.7c.1-1.6.3-3.1.4-4.7 0-.7.1-1.4.1-2 .1-1.5.2-3.1.2-4.6 0-.6 0-1.3.1-1.9.1-2.2.1-4.3.1-6.5 0-31.8-6.7-63.2-19.8-92.2-1.5-3.3-3.1-6.6-4.7-9.8-4.1-8-8.7-15.8-13.8-23.3-5-7.4-10.5-14.6-16.4-21.3-1.2-1.3-2.4-2.7-3.6-4-2.4-2.7-4.9-5.3-7.4-7.8s-5.1-5-7.8-7.4c-2.7-2.4-5.4-4.7-8.1-7-4.1-3.4-8.4-6.7-12.8-9.8-20.7-14.8-43.8-25.9-68.3-32.9-5.3-1.5-10.7-2.8-16.2-4-3.6-.7-7.3-1.4-11-2s-7.4-1-11.2-1.3c-5.6-.6-11.3-.9-17.1-1.1-1.9 0-3.9-.1-5.8-.1C132.3 32 32 132.3 32 256s100.3 224 224 224c105 0 193.1-72.2 217-169.7zm-81.2 81.5c-74.4 75.6-195.9 76.6-271.5 2.2S43.7 198 118 122.5l2.2-2.2c36-36.2 84.9-56.4 135.8-56.3v192l186.3 46.6c-8.4 33.8-25.9 64.6-50.5 89.2z" />',
        viewBox: '0 0 512 512'
    };

    var chartDoughnutIcon = {
        name: 'chart-doughnut',
        content: '<path d="M473 310.3c.9-2.1 1.4-4.2 1.8-6.3l.1-.5c.5-2.1.9-4.1 1.3-6.2v-.3c.8-4.4 1.5-8.8 1.8-13.3v-.4c.5-2 .7-3.9.9-5.9l.1-1.7c.1-1.6.3-3.1.4-4.7 0-.7.1-1.4.1-2 .1-1.5.2-3.1.2-4.6 0-.6 0-1.3.1-1.9.1-2.2.1-4.3.1-6.5 0-31.8-6.7-63.2-19.8-92.2-1.5-3.3-3.1-6.6-4.7-9.8-4.1-8-8.7-15.8-13.8-23.3-5-7.4-10.5-14.6-16.4-21.3-1.2-1.3-2.4-2.7-3.6-4-2.4-2.7-4.9-5.3-7.4-7.8s-5.1-5-7.8-7.4c-2.7-2.4-5.4-4.7-8.1-7-4.1-3.4-8.4-6.7-12.8-9.8-20.7-14.8-43.8-25.9-68.3-32.9-5.3-1.5-10.7-2.8-16.2-4-3.6-.7-7.3-1.4-11-2s-7.4-1-11.2-1.3c-5.6-.6-11.3-.9-17.1-1.1-1.9 0-3.9-.1-5.8-.1C132.3 32 32 132.3 32 256s100.3 224 224 224c105 0 193.1-72.2 217-169.7zM320 256c0 35.3-28.7 64-64 64s-64-28.7-64-64 28.7-64 64-64 64 28.7 64 64zm71.8 135.8c-74.4 75.6-195.9 76.6-271.5 2.2S43.7 198 118 122.4l2.2-2.2c36-36.1 84.9-56.3 135.8-56.2v96c-53 0-96 43-96 96s43 96 96 96c44 0 82.4-30 93.1-72.7l93.2 23.3c-8.4 33.8-25.9 64.6-50.5 89.2zm-39.8-133v.8-.8zm0 2.8v.9-.9zm-.4 2.9-.1.7.1-.7zm-.6 3.2v.2-.2zm-1 5.9v.1-.1zm0 2.8v.2-.2z" />',
        viewBox: '0 0 512 512'
    };

    var chartScatterIcon = {
        name: 'chart-scatter',
        content: '<path d="M480 448v32H32V32h32v416h416zM160 96c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm-16 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm112 192c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm-16 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm112-128c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm-16 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm112 192c0 17.7-14.3 32-32 32s-32-14.3-32-32 14.3-32 32-32 32 14.3 32 32zm-16 0c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartScatterSmoothLinesMarkersIcon = {
        name: 'chart-scatter-smooth-lines-markers',
        content: '<path d="M480 448v32H32V32h32v416h416zm0-384c0 17.7-14.3 32-32 32-15.6 0-28.9-11.2-31.5-26.5-9.2-1.3-22-1.8-39-.8C342.5 71 305.1 79.4 275 92c-19.1 7.9-47.9 23-60.7 45.1 12.7 12.3 13 32.6.6 45.3l-1.1 1.1c9.1 13.1 28.9 18.6 61.1 25.1 21 4.2 42.8 8.5 60.2 18.9 12.7 7.6 21.7 17.8 27 30.3 16.8 5.6 25.8 23.7 20.2 40.5-3.2 9.5-10.6 17-20.1 20.2-11.2 29.5-39.2 54.6-81.6 72.2-29.7 12.1-61.2 19.2-93.2 21.1-4 .2-7.8.3-11.4.3-9.6.1-19.3-.7-28.8-2.5-14.1 10.6-34.2 7.7-44.8-6.4-10.6-14.1-7.7-34.2 6.4-44.8s34.2-7.7 44.8 6.4c3.2 4.2 5.2 9.1 6 14.3 8.7 1 17.5 1.2 26.2.7 28.3-1.6 56.2-7.9 82.5-18.6 19.7-8.2 49.8-24.3 62-49.6-13-12-13.8-32.2-1.8-45.2.4-.5.8-.9 1.3-1.3-9.1-13.2-28.8-18.7-61.1-25.2-21-4.2-42.8-8.5-60.2-18.9-12.8-7.7-21.9-18-27.2-30.7-16.7-5.9-25.4-24.2-19.5-40.9 3.3-9.4 10.9-16.7 20.4-19.8 5-11 12-21 20.6-29.5 14.6-14.5 34.7-27.2 59.8-37.6C296 48.6 337 39.2 375.4 36.8c22.9-1.5 40-.4 52.8 2.1 13.9-11 34-8.6 44.9 5.3 4.5 5.6 6.9 12.6 6.9 19.8zm-272 96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm-64 224c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm192-96c0 8.8 7.2 16 16 16s16-7.2 16-16-7.2-16-16-16-16 7.2-16 16zM464 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartScatterSmoothLinesIcon = {
        name: 'chart-scatter-smooth-lines',
        content: '<path d="M480 448v32H32V32h32v416h416zm-144-87.8c21.1-19.9 31.8-44.5 31.8-73.1 0-27.3-11-47.6-32.6-60.6-17.3-10.3-38.8-14.5-59.6-18.6-46.2-9-66.5-16.3-66.8-47.9-.4-41.2 71.8-65.5 114.8-76.4C385.4 68.1 448.4 64 449 64l-2-32c-2.7.2-66.2 4.3-130.8 20.5-38.7 9.7-69.8 21.8-92.4 36-31.4 19.8-47.3 43.9-47 71.7.2 27.2 11.3 47.6 32.9 60.5 17.3 10.3 38.9 14.5 59.7 18.6 19 3.7 36.9 7.2 49.3 14.6 11.9 7.1 17 17.1 17 33.2 0 19.7-7.1 36-21.7 49.7-24.1 22.8-68.9 38.2-129.3 44.6-29.2 3-58.5 3.9-87.8 2.6l-2 32c1.7.1 12.1.7 28 .7 51.4 0 159.8-6.4 213.1-56.5z" />',
        viewBox: '0 0 512 512'
    };

    var chartScatterStraightLinesMarkersIcon = {
        name: 'chart-scatter-straight-lines-markers',
        content: '<path d="M480 448v32H32V32h32v416h416zm0-384c0 17.7-14.3 32-32 32-7.4 0-14.6-2.6-20.3-7.3L224 165.1l116.4 93.1c16.5-6.4 35 1.7 41.4 18.2s-1.7 35-18.2 41.4c-10.3 4-22 2.4-30.8-4.2l-173.1 74.2c-2.1 17.5-18 30.1-35.6 28s-30.1-18-28-35.6c2.1-17.5 18-30.1 35.6-28 5.6.7 10.9 2.8 15.4 6.2l173.1-74.2c0-.4.1-.7.1-1l-116.7-93.4c-16.5 6.4-35-1.7-41.4-18.2s1.7-35 18.2-41.4c10.8-4.2 23-2.3 32 5.1l204.1-76.5c2.9-17.4 19.4-29.2 36.8-26.3C468.7 35.1 480 48.4 480 64zm-272 96c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm-64 224c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16zm192-96c0 8.8 7.2 16 16 16s16-7.2 16-16-7.2-16-16-16-16 7.2-16 16zM464 64c0-8.8-7.2-16-16-16s-16 7.2-16 16 7.2 16 16 16 16-7.2 16-16z" />',
        viewBox: '0 0 512 512'
    };

    var chartScatterStraightLinesIcon = {
        name: 'chart-scatter-straight-lines',
        content: '<path d="M480 448v32H32V32h32v416h416zm-98.5-156.9-158.8-127L448 64V32L161.3 156l161.2 128.9L128 384v32l253.5-124.9z" />',
        viewBox: '0 0 512 512'
    };

    var chartBubbleIcon = {
        name: 'chart-bubble',
        content: '<path d="M480 448v32H32V32h32v416h416zM192 256c-35.3 0-64 28.7-64 64s28.7 64 64 64 64-28.7 64-64-28.7-64-64-64m0-32c53 0 96 43 96 96s-43 96-96 96-96-43-96-96 43-96 96-96zm224 96c-17.7 0-32 14.3-32 32s14.3 32 32 32 32-14.3 32-32-14.3-32-32-32m0-32c35.3 0 64 28.7 64 64s-28.7 64-64 64-64-28.7-64-64 28.7-64 64-64zM368 96c-44.2 0-80 35.8-80 80s35.8 80 80 80 80-35.8 80-80-35.8-80-80-80zM176 64c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z" />',
        viewBox: '0 0 512 512'
    };

    var chartCandlestickIcon = {
        name: 'chart-candlestick',
        content: '<path d="M480 448v32H32V32h32v416h416zm-192-96h-64v64h-32v-64h-64V96h64V32h32v64h64v256zm-32-224h-96v192h96V128zm224 64h-64V64h-32v128h-64v128h64v64h32v-64h64V192z" />',
        viewBox: '0 0 512 512'
    };

    var chartOhlcIcon = {
        name: 'chart-ohlc',
        content: '<path d="M480 448v32H32V32h32v416h416zM224 320V96h-32v32h-64v32h64v256h32v-64h64v-32h-64zM416 96V32h-32v160h-64v32h64v96h32V128h64V96h-64z" />',
        viewBox: '0 0 512 512'
    };

    var chartRadarIcon = {
        name: 'chart-radar',
        content: '<path d="M272 32h-32v44L80.7 195.5l-41.1-10-7.6 31.1 42.3 10.3 81 148.5-62.7 86.3 25.9 18.8 67.2-92.5L344 412.3l49.5 68.2 25.9-18.8-46.8-64.4 40.8-163.1 65.8-15.3-7.3-31.2-74.9 17.4L272 80V32zm-32 202.2-119-28.9L240 116v118.2zm32 0v-109l88.4 88.4-88.4 20.6zm-95.9 112.5-59.8-109.6 118.5 28.8-58.7 80.8zm172 17.3-71-97.7 101.3-23.6L348.1 364zm-30.6 12-110.6-17 49.1-67.6 61.5 84.6z" />',
        viewBox: '0 0 512 512'
    };

    var chartRadarMarkersIcon = {
        name: 'chart-radar-markers',
        content: '<path d="m472 187.7-51.2 11.9c-9.4-8-22.5-9.9-33.8-4.8L288.1 96c0-11.5-6.2-22.1-16.1-27.8V32h-32v36.4c-7.1 4.1-12.3 10.8-14.6 18.6L96.1 184c-8.6 0-16.7 3.4-22.8 9.5l-32.8-8-7.5 31.1 32.3 7.8c2.7 9.9 10 17.8 19.6 21.5l61 111.8c-3 8.9-2 18.7 2.9 26.7l-56.1 77.3 25.9 18.8L177 400c8.5-.2 16.5-3.8 22.3-10l122 18.8c3.9 13.8 16.5 23.2 30.8 23.2 1.9 0 3.9-.2 5.8-.5l35.6 49 25.9-18.8-37.1-51.1c3.7-10.4 1.7-22-5.2-30.6l31.4-125.2c11.8-3.2 20.8-12.9 23.1-24.9l47.7-11.1-7.3-31.1zm-111.4 25.9L272 234.2V125.1l88.6 88.5zM256 80c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16zm-21.1 39.9c1.6 1.4 3.3 2.6 5.1 3.7V234l-113.3-27.6c-.4-1.4-1-2.8-1.6-4.1l109.8-82.4zM96 232c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm80 152c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm7.2-47.2c-2.4-.5-4.8-.8-7.2-.8-1.8 0-3.7.2-5.5.5l-52.9-96.9c.7-.6 1.3-1.2 1.9-1.9l115.3 28-51.6 71.1zm23.6 22 49.1-67.6 61.5 84.6-110.6-17zM352 416c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm-3.9-52.3L277 265.9l97.4-22.6c.9 1.2 1.9 2.4 3 3.5l-29.3 116.9zM400 240c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z" />',
        viewBox: '0 0 512 512'
    };

    var chartRadarFilledIcon = {
        name: 'chart-radar-filled',
        content: '<path d="m354.4 372.1 65.1 89.6-25.9 18.8-75-103.2-109.2-21.8-90.8 125-25.9-18.8 90-123.8-67.3-101L32 216.6l7.5-31.1 65.8 16L240 107.2V32h32v80l99.2 99.2L472 187.7l7.3 31.2-98.8 23-26.1 130.2z" />',
        viewBox: '0 0 512 512'
    };

    var chartRoseIcon = {
        name: 'chart-rose',
        content: '<path d="M226 251.4 44.3 329.3c-23.8-68.9-12.6-145.1 30-204.3L226 251.4zm-82.1-109.5L240 222V96.8c-36.2 3.6-70.1 19.6-96.1 45.1zm231.5 160.2L279 278l27.3 95.7c31.8-13.6 56.7-39.4 69.1-71.6zM96 353.4c37.3 69.1 115 106.1 192.2 91.4L244 290 96 353.4zM272 32v211.4l204.6 51.1c2.3-12.9 3.4-26 3.4-39.1C480 137.1 388.2 40.2 272 32z" />',
        viewBox: '0 0 512 512'
    };

    var chartChoroplethIcon = {
        name: 'chart-choropleth',
        content: '<path d="M448 64v384H64V64h384m32-32H32v448h448V32zm-96 256v13.3l-64 64v37.5l13.3 13.3H416V264.6L384 288zm-50.7-160 64 64-32 32 18.8 23.4 32-21.3V96H288v18.8l13.3 13.3h32zM224 192l32 32-23.7 23.7L352 276v-20l-32-32 32-32-32-32h-32l-32-32V96h-32l-64 64 32 32h32zm0 86-32 10-32 32 32 32v32l-32 32h128v-64l50.4-50.4L224 278zm-29.4-37.8 16.2-16.2h-32l-64-64 64-64H96v167.5l98.6-23.3zM114.8 320l37.6-37.6L96 296.5V416h32v-13.3l32-32v-5.5L114.8 320z" />',
        viewBox: '0 0 512 512'
    };

    var svgIcons = /*#__PURE__*/Object.freeze({
        __proto__: null,
        accessibilityIcon: accessibilityIcon,
        aggregateFieldsIcon: aggregateFieldsIcon,
        alignBottomIcon: alignBottomIcon,
        alignCenterIcon: alignCenterIcon,
        alignItemsBaselineAltIcon: alignItemsBaselineAltIcon,
        alignItemsBaselineIcon: alignItemsBaselineIcon,
        alignItemsCenterAltIcon: alignItemsCenterAltIcon,
        alignItemsCenterIcon: alignItemsCenterIcon,
        alignItemsEndAltIcon: alignItemsEndAltIcon,
        alignItemsEndIcon: alignItemsEndIcon,
        alignItemsStartAltIcon: alignItemsStartAltIcon,
        alignItemsStartIcon: alignItemsStartIcon,
        alignItemsStretchAltIcon: alignItemsStretchAltIcon,
        alignItemsStretchIcon: alignItemsStretchIcon,
        alignJustifyIcon: alignJustifyIcon,
        alignLeftIcon: alignLeftIcon,
        alignMiddleIcon: alignMiddleIcon,
        alignRemoveIcon: alignRemoveIcon,
        alignRightIcon: alignRightIcon,
        alignSelfCenterAltIcon: alignSelfCenterAltIcon,
        alignSelfCenterIcon: alignSelfCenterIcon,
        alignSelfEndAltIcon: alignSelfEndAltIcon,
        alignSelfEndIcon: alignSelfEndIcon,
        alignSelfStartAltIcon: alignSelfStartAltIcon,
        alignSelfStartIcon: alignSelfStartIcon,
        alignSelfStretchAltIcon: alignSelfStretchAltIcon,
        alignSelfStretchIcon: alignSelfStretchIcon,
        alignToGridIcon: alignToGridIcon,
        alignTopIcon: alignTopIcon,
        allIcon: allIcon,
        anchorIcon: anchorIcon,
        applyFormatIcon: applyFormatIcon,
        arrowDownIcon: arrowDownIcon,
        arrowLeftIcon: arrowLeftIcon,
        arrowOverflowDownIcon: arrowOverflowDownIcon,
        arrowRightIcon: arrowRightIcon,
        arrowRotateCcwIcon: arrowRotateCcwIcon,
        arrowRotateCcwSmallIcon: arrowRotateCcwSmallIcon,
        arrowRotateCwIcon: arrowRotateCwIcon,
        arrowRotateCwSmallIcon: arrowRotateCwSmallIcon,
        arrowUpIcon: arrowUpIcon,
        arrowsAxesIcon: arrowsAxesIcon,
        arrowsLeftRightIcon: arrowsLeftRightIcon,
        arrowsMoveIcon: arrowsMoveIcon,
        arrowsNoChangeIcon: arrowsNoChangeIcon,
        arrowsNoRepeatIcon: arrowsNoRepeatIcon,
        arrowsSwapIcon: arrowsSwapIcon,
        arrowsTopBottomIcon: arrowsTopBottomIcon,
        barcodeIcon: barcodeIcon,
        barcodeOutlineIcon: barcodeOutlineIcon,
        barcodeQrCodeScannerIcon: barcodeQrCodeScannerIcon,
        barcodeScannerIcon: barcodeScannerIcon,
        behanceBoxIcon: behanceBoxIcon,
        behanceIcon: behanceIcon,
        bellIcon: bellIcon,
        binocularsIcon: binocularsIcon,
        bloggerBoxIcon: bloggerBoxIcon,
        bloggerIcon: bloggerIcon,
        blurIcon: blurIcon,
        boldIcon: boldIcon,
        bookIcon: bookIcon,
        borderBottomIcon: borderBottomIcon,
        borderColorIcon: borderColorIcon,
        borderLeftIcon: borderLeftIcon,
        borderRadiusBottomLeftIcon: borderRadiusBottomLeftIcon,
        borderRadiusBottomRightIcon: borderRadiusBottomRightIcon,
        borderRadiusIcon: borderRadiusIcon,
        borderRadiusTopLeftIcon: borderRadiusTopLeftIcon,
        borderRadiusTopRightIcon: borderRadiusTopRightIcon,
        borderRightIcon: borderRightIcon,
        borderStyleBottomIcon: borderStyleBottomIcon,
        borderStyleIcon: borderStyleIcon,
        borderStyleLeftIcon: borderStyleLeftIcon,
        borderStyleRightIcon: borderStyleRightIcon,
        borderStyleTopIcon: borderStyleTopIcon,
        borderTopIcon: borderTopIcon,
        borderTypeIcon: borderTypeIcon,
        bordersAllIcon: bordersAllIcon,
        bordersInsideHorizontalIcon: bordersInsideHorizontalIcon,
        bordersInsideIcon: bordersInsideIcon,
        bordersInsideVerticalIcon: bordersInsideVerticalIcon,
        bordersNoneIcon: bordersNoneIcon,
        bordersOutsideIcon: bordersOutsideIcon,
        bordersShowHideIcon: bordersShowHideIcon,
        boxSizingIcon: boxSizingIcon,
        brightnessContrastIcon: brightnessContrastIcon,
        bringBackwardIcon: bringBackwardIcon,
        bringForwardIcon: bringForwardIcon,
        bringToBackIcon: bringToBackIcon,
        bringToFrontIcon: bringToFrontIcon,
        brushIcon: brushIcon,
        buildingBlocksIcon: buildingBlocksIcon,
        buttonIcon: buttonIcon,
        calculatorIcon: calculatorIcon,
        calendarDateIcon: calendarDateIcon,
        calendarIcon: calendarIcon,
        cameraIcon: cameraIcon,
        cancelCircleIcon: cancelCircleIcon,
        cancelIcon: cancelIcon,
        cancelOutlineIcon: cancelOutlineIcon,
        caretAltDownIcon: caretAltDownIcon,
        caretAltExpandIcon: caretAltExpandIcon,
        caretAltLeftIcon: caretAltLeftIcon,
        caretAltRightIcon: caretAltRightIcon,
        caretAltToBottomIcon: caretAltToBottomIcon,
        caretAltToLeftIcon: caretAltToLeftIcon,
        caretAltToRightIcon: caretAltToRightIcon,
        caretAltToTopIcon: caretAltToTopIcon,
        caretAltUpIcon: caretAltUpIcon,
        caretBlIcon: caretBlIcon,
        caretBrIcon: caretBrIcon,
        caretDoubleAltDownIcon: caretDoubleAltDownIcon,
        caretDoubleAltLeftIcon: caretDoubleAltLeftIcon,
        caretDoubleAltRightIcon: caretDoubleAltRightIcon,
        caretDoubleAltUpIcon: caretDoubleAltUpIcon,
        caretTlIcon: caretTlIcon,
        caretTrIcon: caretTrIcon,
        cartIcon: cartIcon,
        categorizeIcon: categorizeIcon,
        cellSplitHorizontallyIcon: cellSplitHorizontallyIcon,
        cellSplitVerticallyIcon: cellSplitVerticallyIcon,
        cellsMergeHorizontallyIcon: cellsMergeHorizontallyIcon,
        cellsMergeIcon: cellsMergeIcon,
        cellsMergeVerticallyIcon: cellsMergeVerticallyIcon,
        changeManuallyIcon: changeManuallyIcon,
        chartAreaClusteredIcon: chartAreaClusteredIcon,
        chartAreaRangeIcon: chartAreaRangeIcon,
        chartAreaStacked100Icon: chartAreaStacked100Icon,
        chartAreaStackedIcon: chartAreaStackedIcon,
        chartBarClusteredIcon: chartBarClusteredIcon,
        chartBarRangeIcon: chartBarRangeIcon,
        chartBarStacked100Icon: chartBarStacked100Icon,
        chartBarStackedIcon: chartBarStackedIcon,
        chartBubbleIcon: chartBubbleIcon,
        chartCandlestickIcon: chartCandlestickIcon,
        chartChoroplethIcon: chartChoroplethIcon,
        chartColumnClusteredIcon: chartColumnClusteredIcon,
        chartColumnRangeIcon: chartColumnRangeIcon,
        chartColumnStacked100Icon: chartColumnStacked100Icon,
        chartColumnStackedIcon: chartColumnStackedIcon,
        chartDoughnutIcon: chartDoughnutIcon,
        chartLineIcon: chartLineIcon,
        chartLineMarkersIcon: chartLineMarkersIcon,
        chartLineStacked100Icon: chartLineStacked100Icon,
        chartLineStacked100MarkersIcon: chartLineStacked100MarkersIcon,
        chartLineStackedIcon: chartLineStackedIcon,
        chartLineStackedMarkersIcon: chartLineStackedMarkersIcon,
        chartOhlcIcon: chartOhlcIcon,
        chartPieIcon: chartPieIcon,
        chartRadarFilledIcon: chartRadarFilledIcon,
        chartRadarIcon: chartRadarIcon,
        chartRadarMarkersIcon: chartRadarMarkersIcon,
        chartRoseIcon: chartRoseIcon,
        chartScatterIcon: chartScatterIcon,
        chartScatterSmoothLinesIcon: chartScatterSmoothLinesIcon,
        chartScatterSmoothLinesMarkersIcon: chartScatterSmoothLinesMarkersIcon,
        chartScatterStraightLinesIcon: chartScatterStraightLinesIcon,
        chartScatterStraightLinesMarkersIcon: chartScatterStraightLinesMarkersIcon,
        checkCircleIcon: checkCircleIcon,
        checkIcon: checkIcon,
        checkOutlineIcon: checkOutlineIcon,
        checkboxCheckedIcon: checkboxCheckedIcon,
        checkboxIcon: checkboxIcon,
        checkboxIndeterminateIcon: checkboxIndeterminateIcon,
        checkboxNullIcon: checkboxNullIcon,
        chevronDoubleDownIcon: chevronDoubleDownIcon,
        chevronDoubleLeftIcon: chevronDoubleLeftIcon,
        chevronDoubleRightIcon: chevronDoubleRightIcon,
        chevronDoubleUpIcon: chevronDoubleUpIcon,
        chevronDownIcon: chevronDownIcon,
        chevronLeftIcon: chevronLeftIcon,
        chevronRightIcon: chevronRightIcon,
        chevronUpIcon: chevronUpIcon,
        circleIcon: circleIcon,
        clearCssIcon: clearCssIcon,
        clipboardCodeIcon: clipboardCodeIcon,
        clipboardHtmlIcon: clipboardHtmlIcon,
        clipboardIcon: clipboardIcon,
        clipboardMarkdownIcon: clipboardMarkdownIcon,
        clipboardTextIcon: clipboardTextIcon,
        clipboardWordAltIcon: clipboardWordAltIcon,
        clipboardWordIcon: clipboardWordIcon,
        clockArrowRotateIcon: clockArrowRotateIcon,
        clockIcon: clockIcon,
        closedCaptionsIcon: closedCaptionsIcon,
        cloudIcon: cloudIcon,
        codeIcon: codeIcon,
        codeSnippetIcon: codeSnippetIcon,
        colResizeIcon: colResizeIcon,
        columnFreezeIcon: columnFreezeIcon,
        columnsIcon: columnsIcon,
        commentIcon: commentIcon,
        commentRemoveIcon: commentRemoveIcon,
        commentsRemoveIcon: commentsRemoveIcon,
        connectorIcon: connectorIcon,
        convertLowercaseIcon: convertLowercaseIcon,
        convertUppercaseIcon: convertUppercaseIcon,
        copyFormatIcon: copyFormatIcon,
        copyIcon: copyIcon,
        cropIcon: cropIcon,
        crosstabIcon: crosstabIcon,
        crosstabWizardIcon: crosstabWizardIcon,
        csIcon: csIcon,
        csprojIcon: csprojIcon,
        css3Icon: css3Icon,
        cssIcon: cssIcon,
        customFormatIcon: customFormatIcon,
        customIconIcon: customIconIcon,
        cutIcon: cutIcon,
        dataCsvIcon: dataCsvIcon,
        dataIcon: dataIcon,
        dataJsonIcon: dataJsonIcon,
        dataOdsIcon: dataOdsIcon,
        dataRestIcon: dataRestIcon,
        dataSdsIcon: dataSdsIcon,
        dataSqlIcon: dataSqlIcon,
        dataWebIcon: dataWebIcon,
        decimalDecreaseIcon: decimalDecreaseIcon,
        decimalIncreaseIcon: decimalIncreaseIcon,
        decreaseHorizontalSpacingIcon: decreaseHorizontalSpacingIcon,
        decreaseVerticalSpacingIcon: decreaseVerticalSpacingIcon,
        deliciousBoxIcon: deliciousBoxIcon,
        deliciousIcon: deliciousIcon,
        detailSectionIcon: detailSectionIcon,
        diggBoxIcon: diggBoxIcon,
        diggIcon: diggIcon,
        dimensionsIcon: dimensionsIcon,
        displayBlockIcon: displayBlockIcon,
        displayFlexIcon: displayFlexIcon,
        displayInlineBlockIcon: displayInlineBlockIcon,
        displayInlineFlexIcon: displayInlineFlexIcon,
        divIcon: divIcon,
        divideIcon: divideIcon,
        documentManagerIcon: documentManagerIcon,
        dollarIcon: dollarIcon,
        downloadIcon: downloadIcon,
        downloadLightIcon: downloadLightIcon,
        dragAndDropIcon: dragAndDropIcon,
        dribbbleBoxIcon: dribbbleBoxIcon,
        dribbbleIcon: dribbbleIcon,
        dropletIcon: dropletIcon,
        dropletSlashIcon: dropletSlashIcon,
        dropletSliderIcon: dropletSliderIcon,
        editToolsIcon: editToolsIcon,
        envelopBoxIcon: envelopBoxIcon,
        envelopIcon: envelopIcon,
        envelopLinkIcon: envelopLinkIcon,
        envelopeBoxIcon: envelopeBoxIcon,
        envelopeIcon: envelopeIcon,
        envelopeLinkIcon: envelopeLinkIcon,
        equalIcon: equalIcon,
        exclamationCircleIcon: exclamationCircleIcon,
        exeIcon: exeIcon,
        exportIcon: exportIcon,
        eyeIcon: eyeIcon,
        eyeSlashIcon: eyeSlashIcon,
        eyedropperIcon: eyedropperIcon,
        facebookBoxIcon: facebookBoxIcon,
        facebookIcon: facebookIcon,
        fileAddIcon: fileAddIcon,
        fileAscxIcon: fileAscxIcon,
        fileAudioIcon: fileAudioIcon,
        fileBacIcon: fileBacIcon,
        fileConfigIcon: fileConfigIcon,
        fileCsvIcon: fileCsvIcon,
        fileDataIcon: fileDataIcon,
        fileDiscImageIcon: fileDiscImageIcon,
        fileErrorIcon: fileErrorIcon,
        fileExcelIcon: fileExcelIcon,
        fileFlashIcon: fileFlashIcon,
        fileFooterIcon: fileFooterIcon,
        fileHeaderIcon: fileHeaderIcon,
        fileHorizontalIcon: fileHorizontalIcon,
        fileIcon: fileIcon,
        fileImageIcon: fileImageIcon,
        fileMdbIcon: fileMdbIcon,
        filePdfIcon: filePdfIcon,
        filePptIcon: filePptIcon,
        filePresentationIcon: filePresentationIcon,
        fileProgrammingIcon: fileProgrammingIcon,
        filePsdIcon: filePsdIcon,
        fileReportIcon: fileReportIcon,
        fileTxtIcon: fileTxtIcon,
        fileTypescriptIcon: fileTypescriptIcon,
        fileVideoIcon: fileVideoIcon,
        fileWordIcon: fileWordIcon,
        fileWrenchIcon: fileWrenchIcon,
        fileZipIcon: fileZipIcon,
        filesErrorIcon: filesErrorIcon,
        filmIcon: filmIcon,
        filterAddExpressionIcon: filterAddExpressionIcon,
        filterAddGroupIcon: filterAddGroupIcon,
        filterClearIcon: filterClearIcon,
        filterIcon: filterIcon,
        filterSmallIcon: filterSmallIcon,
        filterSortAscSmallIcon: filterSortAscSmallIcon,
        filterSortDescSmallIcon: filterSortDescSmallIcon,
        flashManagerIcon: flashManagerIcon,
        flipHorizontalIcon: flipHorizontalIcon,
        flipVerticalIcon: flipVerticalIcon,
        folderAddIcon: folderAddIcon,
        folderIcon: folderIcon,
        folderMoreIcon: folderMoreIcon,
        folderOpenIcon: folderOpenIcon,
        folderUpIcon: folderUpIcon,
        fontFamilyIcon: fontFamilyIcon,
        fontGrowIcon: fontGrowIcon,
        fontShrinkIcon: fontShrinkIcon,
        fontSizeIcon: fontSizeIcon,
        foregroundColorIcon: foregroundColorIcon,
        formElementIcon: formElementIcon,
        formIcon: formIcon,
        formatCodeBlockIcon: formatCodeBlockIcon,
        formulaFxIcon: formulaFxIcon,
        forwardIcon: forwardIcon,
        fullscreenExitIcon: fullscreenExitIcon,
        fullscreenIcon: fullscreenIcon,
        gapColumnIcon: gapColumnIcon,
        gapRowIcon: gapRowIcon,
        gaugeLinearIcon: gaugeLinearIcon,
        gaugeRadialIcon: gaugeRadialIcon,
        gearIcon: gearIcon,
        gearsIcon: gearsIcon,
        globeIcon: globeIcon,
        globeLinkIcon: globeLinkIcon,
        globeOutlineIcon: globeOutlineIcon,
        globeUnlinkIcon: globeUnlinkIcon,
        googleBoxIcon: googleBoxIcon,
        googleIcon: googleIcon,
        googlePlusBoxIcon: googlePlusBoxIcon,
        googlePlusIcon: googlePlusIcon,
        graphIcon: graphIcon,
        grayscaleIcon: grayscaleIcon,
        greaterOrEqualIcon: greaterOrEqualIcon,
        gridIcon: gridIcon,
        gridLayoutIcon: gridLayoutIcon,
        groupBoxIcon: groupBoxIcon,
        groupCollectionIcon: groupCollectionIcon,
        groupFooterSectionIcon: groupFooterSectionIcon,
        groupHeaderSectionIcon: groupHeaderSectionIcon,
        groupIcon: groupIcon,
        groupSectionIcon: groupSectionIcon,
        h1Icon: h1Icon,
        h2Icon: h2Icon,
        h3Icon: h3Icon,
        h4Icon: h4Icon,
        h5Icon: h5Icon,
        h6Icon: h6Icon,
        handIcon: handIcon,
        handleDragIcon: handleDragIcon,
        handleResizeAltIcon: handleResizeAltIcon,
        handleResizeIcon: handleResizeIcon,
        hdIcon: hdIcon,
        heartIcon: heartIcon,
        heartOutlineIcon: heartOutlineIcon,
        homeIcon: homeIcon,
        horizontalRuleIcon: horizontalRuleIcon,
        html5Icon: html5Icon,
        hyperlinkOpenIcon: hyperlinkOpenIcon,
        hyperlinkOpenSmIcon: hyperlinkOpenSmIcon,
        imageAbsolutePositionIcon: imageAbsolutePositionIcon,
        imageAddIcon: imageAddIcon,
        imageEditIcon: imageEditIcon,
        imageExportIcon: imageExportIcon,
        imageIcon: imageIcon,
        imageMapEditorIcon: imageMapEditorIcon,
        imageResizeIcon: imageResizeIcon,
        imagesIcon: imagesIcon,
        importIcon: importIcon,
        inboxIcon: inboxIcon,
        increaseHorizontalSpacingIcon: increaseHorizontalSpacingIcon,
        increaseVerticalSpacingIcon: increaseVerticalSpacingIcon,
        indentIcon: indentIcon,
        infoCircleIcon: infoCircleIcon,
        inheritedIcon: inheritedIcon,
        insertBottomIcon: insertBottomIcon,
        insertMiddleIcon: insertMiddleIcon,
        insertTopIcon: insertTopIcon,
        invertColorsIcon: invertColorsIcon,
        italicIcon: italicIcon,
        jsIcon: jsIcon,
        justifyContentAroundAltIcon: justifyContentAroundAltIcon,
        justifyContentAroundIcon: justifyContentAroundIcon,
        justifyContentBetweenAltIcon: justifyContentBetweenAltIcon,
        justifyContentBetweenIcon: justifyContentBetweenIcon,
        justifyContentCenterAltIcon: justifyContentCenterAltIcon,
        justifyContentCenterIcon: justifyContentCenterIcon,
        justifyContentEndAltIcon: justifyContentEndAltIcon,
        justifyContentEndIcon: justifyContentEndIcon,
        justifyContentStartAltIcon: justifyContentStartAltIcon,
        justifyContentStartIcon: justifyContentStartIcon,
        kpiStatusDenyIcon: kpiStatusDenyIcon,
        kpiStatusHoldIcon: kpiStatusHoldIcon,
        kpiStatusOpenIcon: kpiStatusOpenIcon,
        launchIcon: launchIcon,
        layout1By4Icon: layout1By4Icon,
        layout2By2Icon: layout2By2Icon,
        layoutIcon: layoutIcon,
        layoutSideBySideIcon: layoutSideBySideIcon,
        layoutStackedIcon: layoutStackedIcon,
        lessOrEqualIcon: lessOrEqualIcon,
        letterSpaceIcon: letterSpaceIcon,
        levelDownIcon: levelDownIcon,
        levelToTopIcon: levelToTopIcon,
        levelUpIcon: levelUpIcon,
        lineHeightIcon: lineHeightIcon,
        linkAddIcon: linkAddIcon,
        linkIcon: linkIcon,
        linkVerticalIcon: linkVerticalIcon,
        linkedinBoxIcon: linkedinBoxIcon,
        linkedinIcon: linkedinIcon,
        listLatinBigIcon: listLatinBigIcon,
        listLatinSmallIcon: listLatinSmallIcon,
        listOrderedIcon: listOrderedIcon,
        listRomanBigIcon: listRomanBigIcon,
        listRomanLowerIcon: listRomanLowerIcon,
        listRomanSmallIcon: listRomanSmallIcon,
        listRomanUpperIcon: listRomanUpperIcon,
        listUnorderedIcon: listUnorderedIcon,
        listUnorderedOutlineIcon: listUnorderedOutlineIcon,
        listUnorderedSquareIcon: listUnorderedSquareIcon,
        lockIcon: lockIcon,
        loginIcon: loginIcon,
        logoutIcon: logoutIcon,
        makeHorizontalSpacingEqualIcon: makeHorizontalSpacingEqualIcon,
        makeSameHeightIcon: makeSameHeightIcon,
        makeSameSizeIcon: makeSameSizeIcon,
        makeSameWidthIcon: makeSameWidthIcon,
        makeVerticalSpacingEqualIcon: makeVerticalSpacingEqualIcon,
        mapMarkerIcon: mapMarkerIcon,
        mapMarkerTargetIcon: mapMarkerTargetIcon,
        maxHeightIcon: maxHeightIcon,
        maxWidthIcon: maxWidthIcon,
        mediaManagerIcon: mediaManagerIcon,
        menuIcon: menuIcon,
        minHeightIcon: minHeightIcon,
        minWidthIcon: minWidthIcon,
        minusCircleIcon: minusCircleIcon,
        minusIcon: minusIcon,
        minusOutlineIcon: minusOutlineIcon,
        minusSmIcon: minusSmIcon,
        mirrorIcon: mirrorIcon,
        moreHorizontalIcon: moreHorizontalIcon,
        moreVerticalIcon: moreVerticalIcon,
        musicNotesIcon: musicNotesIcon,
        myspaceBoxIcon: myspaceBoxIcon,
        myspaceIcon: myspaceIcon,
        nonRecurrenceIcon: nonRecurrenceIcon,
        notEqualIcon: notEqualIcon,
        outdentIcon: outdentIcon,
        outlineOffsetIcon: outlineOffsetIcon,
        outlineWidthIcon: outlineWidthIcon,
        overlapIcon: overlapIcon,
        paddingBottomIcon: paddingBottomIcon,
        paddingIcon: paddingIcon,
        paddingLeftIcon: paddingLeftIcon,
        paddingRightIcon: paddingRightIcon,
        paddingTopIcon: paddingTopIcon,
        pageFooterSectionIcon: pageFooterSectionIcon,
        pageHeaderSectionIcon: pageHeaderSectionIcon,
        paletteIcon: paletteIcon,
        paneFreezeIcon: paneFreezeIcon,
        paperPlaneIcon: paperPlaneIcon,
        paperclipAltIcon: paperclipAltIcon,
        paperclipIcon: paperclipIcon,
        paragraphAddIcon: paragraphAddIcon,
        parameterBooleanIcon: parameterBooleanIcon,
        parameterDateTimeIcon: parameterDateTimeIcon,
        parameterFloatIcon: parameterFloatIcon,
        parameterIntegerIcon: parameterIntegerIcon,
        parameterStringIcon: parameterStringIcon,
        parametersByteArrayIcon: parametersByteArrayIcon,
        parametersIcon: parametersIcon,
        parametersUnknownIcon: parametersUnknownIcon,
        passwordIcon: passwordIcon,
        pauseIcon: pauseIcon,
        pauseSmIcon: pauseSmIcon,
        pencilIcon: pencilIcon,
        percentIcon: percentIcon,
        photosIcon: photosIcon,
        pinIcon: pinIcon,
        pinterestBoxIcon: pinterestBoxIcon,
        pinterestIcon: pinterestIcon,
        playIcon: playIcon,
        playSmIcon: playSmIcon,
        playlistIcon: playlistIcon,
        plusCircleIcon: plusCircleIcon,
        plusIcon: plusIcon,
        plusOutlineIcon: plusOutlineIcon,
        plusSmIcon: plusSmIcon,
        pointerIcon: pointerIcon,
        positionBottomIcon: positionBottomIcon,
        positionLeftIcon: positionLeftIcon,
        positionRightIcon: positionRightIcon,
        positionTopIcon: positionTopIcon,
        printIcon: printIcon,
        puzzlePieceIcon: puzzlePieceIcon,
        qrCodeIcon: qrCodeIcon,
        qrCodeOutlineIcon: qrCodeOutlineIcon,
        qrCodeScannerIcon: qrCodeScannerIcon,
        questionCircleIcon: questionCircleIcon,
        radiobuttonCheckedIcon: radiobuttonCheckedIcon,
        radiobuttonIcon: radiobuttonIcon,
        redditBoxIcon: redditBoxIcon,
        redditIcon: redditIcon,
        redoIcon: redoIcon,
        regularExpressionIcon: regularExpressionIcon,
        removeHorizontalSpacingIcon: removeHorizontalSpacingIcon,
        removeVerticalSpacingIcon: removeVerticalSpacingIcon,
        reorderIcon: reorderIcon,
        replaceAllIcon: replaceAllIcon,
        replaceSingleIcon: replaceSingleIcon,
        reportElementIcon: reportElementIcon,
        rewindIcon: rewindIcon,
        rightDoubleQuotesIcon: rightDoubleQuotesIcon,
        rotateIcon: rotateIcon,
        rotateLeftIcon: rotateLeftIcon,
        rotateRightIcon: rotateRightIcon,
        roundCornersIcon: roundCornersIcon,
        rowFreezeIcon: rowFreezeIcon,
        rowsIcon: rowsIcon,
        rssBoxIcon: rssBoxIcon,
        rssIcon: rssIcon,
        saveIcon: saveIcon,
        searchIcon: searchIcon,
        selectAllIcon: selectAllIcon,
        selectBoxIcon: selectBoxIcon,
        setColumnPositionIcon: setColumnPositionIcon,
        shapeLineIcon: shapeLineIcon,
        shapesIcon: shapesIcon,
        shareIcon: shareIcon,
        sharpenIcon: sharpenIcon,
        signatureIcon: signatureIcon,
        silverlightIcon: silverlightIcon,
        sizeToGridIcon: sizeToGridIcon,
        slidersIcon: slidersIcon,
        slnIcon: slnIcon,
        snapGridIcon: snapGridIcon,
        snapToGridlinesIcon: snapToGridlinesIcon,
        snapToSnaplinesIcon: snapToSnaplinesIcon,
        sortAscIcon: sortAscIcon,
        sortAscSmallIcon: sortAscSmallIcon,
        sortClearIcon: sortClearIcon,
        sortDescIcon: sortDescIcon,
        sortDescSmallIcon: sortDescSmallIcon,
        spellCheckerIcon: spellCheckerIcon,
        starIcon: starIcon,
        starOutlineIcon: starOutlineIcon,
        stickIcon: stickIcon,
        stopIcon: stopIcon,
        stopSmIcon: stopSmIcon,
        strikethroughIcon: strikethroughIcon,
        stripAllFormattingIcon: stripAllFormattingIcon,
        stripCssFormatIcon: stripCssFormatIcon,
        stripFontElementsIcon: stripFontElementsIcon,
        stripSpanElementsIcon: stripSpanElementsIcon,
        stripWordFormattingIcon: stripWordFormattingIcon,
        stumbleUponBoxIcon: stumbleUponBoxIcon,
        stumbleUponIcon: stumbleUponIcon,
        subreportIcon: subreportIcon,
        subscriptIcon: subscriptIcon,
        sumIcon: sumIcon,
        supscriptIcon: supscriptIcon,
        symbolIcon: symbolIcon,
        tableAddIcon: tableAddIcon,
        tableAlignBottomCenterIcon: tableAlignBottomCenterIcon,
        tableAlignBottomLeftIcon: tableAlignBottomLeftIcon,
        tableAlignBottomRightIcon: tableAlignBottomRightIcon,
        tableAlignMiddleCenterIcon: tableAlignMiddleCenterIcon,
        tableAlignMiddleLeftIcon: tableAlignMiddleLeftIcon,
        tableAlignMiddleRightIcon: tableAlignMiddleRightIcon,
        tableAlignRemoveIcon: tableAlignRemoveIcon,
        tableAlignTopCenterIcon: tableAlignTopCenterIcon,
        tableAlignTopLeftIcon: tableAlignTopLeftIcon,
        tableAlignTopRightIcon: tableAlignTopRightIcon,
        tableBodyIcon: tableBodyIcon,
        tableCellDeleteIcon: tableCellDeleteIcon,
        tableCellIcon: tableCellIcon,
        tableCellPropertiesIcon: tableCellPropertiesIcon,
        tableColumnDeleteIcon: tableColumnDeleteIcon,
        tableColumnGroupsIcon: tableColumnGroupsIcon,
        tableColumnInsertLeftIcon: tableColumnInsertLeftIcon,
        tableColumnInsertRightIcon: tableColumnInsertRightIcon,
        tableCornerIcon: tableCornerIcon,
        tableDeleteIcon: tableDeleteIcon,
        tableIcon: tableIcon,
        tablePositionCenterIcon: tablePositionCenterIcon,
        tablePositionEndIcon: tablePositionEndIcon,
        tablePositionStartIcon: tablePositionStartIcon,
        tablePropertiesIcon: tablePropertiesIcon,
        tableRowDeleteIcon: tableRowDeleteIcon,
        tableRowGroupsIcon: tableRowGroupsIcon,
        tableRowInsertAboveIcon: tableRowInsertAboveIcon,
        tableRowInsertBelowIcon: tableRowInsertBelowIcon,
        tableUnmergeIcon: tableUnmergeIcon,
        tableWizardIcon: tableWizardIcon,
        tellAFriendBoxIcon: tellAFriendBoxIcon,
        tellAFriendIcon: tellAFriendIcon,
        templateManagerIcon: templateManagerIcon,
        textClipIcon: textClipIcon,
        textOverflowIcon: textOverflowIcon,
        textTruncateIcon: textTruncateIcon,
        textWrapArrowIcon: textWrapArrowIcon,
        textWrapIcon: textWrapIcon,
        textareaIcon: textareaIcon,
        textboxHiddenIcon: textboxHiddenIcon,
        textboxIcon: textboxIcon,
        thumbnailsDownIcon: thumbnailsDownIcon,
        thumbnailsLeftIcon: thumbnailsLeftIcon,
        thumbnailsRightIcon: thumbnailsRightIcon,
        thumbnailsUpIcon: thumbnailsUpIcon,
        tocSectionIcon: tocSectionIcon,
        tocSectionLevelIcon: tocSectionLevelIcon,
        toggleFullScreenModeIcon: toggleFullScreenModeIcon,
        toolbarFloatIcon: toolbarFloatIcon,
        trackChangesAcceptAllIcon: trackChangesAcceptAllIcon,
        trackChangesAcceptIcon: trackChangesAcceptIcon,
        trackChangesEnableIcon: trackChangesEnableIcon,
        trackChangesIcon: trackChangesIcon,
        trackChangesRejectAllIcon: trackChangesRejectAllIcon,
        trackChangesRejectIcon: trackChangesRejectIcon,
        transparencyIcon: transparencyIcon,
        trashIcon: trashIcon,
        tumblrBoxIcon: tumblrBoxIcon,
        tumblrIcon: tumblrIcon,
        twitterBoxIcon: twitterBoxIcon,
        twitterIcon: twitterIcon,
        underlineIcon: underlineIcon,
        undoIcon: undoIcon,
        ungroupIcon: ungroupIcon,
        unlinkIcon: unlinkIcon,
        unlinkVerticalIcon: unlinkVerticalIcon,
        unlockIcon: unlockIcon,
        unpinIcon: unpinIcon,
        unstickIcon: unstickIcon,
        uploadIcon: uploadIcon,
        userIcon: userIcon,
        validationDataIcon: validationDataIcon,
        validationXhtmlIcon: validationXhtmlIcon,
        vbIcon: vbIcon,
        vbprojIcon: vbprojIcon,
        videoExternalIcon: videoExternalIcon,
        vimeoBoxIcon: vimeoBoxIcon,
        vimeoIcon: vimeoIcon,
        volumeDownIcon: volumeDownIcon,
        volumeMuteIcon: volumeMuteIcon,
        volumeUpIcon: volumeUpIcon,
        warningCircleIcon: warningCircleIcon,
        warningTriangleIcon: warningTriangleIcon,
        wholeWordIcon: wholeWordIcon,
        windowIcon: windowIcon,
        windowMinimizeIcon: windowMinimizeIcon,
        windowRestoreIcon: windowRestoreIcon,
        wrenchIcon: wrenchIcon,
        xCircleIcon: xCircleIcon,
        xIcon: xIcon,
        xOutlineIcon: xOutlineIcon,
        yammerBoxIcon: yammerBoxIcon,
        yammerIcon: yammerIcon,
        youtubeBoxIcon: youtubeBoxIcon,
        youtubeIcon: youtubeIcon,
        zoomActualSizeIcon: zoomActualSizeIcon,
        zoomBestFitIcon: zoomBestFitIcon,
        zoomInIcon: zoomInIcon,
        zoomOutIcon: zoomOutIcon
    });

    var __meta__$M = {
        id: "icons",
        name: "Icons",
        category: "web",
        description: "The Icons set provides both FontIcon and SvgIcon components along with the SVG icons collection from @progress/kendo-svg-icons",
        depends: ["core", "html.icon"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            html = kendo.html,
            ui = kendo.ui,
            Widget = ui.Widget,
            extend = $.extend;

        var FontIcon = Widget.extend({
            init: function(element, options) {
                var that = this;
                Widget.fn.init.call(that, element, options);

                delete options.name;
                that._icon = new html.HTMLFontIcon(element, $.extend({}, options));
                that.element = that.wrapper = that._icon.element;

                kendo.notify(that);
            },
            options: extend({}, html.HTMLFontIcon.fn.options, {
                name: 'FontIcon'
            }),
            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                that._icon = new html.HTMLFontIcon(that.element, $.extend({}, that.options));
            }
        });

        var SvgIcon = Widget.extend({
            init: function(element, options) {
                var that = this;
                Widget.fn.init.call(that, element, options);

                delete options.name;
                that._icon = new html.HTMLSvgIcon(element, $.extend({}, options));
                that.element = that.wrapper = that._icon.element;

                kendo.notify(that);
            },
            options: extend({}, html.HTMLSvgIcon.fn.options, {
                name: 'SvgIcon'
            }),
            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                if (options.icon) {
                    this.element.html('');
                }

                that._icon = new html.HTMLSvgIcon(that.element, $.extend({}, that.options));
            }
        });

        kendo.ui.plugin(FontIcon);
        kendo.ui.plugin(SvgIcon);

        kendo.setDefaults('iconType', 'svg');
        kendo.ui.svgIcons = svgIcons;
        kendo.ui.icon = html.renderIcon;
    })(window.kendo.jQuery);
    var kendo$G = kendo;

    var __meta__$L = {
        id: "badge",
        name: "Badge",
        category: "web", // suite
        description: "The Badge decorates avatars, navigation menus, or other components in the application when visual notification is needed",
        depends: ["core", "icons"] // dependencies
    };

    (function($, undefined$1) {
        var kendo = window.kendo;
        var Widget = kendo.ui.Widget;
        var ui = kendo.ui;
        var HIDDEN = 'k-hidden';

        var iconTemplate = function (ref) {
            var icon = ref.icon;

            return kendo.ui.icon($("<span class='k-badge-icon'></span>"), { icon: icon });
        };
        var svgIconTemplate = function (ref) {
            var icon = ref.icon;

            return ("<span class='k-badge-icon k-svg-icon k-icon'>" + icon + "</span>");
        };

        var Badge = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                that._content();

                that._appearance();

                kendo.notify(that);
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);
            },

            options: {
                name: 'Badge',
                cutoutBorder: false,
                data: {},
                fillMode: 'solid',
                icon: '',
                max: Infinity,
                position: 'inline',
                align: '',
                rounded: 'medium',
                roundings: {
                    'small': 'sm',
                    'medium': 'md',
                    'large': 'lg',
                    'full': 'full'
                },
                sizes: {
                    'small': 'sm',
                    'medium': 'md',
                    'large': 'lg'
                },
                size: 'medium',
                template: null,
                text: '',
                themeColor: 'secondary',
                visible: true,
                _classNames: []
            },

            _content: function() {
                var that = this;
                var text = that.options.text;
                var template = that.options.template;
                var data = that.options.data;
                var icon = that.options.icon;

                // Order of precedence
                // 1) template
                // 2) icon
                // 3) text
                // 4) content

                if (template !== null) {
                    that._text = text;
                    that._template = kendo.template(template).bind(that);
                    that.element.html( that._template(data) );

                    return;
                }

                if (icon !== '') {
                    that.icon(icon);

                    return;
                }

                if (text !== '') {
                    that.text(text);

                    return;
                }

                that.text(that.element.html());
            },

            _appearance: function() {
                var that = this;
                that._themeColor = that.options.themeColor;
                that._shape = that.options.shape;
                that._sizes = that.options.sizes;
                that._size = that.options.size;
                that._fillMode = that.options.fillMode;
                that._rounded = that.options.rounded;
                that._roundings = that.options.roundings;
                that._cutoutBorder = that.options.cutoutBorder;
                that._align = that.options.align;
                that._position = that.options.position;
                that._visible = that.options.visible;

                that._updateClassNames();
            },

            _updateClassNames: function() {
                var that = this;
                var classNames = ['k-badge'];
                var keepClassNames = that.options._classNames;
                var themeColor = that._themeColor;
                var shape = that._shape;
                var sizes = that._sizes;
                var size = that._size;
                var sizeAbbr = sizes[size] === undefined$1 ? size : sizes[size];
                var fillMode = that._fillMode;
                var rounded = that._rounded;
                var roundings = that._roundings;
                var roundedAbbr = roundings[rounded] === undefined$1 ? rounded : roundings[rounded];
                var cutoutBorder = that._cutoutBorder;
                var align = that._align;
                var position = that._position;
                var visible = that._visible;

                // Remove all class names
                that.element.removeClass(function(index, className) {
                    if (className.indexOf('k-') === 0 && keepClassNames.indexOf(className) === -1) {
                        that.element.removeClass(className);
                    }
                });

                // Fill
                if (typeof fillMode === 'string' && fillMode !== '') {
                    classNames.push('k-badge-' + fillMode);
                }

                // Color
                if (typeof themeColor === 'string' && themeColor !== '') {
                    classNames.push('k-badge-' + fillMode + '-' + themeColor);
                }

                // Size
                if (typeof size === 'string' && size !== '') {
                    classNames.push('k-badge-' + sizeAbbr);
                }

                // Rounded
                if (typeof rounded === 'string' && rounded !== '') {
                    classNames.push('k-rounded-' + roundedAbbr);
                }

                // Shape
                if (typeof shape === 'string' && shape !== '') {
                    classNames.push('k-badge-' + shape);
                }

                // Cutout border
                if (typeof cutoutBorder === 'boolean' && cutoutBorder === true) {
                    classNames.push('k-badge-border-cutout');
                }

                // Position
                if (typeof position === 'string' && position !== '') {
                    classNames.push('k-badge-' + position);
                }

                // Align
                if (typeof position === 'string' && position !== '' && position !== 'inline' && typeof align === 'string' && align.split(' ').length == 2) {
                    classNames.push('k-' + align.replace(' ', '-'));
                }

                // Visibility
                if (visible === false) {
                    classNames.push(HIDDEN);
                }

                // Apply classnames
                that.element.addClass(classNames.join(' '));
            },

            setOptions: function(options) {
                var that = this;

                that.element.removeClass(function(index, className) {
                    if (className.indexOf('k-') >= 0) {
                        that.element.removeClass(className);
                    }
                });

                Widget.fn.setOptions.call(that, options);

                that._content();

                that._appearance();
            },

            text: function(text) {
                var that = this;
                var max = that.options.max;

                // handle badge.text()
                if (arguments.length === 0 || text === undefined$1) {
                    return that._text;
                }

                that._text = text;

                // handle badge.text(true|false|null)
                if (text === true || text === false || text === null) {
                    that.element.html('');

                    return;
                }

                // handle badge.text('string')
                if (typeof text === 'string') {
                    that.element.html(text);

                    return;
                }

                // handle badge.text(1)
                if (typeof text === 'number') {
                    if (text > max) {
                        that.element.html(max + '+');
                    } else {
                        that.element.html(text);
                    }

                    return;
                }

                // handle other objects
                if (typeof text === 'object' && 'toString' in text) {
                    that.element.html(text.toString());

                    return;
                }

            },

            icon: function(icon) {
                var that = this;
                var iconTemplateFunction;

                // handle badge.icon()
                if (arguments.length === 0 || icon === undefined$1) {
                    return that._icon;
                }

                that._icon = icon;

                // Handle badge.icon(<SVG />)
                if (icon.indexOf('<svg') === 0) {
                    iconTemplateFunction = kendo.template(svgIconTemplate);
                    that.element.html(iconTemplateFunction({ icon: icon }));

                    return;
                }

                // Handle badge.icon(ICON_NAME)
                iconTemplateFunction = kendo.template(iconTemplate);
                that.element.html(iconTemplateFunction({ icon: icon }));
            },

            themeColor: function(color) {
                var that = this;

                // handle badge.color()
                if (arguments.length === 0 || color === undefined$1) {
                    return that._themeColor;
                }

                that._themeColor = color;
                that._updateClassNames();
            },

            rounded: function(rounded) {
                var that = this;

                // handle badge.shape()
                if (arguments.length === 0 || rounded === undefined$1) {
                    return that._rounded;
                }

                that._rounded = rounded;
                that._updateClassNames();
            },

            hide: function() {
                var that = this;
                that._visible = false;

                that._updateClassNames();
            },

            show: function() {
                var that = this;
                that._visible = true;

                that._updateClassNames();
            }
        });

        ui.plugin(Badge);

    })(window.kendo.jQuery);
    var kendo$F = kendo;

    var __meta__$K = {
        id: "html.button",
        name: "Html.Button",
        category: "web",
        description: "HTML rendering utility for Kendo UI for jQuery.",
        depends: [ "html.base", "icons" ],
        features: []
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            HTMLBase = kendo.html.HTMLBase,

            KBUTTON = "k-button",
            KBUTTONICON = "k-button-icon",
            KBUTTONTEXT = "k-button-text";

        var renderButton = function(element, options) {
            if (arguments[0] === undefined$1 || $.isPlainObject(arguments[0])) {
                options = element;
                element = $("<button></button>");
            }

            return (new HTMLButton(element, options)).html();
        };

        var HTMLButton = HTMLBase.extend({
            init: function(element, options) {
                var that = this;
                HTMLBase.fn.init.call(that, element, options);
                that.wrapper = that.element.addClass(KBUTTON);

                if (!that.element.attr("type") && that.options.type) {
                    that.element.attr("type", that.options.type);
                }

                that._addClasses();
                that.iconElement();
                that._textElement();
            },
            options: {
                name: "HTMLButton",
                type: "button",
                icon: "",
                iconClass: "",
                spriteCssClass: "",
                imageUrl: "",
                size: "medium",
                rounded: "medium",
                fillMode: "solid",
                themeColor: "base",
                stylingOptions: [ "size", "rounded", "fillMode", "themeColor" ]
            },
            iconElement: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    icon = options.icon,
                    iconClass = options.iconClass,
                    spriteCssClass = options.spriteCssClass,
                    imageUrl = options.imageUrl,
                    span, img, isEmpty;

                if (spriteCssClass || imageUrl || icon || iconClass) {
                    isEmpty = true;

                    element.contents().filter(function() {
                        return (!$(this).hasClass("k-sprite") && !$(this).hasClass("k-icon") && !$(this).hasClass("k-svg-icon") && !$(this).hasClass("k-image"));
                    }).each(function(idx, el) {
                        if (el.nodeType == 1 || el.nodeType == 3 && kendo.trim(el.nodeValue).length > 0) {
                            isEmpty = false;
                        }
                    });
                }

                if (isEmpty) {
                    that.element.addClass("k-icon-button");
                }

                if (imageUrl) {
                    img = element.children("img.k-image").first();
                    if (!img[0]) {
                        img = $('<img alt="icon" class="k-image" />').prependTo(element);
                    }
                    img.attr("src", imageUrl);
                    img.addClass(KBUTTONICON);
                } else if (icon || iconClass) {
                    span = element.children("span.k-icon, span.k-svg-icon").first();
                    if (!span[0]) {
                        span = $(kendo.ui.icon({ icon: icon, iconClass: iconClass })).prependTo(element);
                    } else {
                        kendo.ui.icon(span, { icon: icon, iconClass: iconClass });
                    }

                    span.addClass(KBUTTONICON);
                } else if (spriteCssClass) {
                    span = element.children("span.k-sprite").first();
                    if (!span[0]) {
                        span = $('<span class="k-sprite"></span>').prependTo(element);
                    }
                    span.addClass(spriteCssClass + " " + KBUTTONICON);
                }
            },
            _textElement: function() {
                var element = this.element;

                element.contents().filter(function() {
                    return (!$(this).hasClass(KBUTTONICON) && !$(this).hasClass("k-sprite") && !$(this).hasClass("k-icon") && !$(this).hasClass("k-image"));
                }).each(function(idx, el) {
                    if (el.nodeType == 1 || el.nodeType == 3 && kendo.trim(el.nodeValue).length > 0) {
                        if (el.nodeType === 3) {
                            var newSpan = document.createElement('span');

                            el.parentNode.insertBefore(newSpan, el);
                            newSpan.appendChild(el);
                            el = newSpan;
                        }

                        el.classList.add(KBUTTONTEXT);
                    }
                });
            }
        });

        $.extend(kendo.html, {
            renderButton: renderButton,
            HTMLButton: HTMLButton
        });

        kendo.cssProperties.registerPrefix("HTMLButton", "k-button-");

        kendo.cssProperties.registerValues("HTMLButton", [{
            prop: "fillMode",
            values: kendo.cssProperties.fillModeValues.concat(["link"])
        }, {
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

    })(window.kendo.jQuery);
    var kendo$E = kendo;

    var __meta__$J = {
            id: "button",
            name: "Button",
            category: "web",
            description: "The Button widget displays styled buttons.",
            depends: ["core", "badge", "html.button"]
        };

        (function($, undefined$1) {
            var kendo = window.kendo,
                Widget = kendo.ui.Widget,
                html = kendo.html,
                ui = kendo.ui,
                keys = kendo.keys,
                CLICK = "click",
                MOUSEDOWN = kendo.support.mousedown,
                MOUSEUP = kendo.support.mouseup,
                MOUSEOUT = "mouseout",
                NS = ".kendoButton",
                DISABLED = "disabled",
                DISABLEDSTATE = "k-disabled",
                FOCUSEDSTATE = "k-focus",
                ACTIVESTATE = "k-active";

            var BUTTON_DEFAULTS = {
                icon: "",
                iconClass: "",
                spriteCssClass: "",
                imageUrl: "",
                badge: null
            };
            kendo.setDefaults("button", BUTTON_DEFAULTS);

            var Button = Widget.extend({
                init: function(element, options) {
                    var that = this;

                    Widget.fn.init.call(that, element, options);

                    element = that.wrapper = that.element;
                    options = that.options;

                    html.renderButton(element, $.extend({}, options));

                    element.attr("role", "button");

                    options.enable = options.enable && options.enabled && !element.attr(DISABLED);
                    that.enable(options.enable);

                    if (options.enable) {
                        that._tabindex();
                    }

                    that._badge();

                    element
                        .on(CLICK + NS, that._click.bind(that))
                        .on("focus" + NS, that._focus.bind(that))
                        .on("blur" + NS, that._blur.bind(that))
                        .on("keydown" + NS, that._keydown.bind(that))
                        .on("keyup" + NS, that._removeActive.bind(that))
                        .on(MOUSEDOWN + NS, that._addActive.bind(that))
                        .on(MOUSEUP + NS + " " + MOUSEOUT + NS, that._removeActive.bind(that));

                    kendo.notify(that);
                },

                destroy: function() {
                    var that = this;

                    that.wrapper.off(NS);

                    if (that.badge) {
                        that.badge.destroy();
                    }

                    Widget.fn.destroy.call(that);
                },

                events: [
                    CLICK
                ],

                options: {
                    name: "Button",
                    enable: true,
                    enabled: true,
                    icon: "",
                    iconClass: "",
                    spriteCssClass: "",
                    imageUrl: "",
                    badge: null,
                    size: "medium",
                    shape: "rectangle",
                    rounded: "medium",
                    fillMode: "solid",
                    themeColor: "base"
                },

                _isNativeButton: function() {
                    return this.element.prop("tagName").toLowerCase() == "button";
                },

                _click: function(e) {
                    if (this.options.enable) {
                        if (this.trigger(CLICK, {
                            event: e,
                            id: this.element.attr("id"),
                            target: this.element
                        })) {
                            e.preventDefault();
                        }
                    }
                },

                _focus: function() {
                    if (this.options.enable) {
                        this.element.addClass(FOCUSEDSTATE);
                    }
                },

                _blur: function() {
                    var that = this;
                    that.element.removeClass(FOCUSEDSTATE);
                    setTimeout(function() {
                        that.element.removeClass(ACTIVESTATE);
                    });
                },

                _keydown: function(e) {
                    var that = this;
                    if (e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR) {
                        that._addActive();

                        if (!that._isNativeButton()) {
                            if (e.keyCode == keys.SPACEBAR) {
                                e.preventDefault();
                            }
                            that._click(e);
                        }
                    }
                },

                _removeActive: function() {
                    this.element.removeClass(ACTIVESTATE);
                },

                _addActive: function() {
                    if (this.options.enable) {
                        this.element.addClass(ACTIVESTATE);
                    }
                },

                enable: function(enable) {
                    var that = this,
                        element = that.element;

                    if (enable === undefined$1) {
                        enable = true;
                    }

                    enable = !!enable;
                    that.options.enable = enable;
                    element.toggleClass(DISABLEDSTATE, !enable)
                        .attr("aria-disabled", !enable)
                        .attr(DISABLED, !enable);

                    if (enable) {
                        that._tabindex();
                    }

                    // prevent 'Unspecified error' in IE when inside iframe
                    try {
                        element.trigger("blur");
                    } catch (err) {}
                },

                _badge: function(options) {
                    var that = this;
                    var badgeOptions = options || that.options.badge;
                    var badgeEelement;

                    if (badgeOptions === null || badgeOptions === undefined$1) {
                        return;
                    }

                    if (badgeOptions.constructor !== Object) {
                        badgeOptions = { text: badgeOptions };
                    }

                    if (badgeOptions.position === undefined$1 || badgeOptions.position === "") {
                        badgeOptions.position = "edge";

                        if (badgeOptions.align === undefined$1 || badgeOptions.align === "") {
                            badgeOptions.align = "top end";
                        }
                    }

                    badgeOptions._classNames = ["k-button-badge"];

                    that.element.addClass("k-badge-container");

                    badgeEelement = $('<span />').appendTo(that.element);
                    that.badge = new ui.Badge(badgeEelement, badgeOptions);
                }
            });

            if (Button.fn.hasOwnProperty("defaults") === false) {
                Object.defineProperty(Button.fn, "defaults", {
                    get: function() {
                        return kendo.defaults.button;
                    }
                });
            }

            kendo.cssProperties.registerPrefix("Button", "k-button-");

            kendo.cssProperties.registerValues("Button", [{
                prop: "fillMode",
                values: kendo.cssProperties.fillModeValues.concat(["link"])
            }, {
                prop: "rounded",
                values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
            }]);

            kendo.ui.plugin(Button);

        })(window.kendo.jQuery);
    var kendo$D = kendo;

    var __meta__$I = {
            id: "togglebutton",
            name: "ToggleButton",
            category: "web",
            description: "The ToggleButton widget displays styled buttons with selected state.",
            depends: ["core", "button"]
        };

        (function($, undefined$1) {
            var kendo = window.kendo,
                Button = kendo.ui.Button,
                CLICK = "click",
                TOGGLE = "toggle",
                NS = ".kendoToggleButton",
                ARIA_PRESSED = "aria-pressed",
                SELECTED = "k-selected",
                TOGGLE_BUTTON = "k-toggle-button",
                DATA_GROUP = "data-group",
                ID = "id";

            var ToggleButton = Button.extend({
                init: function(element, options) {
                    var that = this;

                    Button.fn.init.call(that, element, options);

                    element = that.wrapper = that.element;
                    options = that.options;

                    element.addClass(TOGGLE_BUTTON);

                    that._selected = options.selected === true ? true : false;
                    that.toggle(that._selected);

                    if (options.group) {
                        element.attr(DATA_GROUP, options.group);
                    }

                    kendo.notify(that);
                },

                destroy: function() {
                    var that = this;

                    that.wrapper.off(NS);
                    Button.fn.destroy.call(that);
                },

                events: [
                    CLICK,
                    TOGGLE
                ],

                options: {
                    name: "ToggleButton",
                    group: undefined$1,
                    selected: false
                },

                toggle: function(toggle) {
                    if (toggle === undefined$1) {
                        toggle = !this._selected;
                    }

                    this._selected = toggle;

                    if (toggle === true) {
                        this.element.attr(ARIA_PRESSED, true);
                        this.element.addClass(SELECTED);
                    } else if (toggle === false) {
                        this.element.attr(ARIA_PRESSED, false);
                        this.element.removeClass(SELECTED);
                    }
                },

                _click: function(e) {
                    if (this.options.enable) {
                        if (this.trigger(CLICK, {
                            event: e,
                            id: this.element.attr(ID),
                            target: this.element
                        })) {
                            e.preventDefault();
                        } else {
                            this.toggle();

                            this.trigger(TOGGLE, {
                                event: e,
                                checked: this._selected,
                                group: this.options.group,
                                id: this.element.attr(ID),
                                target: this.element
                            });
                        }
                    }
                }
            });

            kendo.cssProperties.registerPrefix("ToggleButton", "k-button-");

            kendo.cssProperties.registerValues("ToggleButton", [{
                prop: "fillMode",
                values: kendo.cssProperties.fillModeValues.concat(["link"])
            }, {
                prop: "rounded",
                values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
            }]);

            kendo.ui.plugin(ToggleButton);

        })(window.kendo.jQuery);
    var kendo$C = kendo;

    var __meta__$H = {
        id: "buttongroup",
        name: "ButtonGroup",
        category: "web",
        description: "The Kendo ButtonGroup widget is a linear set of grouped buttons.",
        depends: [ "core", "togglebutton", "button" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo;
        var ui = kendo.ui;
        var Widget = ui.Widget;
        var ToggleButton = ui.ToggleButton;
        var Button = ui.Button;
        var keys = kendo.keys;
        var NS = ".kendoButtonGroup";
        var KWIDGET = "k-widget";
        var KBUTTONGROUP = "k-button-group";
        var KBUTTON = "k-button";
        var SELECTED = "k-selected";
        var DISABLED = "k-disabled";
        var KFOCUS = "k-focus";
        var SELECT = "select";
        var KEYDOWN = "keydown";
        var ARIA_DISABLED = "aria-disabled";
        var EMPTY = " ";
        var DOT = ".";
        var NONE = "none";
        var SINGLE = "single";
        var MULTIPLE = "multiple";
        var TOGGLE = "toggle";
        var FOCUS = "focus";

        var ButtonGroup = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                that.wrapper = that.element;

                that.selectedIndices = [];

                that._buttons = that._renderItems(that.options.items);

                that.element
                    .addClass(KWIDGET + EMPTY + KBUTTONGROUP)
                    .attr("role", "group");

                that._enable = true;

                if (!that.options.enable || !that.options.enabled) {
                    that._enable = false;
                    that.element
                            .attr(ARIA_DISABLED, true)
                            .addClass(DISABLED);

                    that._buttons.forEach(function (b) {
                        b.enable(false);
                    });
                }

                if (that.options.selection !== NONE) {
                    that.select(that.options.index);
                }

                that._attachEvents();
            },

            events: [
                SELECT
            ],

            options: {
                name: "ButtonGroup",
                selection: SINGLE,
                index: -1,
                enable: true,
                enabled: true,
                preventKeyNav: false,
                size: "medium",
                rounded: "medium",
                fillMode: "solid",
                themeColor: "base"
            },

            badge: function(item, value) {
                var that = this,
                    element = that.element,
                    button = !isNaN(item) ? that._buttons[item] : element.find(item).getKendoToggleButton() || element.find(item).getKendoButton(),
                    validValue = value || value === 0,
                    badge, badgeEl;

                if (!button) {
                    return;
                }

                badge = button.badge;

                if (!badge && validValue) {
                    button._badge({ text: kendo.htmlEncode(value) });
                    return kendo.htmlEncode(value);
                }

                if (validValue) {
                    badge.text(kendo.htmlEncode(value));
                } else if (value === false) {
                    button.badge = null;
                    badgeEl = badge.element;
                    badge.destroy();
                    badgeEl.empty().remove();
                    return;
                }

                return badge ? badge.text() : null;
            },

            current: function() {
                return this.element.find(DOT + SELECTED);
            },

            destroy: function() {
                var that = this;

                that.element.off(NS);

                that.element.find(DOT + KBUTTON).each(function(i, el) {
                    var component = $(el).getKendoToggleButton() || $(el).getKendoButton();

                    if (component) {
                        component.destroy();
                    }
                });

                Widget.fn.destroy.call(that);
            },

            enable: function(enable) {
                if (typeof enable == "undefined") {
                    enable = true;
                }

                this.element
                        .attr(ARIA_DISABLED, !enable)
                        .toggleClass(DISABLED, !enable);

                this._buttons.forEach(function (b) {
                    var focused = b.element.hasClass(KFOCUS) || b.element.is(":focus");

                    b.enable(enable);

                    if (focused) {
                        b.element.removeAttr("disabled").addClass("k-focus").trigger("focus");
                    }
                });

                this._enable = this.options.enable = enable;
            },

            select: function(el) {
                var that = this,
                    button,
                    index = -1;

                if (this.options.selection === NONE || el === undefined$1 || el === -1) {
                    return;
                }

                if (typeof el === "number") {
                    index = el;
                } else if (el.nodeType) {
                    el = $(el);
                    index = el.index();
                } else {
                    index = el.index();
                }

                button = that._buttons[index];

                if (!button) {
                    return;
                }

                if (that.options.selection === MULTIPLE) {
                    if (el.length > 1) {
                        el.each(function (i, element) {
                            var idx = $(element).index();

                            that._buttons[idx].toggle();
                            that._toggleIndex(idx);
                        });
                    } else {
                        that._buttons[index].toggle();
                        that._toggleIndex(index);
                    }
                } else {
                    that._resetIndexes(index);
                }
            },

            _addButton: function(el, options) {
                if (this.options.selection === NONE) {
                    delete options.selected;

                    return new Button(el, options);
                } else {
                    var btn = new ToggleButton(el, options);

                    btn.bind(TOGGLE, this._select.bind(this, el));

                    return btn;
                }
            },

            _attachEvents: function() {
                if (!this.options.preventKeyNav) {
                    this.element.on(KEYDOWN + NS, this._keyDown.bind(this));
                }
            },

            _keyDown: function(e) {
                var that = this,
                    buttonGroup = $(that.element),
                    focusableItems = buttonGroup.find(DOT + KBUTTON),
                    focusedElement = buttonGroup.find(":focus"),
                    currentIndex = focusableItems.index(focusedElement),
                    isRtl = kendo.support.isRtl(that.element),
                    itemToFocus;

                if ((e.keyCode === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {
                    itemToFocus = currentIndex === 0 ? focusableItems.eq(focusableItems.length - 1) : $(focusableItems[currentIndex - 1]);
                    itemToFocus.trigger(FOCUS);
                    e.preventDefault();
                } else if ((e.keyCode === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {
                    itemToFocus = currentIndex + 1 === focusableItems.length ? focusableItems.eq(0) : $(focusableItems[currentIndex + 1]);
                    itemToFocus.trigger(FOCUS);
                    e.preventDefault();
                }
            },

            _renderItems: function(items) {
                var that = this,
                    groupOptions = that.options,
                    children = that.element.children(),
                    buttons = [];

                if (children.length > 0) {
                    children.each(function(index) {
                        var el = $(this),
                            image = el.find("img").addClass("k-image"),
                            disabled = el.is("[disabled]") || el.hasClass(DISABLED),
                            options = {
                                badge: kendo.attrValue(el, "badge"),
                                icon: !image[0] ? kendo.attrValue(el, "icon") : null,
                                disabled: disabled,
                                selected: !disabled ? el.is(DOT + SELECTED) : false,
                                size: groupOptions.size,
                                rounded: groupOptions.rounded,
                                fillMode: groupOptions.fillMode,
                                themeColor: groupOptions.themeColor
                            };

                        buttons.push(that._addButton(el, options));

                        if (options.selected) {
                            that.selectedIndices.push(index);
                        }
                    });
                }

                if (!items) {
                    return buttons;
                }

                items.forEach(function(item, index) {
                    var text = item.text ? item.encoded === false ? item.text : kendo.htmlEncode(item.text) : "",
                        el = item.url ? $("<a href=" + item.url + ">") : $("<button>");

                    el.html(text);

                    if (item.attributes) {
                        el.attr(item.attributes);
                    }

                    item = $.extend({}, item, {
                        size: groupOptions.size,
                        rounded: groupOptions.rounded,
                        fillMode: groupOptions.fillMode,
                        themeColor: groupOptions.themeColor
                    });

                    el.appendTo(that.element);
                    buttons.push(that._addButton(el, item));

                    if (item.selected) {
                        that.selectedIndices.push(index);
                    }
                });

                return buttons;
            },

            _resetIndexes: function(index) {
                this.selectedIndices = [];
                this._buttons.forEach(function (b) {
                    b.toggle(false);
                });

                this._buttons[index].toggle(true);
                this.selectedIndices.push(index);
            },

            _select: function(button) {
                var selection = this.options.selection,
                    index = button.index();

                if (!this._enable || button.is(DOT + DISABLED)) {
                    return;
                }

                if (selection === MULTIPLE) {
                    this._toggleIndex(index);
                } else if (selection === SINGLE) {
                    this._resetIndexes(index);
                }

                this.trigger(SELECT, { indices: this.selectedIndices, target: button });
            },

            _toggleIndex: function(index) {
                if (this.selectedIndices.indexOf(index) === -1) {
                    this.selectedIndices.push(index);
                } else {
                    this.selectedIndices.splice(this.selectedIndices.indexOf(index), 1);
                }
            }
        });

        ui.plugin(ButtonGroup);
    })(window.kendo.jQuery);
    var kendo$B = kendo;

    var __meta__$G = {
        id: "bottomnavigation",
        name: "BottomNavigation",
        category: "web",
        description: "The BottomNavigation widget is a navigation element that allows movement between primary destinations in an app.",
        depends: [ "core", "icons" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            extend = $.extend,
            template = kendo.template,
            keys = kendo.keys,
            isPlainObject = $.isPlainObject,
            isEmptyObject = $.isEmptyObject,

            NS = ".kendoBottomNavigation",
            PREFIX = "k-bottom-nav-",
            K_POS = "k-pos-",
            DOT = ".",

            SELECT = "select";

        var isString = function(value) {
            return typeof value === "string";
        };

        var bottomNavigationStyles = {
            widget: "k-bottom-nav",
            item: "k-bottom-nav-item",
            navIcon: "k-bottom-nav-item-icon",
            icon: "k-icon",
            text: "k-bottom-nav-item-text",
            itemFlow: {
                vertical: "k-bottom-nav-item-flow-vertical",
                horizontal: "k-bottom-nav-item-flow-horizontal"
            },
            selected: "k-selected",
            disabled: "k-disabled",
            border: "k-bottom-nav-border",
            shadow: "k-bottom-nav-shadow",
            focus: "k-focus"
        };

        var templates = {
            item: template(function () { return ("<span class=\"" + (bottomNavigationStyles.item) + "\"></span>"); }),
            anchor: template(function (ref) {
                var url = ref.url;

                return ("<a class=\"" + (bottomNavigationStyles.item) + "\"  href=\"" + (kendo.htmlEncode(url)) + "\"></a>");
        }),
            text: template(function (ref) {
                var text = ref.text;

                return ("<span class=\"" + (bottomNavigationStyles.text) + "\" >" + text + "</span>");
        }),
            icon: template(function (ref) {
                var icon = ref.icon;

                return kendo.ui.icon($(("<span class=\"" + (bottomNavigationStyles.navIcon) + "\"></span>")), { icon: icon, size: "xlarge" });
        })
        };

        var BottomNavigation = Widget.extend({
            init: function(element, options) {
                var that = this;
                options = options || {};
                Widget.fn.init.call(that, element, options);

                that.element = $(element);

                // Backwards compatibility, so that we keep 'fill' as a legacy option
                if (this.options.fillMode === null) {
                    this.options.fillMode = this.options.fill;
                }

                that._updateCssClasses();
                that._items();
                that._bindEvents();
            },

            options: {
                name: "BottomNavigation",
                positionMode: "fixed",
                items: [],
                themeColor: "primary",
                itemFlow: "vertical",
                // Backwards compatibility, so that we keep 'fill' as a legacy option
                fillMode: null,
                fill: "flat",
                shadow: false,
                border: true,
                template: null
            },

            events: [
                SELECT
            ],

            destroy: function() {
                var that = this;

                that.element.off(NS);

                Widget.fn.destroy.call(this);
            },

            _tabindex: function(target) {
                var that = this,
                    element = that.element,
                    TABINDEX = "tabindex",
                    cachedTabIndex = element.attr("data-" + kendo.ns + TABINDEX),
                    tabindex = target.attr(TABINDEX) || element.attr(TABINDEX) || cachedTabIndex;

                if (!cachedTabIndex) {
                    element.removeAttr(TABINDEX);
                    element.attr("data-" + kendo.ns + TABINDEX, tabindex);
                }

                target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
            },

            _updateCssClasses: function() {
                var that = this,
                    options = that.options,
                    styles = bottomNavigationStyles;

                // Remove all class names
                that.element.removeClass(function(index, className) {
                    if (className.indexOf('k-') === 0) {
                        that.element.removeClass(className);
                    }
                });

                that.element.addClass(styles.widget);
                that.element.addClass(kendo.getValidCssClass(K_POS, "positionMode", options.positionMode));
                that.element.toggleClass(styles.border, options.border);
                that.element.toggleClass(styles.shadow, options.shadow);
                that._itemFlow(options.itemFlow);

                that._applyCssClasses();
            },

            _itemFlow: function(orientation) {
                var that = this,
                    orientationStyles = bottomNavigationStyles.itemFlow;

                that._toggleClassGroup(that.element, orientation, orientationStyles);
            },

            _toggleClassGroup: function(element, value, group) {
                if (isString(group[value])) {
                    for (var key in group) {
                        element.removeClass(group[key]);
                    }

                    element.addClass(group[value]);
                }
            },

            _items: function() {
                var that = this,
                    options = that.options,
                    items = options.items,
                    item;

                for (var i = 0; i < items.length; i++) {
                    item = that._renderItem(items[i]);
                    that.element.append(item);
                }
            },

            _renderItem: function(item) {
                var that = this,
                    itemTemplate = item.template || that.options.template,
                    isLink = item.url && isString(item.url),
                    elm, icon;

                elm = $(isLink ? template(templates.anchor)(item) : template(templates.item)(item));

                elm.toggleClass(bottomNavigationStyles.selected, item.selected === true)
                    .toggleClass(bottomNavigationStyles.disabled, item.enabled === false)
                    .addClass(item.cssClass)
                    .attr(extend({}, item.attributes, {
                        "aria-disabled": item.enabled === false
                    }))
                    .data(item.data);

                that._tabindex(elm);

                if (!elm.attr("role") && !isLink) {
                    elm.attr("role", "link");
                }

                if (itemTemplate) {
                    elm.append(template(itemTemplate)(item));
                    return elm;
                }

                item = extend({}, {
                    icon: ""
                }, item);

                icon = $(templates.icon(item)).addClass(item.iconClass);

                elm.append(icon);

                if (item.text) {
                    item.text = item.encoded === false ? item.text : kendo.htmlEncode(item.text);
                    elm.append($(templates.text(item)));
                }

                return elm;
            },

            _bindEvents: function() {
                var that = this,
                    clickProxy = that._click.bind(that),
                    keydownProxy = that._keydown.bind(that);

                that.element.on("click" + NS, DOT + bottomNavigationStyles.item, clickProxy)
                            .on("keydown" + NS, DOT + bottomNavigationStyles.item, keydownProxy);
            },

            _click: function(ev) {
                var that = this,
                    item = $(ev.target).closest(DOT + bottomNavigationStyles.item);

                if (item.is(DOT + bottomNavigationStyles.disabled)) {
                    ev.preventDefault();
                    return;
                }

                that._triggerSelect(item, ev);
            },

            _triggerSelect: function(item, ev) {
                var that = this;

                if (item.is(DOT + bottomNavigationStyles.disabled)) {
                    return;
                }

                if (that.trigger(SELECT, { originalEvent: ev, item: item, data: item.data() })) {
                    return;
                }

                that.select(item);
            },

            _keydown: function(ev) {
                var that = this,
                    target = $(ev.target),
                    key = ev.keyCode;

                if (key === keys.ENTER || key === keys.SPACEBAR) {
                    if (that._isItem(target)) {
                        that._triggerSelect(target, ev);

                        if (key === keys.SPACEBAR) {
                            ev.preventDefault();
                        }
                    }
                }
            },

            _isItem: function(item) {
                var that = this;

                item = $(item);

                return item.is(DOT + bottomNavigationStyles.item) && !!that.element.find(item).length;
            },

            items: function() {
                var that = this;

                return that.element.children();
            },

            select: function(item, state) {
                var that = this,
                    selectedItem = that.items().filter(DOT + bottomNavigationStyles.selected);

                if (!item) {
                    return selectedItem;
                }

                state = state !== false;

                if (that._isItem(item)) {
                    selectedItem.removeClass(bottomNavigationStyles.selected);
                    $(item).toggleClass(bottomNavigationStyles.selected, state);
                }
            },

            enable: function(item, state) {
                var that = this;

                state = state === false;

                if (item && that._isItem(item)) {
                    $(item).toggleClass(bottomNavigationStyles.disabled, state);
                    $(item).attr("aria-disabled", state);
                }
            },

            item: function(index) {
                var that = this;

                if (isNaN(index)) {
                    return null;
                }

                return that.items().eq(index);
            },

            itemById: function(id) {
                var that = this;

                return that.element.find("#" + id);
            },

            add: function(item, before) {
                var that = this,
                    method = "append",
                    targetElement = that.element;

                if (before && that._isItem(before)) {
                    method = "before";
                    targetElement = $(before);
                }

                if (item && isPlainObject(item) && !isEmptyObject(item)) {
                    targetElement[method](that._renderItem(item));
                }
            },

            remove: function(item) {
                var that = this;

                if (item && that._isItem(item)) {
                    item.remove();
                }
            },

            showText: function(toggle) {
                var that = this,
                    textItems = that.items().find(DOT + bottomNavigationStyles.text);

                toggle = toggle !== false;

                textItems.toggle(toggle);
            },

            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(this, options);
                that._updateCssClasses();

                if ("items" in options || "template" in options) {
                    that.element.empty();
                    that._items();
                }
            }
        });

        ui.plugin(BottomNavigation);

        kendo.cssProperties.registerPrefix("BottomNavigation", "k-bottom-nav-");
    })(window.kendo.jQuery);
    var kendo$A = kendo;

    var __meta__$F = {
        id: "pager",
        name: "Pager",
        category: "framework",
        depends: [ "data", "icons" ],
        advanced: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            keys = kendo.keys,
            mediaQuery = kendo.mediaQuery,
            support = kendo.support,
            encode = kendo.htmlEncode,
            template = kendo.template,
            FIRST = "caret-alt-to-left",
            LAST = "caret-alt-to-right",
            PREV = "caret-alt-left",
            NEXT = "caret-alt-right",
            FIRST_CONST = "caret-alt-to-left",
            LAST_CONST = "caret-alt-to-right",
            PREV_CONST = "caret-alt-left",
            NEXT_CONST = "caret-alt-right",
            FOCUSABLE = ":kendoFocusable:not([tabindex='-1'])",
            CHANGE = "change",
            NS = ".kendoPager",
            CLICK = "click",
            KEYDOWN = "keydown",
            DISABLED = "disabled",
            MOUSEDOWN = "down",
            MAX_VALUE = Number.MAX_VALUE,
            isRtl = false,
            iconTemplate = function (ref) {
                var text = ref.text;
                var wrapClassName = ref.wrapClassName;
                var className = ref.className;
                var size = ref.size;

                return ("<button role=\"button\" title=\"" + text + "\" aria-label=\"" + text + "\" class=\"k-pager-nav k-button k-button-flat k-button-flat-base k-icon-button " + wrapClassName + " " + size + "\">" + (kendo.ui.icon($('<span class="k-button-icon"></span>'),className)) + "</button>");
        };

        function button(options) {
            return options.template( {
                idx: options.idx,
                text: options.text,
                ns: kendo.ns,
                numeric: options.numeric,
                size: options.size,
                title: options.title || "",
                tabindex: options.navigatable ? 0 : -1,
                navigatable: options.navigatable
            });
        }

        function selectOption(template, idx, text, selected) {
            return template( {
                idx: idx,
                text: text || idx,
                selected: selected || false
            });
        }

        function icon(className, text, wrapClassName, id, size) {
            return iconTemplate({
                className: className,
                text: text,
                wrapClassName: wrapClassName || "",
                id: id || "",
                size: size
            });
        }

        function update(element, className, page, disabled) {
           element.find(("[class*=\"-i-" + className + "\"]"))
                  .parent()
                  .attr(kendo.attr("page"), page)
                  .attr("tabindex", disabled ? -1 : 0)
                  .attr("aria-disabled", disabled)
                  .toggleClass("k-disabled", disabled);
        }

        function first(element, page) {
            update(element, FIRST, 1, page <= 1);
        }

        function prev(element, page) {
            update(element, PREV, Math.max(1, page - 1), page <= 1);
        }

        function next(element, page, totalPages) {
            update(element, NEXT, Math.min(totalPages, page + 1), page >= totalPages);
        }

        function last(element, page, totalPages) {
            update(element, LAST, totalPages, page >= totalPages);
        }

        var Pager = Widget.extend( {
            init: function(element, options) {
                var that = this, page, totalPages;
                var buttonSize = "";
                var dropDownClasses = "";
                var width;
                var info;

                Widget.fn.init.call(that, element, options);

                options = that.options;
                that._createDataSource(options);
                that.linkTemplate = kendo.template(that.options.linkTemplate);
                that.selectTemplate = kendo.template(that.options.selectTemplate);
                that.numericSelectItemTemplate = kendo.template(that.options.numericSelectItemTemplate);

                page = that.page();
                totalPages = that.totalPages();

                that._refreshHandler = that.refresh.bind(that);

                that.dataSource.bind(CHANGE, that._refreshHandler);
                that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());

                isRtl = kendo.support.isRtl(element);

                if (isRtl) {
                    FIRST = LAST_CONST;
                    LAST = FIRST_CONST;
                    PREV = NEXT_CONST;
                    NEXT = PREV_CONST;
                } else {
                    FIRST = FIRST_CONST;
                    LAST = LAST_CONST;
                    PREV = PREV_CONST;
                    NEXT = NEXT_CONST;
                }

                if (options.size) {
                    buttonSize = kendo.getValidCssClass("k-button-", "size", options.size);
                    dropDownClasses = "k-rounded-md " + kendo.getValidCssClass("k-picker-", "size", options.size);
                }

                if (options.navigatable) {
                    that._id = that.element.attr("id") || kendo.guid();
                }
                that._template();

                if (options.previousNext || options.numeric) {
                    that._numericWrap = that.element.find(".k-pager-numbers-wrap");

                    if (that._numericWrap.length === 0) {
                        that._numericWrap = $("<div class='k-pager-numbers-wrap' />").appendTo(that.element);
                    }
                }


                if (options.previousNext) {
                    if (!that._numericWrap.find("[class*='-i-" + FIRST + "']").length) {
                        that._numericWrap.append(icon(FIRST, options.messages.first, "k-pager-first", that._id, buttonSize));

                        first(that._numericWrap, page, totalPages);
                    }

                    if (!that._numericWrap.find("[class*='-i-" + PREV + "']").length) {
                        that._numericWrap.append(icon(PREV, options.messages.previous, null, that._id, buttonSize));

                        prev(that._numericWrap, page, totalPages);
                    }
                }

                if (options.numeric) {
                    if (!that._numericSelect) {
                        that._numericSelect = that._numericWrap.find(".k-dropdown");

                        if (that._numericSelect.length === 0) {
                           that._numericSelect = $("<select aria-label='" + that.options.messages.numbersSelectLabel + "' class='k-dropdown k-picker k-picker-solid k-dropdown-list " + dropDownClasses + "' />").appendTo(that._numericWrap);
                        }
                    }

                    if (!that.list) {
                        that.list = that._numericWrap.find(".k-pager-numbers");

                        if (that.list.length === 0) {
                           that.list = $('<div class="k-pager-numbers" />').appendTo(that._numericWrap);
                        }
                    }

                    if (options.dataSource && !options.dataSource.total()) {
                        that._numericSelect.empty().append("<option value='0' />");
                        that.list.empty().append(that.selectTemplate({ text: 0, tabindex: options.navigatalbe ? 0 : -1, navigatable: options.navigatable, title: kendo.format(options.messages.pageButtonLabel, 0) }));
                    }
                }

                if (options.input) {
                    if (!that.element.find(".k-pager-input").length) {
                       that.element.append('<span class="k-pager-input k-label">' +
                            encode(options.messages.page) +
                           '<span class="k-textbox k-input k-input-md k-rounded-md k-input-solid"><input class="k-input-inner" /></span>' +
                           encode(kendo.format(options.messages.of, totalPages)) +
                           '</span>');
                    }

                    that.element.on(KEYDOWN + NS, ".k-pager-input input", that._keydown.bind(that));
                }

                if (options.previousNext) {
                    if (!that._numericWrap.find("[class*='-i-" + NEXT + "']").length) {
                        that._numericWrap.append(icon(NEXT, options.messages.next, null, that._id, buttonSize));

                        next(that._numericWrap, page, totalPages);
                    }

                    if (!that._numericWrap.find("[class*='-i-" + LAST + "']").length) {
                        that._numericWrap.append(icon(LAST, options.messages.last, "k-pager-last", that._id, buttonSize));

                        last(that._numericWrap, page, totalPages);
                    }
                }

                if (options.pageSizes) {
                    if (!that.element.find(".k-pager-sizes").length) {
                        var pageSizes = options.pageSizes.length ? options.pageSizes : ["all", 5, 10, 20];
                        var pageItems = $.map(pageSizes, function(size) {
                            if (size.toLowerCase && size.toLowerCase() === "all") {
                                return "<option value='all'>" + encode(options.messages.allPages) + "</option>";
                            }

                            return "<option>" + size + "</option>";
                        });

                        $('<span class="k-pager-sizes"><select></select><span>' + encode(options.messages.itemsPerPage) + "</span></span>")
                            .appendTo(that.element)
                            .find("select").html(pageItems.join("")).end()
                            .appendTo(that.element);
                    }

                    that.element.find(".k-pager-sizes select").val(that.pageSize());

                    if (kendo.ui.DropDownList) {
                       that.element.find(".k-pager-sizes select").show().attr("aria-label", options.messages.pageSizeDropDownLabel).kendoDropDownList({ size: options.size });
                    }

                    that.element.on(CHANGE + NS, ".k-pager-sizes select", that._change.bind(that));
                }

                if (options.refresh) {
                    if (!that.element.find(".k-pager-refresh").length) {
                        that.element.append('<button role="button" href="#" class="k-pager-refresh k-button ' + buttonSize + ' k-button-flat k-button-flat-base k-icon-button" title="' + options.messages.refresh +
                            '" aria-label="' + options.messages.refresh + '">' + kendo.ui.icon("arrow-rotate-cw") + '</button>');
                    }

                    that.element.on(CLICK + NS, ".k-pager-refresh", that._refreshClick.bind(that));
                }

                if (options.info) {
                    if (!that.element.find(".k-pager-info").length) {
                        that.element.append('<span class="k-pager-info k-label" />');
                    }
                }

                that.element
                    .on(CLICK + NS , "button", that._click.bind(that))
                    .on(CHANGE + NS , "select.k-dropdown", that._numericSelectChange.bind(that))
                    .addClass("k-pager");

                if (options.size) {
                    that.element.addClass(kendo.getValidCssClass("k-pager-", "size", options.size));
                }

                if (options.autoBind) {
                    that.refresh();
                }

                that._resizeHandler = that.resize.bind(that, true);
                $(window).on("resize" + NS, that._resizeHandler);

                that._navigatable();

                if (that.options.responsive) {
                    width = that.element.outerWidth();
                    info = that.element.find(".k-pager-info");
                    if (width <= 480) {
                        info.hide();
                        that.element.find(".k-pager-sizes").children().hide();
                        if (options.numeric) {
                            that._numericSelect.show();
                            that.list.hide();
                        }
                    } else {
                        if (width <= 600) {
                            info.hide();
                        }
                        if (options.numeric) {
                            that._numericSelect.hide();
                        }
                    }
                } else if (that._numericSelect) {
                    that._numericSelect.hide();
                }

                kendo.notify(that);
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that.element.off(NS);
                that.dataSource.unbind(CHANGE, that._refreshHandler);
                that._refreshHandler = null;
                $(window).off("resize" + NS, this._resizeHandler);

                kendo.destroy(that.element);
                that.element = that.list = null;
            },

            events: [
                CHANGE
            ],

            options: {
                name: "Pager",
                ARIATemplate: function (ref) {
                    var page = ref.page;
                    var totalPages = ref.totalPages;

                    return ("Page navigation, page " + page + " of " + totalPages);
        },
                selectTemplate: function (ref) {
                    var text = ref.text;
                    var title = ref.title;
                    var tabindex = ref.tabindex;
                    var size = ref.size;

                    return ("<button role=\"button\" aria-current=\"page\" tabindex=\"" + tabindex + "\" aria-label=\"" + title + "\" class=\"k-button " + size + " k-button-flat k-button-flat-primary k-selected\"><span class=\"k-button-text\">" + (encode(text)) + "</span></button>");
        },
                linkTemplate: function (ref) {
                    var ns = ref.ns;
                    var idx = ref.idx;
                    var text = ref.text;
                    var title = ref.title;
                    var tabindex = ref.tabindex;
                    var size = ref.size;

                    return ("<button class=\"k-button " + size + " k-button-flat k-button-flat-primary\" tabindex=\"" + tabindex + "\" href=\"#\" data-" + ns + "page=\"" + idx + "\" " + (title !== "" ? ("title=\"" + title + "\"") : '') + "><span class=\"k-button-text\">" + (encode(text)) + "</span></button>");
        },
                numericSelectItemTemplate: function (ref) {
                    var idx = ref.idx;
                    var selected = ref.selected;
                    var text = ref.text;

                    return ("<option value=\"" + idx + "\" " + (selected ? 'selected="selected"' : '') + ">" + (encode(text)) + "</option>");
        },
                buttonCount: 10,
                autoBind: true,
                numeric: true,
                info: true,
                input: false,
                previousNext: true,
                pageSizes: false,
                refresh: false,
                responsive: true,
                navigatable: false,
                size: "medium",
                messages: {
                    allPages: "All",
                    display: "{0} - {1} of {2} items",
                    empty: "No items to display",
                    page: "Page",
                    of: "of {0}",
                    itemsPerPage: "items per page",
                    pageButtonLabel: "Page {0}",
                    pageSizeDropDownLabel: "Page sizes drop down",
                    numbersSelectLabel: "Page select",
                    first: "Go to the first page",
                    previous: "Go to the previous page",
                    next: "Go to the next page",
                    last: "Go to the last page",
                    refresh: "Refresh",
                    morePages: "More pages"
                }
            },

            setDataSource: function(dataSource) {
                var that = this;

                that.dataSource.unbind(CHANGE, that._refreshHandler);
                that.dataSource = that.options.dataSource = dataSource;
                dataSource.bind(CHANGE, that._refreshHandler);

                if (that.options.autoBind) {
                    dataSource.fetch();
                }
            },

            _aria: function() {
                this.element.attr({
                    "role": "application",
                    "aria-roledescription": "pager",
                    "aria-keyshortcuts": "Enter ArrowRight ArrowLeft"
                });
            },

            _adaptiveStep: function(step, hide, availableWidth) {
                var that = this;
                switch (step) {
                    case 0:
                        return that._toggleButtons(hide, availableWidth);
                    case 1:
                        return that._toggleRefresh(hide, availableWidth);
                    case 2:
                        return that._togglePagerInfo(hide, availableWidth);
                    case 3:
                        return that._toggleInputSizesLabel(hide, availableWidth);
                    case 4:
                        return that._togglePageSizesLabel(hide, availableWidth);
                    case 5:
                        return that._togglePageSizesDropDown(hide, availableWidth);
                    case 6:
                        return that._togglePageInputs(hide, availableWidth);
                    default:
                     break;
                  }
            },

            _calculateNeededWidth: function() {
                var sumWidth = 0;
                var gap = parseInt(this.element.css("gap"));
                this.element.children().each(function() {
                    var element = $(this);
                    var pagerInfo = element.hasClass("k-pager-info");
                    if (pagerInfo) {
                        element.removeClass("k-pager-info k-label");
                    }
                    sumWidth += element.is(":visible") ? element.width() : 0;
                    sumWidth += gap;
                    if (pagerInfo) {
                        element.addClass("k-pager-info k-label");
                    }
                });
                return sumWidth;
            },

            _resize: function(size) {
                var that = this;
                if (!that.element.is(":visible") || !that._lastWidth || !that.options.responsive) {
                    return;
                }

                if (that._lastWidth < size.width) {
                    for (var i = 6; i >= 0; i--) {
                        var availableWidth = that._calculateNeededWidth();
                        if (size.width < availableWidth) {
                            break;
                        }
                        var shouldBreak = that._adaptiveStep(i, false, size.width - availableWidth);
                        if (shouldBreak) {
                            break;
                        }
                    }
                } else if (that._lastWidth > size.width) {
                    for (var i$1 = 0; i$1 < 7; i$1++) {
                        if (size.width > that._calculateNeededWidth()) {
                            break;
                        }
                        that._adaptiveStep(i$1, true);
                    }
                }
                that._lastWidth = size.width;
            },

            _toggleButtons: function(hide, availableWidth) {
                if (!this._numericWrap || !this.list || !this._numericSelect) {
                    return;
                }

                if (hide) {
                    this._numericSelect.show();
                    this.list.hide();
                } else if (availableWidth && ((this.list.width() - this._numericSelect.width()) < availableWidth)) {
                    this._numericSelect.hide();
                    this.list.show();
                }
            },

            _toggleRefresh: function(hide, availableWidth) {
                if (!this.options.refresh) {
                    return;
                }
                var refreshContainer = this.element.find(".k-pager-refresh");

                if (hide) {
                    refreshContainer.hide();
                } else if (availableWidth && (refreshContainer.width() < availableWidth)) {
                    refreshContainer.show();
                } else {
                    return true;
                }
            },

            _togglePagerInfo: function(hide, availableWidth) {
                if (!this.options.info) {
                    return;
                }
                var infoBox = this.element.find(".k-pager-info");
                if (hide) {
                    infoBox.hide();
                } else if (availableWidth && (infoBox.width() < availableWidth)) {
                    infoBox.show();
                } else if (!infoBox.is(":visible")) {
                    return true;
                }
            },

            _toggleInputSizesLabel: function(hide, availableWidth) {
                if (!this.options.input) {
                    return;
                }
                var inputElements = this.element.find(".k-pager-input").children();
                var labels = inputElements.eq(0).add(inputElements.eq(2));

                if (hide) {
                    labels.hide();
                } else if (availableWidth && ((inputElements.eq(0).width() + inputElements.eq(2).width()) < availableWidth)) {
                    labels.show();
                } else {
                    return true;
                }
            },


            _togglePageSizesLabel: function(hide, availableWidth) {
                if (!this.options.pageSizes) {
                    return;
                }
                var label = this.element.find(".k-pager-sizes").children().eq(1);

                if (hide) {
                    label.hide();
                } else if (availableWidth && (label.width() < availableWidth)) {
                    label.show();
                } else {
                    return true;
                }
            },

            _togglePageSizesDropDown: function(hide, availableWidth) {
                if (!this.options.pageSizes) {
                    return;
                }

                var picker = this.element.find(".k-pager-sizes .k-picker");

                if (hide) {
                    picker.hide();
                } else if (availableWidth && (picker.width() < availableWidth)) {
                    picker.show();
                } else {
                    return true;
                }
            },


            _togglePageInputs: function(hide, availableWidth) {
                var options = this.options;

                if (!options.input || !this._numericSelect) {
                    return;
                }

                if (hide) {
                    this._numericSelect.hide();
                } else if (availableWidth && (this._numericSelect.width() < availableWidth) && !this.list.is(":visible")) {
                    this._numericSelect.show();
                } else {
                    return true;
                }
            },

            _createDataSource: function(options) {
                this.dataSource = kendo.data.DataSource.create(options.dataSource);
            },

            refresh: function(e) {
                var that = this,
                    idx,
                    end,
                    start = 1,
                    reminder,
                    page = that.page(),
                    html = "",
                    selectHtml = "",
                    options = that.options,
                    pageSize = that.pageSize(),
                    collapsedTotal = that._collapsedTotal(),
                    total = that.dataSource._isGroupPaged() ? that.dataSource.groupsTotal(true) : that.dataSource.total(),
                    totalPages = that.totalPages(),
                    linkTemplate = that.linkTemplate,
                    navigatable = options.navigatable,
                    numericSelectItemTemplate = that.numericSelectItemTemplate,
                    buttonSize = options.size ? kendo.getValidCssClass("k-button-", "size", options.size) : "",
                    buttonCount = options.buttonCount;

                if (e && e.action == "itemchange") {
                    return;
                }

                if (options.numeric) {

                    if (page > buttonCount) {
                        reminder = (page % buttonCount);
                        start = (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
                    }

                    end = Math.min((start + buttonCount) - 1, totalPages);

                    if (start > 1) {
                        html += button({
                            template: linkTemplate,
                            navigatable: navigatable,
                            size: buttonSize,
                            idx: start - 1,
                            text: "...",
                            numeric: false,
                            title: options.messages.morePages
                        });
                        selectHtml += selectOption(numericSelectItemTemplate, start - 1, options.messages.morePages);
                    }

                    for (idx = start; idx <= end; idx++) {
                        html += button({
                            template: idx == page ? that.selectTemplate : linkTemplate,
                            navigatable: navigatable,
                            idx: idx,
                            text: idx,
                            size: buttonSize,
                            numeric: true,
                            title: kendo.format(options.messages.pageButtonLabel, idx)
                        });
                        selectHtml += selectOption(numericSelectItemTemplate, idx, idx, idx == page);
                    }

                    if (end < totalPages) {
                        html += button({
                            template: linkTemplate,
                            navigatable: navigatable,
                            idx: idx,
                            size: buttonSize,
                            text: "...",
                            numeric: numericSelectItemTemplate,
                            title: options.messages.morePages
                        });
                        selectHtml += selectOption(numericSelectItemTemplate, idx, options.messages.morePages);
                    }

                    if (html === "") {
                        html = that.selectTemplate({ text: 0, size: buttonSize, tabindex: navigatable ? 0 : -1, navigatable: navigatable, title: kendo.format(options.messages.pageButtonLabel, 0) });
                        selectHtml = $("<option value='0' />");
                    }

                    that.list.html(html);
                    that._numericSelect.html(selectHtml);
                }

                if (options.info) {
                    if (total > 0) {
                        html = kendo.format(options.messages.display,
                            that.dataSource.options.endless ? 1 : Math.min((page - 1) * (that.dataSource.pageSize() || 0) + 1, collapsedTotal), // first item in the page
                            Math.min(page * pageSize, collapsedTotal), // last item in the page
                        total);
                    } else {
                        html = options.messages.empty;
                    }

                    that.element.find(".k-pager-info").html(html);
                }

                if (options.input) {
                    that.element
                        .find(".k-pager-input")
                        .html('<span>' + encode(that.options.messages.page) + '</span>' +
                            '<span class="k-textbox k-input k-input-md k-rounded-md k-input-solid"><input class="k-input-inner" aria-label="' + that.options.messages.page + " " + page + '"></span>' +
                            '<span>' + encode(kendo.format(options.messages.of, totalPages)) + '</span>')
                        .find("input")
                        .val(page)
                        .attr(DISABLED, total < 1)
                        .attr("aria-disabled", total < 1)
                        .toggleClass("k-disabled", total < 1);
                }

                if (options.previousNext) {
                    first(that.element, page, totalPages);

                    prev(that.element, page, totalPages);

                    next(that.element, page, totalPages);

                    last(that.element, page, totalPages);
                }

                if (options.pageSizes) {
                    var hasAll = that.element.find(".k-pager-sizes option[value='all']").length > 0;
                    var selectAll = hasAll && (pageSize === this.dataSource.total() || pageSize == MAX_VALUE);
                    var text = pageSize;
                    if (selectAll) {
                        pageSize = "all";
                        text = options.messages.allPages;
                    }

                    that.element
                        .find(".k-pager-sizes select")
                        .val(pageSize)
                        .filter("[" + kendo.attr("role") + "=dropdownlist]")
                        .kendoDropDownList("value", pageSize)
                        .kendoDropDownList("text", text); // handles custom values
                }

                that._restoreFocus(start, end, totalPages);
                that._excludeChildrenFromTab();
                that._updateAria();

                if (totalPages) {
                    that._lastWidth = kendo._outerWidth(that.element) + 12;
                    that.resize(true);
                } else if (that._lastWidth) {
                  that._lastWidth = kendo._outerWidth(that.element);
                }
            },

            _excludeChildrenFromTab: function() {
                var activeElement = kendo._activeElement();
                if (this.options.navigatable && (activeElement === this.element[0] || !$.contains(this.element[0], activeElement))) {
                    this.element.find(FOCUSABLE).attr("tabindex", -1);
                }
            },

            _restoreFocus: function(start, end, totalPages) {
                var that = this;

                if (!that.options.navigatable) {
                    return;
                }

                if (that._focusSelected) {
                    that.element.find(".k-selected").trigger("focus");
                    that._focusSelected = null;
                }

                if (that._focusMore !== null) {
                    if (end < totalPages && that._focusMore) {
                        that.list.find("li").last().find("a").trigger("focus");
                    }
                    if (!that._focusMore && start > 1) {
                        that.list.find("li").first().find("a").trigger("focus");
                    }
                    that._focusMore = null;
                }
            },

            _restoreTabIndexes: function() {
                this.element
                    .find("[tabindex='-1']:not(.k-disabled)")
                    .attr("tabindex", 0);
            },

            _collapsedTotal: function() {
                return this.dataSource.total();
            },

            _keydown: function(e) {
                if (e.keyCode === kendo.keys.ENTER) {
                    var input = this.element.find(".k-pager-input").find("input"),
                        page = parseInt(input.val(), 10);

                    if (isNaN(page) || page < 1 || page > this.totalPages()) {
                        page = this.page();
                    }

                    input.val(page);

                    this.page(page);
                }
            },

            _refreshClick: function(e) {
                e.preventDefault();

                this.dataSource.read();
            },

            _change: function(e) {
                var value = e.currentTarget.value;
                var pageSize = parseInt(value, 10);
                var dataSource = this.dataSource;

                if (!isNaN(pageSize)) {
                    dataSource.pageSize(pageSize);
                } else if ((value + "").toLowerCase() == "all") {
                    dataSource._pageSize = undefined$1;
                    dataSource._take = undefined$1;
                    dataSource._skip = 0;
                    dataSource.fetch();
                }
            },

            _template: function() {
                this._ariaTemplate = template(this.options.ARIATemplate).bind(this);
            },

            _updateAria: function() {
                if (!this.options.navigatable) {
                    return;
                }
                this.element.attr("aria-label", this._ariaTemplate({ page: this.page(), totalPages: this.totalPages() }));
            },

            _navigatable: function() {
                var that = this;
                var options = that.options;

                if (!options.navigatable) {
                    return;
                }

                that._aria();
                that.element.attr("id", that._id);
                that._template();
                that._updateAria();

                that._tabindex(that.element);

                that.element.on("keydown" + NS, that, that._keyDown.bind(that));
                that.element.on("focusout" + NS, function() { that.element.removeClass("k-focus"); });
                that.element.on("focusin" + NS, function(e) {
                    that.element.addClass("k-focus");

                    if (e.target === that.element[0]) {
                        that.element.find(FOCUSABLE).attr("tabindex", -1);
                    } else {
                        that.element.removeClass("k-focus");
                    }
                });
            },

            _keyDown: function(e) {
                var that = this;
                var target = $(e.target);
                var allFocusable;
                var handled = false;
                var focusedIndex;

                if (target[0] === that.element[0] && e.keyCode == keys.ENTER) {
                    that._restoreTabIndexes();
                    that.element.find(FOCUSABLE).first().trigger("focus");
                    handled = true;
                }

                if (target[0] !== that.element[0] && e.keyCode == keys.ESC) {
                    that.element.trigger("focus");
                    handled = true;
                }

                if (target[0] === that.element[0] && e.keyCode == keys.HOME) {
                    that.page(1);
                    handled = true;
                }

                if (target[0] === that.element[0] && e.keyCode == keys.END) {
                    that.page(that.totalPages());
                    handled = true;
                }

                if (target[0] === that.element[0] && (e.keyCode == (isRtl ? keys.LEFT : keys.RIGHT) || e.keyCode == keys.PAGEDOWN)) {
                    that.page(that.page() + 1);
                    handled = true;
                }

                if (target[0] === that.element[0] && (e.keyCode == (isRtl ? keys.RIGHT : keys.LEFT) || e.keyCode == keys.PAGEUP)) {
                    that.page((that.page() - 1) || 1);
                    handled = true;
                }

                if (target[0] !== that.element[0] && e.keyCode == keys.TAB) {
                    allFocusable = that.element.find(FOCUSABLE);
                    focusedIndex = allFocusable.index(target);

                    if (e.shiftKey) {
                        if (focusedIndex - 1 < 0) {
                            allFocusable.last().trigger("focus");
                        } else {
                            allFocusable.eq(focusedIndex - 1).trigger("focus");
                        }
                    } else {
                        if (focusedIndex + 1 < allFocusable.length) {
                            allFocusable.eq(focusedIndex + 1 ).trigger("focus");
                        } else {
                            allFocusable.first().trigger("focus");
                        }
                    }

                    handled = true;
                }

                if (handled) {
                    e.preventDefault();
                    e.stopPropagation();
                }
            },

            _numericSelectChange: function(e) {
                var target = e.currentTarget;
                var value = target.value;
                var page = parseInt(value, 10);

                target.blur();

                this.page(page);
            },

            _click: function(e) {
                var target = $(e.currentTarget);

                e.preventDefault();

                if (this.options.navigatable) {
                    if (target.attr("title") == this.options.messages.morePages) {
                        this._focusMore = target.parent().index();
                    } else if (!target.hasClass("k-pager-refresh") && !target.hasClass("k-pager-nav")) {
                        this._focusSelected = true;
                    }
                }

                if (!target.is(".k-disabled")) {
                    this.page(parseInt(target.attr(kendo.attr("page")), 10));
                }
            },

            totalPages: function() {
                return Math.ceil((this.dataSource.total() || 0) / (this.pageSize() || 1));
            },

            pageSize: function() {
                return this.dataSource.pageSize() || this.dataSource.total();
            },

            page: function(page) {
                if (page) {
                    if (this.trigger("pageChange", { index: page })) {
                       return;
                    }

                    this.dataSource.page(page);

                    this.trigger(CHANGE, { index: page });
                } else {
                    if (this.dataSource.total() > 0) {
                        return this.dataSource.page();
                    } else {
                        return 0;
                    }
                }
            },
        });

        ui.plugin(Pager);
    })(window.kendo.jQuery);
    var kendo$z = kendo;

    var __meta__$E = {
        id: "popup",
        name: "Pop-up",
        category: "framework",
        depends: [ "core" ],
        advanced: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            Class = kendo.Class,
            support = kendo.support,
            getOffset = kendo.getOffset,
            outerWidth = kendo._outerWidth,
            outerHeight = kendo._outerHeight,
            OPEN = "open",
            CLOSE = "close",
            DEACTIVATE = "deactivate",
            ACTIVATE = "activate",
            CENTER = "center",
            LEFT = "left",
            RIGHT = "right",
            TOP = "top",
            BOTTOM = "bottom",
            ABSOLUTE = "absolute",
            HIDDEN = "hidden",
            BODY = "body",
            LOCATION = "location",
            POSITION = "position",
            VISIBLE = "visible",
            EFFECTS = "effects",
            ACTIVE = "k-active",
            ACTIVEBORDER = "k-state-border",
            ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
            ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
            MOUSEDOWN = "down",
            DOCUMENT_ELEMENT = $(document.documentElement),
            WINDOW = $(window),
            SCROLL = "scroll",
            cssPrefix = support.transitions.css,
            TRANSFORM = cssPrefix + "transform",
            extend = $.extend,
            NS = ".kendoPopup",
            styles = ["font-size",
                      "font-family",
                      "font-stretch",
                      "font-style",
                      "font-weight",
                      "line-height"];

        function contains(container, target) {
            if (!container || !target) {
                return false;
            }
            return container === target || $.contains(container, target);
        }

        var Popup = Widget.extend({
            init: function(element, options) {
                var that = this, parentPopup;

                options = options || {};

                if (options.isRtl) {
                    options.origin = options.origin || BOTTOM + " " + RIGHT;
                    options.position = options.position || TOP + " " + RIGHT;
                }

                Widget.fn.init.call(that, element, options);

                element = that.element;
                options = that.options;

                that.collisions = options.collision ? options.collision.split(" ") : [];
                that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());

                if (that.collisions.length === 1) {
                    that.collisions.push(that.collisions[0]);
                }

                parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.

                options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || document.body);

                that.element.hide()
                    .addClass("k-popup")
                    .toggleClass("k-rtl", !!options.isRtl)
                    .appendTo(options.appendTo)
                    .attr("aria-hidden", true)
                    .on("mouseenter" + NS, function() {
                        that._hovered = true;
                    })
                    .on("wheel" + NS, function(e) {
                        var list = $(e.target).find(".k-list");
                        var scrollArea = list.parent();
                        if (list.length && list.is(":visible") && ((scrollArea.scrollTop() === 0 && e.originalEvent.deltaY < 0) ||
                            (scrollArea.scrollTop() === scrollArea.prop('scrollHeight') - scrollArea.prop('offsetHeight') && e.originalEvent.deltaY > 0))) {
                               e.preventDefault();
                        }
                    })
                    .on("mouseleave" + NS, function() {
                        that._hovered = false;
                    });

                that.wrapper = $();

                if (options.animation === false) {
                    options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
                }

                extend(options.animation.open, {
                    complete: function() {
                        that.wrapper.addClass("k-animation-container-shown"); // Forcing refresh causes flickering in mobile.
                        that.wrapper.css("overflow","");
                        that._activated = true;
                        that._trigger(ACTIVATE);
                    }
                });

                extend(options.animation.close, {
                    complete: function() {
                        that._animationClose();
                    }
                });

                that._mousedownProxy = function(e) {
                    that._mousedown(e);
                };

                if (support.mobileOS.android) {
                    that._resizeProxy = function(e) {
                        setTimeout(function() {
                            that._resize(e);
                        }, 600); //Logic from kendo.onResize
                    };
                } else {
                    that._resizeProxy = function(e) {
                        that._resize(e);
                    };
                }

                if (options.toggleTarget) {
                    $(options.toggleTarget).on(options.toggleEvent + NS, that.toggle.bind(that));
                }
            },

            events: [
                OPEN,
                ACTIVATE,
                CLOSE,
                DEACTIVATE
            ],

            options: {
                name: "Popup",
                toggleEvent: "click",
                origin: BOTTOM + " " + LEFT,
                position: TOP + " " + LEFT,
                anchor: BODY,
                appendTo: null,
                collision: "flip fit",
                viewport: window,
                copyAnchorStyles: true,
                autosize: false,
                modal: false,
                adjustSize: {
                    width: 0,
                    height: 0
                },
                animation: {
                    open: {
                        effects: "slideIn:down",
                        transition: true,
                        duration: 200
                    },
                    close: { // if close animation effects are defined, they will be used instead of open.reverse
                        duration: 100,
                        hide: true
                    }
                },
                omitOriginOffsets: false
            },

            _animationClose: function() {
                var that = this;
                var location = that.wrapper.data(LOCATION);

                that.wrapper.hide();

                if (location) {
                    that.wrapper.css(location);
                }

                if (that.options.anchor != BODY) {
                    that._hideDirClass();
                }

                that._closing = false;
                that._trigger(DEACTIVATE);
            },

            destroy: function() {
                var that = this,
                    options = that.options,
                    element = that.element.off(NS),
                    parent;

                Widget.fn.destroy.call(that);

                if (options.toggleTarget) {
                    $(options.toggleTarget).off(NS);
                }

                if (!options.modal) {
                    DOCUMENT_ELEMENT.off(that.downEvent, that._mousedownProxy);
                    that._toggleResize(false);
                }

                kendo.destroy(that.element.children());
                element.removeData();

                if (options.appendTo[0] === document.body) {
                    parent = element.closest(".k-animation-container");

                    if (parent[0]) {
                        parent.remove();
                    } else {
                        element.remove();
                    }
                }
            },

            open: function(x, y) {
                var that = this,
                    fixed = { isFixed: !isNaN(parseInt(y,10)), x: x, y: y },
                    shouldCorrectWidth = that._shouldCorrectWidth,
                    element = that.element,
                    options = that.options,
                    animation, wrapper,
                    anchor = $(options.anchor),
                    mobile = element[0] && element.hasClass("km-widget"),
                    listbox = element.find("[role='listbox']"),
                    parent;

                if (!that.visible()) {
                    if (options.copyAnchorStyles) {
                        if (mobile && styles[0] == "font-size") {
                            styles.shift();
                        }
                        element.css(kendo.getComputedStyles(anchor[0], styles));
                    }

                    if (that.element.parent().data("animating") || that._trigger(OPEN)) {
                        return;
                    }

                    that._activated = false;

                    if (!options.modal) {
                        DOCUMENT_ELEMENT.off(that.downEvent, that._mousedownProxy)
                                    .on(that.downEvent, that._mousedownProxy);

                        // this binding hangs iOS in editor
                        // all elements in IE7/8 fire resize event, causing mayhem
                        that._toggleResize(false);
                        that._toggleResize(true);
                    }

                    that.wrapper = wrapper = kendo.wrap(element, options.autosize, options._resizeOnWrap, shouldCorrectWidth)
                        .css({
                            overflow: HIDDEN,
                            display: "block",
                            position: ABSOLUTE
                        })
                        .attr("aria-hidden", false);

                    parent = element.parent();

                    if (listbox.attr("aria-label")) {
                        wrapper.attr("aria-label", listbox.attr("aria-label"));
                    } else if (listbox.attr("aria-labelledby")) {
                        wrapper.attr("aria-labelledby", listbox.attr("aria-labelledby"));
                    }

                    if (support.mobileOS.android) {
                        parent.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
                    }

                    wrapper.css(POSITION);

                    if ($(options.appendTo)[0] == document.body) {
                        wrapper.css(TOP, "-10000px");
                    }

                    that.flipped = that._position(fixed);
                    animation = that._openAnimation();

                    if (options.anchor != BODY && !that.element.hasClass("k-tooltip")) {
                        that._showDirClass(animation);
                    }

                    parent.hide();
                    element.show();
                    that.wrapper.show();

                    parent.data(EFFECTS, animation.effects)
                           .kendoStop(true)
                           .kendoAnimate(animation);


                    element.attr("aria-hidden", false);
                }
            },

            _location: function(isFixed) {
                var that = this,
                    element = that.element,
                    options = that.options,
                    wrapper,
                    anchor = $(options.anchor),
                    mobile = element[0] && element.hasClass("km-widget");

                if (options.copyAnchorStyles) {
                    if (mobile && styles[0] == "font-size") {
                        styles.shift();
                    }
                    element.css(kendo.getComputedStyles(anchor[0], styles));
                }

                that.wrapper = wrapper = kendo.wrap(element, options.autosize)
                                        .css({
                                            overflow: HIDDEN,
                                            display: "block",
                                            position: ABSOLUTE
                                        });

                if (support.mobileOS.android) {
                    wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
                }

                wrapper.css(POSITION);

                if ($(options.appendTo)[0] == document.body) {
                    wrapper.css(TOP, "-10000px");
                }

                that._position(isFixed || {});

                var offset = wrapper.offset();
                return {
                    width: kendo._outerWidth(wrapper),
                    height: kendo._outerHeight(wrapper),
                    left: offset.left,
                    top: offset.top
                };
            },

            _openAnimation: function() {
                var animation = extend(true, {}, this.options.animation.open);
                animation.effects = kendo.parseEffects(animation.effects, this.flipped);

                return animation;
            },

            _hideDirClass: function() {
                var anchor = $(this.options.anchor);
                var direction = ((anchor.attr("class") || "").match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
                var dirClass = ACTIVEBORDER + "-" + direction;

                anchor
                    .removeClass(dirClass)
                    .children(ACTIVECHILDREN)
                    .removeClass(ACTIVE)
                    .removeClass(dirClass);

                this.element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
            },

            _showDirClass: function(animation) {
                var direction = animation.effects.slideIn ? animation.effects.slideIn.direction : "down";
                var dirClass = ACTIVEBORDER + "-" + direction;

                $(this.options.anchor)
                    .addClass(dirClass)
                    .children(ACTIVECHILDREN)
                    .addClass(ACTIVE)
                    .addClass(dirClass);
            },

            position: function() {
                if (this.visible()) {
                    this.flipped = this._position();
                    //this._hideDirClass();
                    //this._showDirClass(this._openAnimation());
                }
            },

            toggle: function() {
                var that = this;

                that[that.visible() ? CLOSE : OPEN]();
            },

            visible: function() {
                return this.wrapper.is(":" + VISIBLE) && this.element.is(":" + VISIBLE);
            },

            close: function(skipEffects) {
                var that = this,
                    parent = that.element.parent(),
                    options = that.options, wrap,
                    animation, openEffects, closeEffects;

                if (that.visible()) {
                    wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());

                    that.wrapper.removeClass("k-animation-container-shown");
                    that._toggleResize(false);

                    if (that._closing || that._trigger(CLOSE)) {
                        that._toggleResize(true);
                        return;
                    }

                    // Close all inclusive popups.
                    that.element.find(".k-popup").each(function() {
                        var that = $(this),
                            popup = that.data("kendoPopup");

                        if (popup) {
                            popup.close(skipEffects);
                        }
                    });

                    DOCUMENT_ELEMENT.off(that.downEvent, that._mousedownProxy);

                    if (skipEffects) {
                        animation = { hide: true, effects: {} };
                    } else {
                        animation = extend(true, {}, options.animation.close);
                        openEffects = parent.data(EFFECTS);
                        closeEffects = animation.effects;

                        if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
                            animation.effects = openEffects;
                            animation.reverse = true;
                        }

                        that._closing = true;
                    }

                    parent.kendoStop(true);
                    that.element.attr("aria-hidden", true);
                    wrap
                        .css({ overflow: HIDDEN }) // stop callback will remove hidden overflow
                        .attr("aria-hidden", true);
                    parent.kendoAnimate(animation);

                    if (skipEffects) {
                        that._animationClose();
                    }
                }
            },

            _trigger: function(ev) {
                return this.trigger(ev, { type: ev });
            },

            _resize: function(e) {
                var that = this;

                if (support.resize.indexOf(e.type) !== -1) {
                    clearTimeout(that._resizeTimeout);
                    that._resizeTimeout = setTimeout(function() {
                        that._position();
                        that._resizeTimeout = null;
                    }, 50);
                } else {
                    if (!that._hovered || (that._activated && that.element.find(".k-list").length > 0)) {
                        that.close();
                    }
                }
            },

            _toggleResize: function(toggle) {
                var method = toggle ? "on" : "off";
                var eventNames = support.resize;

                if (!(support.mobileOS.ios || support.mobileOS.android || support.browser.safari)) {
                    eventNames += " " + SCROLL;
                }

                if (toggle && !this.scrollableParents) {
                    this.scrollableParents = this._scrollableParents();
                }

                if (this.scrollableParents && this.scrollableParents.length) {
                    this.scrollableParents[method](SCROLL, this._resizeProxy);
                }

                WINDOW[method](eventNames, this._resizeProxy);
            },

            _mousedown: function(e) {
                var that = this,
                    container = that.element[0],
                    options = that.options,
                    anchor = $(options.anchor)[0],
                    toggleTarget = options.toggleTarget,
                    target = kendo.eventTarget(e),
                    popup = $(target).closest(".k-popup"),
                    mobile = popup.parent().parent(".km-shim").length;

                popup = popup[0];
                if (!mobile && popup && popup !== that.element[0]) {
                    return;
                }

                // This MAY result in popup not closing in certain cases.
                if ($(e.target).closest("a").data("rel") === "popover") {
                    return;
                }

                if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
                    that.close();
                }
            },

            _fit: function(position, size, viewPortSize) {
                var output = 0;

                if (position + size > viewPortSize) {
                    output = viewPortSize - (position + size);
                }

                if (position < 0) {
                    output = -position;
                }

                return output;
            },

            _flip: function(offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
                var output = 0;
                    boxSize = boxSize || size;

                if (position !== origin && position !== CENTER && origin !== CENTER) {
                    if (offset + boxSize > viewPortSize) {
                        output += -(anchorSize + size);
                    }

                    if (offset + output < 0) {
                        output += anchorSize + size;
                    }
                }
                return output;
            },

            _scrollableParents: function() {
                return $(this.options.anchor)
                           .parentsUntil("body")
                           .filter(function(index, element) {
                               return kendo.isScrollable(element);
                           });
            },

            _position: function(fixed) {
                var that = this,
                    //element = that.element.css(POSITION, ""), /* fixes telerik/kendo-ui-core#790, comes from telerik/kendo#615 */
                    element = that.element,
                    wrapper = that.wrapper,
                    options = that.options,
                    viewport = $(options.viewport),
                    zoomLevel = support.zoomLevel(),
                    isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
                    anchor = $(options.anchor),
                    origins = options.origin.toLowerCase().split(" "),
                    positions = options.position.toLowerCase().split(" "),
                    collisions = that.collisions,
                    siblingContainer, parents,
                    parentZIndex, zIndex = 10002,
                    idx = 0,
                    docEl = document.documentElement,
                    length, viewportOffset, viewportWidth, viewportHeight;

                if (options.viewport === window) {
                    viewportOffset = {
                        top: (window.pageYOffset || document.documentElement.scrollTop || 0),
                        left: (window.pageXOffset || document.documentElement.scrollLeft || 0)
                    };
                } else {
                    viewportOffset = viewport.offset();
                }

                if (isWindow) {
                    viewportWidth = window.innerWidth;
                    viewportHeight = window.innerHeight;
                } else {
                    viewportWidth = viewport.width();
                    viewportHeight = viewport.height();
                }

                if (isWindow && docEl.scrollHeight - docEl.clientHeight > 0) {
                     var sign = options.isRtl ? -1 : 1;

                     viewportWidth -= sign * kendo.support.scrollbar();
                }

                siblingContainer = anchor.parents().filter(wrapper.siblings());

                if (siblingContainer[0]) {
                    parentZIndex = Math.max(Number(siblingContainer.css("zIndex")), 0);

                    // set z-index to be more than that of the container/sibling
                    // compensate with more units for window z-stack
                    if (parentZIndex) {
                        zIndex = parentZIndex + 10;
                    } else {
                        parents = anchor.parentsUntil(siblingContainer);
                        for (length = parents.length; idx < length; idx++) {
                            parentZIndex = Number($(parents[idx]).css("zIndex"));
                            if (parentZIndex && zIndex < parentZIndex) {
                                zIndex = parentZIndex + 10;
                            }
                        }
                    }
                }

                wrapper.css("zIndex", zIndex);

                if (fixed && fixed.isFixed) {
                    wrapper.css({ left: fixed.x, top: fixed.y });
                } else {
                    wrapper.css(that._align(origins, positions));
                }

                var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
                    offset = getOffset(wrapper),
                    anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions

                if (anchorParent.length) {
                    pos = getOffset(wrapper, POSITION, true);
                    offset = getOffset(wrapper);
                }

                offset.top -= viewportOffset.top;
                offset.left -= viewportOffset.left;

                if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
                    wrapper.data(LOCATION, extend({}, pos));
                }

                var offsets = extend({}, offset),
                    location = extend({}, pos),
                    adjustSize = options.adjustSize;

                if (collisions[0] === "fit") {
                    location.top += that._fit(offsets.top, outerHeight(wrapper) + adjustSize.height, viewportHeight / zoomLevel);
                }

                if (collisions[1] === "fit") {
                    location.left += that._fit(offsets.left, outerWidth(wrapper) + adjustSize.width, viewportWidth / zoomLevel);
                }

                var flipPos = extend({}, location);
                var elementHeight = outerHeight(element);
                var wrapperHeight = outerHeight(wrapper);

                if (!wrapper.height() && elementHeight) {
                    wrapperHeight = wrapperHeight + elementHeight;
                }

                if (collisions[0] === "flip") {
                    location.top += that._flip(offsets.top, elementHeight, outerHeight(anchor), viewportHeight / zoomLevel, origins[0], positions[0], wrapperHeight);
                }

                if (collisions[1] === "flip") {
                    location.left += that._flip(offsets.left, outerWidth(element), outerWidth(anchor), viewportWidth / zoomLevel, origins[1], positions[1], outerWidth(wrapper));
                }

                wrapper.css(location);

                return (location.left != flipPos.left || location.top != flipPos.top);
            },

            _align: function(origin, position) {
                var that = this,
                    element = that.wrapper,
                    anchor = $(that.options.anchor),
                    verticalOrigin = origin[0],
                    horizontalOrigin = origin[1],
                    verticalPosition = position[0],
                    horizontalPosition = position[1],
                    anchorOffset = getOffset(anchor),
                    appendTo = $(that.options.appendTo),
                    appendToOffset,
                    width = outerWidth(element),
                    height = outerHeight(element) || outerHeight(element.find(".k-child-animation-container").children().first()),
                    anchorWidth = outerWidth(anchor),
                    anchorHeight = outerHeight(anchor),
                    top = that.options.omitOriginOffsets ? 0 : anchorOffset.top,
                    left = that.options.omitOriginOffsets ? 0 : anchorOffset.left,
                    round = Math.round;

                if (appendTo[0] != document.body) {
                    appendToOffset = getOffset(appendTo);
                    top -= appendToOffset.top;
                    left -= appendToOffset.left;
                }


                if (verticalOrigin === BOTTOM) {
                    top += anchorHeight;
                }

                if (verticalOrigin === CENTER) {
                    top += round(anchorHeight / 2);
                }

                if (verticalPosition === BOTTOM) {
                    top -= height;
                }

                if (verticalPosition === CENTER) {
                    top -= round(height / 2);
                }

                if (horizontalOrigin === RIGHT) {
                    left += anchorWidth;
                }

                if (horizontalOrigin === CENTER) {
                    left += round(anchorWidth / 2);
                }

                if (horizontalPosition === RIGHT) {
                    left -= width;
                }

                if (horizontalPosition === CENTER) {
                    left -= round(width / 2);
                }

                return {
                    top: top,
                    left: left
                };
            }
        });

        ui.plugin(Popup);

        var stableSort = kendo.support.stableSort;
        var tabKeyTrapNS = "kendoTabKeyTrap";
        var focusableNodesSelector = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], *[contenteditable]";
        var TabKeyTrap = Class.extend({
            init: function(element, options) {
                this.element = $(element);
                this.element.autoApplyNS(tabKeyTrapNS);
            },

            trap: function() {
                this.element.on("keydown", this._keepInTrap.bind(this));
            },

            removeTrap: function() {
                this.element.kendoDestroy(tabKeyTrapNS);
            },

            destroy: function() {
                this.element.kendoDestroy(tabKeyTrapNS);
                this.element = undefined$1;
            },

            shouldTrap: function() {
                return true;
            },

            _keepInTrap: function(e) {
                if (e.which !== 9 || !this.shouldTrap() || e.isDefaultPrevented()) {
                    return;
                }

                var elements = this._focusableElements();
                var sortedElements = this._sortFocusableElements(elements);
                var next = this._nextFocusable(e, sortedElements);

                if (next) {
                    this._focus(next);
                }

                e.preventDefault();
            },
            _focusableElements: function() {
                var elements = this.element.find(focusableNodesSelector).filter(function(i, item) {
                    return item.tabIndex >= 0 && $(item).is(':visible') && !$(item).is('[disabled]');
                });

                if (this.element.is("[tabindex]")) {
                    elements.push(this.element[0]);
                }

                return elements;
            },
            _sortFocusableElements: function(elements) {
                var sortedElements;

                if (stableSort) {
                    sortedElements = elements.sort(function(prev, next) {
                        return prev.tabIndex - next.tabIndex;
                    });
                } else {
                    var attrName = "__k_index";
                    elements.each(function(i, item) {
                        item.setAttribute(attrName, i);
                    });

                    sortedElements = elements.sort(function(prev, next) {
                        return prev.tabIndex === next.tabIndex ?
                            parseInt(prev.getAttribute(attrName), 10) - parseInt(next.getAttribute(attrName), 10) :
                            prev.tabIndex - next.tabIndex;
                    });

                    elements.removeAttr(attrName);
                }

                return sortedElements;
            },
            _nextFocusable: function(e, elements) {
                var count = elements.length;
                var current = elements.index(e.target);

                return elements.get((current + (e.shiftKey ? -1 : 1)) % count);
            },
            _focus: function(element) {
                if (element.nodeName == "IFRAME") {
                    element.contentWindow.document.body.focus();
                    return;
                }

                element.focus();

                if (element.nodeName == "INPUT" && element.setSelectionRange && this._haveSelectionRange(element)) {
                    element.setSelectionRange(0, element.value.length);
                }
            },
            _haveSelectionRange: function(element) {
                var elementType = element.type.toLowerCase();

                return elementType === "text" || elementType === "search" ||
                elementType === "url" || elementType === "tel" ||
                elementType === "password";
            }
        });
        ui.Popup.TabKeyTrap = TabKeyTrap;
    })(window.kendo.jQuery);
    var kendo$y = kendo;

    var __meta__$D = {
        id: "actionsheet",
        name: "ActionSheet",
        category: "web", // suite
        description: "The ActionSheet widget displays a set of choices related to a task the user initiates.",
        depends: ["core", "popup", "icons", "html.button"] // dependencies
    };

    (function($, undefined$1) {
        var kendo = window.kendo;
        var encode = kendo.htmlEncode;
        var Widget = kendo.ui.Widget;
        var ui = kendo.ui;
        var ns = ".kendoActionSheet";
        var DOT = ".";
        var Popup = ui.Popup;
        var keys = kendo.keys;
        var isFunction = kendo.isFunction;
        var TabKeyTrap = Popup.TabKeyTrap;
        var DOCUMENT_ELEMENT = $(document.documentElement);
        var MOUSEDOWN = "down";
        var OPEN = "open";
        var CLOSE = "close";
        var ACTIVATE = "activate";
        var DEACTIVATE = "deactivate";
        var FOCUSABLE = ":kendoFocusable:not([tabindex='-1'])";
        var ACTION_SHEET_CONTAINER = "k-actionsheet-container";
        var OVERLAY = "k-overlay";
        var ACTION_SHEET = "k-actionsheet";
        var ACTION_SHEET_ADAPTIVE = "k-adaptive-actionsheet";
        var ACTION_SHEET_BOTTOM = "k-actionsheet-bottom";
        var ACTION_SHEET_FULLSCREEN = "k-actionsheet-fullscreen";
        var ACTIONABLE_BUTTON_SELECTOR = ".k-actionsheet-item:not(." + STATEDISABLED + "),.k-actions .k-button[ref-actionsheet-action-button]:not(." + STATEDISABLED + ")";
        var STATEDISABLED = "k-disabled";
        var ARIA_DISABLED = "aria-disabled";
        var DISABLED = "disabled";
        var HIDDEN = "k-hidden";
        var ACTIONSHEET_TITLE_ID = kendo.guid();
        var extend = $.extend;
        var template = kendo.template;
        var CLICK = "click";
        var KEYDOWN = "keydown";
        var hexColor = /^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/;
        var HEADER_TEMPLATE = function (options) { return "<div class=\"k-text-center k-actionsheet-titlebar\" >" +
                (options.title ?
                    '<div class="k-actionsheet-titlebar-group k-hbox">' +
                        "<div id=\"" + ACTIONSHEET_TITLE_ID + "\" class=\"k-actionsheet-title\">" +
                            "<div class=\"k-text-center\">" + (options.title) + "</div>" +
                            (options.subtitle ? ("<div class=\"k-actionsheet-subtitle k-text-center\">" + (options.subtitle || "") + "</div>") : "") +
                        '</div>' +
                        (options.closeButton ?
                        '<div class="k-actionsheet-actions">' +
                            kendo.html.renderButton(("<button " + (kendo.attr("ref-actionsheet-close-button")) + "></button>"), { icon: "x", fillMode: "flat", size: "large" }) +
                        '</div>'
                        : "") +
                    '</div>'
                : "") +
            '</div>'; };
        var ITEM_TEMPLATE = function (ref) {
                            var disabled = ref.disabled;
                            var icon = ref.icon;
                            var text = ref.text;
                            var description = ref.description;

                            return "<span role=\"button\" tabindex=\"0\" class=\"k-actionsheet-item " + (disabled ? STATEDISABLED : "") + "\">" +
                            "<span class=\"k-actionsheet-action\">" +
                                (icon ? ("<span class=\"k-icon-wrap\">" + icon + "</span>") : "") +
                                "<span class=\"k-actionsheet-item-text\">" +
                                    "<span class=\"k-actionsheet-item-title\">" + (encode(text)) + "</span>" +
                                    "" + (description ? '<span class="k-actionsheet-item-description">' + encode(description) + '</span>' : '') +
                                '</span>' +
                            '</span>' +
                        '</span>';
        };
        var SEPARATOR = '<hr class="k-hr" />';
        var defaultItem = {
            text: "",
            description: "",
            iconClass: "",
            iconSize: 0,
            iconColor: "",
            click: $.noop,
            group: "top",
            disabled: false
        };

        var defaultActionButton = {
            text: "",
            icon: "",
            iconClass: "",
            click: $.noop,
            disabled: false
        };

        function contains(container, target) {
            if (!container || !target) {
                return false;
            }
            return container === target || $.contains(container, target);
        }

        function createIcon(data) {
            var result;
            var inlineStyles = {};

            if (!data.iconClass && !data.icon) {
                return '';
            }

            result = $(kendo.html.renderIcon({ icon: data.icon, iconClass: data.iconClass + " k-actionsheet-item-icon" }));

            if (data.iconColor && hexColor.test(data.iconColor)) {
                inlineStyles.color = data.iconColor;
            } else if (data.iconColor) {
                result.addClass("k-text-" + data.iconColor);
            }

            if (data.iconSize) {
                inlineStyles.fontSize = data.iconSize;
            }

            if (Object.keys(inlineStyles).length) {
                result.css(inlineStyles);
            }

            return result;
        }

        var ActionSheet = Widget.extend({
            init: function(element, options) {
                var that = this;
                options = options || {};

                Widget.fn.init.call(that, element, options);

                if (options.appendTo) {
                    that.element.appendTo(options.appendTo);
                }

                that._hasItems = options.items && options.items.length;
                that._hasActionButtons = options.actionButtons && options.actionButtons.length;
                that._mapItems();
                that._mapActionButtons();
                that._wrapper();
                that._popup();
                that._createContent();
                that._createHeader();
                that._createFooter();
                that._applyAria();

                that._tabKeyTrap = new TabKeyTrap(that.wrapper);

                that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());
                that.clickEvent = kendo.applyEventMap(CLICK, kendo.guid());
                that._mousedownProxy = that._mousedown.bind(that);
                that._clickProxy = that._click.bind(that);
                that.wrapper.on(KEYDOWN + ns, that, that._keydown.bind(that));
            },

            events: [
                OPEN,
                CLOSE,
                ACTIVATE,
                DEACTIVATE
            ],

            options: {
                name: "ActionSheet",
                title: "",
                items: [],
                popup: null,
                fullscreen: false,
                footerTemplate: null,
                headerTemplate: null,
                contentTemplate: null,
                actionButtons: [],
                closeButton: false,
                adaptive: false,
                focusOnActivate: true
            },

            _mapItems: function() {
                var that = this;

                if (!that._hasItems) {
                    return;
                }

                that.options.items = that.options.items.map(defaultItemsMapper);
            },

            _mapActionButtons: function() {
                var that = this;

                if (!that._hasActionButtons) {
                    return;
                }

                that.options.actionButtons = that.options.actionButtons.map(defaultActionButtonsMapper);
            },

            _wrapper: function() {
                var that = this;
                var element = that.element;
                var wrapper;

                var positionClass = that.options.fullscreen == true ? ACTION_SHEET_FULLSCREEN : ACTION_SHEET_BOTTOM;

                element.addClass(ACTION_SHEET + " " + positionClass + (that.options.adaptive ? " " + ACTION_SHEET_ADAPTIVE : " k-actionsheet-jq"));
                that.wrapper = wrapper = element.wrap("<div class='" + ACTION_SHEET_CONTAINER + " " + HIDDEN + "'></div>").parent();
                wrapper.prepend($('<div></div>').addClass(OVERLAY));
            },

            _applyAria: function() {
                var that = this;
                var element = that.element;
                var actionsheetTitleId = that.wrapper.find(".k-actionsheet-title").attr("id");

                element.attr({
                    role: "dialog",
                    "aria-modal": true,
                    "aria-labelledby": that.options.title ? actionsheetTitleId : null
                });
            },

            _popup: function() {
                var that = this;
                var options = that.options;

                var popupAnimation = !options.adaptive ? false :
                    {
                        open: {
                            effects: "slideIn:up",
                            transition: true,
                            duration: 200
                        }
                    };

                options.open = null;
                options.close = null;
                options.activate = null;
                options.deactivate = null;

                that.popup = new Popup(that.element, extend(options.popup,
                    options,
                    {
                        name: "Popup",
                        isRtl: kendo.support.isRtl(options.anchor),
                        omitOriginOffsets: true,
                        appendTo: that.wrapper,
                        modal: true,
                        animation: popupAnimation,
                        position: "top center",
                        anchor: options.anchor || that.wrapper
                    }));

                if (options.focusOnActivate) {
                    that.popup.bind(ACTIVATE, that._openHandler.bind(that));
                }

                that.popup.bind(ACTIVATE, function (ev) {
                    that.trigger(ACTIVATE, ev);
                });

                that.popup.bind(DEACTIVATE, function (ev) {
                    that.wrapper.addClass(HIDDEN);
                    DOCUMENT_ELEMENT.off(that.downEvent, that._mousedownProxy);
                    DOCUMENT_ELEMENT.off(that.clickEvent, that._clickProxy);
                    that.trigger(DEACTIVATE, ev);
                });

                that.popup.bind(OPEN, function (ev) {
                    that.trigger(OPEN, ev);
                });

                that.popup.bind(CLOSE, function (ev) {
                    var closeButtonPressed = that._closeButtonPressed;
                    that._closeButtonPressed = false;
                    that.trigger(CLOSE, extend({}, ev, {
                        closeButton: closeButtonPressed
                    }));
                });
            },

            _createHeader: function() {
                var that = this;
                var options = that.options;

                if (!options.title && !options.headerTemplate) {
                    return;
                }

                that.element.prepend(template(options.headerTemplate || HEADER_TEMPLATE)(options));
            },

            _items: function() {
                var that = this;

                if (!that._hasItems) {
                    return;
                }

                var groupedItems = that.options.items.reduce(function (itemsByGroup, currentItem) {
                    var group = currentItem["group"] || "top";
                    itemsByGroup[group] = itemsByGroup[group] || [];
                    itemsByGroup[group].push(currentItem);
                    return itemsByGroup;
                }, new Map());

                var topItems = groupedItems["top"];
                var bottomItems = groupedItems["bottom"];

                that._createItems(topItems);

                if (topItems && topItems.length && bottomItems && bottomItems.length) {
                    that._content.append(SEPARATOR);
                }

                that._createItems(bottomItems);
            },

            _createContent: function() {
                var that = this;
                var options = that.options;
                that.element.wrapInner($("<div class='k-actionsheet-content'></div>"));
                var contentContainer = that._content = that.element.find(".k-actionsheet-content");

                if (that._hasItems) {
                    contentContainer.empty();
                    that._items();
                    return;
                }

                if (options.contentTemplate || options.hideOverflowContent) {
                    contentContainer.addClass("!k-overflow-hidden");
                }
                if (options.contentTemplate) {
                    contentContainer.html(template(options.contentTemplate)(options));
                }
            },

            _createItems: function(items) {
                var that = this;
                var idx;
                var item;
                var itemTemplate;
                var itemElement;
                var contentContainer = that._content;
                var itemsContainer = $("<div class='k-list-ul' role='group'></div>");
                var icon;

                if (!items || !items.length) {
                    return;
                }

                contentContainer.append(itemsContainer);
                itemTemplate = template(ITEM_TEMPLATE);

                for (idx = 0; idx < items.length; idx++) {
                    item = items[idx];
                    icon = createIcon(item);
                    itemElement = $(itemTemplate(extend({}, item, { icon: icon && icon.prop('outerHTML') })));
                    itemsContainer.append(itemElement);

                    if (item.click) {
                        itemElement.data("action", item.click);
                    }
                }
            },

            _createActionButtons: function() {
                var that = this;
                var options = that.options;
                var actionButtons = options.actionButtons;
                var actionsContainer = that._footer;
                var actionButtonElement;

                for (var i = 0; i < actionButtons.length; i++) {
                    var action = actionButtons[i];
                    var enable = action.disabled !== true;
                    actionButtonElement = $(kendo.html.renderButton(("<button ref-actionsheet-action-button>" + (action.text || "") + "</button>"), $.extend({ size: "large" }, action)));
                    actionsContainer.append(actionButtonElement);
                    actionButtonElement.toggleClass(STATEDISABLED, !enable);
                    actionButtonElement.attr(DISABLED, !enable);

                    if (enable) {
                        actionButtonElement.removeAttr(ARIA_DISABLED);
                    } else {
                        actionButtonElement.attr(ARIA_DISABLED, !enable);
                    }

                    if (action.click) {
                        actionButtonElement.data("action", action.click);
                    }
                }
            },

            _createFooter: function() {
                var that = this;
                var options = that.options;
                var actionsContainer;

                if (!that._hasActionButtons && !options.footerTemplate) {
                    return;
                }

                actionsContainer = that._footer = $("<div class='k-actionsheet-footer'></div>");
                actionsContainer.insertAfter(that._content);

                if (that._hasActionButtons) {
                    actionsContainer.addClass("k-actions k-actions-stretched k-actions-horizontal");
                    that._createActionButtons();
                    return;
                }

                if (options.footerTemplate) {
                    that._footer.append(template(options.footerTemplate)(options));
                }
            },

            destroy: function() {
                var that = this;
                that.close();
                Widget.fn.destroy.call(that);
                that._content = null;
                that._footer = null;
                that._header = null;
                that.element.off(ns);
                that.wrapper.off(ns);
                that.popup.destroy();
            },

            open: function(options) {
                var that = this;

                that.altTarget = options && options.altTarget;

                that.wrapper.removeClass(HIDDEN);
                that._elementHeight = that._elementHeight || that.element.outerHeight();

                if (that.options.adaptive) {
                    that.wrapper.width("100%");
                }

                that.popup.open("auto", 0);
                that.popup.wrapper.find(">.k-child-animation-container").css({ bottom: 0, width: "100%" });

                DOCUMENT_ELEMENT.off(that.downEvent, that._mousedownProxy)
                    .on(that.downEvent, that._mousedownProxy);

                DOCUMENT_ELEMENT.off(that.clickEvent, that._clickProxy)
                    .on(that.clickEvent, that._clickProxy);

                that._tabKeyTrap.trap();
            },

            visible: function() {
                return this.popup.visible();
            },

            toggle: function() {
                !this.visible() ? this.open() : this.close();
            },

            fullscreen: function(isFullScreen) {
                var that = this;

                that.element.toggleClass(ACTION_SHEET_FULLSCREEN, isFullScreen === true);
                that.element.toggleClass(ACTION_SHEET_BOTTOM, isFullScreen !== true);
                that.element.closest(".k-child-animation-container").css({ height: isFullScreen ? "100%" : "auto" });
            },

            close: function() {
                var that = this;

                that.popup.close();
            },

            position: $.noop,

            _focusFirstFocusableElement: function() {
                var that = this;
                var focusableElements = that.element.find(FOCUSABLE);
                var firstFocusableElement = focusableElements.first();

                if (firstFocusableElement.length) {
                    firstFocusableElement.trigger("focus");
                }
            },

            _focusLastFocusableElement: function() {
                var that = this;
                var focusableElements = that.element.find(FOCUSABLE);
                var lastFocusableElement = focusableElements.last();

                if (lastFocusableElement.length) {
                    lastFocusableElement.trigger("focus");
                }
            },

            _openHandler: function() {
                var that = this;
                if (that._hasItems) {
                    var firstItem = that._content.find(".k-actionsheet-item")[0];
                    if (firstItem) {
                        firstItem.focus();
                    }
                } else {
                    that._focusFirstFocusableElement();
                }
            },

            _isActionableButton: function(target) {
                return $(target).closest(ACTIONABLE_BUTTON_SELECTOR).length > 0;
            },

            _triggerAction: function(e) {
                var that = this;
                var action = $(e.target).closest(ACTIONABLE_BUTTON_SELECTOR).data("action");
                if (isFunction(action)) {
                    action(e);
                }

                if (!e.isDefaultPrevented()) {
                    that.close();
                }
            },

            _keydown: function(e) {
                var that = this;
                var keys = kendo.keys;
                var keyCode = e.keyCode;
                var target = $(e.target);

                if (keyCode == keys.ESC) {
                    e.stopPropagation();
                    that.close();
                } else if (that._isActionableButton(target) && isButtonKeyTrigger(e)) {
                    that._triggerAction(e);
                } else if (e.keyCode === kendo.keys.TAB) {
                    var allFocusables = this.wrapper.find(FOCUSABLE);
                    var firstFocusable = allFocusables.first();
                    var lastFocusable = allFocusables.last();
                    if (e.shiftKey) {
                        if (document.activeElement === firstFocusable[0]) {
                            lastFocusable.trigger("focus");
                            e.preventDefault();
                        }
                    } else {
                        if (document.activeElement === lastFocusable[0]) {
                            firstFocusable.trigger("focus");
                            e.preventDefault();
                        }
                    }
                }
            },

            _click: function(e) {
                var that = this;
                var target = kendo.eventTarget(e);

                if (that._isActionableButton(target)) {
                    that._triggerAction(e);
                }
            },

            _mousedown: function(e) {
                var that = this;
                var container = that.element[0];
                var target = kendo.eventTarget(e);

                if (that.altTarget && that.altTarget.is($(target))) {
                    return;
                }

                if (!contains(container, target) || $(target).closest(("[" + (kendo.attr("ref-actionsheet-close-button")) + "]"), $(container).find("k-actionsheet-titlebar")).length > 0) {
                    that._closeButtonPressed = true;
                    that.close();
                }
            }
        });

        function isButtonKeyTrigger(e) {
            return e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR;
        }

        function defaultItemsMapper(item) {
            return extend({}, defaultItem, item);
        }

        function defaultActionButtonsMapper(actionButton) {
            return extend({}, defaultActionButton, actionButton);
        }

        ui.plugin(ActionSheet);

    })(window.kendo.jQuery);
    var kendo$x = kendo;

    var __meta__$C = {
        id: "notification",
        name: "Notification",
        category: "web",
        description: "The Notification widget displays user alerts.",
        depends: [ "core", "popup", "icons" ],
        features: [ {
            id: "notification-fx",
            name: "Animation",
            description: "Support for animation",
            depends: [ "fx" ]
        } ]
    };

    (function($, undefined$1) {
        var obj;

        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            extend = $.extend,
            encode = kendo.htmlEncode,
            setTimeout = window.setTimeout,
            CLICK = "click",
            SHOW = "show",
            HIDE = "hide",
            KNOTIFICATION = "k-notification",
            KCLOSEICONCLASS = "k-close-icon",
            KCLOSEICONSELECTOR = ".k-notification-actions ." + KCLOSEICONCLASS,
            KHIDING = "k-hiding",
            INFO = "info",
            SUCCESS = "success",
            WARNING = "warning",
            ERROR = "error",
            TYPEICONS = ( obj = {}, obj[INFO] = "info-circle", obj[ERROR] = "x-outline", obj[WARNING] = "exclamation-circle", obj[SUCCESS] = "check-outline", obj ),
            TOP = "top",
            LEFT = "left",
            BOTTOM = "bottom",
            RIGHT = "right",
            UP = "up",
            NS = ".kendoNotification",
            WRAPPER = '<div role="alert" aria-live="polite" class="k-notification"></div>',
            GET_TEMPLATE_FUNC = function (encodeContent) { return function (ref) {
                        var typeIcon = ref.typeIcon;
                        var content = ref.content;
                        var closeButton = ref.closeButton;

                        return kendo.ui.icon($(("<span title=\"" + (encode(typeIcon)) + "\"></span>")), { icon: TYPEICONS[encode(typeIcon)] || encode(typeIcon) }) +
                    "<div class=\"k-notification-content\">" + (encodeContent ? encode(content) : content) + "</div>";
    ; }                },
            TEMPLATE = GET_TEMPLATE_FUNC(false),
            SAFE_TEMPLATE = GET_TEMPLATE_FUNC(true),
            defaultActions = {
                close: {
                    template: kendo.ui.icon($('<span aria-hidden="true" title="Hide"></span>'), { icon: "x", iconClass: KCLOSEICONCLASS })
                }
            };

        var Notification = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                options = that.options;

                if (!options.appendTo || !$(options.appendTo).is(element)) {
                    that.element.hide();
                }

                that._compileTemplates(options.templates);
                that._guid = "_" + kendo.guid();
                that._isRtl = kendo.support.isRtl(element);
                that._compileStacking(options.stacking, options.position.top, options.position.left);

                kendo.notify(that);
            },

            events: [
                SHOW,
                HIDE
            ],

            options: {
                name: "Notification",
                position: {
                    pinned: true,
                    top: null,
                    left: null,
                    bottom: 20,
                    right: 20
                },
                stacking: "default",
                hideOnClick: true,
                button: false,
                allowHideAfter: 0,
                autoHideAfter: 5000,
                appendTo: null,
                width: null,
                height: null,
                templates: [],
                title: null,
                animation: {
                    open: {
                        effects: "fade:in",
                        duration: 300
                    },
                    close: {
                        effects: "fade:out",
                        duration: 600,
                        hide: true
                    }
                }
            },

            _compileTemplates: function(templates) {
                var that = this;
                var kendoTemplate = kendo.template;

                that._compiled = {};

                $.each(templates, function(key, value) {
                    that._compiled[value.type] = kendoTemplate(value.template || $("#" + value.templateId).html());
                });

                that._defaultCompiled = kendoTemplate(TEMPLATE);
                that._safeCompiled = kendoTemplate(SAFE_TEMPLATE);
            },

            _getCompiled: function(type, safe) {
                var defaultCompiled = safe ? this._safeCompiled : this._defaultCompiled;

                return type ? this._compiled[type] || defaultCompiled : defaultCompiled;
            },

            _compileStacking: function(stacking, top, left) {
                var that = this,
                    paddings = { paddingTop: 0, paddingRight: 0, paddingBottom: 0, paddingLeft: 0 },
                    horizontalAlignment = left !== null ? LEFT : RIGHT,
                    origin, position;

                switch (stacking) {
                    case "down":
                        origin = BOTTOM + " " + horizontalAlignment;
                        position = TOP + " " + horizontalAlignment;
                        delete paddings.paddingBottom;
                    break;
                    case RIGHT:
                        origin = TOP + " " + RIGHT;
                        position = TOP + " " + LEFT;
                        delete paddings.paddingRight;
                    break;
                    case LEFT:
                        origin = TOP + " " + LEFT;
                        position = TOP + " " + RIGHT;
                        delete paddings.paddingLeft;
                    break;
                    case UP:
                        origin = TOP + " " + horizontalAlignment;
                        position = BOTTOM + " " + horizontalAlignment;
                        delete paddings.paddingTop;
                    break;
                    default:
                        if (top !== null) {
                            origin = BOTTOM + " " + horizontalAlignment;
                            position = TOP + " " + horizontalAlignment;
                            delete paddings.paddingBottom;
                        } else {
                            origin = TOP + " " + horizontalAlignment;
                            position = BOTTOM + " " + horizontalAlignment;
                            delete paddings.paddingTop;
                        }
                    break;
                }

                that._popupOrigin = origin;
                that._popupPosition = position;
                that._popupPaddings = paddings;
            },

            _attachPopupEvents: function(options, popup) {
                var that = this,
                    allowHideAfter = options.allowHideAfter,
                    attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0,
                    closeIcon;

                function attachClick(target) {
                    target.on(CLICK + NS, function() {
                        that._hidePopup(popup);
                    });
                }

                if (options.hideOnClick) {
                    popup.bind("activate", function() {
                        if (attachDelay) {
                            setTimeout(function() {
                                attachClick(popup.element);
                            }, allowHideAfter);
                        } else {
                            attachClick(popup.element);
                        }
                    });
                } else if (options.button) {
                    closeIcon = popup.element.find(KCLOSEICONSELECTOR);
                    if (attachDelay) {
                        setTimeout(function() {
                            attachClick(closeIcon);
                        }, allowHideAfter);
                    } else {
                        attachClick(closeIcon);
                    }
                }
            },

            _showPopup: function(wrapper, options) {
                var that = this,
                    autoHideAfter = options.autoHideAfter,
                    x = options.position.left,
                    y = options.position.top,
                    popup, openPopup;

                openPopup = $("." + that._guid + ":not(." + KHIDING + ")").last();

                popup = new kendo.ui.Popup(wrapper, {
                    anchor: openPopup[0] ? openPopup : document.body,
                    origin: that._popupOrigin,
                    position: that._popupPosition,
                    _resizeOnWrap: true,
                    animation: options.animation,
                    copyAnchorStyles: false,
                    autosize: true,
                    modal: true,
                    collision: "",
                    isRtl: that._isRtl,
                    close: function() {
                        that._triggerHide(this.element);
                    },
                    deactivate: function(e) {
                        e.sender.element.off(NS);
                        e.sender.element.find(KCLOSEICONSELECTOR).off(NS);
                        e.sender.destroy();
                    }
                });

                that._attachPopupEvents(options, popup);

                wrapper.removeClass("k-group k-reset k-popup");

                if (openPopup[0]) {
                    popup.open();
                } else {
                    if (x === null) {
                        x = $(window).width() - wrapper.outerWidth() - options.position.right;
                    }

                    if (y === null) {
                        y = $(window).height() - wrapper.outerHeight() - options.position.bottom;
                    }

                    popup.open(x, y);
                }
                wrapper.removeClass("k-popup");

                popup.wrapper.addClass(that._guid).css(extend({ margin: 0,zIndex: 10050 }, that._popupPaddings));

                if (options.position.pinned) {
                    popup.wrapper.css("position", "fixed");
                    if (openPopup[0]) {
                        that._togglePin(popup.wrapper, true);
                    }
                } else if (!openPopup[0]) {
                    that._togglePin(popup.wrapper, false);
                }

                if (autoHideAfter > 0) {
                    setTimeout(function() {
                        that._hidePopup(popup);
                    }, autoHideAfter);
                }
            },

            _hidePopup: function(popup) {
                popup.wrapper.addClass(KHIDING);
                popup.close();
            },

            _togglePin: function(wrapper, pin) {
                var win = $(window),
                    sign = pin ? -1 : 1;

                wrapper.css({
                    top: parseInt(wrapper.css(TOP), 10) + sign * win.scrollTop(),
                    left: parseInt(wrapper.css(LEFT), 10) + sign * win.scrollLeft()
                });
            },

            _attachStaticEvents: function(options, wrapper) {
                var that = this,
                    allowHideAfter = options.allowHideAfter,
                    attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0;

                function attachClick(target) {
                    target.on(CLICK + NS, that._hideStatic.bind(that, wrapper));
                }

                if (options.hideOnClick) {
                    if (attachDelay) {
                        setTimeout(function() {
                            attachClick(wrapper);
                        }, allowHideAfter);
                    } else {
                        attachClick(wrapper);
                    }
                } else if (options.button) {
                    if (attachDelay) {
                        setTimeout(function() {
                            attachClick(wrapper.find(KCLOSEICONSELECTOR));
                        }, allowHideAfter);
                    } else {
                        attachClick(wrapper.find(KCLOSEICONSELECTOR));
                    }
                }
            },

            _showStatic: function(wrapper, options) {
                var that = this,
                    autoHideAfter = options.autoHideAfter,
                    animation = options.animation,
                    insertionMethod = options.stacking == UP || options.stacking == LEFT ? "prependTo" : "appendTo",
                    initializedNotifications;

                if (!that._hideTimeouts) {
                    that._hideTimeouts = [];
                }

                wrapper
                    .removeClass("k-popup")
                    .addClass(that._guid)
                    [insertionMethod](options.appendTo)
                    .hide()
                    .kendoAnimate(animation.open || false);

                wrapper.css("display", "");
                initializedNotifications = that.getNotifications();
                initializedNotifications.each(function(idx, element) {
                    that._attachStaticEvents(options, $(element));

                    if (autoHideAfter > 0 && !$(element).attr(kendo.attr("has-hidetimeout"))) {
                        $(element).attr(kendo.attr("has-hidetimeout"), true);
                        that._hideTimeouts.push(
                            setTimeout(function() {
                            that._hideStatic($(element));
                        }, autoHideAfter));
                    }
                });
            },

            _hideStatic: function(wrapper) {
                wrapper.kendoAnimate(extend(this.options.animation.close || false, { complete: function() {
                    wrapper.off(NS).find(KCLOSEICONSELECTOR).off(NS);
                    wrapper.remove();
                } }));
                this._triggerHide(wrapper);
            },

            _triggerHide: function(element) {
                this.trigger(HIDE, { element: element });
            },

            show: function(content, type, safe) {
                var that = this,
                    options = that.options,
                    wrapper = $(WRAPPER),
                    contentId = kendo.guid(),
                    args, defaultArgs;

                if (!type) {
                    type = INFO;
                }

                wrapper.attr("aria-label", type);

                if (content !== null && content !== undefined$1 && content !== "") {

                    if (kendo.isFunction(content)) {
                        content = content();
                    }

                    defaultArgs = { typeIcon: type, content: "", closeButton: options.button };

                    if ($.isPlainObject(content)) {
                        args = extend(defaultArgs, content);
                    } else {
                        args = extend(defaultArgs, { content: content });
                    }

                    wrapper
                        .addClass(KNOTIFICATION + "-" + type)
                        .toggleClass(KNOTIFICATION + "-closable", options.button)
                        .attr({
                            "data-role": "alert",
                            title: options.title
                        })
                        .css({ width: options.width, height: options.height })
                        .append(that._getCompiled(type, safe)(args));

                    if (that.options.button) {
                        wrapper.append(that.addActions("close"));
                    }

                    wrapper.find(".k-notification-content").attr("id", contentId);
                    wrapper.attr("aria-describedby", contentId);

                    if ($(options.appendTo)[0]) {
                        that._showStatic(wrapper, options);
                    } else {
                        that._showPopup(wrapper, options);
                    }

                    that.trigger(SHOW, { element: wrapper });
                }

                return that;
            },

            showText: function(content, type) {
                this.show(content, type, true);
            },

            info: function(content) {
                return this.show(content, INFO);
            },

            success: function(content) {
                return this.show(content, SUCCESS);
            },

            warning: function(content) {
                return this.show(content, WARNING);
            },

            error: function(content) {
                return this.show(content, ERROR);
            },

            hide: function() {
                var that = this,
                    openedNotifications = that.getNotifications();

                if (that.options.appendTo) {
                    if (that._hideTimeouts) {
                        that._hideTimeouts.forEach(clearTimeout);
                    }
                    that._hideTimeouts = [];
                    openedNotifications.each(function(idx, element) {
                        that._hideStatic($(element));
                    });
                } else {
                    openedNotifications.each(function(idx, element) {
                        var popup = $(element).data("kendoPopup");
                        if (popup) {
                            that._hidePopup(popup);
                        }
                    });
                }

                return that;
            },

            getNotifications: function() {
                var that = this,
                    guidElements = $("." + that._guid + ":not(." + KHIDING + ")");

                if (that.options.appendTo) {
                    return guidElements;
                } else {
                    return guidElements.find(">.k-child-animation-container >." + KNOTIFICATION);
                }
            },

            setOptions: function(newOptions) {
                var that = this,
                    options;

                Widget.fn.setOptions.call(that, newOptions);

                options = that.options;

                if (newOptions.templates !== undefined$1) {
                    that._compileTemplates(options.templates);
                }

                if (newOptions.stacking !== undefined$1 || newOptions.position !== undefined$1) {
                    that._compileStacking(options.stacking, options.position.top, options.position.left);
                }
            },

            destroy: function() {
                Widget.fn.destroy.call(this);
                this.getNotifications().off(NS).find(KCLOSEICONSELECTOR).off(NS);
            },

            addActions: function(actions) {
                var actionsContainer = $('<span class="k-notification-actions"/>');

                if (!Array.isArray(actions)) {
                    actions = [actions];
                }

                actions.forEach(function(action) {
                    $(defaultActions[action].template)
                        .wrap(("<span class=\"k-notification-action k-notification-" + action + "-action\">"))
                        .parent()
                        .appendTo(actionsContainer);
                });

                return actionsContainer;
            }
        });

        kendo.ui.plugin(Notification);

    })(window.kendo.jQuery);
    var kendo$w = kendo;

    var __meta__$B = {
        id: "tooltip",
        name: "Tooltip",
        category: "web",
        description: "The Tooltip widget displays a popup hint for a given html element.",
        depends: [ "core", "popup", "icons" ],
        features: [ {
            id: "tooltip-fx",
            name: "Animation",
            description: "Support for animation",
            depends: [ "fx" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            Popup = kendo.ui.Popup,
            isFunction = kendo.isFunction,
            isPlainObject = $.isPlainObject,
            extend = $.extend,
            DOCUMENT = $(document),
            isLocalUrl = kendo.isLocalUrl,
            ARIAIDSUFFIX = "_tb_active",
            DESCRIBEDBY = "aria-describedby",
            SHOW = "show",
            HIDE = "hide",
            ERROR = "error",
            CONTENTLOAD = "contentLoad",
            REQUESTSTART = "requestStart",
            KCONTENTFRAME = "k-content-frame",
            TEMPLATE = function (ref) {
                    var autoHide = ref.autoHide;
                    var callout = ref.callout;
                    var dir = ref.dir;

                    return "<div role=\"tooltip\" class=\"k-widget k-tooltip" + (!autoHide ? ' k-tooltip-closable' : '') + "\">" +
                    '<div class="k-tooltip-content"></div>' +
                    (!autoHide ? ("<div class=\"k-tooltip-button\">" + (kendo.ui.icon($('<a href="#" title="Close"></a>'), { icon: "x" })) + "</div>") : '') +
                    (callout ? ("<div class=\"k-callout k-callout-" + dir + "\"></div>") : '') +
                '</div>';
        },
            IFRAMETEMPLATE = kendo.template(function (ref) {
                    var content = ref.content;

                    return "<iframe frameborder='0' class='" + KCONTENTFRAME + "' src='" + (content.url) + "'>" +
                    "This page requires frames in order to show content" +
                "</iframe>";
        }
            ),
            NS = ".kendoTooltip",
            POSITIONS = {
                bottom: {
                    origin: "bottom center",
                    position: "top center"
                },
                top: {
                    origin: "top center",
                    position: "bottom center"
                },
                left: {
                    origin: "center left",
                    position: "center right",
                    collision: "fit flip"
                },
                right: {
                    origin: "center right",
                    position: "center left",
                    collision: "fit flip"
                },
                center: {
                    position: "center center",
                    origin: "center center"
                }
            },
            REVERSE = {
                "top": "bottom",
                "bottom": "top",
                "left": "right",
                "right": "left",
                "center": "center"
            },
            DIRCLASSES = {
                bottom: "n",
                top: "s",
                left: "e",
                right: "w",
                center: "n"
            },
            DIMENSIONS = {
                "horizontal": { offset: "top", size: "outerHeight" },
                "vertical": { offset: "left", size: "outerWidth" }
            },
            DEFAULTCONTENT = function(e) {
                return e.target.data(kendo.ns + "title");
            };

        function restoreTitle(element) {
            while (element.length) {
                if (restoreTitleAttributeForElement(element)) {
                    break;
                }
                element = element.parent();
            }
        }

        function restoreTitleAttributeForElement(element) {
            var title = element.data(kendo.ns + "title");
            if (title) {
                element.attr("title", title);
                element.removeData(kendo.ns + "title");
                return true;
            }
        }

        function saveTitleAttributeForElement(element) {
            var title = element.attr("title");
            if (title) {
                element.data(kendo.ns + "title", title);
                element.attr("title", "");
                return true;
            }
        }

        function saveTitleAttributes(element) {
            while (element.length && !element.is("body")) {
                if (saveTitleAttributeForElement(element)) {
                    break;
                }
                element = element.parent();
            }
        }

        var TooltipBase = Widget.extend({
            init: function(element, options) {
                var that = this,
                    axis;

                Widget.fn.init.call(that, element, options);

                axis = that.options.position.match(/left|right/) ? "horizontal" : "vertical";

                that.dimensions = DIMENSIONS[axis];

                if (kendo.support.touch && this._isShownOnMouseEnter()) {
                    that.element.on(kendo.support.mousedown + NS, that.options.filter, that._showOn.bind(that));
                }

                that.element.on(that.options.showOn + NS, that.options.filter, that._showOn.bind(that));

                if (that.options.showOn === "click") {
                    that.element.on("keydown" + NS, that.options.filter, that._keydown.bind(that));
                }
            },

            options: {
                name: "TooltipBase",
                filter: "",
                offset: 0,
                showAfter: 100,
                hideAfter: 100,
                callout: true,
                position: "bottom",
                showOn: "mouseenter",
                animation: {
                    open: {
                        effects: "fade:in",
                        duration: 0
                    },
                    close: {
                        duration: 40,
                        hide: true
                    }
                }
            },

            destroy: function() {
                var popup = this.popup;

                if (popup) {
                    popup.element.off(NS);
                    popup.destroy();
                }

                clearTimeout(this.timeout);

                Widget.fn.destroy.call(this);
            },

            hide: function() {
                if (this.popup) {
                    this.popup.close();
                }
            },

            show: function(target) {
                target = target || this.element;

                this._saveTitle(target);
                this._show(target);
            },

            target: function() {
                if (this.popup) {
                    return this.popup.options.anchor;
                }
                return null;
            },

            _keydown: function(e) {
                var currentTarget = $(e.currentTarget);

                if (e.keyCode == kendo.keys.ENTER) {
                    this._show(currentTarget);
                }
            },

            _showOn: function(e) {
                var that = this;

                var currentTarget = $(e.currentTarget);
                if (that._isShownOnClick() && !that._isShownOnMouseEnter()) {
                    that._show(currentTarget);
                } else if (that._isShownOnFocus()) {
                    that._saveTitle(currentTarget);
                    that._show(currentTarget);
                } else {
                    clearTimeout(that.timeout);

                    that.timeout = setTimeout(function() {
                        that._show(currentTarget);
                    }, that.options.showAfter);
                }
            },

            _isShownOnFocus: function() {
                return this.options.showOn && this.options.showOn.match(/focus/);
            },

            _isShownOnMouseEnter: function() {
                return this.options.showOn && this.options.showOn.match(/mouseenter/);
            },

            _isShownOnClick: function() {
                return this.options.showOn && this.options.showOn.match(/click/);
            },

            _positionCallout: function() {
                var that = this,
                    position = that.options.position,
                    dimensions = that.dimensions,
                    offset = dimensions.offset,
                    popup = that.popup,
                    anchor = popup.options.anchor,
                    anchorOffset = $(anchor).offset(),
                    elementOffset = $(popup.element).offset(),
                    cssClass = DIRCLASSES[popup.flipped ? REVERSE[position] : position],
                    offsetAmount = anchorOffset[offset] - elementOffset[offset] + ($(anchor)[dimensions.size]() / 2);

                that._offset(position, that.options.offset);

                that.arrow
                   .removeClass("k-callout-n k-callout-s k-callout-w k-callout-e")
                   .addClass("k-callout-" + cssClass)
                   .css(offset, offsetAmount);
            },

            _offset: function(position, offsetAmount, arrowWidth) {
                var that = this,
                    isTopLeft = position == "top" || position == "left",
                    isFlipped = that.popup.flipped,
                    direction = (isTopLeft && isFlipped) || (!isTopLeft && !isFlipped) ? 1 : -1,
                    marginRule = isTopLeft ? "margin-" + position : "margin-" + REVERSE[position],
                    offset = ((arrowWidth || kendo._outerWidth(that.arrow)) / 2) + offsetAmount;

                that.popup.wrapper.css(marginRule, offset * direction + "px");
            },

            _addDescribedBy: function() {
                var that = this,
                    anchor = that.popup.options.anchor,
                    ariaId = anchor[0].id || that.element[0].id || kendo.guid(),
                    describedBy = [];

                if (anchor.attr(DESCRIBEDBY)) {
                    describedBy.push(anchor.attr(DESCRIBEDBY));
                }

                if (ariaId) {
                    describedBy.push(ariaId + ARIAIDSUFFIX);
                    anchor.attr(DESCRIBEDBY, describedBy.join(" "));
                    that.popup.element.attr("id", ariaId + ARIAIDSUFFIX);
                }

            },

            _removeDescribedBy: function(target) {
                var tooltipId = this.popup.element.attr("id"),
                    currentDescribedBy = target.attr(DESCRIBEDBY),
                    arrayAttr, finalArray, finalDescribedbyAttr;

                if (!currentDescribedBy) {
                    return;
                }

                arrayAttr = currentDescribedBy.split(" ");

                if (arrayAttr && arrayAttr.length > 0) {
                    finalArray = arrayAttr.filter(function(val) {
                        return val !== tooltipId;
                    });
                }

                if (finalArray && finalArray.length > 0) {
                    finalDescribedbyAttr = finalArray.join(" ");
                    target.attr(DESCRIBEDBY, finalDescribedbyAttr);
                } else {
                    target.removeAttr(DESCRIBEDBY);
                }
            },

            _openPopup: function() {
                if (!this.popup) {
                    return;
                }

                this.popup._hovered = true;
                this.popup._shouldCorrectWidth = false;
                this.popup.open();
            }
        });
        kendo.ui.plugin(TooltipBase);

        var Tooltip = TooltipBase.extend({
            init: function(element, options) {
                var that = this,
                    axis;

                TooltipBase.fn.init.call(that, element, options);

                axis = that.options.position.match(/left|right/) ? "horizontal" : "vertical";

                that.dimensions = DIMENSIONS[axis];

                that._documentKeyDownHandler = that._documentKeyDown.bind(that);

                if (this._isShownOnMouseEnter() || this._isShownOnClick()) {
                    that.element.on("mouseenter" + NS, that.options.filter, that._mouseenter.bind(that));
                }

                if (this.options.autoHide && this._isShownOnMouseEnter()) {
                    that.element.on("mouseleave" + NS, that.options.filter, that._mouseleave.bind(that));
                }

                if (this.options.autoHide && this._isShownOnFocus()) {
                    that.element.on("blur" + NS, that.options.filter, that._blur.bind(that));
                }

                if (kendo.support.touch) {
                    that.element.on(kendo.support.mousedown + NS, that.options.filter, that._mouseenter.bind(that));
                }
            },

            options: {
                name: "Tooltip",
                filter: "",
                content: DEFAULTCONTENT,
                showAfter: 100,
                callout: true,
                offset: 0,
                position: "bottom",
                showOn: "mouseenter",
                autoHide: true,
                width: null,
                height: null,
                animation: {
                    open: {
                        effects: "fade:in",
                        duration: 0
                    },
                    close: {
                        duration: 40,
                        hide: true
                    }
                }
            },

            events: [ SHOW, HIDE, CONTENTLOAD, ERROR, REQUESTSTART ],

            _mouseenter: function(e) {
                saveTitleAttributes($(e.currentTarget));
            },

            _saveTitle: function(target) {
                saveTitleAttributes(target);
            },

            _appendContent: function(target) {
                var that = this,
                    contentOptions = that.options.content,
                    element = that.content,
                    showIframe = that.options.iframe,
                    iframe;

                if (isPlainObject(contentOptions) && contentOptions.url) {
                    if (!("iframe" in that.options)) {
                        showIframe = !isLocalUrl(contentOptions.url);
                    }

                    that.trigger(REQUESTSTART, { options: contentOptions, target: target });

                    if (!showIframe) {
                        element.empty();
                        kendo.ui.progress(element, true);

                        // perform AJAX request
                        that._ajaxRequest(contentOptions);
                    } else {
                        element.hide();

                        iframe = element.find("." + KCONTENTFRAME)[0];

                        if (iframe) {
                            // refresh existing iframe
                            iframe.src = contentOptions.url || iframe.src;
                        } else {
                            element.html(IFRAMETEMPLATE({ content: contentOptions }));
                        }

                        element.find("." + KCONTENTFRAME)
                            .off("load" + NS)
                            .on("load" + NS, function() {
                                that.trigger(CONTENTLOAD);
                                element.show();
                            });
                    }
                } else if (contentOptions && isFunction(contentOptions)) {
                    contentOptions = contentOptions({ sender: this, target: target });
                    element.html(contentOptions || "");
                } else {
                    element.html(contentOptions);
                }
            },

            _ajaxRequest: function(options) {
                var that = this,
                    successFn = function(data) {
                        kendo.ui.progress(that.content, false);

                        that.content.html(data);

                        if (kendo._outerHeight(that.popup.element) > kendo._outerHeight(that.popup.wrapper)) {
                            that.popup.wrapper.css("height", kendo._outerHeight(that.popup.element) + "px");
                            that.popup.position();
                            that._positionCallout();
                        }

                        that.trigger(CONTENTLOAD);
                    };

                jQuery.ajax(extend({
                    type: "GET",
                    dataType: "html",
                    cache: false,
                    error: function(xhr, status) {
                        kendo.ui.progress(that.content, false);

                        that.trigger(ERROR, { status: status, xhr: xhr });
                    },
                    success: successFn.bind(that)
                }, options));
            },

            _documentKeyDown: function(e) {
                if (e.keyCode === kendo.keys.ESC) {
                    this.hide();
                }
            },

            refresh: function() {
                var that = this,
                    popup = that.popup;

                if (popup && popup.options.anchor) {
                    that._appendContent(popup.options.anchor);
                }
            },

            _show: function(target) {
                var that = this,
                    current = that.target();

                if (!that.popup) {
                    that._initPopup();
                }

                if (current && current[0] != target[0]) {
                    that.popup.close(true);
                    that.popup.element.kendoStop(true, true);// animation can be too long to hide the element before it is shown again
                }

                if (!current || current[0] != target[0]) {
                    that._appendContent(target);
                    that.popup.options.anchor = target;
                }

                that.popup.one("deactivate", function() {
                    restoreTitle(target);

                    that._removeDescribedBy(target);

                    this.element
                        .removeAttr("id")
                        .attr("aria-hidden", true);

                    DOCUMENT.off("keydown" + NS, that._documentKeyDownHandler);
                });

                that._openPopup();
            },

            _initPopup: function() {
                var that = this,
                    options = that.options,
                    wrapper = $(kendo.template(TEMPLATE)({
                        callout: options.callout && options.position !== "center",
                        dir: DIRCLASSES[options.position],
                        autoHide: options.autoHide
                    }));

                that.popup = new Popup(wrapper, extend({
                    autosize: true,
                    activate: function() {
                        that._addDescribedBy();

                        if (options.callout) {
                            that._positionCallout();
                        } else {
                            that._offset(that.options.position, that.options.offset);
                        }

                        this.element.removeAttr("aria-hidden");

                        DOCUMENT.on("keydown" + NS, that._documentKeyDownHandler);

                        that.trigger(SHOW);
                        that.popup._hovered = undefined$1;
                    },
                    close: function() {
                        that.trigger(HIDE);
                    },
                    copyAnchorStyles: false,
                    animation: options.animation
                }, POSITIONS[options.position]));

                wrapper.css({
                    width: options.width,
                    height: options.height
                });

                that.content = wrapper.find(".k-tooltip-content");
                that.arrow = wrapper.find(".k-callout");

                if (options.autoHide && this._isShownOnMouseEnter()) {
                    wrapper.on("mouseleave" + NS, that._mouseleave.bind(that));
                } else {
                    wrapper.on("click" + NS, ".k-tooltip-button", that._closeButtonClick.bind(that));
                }
            },

            _closeButtonClick: function(e) {
                e.preventDefault();
                this.hide();
            },

            _mouseleave: function(e) {
                var that = this;

                clearTimeout(that.timeout);

                that.timeout = setTimeout(function() {
                    that._closePopup(e.currentTarget);
                }, that.options.hideAfter);
            },

            _blur: function(e) {
                this._closePopup(e.currentTarget);
            },

            _closePopup: function(target) {
                if (this.popup && !this.popup._hovered) {
                    this.popup.close();
                } else {
                    restoreTitle($(target));
                }
            },

            destroy: function() {
                this.element.off(NS);

                DOCUMENT.off("keydown" + NS, this._documentKeyDownHandler);

                TooltipBase.fn.destroy.call(this);
            }
        });

        kendo.ui.plugin(Tooltip);
    })(window.kendo.jQuery);
    var kendo$v = kendo;

    var __meta__$A = {
        id: "button.menu",
        name: "ButtonMenu",
        category: "web",
        description: "The popup Menu list part of the SplitButton and the DropDownButton",
        depends: ["core", "popup", "icons"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            NS = ".kendoButtonMenu",
            ui = kendo.ui,
            keys = kendo.keys,
            encode = kendo.htmlEncode,
            extend = $.extend,

            DOT = ".",
            ID = "id",
            NEXT = "next",
            PREV = "prev",
            DISABLEDSTATE = "k-disabled",
            HIDDEN = "k-hidden",

            ARIA_DISABLED = "aria-disabled",
            ROLE_MENU = "menu",
            ROLE_MENU_ITEM = "menuitem",
            TABINDEX = "tabindex",

            CLICK = "click",
            MENU_CLICK = "menuClick",
            OPEN = "menuOpen",
            CLOSE = "menuClose",
            KEYDOWN = "keydown",
            FOCUS = "focus",

            DIRECTIONS = {
                "down": {
                    origin: "bottom left",
                    position: "top left"
                },
                "up": {
                    origin: "top left",
                    position: "bottom left"
                }
            };

        var cssClasses = {
            popup: "k-menu-popup",
            list: "k-group k-menu-group k-reset",
            listItem: "k-item k-menu-item",
            menuItem: "k-menu-item",
            itemText: "k-menu-link-text",
            item: "k-link k-menu-link",
            sprite: "k-sprite",
            image: "k-image",
            icon: "k-icon"
        };

        var baseItem = {
            text: null,
            icon: null,
            url: null,
            attributes: null,
            enabled: true,
            hidden: false,
            id: null,
            imageUrl: null,
            spriteCssClass: null
        };

        var IMAGE_TEMPLATE = function (ref) {
            var imageUrl = ref.imageUrl;

            return ("" + (imageUrl ? ("<img alt=\"icon\" class=\"" + (cssClasses.image) + "\" src=\"" + (encode(imageUrl)) + "\" />") : ''));
        };
        var SPRITE_TEMPLATE = function (ref) {
            var spriteCssClass = ref.spriteCssClass;

            return ("" + (spriteCssClass ? ("<span class=\"" + (cssClasses.sprite) + " " + (encode(spriteCssClass)) + "\"></span>") : ''));
        };
        var ICON_TEMPLATE = function (ref) {
            var icon = ref.icon;

            return ("" + (icon ? kendo.ui.icon(encode(icon)) : ''));
        };
        var TEXT_TEMPLATE = function (ref) {
            var text = ref.text;

            return ("" + (text ? ("<span class=\"" + (cssClasses.itemText) + "\">" + (encode(text)) + "</span>") : ''));
        };

        var ITEM_TEMPLATE = function (ref) {
            var imageUrl = ref.imageUrl;
            var spriteCssClass = ref.spriteCssClass;
            var icon = ref.icon;
            var text = ref.text;

            return "<span class=\"" + (cssClasses.item) + "\">" +
                                                            "" + (IMAGE_TEMPLATE({ imageUrl: imageUrl })) +
                                                            "" + (SPRITE_TEMPLATE({ spriteCssClass: spriteCssClass })) +
                                                            "" + (ICON_TEMPLATE({ icon: icon })) +
                                                            "" + (TEXT_TEMPLATE({ text: text })) +
                                                        "</span>";
        };

        var LINK_TEMPLATE = function (ref) {
            var url = ref.url;
            var imageUrl = ref.imageUrl;
            var spriteCssClass = ref.spriteCssClass;
            var icon = ref.icon;
            var text = ref.text;
            var attributes = ref.attributes;

            return "<a href=\"" + (encode(url)) + "\" " + (attributes.target ? ("target=\"" + (attributes.target) + "\"") : '') + " class=\"" + (cssClasses.item) + "\">" +
                                                        "" + (IMAGE_TEMPLATE({ imageUrl: imageUrl })) +
                                                        "" + (SPRITE_TEMPLATE({ spriteCssClass: spriteCssClass })) +
                                                        "" + (ICON_TEMPLATE({ icon: icon })) +
                                                        "" + (TEXT_TEMPLATE({ text: text })) +
                                                    "</a>";
        };

        function findFocusableSibling(element, dir) {
            var getSibling = dir === NEXT ? $.fn.next : $.fn.prev;
            var getter = dir === NEXT ? $.fn.first : $.fn.last;
            var candidate = getSibling.call(element);
            var focusable = ":kendoFocusable";

            if (!candidate.length) {
                candidate = getter.call(element.parent().find(DOT + cssClasses.menuItem));
            }

            if (candidate.is(focusable) || !candidate.length) {
                return candidate;
            }

            if (candidate.find(focusable).length) {
                return getter.call(candidate.find(focusable));
            }

            return findFocusableSibling(candidate, dir);
        }

        var ButtonMenu = Widget.extend({
            init: function(element, options) {
                var that = this;


                Widget.fn.init.call(that, element, options);

                that.mainButton = options.mainButton;
                that._clickHandlers = {};

                that._renderList();

                that._initPopup();

                that._attachEvents();

                that._applyCssClasses(that.list);
            },

            options: {
                name: "ButtonMenu",
                direction: "down",
                element: null,
                items: [],
                size: "medium",
            },

            events: [
                MENU_CLICK,
                OPEN,
                CLOSE
            ],

            _renderList: function() {
                var that = this,
                    items = that.options.items,
                    popup = that.element.addClass(cssClasses.popup),
                    id = that.mainButton.attr(ID) || kendo.guid(),
                    list = $("<ul role=\"" + ROLE_MENU + "\"></ul>").addClass(cssClasses.list);

                that.list = list.appendTo(popup);

                that.list.attr(ID, id + "_buttonmenu");

                items.forEach(that._renderListItem.bind(that));
            },

            _renderListItem: function(item) {
                var that = this,
                    attributesId = item.attributes ? item.attributes.id : null,
                    id, menuItem;

                item = extend({}, baseItem, item, {
                    enabled: item.enable && item.enabled // backward compatibility: support both enable and enabled options.
                });

                id = item.id || attributesId || kendo.guid();
                menuItem = $("<li id=\"" + id + "\" role=\"" + ROLE_MENU_ITEM + "\" class=\"" + cssClasses.listItem + "\">" + that._renderItemButton(item) + "</li>");

                if (item.click) {
                    that._clickHandlers[id] = item.click;
                }

                if (item.attributes) {
                    delete item.attributes.target;

                    if (item.attributes.class) {
                        menuItem.addClass(item.attributes.class);
                        delete item.attributes.class;
                    }

                    menuItem.attr(item.attributes);
                }

                if (item.data && kendo.isFunction(item.data)) {
                    menuItem.data(item.data(item));
                }

                that.list.append(menuItem);

                that.enable(item.enabled, menuItem);
                that._hide(item.hidden, menuItem);
            },

            _renderItemButton: function(item) {
                var that = this,
                    options = that.options;

                if (options.itemTemplate) {
                    return kendo.template(options.itemTemplate)(item);
                }

                if (item.url) {
                    return kendo.template(LINK_TEMPLATE)(item);
                } else {
                    return kendo.template(ITEM_TEMPLATE)(item);
                }
            },

            _initPopup: function() {
                var that = this,
                    options = that.options,
                    direction = options.direction || "down";

                that._popup = new ui.Popup(that.element, extend({}, options.popup, {
                    anchor: that.mainButton,
                    isRtl: that._isRtl,
                    toggleTarget: options.toggleTarget,
                    copyAnchorStyles: false,
                    animation: options.animation,
                    open: that._popupOpenHandler.bind(that),
                    close: that._popupCloseHandler.bind(that),
                    activate: that._popupExpandHandler.bind(that)
                }, DIRECTIONS[direction]));
            },

            _popupOpenHandler: function(ev) {
                var that = this;

                var isDefaultPrevented = that.trigger(OPEN);

                if (isDefaultPrevented) {
                    ev.preventDefault();
                    return;
                }

                that.list.find(DOT + cssClasses.menuItem).attr(TABINDEX, 0);
            },

            _popupCloseHandler: function(ev) {
                var that = this,
                    isDefaultPrevented = that.trigger(CLOSE);

                if (isDefaultPrevented) {
                    ev.preventDefault();
                }

                that.list.find(DOT + cssClasses.menuItem).attr(TABINDEX, -1);
            },

            _popupExpandHandler: function() {
                var that = this;

                that.list.find(":kendoFocusable").first().trigger(FOCUS);
            },

            adjustPopupWidth: function(width) {
                var that = this;

                that.element.addClass("k-split-wrapper");

                that.element.css({
                    "min-width": width
                });
            },

            _attachEvents: function() {
                var that = this;

                that.list
                    .on(CLICK + NS, DOT + cssClasses.menuItem, that._click.bind(that))
                    .on(KEYDOWN + NS, DOT + cssClasses.menuItem, that.listItemKeydown.bind(that));

                that.mainButton
                    .on(KEYDOWN + NS, that._keydown.bind(that));
            },

            _keydown: function(ev) {
                var that = this;

                if ($(ev.target).is(DOT + DISABLEDSTATE) || $(ev.target).parents(DOT + DISABLEDSTATE).length) {
                    return;
                }

                if (ev.altKey && ev.keyCode === keys.DOWN) {
                    that._popup.open();
                    ev.preventDefault();
                    return;
                }
            },

            listItemKeydown: function(ev) {
                var that = this,
                    li = $(ev.target);

                ev.preventDefault();

                if (ev.keyCode === keys.ESC || ev.keyCode === keys.TAB || (ev.altKey && ev.keyCode === keys.UP)) {
                    that._popup.close();
                    that.mainButton.trigger(FOCUS);
                } else if (ev.keyCode === keys.DOWN) {
                    findFocusableSibling(li, NEXT).trigger(FOCUS);
                } else if (ev.keyCode === keys.UP) {
                    findFocusableSibling(li, PREV).trigger(FOCUS);
                } else if (!li.is(DOT + DISABLEDSTATE) && (ev.keyCode === keys.SPACEBAR || ev.keyCode === keys.ENTER)) {
                    li.trigger(CLICK);
                } else if (ev.keyCode === keys.HOME) {
                    that.list.find(":kendoFocusable")
                        .filter(DOT + cssClasses.menuItem)
                        .first().trigger(FOCUS);
                } else if (ev.keyCode === keys.END) {
                    that.list.find(":kendoFocusable")
                        .filter(DOT + cssClasses.menuItem)
                        .last().trigger(FOCUS);
                }
            },

            _click: function(ev) {
                var that = this,
                    target = $(ev.target).closest(DOT + cssClasses.menuItem),
                    id = target.attr(ID);

                if (that._clickHandlers[id]) {
                    that._clickHandlers[id](ev);
                }

                that.trigger(MENU_CLICK, { id: id, target: target, type: "menu-click", originalEvent: ev });
            },

            toggle: function() {
                this._popup.toggle();
            },

            enable: function(enable, items) {
                var that = this;

                if (!items || !items.length) {
                    items = that.items();
                } else {
                    items = that.list.find(items);
                }

                items.toggleClass(DISABLEDSTATE, !enable);

                if (enable) {
                    items.removeAttr(ARIA_DISABLED);
                } else {
                    items.attr(ARIA_DISABLED, !enable);
                }
            },


            _hide: function(hidden, items) {
                var that = this;

                if (!items || !items.length) {
                    items = that.items();
                } else {
                    items = that.list.find(items);
                }

                items.toggleClass(HIDDEN, hidden);
            },

            hide: function(items) {
                this._hide(true, items);
            },

            show: function(items) {
                this._hide(false, items);
            },

            close: function() {
                this._popup.close();
            },

            items: function() {
                return this.list.children(DOT + cssClasses.menuItem);
            },

            destroyPopup: function() {
                var that = this;

                if (that._popup) {
                    that._popup.destroy();
                    that._popup = null;

                    that.list.off(NS);
                    that.list.remove();
                    that.list = null;
                }
            },

            destroy: function() {
                var that = this;

                delete that._clickHandlers;

                that.destroyPopup();
                that.mainButton.off(NS);
                Widget.fn.destroy.call(that);
            }
        });

        kendo.cssProperties.registerPrefix("ButtonMenu", "k-menu-group-");

        ui.plugin(ButtonMenu);

    })(window.kendo.jQuery);
    var kendo$u = kendo;

    var __meta__$z = {
        id: "splitbutton",
        name: "SplitButton",
        category: "web",
        description: "The SplitButton allows the user to execute a default action which is bound to a Button or to choose a predefined action from a drop-down list.",
        depends: ["button.menu", "html.button"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            NS = ".kendoSplitButton",
            ui = kendo.ui,
            extend = $.extend,
            html = kendo.html,
            outerWidth = kendo._outerWidth,
            keys = kendo.keys,

            DOT = ".",
            ID = "id",

            ARIA_HASPOPUP = "aria-haspopup",
            ARIA_DISABLED = "aria-disabled",
            ARIA_CONTROLS = "aria-controls",
            ARIA_LABEL = "aria-label",
            ARIA_EXPANDED = "aria-expanded",

            DISABLED = "disabled",
            DISABLEDSTATE = "k-disabled",
            FOCUSSTATE = "k-focus",

            CLICK = "click",
            KEYDOWN = "keydown",
            OPEN = "open",
            CLOSE = "close",

            FOCUS = "focus",
            BLUR = "blur";

        var cssClasses = {
            widget: "k-split-button k-button-group"
        };

        var SplitButton = Widget.extend({
            init: function(element, options) {
                var that = this;

                options.enabled = options.enabled !== false && !$(element).prop(DISABLED);
                Widget.fn.init.call(that, element, options);

                that._wrapper();
                that._renderButtons();
                that._renderMenu();

                that._enable(that.options.enabled);

                that._aria();

                that._attachEvents();

                kendo.notify(that);

                that._applyCssClasses();
            },

            options: {
                name: "SplitButton",
                enabled: true,
                items: [],
                rounded: "medium",
                size: "medium",
                fillMode: "solid",
                themeColor: "base",
                icon: null,
                popup: null,
                arrowIcon: "caret-alt-down",
                messages: {
                    labelSuffix: "splitbutton"
                }
            },

            events: [
                CLICK,
                OPEN,
                CLOSE
            ],

            _wrapper: function() {
                var that = this,
                    id = that.element.attr(ID) || kendo.guid(),
                    wrapperId = id + "_wrapper";

                that.wrapper = that.element
                    .wrap("<div id=\"" + wrapperId + "\" class=\"" + cssClasses.widget + "\"></div>")
                    .parent(".k-split-button");

                that.arrowButton = $("<button tabindex=\"-1\" aria-label=\"arrow-button\" class=\"k-split-button-arrow\"></button>").appendTo(that.wrapper);
            },

            _applyCssClasses: function() {
                var that = this;

                that.wrapper.addClass(that._getAppearanceClasses());
            },

            _clearCssClasses: function() {
                var that = this;

                that.wrapper.removeClass(that._getAppearanceClasses());
            },

            _getAppearanceClasses: function() {
                var that = this,
                    widgetName = that.__proto__.options.name,
                    roundedClass = kendo.cssProperties.getValidClass({
                        widget: widgetName,
                        propName: "rounded",
                        value: that.options.rounded
                    });

                return roundedClass;
            },

            _renderButtons: function() {
                var that = this;

                that._mainButton();
                that._arrowButton();
            },

            _mainButton: function() {
                var that = this,
                    options = extend({}, that.options, {
                        type: that.element.attr("type") || "button"
                    });

                delete options.click;

                html.renderButton(that.element, options);
            },

            _arrowButton: function() {
                var that = this,
                    options = extend({}, that.options, {
                        type: "button",
                        icon: that.options.arrowIcon,
                    });

                delete options.text;
                delete options.imageUrl;
                delete options.click;
                delete options.iconClass;

                html.renderButton(that.arrowButton, options);
            },

            _aria: function() {
                var that = this,
                    element = that.element,
                    menu = that.menu;

                element.attr(ARIA_HASPOPUP, menu ? "menu" : null);
                element.attr(ARIA_EXPANDED, menu ? false : null);
                element.attr(ARIA_CONTROLS, menu ? menu.list.attr(ID) : null);

                if (!element.attr(ARIA_LABEL)) {
                    element.attr(ARIA_LABEL, element.text() + " " + that.options.messages.labelSuffix);
                }
            },

            _renderMenu: function() {
                var that = this,
                    options = extend({}, that.options),
                    menu = $("<div></div>");

                delete options.click;
                delete options.name;

                if (!options.items.length) {
                    return;
                }

                that.menu = menu.appendTo(that.wrapper).kendoButtonMenu(extend({
                    mainButton: that.element,
                    toggleTarget: that.arrowButton,
                    menuOpen: that.menuOpenHandler.bind(that),
                    menuClose: that.menuCloseHandler.bind(that),
                    menuClick: that._click.bind(that)
                }, options)).data("kendoButtonMenu");
            },

            menuOpenHandler: function(ev) {
                var that = this,
                    computedWidth = outerWidth(that.wrapper);

                var isDefaultPrevented = that.trigger(OPEN, { target: that.element });
                if (isDefaultPrevented) {
                    ev.preventDefault();
                    return;
                }

                ev.sender.adjustPopupWidth(computedWidth);
                that.element.attr(ARIA_EXPANDED, true);
            },

            menuCloseHandler: function(ev) {
                var that = this,
                    isDefaultPrevented = that.trigger(CLOSE, { target: that.element });

                if (isDefaultPrevented) {
                    ev.preventDefault();
                    return;
                }

                that.element.attr(ARIA_EXPANDED, false);
                that.element.trigger(FOCUS);
            },

            _attachEvents: function() {
                var that = this;

                that.element.on(CLICK + NS, that._click.bind(that));
                that.element.on(KEYDOWN + NS, that._keydown.bind(that));
                that.element.on(FOCUS + NS, that._focus.bind(that));
                that.element.on(BLUR + NS, that._blur.bind(that));
            },

            _focus: function() {
                this.wrapper.addClass(FOCUSSTATE);
            },

            _blur: function() {
                this.wrapper.removeClass(FOCUSSTATE);
            },

            _click: function(ev) {
                var that = this,
                    target = $(ev.target).closest(".k-button"),
                    id = target.attr(ID),
                    originalEvent = ev;

                if (ev.type === "menu-click") {
                    id = ev.id;
                    target = ev.target;
                    originalEvent = ev.originalEvent;
                }

                that.menu.close();

                that.trigger(CLICK, { id: id, target: target, originalEvent: originalEvent });
            },

            _keydown: function(ev) {
                var that = this;

                if (that.element.is(DOT + DISABLEDSTATE) && (ev.keyCode === keys.ENTER || ev.keyCode === keys.SPACEBAR)) {
                    ev.preventDefault();
                }
            },

            focus: function() {
                var that = this;
                that.element.trigger(FOCUS);
            },

            _enable: function(enable, soft) {
                this.element.add(this.arrowButton)
                    .toggleClass(DISABLEDSTATE, !enable);

                if (enable) {
                    this.element.removeAttr(ARIA_DISABLED);
                } else {
                    this.element.attr(ARIA_DISABLED, !enable);
                }

                if (!soft) {
                    this.element.attr(DISABLED, !enable);
                }

                this.arrowButton.attr(DISABLED, !enable);
            },

            enable: function(enable, menuItem, soft) {
                var that = this;

                if (enable === undefined$1) {
                    enable = true;
                }

                if (menuItem && menuItem.length) {
                    that.menu.enable(enable, menuItem);
                    return;
                }

                that.options.enabled = enable;

                that._enable(enable, soft);
                that.menu.enable(enable);
            },

            hide: function(menuItem) {
                var that = this;

                if (menuItem && menuItem.length) {
                    that.menu.hide(menuItem);
                }
            },

            show: function(menuItem) {
                var that = this;

                if (menuItem && menuItem.length) {
                    that.menu.show(menuItem);
                }
            },

            open: function() {
                this.menu._popup.open();
            },

            close: function() {
                this.menu._popup.close();
            },

            items: function() {
                return this.menu.items();
            },

            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                if (options.popup || options.items || options.size) {
                    that.menu.destroy();
                    that._renderMenu();
                }

                that._renderButtons();

                that._aria();
            },

            destroy: function() {
                var that = this;

                that.menu.destroy();

                that.element.off(NS);

                Widget.fn.destroy.call(that);
            }
        });

        kendo.cssProperties.registerPrefix("SplitButton", "k-splitbutton-");

        kendo.cssProperties.registerValues("SplitButton", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([["full", "full"]])
        }]);

        ui.plugin(SplitButton);

    })(window.kendo.jQuery);
    var kendo$t = kendo;

    var __meta__$y = {
        id: "dropdownbutton",
        name: "DropDownButton",
        category: "web",
        description: "The DropDownButton allows the user to execute an action from a drop-down list.",
        depends: ["button.menu", "html.button"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            NS = ".kendoDropDownButton",
            ui = kendo.ui,
            keys = kendo.keys,
            extend = $.extend,
            html = kendo.html,
            outerWidth = kendo._outerWidth,

            DOT = ".",
            ID = "id",

            ARIA_HASPOPUP = "aria-haspopup",
            ARIA_DISABLED = "aria-disabled",
            ARIA_CONTROLS = "aria-controls",
            ARIA_LABEL = "aria-label",
            ARIA_EXPANDED = "aria-expanded",

            DISABLED = "disabled",
            DISABLEDSTATE = "k-disabled",

            CLICK = "click",
            KEYDOWN = "keydown",
            OPEN = "open",
            CLOSE = "close",

            FOCUS = "focus";

        var cssClasses = {
            menuButton: "k-menu-button",
            dropdownButton: "k-dropdown-button"
        };

        var DropDownButton = Widget.extend({
            init: function(element, options) {
                var that = this;

                options.enabled = options.enabled !== false && !$(element).prop(DISABLED);
                Widget.fn.init.call(that, element, options);

                that.wrapper = that.element;

                that._mainButton();
                that._renderMenu();

                that._enable(that.options.enabled);

                that._aria();

                that._attachEvents();

                kendo.notify(that);

                that._applyCssClasses();
            },

            options: {
                name: "DropDownButton",
                direction: "down",
                enabled: true,
                items: [],
                rounded: "medium",
                size: "medium",
                fillMode: "solid",
                themeColor: "base",
                icon: null,
                popup: null,
                messages: {
                    labelSuffix: "dropdownbutton"
                }
            },

            events: [
                CLICK,
                OPEN,
                CLOSE
            ],

            _mainButton: function() {
                var that = this,
                    options = extend({}, that.options, {
                        type: that.element.attr("type") || "button"
                    });

                delete options.click;

                that.element.addClass(cssClasses.menuButton).addClass(cssClasses.dropdownButton);

                html.renderButton(that.element, options);
            },

            _aria: function() {
                var that = this,
                    element = that.element,
                    menu = that.menu;

                element.attr(ARIA_HASPOPUP, menu ? "menu" : null);
                element.attr(ARIA_EXPANDED, menu ? false : null);
                element.attr(ARIA_CONTROLS, menu ? menu.list.attr(ID) : null);

                if (!element.attr(ARIA_LABEL)) {
                    element.attr(ARIA_LABEL, element.text() + " " + that.options.messages.labelSuffix);
                }
            },

            _renderMenu: function() {
                var that = this,
                    options = extend({}, that.options),
                    menu = $("<div></div>");

                delete options.click;
                delete options.name;

                if (!options.items.length) {
                    return;
                }

                that.menu = menu.appendTo(document.body).kendoButtonMenu(extend({
                    mainButton: that.element,
                    toggleTarget: that.element,
                    menuOpen: that.menuOpenHandler.bind(that),
                    menuClose: that.menuCloseHandler.bind(that),
                    menuClick: that._click.bind(that)
                }, options)).data("kendoButtonMenu");
            },

            menuOpenHandler: function(ev) {
                var that = this,
                    computedWidth = outerWidth(that.element);

                var isDefaultPrevented = that.trigger(OPEN, { target: that.element });
                if (isDefaultPrevented) {
                    ev.preventDefault();
                    return;
                }

                ev.sender.adjustPopupWidth(computedWidth);
                that.element.attr(ARIA_EXPANDED, true);
            },

            menuCloseHandler: function(ev) {
                var that = this,
                    isDefaultPrevented = that.trigger(CLOSE, { target: that.element });

                if (isDefaultPrevented) {
                    ev.preventDefault();
                    return;
                }

                that.element.attr(ARIA_EXPANDED, false);
                that.element.trigger(FOCUS);
            },

            _attachEvents: function() {
                var that = this;

                that.element.on(KEYDOWN + NS, that._keydown.bind(that));
            },

            _click: function(ev) {
                var that = this,
                    id = ev.id,
                    target = ev.target,
                    originalEvent = ev.originalEvent;

                that.menu.close();

                that.trigger(CLICK, { id: id, target: target, originalEvent: originalEvent });
            },

            _keydown: function(ev) {
                var that = this;

                if (that.element.is(DOT + DISABLEDSTATE) && (ev.keyCode === keys.ENTER || ev.keyCode === keys.SPACEBAR)) {
                    ev.preventDefault();
                }
            },

            focus: function() {
                var that = this;
                that.element.trigger(FOCUS);
            },

            _enable: function(enable, soft) {
                this.element
                    .toggleClass(DISABLEDSTATE, !enable);

                if (enable) {
                    this.element.removeAttr(ARIA_DISABLED);
                } else {
                    this.element.attr(ARIA_DISABLED, !enable);
                }

                if (!soft) {
                    this.element.attr(DISABLED, !enable);
                }
            },

            enable: function(enable, menuItem, soft) {
                var that = this;

                if (enable === undefined$1) {
                    enable = true;
                }

                if (menuItem && menuItem.length) {
                    that.menu.enable(enable, menuItem);
                    return;
                }

                that.options.enabled = enable;

                that._enable(enable, soft);
                that.menu.enable(enable);
            },

            hide: function(menuItem) {
                var that = this;

                if (menuItem && menuItem.length) {
                    that.menu.hide(menuItem);
                }
            },

            show: function(menuItem) {
                var that = this;

                if (menuItem && menuItem.length) {
                    that.menu.show(menuItem);
                }
            },

            open: function() {
                this.menu._popup.open();
            },

            close: function() {
                this.menu._popup.close();
            },

            items: function() {
                return this.menu.items();
            },

            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                if (options.popup || options.items || options.size) {
                    that.menu.destroy();
                    that._renderMenu();
                }

                that._mainButton();

                that._aria();
            },

            destroy: function() {
                var that = this;

                that.menu.destroy();

                that.element.off(NS);

                Widget.fn.destroy.call(that);
            }
        });

        ui.plugin(DropDownButton);

    })(window.kendo.jQuery);
    var kendo$s = kendo;

    var __meta__$x = {
        id: "menu",
        name: "Menu",
        category: "web",
        description: "The Menu widget displays hierarchical data as a multi-level menu.",
        depends: [ "popup", "data", "data.odata" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            activeElement = kendo._activeElement,
            touch = (kendo.support.touch && kendo.support.mobileOS),
            isArray = Array.isArray,
            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
            MOUSEDOWN = "mousedown",
            CLICK = "click",
            DELAY = 30,
            SCROLLSPEED = 50,
            extend = $.extend,
            each = $.each,
            encode = kendo.htmlEncode,
            template = kendo.template,
            keys = kendo.keys,
            Widget = ui.Widget,
            excludedNodesRegExp = /^(ul|a|div)$/i,
            NS = ".kendoMenu",
            IMG = "img",
            OPEN = "open",
            MENU = "k-menu",
            LINK = "k-link k-menu-link",
            LINK_SELECTOR = ".k-link",
            ICON_SELECTOR = ".k-menu-expand-arrow-icon",
            LAST = "k-last",
            CLOSE = "close",
            TIMER = "timer",
            FIRST = "k-first",
            IMAGE = "k-image",
            SELECT = "select",
            ZINDEX = "zIndex",
            ACTIVATE = "activate",
            DEACTIVATE = "deactivate",
            POINTERDOWN = "touchstart" + NS + " MSPointerDown" + NS + " pointerdown" + NS,
            pointers = kendo.support.pointers,
            msPointers = kendo.support.msPointers,
            allPointers = msPointers || pointers,
            CHANGE = "change",
            ERROR = "error",
            TOUCHSTART = kendo.support.touch ? "touchstart" : "",
            MOUSEENTER = pointers ? "pointerover" : (msPointers ? "MSPointerOver" : "mouseenter"),
            MOUSELEAVE = pointers ? "pointerout" : (msPointers ? "MSPointerOut" : "mouseleave"),
            MOUSEWHEEL = "DOMMouseScroll" + NS + " mousewheel" + NS,
            RESIZE = kendo.support.resize + NS,
            SCROLLWIDTH = "scrollWidth",
            SCROLLHEIGHT = "scrollHeight",
            OFFSETWIDTH = "offsetWidth",
            OFFSETHEIGHT = "offsetHeight",
            POPUP_ID_ATTR = "group",
            POPUP_OPENER_ATTR = "groupparent",
            DOCUMENT_ELEMENT = $(document.documentElement),
            KENDOPOPUP = "kendoPopup",
            HOVERSTATE = "k-hover",
            FOCUSEDSTATE = "k-focus",
            DISABLEDSTATE = "k-disabled",
            SELECTEDSTATE = "k-selected",
            menuSelector = ".k-menu",
            groupSelector = ".k-menu-group",
            animationContainerSelector = ".k-animation-container",
            childAnimationContainerSelector = ".k-child-animation-container",
            popupSelector = ".k-menu-popup ," + animationContainerSelector,
            allItemsSelector = ":not(.k-list) > .k-item:not([role='treeitem'])",
            disabledSelector = ".k-item.k-disabled",
            itemSelector = ".k-item",
            availableItemsSelector = ".k-item:not(.k-disabled)",
            linkSelector = ".k-item:not(.k-disabled) > .k-link",
            exclusionSelector = ":not(.k-item.k-separator):visible",
            templateSelector = "div:not(.k-animation-container,.k-list-container)",
            scrollButtonSelector = ".k-menu-scroll-button",
            touchPointerTypes = { "2": 1, "touch": 1 },
            STRING = "string",
            DATABOUND = "dataBound",
            ARIA_EXPANDED = "aria-expanded",
            ROLE = "role",

            bindings = {
                text: "dataTextField",
                url: "dataUrlField",
                spriteCssClass: "dataSpriteCssClassField",
                imageUrl: "dataImageUrlField",
                imageAttr: "dataImageAttrField",
                content: "dataContentField"
            },

            rendering = {
                wrapperCssClass: function(group, item) {
                    var result = "k-item k-menu-item",
                        index = item.index;

                    if (item.separator) {
                        result += " k-separator";
                    }

                    if (item.enabled === false) {
                        result += " k-disabled";
                    }

                    if (group.firstLevel && index === 0) {
                        result += " k-first";
                    }

                    if (index == group.length - 1) {
                        result += " k-last";
                    }

                    if (item.cssClass) {
                        result += " " + item.cssClass;
                    }

                    if (item.attr && item.attr.hasOwnProperty("class")) {
                        result += " " + item.attr["class"];
                    }

                    if (item.selected) {
                        result += " " + SELECTEDSTATE;
                    }

                    return result;
                },

                itemCssAttributes: function(item) {
                    var result = "";
                    var attributes = item.attr || {};

                    for (var attr in attributes) {
                        if (attributes.hasOwnProperty(attr) && attr !== "class") {
                            result += attr + "=\"" + attributes[attr] + "\" ";
                        }
                    }

                    return result;
                },

                imageCssAttributes: function(imgAttributes) {
                    var result = "";
                    var attributes = imgAttributes && imgAttributes.toJSON ? imgAttributes.toJSON() : {};

                    if (!attributes['class']) {
                        attributes['class'] = IMAGE;
                    } else {
                        attributes['class'] += " " + IMAGE;
                    }

                    for (var attr in attributes) {
                        if (attributes.hasOwnProperty(attr)) {
                            result += attr + "=\"" + attributes[attr] + "\" ";
                        }
                    }

                    return result;
                },

                contentCssAttributes: function(item) {
                    var result = "";
                    var attributes = item.contentAttr || {};
                    var defaultClasses = "k-content k-group k-menu-group k-menu-group-md";

                    if (!attributes['class']) {
                        attributes['class'] = defaultClasses;
                    } else {
                        attributes['class'] += " " + defaultClasses;
                    }

                    for (var attr in attributes) {
                        if (attributes.hasOwnProperty(attr)) {
                            result += attr + "=\"" + attributes[attr] + "\" ";
                        }
                    }

                    return result;
                },

                textClass: function() {
                    return LINK;
                },

                groupAttributes: function(group) {
                    return group.expanded !== true ? ((kendo.attr("style-display")) + "=\"none\"") : "";
                },

                groupCssClass: function() {
                    return "k-group k-menu-group k-menu-group-md";
                },

                groupWrapperCssClass: function() {
                    return "k-menu-popup";
                },

                content: function(item) {
                    return item.content ? item.content : "&nbsp;";
                }
        };

        function getEffectDirection(direction, root) {
            direction = direction.split(" ")[!root + 0] || direction;
            return direction.replace("top", "up").replace("bottom", "down");
        }

        function parseDirection(direction, root, isRtl) {
            direction = direction.split(" ")[!root + 0] || direction;
            var output = { origin: ["bottom", (isRtl ? "right" : "left")], position: ["top", (isRtl ? "right" : "left")] },
                horizontal = /left|right/.test(direction);

            if (horizontal) {
                output.origin = [ "top", direction ];
                output.position[1] = kendo.directions[direction].reverse;
            } else {
                output.origin[0] = direction;
                output.position[0] = kendo.directions[direction].reverse;
            }

            output.origin = output.origin.join(" ");
            output.position = output.position.join(" ");

            return output;
        }

        function contains(parent, child) {
            try {
                return $.contains(parent, child);
            } catch (e) {
                return false;
            }
        }

        function updateItemClasses(item) {
            item = $(item);
            var omitWrap = item.attr(kendo.attr("omit-wrap"));

            if (omitWrap) {
                return;
            }

            item.addClass("k-item k-menu-item")
                .children(IMG)
                .addClass(IMAGE);

            item
                .children("a")
                .addClass(LINK)
                .children(IMG)
                .addClass(IMAGE);

            item
                .filter(":not([disabled])");

            item
                .filter(".k-separator")
                .removeClass("k-menu-item")
                .addClass("k-menu-separator")
                .empty()
                .append("&nbsp;");

            item
                .filter("li[disabled]")
                .addClass(DISABLEDSTATE)
                .prop("disabled", false)
                .attr("aria-disabled", true);

            if (!item.filter("[role]").length) {
                item.attr(ROLE, "menuitem");
            }

            if (!item.children(LINK_SELECTOR).length) {
                item.contents() // exclude groups, real links, templates and empty text nodes
                    .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType === 3 && !kendo.trim(this.nodeValue))); })
                    .wrapAll("<span class='" + LINK + "'></span>")
                    .filter(function(idx, elm) { return elm.nodeType === 3; })
                    .wrap("<span class='k-menu-link-text'></span>");
            }

            updateArrow(item);
            updateFirstLast(item);
        }

        function updateArrow(item) {
            item = $(item);
            item.find("> .k-link > .k-menu-expand-arrow > [class*=k-i-caret]:not(.k-sprite),> .k-link > .k-menu-expand-arrow > [class*=k-svg-i-caret]:not(.k-sprite)").parent().remove();

            item.filter(":has(.k-menu-group)")
                .children(".k-link:not(:has([class*=k-i-caret]:not(.k-sprite))),.k-link:not(:has([class*=k-svg-i-caret]:not(.k-sprite)))")
                .each(function() {
                    var item = $(this);

                    item.append(("<span aria-hidden='true' class='k-menu-expand-arrow'>" + (kendo.ui.icon({ icon: getArrowIconName(item), iconClass: "k-menu-expand-arrow-icon" })) + "</span>"));
                });
        }

        function getArrowIconName(item) {
            var arrowIconName,
                parent = item.parent().parent(),
                isRtl = kendo.support.isRtl(parent);

            if (parent.hasClass(MENU + "-horizontal")) {
                arrowIconName = "caret-alt-down";
            } else {
                if (isRtl) {
                    arrowIconName = "caret-alt-left";
                }
                else {
                    arrowIconName = "caret-alt-right";
                }
            }
            return arrowIconName;
        }

        function updateFirstLast(item) {
            item = $(item);

            item.filter(".k-first:not(:first-child)").removeClass(FIRST);
            item.filter(".k-last:not(:last-child)").removeClass(LAST);
            item.filter(":first-child").addClass(FIRST);
            item.filter(":last-child").addClass(LAST);
        }

        function updateHasAriaPopup(parents) {
            if (parents && parents.length) {
                for (var index in parents) {
                    var parentLi = parents.eq(index);
                    if (parentLi.find("ul").length) {
                        parentLi.attr("aria-haspopup", true);
                    } else {
                        parentLi.removeAttr("aria-haspopup");
                    }
                }
            }
        }

        function getParentLiItems(group) {
            if (!group.hasClass(MENU)) {
                return group.parentsUntil("." + MENU, "li");
            }
        }

        function storeItemSelectEventHandler(element, options) {
            var selectHandler = getItemSelectEventHandler(options);
            if (selectHandler) {
                setItemData(element, selectHandler);
            }

            if (options.items) {
                $(element).children("ul").children("li").each(function(i) {
                    storeItemSelectEventHandler(this, options.items[i]);
                });
            }
        }

        function setItemData(element, selectHandler) {
            $(element).children(".k-link").data({
                selectHandler: selectHandler
            });
        }

        function getItemSelectEventHandler(options) {
            var selectHandler = options.select,
                isFunction = kendo.isFunction;

            if (selectHandler && isFunction(selectHandler)) {
                return selectHandler;
            }
            return null;
        }

        function popupOpenerSelector(id) {
            return id ? "li[data-groupparent='" + id + "']" : "li[data-groupparent]";
        }
        function popupGroupSelector(id) {
            var selector = id ? "[data-group='" + id + "']" : "[data-group]";
            return "ul" + selector + ",div" + selector;
        }
        function getChildPopups(currentPopup, overflowWrapper) {
            var childPopupOpener = currentPopup.find(popupOpenerSelector());
            var result = [];
            childPopupOpener.each(function(i, opener) {
                opener = $(opener);
                var popupId = opener.data(POPUP_OPENER_ATTR);
                var popup = currentPopup;
                while (popupId) {
                    popup = overflowWrapper.find(popupGroupSelector(popupId) + ":visible");
                    if (popup.length) {
                        result.push(popup);
                    }
                    opener = popup.find(popupOpenerSelector());
                    popupId = opener.data(POPUP_OPENER_ATTR);
                }
            });

            return result;
        }

        function popupParentItem(popupElement, overflowWrapper) {
            var popupId = popupElement.data(POPUP_ID_ATTR);
            return popupId ? overflowWrapper.find(popupOpenerSelector(popupId)) : $([]);
        }

        function itemPopup(item, overflowWrapper) {
            var popupId = item.data(POPUP_OPENER_ATTR);
            return popupId ? overflowWrapper.children(animationContainerSelector).find(popupGroupSelector(popupId)) : $([]);
        }

        function overflowMenuParents(current, overflowWrapper) {
            var parents = [];
            var getParents = function(item) {
                while (item.parentNode && !overflowWrapper.is(item.parentNode)) {
                    parents.push(item.parentNode);
                    item = item.parentNode;
                }
            };
            var elem = current[0] || current;
            getParents(elem);
            var last = parents[parents.length - 1];
            while ($(last).is(animationContainerSelector)) {
                var popupElement = $(last).find(popupSelector);
                elem = popupParentItem(popupElement, overflowWrapper)[0];
                if (!elem) {
                    break;
                }
                parents.push(elem);
                getParents(elem);
                last = parents[parents.length - 1];
            }
            return parents;
        }

        function mousewheelDelta(e) {
            var delta = 0;

            if (e.wheelDelta) {
                delta = -e.wheelDelta / 120;
                delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
            }

            if (e.detail) {
                delta = Math.round(e.detail / 3);
            }

            return delta;
        }

        function parentsScroll(current, scrollDirection) {
            var scroll = 0;
            var parent = current.parentNode;
            while (parent && !isNaN(parent[scrollDirection])) {
                scroll += parent[scrollDirection];
                parent = parent.parentNode;
            }
            return scroll;
        }

        function isPointerTouch(e) {
            return allPointers && e.originalEvent && e.originalEvent.pointerType in touchPointerTypes;
        }

        function isTouch(e) {
            var ev = e.originalEvent;
            return touch && /touch/i.test(ev.type || "");
        }

        function removeSpacesBetweenItems(ul) {
            ul.contents().filter(function() { return this.nodeName != "LI"; }).remove();
        }

        var Menu = kendo.ui.DataBoundWidget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                element = that.wrapper = that.element;
                options = that.options;
                that._accessors();
                that._templates();
                that._dataSource();

                that._updateClasses();
                that._wrapGroups();

                that._animations(options);

                that.nextItemZIndex = 100;

                that._tabindex();

                that._initOverflow(options);

                that._attachMenuEventsHandlers();

                if (options.openOnClick) {
                    that.clicked = false;
                }

                element.attr(ROLE, "menubar");

                if (element[0].id) {
                    that._ariaId = kendo.format("{0}_mn_active", element[0].id);
                } else {
                    that._ariaId = kendo.format("{0}_mn_active", kendo.guid());
                }

                kendo.notify(that);
            },

            events: [
                OPEN,
                CLOSE,
                ACTIVATE,
                DEACTIVATE,
                SELECT,
                DATABOUND
            ],

            options: {
                name: "Menu",
                animation: {
                    open: {
                        duration: 200
                    },
                    close: { // if close animation effects are defined, they will be used instead of open.reverse
                        duration: 100
                    }
                },
                orientation: "horizontal",
                direction: "default",
                openOnClick: false,
                closeOnClick: true,
                hoverDelay: 100,
                scrollable: false,
                popupCollision: undefined$1
            },

            _initData: function() {
                var that = this;

                if (that.dataSource) {
                    that.element.empty();

                    that.append(that.dataSource.view(), that.element);
                }
            },

            _attachMenuEventsHandlers: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var overflowWrapper = that._overflowWrapper();

                that._checkActiveProxy = that._checkActiveElement.bind(that);

                (overflowWrapper || element).on(POINTERDOWN, itemSelector, that._focusHandler.bind(that))
                       .on(CLICK + NS, disabledSelector, false)
                       .on(CLICK + NS, itemSelector, that._click.bind(that))
                       .on(POINTERDOWN + " " + MOUSEDOWN + NS, ".k-content", that._preventClose.bind(that))
                       .on(MOUSEENTER + NS, availableItemsSelector, that._mouseenter.bind(that))
                       .on(MOUSELEAVE + NS, availableItemsSelector, that._mouseleave.bind(that))
                       .on(MOUSEDOWN + NS, availableItemsSelector, that._mousedown.bind(that))
                       .on(TOUCHSTART + NS + " " + MOUSEENTER + NS + " " + MOUSELEAVE + NS + " " +
                           MOUSEDOWN + NS + " " + CLICK + NS, linkSelector, that._toggleHover.bind(that));

                element.on("keydown" + NS, that._keydown.bind(that))
                       .on("focus" + NS, that._focus.bind(that))
                       .on("focus" + NS, ".k-content", that._focus.bind(that))
                       .on("blur" + NS, that._removeHoverItem.bind(that))
                       .on("blur" + NS, "[tabindex]", that._checkActiveProxy);

                if (overflowWrapper) {
                    overflowWrapper
                        .on(MOUSELEAVE + NS, popupSelector, that._mouseleavePopup.bind(that))
                        .on(MOUSEENTER + NS, popupSelector, that._mouseenterPopup.bind(that));
                }

                if (options.openOnClick) {
                    that._documentClickHandler = that._documentClick.bind(that);
                    $(document).on("click", that._documentClickHandler);
                }
            },

            _detachMenuEventsHandlers: function() {
                var that = this;
                var overflowWrapper = that._overflowWrapper();

                if (overflowWrapper) {
                    overflowWrapper.off(NS);
                }

                that.element.off(NS);

                if (that._documentClickHandler) {
                    $(document).off("click", that._documentClickHandler);
                }
            },

            _initOverflow: function(options) {
                var that = this;
                var isHorizontal = options.orientation == "horizontal";
                var backwardBtn, forwardBtn;

                if (options.scrollable) {
                    that._openedPopups = {};
                    that._scrollWrapper = that.element.wrap("<div class='k-menu-scroll-wrapper k-" + options.orientation + "'></div>").parent();
                    if (isHorizontal) {
                        removeSpacesBetweenItems(that.element);
                    }

                    backwardBtn = $(that.templates.scrollButton({ direction: isHorizontal ? "left" : "up" }));
                    forwardBtn = $(that.templates.scrollButton({ direction: isHorizontal ? "right" : "down" }));
                    backwardBtn.add(forwardBtn).appendTo(that._scrollWrapper);

                    that._initScrolling(that.element, backwardBtn, forwardBtn, isHorizontal);

                    var initialWidth = that.element.outerWidth();
                    var initialCssWidth = that.element[0].style.width;
                    initialCssWidth = initialCssWidth === "auto" ? "" : initialCssWidth;

                    if (isHorizontal) {
                        $(window).on(RESIZE, function() {
                            setTimeout(function() {
                                that._setOverflowWrapperWidth(initialWidth, initialCssWidth);
                                that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);
                            }, 300);
                        });
                    }

                    that._setOverflowWrapperWidth(initialWidth, initialCssWidth);
                    that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);
                }
            },

            _overflowWrapper: function() {
                return this._scrollWrapper || this._popupsWrapper;
            },

            _setOverflowWrapperWidth: function(initialWidth, initialCssWidth) {
                var that = this;
                var wrapperCssWidth = that._scrollWrapper.css("width");

                that._scrollWrapper.css({ width: "" });
                var wrapperWidth = that._scrollWrapper.outerWidth();
                that._scrollWrapper.css({ width: wrapperCssWidth });

                var menuWidth = that.element.outerWidth();
                var borders = that.element[0].offsetWidth - that.element[0].clientWidth;

                if (menuWidth != wrapperWidth && wrapperWidth > 0) {
                    var width = initialCssWidth ? Math.min(initialWidth, wrapperWidth) : wrapperWidth;
                    that.element.width(width - borders);
                    that._scrollWrapper.width(width);
                }
            },

            _reinitOverflow: function(options) {
                var that = this;
                var overflowChanged = ((options.scrollable && !that.options.scrollable) || (!options.scrollable && that.options.scrollable)) ||
                    (options.scrollable && that.options.scrollable && options.scrollable.distance != that.options.scrollable.distance) ||
                    options.orientation != that.options.orientation;

                if (overflowChanged) {
                    that._detachMenuEventsHandlers();
                    that._destroyOverflow();
                    that._initOverflow(options);
                    that._attachMenuEventsHandlers();
                }
            },

            _destroyOverflow: function() {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                if (overflowWrapper) {
                    overflowWrapper.off(NS);
                    overflowWrapper.find(scrollButtonSelector).off(NS).remove();
                    overflowWrapper.children(animationContainerSelector).each(function(i, popupWrapper) {
                        var ul = $(popupWrapper).find(".k-child-animation-container > .k-menu-popup");
                        ul.off(MOUSEWHEEL);
                        var popupParentLi = popupParentItem(ul, overflowWrapper);
                        if (popupParentLi.length) {
                            popupParentLi.append(popupWrapper);
                        }
                    });

                    overflowWrapper.find(popupOpenerSelector()).removeAttr("data-groupparent");
                    overflowWrapper.find(popupGroupSelector()).removeAttr("data-group");
                    that.element.off(MOUSEWHEEL);
                    $(window).off(RESIZE);
                    overflowWrapper.contents().unwrap();

                    that._scrollWrapper = that._popupsWrapper = that._openedPopups = undefined$1;
                }
            },

            _initScrolling: function(scrollElement, backwardBtn, forwardBtn, isHorizontal) {
                var that = this;
                var scrollable = that.options.scrollable;
                var distance = that.isNumeric(scrollable.distance) ? scrollable.distance : SCROLLSPEED;
                var mouseWheelDistance = distance / 2;
                var backward = "-=" + distance;
                var forward = "+=" + distance;
                var backwardDouble = "-=" + distance * 2;
                var forwardDouble = "+=" + distance * 2;
                var scrolling = false;
                var touchEvents = false;

                var scroll = function(value) {
                    var scrollValue = isHorizontal ? { "scrollLeft": value } : { "scrollTop": value };
                    scrollElement.finish().animate(scrollValue, "fast", "linear", function() {
                        if (scrolling) {
                            scroll(value);
                        }
                    });
                    that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
                };

                var mouseenterHandler = function(e) {
                    if (!scrolling && !touchEvents) {
                        scroll(e.data.direction);
                        scrolling = true;
                    }
                };

                var mousedownHandler = function(e) {
                    var scrollValue = isHorizontal ? { "scrollLeft": e.data.direction } : { "scrollTop": e.data.direction };
                    touchEvents = isTouch(e) || isPointerTouch(e);
                    scrollElement.stop().animate(scrollValue, "fast", "linear", function() {
                        if (!touchEvents) {
                            $(e.currentTarget).trigger(MOUSEENTER);
                        } else {
                             that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
                             scrolling = true;
                        }
                    });
                    scrolling = false;

                    e.stopPropagation();
                    e.preventDefault();
                };

                backwardBtn.on(MOUSEENTER + NS, { direction: backward }, mouseenterHandler)
                    .on(kendo.eventMap.down + NS, { direction: backwardDouble }, mousedownHandler);

                forwardBtn.on(MOUSEENTER + NS, { direction: forward }, mouseenterHandler)
                    .on(kendo.eventMap.down + NS, { direction: forwardDouble }, mousedownHandler);

                backwardBtn.add(forwardBtn)
                    .on(MOUSELEAVE + NS, function() {
                        scrollElement.stop();
                        scrolling = false;
                        that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
                    });

                scrollElement.on(MOUSEWHEEL, function(e) {
                    if (!e.ctrlKey && !e.shiftKey && !e.altKey) {
                        var wheelDelta = mousewheelDelta(e.originalEvent);
                        var scrollSpeed = Math.abs(wheelDelta) * mouseWheelDistance;
                        var value = (wheelDelta > 0 ? "+=" : "-=") + scrollSpeed;
                        var scrollValue = isHorizontal ? { "scrollLeft": value } : { "scrollTop": value };

                        that._closeChildPopups(scrollElement);

                        scrollElement.finish().animate(scrollValue, "fast", "linear", function() {
                            that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
                        });
                        e.preventDefault();
                    }
                });
            },

            isNumeric: function(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
            },

            _toggleScrollButtons: function(scrollElement, backwardBtn, forwardBtn, horizontal) {
                var currentScroll = horizontal ? kendo.scrollLeft(scrollElement) : scrollElement.scrollTop();
                var scrollSize = horizontal ? SCROLLWIDTH : SCROLLHEIGHT;
                var offset = horizontal ? OFFSETWIDTH : OFFSETHEIGHT;

                backwardBtn.toggle(currentScroll !== 0);
                forwardBtn.toggle(currentScroll < scrollElement[0][scrollSize] - scrollElement[0][offset] - 1);
            },

            setOptions: function(options) {
                var animation = this.options.animation;

                this._animations(options);

                options.animation = extend(true, animation, options.animation);

                if ("dataSource" in options) {
                    this._dataSource(options);
                }

                this._updateClasses();
                this._wrapGroups();
                this._reinitOverflow(options);

                Widget.fn.setOptions.call(this, options);
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that._detachMenuEventsHandlers();

                that._destroyOverflow();

                kendo.destroy(that.element);
            },

            enable: function(element, enable) {
                this._toggleDisabled(element, enable !== false);

                return this;
            },

            disable: function(element) {
                this._toggleDisabled(element, false);

                return this;
            },

            attemptGetItem: function(candidate) {
                candidate = candidate || this.element;
                var item = this.element.find(candidate);
                var overflowWrapper = this._overflowWrapper();

                if (item.length || candidate === this.element) {
                    return item;
                } else if (overflowWrapper) {
                    return overflowWrapper.find(candidate);
                } else {
                    return $();
                }
            },

            append: function(item, referenceItem) {
                referenceItem = this.attemptGetItem(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.length ? this._childPopupElement(referenceItem).children().eq(0) : null);

                each(inserted.items, function(i) {
                    inserted.group.append(this);
                    updateArrow(this);
                    storeItemSelectEventHandler(this, item[i] || item);
                });

                updateArrow(referenceItem);
                updateFirstLast(inserted.group.find(".k-first, .k-last").add(inserted.items));
                updateHasAriaPopup(getParentLiItems(inserted.group));

                return this;
            },

            insertBefore: function(item, referenceItem) {
                referenceItem = this.attemptGetItem(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.parent());

                each(inserted.items, function(i) {
                    referenceItem.before(this);
                    updateArrow(this);
                    updateFirstLast(this);
                    storeItemSelectEventHandler(this, item[i] || item);
                });

                updateFirstLast(referenceItem);

                return this;
            },

            insertAfter: function(item, referenceItem) {
                referenceItem = this.attemptGetItem(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.parent());

                each(inserted.items, function(i) {
                    referenceItem.after(this);
                    updateArrow(this);
                    updateFirstLast(this);
                    storeItemSelectEventHandler(this, item[i] || item);
                });

                updateFirstLast(referenceItem);

                return this;
            },

            _insert: function(item, referenceItem, parent) {
                var that = this,
                    items, groups;

                if (!referenceItem || !referenceItem.length) {
                    parent = that.element;
                }

                var plain = $.isPlainObject(item) || item instanceof kendo.data.ObservableObject,
                    groupData = {
                        firstLevel: parent.hasClass(MENU),
                        horizontal: parent.hasClass(MENU + "-horizontal"),
                        expanded: true,
                        length: parent.children().length
                    };

                if (referenceItem && !parent.length) {
                    parent = $(that.renderGroup({ group: groupData, options: that.options })).css("display", "none").appendTo(referenceItem);
                    kendo.applyStylesFromKendoAttributes(parent, ["display"]);
                }

                if (plain || isArray(item) || item instanceof kendo.data.ObservableArray) { // is JSON
                    items = $($.map(plain ? [ item ] : item, function(value, idx) {
                                if (typeof value === "string") {
                                    return $(value).get();
                                } else {
                                    var itemElement = $(that.renderItem({
                                        group: groupData,
                                        item: extend(value, { index: idx })
                                    }));

                                    kendo.applyStylesFromKendoAttributes(itemElement, ["display"]);
                                    return itemElement.get();
                                }
                            }));
                } else {
                    if (typeof item == "string" && item.charAt(0) != "<") {
                        items = that.element.find(item);
                    } else {
                        items = $(item);
                    }

                    groups = items.find("> ul")
                                    .addClass("k-menu-group k-menu-group-md")
                                    .attr(ROLE, "menu");

                    items = items.filter("li");

                    items.add(groups.find("> li")).each(function() {
                        updateItemClasses(this);
                    });
                }

                return { items: items, group: parent };
            },

            remove: function(element) {
                element = this.attemptGetItem(element);

                var that = this,
                    parent = element.parentsUntil(that.element, allItemsSelector),
                    group = element.parent("ul:not(.k-menu)");

                element.remove();

                if (group && !group.children(allItemsSelector).length) {
                    var parentItems = getParentLiItems(group);

                    var container = group.parent(animationContainerSelector);

                    if (container.length) {
                        container.remove();
                    } else {
                        group.remove();
                    }

                    updateHasAriaPopup(parentItems);
                }

                if (parent.length) {
                    parent = parent.eq(0);

                    updateArrow(parent);
                    updateFirstLast(parent);
                }

                return that;
            },

            _openAfterLoad: function(element, dataItem) {
                var that = this;
                if (dataItem.loaded()) {
                    that.open(element);
                    that._loading = false;
                } else {
                    dataItem.one(CHANGE, function() {
                        element.find(ICON_SELECTOR).removeClass("k-i-loading");
                        if (that._loading) {
                            that.open(element);
                            that._loading = false;
                        }
                    });
                }
            },

            open: function(element) {
                var that = this;
                var options = that.options;
                var horizontal = options.orientation == "horizontal";
                var direction = options.direction;
                var isRtl = kendo.support.isRtl(that.wrapper);
                var overflowWrapper = that._overflowWrapper();
                element = (overflowWrapper || that.element).find(element);

                var dataItem = that.dataSource && that.dataSource.getByUid(element.data(kendo.ns + "uid"));

                if (dataItem && dataItem.hasChildren && !dataItem.loaded() && !that._loading) {
                    that._loading = true;
                    element.find(ICON_SELECTOR).addClass("k-i-loading");
                    dataItem.load();
                    that._openAfterLoad(element, dataItem);
                    return;
                }

                if (/^(top|bottom|default)$/.test(direction)) {
                    if (isRtl) {
                        direction = horizontal ? (direction + " left").replace("default", "bottom") : "left";
                    } else {
                        direction = horizontal ? (direction + " right").replace("default", "bottom") : "right";
                    }
                }

                var visiblePopups = ">.k-popup:visible,>.k-animation-container > .k-child-animation-container > .k-menu-popup:visible";
                var closePopup = function() {
                    var popup = $(this).data(KENDOPOPUP);
                    if (popup) {
                        // Use the built-in close method to play the hoverDelay from the options
                        that.close($(this).closest("li.k-item"), true);
                    }
                };

                element.siblings()
                       .find(visiblePopups)
                       .each(closePopup);

                if (overflowWrapper) {
                    element.find(visiblePopups).each(closePopup);
                }

                if (that.options.openOnClick) {
                    that.clicked = true;
                }

                element.each(function() {
                    var li = $(this);

                    clearTimeout(li.data(TIMER));
                    clearTimeout(that._timerTimeout);
                    that._timerTimeout = setTimeout(function() {
                        var div = li.find("> .k-menu-popup, > .k-animation-container > .k-child-animation-container > .k-menu-popup").filter(":hidden").first();
                        var popup;
                        var overflowPopup;

                        if (!div[0] && overflowWrapper) {
                            overflowPopup = that._getPopup(li);
                            div = overflowPopup && overflowPopup.element;
                        }
                        if (div.is(":visible")) {
                            return;
                        }

                        if (div[0] && that._triggerEvent({ item: li[0], type: OPEN }) === false) {

                            if (!div.find(".k-menu-popup")[0] && div.children(".k-menu-group").children(".k-item").length > 1) {
                                var windowHeight = $(window).height(),
                                    setScrolling = function() {
                                        div.css({ maxHeight: windowHeight - (kendo._outerHeight(div) - div.height()) - kendo.getShadows(div).bottom, overflow: "auto" });
                                    };

                                setScrolling();
                            } else {
                                div.css({ maxHeight: "", overflow: "visible" });
                            }

                            li.data(ZINDEX, li.css(ZINDEX));
                            var nextZindex = that.nextItemZIndex++;
                            li.css(ZINDEX, nextZindex);

                            if (that.options.scrollable) {
                                li.parent().siblings(scrollButtonSelector).css({ zIndex: ++nextZindex });
                            }

                            popup = div.data(KENDOPOPUP);
                            var root = li.parent().hasClass(MENU),
                                parentHorizontal = root && horizontal,
                                directions = parseDirection(direction, root, isRtl),
                                effects = options.animation.open.effects,
                                openEffects = effects !== undefined$1 ? effects : "slideIn:" + getEffectDirection(direction, root);

                            if (!popup) {
                                popup = div.kendoPopup({
                                    activate: function() { that._triggerEvent({ item: this.wrapper.parent(), type: ACTIVATE }); },
                                    deactivate: function(e) {
                                        that._closing = false;
                                        e.sender.element // Restore opacity after fade.
                                            .removeData("targetTransform")
                                            .css({ opacity: "" });
                                        that._triggerEvent({ item: this.wrapper.parent(), type: DEACTIVATE });
                                    },
                                    origin: directions.origin,
                                    position: directions.position,
                                    collision: options.popupCollision !== undefined$1 ? options.popupCollision : (parentHorizontal ? "fit" : "fit flip"),
                                    anchor: li,
                                    appendTo: overflowWrapper || li,
                                    animation: {
                                        open: extend(true, { effects: openEffects }, options.animation.open),
                                        close: options.animation.close
                                    },
                                    open: that._popupOpen.bind(that),
                                    close: function(e) {
                                        that._closing = e.sender.element;
                                        var li = e.sender.wrapper.parent();

                                        if (overflowWrapper) {
                                            var popupId = e.sender.element.data(POPUP_ID_ATTR);
                                            if (popupId) {
                                                li = (overflowWrapper || that.element).find(popupOpenerSelector(popupId));
                                            }
                                            e.sender.wrapper.children(scrollButtonSelector).hide();
                                        }

                                        if (!that._triggerEvent({ item: li[0], type: CLOSE })) {
                                            li.css(ZINDEX, li.data(ZINDEX));
                                            li.removeData(ZINDEX);

                                            if (that.options.scrollable) {
                                                li.parent().siblings(scrollButtonSelector).css({ zIndex: "" });
                                            }

                                            if (touch || allPointers || kendo.support.mouseAndTouchPresent) {
                                                li.removeClass(HOVERSTATE);
                                                that._removeHoverItem();
                                            }
                                        } else {
                                            e.preventDefault();
                                        }
                                    }
                                }).data(KENDOPOPUP);

                                div.closest(animationContainerSelector).removeAttr(ROLE);
                            } else {
                                popup = div.data(KENDOPOPUP);
                                popup.options.origin = directions.origin;
                                popup.options.position = directions.position;
                                popup.options.animation.open.effects = openEffects;
                            }
                            div.removeAttr("aria-hidden");
                            li.attr(ARIA_EXPANDED, true);

                            that._configurePopupOverflow(popup, li);

                            popup._hovered = true;
                            popup.open();

                            that._initPopupScrolling(popup);
                        }

                    }, that.options.hoverDelay);

                    li.data(TIMER, that._timerTimeout);
                });

                return that;
            },

            _configurePopupOverflow: function(popup, popupOpener) {
                var that = this;
               if (that.options.scrollable) {
                    that._wrapPopupElement(popup);
                    if (!popupOpener.attr("data-groupparent")) {
                        var groupId = new Date().getTime();
                        popupOpener.attr("data-groupparent", groupId);
                        popup.element.attr("data-group", groupId);
                    }
               }
            },

            _wrapPopupElement: function(popup) {
                if (!popup.element.parent().is(childAnimationContainerSelector)) {
                    popup.wrapper = kendo.wrap(popup.element, popup.options.autosize)
                        .css({
                            overflow: "hidden",
                            display: "block",
                            position: "absolute"
                        });
                }
            },

            _initPopupScrolling: function(popup, isHorizontal, skipMouseEvents) {
                var that = this;

                if (that.options.scrollable && popup.element[0].scrollHeight > popup.element[0].offsetHeight) {
                    that._initPopupScrollButtons(popup, isHorizontal, skipMouseEvents);
                }
            },

            _initPopupScrollButtons: function(popup, isHorizontal, skipMouseEvents) {
                var that = this;
                var scrollButtons = popup.wrapper.children(scrollButtonSelector);
                var animation = that.options.animation;
                var timeout = ((animation && animation.open && animation.open.duration) || 0) + DELAY;
                setTimeout(function() {
                    if (!scrollButtons.length) {
                        var backwardBtn = $(that.templates.scrollButton({ direction: isHorizontal ? "left" : "up" }));
                        var forwardBtn = $(that.templates.scrollButton({ direction: isHorizontal ? "right" : "down" }));

                        scrollButtons = backwardBtn.add(forwardBtn).appendTo(popup.wrapper);

                        that._initScrolling(popup.element, backwardBtn, forwardBtn, isHorizontal);
                        if (!skipMouseEvents) {
                            scrollButtons.on(MOUSEENTER + NS, function() {
                                var overflowWrapper = that._overflowWrapper();
                                $(getChildPopups(popup.element, overflowWrapper)).each(function(i, p) {
                                    var popupOpener = overflowWrapper.find(popupOpenerSelector(p.data(POPUP_ID_ATTR)));
                                    that.close(popupOpener);
                                });
                            })
                            .on(MOUSELEAVE + NS, function() {
                                setTimeout(function() {
                                    if ($.isEmptyObject(that._openedPopups)) {
                                        that._closeParentPopups(popup.element);
                                    }
                                }, DELAY);
                            });
                        }
                    }
                    that._toggleScrollButtons(popup.element, scrollButtons.first(), scrollButtons.last(), isHorizontal);
                }, timeout);
            },

            _popupOpen: function(e) {
                if (!this._keyTriggered) {
                    e.sender.element.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);
                }
                if (this.options.scrollable) {
                    this._setPopupHeight(e.sender);
                }
            },

            _setPopupHeight: function(popup, isFixed) {
                var popupElement = popup.element;
                var popups = popupElement.add(popupElement.parent(childAnimationContainerSelector));

                popups.height((popupElement.hasClass(MENU) && this._initialHeight) || "");

                var location = popup._location(isFixed);
                var windowHeight = $(window).height();
                var popupOuterHeight = location.height;
                var popupOffsetTop = isFixed ? 0 : Math.max(location.top, 0);
                var scrollTop = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], "scrollTop");
                var bottomScrollbar = window.innerHeight - windowHeight;
                var maxHeight = windowHeight - kendo.getShadows(popupElement).bottom + bottomScrollbar;
                var canFit = maxHeight + scrollTop > popupOuterHeight + popupOffsetTop;

                if (!canFit) {
                    var height = Math.min(maxHeight, maxHeight - popupOffsetTop + scrollTop);
                    popups.css({ overflow: "hidden", height: height + "px" });
                }
            },

            close: function(items, dontClearClose) {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                var element = (overflowWrapper || that.element);

                items = element.find(items);

                if (!items.length) {
                    items = element.find(">.k-item");
                }

                var hasChildPopupsHovered = function(currentPopup) {
                    var result = false;
                    if ($.isEmptyObject(that._openedPopups)) {
                        return result;
                    }
                    $(getChildPopups(currentPopup, overflowWrapper)).each(function(i, popup) {
                        result = !!that._openedPopups[popup.data(POPUP_ID_ATTR).toString()];
                        return !result;
                    });
                    return result;
                };

                var isPopupMouseLeaved = function(opener) {
                    var groupId = opener.data(POPUP_OPENER_ATTR);
                    return (!overflowWrapper || !groupId || !that._openedPopups[groupId.toString()]);
                };

                items.each(function() {
                    var li = $(this);

                    li.attr(ARIA_EXPANDED, false);

                    if (!dontClearClose && that._isRootItem(li)) {
                        that.clicked = false;
                    }

                    clearTimeout(li.data(TIMER));

                    li.data(TIMER, setTimeout(function() {
                        var popup = that._getPopup(li);
                        if (popup && (isPopupMouseLeaved(li) || that._forceClose)) {
                            if (!that._forceClose && hasChildPopupsHovered(popup.element)) {
                                return;
                            }

                            popup.close();
                            popup.element.attr("aria-hidden", true);

                            if (overflowWrapper) {
                                if (that._forceClose && items.last().is(li[0])) {
                                    delete that._forceClose;
                                }
                            }
                        }
                    }, that.options.hoverDelay));
                });

                return that;
            },

            _getPopup: function(li) {
                var that = this;
                var popup = li.find(".k-menu-popup:not(.k-list-container):not(.k-calendar-container):visible").first().data(KENDOPOPUP);
                var overflowWrapper = that._overflowWrapper();

                if (!popup && overflowWrapper) {
                    var groupId = li.data(POPUP_OPENER_ATTR);
                    if (groupId) {
                        var popupElement = overflowWrapper.find(popupGroupSelector(groupId));
                        popup = popupElement.data(KENDOPOPUP);
                    }
                }
                return popup;
            },

            _toggleDisabled: function(items, enable) {
                this.element.find(items).each(function() {
                    $(this)
                        .toggleClass(DISABLEDSTATE, !enable)
                        .attr("aria-disabled", !enable);
                });
            },

            _toggleHover: function(e) {
                var target = $(kendo.eventTarget(e) || e.target).closest(allItemsSelector),
                    isEnter = e.type == MOUSEENTER || MOUSEDOWN.indexOf(e.type) !== -1;

                target.siblings().removeClass(HOVERSTATE);

                if (!target.parents("li." + DISABLEDSTATE).length) {
                    target.toggleClass(HOVERSTATE, isEnter || e.type == "mousedown" || e.type == "pointerover" || e.type == TOUCHSTART);
                }

                this._removeHoverItem();
            },

            _preventClose: function() {
                if (!this.options.closeOnClick) {
                    this._closurePrevented = true;
                }
            },

            _checkActiveElement: function(e) {
                var that = this,
                    hoverItem = $(e ? e.currentTarget : this._hoverItem()),
                    target = that._findRootParent(hoverItem)[0];

                if (!this._closurePrevented) {
                    setTimeout(function() {
                        if (!document.hasFocus() || (!contains(target, kendo._activeElement()) && e && !contains(target, e.currentTarget))) {
                            that.close(target);
                        }
                    }, 0);
                }

                this._closurePrevented = false;
            },

            _removeHoverItem: function() {
                var oldHoverItem = this._hoverItem();

                if (oldHoverItem && oldHoverItem.hasClass(FOCUSEDSTATE)) {
                    oldHoverItem.removeClass(FOCUSEDSTATE);
                    this._oldHoverItem = null;
                }
            },

            _wrapGroups: function() {
                var that = this;

                that.element.find("li > ul")
                    .filter(function() {
                        return !$(this).parent().hasClass("k-menu-popup");
                    })
                    .wrap("<div class='k-menu-popup k-popup'></div>")
                    .parent("div")
                    .attr("aria-hidden", that.element.is(":visible"))
                    .hide();

                that.element.find("ul").each(function() {
                    var group = $(this);
                    var id = kendo.guid();
                    group.attr("id", id)
                        .closest("li")
                        .attr("aria-controls", id);
                });
            },

            _updateClasses: function() {
                var element = this.element,
                    nonContentGroupsSelector = ".k-menu-init div ul",
                    items;

                element.removeClass("k-menu-horizontal k-menu-vertical");
                element.addClass("k-widget k-reset k-menu-init " + MENU).addClass(MENU + "-" + this.options.orientation);

                if (this.options.orientation === "vertical") {
                    element.attr("aria-orientation", "vertical");
                } else {
                    element.attr("aria-orientation", "horizontal");
                }

                element.find("li > ul")
                       .filter(function() {
                           return !kendo.support.matchesSelector.call(this, nonContentGroupsSelector);
                       })
                       .addClass("k-group k-menu-group k-menu-group-md")
                       .attr(ROLE, "menu")
                       .parent("li")
                       .attr("aria-haspopup", "true")
                       .end()
                       .find("li > div")
                       .addClass("k-content")
                       .attr("tabindex", "-1"); // Capture the focus before the Menu

                element.find("li[aria-haspopup]").attr(ARIA_EXPANDED, false);

                items = element.find("> li,.k-menu-group > li");

                element.removeClass("k-menu-init");

                items.each(function() {
                    updateItemClasses(this);
                });
            },

            _mouseenter: function(e) {
                var that = this;
                var element = $(e.currentTarget);
                var hasChildren = that._itemHasChildren(element);
                var popupId = element.data(POPUP_OPENER_ATTR) || element.closest(popupSelector).data(POPUP_ID_ATTR);
                var pointerTouch = isPointerTouch(e);
                var isParentClosing = false;

                if (popupId) {
                    that._openedPopups[popupId.toString()] = true;
                }

                if (that._closing) {
                    isParentClosing = !!that._closing.find(element).length;
                }

                if (isParentClosing || (e.delegateTarget != element.parents(menuSelector)[0] && e.delegateTarget != element.parents(".k-menu-scroll-wrapper,.k-popups-wrapper")[0])) {
                    return;
                }

                that._keyTriggered = false;

                if ((that.options.openOnClick.rootMenuItems && that._isRootItem(element.closest(allItemsSelector))) ||
                    (that.options.openOnClick.subMenuItems && !that._isRootItem(element.closest(allItemsSelector)))) {
                    return;
                }

                if ((that.options.openOnClick === false ||
                    (that.options.openOnClick.rootMenuItems === false && that._isRootItem(element.closest(allItemsSelector))) ||
                    (that.options.openOnClick.subMenuItems === false && !that._isRootItem(element.closest(allItemsSelector))) || that.clicked) && !touch &&
                    !(pointerTouch && that._isRootItem(element.closest(allItemsSelector)))) {

                    if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {
                        that.open(element);
                    }
                }

                if (that.options.openOnClick === true && that.clicked || touch) {
                    element.siblings().each(function(_, sibling) {
                        that.close(sibling, true);
                    });
                }
            },

            _mousedown: function(e) {
                var that = this;
                var element = $(e.currentTarget);
                // needs to close subMenuItems
                if (that.options.openOnClick.subMenuItems && !that._isRootItem(element) || touch) {
                    element.siblings().each(function(_, sibling) {
                        that.close(sibling, true);
                    });
                }
            },

            _mouseleave: function(e) {
                var that = this;
                var element = $(e.currentTarget);
                var popupOpener = element.data(POPUP_OPENER_ATTR);
                var hasChildren = (element.children(animationContainerSelector).length || element.children(groupSelector).length) || popupOpener;
                var $window = $(window);

                if (popupOpener) {
                    delete that._openedPopups[popupOpener.toString()];
                }

                if (element.parentsUntil(animationContainerSelector, ".k-list-container,.k-calendar-container")[0]) {
                    e.stopImmediatePropagation();
                    return;
                }

                if ((that.options.openOnClick === false || (!that.options.openOnClick.rootMenuItems && that._isRootItem(element)) ||
                    (!that.options.openOnClick.subMenuItems && !that._isRootItem(element))) && !touch && !isPointerTouch(e) &&
                    !contains(e.currentTarget, e.relatedTarget || e.target) && hasChildren &&
                    !contains(e.currentTarget, kendo._activeElement())) {
                        that.close(element, true);
                        that._loading = false;
                        return;
                }

                // Detect if cursor goes outside the viewport of the browser
                if ( (kendo.support.browser.msie && !e.toElement && !e.relatedTarget && !isPointerTouch(e)) ||
                    e.clientX < 0 || e.clientY < 0 ||
                    e.clientY > $window.height() ||
                    e.clientX > $window.width()) {
                    that.close(element);
                }
            },

            _mouseenterPopup: function(e) {
                var that = this;
                var popupElement = $(e.currentTarget);

                if (popupElement.parent().is(childAnimationContainerSelector)) {
                     return;
                }

                popupElement = popupElement.children("ul");
                var popupId = popupElement.data(POPUP_ID_ATTR);

                if (popupId) {
                    that._openedPopups[popupId.toString()] = true;
                }
            },

            _mouseleavePopup: function(e) {
                var that = this;
                var popupElement = $(e.currentTarget);

                if (!isPointerTouch(e) && popupElement.is(animationContainerSelector)) {
                    that._closePopups(popupElement.find(popupSelector));
                }
            },

            _closePopups: function(rootPopup) {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                var popupId = rootPopup.data(POPUP_ID_ATTR);

                if (popupId) {
                    delete that._openedPopups[popupId.toString()];
                    var groupParent = overflowWrapper.find(popupOpenerSelector(popupId));

                    setTimeout(function() {
                        if (that.options.openOnClick) {
                            that._closeChildPopups(rootPopup);
                        } else {
                            if ($.isEmptyObject(that._openedPopups)) {
                                var innerPopup = that._innerPopup(rootPopup);
                                that._closeParentPopups(innerPopup);
                            } else {
                                that.close(groupParent, true);
                            }
                        }
                    }, 0);
                }
            },

            _closeChildPopups: function(current) {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                $(getChildPopups(current, overflowWrapper)).each(function() {
                    var popupOpener = overflowWrapper.find(popupOpenerSelector(this.data(POPUP_ID_ATTR)));
                    that.close(popupOpener, true);
                });
            },

            _innerPopup: function(current) {
                var overflowWrapper = this._overflowWrapper();
                var popups = getChildPopups(current, overflowWrapper);
                return popups[popups.length - 1] || current;
            },

            _closeParentPopups: function(current) {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                var popupId = current.data(POPUP_ID_ATTR);
                var popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));
                popupId = popupOpener.parent().data(POPUP_ID_ATTR);
                that.close(popupOpener, true);
                while (popupId && !that._openedPopups[popupId]) {
                    if (popupOpener.parent().is(menuSelector)) {
                        break;
                    }
                    popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));
                    that.close(popupOpener, true);
                    popupId = popupOpener.parent().data(POPUP_ID_ATTR);
                }
            },

            _click: function(e) {
                var that = this, openHandle,
                    options = that.options,
                    target = $(kendo.eventTarget(e)),
                    targetElement = target[0],
                    nodeName = target[0] ? target[0].nodeName.toUpperCase() : "",
                    formNode = (nodeName == "INPUT" || nodeName == "SELECT" || nodeName == "BUTTON" || nodeName == "LABEL"),
                    link = target.closest(LINK_SELECTOR),
                    element = target.closest(allItemsSelector),
                    itemElement = element[0],
                    href = link.attr("href"), childGroup, childGroupVisible,
                    targetHref = target.attr("href"),
                    sampleHref = $("<a href='#' />").attr("href"),
                    isLink = (!!href && href !== sampleHref),
                    isLocalLink = isLink && !!href.match(/^#/),
                    isTargetLink = (!!targetHref && targetHref !== sampleHref),
                    overflowWrapper = that._overflowWrapper(),
                    shouldCloseTheRootItem;

                if (targetElement && (!targetElement.parentNode || !itemElement)) {
                    return;
                }

                if ($(target).closest("span").hasClass('k-menu-expand-arrow-icon')) {
                    this._lastClickedElement = itemElement;
                }

                while (targetElement && targetElement.parentNode != itemElement) {
                    targetElement = targetElement.parentNode;
                }

                if ($(targetElement).is(templateSelector)) {
                    return;
                }

                if (element.hasClass(DISABLEDSTATE)) {
                    e.preventDefault();
                    return;
                }

                if (!e.handled && that._triggerSelect(target, itemElement) && !formNode) { // We shouldn't stop propagation and shoudn't prevent form elements.
                    e.preventDefault();
                }

                e.handled = true;

                childGroup = element.children(popupSelector);
                if (overflowWrapper) {
                    var childPopupId = element.data(POPUP_OPENER_ATTR);
                    if (childPopupId) {
                        childGroup = overflowWrapper.find(popupGroupSelector(childPopupId));
                    }
                }
                childGroupVisible = childGroup.is(":visible");
                shouldCloseTheRootItem = options.openOnClick && childGroupVisible && that._isRootItem(element);

                if (options.closeOnClick && (!isLink || isLocalLink) && (!childGroup.length || shouldCloseTheRootItem)) {
                    element.removeClass(HOVERSTATE).css("height"); // Force refresh for Chrome
                    that._oldHoverItem = that._findRootParent(element);
                    var item = that._parentsUntil(link, that.element, allItemsSelector);
                    that._forceClose = !!overflowWrapper;
                    that.close(item);
                    that.clicked = false;
                    if ("MSPointerUp".indexOf(e.type) != -1) {
                        e.preventDefault();
                    }
                    return;
                }

                if (isLink && e.enterKey) {
                    link[0].click();
                }

                if (((!that._isRootItem(element) || options.openOnClick === false) && !options.openOnClick.subMenuItems) && !kendo.support.touch && !(isPointerTouch(e) && that._isRootItem(element.closest(allItemsSelector)))) {
                    return;
                }

                if (!isLink && !formNode && !isTargetLink) {
                    e.preventDefault();
                }

                that.clicked = true;
                openHandle = childGroup.is(":visible") ? CLOSE : OPEN;
                if (!options.closeOnClick && openHandle == CLOSE) {
                    return;
                }
                that[openHandle](element);
            },

            _parentsUntil: function(context, top, selector) {
                var overflowWrapper = this._overflowWrapper();
                if (!overflowWrapper) {
                    return context.parentsUntil(top, selector);
                } else {
                    var parents = overflowMenuParents(context, overflowWrapper);
                    var result = [];
                    $(parents).each(function() {
                        var parent = $(this);
                        if (parent.is(top)) {
                            return false;
                        }
                        if (parent.is(selector)) {
                            result.push(this);
                        }
                    });
                    return $(result);
                }
            },

            _triggerSelect: function(target, itemElement) {
                target = target.is(".k-link") ? target : target.closest(".k-link");

                var selectHandler = target.data("selectHandler"),
                    itemSelectEventData;

                if (selectHandler) {
                    itemSelectEventData = this._getEventData(target);
                    selectHandler.call(this, itemSelectEventData);
                }

                var isSelectItemDefaultPrevented = itemSelectEventData && itemSelectEventData.isDefaultPrevented();
                var isSelectDefaultPrevented = this._triggerEvent({ item: itemElement, type: SELECT });
                return isSelectItemDefaultPrevented || isSelectDefaultPrevented;
            },

            _getEventData: function(target) {
                var eventData = {
                    sender: this,
                    target: target,
                    _defaultPrevented: false,
                    preventDefault: function() {
                        this._defaultPrevented = true;
                    },
                    isDefaultPrevented: function() {
                        return this._defaultPrevented;
                    }
                };
                return eventData;
            },

            _documentClick: function(e) {
                var that = this;
                var target = $(e.target).closest("span").hasClass('k-menu-expand-arrow-icon') ? that._lastClickedElement : e.target;

                if (contains((that._overflowWrapper() || that.element)[0], target)) {
                    that._lastClickedElement = undefined$1;
                    return;
                }

                that.clicked = false;
            },

            _focus: function(e) {
                var that = this,
                    target = e.target,
                    hoverItem = that._hoverItem(),
                    active = activeElement();

                if (target != that.wrapper[0] && !$(target).is(":kendoFocusable")) {
                    e.stopPropagation();
                    $(target).closest(".k-content").closest(".k-menu-popup").closest(".k-item").addClass(FOCUSEDSTATE);
                    that.wrapper.trigger("focus");
                    return;
                }

                if (active === e.currentTarget) {
                    if (hoverItem.length) {
                        that._moveHover([], hoverItem);
                    } else if (!that._oldHoverItem) {
                        that._moveHover([], that.wrapper.children().first());
                    }
                }
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    hoverItem = that._oldHoverItem,
                    target,
                    belongsToVertical,
                    hasChildren,
                    isRtl = kendo.support.isRtl(that.wrapper);

                if (e.target != e.currentTarget && key != keys.ESC) {
                    return;
                }

                if (!hoverItem) {
                    hoverItem = that._oldHoverItem = that._hoverItem();
                }

                belongsToVertical = that._itemBelongsToVertival(hoverItem);
                hasChildren = that._itemHasChildren(hoverItem);
                that._keyTriggered = true;

                if (key == keys.RIGHT) {
                    target = that[isRtl ? "_itemLeft" : "_itemRight"](hoverItem, belongsToVertical, hasChildren);
                } else if (key == keys.LEFT) {
                    target = that[isRtl ? "_itemRight" : "_itemLeft"](hoverItem, belongsToVertical, hasChildren);
                } else if (key == keys.DOWN) {
                    target = that._itemDown(hoverItem, belongsToVertical, hasChildren);
                } else if (key == keys.UP) {
                    target = that._itemUp(hoverItem, belongsToVertical, hasChildren);
                } else if (key == keys.HOME) {
                    that._moveHover(hoverItem, hoverItem.parent().children(":visible").first());
                    e.preventDefault();
                } else if (key == keys.END) {
                    that._moveHover(hoverItem, hoverItem.parent().children(":visible").last());
                    e.preventDefault();
                } else if (key == keys.ESC) {
                    target = that._itemEsc(hoverItem, belongsToVertical);
                } else if (key == keys.ENTER || key == keys.SPACEBAR) {
                    target = hoverItem.children(".k-link");
                    if (target.length > 0) {
                        that._click({ target: target[0], preventDefault: function() {}, enterKey: true });
                        if (hasChildren && !hoverItem.hasClass(DISABLEDSTATE)) {
                            that.open(hoverItem);
                            that._moveHover(hoverItem, that._childPopupElement(hoverItem).children().find("li").first());
                        } else if (hoverItem.is("li") && hoverItem.attr("role") === "menuitemcheckbox") {
                            hoverItem.find(".k-checkbox").attr("checked", true);
                        } else {
                            that._moveHoverToRoot(hoverItem, that._findRootParent(hoverItem));
                        }
                    }
                } else if (key == keys.TAB) {
                    target = that._findRootParent(hoverItem);
                    that._moveHover(hoverItem, target);
                    that._checkActiveElement();
                    return;
                }

                if (target && target[0]) {
                    e.preventDefault();
                    e.stopPropagation(); // needed to handle ESC in column menu only when a root item is focused
                }
            },

            _hoverItem: function() {
                return this.wrapper.find(".k-item.k-hover,.k-item.k-focus").filter(":visible");
            },

            _itemBelongsToVertival: function(item) {
                var menuIsVertical = this.wrapper.hasClass("k-menu-vertical");

                if (!item.length) {
                    return menuIsVertical;
                }
                return item.parent().hasClass("k-menu-group") || menuIsVertical;
            },

            _itemHasChildren: function(item) {
                if (!item || !item.length || !item[0].nodeType) {
                    return false;
                }
                return item.children(".k-menu-group, .k-menu-popup, div.k-animation-container").length > 0 ||
                    (!!item.data(POPUP_OPENER_ATTR) && !!this._overflowWrapper().children(popupGroupSelector(item.data(POPUP_OPENER_ATTR))));
            },

            _moveHover: function(item, nextItem) {
                var that = this,
                    id = that._ariaId;

                if (item.length && nextItem.length) {
                    item.removeClass(FOCUSEDSTATE);
                }

                if (nextItem.length) {
                    if (nextItem[0].id) {
                        id = nextItem[0].id;
                    }

                    nextItem.addClass(FOCUSEDSTATE);
                    that._oldHoverItem = nextItem;

                    if (id) {
                        that.element.removeAttr("aria-activedescendant");
                        $("#" + id).removeAttr("id");
                        nextItem.attr("id", id);
                        that.element.attr("aria-activedescendant", id);
                    }
                    that._scrollToItem(nextItem);
                }
            },

            _moveHoverToRoot: function(item, nextItem) {
                this._moveHover(item, nextItem);
            },

            _findRootParent: function(item) {
                if (this._isRootItem(item)) {
                    return item;
                } else {
                    return this._parentsUntil(item, menuSelector, "li.k-item").last();
                }
            },

            _isRootItem: function(item) {
                return item.parent().hasClass(MENU);
            },

            _itemRight: function(item, belongsToVertical, hasChildren) {
                var that = this,
                    nextItem,
                    parentItem,
                    overflowWrapper;

                if (!belongsToVertical) {
                    nextItem = item.nextAll(itemSelector + exclusionSelector).eq(0);
                    if (!nextItem.length) {
                        nextItem = item.prevAll(itemSelector + exclusionSelector).last();
                    }
                    that.close(item);
                } else if (hasChildren && !item.hasClass(DISABLEDSTATE)) {
                    that.open(item);
                    nextItem = that._childPopupElement(item).children().find("li").first();
                } else if (that.options.orientation == "horizontal") {
                    parentItem = that._findRootParent(item);
                    overflowWrapper = that._overflowWrapper();
                    if (overflowWrapper) {
                        var rootPopup = itemPopup(parentItem, overflowWrapper);
                        that._closeChildPopups(rootPopup);
                    }
                    that.close(parentItem);
                    nextItem = parentItem.nextAll(itemSelector + exclusionSelector).eq(0);
                }

                if (nextItem && !nextItem.length) {
                    nextItem = that.wrapper.children(".k-item").first();
                } else if (!nextItem) {
                    nextItem = [];
                }

                that._moveHover(item, nextItem);
                return nextItem;
            },

            _itemLeft: function(item, belongsToVertical) {
                var that = this,
                    nextItem,
                    overflowWrapper;

                if (!belongsToVertical) {
                    nextItem = item.prevAll(itemSelector + exclusionSelector).eq(0);
                    if (!nextItem.length) {
                        nextItem = item.nextAll(itemSelector + exclusionSelector).last();
                    }
                    that.close(item);
                } else {
                    nextItem = item.parent().closest(".k-item");
                    overflowWrapper = that._overflowWrapper();
                    if (!nextItem.length && overflowWrapper) {
                        nextItem = popupParentItem(item.parent(), overflowWrapper);
                    }
                    that.close(nextItem);
                    if (that._isRootItem(nextItem) && that.options.orientation == "horizontal") {
                        nextItem = nextItem.prevAll(itemSelector + exclusionSelector).eq(0);
                    }
                }

                if (!nextItem.length) {
                    nextItem = that.wrapper.children(".k-item").last();
                }

                that._moveHover(item, nextItem);
                return nextItem;
            },

            _itemDown: function(item, belongsToVertical, hasChildren) {
                var that = this,
                    nextItem;

                if (!belongsToVertical) {
                    if (!hasChildren || item.hasClass(DISABLEDSTATE)) {
                        return;
                    } else {
                        that.open(item);
                        nextItem = that._childPopupElement(item).children().find("li").first();
                    }
                } else {
                    nextItem = item.nextAll(itemSelector + exclusionSelector).eq(0);
                }

                if (!nextItem.length && item.length) {
                    nextItem = item.parent().children(":visible").first();
                } else if (!item.length) {
                    nextItem = that.wrapper.children(".k-item").first();
                }

                that._moveHover(item, nextItem);
                return nextItem;
            },

            _itemUp: function(item, belongsToVertical) {
                var that = this,
                    nextItem;

                if (!belongsToVertical) {
                    return;
                } else {
                    nextItem = item.prevAll(itemSelector + exclusionSelector).eq(0);
                }

                if (!nextItem.length && item.length) {
                    nextItem = item.parent().children(":visible").last();
                } else if (!item.length) {
                    nextItem = that.wrapper.children(".k-item").last();
                }

                that._moveHover(item, nextItem);
                return nextItem;
            },

            _scrollToItem: function(item) {
                var that = this;
                if (that.options.scrollable && item && item.length) {
                    var ul = item.parent();
                    var isHorizontal = ul.hasClass(MENU) ? that.options.orientation == "horizontal" : false;
                    var scrollDir = isHorizontal ? "scrollLeft" : "scrollTop";
                    var getSize = isHorizontal ? kendo._outerWidth : kendo._outerHeight;
                    var currentScrollOffset = ul[scrollDir]();
                    var itemSize = getSize(item);
                    var itemOffset = item[0][isHorizontal ? "offsetLeft" : "offsetTop"];
                    var ulSize = getSize(ul);
                    var scrollButtons = ul.siblings(scrollButtonSelector);
                    var scrollButtonSize = scrollButtons.length ? getSize(scrollButtons.first()) : 0;
                    var itemPosition;

                    if (currentScrollOffset + ulSize < itemOffset + itemSize + scrollButtonSize) {
                        itemPosition = itemOffset + itemSize - ulSize + scrollButtonSize;
                    } else if (currentScrollOffset > itemOffset - scrollButtonSize) {
                        itemPosition = itemOffset - scrollButtonSize;
                    }

                    if (!isNaN(itemPosition)) {
                        var scrolling = {};
                        scrolling[scrollDir] = itemPosition;
                        ul.finish().animate(scrolling, "fast", "linear", function() {
                            that._toggleScrollButtons(ul, scrollButtons.first(), scrollButtons.last(), isHorizontal);
                        });
                    }
                }
            },

            _itemEsc: function(item, belongsToVertical) {
                var that = this,
                    nextItem, groupId;

                if (!belongsToVertical) {
                    return item;
                } else {
                    nextItem = item.parent().closest(".k-item");

                    if (nextItem.length === 0) {
                        groupId = item.closest(".k-menu-popup").data("group");
                        nextItem = that.wrapper.find(".k-item[data-groupparent='" + groupId + "']");
                    }

                    that.close(nextItem);
                    that._moveHover(item, nextItem);
                }

                return nextItem;
            },

            _childPopupElement: function(item) {
                var popupElement = item.find(".k-menu-popup");
                var wrapper = this._overflowWrapper();
                if (!popupElement.length && wrapper) {
                    popupElement = itemPopup(item, wrapper);
                }
                return popupElement;
            },

            _triggerEvent: function(e) {
                var that = this;

                return that.trigger(e.type, { type: e.type, item: e.item });
            },

            _focusHandler: function(e) {
                var that = this,
                    item = $(kendo.eventTarget(e)).closest(allItemsSelector);

                if (item.hasClass(DISABLEDSTATE)) {
                    return;
                }

                setTimeout(function() {
                    that._moveHover([], item);
                    if (item.children(".k-content")[0]) {
                        item.parent().closest(".k-item").removeClass(FOCUSEDSTATE);
                    }
                }, 200);
            },

            _animations: function(options) {
                if (options && ("animation" in options) && !options.animation) {
                    options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
                }
            },
            _dataSource: function(options) {
                var that = this,
                    dataSource = options ? options.dataSource : that.options.dataSource;

                if (!dataSource) {
                    return;
                }

                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

                that._unbindDataSource();

                if (!dataSource.fields) {
                    dataSource.fields = [
                        { field: "uid" },
                        { field: "text" },
                        { field: "url" },
                        { field: "cssClass" },
                        { field: "spriteCssClass" },
                        { field: "imageUrl" },
                        { field: "imageAttr" },
                        { field: "attr" },
                        { field: "contentAttr" },
                        { field: "content" },
                        { field: "encoded" },
                        { field: "items" },
                        { field: "select" }
                    ];
                }

                that.dataSource = HierarchicalDataSource.create(dataSource);

                that._bindDataSource();

                that.dataSource.fetch();
            },

            _bindDataSource: function() {
                this._refreshHandler = this.refresh.bind(this);
                this._errorHandler = this._error.bind(this);

                this.dataSource.bind(CHANGE, this._refreshHandler);
                this.dataSource.bind(ERROR, this._errorHandler);
            },

            _unbindDataSource: function() {
                var dataSource = this.dataSource;

                if (dataSource) {
                    dataSource.unbind(CHANGE, this._refreshHandler);
                    dataSource.unbind(ERROR, this._errorHandler);
                }
            },

            _error: function() {

            },

            findByUid: function(uid) {
                var wrapperElement = this._overflowWrapper() || this.element;
                return wrapperElement.find("[" + kendo.attr("uid") + "=" + uid + "]");
            },

            refresh: function(ev) {
                var that = this;
                var node = ev.node;
                var action = ev.action;
                var parentElement = node ? that.findByUid(node.uid) : that.element;
                var itemsToUpdate = ev.items;
                var index = ev.index;
                var updateProxy = that._updateItem.bind(that);
                var removeProxy = that._removeItem.bind(that);

                if (action == "add") {
                    that._appendItems(itemsToUpdate, index, parentElement);
                } else if (action == "remove") {
                    itemsToUpdate.forEach(removeProxy);
                } else if (action == "itemchange") {
                    itemsToUpdate.forEach(updateProxy);
                } else if (action === "itemloaded") {
                    that.append(ev.items, parentElement);
                } else {
                    this._initData();
                }

                this.trigger(DATABOUND, { item: parentElement, dataItem: node });
            },

            _appendItems: function(items, index, parent) {
                var that = this;
                var referenceItem = parent.find(itemSelector).eq(index);

                if (referenceItem.length) {
                    that.insertBefore(items, referenceItem);
                } else {
                    that.append(items, parent);
                }
            },

            _removeItem: function(item) {
                var that = this;
                var element = that.findByUid(item.uid);
                that.remove(element);
            },

            _updateItem: function(item) {
                var that = this;
                var element = that.findByUid(item.uid);
                var nextElement = element.next();
                var parentNode = item.parentNode();

                that.remove(element);

                if (nextElement.length) {
                    that.insertBefore(item, nextElement);
                } else {
                    that.append(item, parentNode && that.findByUid(parentNode.uid));
                }
            },

            _accessors: function() {
                var that = this,
                    options = that.options,
                    i, field, textField,
                    element = that.element;

                for (i in bindings) {
                    field = options[bindings[i]];
                    textField = element.attr(kendo.attr(i + "-field"));

                    if (!field && textField) {
                        field = textField;
                    }

                    if (!field) {
                        field = i;
                    }

                    if (!isArray(field)) {
                        field = [field];
                    }

                    options[bindings[i]] = field;
                }
            },

            _fieldAccessor: function(fieldName) {
                var fieldBindings = this.options[bindings[fieldName]] || [],
                    count = fieldBindings.length;

                if (count === 0) {
                    return (function(item) { return item[fieldName]; });
                } else {
                    return (function(item) {
                        var levels = $.map(fieldBindings, kendo.getter);
                        if (item.level) {
                            return levels[Math.min(item.level(), count - 1)](item);
                        } else {
                            return levels[count - 1](item);
                        }
                    });
                }
            },

            _templates: function() {
                var this$1$1 = this;

                var that = this,
                    options = that.options,
                    fieldAccessor = that._fieldAccessor.bind(that);

                if (options.template && typeof options.template == STRING) {
                    options.template = template(options.template);
                } else if (!options.template) {
                    options.template = template(function (data) {
                        var text = fieldAccessor("text")(data.item);
                        if (!(typeof data.item.encoded != 'undefined' && data.item.encoded === false)) {
                            text = encode(text);
                        }

                        return ("<span class='k-menu-link-text'>" + text + "</span>");
                    });
                }

                that.templates = {
                    content: template(function (data) {
                        var item = data.item;
                        var contentHtml = fieldAccessor("content")(item);
                        var contCssAttributes = data.contentCssAttributes(item.toJSON ? item.toJSON() : item);
                        return ("<div " + contCssAttributes + " tabindex='-1'>" + (contentHtml || '') + "</div>");
                    }),
                    group: template(function (data) { return "<div class='" + (data.groupWrapperCssClass(data.group)) + "' " + (data.groupAttributes(data.group)) + ">" +
                        "<ul class='" + (data.groupCssClass(data.group)) + "' id='" + (data.groupId) + "' role='menu'>" +
                        "" + (data.renderItems(data)) +
                        "</ul>" +
                        "</div>"; }
                    ),
                    itemWrapper: template(function (data) {
                        var item = data.item;
                        var url = fieldAccessor("url")(item);
                        var imageUrl = fieldAccessor("imageUrl")(item);
                        var imgAttributes = fieldAccessor("imageAttr")(item);
                        var tag = url ? 'a' : 'span';

                        return "<" + tag + " class='" + (rendering.textClass(item)) + "' " + (url ? ("href='" + url + "'") : '') + " >" +
                            (imageUrl ? ("<img " + (rendering.imageCssAttributes(imgAttributes)) + "  alt='' src='" + imageUrl + "' />") : '') +
                            this$1$1.templates.sprite(item) +
                            this$1$1.options.template(data) +
                            data.arrow(data) +
                            "</" + tag + ">";
                    }),
                    item: template(function (data) {
                        var item = data.item,
                            menu = data.menu,
                            group = data.group,
                            subGroup = data.subGroup;
                        var contentHtml = fieldAccessor("content")(item);
                        var groupId = kendo.guid();
                        return "<li class='" + (rendering.wrapperCssClass(group, item)) + "' " + ((item.hasChildren || item.items) ? 'aria-controls="' + groupId + '"' : '') + " " + (rendering.itemCssAttributes(item.toJSON ? item.toJSON() : item)) + " role='menuitem'  " + (item.items ? "aria-haspopup='true'" : '') +
                            "" + (item.enabled === false ? "aria-disabled='true'" : '') +
                            kendo.attr("uid") + "='" + (item.uid) + "' " +
                            (item.items && item.items.length > 0 ?
                                (item.expanded ?
                                    " aria-expanded='true'"
                                    : " aria-expanded='false'")
                                : '') +
                            ">" +
                            "" + (!item.separator && !item.content ? this$1$1.templates.itemWrapper(data) : '') +
                            ((item.hasChildren || item.items) ?
                                ("" + (subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded }, groupId: groupId })))
                                : (item.content || item.contentUrl || contentHtml ?
                                ("" + (data.renderContent(data)))
                                : '')
                            ) +
                            "</li>";
                    }),
                    scrollButton: template(function (ref) {
                            var direction = ref.direction;

                            return "<span class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-menu-scroll-button k-scroll-" + direction + "' unselectable='on'>" +
                            kendo.ui.icon({ icon: ("caret-alt-" + direction), iconClass: "k-button-icon" }) +
                        "</span>";
                }
                    ),
                    arrow: template(function (ref) {
                            var item = ref.item;
                            var group = ref.group;

                            return ("<span aria-hidden='true' class='k-menu-expand-arrow'>" + (kendo.ui.icon({ icon: group.horizontal ? "caret-alt-down" : "caret-alt-right", iconClass: "k-menu-expand-arrow-icon" })) + "</span>");
                }),
                    sprite: template(function (data) {
                        var spriteCssClass = fieldAccessor("spriteCssClass")(data);
                        if (spriteCssClass) {
                            return ("<span class='k-sprite " + spriteCssClass + "'></span>");
                        }
                        return '';
                    }),
                    empty: template(function () { return ""; })
                };
            },

            renderItem: function(options) {
                var that = this;
                options = extend({ menu: that, group: {} }, options);

                var empty = that.templates.empty,
                    item = options.item;

                return that.templates.item(extend(options, {
                    separator: item.separator ? that.templates.separator : empty,
                    sprite: that.templates.sprite,
                    itemWrapper: that.templates.itemWrapper,
                    renderContent: that.renderContent,
                    arrow: item.items || item.content || item[that.options.dataContentField[0]] ? that.templates.arrow : empty,
                    subGroup: that.renderGroup.bind(that)
                }, rendering));
            },

            renderGroup: function(options) {
                var that = this;
                var templates = that.templates || options.menu.templates;

                return templates.group(extend({
                    renderItems: function(options) {
                        var html = "",
                            i = 0,
                            items = options.items,
                            len = items ? items.length : 0,
                            group = extend({ length: len }, options.group);

                        for (; i < len; i++) {
                            html += options.menu.renderItem(extend(options, {
                                group: group,
                                item: extend({ index: i }, items[i])
                            }));
                        }

                        return html;
                    }
                }, options, rendering));
            },

            renderContent: function(options) {
                return options.menu.templates.content(extend(options, rendering));
            }
        });

        var ContextMenu = Menu.extend({
            init: function(element, options) {
                var that = this;

                Menu.fn.init.call(that, element, options);

                that.element.attr(ROLE, "menu");

                that._marker = kendo.guid().substring(0, 8);

                that.target = $(that.options.target);

                that._popup();
                that._wire();
            },

            _initOverflow: function(options) {
                var that = this;
                if (options.scrollable && !that._overflowWrapper()) {
                    that._openedPopups = {};

                    that._popupsWrapper = (that.element.parent().is(childAnimationContainerSelector) ? that.element.closes(animationContainerSelector) : that.element)
                        .wrap("<div class='k-popups-wrapper " + options.orientation + "'></div>").parent();

                    if (that.options.orientation == "horizontal") {
                        removeSpacesBetweenItems(that.element);
                    }

                    if (options.appendTo) {
                        options.appendTo = $(options.appendTo);
                        options.appendTo.append(that._popupsWrapper);
                    }

                    that._initialHeight = that.element[0].style.height;
                    that._initialWidth = that.element[0].style.width;
                }
            },

            options: {
                name: "ContextMenu",
                filter: null,
                showOn: "contextmenu",
                orientation: "vertical",
                alignToAnchor: false,
                copyAnchorStyles: true,
                target: "body",
                origin: undefined$1,
                position: undefined$1
            },

            events: [
                OPEN,
                CLOSE,
                ACTIVATE,
                DEACTIVATE,
                SELECT
            ],

            setOptions: function(options) {
                var that = this;

                Menu.fn.setOptions.call(that, options);

                that.target.off(that.showOn + NS + that._marker, that._showProxy);

                if (that.userEvents) {
                    that.userEvents.destroy();
                }

                that.target = $(that.options.target);
                if (options.orientation && that.popup.wrapper[0]) {
                    that.popup.element.unwrap();
                }

                that._wire();

                Menu.fn.setOptions.call(this, options);
            },

            destroy: function() {
                var that = this;

                that.target.off(that.options.showOn + NS + that._marker);
                DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);

                if (that.userEvents) {
                    that.userEvents.destroy();
                }

                Menu.fn.destroy.call(that);

                if (that.popup) {
                    that.popup.destroy();
                }
            },

            open: function(x, y) {
                var that = this;

                x = $(x)[0];

                if (contains(that.element[0], $(x)[0]) || that._itemHasChildren($(x))) { // call parent open for children elements
                    Menu.fn.open.call(that, x);
                } else {
                    if (that._triggerEvent({ item: that.element, type: OPEN }) === false) {
                        if (that.popup.visible() && that.options.filter) {
                            that.popup.close(true);
                            that.popup.element.kendoStop(true);
                        }

                        if (!that._triggerFocusOnActivate) {
                            that._triggerFocusOnActivate = that._focusMenu.bind(that);
                        }
                        that.bind(ACTIVATE, that._triggerFocusOnActivate);

                        if (y !== undefined$1) {
                            var overflowWrapper = that._overflowWrapper();
                            if (overflowWrapper) {
                                var offset = overflowWrapper.offset();
                                x -= offset.left;
                                y -= offset.top;
                            }
                            that.popup.wrapper.hide();
                            that._configurePopupScrolling(x, y);
                            that.popup.open(x, y);
                        } else {
                            that.popup.options.anchor = (x ? x : that.popup.anchor) || that.target;
                            that.popup.element.kendoStop(true);
                            that._configurePopupScrolling();
                            that.popup.open();
                        }

                        DOCUMENT_ELEMENT.off(that.popup.downEvent, that.popup._mousedownProxy);
                        DOCUMENT_ELEMENT
                            .on(kendo.support.mousedown + NS + that._marker, that._closeProxy);
                    }
                }

                return that;
            },

            _focusMenu: function() {
                var that = this;

                that.unbind(ACTIVATE, that._triggerFocusOnActivate);
                that.element.trigger("focus");
            },

            _configurePopupScrolling: function(x, y) {
                var that = this;
                var popup = that.popup;
                var isHorizontal = that.options.orientation == "horizontal";

                if (that.options.scrollable) {
                    that._wrapPopupElement(popup);

                    popup.element.parent().css({
                        position: "",
                        height: ""
                    });

                    popup.element.css({
                        visibility: "hidden",
                        display: "",
                        position: ""
                    });

                    if (isHorizontal) {
                        that._setPopupWidth(popup, isNaN(x) ? undefined$1 : { isFixed: true, x: x, y: y });
                    } else {
                        that._setPopupHeight(popup, isNaN(x) ? undefined$1 : { isFixed: true, x: x, y: y });
                    }

                    popup.element.css({
                        visibility: "",
                        display: "none",
                        position: "absolute"
                    });

                    that._initPopupScrollButtons(popup, isHorizontal, true);
                    popup.element.siblings(scrollButtonSelector).hide();
                }
            },

            _setPopupWidth: function(popup, isFixed) {
                var popupElement = popup.element;
                var popups = popupElement.add(popupElement.parent(childAnimationContainerSelector));

                popups.width(this._initialWidth || "");

                var location = popup._location(isFixed);
                var windowWidth = $(window).width();
                var popupOuterWidth = location.width;
                var popupOffsetLeft = Math.max(location.left, 0);
                var scrollLeft = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], "scrollLeft");
                var shadow = kendo.getShadows(popupElement);
                var maxWidth = windowWidth - shadow.left - shadow.right;
                var canFit = maxWidth + scrollLeft > popupOuterWidth + popupOffsetLeft;

                if (!canFit) {
                    popups.css({ overflow: "hidden", width: (maxWidth - popupOffsetLeft + scrollLeft) + "px" });
                }
            },

            close: function() {
                var that = this;

                if (contains(that.element[0], $(arguments[0])[0]) || that._itemHasChildren(arguments[0])) {
                    Menu.fn.close.call(that, arguments[0]);
                } else {
                    if (that.popup.visible()) {
                        if (that._triggerEvent({ item: that.element, type: CLOSE }) === false) {
                            that._removeHoverItem();
                            that.element.find("#" + that._ariaId).removeAttr("id");
                            that.popup.close();
                            DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);
                            that.unbind(SELECT, that._closeTimeoutProxy);
                            that.popup.options.anchor.focus();
                        }
                    }
                }
            },

            _showHandler: function(e) {
                var ev = e, offset,
                    that = this,
                    options = that.options,
                    target = kendo.support.mobileOS ? $(ev.target) : $(ev.currentTarget);

                if (e.event) {
                    ev = e.event;
                    ev.pageX = e.x.location;
                    ev.pageY = e.y.location;
                }

                if (contains(that.element[0], e.relatedTarget || e.target)) {
                    return;
                }

                that._eventOrigin = ev;

                ev.preventDefault();
                ev.stopImmediatePropagation();

                that.element.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);

                if ((options.filter && target.is(options.filter)) || !options.filter) {
                    if (options.alignToAnchor) {
                        that.popup.options.anchor = ev.currentTarget;
                        that.open(ev.currentTarget);
                    } else {
                        that.popup.options.anchor = ev.currentTarget;

                        if (that._targetChild) {
                            offset = that.target.offset();
                            that.open(ev.pageX - offset.left, ev.pageY - offset.top);
                        } else {
                            that.open(ev.pageX, ev.pageY);
                        }
                    }
                }
            },

            _closeHandler: function(e) {
                var that = this,
                    target = $(e.relatedTarget || e.target),
                    sameTarget = target.closest(that.target.selector)[0] == that.target[0],
                    item = target.closest(itemSelector),
                    children = that._itemHasChildren(item),
                    overflowWrapper = that._overflowWrapper(),
                    containment = contains(that.element[0], target[0]) || (overflowWrapper && contains(overflowWrapper[0], target[0]));

                that._eventOrigin = e;

                var normalClick = e.which !== 3;

                if (that.popup.visible() && ((normalClick && sameTarget) || !sameTarget) && ((that.options.closeOnClick && !children && containment) || !containment)) {
                    if (containment) {
                        this.unbind(SELECT, this._closeTimeoutProxy);
                        that.bind(SELECT, that._closeTimeoutProxy);
                    } else {
                        that.close();
                    }
                }
            },

            _wire: function() {
                var that = this,
                    options = that.options,
                    target = that.target;

                that._preventProxy = null;
                that._showProxy = that._showHandler.bind(that);
                that._closeProxy = that._closeHandler.bind(that);
                that._closeTimeoutProxy = that.close.bind(that);

                if (target[0]) {
                    if (kendo.support.mobileOS && options.showOn == "contextmenu") {
                        that.userEvents = new kendo.UserEvents(target, {
                            filter: options.filter,
                            allowSelection: false
                        });

                        that._preventProxy = function() { return false; };

                        that.userEvents.bind("hold", that._showProxy);
                    }

                    if (options.filter) {
                        target.on(options.showOn + NS + that._marker, options.filter, that._preventProxy || that._showProxy);
                    } else {
                        target.on(options.showOn + NS + that._marker, that._preventProxy || that._showProxy);
                    }

                    target.on("keydown", function (e) {
                        if (e.keyCode === kendo.keys.F10 && e.shiftKey) {
                            e.preventDefault();
                            that.open(e.target);
                        }
                    });
                }
            },

            _triggerEvent: function(e) {
                var that = this,
                    anchor = $(that.popup.options.anchor)[0],
                    origin = that._eventOrigin;

                that._eventOrigin = undefined$1;

                return that.trigger(e.type, extend({ type: e.type, item: e.item || this.element[0], target: anchor }, origin ? { event: origin } : {} ));
            },

            _popup: function() {
                var that = this;
                var overflowWrapper = that._overflowWrapper();
                var contextMenuElement = that.element.addClass("k-context-menu");

                that._triggerProxy = that._triggerEvent.bind(that);

                that.popup = $("<div></div>")
                                .append(contextMenuElement)
                                .kendoPopup({
                                    origin: that.options.origin,
                                    position: that.options.position,
                                    autosize: that.options.orientation === "horizontal",
                                    anchor: that.target || "body",
                                    copyAnchorStyles: that.options.copyAnchorStyles,
                                    collision: that.options.popupCollision || "fit",
                                    animation: that.options.animation,
                                    activate: that._triggerProxy,
                                    deactivate: that._triggerProxy,
                                    appendTo: overflowWrapper || that.options.appendTo,
                                    close: !overflowWrapper ? $.noop : function(e) {
                                        $(getChildPopups(e.sender.element, overflowWrapper)).each(function(i, p) {
                                            var popup = p.data(KENDOPOPUP);
                                            if (popup) {
                                                popup.close(true);
                                            }
                                        });
                                    }
                                }).data(KENDOPOPUP);

                that._targetChild = contains(that.target[0], that.popup.element[0]);
            },

            _moveHoverToRoot: function(item, nextItem) {
                this._moveHover(item, nextItem);
                this.close();
            },

            _focus: function(e) {
                var hoverItem = this._oldHoverItem = this._hoverItem() || [];

                Menu.fn._focus.call(this, e);

                if (activeElement() === e.currentTarget) {
                    this._moveHover(hoverItem, this.wrapper.children().filter(":visible").not(".k-separator").first());
                }
            }
        });

        ui.plugin(Menu);
        ui.plugin(ContextMenu);

    })(window.kendo.jQuery);
    var kendo$r = kendo;

    var __meta__$w = {
        id: "toolbar",
        name: "ToolBar",
        category: "web",
        description: "The ToolBar widget displays one or more command buttons divided into groups.",
        depends: [ "core", "splitbutton", "dropdownbutton", "buttongroup", "menu", "icons" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            isFunction = kendo.isFunction,
            keys = kendo.keys,
            outerWidth = kendo._outerWidth,
            ns = ".kendoToolBar",
            TOOLBAR = "toolbar",
            KTOOLBAR = "k-toolbar",
            KBUTTON = "k-button",
            TOGGLE_BUTTON = "k-toggle-button",
            BUTTON_GROUP = "k-button-group",
            SPLIT_BUTTON = "k-split-button",
            MENU_BUTTON = "k-menu-button",
            POPUP_BUTTON = "k-popup-button",
            KSEPARATOR = "k-separator",
            SPACER_CLASS = "k-spacer",
            UPLOAD_BUTTON = "k-upload-button",
            POPUP = "k-popup",
            RESIZABLE_TOOLBAR = "k-toolbar-resizable",
            STATE_SELECTED = "k-selected",
            STATE_DISABLED = "k-disabled",
            STATE_HIDDEN = "k-hidden",
            FORCE_HIDDEN = "k-force-hidden",
            GROUP_START = "k-group-start",
            GROUP_END = "k-group-end",
            MENU_LINK = "k-menu-link",
            MENU_ITEM = "k-menu-item",
            OVERFLOW_ANCHOR = "k-toolbar-overflow-button",
            TEMPLATE_ITEM = "k-toolbar-item",
            TOOLBAR_TOOL = "k-toolbar-tool",
            MENU_LINK_TOGGLE = "k-menu-link-toggle",
            DROPDOWNLIST = "k-dropdownlist",
            INPUT_BUTTON = "k-input-button",
            MENU_POPUP = "k-menu-popup",
            KFOCUS = "k-focus",
            SINGLE = "single",
            MULTIPLE = "multiple",
            NONE = "none",
            TABINDEX_MINUS_1 = "[tabindex=-1]",

            ARIA_DISABLED = "aria-disabled",
            ARIA_CHECKED = "aria-checked",
            ARIA_LABEL = "aria-label",

            CHANGE = "change",
            CLICK = "click",
            TOGGLE = "toggle",
            OPEN = "open",
            CLOSE = "close",
            FOCUS = "focus",
            FOCUSIN = "focusin",
            FOCUSOUT = "focusout",
            KEYDOWN = "keydown",

            SPACER = "spacer",
            PRIMARY = "primary",
            ROLE = "role",
            SEPARATOR = "separator",
            OVERFLOW = "overflow",
            TABINDEX = "tabindex",
            INPUT = "input",
            SELECT = "select",
            HIDDEN = "hidden",
            GROUP = "group",
            DATA_UID = "data-uid",
            DATA_PARENTUID = "data-parentuid",
            DATA_ROLE_SELECTOR = "[data-role]",
            DATA_TOGGLE_SELECTOR = "[data-toggle]",
            DATA_ROLE_BUTTONMENU = "[data-role=buttonmenu]",

            KENDO_FOCUSABLE = ":kendoFocusable",

            OVERFLOW_OPEN = "overflowOpen",
            OVERFLOW_CLOSE = "overflowClose",
            OVERFLOW_NEVER = "never",
            OVERFLOW_AUTO = "auto",
            OVERFLOW_ALWAYS = "always",

            KENDO_UID_ATTR = kendo.attr("uid"),

            NOTHING = "",
            DASH = "_",
            EMPTY = " ",
            DOT = ".",
            COMMA = ",",
            ID = "id",
            UID = "uid",
            NBSP = "&nbsp;",

            K_DROP_DOWN_BUTTON = "kendoDropDownButton",
            K_SPLIT_BUTTON = "kendoSplitButton",
            K_TOGGLE_BUTTON = "kendoToggleButton",
            K_BUTTON_GROUP = "kendoButtonGroup";

            kendo.toolbar = {};

        var WIDGET_TYPES = {
            button: "Button",
            splitButton: "SplitButton",
            dropDownButton: "DropDownButton",
            buttonGroup: "ButtonGroup",
            popupButton: "Button",
            open: "Button"
        };

        var TOOLBAR_TOOLS_CLASSES = {
            Button: "k-toolbar-button",
            ToggleButton: "k-toolbar-toggle-button",
            SplitButton: "k-toolbar-split-button",
            DropDownButton: "k-toolbar-menu-button",
            ButtonGroup: "k-toolbar-button-group",
            ColorPicker: "k-toolbar-color-picker",
            Switch: "k-toolbar-switch"
        };

        var SAFE_COMPONENTS = [ "Button", "SplitButton", "DropDownButton", "ButtonGroup", "Switch", "ColorPicker" ];

        var POPUP_BUTTON_TEMPLATE = "<button class=\"k-popup-button\"><span class=\"k-button-icon k-icon\"></span><span class=\"k-button-text\">" + (kendo.ui.icon("caret-alt-down")) + "</span></button>";
        var TEMPLATE_WRAPPER = "<div class='k-toolbar-item' aria-keyshortcuts='Enter'></div>";
        var CUSTOM_WIDGET_WRAP = "<span class='k-toolbar-tool k-toolbar-item' tabindex='0'>";
        var SEPARATOR_OVERFLOW_EL = "<li role='separator' class='k-separator k-menu-separator k-hidden'></li>";
        var SEPARATOR_EL = '<div role="separator">&nbsp;</div>';
        var SPACER_EL = '<div>&nbsp;</div>';

        var ToolBar = Widget.extend({
            init: function(element, options) {
                Widget.fn.init.call(this, element, options);

                options = this.options;

                this._isRtl = kendo.support.isRtl(element);
                this.uid = kendo.guid();

                element = this.wrapper = this.element;
                element.attr(KENDO_UID_ATTR, this.uid);
                element.addClass(KTOOLBAR);
                element.attr(ROLE, TOOLBAR);

                if (options.resizable) {
                    this._resizable();
                }

                if (options.tools && options.tools.length > 0) {
                    options.items = this._extendToolsOptions();
                }

                if (options.items && options.items.length) {
                    this._items();
                }

                this._attachEvents();
                this._tabIndex();
                this._applyCssClasses();

                if (options.resizable) {
                    this._shrink(this.element.innerWidth());
                    this.overflowAnchor.appendTo(this.wrapper);
                    this._toggleOverflowAnchor();
                }

                kendo.notify(this);
            },

            events: [
                CLICK,
                TOGGLE,
                OPEN,
                CLOSE,
                OVERFLOW_OPEN,
                OVERFLOW_CLOSE,
                CHANGE
            ],

            options: {
                name: "ToolBar",
                items: [],
                resizable: true,
                navigateOnTab: false,
                evaluateTemplates: false,
                size: "medium"
            },

            destroy: function() {
                var that = this;

                if (that.options.resizable) {
                    kendo.unbindResize(that._resizeHandler);
                    that.overflowMenu.destroy();
                }

                that.element.find(DOT + POPUP_BUTTON).each(function (i, el) {
                    var button = $(el).getKendoButton(),
                        popup, popupWrapper, chooser;

                    if (button) {
                        chooser = button.chooser;
                        popup = button.popup;
                        popupWrapper = popup.wrapper;

                        chooser.destroy();
                        popup.destroy();
                        popupWrapper.remove();
                    }
                });

                kendo.destroy(that.element.children());

                Widget.fn.destroy.call(that);
            },

            add: function(options) {
                this._add(options);

                if (this.options.resizable) {
                    this.resize(true);
                }
            },

            enable: function(candidate, enable) {
                var that = this,
                    uid = this._getUid(candidate),
                    item = this._getItem(candidate, uid),
                    component = item.component,
                    buttonPopup, children, focused, wrapper;

                if (typeof enable == "undefined") {
                    enable = true;
                }

                if (item.component) {
                    wrapper = component.wrapper;
                    focused = wrapper.hasClass(KFOCUS) || wrapper.is(":focus");
                    component.enable(enable);
                    wrapper.find("[disabled]").removeAttr("disabled");
                    wrapper.removeAttr("disabled");

                    if (focused) {
                        wrapper.addClass(KFOCUS).trigger(FOCUS);
                    }
                } else if (item.buttonsPopupItem.length > 0) {
                    buttonPopup = kendo.widgetInstance(item.buttonsPopupItem.closest(DOT + MENU_POPUP));
                    buttonPopup.enable(enable, item.buttonsPopupItem);
                }

                if (this.overflowMenu) {
                    this.overflowMenu.enable(item.menuItem, enable);

                    children = this.overflowMenu.element
                        .find("[data-parentuid=" + uid + "]");

                    children.each(function (i, el) {
                        that.overflowMenu.enable($(el), enable);
                    });
                }
            },

            getSelectedFromGroup: function(groupName) {
                return this.element.find(DOT + TOGGLE_BUTTON + "[data-group='" + groupName + "']").filter(DOT + STATE_SELECTED);
            },

            hide: function(candidate) {
                var that = this,
                    uid = this._getUid(candidate),
                    item = that._getItem(candidate, uid),
                    elements, parentButtonGroup, children, parentGroupEl;

                if (!item) {
                    return;
                }

                elements = item.templateEl.add(item.toolbarEl).add(item.buttonsPopupItem).add(item.menuItem);

                elements.addClass(STATE_HIDDEN);
                elements.addClass(FORCE_HIDDEN);

                if (this.overflowMenu) {
                    children = this.overflowMenu.element
                        .find("[data-parentuid=" + uid + "]");

                    children.each(function (i, el) {
                        $(el).addClass(FORCE_HIDDEN);
                        $(el).addClass(STATE_HIDDEN);
                    });
                }

                parentGroupEl = item.toolbarEl.parent().closest(DOT + BUTTON_GROUP);
                parentButtonGroup = parentGroupEl.data(K_BUTTON_GROUP);

                if (parentButtonGroup) {
                    if (parentGroupEl.children(":not(.k-hidden)").length === 0) {
                        that.hide(parentGroupEl);
                    } else {
                        that._groupVisibleButtons(parentGroupEl);
                    }
                }

                if (elements.find("[tabindex=0]").addBack("[tabindex=0]").length > 0) {
                    this._resetTabIndex(that._getAllItems().first());
                }

                if (this.options.resizable) {
                    this.resize(true);
                }
            },

            remove: function(candidate) {
                var that = this,
                    uid = this._getUid(candidate),
                    item = this._getItem(candidate, uid),
                    buttonGroup, children;

                if (!item) {
                    return;
                }

                if (item.component) {
                    buttonGroup = item.toolbarEl.closest('[data-role="buttongroup"]');
                    if (buttonGroup.length > 0 && item.toolbarEl.siblings().length === 0) {
                        buttonGroup.data(K_BUTTON_GROUP).destroy();
                        buttonGroup.remove();

                        item.toolbarEl = $(NOTHING);
                    } else {
                        item.component.destroy();
                    }
                }

                if (item.templateEl.length > 0) {
                    item.templateEl.remove();
                } else if (item.toolbarEl.length > 0) {
                    item.toolbarEl.remove();
                }

                if (item.buttonsPopupItem.length > 0) {
                    item.buttonsPopupItem.remove();
                }

                if (this.overflowMenu) {
                    this.overflowMenu.remove(item.menuItem);

                    children = this.overflowMenu.element
                        .find("[data-parentuid=" + uid + "]");

                    children.each(function (i, el) {
                        that.overflowMenu.remove($(el));
                    });
                }

                if (this.options.resizable) {
                    this.resize(true);
                }
            },

            show: function(candidate) {
                var that = this,
                    uid = this._getUid(candidate),
                    item = this._getItem(candidate, uid),
                    elements, parentButtonGroup, children, parentGroupEl;

                if (!item) {
                    return;
                }

                elements = item.templateEl.add(item.toolbarEl).add(item.buttonsPopupItem);
                elements.removeClass(FORCE_HIDDEN);
                elements.removeClass(STATE_HIDDEN);

                item.menuItem.removeClass(FORCE_HIDDEN);

                if (this.overflowMenu) {
                    children = this.overflowMenu.element
                        .find("[data-parentuid=" + uid + "]");

                    children.each(function (i, el) {
                        $(el).removeClass(FORCE_HIDDEN);
                    });
                }

                parentGroupEl = item.toolbarEl.parent().closest(DOT + BUTTON_GROUP);
                parentButtonGroup = parentGroupEl.data(K_BUTTON_GROUP);

                if (parentButtonGroup) {
                    if (parentGroupEl.hasClass("k-hidden") && parentGroupEl.children(":not(.k-hidden)").length > 0) {
                        that.show(parentGroupEl);
                    } else {
                        that._groupVisibleButtons(parentGroupEl);
                    }
                }

                if (this.options.resizable) {
                    this.resize(true);
                }
            },

            toggle: function(candidate, checked) {
                var item = this._getItem(candidate),
                    element = item.toolbarEl,
                    menuItem = item.menuItem,
                    button, parentGroup, group, groupButtons;

                if (checked === undefined$1) {
                    checked = true;
                }

                button = element.data(K_TOGGLE_BUTTON);

                if (!item.component && menuItem.find(DOT + MENU_LINK_TOGGLE).length === 0) {
                    return;
                }

                group = element.data(GROUP);

                if (item.component) {
                    parentGroup = element.closest(DOT + BUTTON_GROUP).data(K_BUTTON_GROUP);

                    if (parentGroup) {
                        if (element.hasClass(STATE_SELECTED) !== checked) {
                            parentGroup._toggleIndex(element.index());
                        }
                    }

                    button.toggle(checked);

                    if (checked) {
                        groupButtons = this.element.find("[data-group=" + group + "]");

                        groupButtons.each(function (i, el) {
                            if (el !== element[0]) {
                                $(el).data(K_TOGGLE_BUTTON).toggle(false);
                            }
                        });
                    }
                }

                if (menuItem) {
                    menuItem
                        .attr(ARIA_CHECKED, checked)
                        .find(DOT + MENU_LINK_TOGGLE)
                        .toggleClass(STATE_SELECTED, checked);

                    if (checked && this.overflowMenu) {
                        groupButtons = this.overflowMenu.element.find("[data-group=" + group + "]");

                        groupButtons.each(function (i, el) {
                            if (el !== menuItem[0]) {
                                $(el)
                                    .attr(ARIA_CHECKED, false)
                                    .find(DOT + MENU_LINK_TOGGLE)
                                    .removeClass(STATE_SELECTED);
                            }
                        });
                    }
                }
            },

            toggleTools: function(conditions) {
                var that = this,
                    tools = that.element.find(DATA_TOGGLE_SELECTOR),
                    focusable = that.element.find(KENDO_FOCUSABLE).not(TABINDEX_MINUS_1);

                tools.each(function(index, elm) {
                    var tool = $(elm),
                        widget = null,
                        condition = tool.data(TOGGLE),
                        toToggle = conditions && conditions[condition];

                    if (tool.is(DATA_ROLE_SELECTOR)) {
                        widget = kendo.widgetInstance(tool);
                    }

                    if (widget && widget.enable) {
                        widget.enable(toToggle || false);
                    } else {
                        that.enable(tool, toToggle);
                    }
                });

                that.element.find(DATA_TOGGLE_SELECTOR + "[disabled]").removeAttr("disabled");

                that.element.find(KENDO_FOCUSABLE).not(TABINDEX_MINUS_1).attr("tabindex", -1);
                focusable.attr(TABINDEX, 0);
            },

            _add: function(options) {
                var processed = this._processOptions(options),
                    template = processed.template,
                    overflowTemplate = processed.overflowTemplate,
                    type = WIDGET_TYPES[processed.type],
                    element;

                if (template || overflowTemplate) {
                    element = this._addTemplate(processed);
                } else if (kendo.ui[processed.component]) {
                    element = this._addCustomWidget(processed);
                } else if (type) {
                    element = this._addDefaultTool(type, processed);
                } else if (processed.type === SPACER) {
                    this._addSpacer();
                } else if (processed.type === SEPARATOR) {
                    this._addSeparator(processed);
                }

                if (element) {
                    if (this.overflowAnchor) {
                        element.insertBefore(this.overflowAnchor);
                    } else {
                        element.appendTo(this.element);
                    }

                    element.find("[disabled]").removeAttr("disabled");

                    if (element.is("[disabled]")) {
                        element.removeAttr("disabled");
                    }
                }
            },

            _addAttributes: function(options, element) {
                var attributes = options.attributes,
                    classes = NOTHING;

                if (!attributes) {
                    attributes = {};
                }

                if (options.hidden) {
                    classes = STATE_HIDDEN + EMPTY + FORCE_HIDDEN;
                }

                if (options.align) {
                    classes = classes + " k-align-" + options.align;
                }

                if (attributes) {
                    if (attributes.class) {
                        classes = classes + EMPTY + attributes.class;
                        delete attributes.class;
                    }

                    element.attr(attributes);
                }

                element.addClass(classes);
                element.attr(KENDO_UID_ATTR, options.uid);

                if (options.id) {
                    element.attr(ID, options.id);
                }
                if (options.overflow === OVERFLOW_NEVER) {
                    element.attr("data-overflow", OVERFLOW_NEVER);
                }
            },

            _addCustomWidget: function(options) {
                var element = $(options.element || "<input>"),
                    widget, result, classes;

                if (options.overflowComponent) {
                    this._addMenuItem(options.overflowComponent.type, $.extend({}, options, options.overflowComponent));
                }

                if (options.attributes) {
                    classes = options.attributes.class;
                    delete options.attributes["class"];
                    element.attr(options.attributes);
                    delete options.attributes[ARIA_LABEL];
                }

                if (!options.componentOptions) {
                    options.componentOptions = {};
                }

                options.componentOptions.size = this.options.size;

                widget = new kendo.ui[options.component](element, options.componentOptions);

                if (SAFE_COMPONENTS.indexOf(options.component) > -1) {
                    widget.wrapper.addClass(TOOLBAR_TOOL + " " + TOOLBAR_TOOLS_CLASSES[options.component]);
                    result = widget.wrapper;
                } else {
                    result = (widget.wrapper || widget.element).wrap(CUSTOM_WIDGET_WRAP).parent();
                }

                if (options.attributes) {
                    options.attributes.class = classes;
                }

                this._addAttributes(options, result);

                return result;
            },

            _addDefaultTool: function(component, options) {
                var element, op;

                if (options.overflow !== OVERFLOW_ALWAYS) {
                    element = this._addToolbarTool(component, $.extend(true, {}, options));
                }

                if (this.overflowMenu && options.overflow !== OVERFLOW_NEVER) {
                    if (options.overflowComponent) {
                        op = $.extend(true, {}, options, options.overflowComponent);
                        delete op["data-command"];
                        this._addMenuItem("Button", op);
                    } else {
                        this._addMenuItem(component, $.extend(true, {}, options));
                    }
                }

                return element;
            },

            _addMenuItem: function(component, options) {
                var this$1$1 = this;

                var that = this,
                    selected = options.selected,
                    menuitem;

                delete options.selected;

                if (options.id) {
                    options.id = options.id + DASH + OVERFLOW;
                }
                if (options.showIcon === TOOLBAR) {
                    delete options.imageUrl;
                    delete options.icon;
                }

                if (options.showText === TOOLBAR) {
                    if (!options.attributes) {
                        options.attributes = {};
                    }

                    options.attributes[ARIA_LABEL] = options.text;

                    options.text = NOTHING;
                } else if (options.text === undefined$1 || options.text === NOTHING) {
                    options.text = NBSP;
                    options.encoded = false;
                }

                that.overflowMenu.append(options);
                menuitem = that.overflowMenu.element.find(DOT + MENU_ITEM).last();

                if (options.icon) {
                    menuitem.find(DOT + MENU_LINK).prepend(kendo.ui.icon(options.icon));
                }

                if (component === "ToggleButton" || (component === "Button" && options.togglable === true)) {
                    menuitem.find(DOT + MENU_LINK).addClass(MENU_LINK_TOGGLE);

                    if (selected) {
                        menuitem.find(DOT + MENU_LINK).addClass(STATE_SELECTED);
                    }

                    if (options.group) {
                        menuitem.attr("data-group", options.group);
                    }
                } else if (options.menuButtons) {
                    options.menuButtons.forEach(function (i) {
                        i.overflow = options.overflow;
                        that._addMenuItem(null, i);
                    });
                } else if (options.buttons) {
                    menuitem.remove();
                    menuitem = null;

                    options.buttons.forEach(function (i) {
                        var attributes = i.attributes;
                        i.overflow = options.overflow;
                        i.attributes = $.extend(attributes, options.attributes);

                        that._addMenuItem("Button", i);
                    });
                }

                if (component === "DropDownButton") {
                    menuitem.addClass(STATE_DISABLED);
                    menuitem.attr(ARIA_DISABLED, true);
                }

                if (menuitem) {
                    that._addAttributes(options, menuitem);

                    if (options.overflow === OVERFLOW_AUTO) {
                        menuitem.addClass(STATE_HIDDEN);
                    }

                    if (options.click || options.toggle) {
                        that.overflowMenu.bind(SELECT, function (e) {
                            if (e.item === menuitem[0]) {
                                this$1$1._onMenuItemSelect(e, options.click, options.toggle);
                            }
                        });
                    }
                }

                return menuitem;
            },

            _addPopupButton: function(options) {
                var that = this,
                    widgetElement = $(POPUP_BUTTON_TEMPLATE),
                    component = options.popupComponent,
                    popup, chooser;

                widgetElement.attr(ARIA_LABEL, options.text);

                popup = $("<div/>").appendTo($("<body>")).kendoPopup({
                    anchor: widgetElement
                }).data("kendoPopup");

                widgetElement.on(CLICK + " touchend", function (e) {
                    popup.toggle();
                    e.preventDefault();
                });

                chooser = new component(popup.element);

                chooser.bind(options.commandOn, function (e) {
                    that.trigger(CHANGE, { target: widgetElement, value: e.value || e });
                    popup.close();
                });

                return { widgetElement: widgetElement, chooser: chooser, popup: popup };
            },

            _addSeparator: function(options) {
                var separator = $(SEPARATOR_EL),
                    overflowSeparator = $(SEPARATOR_OVERFLOW_EL);

                separator.addClass(KSEPARATOR);
                separator.attr(ROLE, SEPARATOR);

                if (this.overflowAnchor) {
                    separator.insertBefore(this.overflowAnchor);
                } else {
                    separator.appendTo(this.element);
                }

                this._addAttributes(options, separator);

                if (options.id) {
                    options.id = options.id + DASH + OVERFLOW;
                }

                this._addAttributes(options, overflowSeparator);

                if (this.overflowMenu) {
                    this.overflowMenu.element.append(overflowSeparator);
                }
            },

            _addSpacer: function() {
                var spacer = $(SPACER_EL);
                spacer.addClass(SPACER_CLASS);

                if (this.overflowAnchor) {
                    spacer.insertBefore(this.overflowAnchor);
                } else {
                    spacer.appendTo(this.element);
                }
            },

            _addTemplate: function(options) {
                var template = options.template,
                    overflowTemplate = options.overflowTemplate,
                    element, menuitem, inputsInTemplate = $(NOTHING);

                if (overflowTemplate && this.overflowMenu && options.overflow !== OVERFLOW_NEVER) {
                    overflowTemplate = isFunction(overflowTemplate) ? overflowTemplate(options)[0] : overflowTemplate;
                    this.overflowMenu.append({});
                    menuitem = this.overflowMenu.element
                        .find(DOT + MENU_ITEM)
                        .last()
                        .find(DOT + MENU_LINK)
                        .html(overflowTemplate)
                        .parent();
                }

                if (template && options.overflow !== OVERFLOW_ALWAYS) {
                    if (this.options.evaluateTemplates) {
                        template = kendo.template(template);
                    }

                    template = isFunction(template) ? template(options) : template;

                    element = $(TEMPLATE_WRAPPER);
                    element.html(template);

                    if (menuitem) {
                        menuitem.addClass(STATE_HIDDEN);
                    }
                }

                if (element) {
                    inputsInTemplate = element.find(INPUT + COMMA + SELECT);
                    this._addAttributes(options, element);
                }

                if (menuitem) {
                    inputsInTemplate.add(menuitem.find(INPUT + COMMA + SELECT));
                    this._addAttributes(options, menuitem);
                }

                if (!this.options.navigateOnTab && inputsInTemplate.length > 0) {
                    element.attr(TABINDEX, 0);
                    element.addClass(TOOLBAR_TOOL);
                    inputsInTemplate.attr(TABINDEX, -1);
                }

                return element;
            },

            _addToolbarTool: function(component, options) {
                var widgetElement = $("<button>"),
                    hasButtons = false,
                    widget, element, popupRef;

                if (options.primary === true) {
                    options.themeColor = PRIMARY;
                }
                if (options.url) {
                    widgetElement = $("<a href='" + options.url + "'>");
                }
                if (options.showIcon === OVERFLOW) {
                    delete options.imageUrl;
                    delete options.icon;
                }
                if (options.showText !== OVERFLOW) {
                    widgetElement.text(options.text);
                } else {
                    widgetElement.attr(ARIA_LABEL, options.text);
                }

                if (options.type === "popupButton") {
                    popupRef = this._addPopupButton(options);
                    widgetElement = popupRef.widgetElement;
                } else if (component === "Button" && options.togglable === true) {
                    component = "ToggleButton";
                } else if (options.menuButtons) {
                    options.items = options.menuButtons;
                    delete options.menuButtons;

                    if (options.attributes && options.attributes.class) {
                        widgetElement.addClass(options.attributes.class);
                    }

                    widgetElement.attr(DATA_UID, options.uid);
                    delete options.uid;
                } else if (options.buttons) {
                    widgetElement = $("<span></span>");
                    hasButtons = true;
                    options.items = options.buttons;
                    delete options.buttons;

                    options.preventKeyNav = true;

                    options.items.forEach(function (i) {
                        if (i.showIcon === OVERFLOW) {
                            delete i.imageUrl;
                            delete i.icon;
                        }

                        if (i.showText === OVERFLOW) {
                            if (!i.attributes) {
                                i.attributes = {};
                            }

                            i.attributes[ARIA_LABEL] = i.text;

                            delete i.text;
                        }
                    });
                }

                if (options.id) {
                    widgetElement.attr(ID, options.id);
                    delete options.id;
                }

                options.size = this.options.size;

                widget = new kendo.ui[component]($(widgetElement), options);
                element = widget.wrapper || widget.element;
                element.addClass(TOOLBAR_TOOLS_CLASSES[component]);
                this._addAttributes(options, element);

                if (options.url) {
                    widgetElement.removeAttr(ROLE);
                }

                if (hasButtons) {
                    element.find(DOT + KBUTTON).addClass(TOOLBAR_TOOL);
                    this._groupVisibleButtons(element);
                } else {
                    widget.element.addClass(TOOLBAR_TOOL);
                }

                if (options.type !== "popupButton" && options.type !== "open") {
                    this._attachWidgetEvents(widget);
                } else if (options.type === "open") {
                    widgetElement.addClass(UPLOAD_BUTTON);
                    this._resetOpen(widgetElement, options.extensions);
                    element = widgetElement.parent();
                } else {
                    widget.chooser = popupRef.chooser;
                    widget.popup = popupRef.popup;
                }

                return element;
            },

            _attachEvents: function() {
                var that = this;

                that.element.on(KEYDOWN + ns, that._keydown.bind(that))
                    .on(FOCUSIN + ns, that._focusIn.bind(that))
                    .on(FOCUSOUT + ns, that._focusOut.bind(that));
            },

            _attachWidgetEvents: function(widget) {
                var that = this;

                widget.bind(CLICK, that._onClick.bind(that));
                widget.bind(TOGGLE, that._onToggle.bind(that));
                widget.bind(SELECT, that._onSelect.bind(that));
                widget.bind(OPEN, that._onOpen.bind(that));
                widget.bind(CLOSE, that._onClose.bind(that));

                widget.wrapper.find(DOT + KBUTTON).each(function (i, el) {
                    var $el = $(el);

                    if ($el.data("kendoButton")) {
                        $el.data("kendoButton").bind(CLICK, function (e) {
                            that.trigger(CLICK, { id: e.id, target: e.target, originalEvent: e.originalEvent || e.event });
                        });
                    }
                });
            },

            _childrenWidth: function() {
                var gap = parseInt(this.element.css('gap'), 10) || 0;
                var childrenWidth = gap;

                this.element.children(":visible:not(" + DOT + SPACER_CLASS + ")").each(function() {
                    childrenWidth += outerWidth($(this), false) + gap;
                });

                return Math.ceil(childrenWidth);
            },

            _extendToolsOptions: function() {
                var this$1$1 = this;

                var options = this.options,
                    items = options.tools.flatMap(function (tool) { return this$1$1._mapTool(tool, options.parentMessages, options.defaultTools); });

                this.options.items = items;

                return items;
            },

            _focusIn: function(e) {
                var target = $(e.target),
                    button = target.closest(DOT + KBUTTON);

                if (button.length > 0) {
                    this._resetTabIndex(button);
                    button.addClass(KFOCUS);
                }
            },

            _focusOut: function(e) {
                this.wrapper.find(DOT + KBUTTON + DOT + KFOCUS).removeClass(KFOCUS);
            },

            _getAllItems: function() {
                return this.wrapper.find(DOT + TOOLBAR_TOOL)
                    .filter(":visible")
                    .filter(function (i, el) {
                        if (el.style.visibility === HIDDEN) {
                            return false;
                        }

                        return true;
                    });
            },

            _getItem: function(candidate, knownUid) {
                var uid = knownUid || this._getUid(candidate),
                    buttonsPopups = $(DATA_ROLE_BUTTONMENU),
                    uidSelector, toolbarEl;

                if (!uid) {
                    return {
                        toolbarEl: this.element.find(candidate),
                        templateEl: $(NOTHING),
                        menuItem: this.overflowMenu ? this.overflowMenu.element.find(candidate) : $(NOTHING),
                        buttonsPopupItem: $(NOTHING)
                    };
                }

                uidSelector = "[data-uid=" + uid + "]";
                toolbarEl = this.element.find(uidSelector);

                return {
                    toolbarEl: toolbarEl,
                    templateEl: toolbarEl.closest(DOT + TEMPLATE_ITEM + COMMA + DOT + SPLIT_BUTTON),
                    component: kendo.widgetInstance(toolbarEl),
                    menuItem: this.overflowMenu ? this.overflowMenu.element.find(uidSelector) : $(NOTHING),
                    buttonsPopupItem: buttonsPopups.find(uidSelector)
                };
            },

            _getNextElement: function(item, direction) {
                var items = this._getAllItems(),
                    itemIndex = items.index(item) === -1 ? items.index(item.parentElement) : items.index(item),
                    focusableItem = items[itemIndex + direction];

                if (!focusableItem) {
                    if (direction === -1) {
                        focusableItem = items.last();
                    } else {
                        focusableItem = items.first();
                    }
                }

                return focusableItem;
            },

            _getUid: function(candidate) {
                var element;

                // find toolbar item by jQuery selector
                element = this.element.find(candidate);

                // if not found find in in the DropDown-/SplitButton popups
                if (!element.length) {
                    element = $(DATA_ROLE_BUTTONMENU).find(candidate);
                }

                // if not, find it in the OverflowMenu
                if (!element.length && this.overflowMenu) {
                    element = this.overflowMenu.element.find(candidate);
                }

                if (!element.length) {
                    return null;
                } else {
                    return element.data(UID) || element.closest(DOT + TOOLBAR_TOOL).data(UID);
                }
            },

            _groupVisibleButtons: function(el) {
                var buttons = el.children(),
                    visibleBtns;

                buttons.removeClass(GROUP_END).removeClass(GROUP_START);
                visibleBtns = buttons.filter(":not('." + STATE_HIDDEN + "')");
                visibleBtns.first().addClass(GROUP_START);
                visibleBtns.last().addClass(GROUP_END);
            },

            _hideItem: function(item) {
                var that = this,
                    widget;

                item.addClass(STATE_HIDDEN);

                if (that.overflowMenu) {
                    if (item.hasClass(SPLIT_BUTTON) || item.hasClass(MENU_BUTTON)) {
                        if (item.hasClass(SPLIT_BUTTON)) {
                            item = item.children().eq(0);
                            widget = item.data(K_SPLIT_BUTTON);
                        } else {
                            widget = item.data(K_DROP_DOWN_BUTTON);
                        }

                        widget.menu.list.children().each(function (i, el) {
                            that._showMenuItem($(el));
                        });

                        that._showMenuItem(item);
                    } else if (item.hasClass(BUTTON_GROUP)) {
                        item.children().each(function (i, el) {
                            that._showMenuItem($(el));
                        });
                    } else {
                        that._showMenuItem(item);
                    }
                }
            },

            _hideMenuItem: function(item) {
                this.overflowMenu.element
                    .find(">li[data-uid='" + item.data(UID) + "']")
                    .addClass(STATE_HIDDEN);
            },

            _items: function() {
                var options = this.options;

                for (var i = 0; i < options.items.length; i++) {
                    this._add(options.items[i]);
                }
            },

            _keydown: function(e) {
                var target = $(e.target),
                    keyCode = e.keyCode,
                    templateItem = target.closest(DOT + TEMPLATE_ITEM),
                    isOverflowAnchor = target.is(DOT + OVERFLOW_ANCHOR);

                if (!this.options.navigateOnTab && !target.is(".k-toolbar-tool") && keyCode === keys.ESC && templateItem.length > 0) {
                    e.stopPropagation();
                    this._keyDeactivateTemplate(templateItem);
                    return;
                }

                if (!target.hasClass(TOOLBAR_TOOL)) {
                    return;
                }

                if (!this.options.navigateOnTab && keyCode === keys.ENTER && target.hasClass(TEMPLATE_ITEM)) {
                    this._keyActivateTemplate(target);
                } else if (isOverflowAnchor && (e.altKey && keyCode === keys.DOWN || keyCode === keys.ENTER || keyCode === keys.SPACEBAR)) {
                    this._keyOpenOverflow(e, keyCode);
                } else if (keyCode === keys.HOME) {
                    this._keyFocusFirst(target, e);
                } else if (keyCode === keys.END) {
                    this._keyFocusLast(target, e);
                } else if (!this.options.navigateOnTab && (keyCode === keys.RIGHT || keyCode === keys.LEFT)) {
                    this._keyFocusNext(keyCode, e);
                }
            },

            _keyActivateTemplate: function(target) {
                var innerFocusable = target.find(KENDO_FOCUSABLE + ":not('" + DOT + INPUT_BUTTON + "')" + COMMA + DOT + DROPDOWNLIST);

                if (innerFocusable.length > 0) {
                    target.attr(TABINDEX, -1);

                    innerFocusable.attr(TABINDEX, 0);
                    innerFocusable.first().trigger(FOCUS);
                }
            },

            _keyDeactivateTemplate: function(templateItem) {
                var innerWidget = templateItem.find(DATA_ROLE_SELECTOR),
                    innerFocusable = templateItem.find(KENDO_FOCUSABLE + ":not('" + DOT + INPUT_BUTTON + "')" + COMMA + DOT + DROPDOWNLIST),
                    widgetInstance;

                if (innerWidget.length > 0) {
                    widgetInstance = kendo.widgetInstance(innerWidget);

                    if (widgetInstance) {
                        if (widgetInstance.overflowMenu && widgetInstance.overflowMenu.visible()) {
                            return;
                        } else {
                            templateItem.attr(TABINDEX, 0);
                            templateItem.trigger(FOCUS);
                            templateItem.find(KENDO_FOCUSABLE).attr(TABINDEX, -1);
                        }
                    }
                }

                if (innerFocusable.length > 0) {
                    templateItem.attr(TABINDEX, 0);
                    templateItem.trigger(FOCUS);
                    innerFocusable.attr(TABINDEX, -1);
                }
            },

            _keyFocusFirst: function(target, e) {
                var items = this._getAllItems();

                if (target.is(DOT + DROPDOWNLIST) || target.is(INPUT)) {
                    return;
                }

                this._resetTabIndex(items.first());
                items.first().trigger(FOCUS);
                e.preventDefault();
            },

            _keyFocusLast: function(target, e) {
                var items = this._getAllItems(),
                    last;

                if (target.is(DOT + DROPDOWNLIST) || target.is(INPUT)) {
                    return;
                }

                last = items.last();

                if (last.width() === 0) {
                    last = items.eq(items.length - 2);
                }

                this._resetTabIndex(last);
                last.trigger(FOCUS);
                e.preventDefault();
            },

            _keyFocusNext: function(keyCode, e) {
                var direction = this._isRtl ? -1 : 1,
                    next;

                if (keyCode === keys.LEFT) {
                    direction = -1 * direction;
                }

                next = $(this._getNextElement(e.target, direction));
                this._resetTabIndex(next);
                next.trigger(FOCUS);

                e.preventDefault();
            },

            _keyOpenOverflow: function(e, keyCode) {
                if (keyCode === keys.SPACEBAR) {
                    e.preventDefault();
                }

                this.overflowMenu.open();
            },

            _mapAttributes: function(toolOptions, messages) {
                return {
                    "aria-label": messages[toolOptions.name || toolOptions.property],
                    "title": messages[toolOptions.name || toolOptions.property],
                    "data-command": toolOptions.command,
                    "data-options": toolOptions.options,
                    "data-dialog": toolOptions.dialog,
                    "data-property": toolOptions.property,
                    "data-value": toolOptions.value,
                    "data-toggle": toolOptions.toggleCondition
                };
            },

            _mapComponent: function(component, messages) {
                var that = this,
                    componentOptions = component.componentOptions,
                    componentMessages = componentOptions.messages,
                    attributes = $.extend({}, that._mapAttributes(component, messages), component.attributes),
                    options;

                if (component.overflowComponent) {
                    options = component.options || {};

                    if (component.componentOptions.dataSource) {
                        options.options = component.componentOptions.dataSource;
                    }
                    if (component.componentOptions.value) {
                        options.default = component.componentOptions.value;
                    }

                    if (Object.keys(options).length > 0) {
                        component.overflowComponent.options = JSON.stringify(options);
                    }

                    component.overflowComponent = that._mapTool(component.overflowComponent, messages);
                }

                if (componentMessages) {
                    Object.keys(componentMessages).forEach(function (key) {
                        component.componentOptions.messages[key] = messages[componentMessages[key]] || componentMessages[key];
                    });
                }

                Object.keys(componentOptions).forEach(function (key) {
                    if (key === "commandOn") {
                        component.componentOptions[componentOptions[key]] = function (ev) {
                            that.trigger(CHANGE, { target: ev.target || ev.sender.element });
                        };
                    }
                });

                if (componentOptions.dataSource && componentOptions.dataSource.length) {
                    component.componentOptions.dataSource = componentOptions.dataSource.map(function (i) {
                        if (i.name && messages[i.name]) {
                            i.text = messages[i.name];
                        }

                        return i;
                    });
                }

                component.attributes = attributes;

                return component;
            },

            _mapTool: function(tool, messages, defaultTools) {
                var that = this,
                    isArray = Array.isArray(tool),
                    isBuiltInTool, toolOptions, attributes;

                if (isArray) {
                    return {
                        type: "buttonGroup",
                        buttons: tool.map(function (t) { return that._mapTool(t, messages, defaultTools); })
                    };
                }

                isBuiltInTool = $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name;
                tool = isBuiltInTool ? tool.name : tool;
                toolOptions = $.isPlainObject(tool) ? tool : $.extend({}, defaultTools[tool]);

                attributes = $.extend({}, that._mapAttributes(toolOptions, messages), toolOptions.attributes);

                kendo.deepExtend(toolOptions, {
                    text: messages[toolOptions.name || toolOptions.property],
                    attributes: attributes,
                });

                if (toolOptions.type === "component") {
                    if (toolOptions.items) {
                        return toolOptions.items.map(function (t) { return that._mapComponent(t, messages); });
                    } else {
                        return that._mapComponent(toolOptions, messages);
                    }
                } else if (toolOptions.type === "buttonGroup") {
                    delete toolOptions.attributes[ARIA_LABEL];
                    toolOptions.buttons = toolOptions.buttons.map(function (t) { return that._mapTool(t, messages, defaultTools); });
                } else if (toolOptions.type === "splitButton") {
                    delete toolOptions.attributes[ARIA_LABEL];
                    toolOptions.menuButtons = toolOptions.menuButtons.flatMap(function (t) { return that._mapTool(t, messages, defaultTools); });
                } else if (toolOptions.type === "popupButton" && toolOptions.overflowComponent) {
                    toolOptions.overflowComponent = that._mapTool(toolOptions.overflowComponent, messages);
                }

                delete toolOptions.name;

                return toolOptions;
            },

            _menuItemSelect: function(e) {
                var item = $(e.item),
                    id = item.attr(ID),
                    togglable = item.find(DOT + MENU_LINK_TOGGLE),
                    groupName = item.data(GROUP),
                    shouldSelect, twin, group;

                if (id && id.indexOf(DASH + OVERFLOW) > -1) {
                    id = id.replace(DASH + OVERFLOW, NOTHING);
                }

                if (togglable.length) {
                    if (groupName) {
                        this.overflowMenu.element.find("[data-group=" + groupName + "]").each(function (i, el) {
                            var current = $(el);

                            current.attr(ARIA_CHECKED, false);
                            current.find(DOT + MENU_LINK_TOGGLE).removeClass(STATE_SELECTED);
                        });
                    }

                    shouldSelect = groupName ? true : !togglable.hasClass(STATE_SELECTED);

                    togglable.toggleClass(STATE_SELECTED, shouldSelect);
                    item.attr(ARIA_CHECKED, shouldSelect);

                    twin = this.element.find("[data-uid=" + item.data(UID) + "]");

                    if (twin.length) {
                        if (twin.closest(DOT + BUTTON_GROUP).length) {
                            group = twin.closest(DOT + BUTTON_GROUP).data(K_BUTTON_GROUP);
                            group.select(twin);
                        } else {
                            if (groupName) {
                                this.element.find("[data-group=" + groupName + "]").each(function (i, el) {
                                    $(el).data(K_TOGGLE_BUTTON).toggle(false);
                                });
                            }

                            twin.data(K_TOGGLE_BUTTON).toggle(true);
                        }
                    }

                    this.trigger(TOGGLE, {
                        id: item.attr(ID),
                        target: item,
                        checked: shouldSelect
                    });
                } else {
                    this.trigger(CLICK, {
                        id: id,
                        target: item,
                    });
                }
            },

            _onClick: function(e) {
                var el = e.target,
                    togglable = el.hasClass(TOGGLE_BUTTON),
                    group = el.data(GROUP);

                if (!togglable) {
                    this.trigger(CLICK, { id: e.id, target: e.target, originalEvent: e.originalEvent || e.event });
                }

                if (togglable && group && this.element.find("[data-group=" + group + "]").length > 1) {
                    if (el.hasClass(STATE_SELECTED)) {
                        e.preventDefault();
                    }
                }
            },

            _onClose: function(e) {
                if (this.trigger(CLOSE, { widget: e.sender })) {
                    e.preventDefault();
                }
            },

            _onMenuItemSelect: function(e, click, toggle) {
                var this$1$1 = this;

                var item = $(e.item),
                    togglable = item.find(DOT + MENU_LINK_TOGGLE).length > 0,
                    id = item.attr(ID);

                if (id && id.indexOf(DASH + OVERFLOW) > -1) {
                    id = id.replace(DASH + OVERFLOW, NOTHING);
                }

                if (click) {
                    click.bind(this)({
                        event: e.event,
                        id: id,
                        target: item
                    });
                }

                if (togglable && toggle) {
                    setTimeout(function () {
                        toggle.bind(this$1$1)({
                            event: e.event,
                            id: id,
                            target: item,
                            checked: item.find(DOT + STATE_SELECTED).length > 0
                        });
                    });
                }
            },

            _onOpen: function(e) {
                if (this.trigger(OPEN, { widget: e.sender })) {
                    e.preventDefault();
                }
            },

            _onSelect: function(e) {
                var menuEl = this.overflowMenu ? this.overflowMenu.element : $(NOTHING);

                e.sender.element.children().each(function (i, el) {
                    var current = $(el),
                        uid = current.data(UID),
                        selected = current.hasClass(STATE_SELECTED);

                    menuEl
                        .find("[data-uid=" + uid + "]")
                        .attr(ARIA_CHECKED, selected)
                        .find(DOT + MENU_LINK_TOGGLE)
                        .toggleClass(STATE_SELECTED, selected);
                });

                this.trigger(TOGGLE, {
                    id: e.target.attr(ID),
                    target: e.target,
                    checked: e.target.hasClass(STATE_SELECTED)
                });
            },

            _onToggle: function(e) {
                var that = this,
                    el = e.target,
                    group = el.data(GROUP),
                    overflowItem,
                    overflowGroup;

                if (that.overflowMenu) {
                    overflowItem = that.overflowMenu.element.find("[data-uid=" + el.attr(DATA_UID) + "]");
                    overflowGroup = that.overflowMenu.element.find("[data-group=" + group + "]");

                    overflowGroup.attr(ARIA_CHECKED, false).find(DOT + MENU_LINK_TOGGLE).removeClass(STATE_SELECTED);
                    overflowItem.attr(ARIA_CHECKED, true).find(DOT + MENU_LINK_TOGGLE).addClass(STATE_SELECTED);
                }

                if (group) {
                    that.element.find("[data-group=" + group + "]").each(function (i, item) {
                        if (item !== el[0]) {
                            $(item).data(K_TOGGLE_BUTTON).toggle(false);
                        }
                    });
                }

                this.trigger(TOGGLE, { id: e.id, target: e.target, checked: e.checked, originalEvent: e.originalEvent || e.event });
            },

            _processInner: function _processInner(items, parentUid) {
                var attributes, current;

                for (var i = 0; i < items.length; i++) {
                    current = items[i];
                    attributes = current.attributes;

                    if (!attributes) {
                        items[i].attributes = {};
                    }

                    items[i].attributes[DATA_UID] = kendo.guid();
                    items[i].attributes[DATA_PARENTUID] = parentUid;

                    if (current.id) {
                        items[i].attributes[ID] = items[i].id;
                    }

                    if (current.hidden) {
                        if (!items[i].attributes.class) {
                            items[i].attributes.class = NOTHING;
                        }

                        items[i].attributes.class += (EMPTY + STATE_HIDDEN + EMPTY + FORCE_HIDDEN);
                    }
                }

                return items;
            },

            _processOptions: function(options) {
                var template = options.template,
                    overflowTemplate = options.overflowTemplate,
                    uid = kendo.guid(),
                    groupName;

                $.extend(options, {
                    uid: uid,
                    rootUid: this.uid
                });

                if (options.menuButtons) {
                    options.menuButtons = this._processInner(options.menuButtons, uid);
                } else if (options.buttons && options.buttons.length) {
                    options.buttons = this._processInner(options.buttons, uid);

                    if (options.buttons.every(function (b) { return b.togglable; })) {
                        groupName = options.buttons[0].group;

                        if (!!groupName && options.buttons.every(function (b) { return b.group === groupName; })) {
                            options.selection = SINGLE;
                        } else {
                            options.selection = MULTIPLE;
                        }
                    } else {
                        options.selection = NONE;
                    }
                }

                if ((template && !overflowTemplate) || options.type === SPACER) {
                    options.overflow = OVERFLOW_NEVER;
                } else if (!options.overflow) {
                    options.overflow = OVERFLOW_AUTO;
                }

                if (options.enable !== undefined$1) {
                    options.enabled = options.enable;
                }

                return options;
            },

            _renderOverflow: function() {
                var that = this,
                    isRtl = that._isRtl,
                    horizontalDirection = isRtl ? "left" : "right";

                that.overflowAnchor = $("<button class='k-toolbar-overflow-button k-toolbar-tool' title='More tools'>");
                that.element.append(that.overflowAnchor);
                that.overflowAnchor.kendoButton({
                    icon: "more-vertical",
                    fillMode: "flat",
                    size: that.options.size
                });

                if (!that.options.navigateOnTab) {
                    that.overflowAnchor.attr(TABINDEX, -1);
                }

                that.overflowMenu = new kendo.ui.ContextMenu($("<ul>"), {
                    size: that.options.size,
                    showOn: "click tap",
                    origin: "bottom " + horizontalDirection,
                    position: "top " + horizontalDirection,
                    alignToAnchor: true,
                    target: that.overflowAnchor,
                    open: function(e) {
                        if (that.trigger(OVERFLOW_OPEN)) {
                            e.preventDefault();
                        }
                    },
                    close: function(e) {
                        if (that.trigger(OVERFLOW_CLOSE)) {
                            e.preventDefault();
                        } else {
                            that._resetTabIndex(that.overflowAnchor);
                            that.overflowAnchor.trigger(FOCUS);
                        }
                    }
                });

                that.overflowMenu.element.attr(KENDO_UID_ATTR, this.uid);

                setTimeout(function () {
                    that.overflowMenu.bind(SELECT, that._menuItemSelect.bind(that));
                });
            },

            _resetOpen: function(element, extensions) {
                var that = this,
                    uploadWrapper,
                    input;

                element.closest(".k-upload-button-wrap").find("input").remove();
                uploadWrapper = element.wrap("<div class='k-upload-button-wrap'></span>").parent();

                input = $("<input type='file' autocomplete='off' accept='" + extensions + "'/>")
                    .attr("aria-hidden", true)
                    .one("change", function (e) {
                        that.trigger(CHANGE, {
                            target: element,
                            value: e.target.files[0]
                        });

                        that._resetOpen(element, extensions);
                    })
                    .appendTo(uploadWrapper);

                element.off(KEYDOWN).on(KEYDOWN, function (e) {
                    if (e.keyCode === kendo.keys.ENTER) {
                        input.trigger(CLICK);
                    }
                });
            },

            _resetTabIndex: function(toFocus) {
                if (this.options.navigateOnTab !== true) {
                    this.wrapper.find(KENDO_FOCUSABLE).attr(TABINDEX, -1);
                    toFocus.attr(TABINDEX, 0);
                }
            },

            _resizable: function() {
                var that = this,
                    element = that.element;

                that._renderOverflow();
                element.addClass(RESIZABLE_TOOLBAR);

                that._resizeHandler = kendo.onResize(function() {
                    that.resize();
                });
            },

            _resize: function(e) {
                var containerWidth = e.width,
                    wrapper = this.element,
                    popupBtnElements = wrapper.find('[data-role="splitbutton"]').add(wrapper.find('[data-role="dropdownbutton"]'));

                if (!this.options.resizable) {
                    return;
                }

                this.overflowMenu.close();

                if (popupBtnElements.length > 0) {
                    popupBtnElements.each(function (i, el) {
                        kendo.widgetInstance($(el)).close();
                    });
                }

                this._shrink(containerWidth);
                this._stretch(containerWidth);
                this._toggleOverflowAnchor();
            },

            _shrink: function(containerWidth) {
                var commandElement,
                    visibleCommands,
                    activeElement;

                if (containerWidth < this._childrenWidth()) {
                    visibleCommands = this.element.children(":visible:not([data-overflow='never'], ." + OVERFLOW_ANCHOR + ")");

                    for (var i = visibleCommands.length - 1; i >= 0; i--) {
                        commandElement = visibleCommands.eq(i);

                        if (containerWidth > this._childrenWidth()) {
                            break;
                        } else {
                            activeElement = commandElement.find("[tabindex=0]") || commandElement.is("[tabindex=0]") ? commandElement : $(NOTHING);

                            if (activeElement.length > 0) {
                                activeElement.attr(TABINDEX, -1);
                                this.element.children(DOT + OVERFLOW_ANCHOR).attr(TABINDEX, 0);
                            }

                            this._hideItem(commandElement);
                        }
                    }
                }
            },

            _showItem: function(item, containerWidth) {
                var that = this,
                    gap = parseInt(this.element.css('gap'), 10) || 0,
                    widget;

                item.removeClass(STATE_HIDDEN);
                var itemOuterWidth = outerWidth(item, true) + gap;
                item.addClass(STATE_HIDDEN);

                if (item.length && (item.hasClass(SPACER_CLASS) || containerWidth > this._childrenWidth() + itemOuterWidth)) {
                    item.removeClass(STATE_HIDDEN);

                    if (this.options.navigateOnTab !== true) {
                        item.find(KENDO_FOCUSABLE).attr(TABINDEX, -1);
                    } else {
                        if (item.is("[tabindex=-1]")) {
                            item.removeAttr(TABINDEX);
                        }
                    }

                    if (this.overflowMenu) {
                        if (item.hasClass(SPLIT_BUTTON) || item.hasClass(MENU_BUTTON)) {
                            if (item.hasClass(SPLIT_BUTTON)) {
                                item = item.children().eq(0);
                                widget = item.data(K_SPLIT_BUTTON);
                            } else {
                                widget = item.data(K_DROP_DOWN_BUTTON);
                            }

                            widget.menu.list.children().each(function (i, el) {
                                that._hideMenuItem($(el));
                            });

                            that._hideMenuItem(item);
                        } else if (item.hasClass(BUTTON_GROUP)) {
                            item.children().each(function (i, el) {
                                that._hideMenuItem($(el));
                            });
                        } else {
                            that._hideMenuItem(item);
                        }
                    }

                    return true;
                }

                return false;
            },

            _showMenuItem: function(item) {
                var menuItem = this.overflowMenu.element.find(">li[data-uid='" + item.data(UID) + "']");

                if (!menuItem.hasClass(FORCE_HIDDEN)) {
                    menuItem.removeClass(STATE_HIDDEN);
                }
            },

            _stretch: function(containerWidth) {
                var overflowAnchor = this.element.children(DOT + OVERFLOW_ANCHOR),
                    commandElement,
                    hiddenCommands;

                if (containerWidth > this._childrenWidth()) {
                    hiddenCommands = this.element.children(DOT + STATE_HIDDEN + ":not(" + DOT + FORCE_HIDDEN + ")");

                    for (var i = 0; i < hiddenCommands.length; i++) {
                        commandElement = hiddenCommands.eq(i);

                        if (containerWidth < this._childrenWidth() || !this._showItem(commandElement, containerWidth)) {
                            break;
                        }
                    }
                }

                if (!this.options.navigateOnTab && overflowAnchor.is("[tabindex=0]")) {
                    overflowAnchor.attr(TABINDEX, -1);
                    this._resetTabIndex(this._getAllItems().first());
                }
            },

            _tabIndex: function() {
                var focusableItems = this.wrapper.find(KENDO_FOCUSABLE + ":not('" + TABINDEX_MINUS_1 + "')"),
                    firstFocusable = focusableItems.first();

                if (this.options.navigateOnTab !== true) {
                    focusableItems.attr(TABINDEX, -1);
                    firstFocusable.attr(TABINDEX, 0);
                } else {
                    this.wrapper.find(".k-toolbar-item.k-toolbar-tool").removeAttr(TABINDEX);
                }
            },

            _toggleOverflowAnchor: function() {
                var hasVisibleChildren = false;

                hasVisibleChildren = this.overflowMenu.element.children(":not(." + STATE_HIDDEN + ", ." + POPUP + ")").length > 0;

                if (hasVisibleChildren) {
                    this.overflowAnchor.css({
                        visibility: "visible",
                        width: NOTHING
                    });
                } else {
                    this.overflowAnchor.css({
                        visibility: HIDDEN,
                        width: "1px"
                    });
                }
            }
        });

        kendo.toolbar = {
            Item: kendo.Class,
            OverflowButton: kendo.Class,
            TemplateItem: kendo.Class,
            ToolBarButton: kendo.Class,
            registerComponent: function () { return null; }
        };

        kendo.cssProperties.registerPrefix("ToolBar", "k-toolbar-");

        kendo.ui.plugin(ToolBar);
    })(window.kendo.jQuery);
    var kendo$q = kendo;

    var __meta__$v = {
        id: "list",
        name: "List",
        category: "framework",
        depends: [ "data", "popup", "label", "icons", "actionsheet" ],
        hidden: true
    };


    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            outerHeight = kendo._outerHeight,
            percentageUnitsRegex = /^\d+(\.\d+)?%$/i,
            Widget = ui.Widget,
            keys = kendo.keys,
            support = kendo.support,
            htmlEncode = kendo.htmlEncode,
            activeElement = kendo._activeElement,
            outerWidth = kendo._outerWidth,
            ObservableArray = kendo.data.ObservableArray,
            ID = "id",
            CHANGE = "change",
            FOCUSED = "k-focus",
            HOVER = "k-hover",
            KSELECTED = "k-selected",
            LOADING = "k-i-loading k-input-loading-icon",
            LIST = "k-list",
            TABLE = "k-table",
            DATA_TABLE = "k-data-table",
            TABLE_MD = "k-table-md",
            LIST_UL = "k-list-ul",
            TABLE_LIST = "k-table-list",
            FIXED_GROUP_HEADER = ".k-list-group-sticky-header",
            GROUP_LABEL = ".k-list-item-group-label",
            ITEMSELECTOR = ".k-list-item",
            ITEMSELECTORTABLE = ".k-table-row",
            OPEN = "open",
            CLOSE = "close",
            CASCADE = "cascade",
            SELECT = "select",
            CLICK = "click",
            MOUSELEAVE = "mouseleave",
            MOUSEENTER = "mouseenter",
            ACTIVATE = "activate",
            DEACTIVATE = "deactivate",
            DATA_BINDING = "dataBinding",
            DATA_BOUND = "dataBound",
            SELECTED_ITEM_CHANGE = "selectedItemChange",
            SELECTED = "selected",
            REQUESTSTART = "requestStart",
            REQUESTEND = "requestEnd",
            BLUR = "blur",
            FOCUS = "focus",
            FOCUSOUT = "focusout",
            extend = $.extend,
            isArray = Array.isArray,
            browser = support.browser,
            HIDDENCLASS = "k-hidden",
            WIDTH = "width",
            TEXT = "text",
            VALUE = "value",
            isIE = browser.msie,
            quotRegExp = /"/g,
            alternativeNames = {
                "ComboBox": [ "DropDownList", "MultiColumnComboBox" ],
                "DropDownList": [ "ComboBox", "MultiColumnComboBox" ],
                "MultiColumnComboBox": [ "ComboBox", "DropDownList" ]
            },

            UL_EL = '<ul unselectable="on"/>',
            LIST_EL = "<div class='k-list'/>",
            NO_DATA_EL = '<div class="k-no-data"></div>',
            LIST_FOOTER_EL = '<div class="k-list-footer"></div>',
            TABLE_FOOTER_EL = '<div class="k-table-footer">' +
                    '<span class="k-table-td"></span>' +
                '</div>',
            MOUSEDOWN = "mousedown",
            LIST_SUFFIX = "-list",
            LISTBOX_SUFFIX = "_listbox",
            ARIA_LABELLEDBY = "aria-labelledby",
            ARIA_LABEL = "aria-label",
            ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
            ARIA_AUTOCOMPLETE = "aria-autocomplete",
            ARIA_CONTROLS = "aria-controls",
            ARIA_LIVE = "aria-live",
            ARIA_EXPANDED = "aria-expanded",
            ARIA_HIDDEN = "aria-hidden",
            ARIA_BUSY = "aria-busy",
            ARIA_MULTISELECTABLE = "aria-multiselectable",
            ARIA_SELECTED = "aria-selected",
            GROUP_ROW_SEL = ".k-table-group-row",
            ACTIONSHEET_TITLEBAR = ".k-actionsheet-titlebar";

        var List = kendo.ui.DataBoundWidget.extend({
            init: function(element, options) {
                var that = this,
                    id;

                Widget.fn.init.call(that, element, options);
                element = that.element;
                options = that.options;

                that._isSelect = element.is(SELECT);

                if (that._isSelect && that.element[0].length) {
                    if (!options.dataSource) {
                        options.dataTextField = options.dataTextField || TEXT;
                        options.dataValueField = options.dataValueField || VALUE;
                    }
                }

                if (options.adaptiveMode === "auto") {
                    that.largeMQL = kendo.mediaQuery("large");
                    that.mediumMQL = kendo.mediaQuery("medium");
                    that.smallMQL = kendo.mediaQuery("small");
                }

                that._listSize = kendo.cssProperties.getValidClass({
                    widget: "List",
                    propName: "size",
                    value: options.size
                });

                that._filterHeader();

                that.ul = $(UL_EL).attr({
                    tabIndex: -1,
                    "aria-hidden": true
                });

                that.list = $(LIST_EL)
                    .addClass(that._listSize)
                    .append(that.ul);

                id = element.attr(ID);

                if (!id) {
                    id = kendo.guid();
                }

                that.list.attr(ID, id + LIST_SUFFIX);
                that.ul.attr(ID, id + LISTBOX_SUFFIX);

                if (options.columns && options.columns.length) {
                    that.list.removeClass(LIST).addClass(DATA_TABLE);
                    that.list.removeClass(that._listSize).addClass(TABLE_MD);

                    that.ul.removeClass(LIST_UL).addClass(TABLE);

                    that._columnsHeader();
                }

                that._header();
                that._noData();
                that._footer();
                that._accessors();
                that._initValue();
            },

            options: {
                valuePrimitive: false,
                footerTemplate: "",
                headerTemplate: "",
                noDataTemplate: true,
                size: "medium",
                messages: {
                    "noData": "No data found.",
                    "clear": "clear"
                },
                adaptiveMode: "none"
            },

            setOptions: function(options) {
                Widget.fn.setOptions.call(this, options);

                if (options && options.enable !== undefined$1) {
                    options.enabled = options.enable;
                }

                if (options.columns && options.columns.length) {
                    this._columnsHeader();
                }

                this._header();
                this._noData();
                this._footer();

                this._renderFooter();
                this._renderNoData();

                if (options.label && this._inputLabel) {
                    this.label.setOptions(options.label);
                } else if (options.label === false) {
                    this.label._unwrapFloating();
                    this._inputLabel.remove();
                    delete this._inputLabel;
                } else if (options.label) {
                    this._label();
                }
            },

            focus: function() {
                this._focused.trigger(FOCUS);
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            _label: function() {
                var that = this;
                var options = that.options;
                var labelOptions = $.isPlainObject(options.label) ? options.label : {
                    content: options.label
                };

                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {
                    widget: that,
                    floatCheck: that._floatCheck.bind(that)
                }));

                that._inputLabel = that.label.element;
            },

            _floatCheck: function() {
                if (this.listView) {
                    var hasValue = this.value() || (this.text ? this.text() : false);
                    return !hasValue && !this.popup.visible();
                }

                return true;
            },

            _refreshFloatingLabel: function() {
                var that = this;

                if (that.label && that.label.floatingLabel) {
                    that.label.floatingLabel.refresh();
                }
            },

            _header: function() {
                var list = this;
                var header = $(list.header);
                var template = list.options.headerTemplate;

                kendo.destroy(header);
                header.remove();

                if (!template) {
                    list.header = null;
                    return;
                }

                var headerTemplate = typeof template !== "function" ? kendo.template(template) : template;
                header = $(headerTemplate({}));

                list.header = header[0] ? header : null;

                if (list.list.parent.length > 0) {
                    list.list.before(header);
                }
            },

            _filterHeader: function() {
                this.filterTemplate = '<div class="k-list-filter">' +
                    '<span class="k-searchbox k-input k-input-md k-rounded-md k-input-solid" type="text" autocomplete="off">' +
                        kendo.ui.icon({ icon: "search", iconClass: "k-input-icon" }) +
                    '</span>' +
                '</div>';

                this.actionSheetFilterTemplate = "<div class=\"k-actionsheet-titlebar-group k-actionsheet-filter\">" + (this.filterTemplate) + "</div>";

                if (this._isFilterEnabled()) {
                    this.filterInput = $('<input class="k-input-inner" type="text" />')
                        .attr({
                            placeholder: this.element.attr("placeholder"),
                            title: this.options.filterTitle || this.element.attr("title"),
                            role: "searchbox",
                            "aria-label": this.options.filterTitle,
                            "aria-haspopup": "listbox",
                            "aria-autocomplete": "list"
                        });
                }
            },

            _columnsHeader: function() {
                var list = this;
                var $header;
                var columnsHeader = $(list.columnsHeader);

                kendo.destroy(columnsHeader);
                columnsHeader.remove();

                var header = "<div class='k-table-header'><div class='k-table-header-wrap'><table class='k-table' role='presentation'>";
                var colGroup = "<colgroup>";
                var row = "<tr class='k-table-row'>";

                for (var idx = 0; idx < this.options.columns.length; idx++) {
                    var currentColumn = this.options.columns[idx];
                    var title = currentColumn.title || currentColumn.field || "";
                    var titleFunc = function () { return title; };
                    var template = currentColumn.headerTemplate || titleFunc;
                    var columnsHeaderTemplate = typeof template !== "function" ? kendo.template(template) : template;
                    var currentWidth = currentColumn.width;
                    var currentWidthInt = parseInt(currentWidth, 10);
                    var widthStyle = '';

                    if (currentWidth && !isNaN(currentWidthInt)) {
                        widthStyle += (kendo.attr('style-width')) + "=\"" + currentWidthInt + (percentageUnitsRegex.test(currentWidth) ? "%" : "px") + "\"";
                    }

                    colGroup += "<col " + widthStyle + "/>";

                    row += "<th class='k-table-th'>";
                    row += columnsHeaderTemplate(currentColumn);
                    row += "</th>";
                }

                colGroup += "</colgroup>";
                row += "</tr>";
                header += colGroup;
                header += "<thead class='k-table-thead'>";
                header += row;
                header += "</thead></table></div></div>";

                $header = $(header);
                kendo.applyStylesFromKendoAttributes($header, ["width"]);

                list.columnsHeader = columnsHeader = $header;
                list.list.prepend(columnsHeader);
            },

            _noData: function() {
                var list = this;
                var noData = $(list.noData);
                var template = list.options.noDataTemplate === true ? function () { return htmlEncode(list.options.messages.noData); } : list.options.noDataTemplate;

                kendo.destroy(noData);
                noData.remove();

                if (!template) {
                    list.noData = null;
                    return;
                }

                list.noData = $(NO_DATA_EL).hide().appendTo(list.list);
                list.noDataTemplate = typeof template !== "function" ? kendo.template(template) : template;
            },

            _footer: function() {
                var list = this;
                var footer = $(list.footer);
                var template = list.options.footerTemplate;
                var footerEl = this.options.columns && this.options.columns.length ? TABLE_FOOTER_EL : LIST_FOOTER_EL;

                kendo.destroy(footer);
                footer.remove();

                if (!template) {
                    list.footer = null;
                    return;
                }

                list.footer = $(footerEl).appendTo(list.list);
                list.footerTemplate = typeof template !== "function" ? kendo.template(template) : template;
            },

            _listOptions: function(options) {
                var that = this;
                var currentOptions = that.options;
                var virtual = currentOptions.virtual;
                var changeEventOption = { change: that._listChange.bind(that) };
                var listBoundHandler = that._listBound.bind(that);
                var focusedElm = that._focused;
                var inputId = that.element.attr("id");
                var labelElm = $("label[for=\"" + that.element.attr("id") + "\"]");
                var labelledBy = focusedElm.attr(ARIA_LABELLEDBY);

                if (!labelledBy && labelElm.length) {
                    labelledBy = labelElm.attr("id") || that._generateLabelId(labelElm, inputId || kendo.guid());
                }

                virtual = typeof virtual === "object" ? virtual : {};

                options = $.extend({
                    autoBind: false,
                    selectable: true,
                    dataSource: that.dataSource,
                    click: that._click.bind(that),
                    activate: that._activateItem.bind(that),
                    columns: currentOptions.columns,
                    deactivate: that._deactivateItem.bind(that),
                    dataBinding: function() {
                        that.trigger(DATA_BINDING);
                    },
                    dataBound: listBoundHandler,
                    height: currentOptions.height,
                    dataValueField: currentOptions.dataValueField,
                    dataTextField: currentOptions.dataTextField,
                    groupTemplate: currentOptions.groupTemplate,
                    fixedGroupTemplate: currentOptions.fixedGroupTemplate,
                    template: currentOptions.template,
                    ariaLabel: focusedElm.attr(ARIA_LABEL),
                    ariaLabelledBy: labelledBy,
                    listSize: that._listSize
                }, options, virtual, changeEventOption);

                if (!options.template) {
                    options.template = function (data) { return htmlEncode(kendo.getter(options.dataTextField)(data)); };
                }

                return options;
            },

            _initList: function(opts) {
                var that = this;
                var skipValueUpdate = opts && opts.skipValueUpdate;
                var listOptions = that._listOptions({
                    selectedItemChange: that._listChange.bind(that)
                });

                if (!that.options.virtual) {
                    that.listView = new kendo.ui.StaticList(that.ul, listOptions);
                } else {
                    that.listView = new kendo.ui.VirtualList(that.ul, Object.assign(listOptions, {
                        height: that._hasActionSheet() ? 362 : that.options.height, // Hardcoded virtual list height for action sheet untill better solution is found
                    }));
                    that.list.addClass("k-virtual-list");
                }

                that.listView.bind("listBound", that._listBound.bind(that));

                if (!skipValueUpdate) {
                    that._setListValue();
                }
            },

            _setListValue: function(value) {
                value = value || this.options.value;

                if (value !== undefined$1) {
                    this.listView.value(value)
                        .done(this._updateSelectionState.bind(this));
                }
            },

            _updateSelectionState: $.noop,

            _listMousedown: function(e) {
                if (!this.filterInput || this.filterInput[0] !== e.target) {
                    e.preventDefault();
                }
            },

            _isFilterEnabled: function() {
                var filter = this.options.filter;
                return filter && filter !== "none";
            },

            _hideClear: function() {
                var list = this;

                if (list._clear) {
                    list._clear.addClass(HIDDENCLASS);
                }
            },

            _showClear: function() {
                if (this._clear) {
                    this._clear.removeClass(HIDDENCLASS);
                }
            },

            _clearValue: function() {
                this._clearText();
                this._accessor("");
                this.listView.value([]);

                if (this._isSelect) {
                    this._customOption = undefined$1;
                }

                if (this._isFilterEnabled() && !this.options.enforceMinLength) {
                    this._filter({ word: "", open: false });

                    if (this.options.highlightFirst) {
                        this.listView.focus(0);
                    }
                }
                this._change();
            },

            _clearText: function() {
                this.text("");
            },

            _clearFilter: function() {
                if (!this.options.virtual) {
                    this.listView.bound(false);
                }

                this._filterSource();
            },

            _filterSource: function(filter, force) {
                var that = this;
                var options = that.options;
                var isMultiColumnFiltering = options.filterFields && filter && filter.logic && filter.filters && filter.filters.length;
                var dataSource = that.dataSource;
                var expression = extend({}, dataSource.filter() || {});
                var resetPageSettings = filter || (expression.filters && expression.filters.length && !filter);

                var removed = removeFiltersForField(expression, options.dataTextField);

                this._clearFilterExpressions(expression);

                if ((filter || removed) && that.trigger("filtering", { filter: filter })) {
                    return $.Deferred().reject().promise();
                }

                var newExpression = {
                    filters: [],
                    logic: "and"
                };

                if (isMultiColumnFiltering) {
                    newExpression.filters.push(filter);
                } else {
                    this._pushFilterExpression(newExpression, filter);
                }

                if (isValidFilterExpr(expression)) {
                    if (newExpression.logic === expression.logic) {
                        newExpression.filters = newExpression.filters.concat(expression.filters);
                    } else {
                        newExpression.filters.push(expression);
                    }
                }

                if (that._cascading) {
                    this.listView.setDSFilter(newExpression);
                }

                var dataSourceState = extend({}, {
                    page: resetPageSettings ? 1 : dataSource.page(),
                    pageSize: resetPageSettings ? dataSource.options.pageSize : dataSource.pageSize(),
                    sort: dataSource.sort(),
                    filter: dataSource.filter(),
                    group: dataSource.group(),
                    aggregate: dataSource.aggregate()
                }, { filter: newExpression });

                return dataSource[force ? "read" : "query"](dataSource._mergeState(dataSourceState));
            },

            _pushFilterExpression: function(newExpression, filter) {
                if (isValidFilterExpr(filter) && filter.value !== "") {
                    newExpression.filters.push(filter);
                }
            },

            _clearFilterExpressions: function(expression) {
                if (!expression.filters) {
                    return;
                }

                var filtersToRemove;

                for (var i = 0; i < expression.filters.length; i++) {
                    if ("fromFilter" in expression.filters[i]) {
                        filtersToRemove = i;
                    }
                }

                if (!isNaN(filtersToRemove)) {
                    expression.filters.splice(filtersToRemove, 1);
                }
            },

            _renderNoData: function() {
                var list = this;
                var noData = list.noData;

                if (!noData) {
                    return;
                }

                noData.html(list.noDataTemplate({ instance: list }));
            },

            _toggleNoData: function(show) {
                $(this.noData).toggle(show);
            },

            _toggleHeader: function(show) {
                var groupHeader = this.listView.content.prev(FIXED_GROUP_HEADER);
                groupHeader.toggle(show);
            },

            _renderFooter: function() {
                var list = this,
                    footer = list.footer ? this.options.columns && this.options.columns.length ? list.footer.children().first() : list.footer : null;

                if (!footer) {
                    return;
                }

                footer.html(list.footerTemplate({ instance: list }));
            },

            _allowOpening: function() {
                return this.options.noDataTemplate || this.dataSource.flatView().length;
            },

            _initValue: function() {
                var that = this,
                    value = that.options.value;

                if (value !== null) {
                    that.element.val(value);
                } else {
                    value = that._accessor();
                    that.options.value = value;
                }

                that._old = value;
            },

            _ignoreCase: function() {
                var that = this,
                    model = that.dataSource.reader.model,
                    field;

                if (model && model.fields) {
                    field = model.fields[that.options.dataTextField];

                    if (field && field.type && field.type !== "string") {
                        that.options.ignoreCase = false;
                    }
                }
            },

            _focus: function(candidate) {
                return this.listView.focus(candidate);
            },

            _filter: function(options) {
                var that = this;
                var widgetOptions = that.options;
                var word = options.word;
                var filterFields = widgetOptions.filterFields;
                var field = widgetOptions.dataTextField;
                var expression;

                if (filterFields && filterFields.length) {
                    expression = {
                        logic: "or",
                        filters: [],
                        fromFilter: true
                    };
                    for (var i = 0; i < filterFields.length; i++) {
                        this._pushFilterExpression(expression, that._buildExpression(word, filterFields[i]));
                    }
                } else {
                    expression = that._buildExpression(word, field);
                }

                that._open = options.open;
                that._filterSource(expression);
            },

            _buildExpression: function(value, field) {
                var that = this;
                var widgetOptions = that.options;
                var ignoreCase = widgetOptions.ignoreCase;
                var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;

                return {
                    value: ignoreCase ? (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()) : value,
                    field: field,
                    operator: widgetOptions.filter,
                    ignoreCase: ignoreCase
                };
            },

            _clearButton: function() {
                var list = this;
                var clearTitle = list.options.messages.clear;

                if (!list._clear) {
                    list._clear = $(("<span unselectable=\"on\" class=\"k-clear-value\" title=\"" + clearTitle + "\">" + (kendo.ui.icon("x")) + "</span>")).attr({
                        "role": "button",
                        "tabIndex": -1
                    });
                }

                if (!list.options.clearButton) {
                    list._clear.remove();
                }
                this._hideClear();
            },

            search: function(word) {
                var options = this.options;

                word = typeof word === "string" ? word : this._inputValue();

                clearTimeout(this._typingTimeout);

                if ((!options.enforceMinLength && !word.length) || word.length >= options.minLength) {
                    this._state = "filter";
                    if (this.listView) {
                        this.listView._emptySearch = !kendo.trim(word).length;
                    }

                    if (!this._isFilterEnabled()) {
                        this._searchByWord(word);
                    } else {
                        this._filter({ word: word, open: true });
                    }
                }
            },

            current: function(candidate) {
                return this._focus(candidate);
            },

            items: function() {
                return this.ul[0].children;
            },

            destroy: function() {
                var that = this;
                var ns = that.ns;

                Widget.fn.destroy.call(that);

                that._unbindDataSource();

                if (that.largeMQL || that.mediumMQL || that.smallMQL) {
                    that.largeMQL.destroy();
                    that.mediumMQL.destroy();
                    that.smallMQL.destroy();
                }

                that.listView.destroy();
                that.list.off(ns);

                that.popup.destroy();

                if (that._form) {
                    that._form.off("reset", that._resetHandler);
                }

                if (that.label) {
                    that.label.destroy();
                }
            },

            dataItem: function(index) {
                var that = this;

                if (index === undefined$1) {
                    return that.listView.selectedDataItems()[0];
                }

                if (typeof index !== "number") {
                    if (that.options.virtual) {
                        return that.dataSource.getByUid($(index).data("uid"));
                    }

                    index = $(that.items()).index(index);
                }

                return that.dataSource.flatView()[index];
            },

            _activateItem: function() {
                var current = this.listView.focus();
                if (current && this.popup.visible()) {
                    this._focused.add(this.filterInput).attr(ARIA_ACTIVEDESCENDANT, current.attr("id"));
                }
            },

            _deactivateItem: function() {
                this._focused.add(this.filterInput).removeAttr(ARIA_ACTIVEDESCENDANT);
            },

            _accessors: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var getter = kendo.getter;
                var textField = element.attr(kendo.attr("text-field"));
                var valueField = element.attr(kendo.attr("value-field"));

                if (!options.dataTextField && textField) {
                    options.dataTextField = textField;
                }

                if (!options.dataValueField && valueField) {
                    options.dataValueField = valueField;
                }

                that._text = getter(options.dataTextField);
                that._value = getter(options.dataValueField);
            },

            _aria: function(id) {
                var that = this,
                    options = that.options,
                    element = that._focused,
                    autocomplete;

                if (options.suggest !== undefined$1) {
                    if (options.filter === "none") {
                        if (options.suggest === true) {
                            autocomplete = "inline";
                        } else {
                            autocomplete = "none";
                        }
                    } else {
                        if (options.suggest === true) {
                            autocomplete = "both";
                        } else {
                            autocomplete = "list";
                        }
                    }

                    element.attr(ARIA_AUTOCOMPLETE, autocomplete);
                }

                id = id ? id + " " + that.ul[0].id : that.ul[0].id;

                element.attr({
                    "aria-controls": id
                });

                if (that.filterInput && that.filterInput.length > 0) {
                    that.filterInput.attr(ARIA_CONTROLS, id);
                }

                that.ul.attr(ARIA_LIVE, !that._isFilterEnabled() ? "off" : "polite");

                that._ariaLabel(that._focused);
            },

            _blur: function() {
                var that = this;

                that._change();
                that.close();
                that._userTriggered = false;
            },

            _isValueChanged: function(value) {
                return value !== unifyType(this._old, typeof value);
            },

            _change: function() {
                var that = this;
                var index = that.selectedIndex;
                var optionValue = that.options.value;
                var value = that.value();
                var trigger;

                if (that._isSelect && !that.listView.bound() && optionValue) {
                    value = optionValue;
                }

                if (that._isValueChanged(value)) {
                    trigger = true;
                } else if (that._valueBeforeCascade !== undefined$1 && that._valueBeforeCascade !== unifyType(that._old, typeof that._valueBeforeCascade) && that._userTriggered) {
                    trigger = true;
                } else if (index !== undefined$1 && index !== that._oldIndex && !that.listView.isFiltered()) {
                    trigger = true;
                }

                if (trigger) {

                    if (that._old === null || that._old === "" || value === "") {
                        that._valueBeforeCascade = that._old = value;
                    } else {
                        if (that.dataItem()) {
                            that._valueBeforeCascade = that._old = that.options.dataValueField ? that.dataItem()[that.options.dataValueField] : that.dataItem();
                        } else {
                            that._valueBeforeCascade = that._old = null;
                        }
                    }
                    that._oldIndex = index;

                    if (!that._typing) {
                        // trigger the DOM change event so any subscriber gets notified
                        that.element.trigger(CHANGE);
                    }

                    that.trigger(CHANGE);
                }

                that.typing = false;
            },

            _data: function() {
                return this.dataSource.view();
            },

            _enable: function() {
                var that = this,
                    options = that.options,
                    disabled = that.element.is("[disabled]");

                if (options.enable !== undefined$1) {
                    options.enabled = options.enable;
                }

                if (!options.enabled || disabled) {
                    that.enable(false);
                } else {
                    that.readonly(that.element.is("[readonly]"));
                }
            },

            _dataValue: function(dataItem) {
                var value = this._value(dataItem);

                if (value === undefined$1) {
                    value = this._text(dataItem);
                }

                return value;
            },

            _offsetHeight: function() {
                var offsetHeight = 0;
                var siblings = this.listView.content.parent().prevAll(":visible");

                siblings.each(function() {
                    var element = $(this);

                    offsetHeight += outerHeight(element, true);
                });

                return offsetHeight;
            },

            _height: function(length) {
                var that = this;
                var list = that.list;
                var height = that.options.height;
                var visible = that.popup.visible();
                var isMccb = this.options.columns && this.options.columns.length;
                var offsetTop, popups;

                if (length || that.options.noDataTemplate) {
                    // Check where animation container stays
                    popups = list.parent().add(list.closest(".k-animation-container").add(list.closest(".k-child-animation-container"))).show();

                    if (!list.parent().is(":visible")) {
                        popups.hide();
                        return;
                    }

                    height = that.listView.content[0].scrollHeight > height ? height : "auto";

                    popups.height(height);

                    if (height !== "auto") {
                        offsetTop = that._offsetHeight();

                        height = height - offsetTop;

                        if (isMccb) {
                            height = height - (outerHeight($(that.footer)) || 0) - (outerHeight($(that.columnsHeader)) || 0);
                        }
                    }

                    if (isMccb) {
                        that.listView.content.outerHeight(height);
                    } else {
                        that.listView.content.parent().outerHeight(height);
                    }

                    if (!visible) {
                        list.parent().hide();
                    }
                }

                return height;
            },

            _openHandler: function(e) {
                var current;

                this._adjustListWidth();

                if (this.trigger(OPEN)) {
                    e.preventDefault();
                } else {
                    this._focused.attr(ARIA_EXPANDED, true);
                    this.ul.attr(ARIA_HIDDEN, false);

                    current = this.listView.focus();
                    if (current) {
                        this._focused.add(this.filterInput).attr(ARIA_ACTIVEDESCENDANT, current.attr("id"));
                    }
                }
            },

            _adjustListWidth: function() {
                var that = this,
                    list = that.list.parent(),
                    width = list[0].style.width,
                    wrapper = that.wrapper,
                    computedStyle, computedWidth;

                if ((!list.data(WIDTH) && width) || that._hasActionSheet()) {
                    return;
                }

                computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
                computedWidth = parseFloat(computedStyle && computedStyle.width) || outerWidth(wrapper);

                if (computedStyle && browser.msie) { // getComputedStyle returns different box in IE.
                    computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
                }

                if (list.css("box-sizing") !== "border-box") {
                    width = computedWidth - (outerWidth(list) - list.width());
                } else {
                    width = computedWidth;
                }

                list.css({
                    fontFamily: wrapper.css("font-family"),
                    width: that.options.autoWidth ? "auto" : width,
                    minWidth: width,
                    whiteSpace: that.options.autoWidth ? "nowrap" : "normal"
                })
                .data(WIDTH, width);

                return true;
            },

            _closeHandler: function(e) {
                if (e.closeButton) {
                    this._onCloseButtonPressed();
                }


                if (this.trigger(CLOSE)) {
                    e.preventDefault();
                } else {
                    this._focused.attr(ARIA_EXPANDED, false);
                    this.ul.attr(ARIA_HIDDEN, true);
                    this._focused.add(this.filterInput).removeAttr(ARIA_ACTIVEDESCENDANT);
                }
            },

            _focusItem: function() {
                var listView = this.listView;
                var noFocusedItem = !listView.focus();
                var index = last(listView.select());

                if (index === undefined$1 && this.options.highlightFirst && noFocusedItem) {
                    index = 0;
                }

                if (index !== undefined$1) {
                    listView.focus(index);
                } else if (noFocusedItem) {
                    listView.scrollToIndex(0);
                }
            },

            _calculateGroupPadding: function(height) {
                var li = this.ul.children(".k-first").first();
                var groupHeader = this.listView.content.prev(FIXED_GROUP_HEADER);
                var padding = 0;
                var direction = 'right';

                if (groupHeader[0] && groupHeader[0].style.display !== "none") {
                    if (height !== "auto") {
                        padding = kendo.support.scrollbar();
                    }

                    if (this.element.parents('.k-rtl').length) {
                        direction = 'left';
                    }

                    padding += parseFloat(li.css("border-" + direction + "-width"), 10) + parseFloat(li.children(GROUP_LABEL).css("padding-" + direction), 10);
                    groupHeader.css("padding-" + direction, padding);
                }
            },

            _calculatePopupHeight: function(force) {
                var height = this._height(this.dataSource.flatView().length || force);
                this._calculateGroupPadding(height);
                this._calculateColumnsHeaderPadding(height);
            },

            _calculateColumnsHeaderPadding: function(height) {
                if (this.options.columns && this.options.columns.length) {
                    var list = this;
                    var isRtl = support.isRtl(list.wrapper);
                    var scrollbar = kendo.support.scrollbar();

                    list.columnsHeader.css((isRtl ? "padding-left" : "padding-right"), height !== "auto" ? scrollbar : 0);
                }
            },

            _refreshScroll: function() {
                var listView = this.listView;
                var enableYScroll = listView.element.height() > listView.content.height();

                if (this.options.autoWidth) {
                    listView.content.css({
                        overflowX: "hidden",
                        overflowY: enableYScroll ? "scroll" : "auto"
                    });
                }
            },

            _hasActionSheet: function() {
                return this.options.adaptiveMode === "auto" && (this.mediumMQL.mediaQueryList.matches
                        || this.smallMQL.mediaQueryList.matches);
            },

            _resizePopup: function(force) {
                if (this.options.virtual
                        || this._hasActionSheet()) {
                    return;
                }

                if (!this.popup.element.is(":visible")) {
                    this.popup.one("open", (function(force) {
                        return (function(e) {
                            if (!e.isDefaultPrevented()) {
                                this._calculatePopupHeight(force);
                            }
                        }).bind(this);
                    }).call(this, force));

                    this.popup.one(ACTIVATE, this._refreshScroll.bind(this));
                } else {
                    this._calculatePopupHeight(force);
                }
            },

            _popup: function() {
                var list = this;

                list.list.wrap("<div>");

                if (list.options.adaptiveMode === "auto") {
                    list.largeMQL.onEnter(list._createPopup.bind(list));
                    list.mediumMQL.onEnter(list._createActionSheet.bind(list));
                    list.smallMQL
                        .onEnter(function () {
                            if (!list.popup) {
                                list._createActionSheet();
                            }

                            list.popup.fullscreen(true);
                        });
                } else {
                    list._createPopup();
                }
            },

            _addFilterHeader: function() {
                var list = this;

                if (list._isFilterEnabled()) {
                    list._filterHeader();

                    if (list.options.adaptiveMode === "auto" && (list.mediumMQL.mediaQueryList.matches || list.smallMQL.mediaQueryList.matches)) {
                        list.popup.element
                            .find(ACTIONSHEET_TITLEBAR)
                            .append($(list.actionSheetFilterTemplate))
                            .find(".k-searchbox")
                            .append(list.filterInput);
                        list._enable();
                    } else if (list.options.popupFilter) {
                        list.list
                            .parent()
                            .prepend($(list.filterTemplate))
                            .find(".k-searchbox")
                            .append(list.filterInput);
                    }

                    list._enable();
                }
            },

            _createPopup: function() {
                var this$1$1 = this;

                var list = this;

                if (list.popup) {
                    list._cachedFilterValue = list.filterInput ? list.filterInput.val() : null;
                    list.popup.destroy();
                    list._removeFilterHeader();
                    list._removeStaticHeader();
                }

                list.popup = new ui.Popup(list.list.parent().addClass("k-list-container"), extend({}, list.options.popup, {
                    anchor: list.wrapper,
                    open: list._openHandler.bind(list),
                    close: list._closeHandler.bind(list),
                    animation: list.options.animation,
                    isRtl: support.isRtl(list.wrapper),
                    autosize: list.options.autoWidth,
                    activate: function () {
                        this$1$1._refreshFloatingLabel();
                    },
                    deactivate: function () {
                        this$1$1._refreshFloatingLabel();
                    }
                }));

                list._postCreatePopup();
            },

            _onActionSheetCreate: $.noop,
            _onCloseButtonPressed: $.noop,

            _createActionSheet: function() {
                var this$1$1 = this;

                var list = this;

                if (list.popup) {
                    list._cachedFilterValue = list.filterInput ? list.filterInput.val() : null;
                    list.popup.destroy();
                    list._removeFilterHeader();
                    list._removeStaticHeader();
                    list.list.parent().css({
                        width: "",
                        height: "",
                        minWidth: ""
                    });
                }

                list.popup = new ui.ActionSheet(list.list.parent(), {
                    headerTemplate: function (options) { return "<div class=\"k-text-center k-actionsheet-titlebar\" >" +
                            '<div class="k-actionsheet-titlebar-group k-hbox">' +
                                "<div  class=\"k-actionsheet-title\">" +
                                    (list.options.label ? ("<div class=\"k-text-center\">" + (list.options.label) + "</div>") : '') +
                                    (list.options.placeholder ? ("<div class=\"k-actionsheet-subtitle k-text-center\">" + (list.options.placeholder || "") + "</div>") : "") +
                                '</div>' +
                                (options.closeButton ?
                                '<div class="k-actionsheet-actions">' +
                                    kendo.html.renderButton(("<button tabindex=\"-1\" " + (kendo.attr("ref-actionsheet-close-button")) + "></button>"), { icon: "x", fillMode: "flat", size: "large" }) +
                                '</div>'
                                : "") +
                            '</div>' +
                    '</div>'; },
                    open: list._openHandler.bind(list),
                    close: list._closeHandler.bind(list),
                    focusOnActivate: false,
                    adaptive: true,
                    appendTo: (list.options.popup && list.options.popup.appendTo) || document.body,
                    closeButton: true,
                    fullscreen: list.smallMQL.mediaQueryList.matches,
                    activate: function () {
                        this$1$1._refreshFloatingLabel();
                    },
                    deactivate: function () {
                        this$1$1._refreshFloatingLabel();
                    },
                    popup: extend({}, list.options.popup, {
                        autosize: list.options.autoWidth
                    })
                });

                list._postCreatePopup();
                list._onActionSheetCreate();
            },

            _removeFilterHeader: function() {
                if (this.filterInput) {
                    this.filterInput
                        .off(this.ns)
                        .closest(".k-list-filter")
                        .remove();

                    this.filterInput = null;
                }
            },

            _removeStaticHeader: function() {
                this.listView.header.remove();
            },

            _postCreatePopup: function() {
                var list = this;
                var listViewValue;

                list._addFilterHeader();

                if (list.filterInput && list._cachedFilterValue) {
                    list.filterInput.val(list._cachedFilterValue);
                }

                list.popup.element.prepend(list.header)
                    .on(MOUSEDOWN + this.ns, this._listMousedown.bind(this));

                if (list.listView) {
                    listViewValue = list.listView.value();

                    if (list.listView._clean) {
                        list.listView._clean();
                    }

                    // Dirty hack to clean MultiSelect taglist
                    if (list.tagList && list.options.virtual) {
                        list.tagList.empty();
                    }

                    list.listView.destroy();
                    list._initList({ skipValueUpdate: true });
                    list.listView.value(listViewValue);
                }
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === MOUSEENTER);
            },

            _toggle: function(open, preventFocus) {
                var that = this;
                var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

                open = open !== undefined$1 ? open : !that.popup.visible();

                if (!preventFocus && !touchEnabled && that._focused[0] !== activeElement()) {
                    that._prevent = true;
                    that._focused.trigger(FOCUS);
                    that._prevent = false;
                }

                that[open ? OPEN : CLOSE]();
            },

            _triggerCascade: function() {
                var that = this;

                if (!that._cascadeTriggered || that.value() !== unifyType(that._cascadedValue, typeof that.value())) {
                    that._cascadedValue = that.value();
                    that._cascadeTriggered = true;
                    that.trigger(CASCADE, { userTriggered: that._userTriggered });
                }
            },

            _triggerChange: function() {
                if (this._valueBeforeCascade !== this.value()) {
                    this.trigger(CHANGE);
                }
            },

            _unbindDataSource: function() {
                var that = this;

                that.dataSource.unbind(REQUESTSTART, that._requestStartHandler)
                               .unbind(REQUESTEND, that._requestEndHandler)
                               .unbind("error", that._errorHandler);
            },

            requireValueMapper: function(options, value) {
                var hasValue = (options.value instanceof Array ? options.value.length : options.value) || (value instanceof Array ? value.length : value);
                if (hasValue && options.virtual && typeof options.virtual.valueMapper !== "function") {
                    throw new Error("ValueMapper is not provided while the value is being set. See http://docs.telerik.com/kendo-ui/controls/editors/combobox/virtualization#the-valuemapper-function");
                }
            }
        });

        function unifyType(value, type) {
            if (value !== undefined$1 && value !== "" && value !== null) {
                if (type === "boolean") {
                    if (typeof value !== "boolean") {
                        value = value.toString().toLowerCase() === "true";
                    }
                    value = Boolean(value);
                } else if (type === "number") {
                    value = Number(value);
                } else if (type === "string") {
                    value = value.toString();
                }
            }

            return value;
        }

        extend(List, {
            inArray: function(node, parentNode) {
                var idx, length, siblings = parentNode.children;

                if (!node || node.parentNode !== parentNode) {
                    return -1;
                }

                for (idx = 0, length = siblings.length; idx < length; idx++) {
                    if (node === siblings[idx]) {
                        return idx;
                    }
                }

                return -1;
            },
            unifyType: unifyType
        });

        kendo.ui.List = List;

        ui.Select = List.extend({
            init: function(element, options) {
                List.fn.init.call(this, element, options);
                this._initial = this.element.val();
            },

            setDataSource: function(dataSource) {
                var that = this;
                var parent;

                that.options.dataSource = dataSource;

                that._dataSource();

                if (that.listView.bound()) {
                    that._initialIndex = null;
                    that.listView._current = null;
                }

                that.listView.setDataSource(that.dataSource);

                if (that.options.autoBind) {
                    that.dataSource.fetch();
                }

                parent = that._parentWidget();

                if (parent) {
                    that._cascadeSelect(parent);
                }
            },

            close: function() {
                this.popup.close();
            },

            select: function(candidate) {
                var that = this;

                if (candidate === undefined$1) {
                    return that.selectedIndex;
                } else {
                    return that._select(candidate).done(function() {
                        that._cascadeValue = that._old = that._accessor();
                        that._oldIndex = that.selectedIndex;

                        that._refreshFloatingLabel();
                    });
                }
            },

            _accessor: function(value, idx) {
                return this[this._isSelect ? "_accessorSelect" : "_accessorInput"](value, idx);
            },

            _accessorInput: function(value) {
                var element = this.element[0];

                if (value === undefined$1) {
                    return element.value;
                } else {
                    if (value === null) {
                        value = "";
                    }
                    element.value = value;
                }
            },

            _accessorSelect: function(value, idx) {
                var element = this.element[0];
                var hasValue;

                if (value === undefined$1) {
                    return getSelectedOption(element).value || "";
                }

                getSelectedOption(element).selected = false;

                if (idx === undefined$1) {
                    idx = -1;
                }

                hasValue = (value !== null && value !== "");

                if (hasValue && idx == -1) {
                    this._custom(value);
                } else {
                    if (value) {
                        element.value = value;
                    } else {
                        element.selectedIndex = idx;
                    }
                }
            },

            _syncValueAndText: function() {
                return true;
            },

            _custom: function(value) {
                var that = this;
                var element = that.element;
                var custom = that._customOption;

                if (!custom) {
                    custom = $("<option/>");
                    that._customOption = custom;

                    element.append(custom);
                }

                custom.text(value);
                custom[0].selected = true;
            },

            _hideBusy: function() {
                var that = this;
                clearTimeout(that._busy);
                that._arrowIcon.removeClass(LOADING);
                that._focused.attr(ARIA_BUSY, false);
                that._busy = null;
                that._showClear();
            },

            _showBusy: function(e) {
                var that = this;

                if (e.isDefaultPrevented()) {
                    return;
                }

                that._request = true;

                if (that._busy) {
                    return;
                }

                that._busy = setTimeout(function() {
                    if (that._arrowIcon) { //destroyed after request start
                        that._focused.attr(ARIA_BUSY, true);
                        that._arrowIcon.addClass(LOADING);
                        that._hideClear();
                    }
                }, 100);
            },

            _requestEnd: function() {
                this._request = false;
                this._hideBusy();
            },

            _dataSource: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    dataSource = options.dataSource || {},
                    idx;

                dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;

                if (that._isSelect) {
                    idx = element[0].selectedIndex;
                    if (idx > -1) {
                        options.index = idx;
                    }

                    dataSource.select = element;
                    dataSource.fields = [{ field: options.dataTextField },
                                         { field: options.dataValueField }];
                }

                if (that.dataSource) {
                    that._unbindDataSource();
                } else {
                    that._requestStartHandler = that._showBusy.bind(that);
                    that._requestEndHandler = that._requestEnd.bind(that);
                    that._errorHandler = that._hideBusy.bind(that);
                }

                that.dataSource = kendo.data.DataSource.create(dataSource)
                                       .bind(REQUESTSTART, that._requestStartHandler)
                                       .bind(REQUESTEND, that._requestEndHandler)
                                       .bind("error", that._errorHandler);
            },

            _firstItem: function() {
                this.listView.focusFirst();
            },

            _lastItem: function() {
                this.listView.focusLast();
            },

            _nextItem: function() {
                return this.listView.focusNext();
            },

            _prevItem: function() {
                return this.listView.focusPrev();
            },

            _getNormalizedDataItem: function(candidate) {
                var that = this,
                    listView = that.listView,
                    isIndex = typeof candidate === "number",
                    hasOptionLabel = that.optionLabel && that.optionLabel.length,
                    index;

                if (isIndex) {
                    index = hasOptionLabel ? --candidate : candidate;
                } else {
                    index = listView.getElementIndex(candidate);
                }

                return listView.dataItemByIndex(index);
            },

            _getNormalizedSelectCandidate: function(candidate) {
                var that = this,
                    hasOptionLabel = that.optionLabel && that.optionLabel.length,
                    isIndex = typeof candidate === "number",
                    normalizedCandidate = candidate;

                if (hasOptionLabel && isIndex) {
                    normalizedCandidate++;
                }

                return normalizedCandidate;
            },

            _move: function(e) {
                var that = this;
                var listView = that.listView;
                var key = e.keyCode;
                var down = key === keys.DOWN;
                var isVirtual = that.options.virtual;
                var dataItem;
                var pressed;
                var current;
                var moveIndex;
                var selectCandidate;

                if (key === keys.UP || down) {
                    if (e.altKey) {
                        that.toggle(down);
                    } else {
                        if (!listView.bound() && !that.ul[0].firstChild) {
                            if (!that._fetch) {
                                that.dataSource.one(CHANGE, function() {
                                    that._fetch = false;
                                    that._move(e);
                                });

                                that._fetch = true;
                                that._filterSource();
                            }

                            e.preventDefault();

                            return true; //pressed
                        }

                        current = that._focus();

                        if (!that._fetch && (!current || current.hasClass(KSELECTED))) {
                            if (down) {
                                moveIndex = that._nextItem();

                                if ((isVirtual && moveIndex <= 0) || (!that._focus() && !moveIndex) ) {
                                    that._lastItem();
                                }
                            } else {
                                moveIndex = that._prevItem();

                                if ((isVirtual && moveIndex >= listView.dataSource.total() - 1) || (!that._focus() && !moveIndex)) {
                                    that._firstItem();
                                }
                            }
                        }

                        selectCandidate = that._getNormalizedSelectCandidate(that._get(that._focus()) || moveIndex || 0);

                        that._select(selectCandidate, true).done(function() {
                            var done = function() {
                                if (!that.popup.visible()) {
                                    that._blur();
                                }

                                if (that._cascadedValue === null) {
                                    that._cascadedValue = that.value();
                                } else {
                                    that._cascadedValue = that.dataItem() ? that.dataItem()[that.options.dataValueField] || that.dataItem() : null;
                                }
                            };

                            if (that.trigger(SELECT, { dataItem: that._getNormalizedDataItem(selectCandidate), item: that._focus() })) {
                                that._select(current).done(done);
                            } else {
                                done();
                            }
                        });
                    }

                    e.preventDefault();
                    pressed = true;
                } else if (key === keys.ENTER || key === keys.TAB) {
                    if (that.popup.visible()) {
                        e.preventDefault();
                    }

                    current = that._focus();
                    dataItem = that.dataItem();

                    if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {
                        current = null;
                    }

                    var activeFilter = that.filterInput && that.filterInput[0] === activeElement();
                    var selection;

                    if (current) {
                        dataItem = listView.dataItemByIndex(listView.getElementIndex(current));
                        var shouldTrigger = true;

                        if (dataItem) {
                            shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));
                        }

                        if (shouldTrigger && that.trigger(SELECT, { dataItem: dataItem, item: current })) {
                            return;
                        }

                        selection = that._select(current);
                    } else if (that.input) {
                        if (that._syncValueAndText() || that._isSelect) {
                            that._accessor(that.input.val());
                        }
                        that.listView.value(that.input.val());
                    }

                    if (that._focusElement) {
                        that._focusElement(that.wrapper);
                    }

                    if (activeFilter && key === keys.TAB) {
                        that.wrapper.focusout();
                    } else {
                        if (selection && typeof selection.done === "function") {
                            selection.done(function() {
                                that._blur();
                            });
                        } else {
                            that._blur();
                        }
                    }

                    that.close();
                    pressed = true;
                } else if (key === keys.ESC) {
                    if (that.popup.visible()) {
                        e.preventDefault();
                    }
                    that.close();
                    pressed = true;
                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
                    e.preventDefault();

                    var direction = key === keys.PAGEDOWN ? 1 : -1;
                    listView.scrollWith(direction * listView.screenHeight());

                    pressed = true;
                }

                return pressed;
            },

            _fetchData: function() {
                var that = this;
                var hasItems = !!that.dataSource.view().length;

                if (that._request || that.options.cascadeFrom) {
                    return;
                }

                if (!that.listView.bound() && !that._fetch && !hasItems) {
                    that._fetch = true;
                    that.dataSource.fetch().done(function() {
                        that._fetch = false;
                    });
                }
            },

            _options: function(data, optionLabel, value) {
                var that = this,
                    element = that.element,
                    htmlElement = element[0],
                    length = data.length,
                    options = "",
                    option,
                    dataItem,
                    dataText,
                    dataValue,
                    idx = 0;

                if (optionLabel) {
                    options = optionLabel;
                }

                for (; idx < length; idx++) {
                    option = "<option";
                    dataItem = data[idx];
                    dataText = that._text(dataItem);
                    dataValue = that._value(dataItem);

                    if (dataValue !== undefined$1) {
                        dataValue += "";

                        if (dataValue.indexOf('"') !== -1) {
                            dataValue = dataValue.replace(quotRegExp, "&quot;");
                        }

                        option += ' value="' + dataValue + '"';
                    }

                    option += ">";

                    if (dataText !== undefined$1) {
                        option += htmlEncode(dataText);
                    }

                    option += "</option>";
                    options += option;
                }

                element.html(options);

                if (value !== undefined$1) {
                    htmlElement.value = value;
                    if (htmlElement.value && !value) {
                        htmlElement.selectedIndex = -1;
                    }
                }

                if (htmlElement.selectedIndex !== -1) {
                    option = getSelectedOption(htmlElement);

                    if (option) {
                        option.setAttribute(SELECTED, SELECTED);
                    }
                }
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._resetHandler = function() {
                        setTimeout(function() {
                            that.value(that._initial);
                        });
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            },

            _parentWidget: function() {
                var name = this.options.name;

                if (!this.options.cascadeFrom) {
                    return;
                }

                var parentElement = $("#" + this.options.cascadeFrom);
                var parent = parentElement.data("kendo" + name);

                if (!parent) {
                    for (var i = 0; i < alternativeNames[name].length; i += 1) {
                        parent = parentElement.data("kendo" + alternativeNames[name][i]);

                        if (!!parent) {
                            break;
                        }
                    }
                }

                return parent;
            },

            _cascade: function() {
                var that = this;
                var options = that.options;
                var cascade = options.cascadeFrom;
                var parent;

                if (cascade) {
                    parent = that._parentWidget();

                    if (!parent) {
                        return;
                    }

                    that._cascadeHandlerProxy = that._cascadeHandler.bind(that);
                    that._cascadeFilterRequests = [];

                    options.autoBind = false;

                    parent.bind("set", function() { //will cascade
                        that.one("set", function(e) { //get your value
                            that._selectedValue = e.value || that._accessor();
                        });
                    });

                    parent.first(CASCADE, that._cascadeHandlerProxy);

                    //refresh was called
                    if (parent.listView.bound()) {
                        that._toggleCascadeOnFocus();
                        that._cascadeSelect(parent);
                    } else {
                        parent.one(DATA_BOUND, function() {
                            that._toggleCascadeOnFocus();
                            if (parent.popup.visible()) {
                                parent._focused.trigger(FOCUS);
                            }
                        });

                        if (!parent.value()) {
                            that.enable(false);
                        }
                    }
                }
            },

            _toggleCascadeOnFocus: function() {
                var that = this;
                var parent = that._parentWidget();
                var focusout = isIE && parent instanceof ui.DropDownList ? BLUR : FOCUSOUT;

                parent._focused.add(parent.filterInput).on(FOCUS, function() {
                    parent.unbind(CASCADE, that._cascadeHandlerProxy);
                    parent.unbind(CHANGE, that._cascadeHandlerProxy);
                    parent.first(CHANGE, that._cascadeHandlerProxy);
                });

                parent._focused.add(parent.filterInput).on(focusout, function() {
                    parent.unbind(CHANGE, that._cascadeHandlerProxy);
                    parent.unbind(CASCADE, that._cascadeHandlerProxy);
                    parent.first(CASCADE, that._cascadeHandlerProxy);
                });
            },

            _cascadeHandler: function(e) {
                var parent = this._parentWidget();
                var valueBeforeCascade = this.value();

                this._userTriggered = e.userTriggered || parent._userTriggered;

                if (this.listView.bound()) {
                    this._clearSelection(parent, true);
                }

                this._cascadeSelect(parent, valueBeforeCascade);
            },

            _cascadeChange: function(parent) {
                var that = this;
                var value = that._accessor() || that._selectedValue;

                if (!that._cascadeFilterRequests.length) {
                    that._selectedValue = null;
                }

                if (that._userTriggered) {
                    that._clearSelection(parent, true);
                } else if (value) {
                    if (value !== unifyType(that.listView.value()[0], typeof value)) {
                        that.value(value);
                    }

                    if (!that.dataSource.view()[0] || that.selectedIndex === -1) {
                        that._clearSelection(parent, true);
                    }
                } else if (that.dataSource.flatView().length) {
                    that.select(that.options.index);
                }

                that.enable();
                that._triggerCascade();
                that._triggerChange();
                that._userTriggered = false;
            },

            _cascadeSelect: function(parent, valueBeforeCascade) {
                var that = this;
                var dataItem = parent.dataItem();
                var filterValue = dataItem ? dataItem[that.options.cascadeFromParentField] || parent._value(dataItem) : null;
                var valueField = that.options.cascadeFromField || parent.options.dataValueField;
                var expressions;

                // Applicable only when parent is ComboBox or MultiColumnComboBox
                if (parent.options.cascadeOnCustomValue &&
                    filterValue === null &&
                    (!that.options.cascadeFromParentField || that.options.cascadeFromParentField === parent.options.dataValueField)) {
                        filterValue = parent.value();
                }

                that._valueBeforeCascade = valueBeforeCascade !== undefined$1 ? valueBeforeCascade : that.value();

                if (filterValue || filterValue === 0) {
                    expressions = that.dataSource.filter() || {};
                    removeFiltersForField(expressions, valueField);

                    var handler = function() {
                        var currentHandler = that._cascadeFilterRequests.shift();
                        if (currentHandler) {
                            that.unbind('dataBound', currentHandler);
                        }

                        currentHandler = that._cascadeFilterRequests[0];
                        if (currentHandler) {
                            that.first('dataBound', currentHandler);
                        }

                        that._cascadeChange(parent);
                    };

                    that._cascadeFilterRequests.push(handler);

                    if (that._cascadeFilterRequests.length === 1) {
                        that.first('dataBound', handler);
                    }

                    that._cascading = true;
                    that._filterSource({
                        field: valueField,
                        operator: "eq",
                        value: filterValue
                    });
                    that._cascading = false;
                } else {
                    that.enable(false);
                    that._clearSelection(parent);
                    that._triggerCascade();
                    that._triggerChange();
                    that._userTriggered = false;
                }

                that._refreshFloatingLabel();
            }
        });

        var STATIC_LIST_NS = ".StaticList";

        var StaticList = kendo.ui.DataBoundWidget.extend({
            init: function(element, options) {
                Widget.fn.init.call(this, element, options);

                this.element.attr("role", (options.aria && options.aria.role) || 'listbox')
                            .on(CLICK + STATIC_LIST_NS, "li", this._click.bind(this))
                            .on(MOUSEENTER + STATIC_LIST_NS, "li", function() { $(this).addClass(HOVER); })
                            .on(MOUSELEAVE + STATIC_LIST_NS, "li", function() { $(this).removeClass(HOVER); });

                if (options && options.ariaLabel) {
                    this.element.attr(ARIA_LABEL, options.ariaLabel);
                } else if (options && options.ariaLabelledBy) {
                    this.element.attr(ARIA_LABELLEDBY, options.ariaLabelledBy);
                }

                if (support.touch) {
                    this._touchHandlers();
                }

                if (this.options.selectable === "multiple") {
                    this.element.attr(ARIA_MULTISELECTABLE, true);
                }

                if (this.options.columns && this.options.columns.length) {
                    var thead = this.element.parent().find('.k-table-thead');
                    var row = $('<tr class="k-table-group-row">' +
                        '<th class="k-table-th" colspan="' + this.options.columns.length + '"></th>' +
                    '</tr>');

                    thead.append(row);

                    this.header = row.find(".k-table-th");

                    this.content = this.element.wrap("<div class='k-table-body k-table-scroller' unselectable='on'></div>").parent();

                    this.element.addClass(TABLE_LIST);
                } else {
                    this.content = this.element.wrap("<div class='k-list-content k-list-scroller' unselectable='on'></div>").parent();
                    this.header = this.content.before($('<div class="k-list-group-sticky-header"></div>').hide()).prev();
                    this.element.addClass(LIST_UL);
                }

                this.bound(false);

                this._optionID = kendo.guid();

                this._selectedIndices = [];

                this._view = [];
                this._dataItems = [];
                this._values = [];

                var value = this.options.value;

                if (value) {
                    this._values = Array.isArray(value) ? value.slice(0) : [value];
                }

                this._getter();
                this._templates();

                this.setDataSource(this.options.dataSource);

                this._createOnScrollProxy();
            },

            options: {
                name: "StaticList",
                dataValueField: null,
                valuePrimitive: false,
                selectable: true,
                template: null,
                groupTemplate: null,
                fixedGroupTemplate: null,
                ariaLabel: null,
                ariaLabelledBy: null
            },

            events: [
               CLICK,
                CHANGE,
               ACTIVATE,
               DEACTIVATE,
               DATA_BINDING,
               DATA_BOUND,
               SELECTED_ITEM_CHANGE
            ],

            setDataSource: function(source) {
                var that = this;
                var dataSource = source || {};
                var value;

                dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;
                dataSource = kendo.data.DataSource.create(dataSource);

                if (that.dataSource) {
                    that.dataSource.unbind(CHANGE, that._refreshHandler);

                    value = that.value();

                    that.value([]);
                    that.bound(false);

                    that.value(value);
                } else {
                    that._refreshHandler = that.refresh.bind(that);
                }

                that.setDSFilter(dataSource.filter());

                that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);
                that._fixedHeader();
            },

            _touchHandlers: function() {
                var that = this,
                    itemSelector = this.options.columns && this.options.columns.length ? ITEMSELECTORTABLE : ITEMSELECTOR,
                    startY, endY,
                    tapPosition = function(event) {
                        return (event.originalEvent || event).changedTouches[0].pageY;
                    };

                that.element.on("touchstart" + STATIC_LIST_NS, function(e) {
                    startY = tapPosition(e);
                });

                that.element.on("touchend" + STATIC_LIST_NS, function(e) {
                    if (e.isDefaultPrevented()) {
                        return;
                    }

                    endY = tapPosition(e);

                    if (Math.abs(endY - startY) < 10) {
                        that._touchTriggered = true;
                        that._triggerClick($(e.target).closest(itemSelector).get(0));
                    }
                });
            },

            skip: function() {
                return this.dataSource.skip();
            },

            setOptions: function(options) {
                Widget.fn.setOptions.call(this, options);

                this._getter();
                this._templates();
                this._render();

                if (this.label && options.label) {
                    this.label.setOptions(options.label);
                } else if (this.label && options.label === false) {
                    this.label._unwrapFloating();
                    this._inputLabel.remove();
                    delete this._inputLabel;
                }
            },

            destroy: function() {
                this.element.off(STATIC_LIST_NS);

                if (this._refreshHandler) {
                    this.dataSource.unbind(CHANGE, this._refreshHandler);
                }

                clearTimeout(this._scrollId);

                Widget.fn.destroy.call(this);
            },

            dataItemByIndex: function(index) {
                return this.dataSource.flatView()[index];
            },

            screenHeight: function() {
                return this.content[0].clientHeight;
            },

            scrollToIndex: function(index) {
                var item = this.element[0].children[index];

                if (item) {
                    this.scroll(item);
                }
            },

            scrollWith: function(value) {
                this.content.scrollTop(this.content.scrollTop() + value);
            },

            scroll: function(item) {
                if (!item) {
                    return;
                }

                if (item[0]) {
                    item = item[0];
                }

                var content = this.content[0],
                    itemOffsetTop = item.offsetTop,
                    itemOffsetHeight = item.offsetHeight,
                    contentScrollTop = content.scrollTop,
                    contentOffsetHeight = content.clientHeight,
                    bottomDistance = itemOffsetTop + itemOffsetHeight;

                    if (contentScrollTop > itemOffsetTop) {
                        contentScrollTop = itemOffsetTop;
                    } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
                        contentScrollTop = (bottomDistance - contentOffsetHeight);
                    }

                    content.scrollTop = contentScrollTop;
            },

            selectedDataItems: function(dataItems) {
                if (dataItems === undefined$1) {
                    return this._dataItems.slice();
                }

                this._dataItems = dataItems;
                this._values = this._getValues(dataItems);
            },

            _getValues: function(dataItems) {
                var getter = this._valueGetter;

                return $.map(dataItems, function(dataItem) {
                    return getter(dataItem);
                });
            },

            focusNext: function() {
                var current = this.focus();

                if (!current) {
                    current = 0;
                } else {
                    current = current.next();
                }

                this.focus(current);
            },

            focusPrev: function() {
                var current = this.focus();

                if (!current) {
                    current = this.element[0].children.length - 1;
                } else {
                    current = current.prev();
                }

                this.focus(current);
            },

            focusFirst: function() {
                this.focus(this.element[0].children[0]);
            },

            focusLast: function() {
                this.focus(last(this.element[0].children));
            },

            focus: function(candidate) {
                var that = this;
                var id = that._optionID;
                var hasCandidate;

                if (candidate === undefined$1) {
                    return that._current;
                }

                candidate = last(that._get(candidate));
                candidate = $(this.element[0].children[candidate]);

                if (that._current) {
                    that._current
                        .removeClass(FOCUSED)
                        .removeAttr(ID);

                    that.trigger(DEACTIVATE);
                }

                hasCandidate = !!candidate[0];

                if (hasCandidate) {
                    candidate.addClass(FOCUSED);
                    that.scroll(candidate);

                    candidate.attr("id", id);
                }

                that._current = hasCandidate ? candidate : null;
                that.trigger(ACTIVATE);
            },

            focusIndex: function() {
                return this.focus() ? this.focus().index() : undefined$1;
            },

            skipUpdate: function(skipUpdate) {
                this._skipUpdate = skipUpdate;
            },

            select: function(indices) {
                var that = this;
                var selectable = that.options.selectable;
                var singleSelection = selectable !== "multiple" && selectable !== false;
                var selectedIndices = that._selectedIndices;
                var uiSelectedIndices = [this.element.find(".k-selected").index()];

                var added = [];
                var removed = [];
                var result;

                if (indices === undefined$1) {
                    return selectedIndices.slice();
                }

                indices = that._get(indices);

                if (indices.length === 1 && indices[0] === -1) {
                    indices = [];
                }

                var deferred = $.Deferred().resolve();
                var filtered = that.isFiltered();

                if (filtered && !singleSelection && that._deselectFiltered(indices)) {
                    return deferred;
                }

                if (singleSelection && !filtered &&
                    $.inArray(last(indices), selectedIndices) !== -1 && $.inArray(last(indices), uiSelectedIndices) !== -1) {

                    if (that._dataItems.length && that._view.length) {
                        that._dataItems = [that._view[selectedIndices[0]].item];
                    }

                    return deferred;
                }

                result = that._deselect(indices);

                removed = result.removed;
                indices = result.indices;

                if (indices.length) {
                    if (singleSelection) {
                        indices = [last(indices)];
                    }

                    added = that._select(indices);
                }

                if (added.length || removed.length) {
                    that._valueComparer = null;
                    that.trigger(CHANGE, {
                        added: added,
                        removed: removed
                    });
                }

                return deferred;
            },

            removeAt: function(position) {
                this._selectedIndices.splice(position, 1);
                this._values.splice(position, 1);
                this._valueComparer = null;

                return {
                    position: position,
                    dataItem: this._dataItems.splice(position, 1)[0]
                };
            },

            setValue: function(value) {
                value = Array.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];

                this._values = value;

                this._valueComparer = null;
            },

            value: function(value) {
                var that = this;
                var deferred = that._valueDeferred;
                var indices;

                if (value === undefined$1) {
                    return that._values.slice();
                }

                that.setValue(value);

                if (!deferred || deferred.state() === "resolved") {
                    that._valueDeferred = deferred = $.Deferred();
                }

                if (that.bound()) {
                    indices = that._valueIndices(that._values);

                    if (that.options.selectable === "multiple") {
                        that.select(-1);
                    }

                    that.select(indices);

                    deferred.resolve();
                }

                that._skipUpdate = false;

                return deferred;
            },

            items: function() {
                return this.element.children(ITEMSELECTOR);
            },

            _click: function(e) {
                if (this._touchTriggered)
                {
                    this._touchTriggered = false;
                    return;
                }

                if (!e.isDefaultPrevented()) {
                    this._triggerClick(e.currentTarget);
                }
            },

            _createOnScrollProxy: function() {
                var onScrollProxy = function() {
                    var that = this;
                    clearTimeout(that._scrollId);

                    that._scrollId = setTimeout(function() {
                        that._renderHeader();
                    }, 50);
                };

                this._onScroll = onScrollProxy.bind(this);
            },

            _triggerClick: function(item) {
                if (!this.trigger(CLICK, { item: $(item) })) {
                    this.select(item);
                }
            },

            _valueExpr: function(type, values) {
                var that = this;
                var idx = 0;
                var comparer;
                var normalized = [];

                if (!that._valueComparer || that._valueType !== type) {
                    that._valueType = type;

                    for (; idx < values.length; idx++) {
                        normalized.push(unifyType(values[idx], type));
                    }

                    comparer = function (current, values) {
                        for (var idx = 0; idx < normalized.length; idx++) {
                            if (current === values[idx]) {
                                return idx;
                            }
                        }
                        return -1;
                    };

                    that._valueComparer = function(current) {
                        return comparer(current, normalized);
                    };
                }

                return that._valueComparer;
            },

            _dataItemPosition: function(dataItem, values) {
                var value = this._valueGetter(dataItem);

                var valueExpr = this._valueExpr(typeof value, values);

                return valueExpr(value);
            },

            _getter: function() {
                this._valueGetter = kendo.getter(this.options.dataValueField);
            },

            _deselect: function(indices) {
                var that = this;
                var children = that.element[0].children;
                var selectable = that.options.selectable;
                var selectedIndices = that._selectedIndices;
                var dataItems = that._dataItems;
                var values = that._values;
                var removed = [];
                var i = 0;
                var j;

                var index, selectedIndex;
                var removedIndices = 0;

                indices = indices.slice();

                if (selectable === true || !indices.length) {
                    for (; i < selectedIndices.length; i++) {
                        $(children[selectedIndices[i]]).removeClass(KSELECTED).attr(ARIA_SELECTED, false);

                        removed.push({
                            position: i,
                            dataItem: dataItems[i]
                        });
                    }

                    that._values = [];
                    that._dataItems = [];
                    that._selectedIndices = [];
                } else if (selectable === "multiple") {
                    for (; i < indices.length; i++) {
                        index = indices[i];

                        if (!$(children[index]).hasClass(KSELECTED)) {
                            continue;
                        }

                        for (j = 0; j < selectedIndices.length; j++) {
                            selectedIndex = selectedIndices[j];

                            if (selectedIndex === index) {
                                $(children[selectedIndex]).removeClass(KSELECTED).attr(ARIA_SELECTED, false);
                                var dataItem = this._view[index].item;
                                var position = this._dataItemPosition(dataItem, this._values);

                                removed.push({
                                    position: position,
                                    dataItem: dataItem
                                });

                                dataItems.splice(j, 1);
                                selectedIndices.splice(j, 1);
                                indices.splice(i, 1);
                                values.splice(j, 1);

                                removedIndices += 1;
                                i -= 1;
                                j -= 1;
                                break;
                            }
                        }
                    }
                }

                return {
                    indices: indices,
                    removed: removed
                };
            },

            _deselectFiltered: function(indices) {
                var children = this.element[0].children;
                var dataItem, index, position;
                var removed = [];
                var idx = 0;

                for (; idx < indices.length; idx++) {
                    index = indices[idx];

                    dataItem = this._view[index].item;
                    position = this._dataItemPosition(dataItem, this._values);

                    if (position > -1) {
                        removed.push(this.removeAt(position));
                        $(children[index]).removeClass(KSELECTED);
                    }
                }

                if (removed.length) {
                    this.trigger(CHANGE, {
                        added: [],
                        removed: removed
                    });

                    return true;
                }

                return false;
            },

            _select: function(indices) {
                var that = this;
                var children = that.element[0].children;
                var data = that._view;
                var dataItem, index;
                var added = [];
                var idx = 0;

                if (last(indices) !== -1) {
                    that.focus(indices);
                }

                for (; idx < indices.length; idx++) {
                    index = indices[idx];
                    dataItem = data[index];

                    if (index === -1 || !dataItem) {
                        continue;
                    }

                    dataItem = dataItem.item;

                    that._selectedIndices.push(index);
                    that._dataItems.push(dataItem);
                    that._values.push(that._valueGetter(dataItem));

                    $(children[index]).addClass(KSELECTED).attr(ARIA_SELECTED, true);

                    added.push({
                        dataItem: dataItem
                    });
                }

                return added;
            },

            getElementIndex: function(element) {
                return $(element).data("offset-index");
            },

            _get: function(candidate) {
                if (typeof candidate === "number") {
                    candidate = [candidate];
                } else if (!isArray(candidate)) {
                    candidate = this.getElementIndex(candidate);
                    candidate = [candidate !== undefined$1 ? candidate : -1];
                }

                return candidate;
            },

            _templates: function() {
                var template;
                var options = this.options;
                var templates = {
                    template: options.template,
                    groupTemplate: options.groupTemplate,
                    fixedGroupTemplate: options.fixedGroupTemplate
                };

                if (options.columns) {
                    options.columns.forEach(function (column, i) {
                        var templateText = column.field ? column.field.toString() : TEXT;
                        var templateFunc = function (data) { return htmlEncode(kendo.getter(templateText)(data)); };

                        templates["column" + i] = column.template || templateFunc;
                    });
                }

                for (var key in templates) {
                    template = templates[key];
                    if (template && typeof template !== "function") {
                        templates[key] = kendo.template(template);
                    }
                }

                this.templates = templates;
            },

            _normalizeIndices: function(indices) {
                var newIndices = [];
                var idx = 0;

                for (; idx < indices.length; idx++) {
                    if (indices[idx] !== undefined$1) {
                        newIndices.push(indices[idx]);
                    }
                }

                return newIndices;
            },

            _valueIndices: function(values, indices) {
                var data = this._view;
                var idx = 0;
                var index;

                indices = indices ? indices.slice() : [];

                if (!values.length) {
                    return [];
                }

                for (; idx < data.length; idx++) {
                    index = this._dataItemPosition(data[idx].item, values);

                    if (index !== -1) {
                        indices[index] = idx;
                    }
                }

                return this._normalizeIndices(indices);
            },

            _firstVisibleItem: function() {
                var element = this.element[0];
                var content = this.content[0];
                var scrollTop = content.scrollTop;
                var itemHeight = $(element.children[0]).height();
                var itemIndex = Math.floor(scrollTop / itemHeight) || 0;
                var item = element.children[itemIndex] || element.lastChild;
                var forward = item.offsetTop < scrollTop;

                while (item) {
                    if (forward) {
                        if ((item.offsetTop + itemHeight) > scrollTop || !item.nextSibling) {
                            break;
                        }

                        item = item.nextSibling;
                    } else {
                        if (item.offsetTop <= scrollTop || !item.previousSibling) {
                            break;
                        }

                        item = item.previousSibling;
                    }
                }

                return this._view[$(item).data("offset-index")];
            },

            _fixedHeader: function() {
                if (this.isGrouped() && this.templates.fixedGroupTemplate) {
                    if (this.header.closest(GROUP_ROW_SEL).length) {
                        this.header.closest(GROUP_ROW_SEL).show();
                    } else {
                        this.header.show();
                    }

                    this.content.scroll(this._onScroll);
                } else {
                    if (this.header.closest(GROUP_ROW_SEL).length) {
                        this.header.closest(GROUP_ROW_SEL).hide();
                    } else {
                        this.header.hide();
                    }

                    this.content.off("scroll", this._onScroll);
                }
            },

            _renderHeader: function() {
                var template = this.templates.fixedGroupTemplate;
                if (!template) {
                    return;
                }

                var visibleItem = this._firstVisibleItem();

                if (visibleItem && visibleItem.group.toString().length) {
                    this.header.html(template(visibleItem.group));
                }
            },

            _renderItem: function(context) {
                var item = "<li tabindex=\"-1\" role=\"" + ((this.options.aria && this.options.aria.itemRole) || 'option') + "\" unselectable=\"on\" ";

                var dataItem = context.item;
                var notFirstItem = context.index !== 0;
                var selected = context.selected;
                var isGrouped = this.isGrouped();
                var hasColumns = this.options.columns && this.options.columns.length;
                var altRow = context.index % 2 === 1 ? " k-table-alt-row" : "";

                if (hasColumns) {
                    item += ('class="k-table-row' + altRow);
                } else {
                    item += 'class="k-list-item';
                }

                if (notFirstItem && context.newGroup) {
                    item += ' k-first';
                }

                if (context.isLastGroupedItem && hasColumns) {
                    item += ' k-last';
                }

                if (selected) {
                    item += ' k-selected';
                }

                item += '" aria-selected="' + (selected ? "true" : "false") + '" data-offset-index="' + context.index + '">';
                if (hasColumns) {
                    item += this._renderColumns(dataItem);
                } else {
                    item += '<span class="k-list-item-text">';
                    item += this.templates.template(dataItem);
                    item += '</span>';
                }

                if (notFirstItem && context.newGroup) {
                    if (hasColumns) {
                        item += '<span class="k-table-td k-table-group-td"><span>' + this.templates.groupTemplate(context.group) + '</span></span>';
                    } else {
                        item += '<div class="k-list-item-group-label">' + this.templates.groupTemplate(context.group) + '</div>';
                    }
                } else if (isGrouped && hasColumns) {
                    item += '<span class="k-table-td k-table-spacer-td"></span>';
                }

                return item + "</li>";
            },

            _renderColumns: function(dataItem) {
                var item = "";

                for (var i = 0; i < this.options.columns.length; i++) {
                    var currentWidth = this.options.columns[i].width;
                    var currentWidthInt = parseInt(currentWidth, 10);
                    var widthStyle = '';

                    if (currentWidth && !isNaN(currentWidthInt)) {
                        widthStyle += (kendo.attr('style-width')) + "=\"" + currentWidthInt + (percentageUnitsRegex.test(currentWidth) ? "%" : "px") + "\"";
                    }

                    item += "<span class='k-table-td' " + widthStyle + ">";
                    item += this.templates["column" + i](dataItem);
                    item += "</span>";
                }

                return item;
            },

            _render: function() {
                var html = "";
                var cspCompliantHtml;
                var i = 0;
                var idx = 0;
                var context;
                var dataContext = [];
                var view = this.dataSource.view();
                var values = this.value();

                var group, newGroup, j;
                var isGrouped = this.isGrouped();

                if (isGrouped) {
                    for (i = 0; i < view.length; i++) {
                        group = view[i];
                        newGroup = true;

                        for (j = 0; j < group.items.length; j++) {
                            context = {
                                selected: this._selected(group.items[j], values),
                                item: group.items[j],
                                group: group.value,
                                newGroup: newGroup,
                                isLastGroupedItem: j === group.items.length - 1,
                                index: idx };
                            dataContext[idx] = context;
                            idx += 1;

                            html += this._renderItem(context);
                            newGroup = false;
                        }
                    }
                } else {
                    for (i = 0; i < view.length; i++) {
                        context = { selected: this._selected(view[i], values), item: view[i], index: i };

                        dataContext[i] = context;

                        html += this._renderItem(context);
                    }
                }

                this._view = dataContext;

                cspCompliantHtml = $(html);
                kendo.applyStylesFromKendoAttributes(cspCompliantHtml, ["width", "background-color"]);

                this.element.empty().append(cspCompliantHtml);

                if (isGrouped && dataContext.length) {
                    this._renderHeader();
                }
            },

            _selected: function(dataItem, values) {
                var select = !this.isFiltered() || this.options.selectable === "multiple";
                return select && this._dataItemPosition(dataItem, values) !== -1;
            },

            setDSFilter: function(filter) {
                this._lastDSFilter = extend({}, filter);
            },

            isFiltered: function() {
                if (!this._lastDSFilter) {
                    this.setDSFilter(this.dataSource.filter());
                }

                return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);
            },

            refresh: function(e) {
                var that = this;
                var action = e && e.action;
                var skipUpdateOnBind = that.options.skipUpdateOnBind;
                var isItemChange = action === "itemchange";
                var result;

                that.trigger(DATA_BINDING);

                that._fixedHeader();

                that._render();

                that.bound(true);

                if (isItemChange || action === "remove") {
                    result = mapChangedItems(that._dataItems, e.items);

                    if (result.changed.length) {
                        if (isItemChange) {
                            that.trigger(SELECTED_ITEM_CHANGE, {
                                items: result.changed
                            });
                        } else {
                            that.value(that._getValues(result.unchanged));
                        }
                    }
                } else if (that.isFiltered() || that._skipUpdate || that._emptySearch) {
                    that.focus(0);
                    if (that._skipUpdate) {
                        that._skipUpdate = false;
                        that._selectedIndices = that._valueIndices(that._values, that._selectedIndices);
                    }
                } else if (!skipUpdateOnBind && (!action || action === "add")) {
                    that.value(that._values);
                }

                if (that._valueDeferred) {
                    that._valueDeferred.resolve();
                }

                that.trigger(DATA_BOUND);
            },

            bound: function(bound) {
                if (bound === undefined$1) {
                    return this._bound;
                }

                this._bound = bound;
            },

            isGrouped: function() {
                return (this.dataSource.group() || []).length;
            }
        });

        ui.plugin(StaticList);

        function last(list) {
            return list[list.length - 1];
        }

        function getSelectedOption(select) {
            var index = select.selectedIndex;
            return index > -1 ? select.options[index] : {};
        }

        function mapChangedItems(selected, itemsToMatch) {
            var itemsLength = itemsToMatch.length;
            var selectedLength = selected.length;
            var dataItem;
            var found;
            var i, j;

            var changed = [];
            var unchanged = [];

            if (selectedLength) {
                for (i = 0; i < selectedLength; i++) {
                    dataItem = selected[i];
                    found = false;

                    for (j = 0; j < itemsLength; j++) {
                        if (dataItem === itemsToMatch[j]) {
                            found = true;
                            changed.push({ index: i, item: dataItem });
                            break;
                        }
                    }

                    if (!found) {
                        unchanged.push(dataItem);
                    }
                }
            }

            return {
                changed: changed,
                unchanged: unchanged
            };
        }

        function isValidFilterExpr(expression) {
            if (!expression || $.isEmptyObject(expression)) {
                return false;
            }

            if (expression.filters && !expression.filters.length) {
                return false;
            }

            return true;
        }

        function removeFiltersForField(expression, field) {
            var filters;
            var found = false;

            if (expression.filters) {
                filters = $.grep(expression.filters, function(filter) {
                    found = removeFiltersForField(filter, field);
                    if (filter.filters) {
                        return filter.filters.length;
                    } else {
                        return filter.field != field;
                    }
                });

                if (!found && expression.filters.length !== filters.length) {
                    found = true;
                }

                expression.filters = filters;
            }

            return found;
        }

        kendo.cssProperties.registerPrefix("List", "k-list-");

    })(window.kendo.jQuery);
    var kendo$p = kendo;

    var __meta__$u = {
        id: "calendar",
        name: "Calendar",
        category: "web",
        description: "The Calendar widget renders a graphical calendar that supports navigation and selection.",
        depends: [ "core", "selectable" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            support = kendo.support,
            ui = kendo.ui,
            Widget = ui.Widget,
            keys = kendo.keys,
            parse = kendo.parseDate,
            encode = kendo.htmlEncode,
            adjustDST = kendo.date.adjustDST,
            weekInYear = kendo.date.weekInYear,
            Selectable = kendo.ui.Selectable,
            extractFormat = kendo._extractFormat,
            template = kendo.template,
            getCulture = kendo.getCulture,
            transitions = kendo.support.transitions,
            transitionOrigin = transitions ? transitions.css + "transform-origin" : "",
            cellTemplate = template(function (data) { return ("<td class=\"" + (data.cssClass) + "\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link\" href=\"#\" data-" + (data.ns) + "value=\"" + (data.dateString) + "\">" + (data.value) + "</a></td>"); }),
            emptyCellTemplate = template(function () { return '<td role="gridcell" class="k-calendar-td k-out-of-range"><a class="k-link"></a></td>'; }),
            otherMonthCellTemplate = template(function () { return '<td role="gridcell" class="k-calendar-td k-out-of-range">&nbsp;</td>'; }),
            weekNumberTemplate = template(function (data) { return ("<td class=\"k-calendar-td k-alt\">" + (data.weekNumber) + "</td>"); }),
            outerWidth = kendo._outerWidth,
            ns = ".kendoCalendar",
            CLICK = "click" + ns,
            KEYDOWN_NS = "keydown" + ns,
            ID = "id",
            MIN = "min",
            LEFT = "left",
            SLIDE = "slideIn",
            MONTH = "month",
            CENTURY = "century",
            CHANGE = "change",
            NAVIGATE = "navigate",
            VALUE = "value",
            HOVER = "k-hover",
            DISABLED = "k-disabled",
            FOCUSED = "k-focus",
            OTHERMONTH = "k-other-month",
            OUTOFRANGE = "k-out-of-range",
            TODAY = "k-calendar-nav-today",
            CELLSELECTOR = "td:has(.k-link)",
            CELLSELECTORVALID = "td:has(.k-link):not(." + DISABLED + "):not(." + OUTOFRANGE + ")",
            WEEKCOLUMNSELECTOR = "td:not(:has(.k-link))",
            SELECTED = "k-selected",
            BLUR = "blur" + ns,
            FOCUS = "focus",
            FOCUS_WITH_NS = FOCUS + ns,
            MOUSEENTER = support.touch ? "touchstart" : "mouseenter",
            MOUSEENTER_WITH_NS = support.touch ? "touchstart" + ns : "mouseenter" + ns,
            MOUSELEAVE = support.touch ? "touchend" + ns + " touchmove" + ns : "mouseleave" + ns,
            MS_PER_MINUTE = 60000,
            MS_PER_DAY = 86400000,
            PREVARROW = "_prevArrow",
            NEXTARROW = "_nextArrow",
            ARIA_DISABLED = "aria-disabled",
            ARIA_SELECTED = "aria-selected",
            ARIA_LABEL = "aria-label",
            extend = $.extend,
            DATE = Date,
            views = {
                month: 0,
                year: 1,
                decade: 2,
                century: 3
            },
            HEADERSELECTOR = '.k-header, .k-calendar-header',
            CLASSIC_HEADER_TEMPLATE = function (ref) {
                var actionAttr = ref.actionAttr;
                var size = ref.size;
                var isRtl = ref.isRtl;

                return "<div class=\"k-header k-hstack\">\n            <a tabindex=\"-1\" href=\"#\" " + actionAttr + "=\"prev\" role=\"button\" class=\"k-calendar-nav-prev k-button " + size + " k-rounded-md k-button-flat k-button-flat-base k-icon-button\" " + ARIA_LABEL + "=\"Previous\">" + (kendo.ui.icon({ icon: ("caret-alt-" + (isRtl ? "right" : "left")), iconClass: "k-button-icon" })) + "</span></a>\n            <a tabindex=\"-1\" href=\"#\" " + actionAttr + "=\"nav-up\" id=\"" + kendo.guid() + "\" role=\"button\" class=\"k-calendar-nav-fast k-button " + size + " k-rounded-md k-button-flat k-button-flat-base  k-flex\"></a>\n            <a tabindex=\"-1\" href=\"#\" " + actionAttr + "=\"next\" role=\"button\" class=\"k-calendar-nav-next k-button " + size + " k-rounded-md k-button-flat k-button-flat-base  k-icon-button\" " + ARIA_LABEL + "=\"Next\">" + (kendo.ui.icon({ icon: ("caret-alt-" + (isRtl ? "left" : "right")), iconClass: "k-button-icon" })) + "</a>\n        </div>";
        },
            MODERN_HEADER_TEMPLATE = function (ref) {
                var actionAttr = ref.actionAttr;
                var size = ref.size;
                var messages = ref.messages;
                var isRtl = ref.isRtl;

                return "<div class=\"k-calendar-header k-hstack\">\n            <button " + actionAttr + "=\"nav-up\" id=\"" + kendo.guid() + "\" class=\"k-calendar-title k-button " + size + " k-button-flat k-button-flat-base k-rounded-md\">\n                <span class=\"k-button-text\"></span>\n            </button>\n            <span class=\"k-spacer\"></span>\n            <span class=\"k-calendar-nav\">\n                <button tabindex=\"-1\" " + actionAttr + "=" + (isRtl ? "next" : "prev") + " class=\"k-calendar-nav-prev k-button " + size + " k-button-flat k-button-flat-base k-rounded-md k-icon-button\">\n                    " + (kendo.ui.icon({ icon: ("chevron-" + (isRtl ? "right" : "left")), iconClass: "k-button-icon" })) + "\n                </button>\n                <button tabindex=\"-1\" " + actionAttr + "=\"today\" class=\"k-calendar-nav-today k-button " + size + " k-button-flat k-button-flat-primary k-rounded-md\">\n                    <span class=\"k-button-text\">" + (kendo.htmlEncode(messages.today)) + "</span>\n                </button>\n                <button tabindex=\"-1\" " + actionAttr + "=" + (isRtl ? "prev" : "next") + " class=\"k-calendar-nav-next k-button " + size + " k-button-flat k-button-flat-base k-rounded-md k-icon-button\">\n                    " + (kendo.ui.icon({ icon: ("chevron-" + (isRtl ? "left" : "right")), iconClass: "k-button-icon" })) + "\n                </button>\n            </span>\n        </div>";
        };

        var Calendar = Widget.extend({
            init: function(element, options) {
                var that = this, value, id;
                options = options || {};
                options.componentType = options.componentType || "classic";
                Widget.fn.init.call(that, element, options);

                element = that.wrapper = that.element;
                options = that.options;

                options.url = kendo.unescape(options.url);

                that.options.disableDates = getDisabledExpr(that.options.disableDates);

                that._templates();

                that._selectable();

                that._header();

                that._viewWrapper();

                if (that.options.hasFooter) {
                    that._footer(that.footer);
                } else {
                    that._today = that.element.find('.k-calendar-nav-today');
                    that._toggle();
                }

                id = element
                    .addClass("k-widget k-calendar " + (options.weekNumber ? " k-week-number" : ""))
                    .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE, CELLSELECTOR, mousetoggle)
                    .on(KEYDOWN_NS, "table.k-content", that._move.bind(that))
                    .on(CLICK + " touchend", CELLSELECTOR, function(e) {
                        var link = e.currentTarget.firstChild,
                            value = toDateObject(link);

                        if (link.href.indexOf("#") != -1) {
                            e.preventDefault();
                        }

                        if (that._view.name == "month" && that.options.disableDates(value)) {
                            return;
                        }
                        if (that._view.name != "month" || options.selectable == "single") {
                                that._click($(link));
                        }
                    })
                    .on("mouseup" + ns, "table.k-content, .k-footer", function() {
                        that._focusView(that.options.focusOnNav !== false);
                    })
                    .attr(ID);

                if (that._isMultipleSelection() && that.options.weekNumber) {
                    element.on(CLICK, WEEKCOLUMNSELECTOR, function(e) {
                            var first = $(e.currentTarget).closest("tr").find(CELLSELECTORVALID).first(),
                                last = that.selectable._lastActive = $(e.currentTarget).closest("tr").find(CELLSELECTORVALID).last();
                            that.selectable.selectRange(first, last);
                            that.selectable.trigger(CHANGE, { event: e });
                            that._current = that._value = toDateObject(last.find("a"));
                            that._setCurrent(that._current);
                    });
                }

                normalize(options);
                value = parse(options.value, options.format, options.culture);
                that._selectDates = [];

                that._index = views[options.start];

                that._current = new DATE(+restrictValue(value, options.min, options.max));

                that._addClassProxy = function() {
                    that._active = true;

                    if (that._cell.hasClass(DISABLED)) {
                        var todayString = that._view.toDateString(getToday());
                        that._cell = that._cellByDate(todayString);
                    }

                    that._cell.addClass(FOCUSED);
                };

                that._removeClassProxy = function() {
                    that._active = false;
                    if (that._cell) {
                        that._cell.removeClass(FOCUSED);
                    }
                };

                that.value(value);

                if (that._isMultipleSelection() && options.selectDates.length > 0) {
                    that.selectDates(options.selectDates);
                }
                kendo.notify(that);
            },

            options: {
                name: "Calendar",
                value: null,
                min: new DATE(1900, 0, 1),
                max: new DATE(2099, 11, 31),
                dates: [],
                disableDates: null,
                url: "",
                culture: "",
                footer: "",
                format: "",
                month: {},
                weekNumber: false,
                selectable: "single",
                selectDates: [],
                start: MONTH,
                depth: MONTH,
                size: "medium",
                animation: {
                    horizontal: {
                        effects: SLIDE,
                        reverse: true,
                        duration: 500,
                        divisor: 2
                    },
                    vertical: {
                        effects: "zoomIn",
                        duration: 400
                    }
                },
                messages: {
                    weekColumnHeader: "",
                    today: "Today",
                    navigateTo: "Navigate to ",
                    parentViews: {
                        month: "year view",
                        year: "decade view",
                        decade: "century view"
                    }
                },
                componentType: "classic"
            },

            events: [
                CHANGE,
                NAVIGATE
            ],

            componentTypes: {
                "classic": {
                    header: {
                        template: CLASSIC_HEADER_TEMPLATE
                    },
                    hasFooter: true,
                    linksSelector: ".k-button",
                    contentClasses: "k-calendar-table k-content"
                },
                "modern": {
                    header: {
                        template: MODERN_HEADER_TEMPLATE
                    },
                    hasFooter: false,
                    linksSelector: ".k-button",
                    contentClasses: "k-calendar-table k-content k-calendar-content"
                }
            },

            setOptions: function(options) {
                var that = this;

                normalize(options);

                options.disableDates = getDisabledExpr(options.disableDates);
                that._destroySelectable();

                if (options.messages) {
                    options.messages = $.extend({}, true, that.options.messages, options.messages);
                }

                Widget.fn.setOptions.call(that, options);

                that._templates();

                that._selectable();

                that._viewWrapper();

                if (that.options.hasFooter) {
                    that._footer(that.footer);
                } else {
                    that.element.find(".k-footer").hide();
                    that._toggle();
                }
                that._index = views[that.options.start];

                that.navigate();

                if (options.weekNumber) {
                    that.element.addClass('k-week-number');
                }
            },

            destroy: function() {
                var that = this,
                today = that._today;

                that.element.off(ns);
                that._title.off(ns);
                that[PREVARROW].off(ns);
                that[NEXTARROW].off(ns);
                that._destroySelectable();
                kendo.destroy(that._table);

                if (today) {
                    kendo.destroy(today.off(ns));
                }

                Widget.fn.destroy.call(that);
            },

            current: function() {
                return this._current;
            },

            view: function() {
                return this._view;
            },

            focus: function(table) {
                table = table || this._table;
                this._bindTable(table);
                table.trigger("focus");
            },

            min: function(value) {
                return this._option(MIN, value);
            },

            max: function(value) {
                return this._option("max", value);
            },

            navigateToPast: function() {
                this._navigate(PREVARROW, -1);
            },

            navigateToFuture: function() {
                this._navigate(NEXTARROW, 1);
            },

            navigateUp: function() {
                var that = this,
                index = that._index;

                if (that._title.hasClass(DISABLED)) {
                    return;
                }

                that.navigate(that._current, ++index);
            },

            navigateDown: function(value) {
                var that = this,
                index = that._index,
                depth = that.options.depth;

                if (!value) {
                    return;
                }

                if (index === views[depth]) {
                    if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {
                        that.value(value);
                        that.trigger(CHANGE);
                    }
                    return;
                }

                that.navigate(value, --index);
            },

            navigate: function(value, view) {
                view = isNaN(view) ? views[view] : view;

                var that = this,
                    options = that.options,
                    culture = options.culture,
                    min = options.min,
                    max = options.max,
                    title = that._title,
                    from = that._table,
                    old = that._oldTable,
                    currentValue = that._current,
                    future = value && +value > +currentValue,
                    vertical = view !== undefined$1 && view !== that._index,
                    to, currentView, compare,
                    disabled,
                    viewWrapper = that.element.children(".k-calendar-view");

                if (!value) {
                    value = currentValue;
                }

                that._current = value = new DATE(+restrictValue(value, min, max));

                if (view === undefined$1) {
                    view = that._index;
                } else {
                    that._index = view;
                }

                that._view = currentView = calendar.views[view];
                compare = currentView.compare;

                disabled = view === views[CENTURY];
                title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

                disabled = compare(value, min) < 1;
                that[PREVARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

                disabled = compare(value, max) > -1;
                that[NEXTARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

                if (from && old && old.data("animating")) {
                    old.kendoStop(true, true);
                    from.kendoStop(true, true);
                }

                that._oldTable = from;

                if (!from || that._changeView) {
                    title.html('<span class="k-button-text">' + currentView.title(value, min, max, culture) + '</span>');

                    if (that.options.messages.parentViews && that._view.name !== CENTURY) {
                        title.attr("title", encode(that.options.messages.navigateTo + that.options.messages.parentViews[that._view.name]));
                    } else {
                        title.removeAttr("title");
                    }

                    that._table = to = $(currentView.content(extend({
                        min: min,
                        max: max,
                        date: value,
                        url: options.url,
                        dates: options.dates,
                        format: options.format,
                        otherMonth: true,
                        culture: culture,
                        disableDates: options.disableDates,
                        isWeekColumnVisible: options.weekNumber,
                        messages: options.messages,
                        contentClasses: that.options.contentClasses
                    }, that[currentView.name])));

                    that._aria();

                    addClassToViewContainer(to, currentView.name);
                    var replace = from && from.data("start") === to.data("start");
                    that._animate({
                        from: from,
                        to: to,
                        vertical: vertical,
                        future: future,
                        replace: replace
                    });

                    viewWrapper.removeClass("k-calendar-monthview k-calendar-yearview k-calendar-decadeview k-calendar-centuryview");
                    viewWrapper.addClass("k-calendar-" + currentView.name + "view");

                    that.trigger(NAVIGATE);

                    that._focus(value);
                }

                if (view === views[options.depth] && that._selectDates.length > 0) {
                    that._visualizeSelectedDatesInView();
                }

                if (that.options.selectable === "single") {
                    if (view === views[options.depth] && that._value && !that.options.disableDates(that._value)) {
                        that._selectCell(that._value);
                    }
                }

                that._setCurrent(value);

                if (!from && that._cell) {
                    that._cell.removeClass(FOCUSED);
                }

                that._changeView = true;
            },

            selectDates: function(dates) {
                var that = this,
                    validSelectedDates,
                    datesUnique;

                if (dates === undefined$1) {
                    return that._selectDates;
                }

                datesUnique = dates
                    .map(function(date) { return date.getTime(); })
                    .filter(function(date, position, array) {
                        return array.indexOf(date) === position;
                    })
                    .map(function(time) { return new Date(time); });

                validSelectedDates = $.grep(datesUnique, function(value) {
                    if (value) {
                        return +that._validateValue(new Date(value.setHours(0, 0, 0, 0))) === +value;
                    }
                });
                that._selectDates = validSelectedDates.length > 0 ? validSelectedDates : (datesUnique.length === 0 ? datesUnique : that._selectDates);
                that._visualizeSelectedDatesInView();
            },

            value: function(value) {
                var that = this,
                    old = that._view,
                    view = that._view;

                if (value === undefined$1) {
                    return that._value;
                }

                value = that._validateValue(value);
                if (value && that._isMultipleSelection()) {
                    var date = new Date(+value);
                    date.setHours(0, 0, 0, 0);
                    that._selectDates = [date];
                    that.selectable._lastActive = null;
                }
                if (old && value === null && that._cell) {
                    that._cell.removeClass(SELECTED);
                } else {
                    that._changeView = !value || view && view.compare(value, that._current) !== 0;
                    that.navigate(value);
                }
            },

            isRtl: function() {
                return kendo.support.isRtl(this.wrapper);
            },

            _aria: function() {
                var table = this._table;

                table.attr("aria-labelledby", this._title.attr("id"));

                if (this._view.name === "month" && this.options.selectable === "multiple") {
                    table.attr("aria-multiselectable", "true");
                }
            },

            _validateValue: function(value) {
                var that = this,
                    options = that.options,
                    min = options.min,
                    max = options.max;

                if (value === null) {
                    that._current = createDate(that._current.getFullYear(), that._current.getMonth(), that._current.getDate());
                }

                value = parse(value, options.format, options.culture);

                if (value !== null) {
                    value = new DATE(+value);

                    if (!isInRange(value, min, max)) {
                        value = null;
                    }
                }

                if (value === null || !that.options.disableDates(new Date(+value))) {
                    that._value = value;
                } else if (that._value === undefined$1) {
                    that._value = null;
                }

                return that._value;
            },

            _visualizeSelectedDatesInView: function() {
                var that = this;
                 var selectedDates = {};
                $.each(that._selectDates, function(index, value) {
                    selectedDates[kendo.calendar.views[0].toDateString(value)] = value;
                });
                that.selectable.clear();
                 var cells = that._table
                    .find(CELLSELECTOR)
                    .filter(function(index, element) {
                        return selectedDates[$(element.firstChild).attr(kendo.attr(VALUE))];
                    });
                if (cells.length > 0) {
                    that.selectable._selectElement(cells, true);
                }
            },

            _isMultipleSelection: function() {
                var that = this;
                return that.options.selectable === "multiple";
            },

            _selectable: function() {
                var that = this;
                if (!that._isMultipleSelection()) {
                    return;
                }

                var selectable = that.options.selectable,
                selectableOptions = Selectable.parseOptions(selectable);

                that.selectable = new Selectable(that.wrapper, {
                    aria: true,
                    //excludes the anchor element
                    inputSelectors: "input,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-caret-alt-down,span.k-icon.k-i-caret-alt-up,span.k-svg-icon.k-svg-i-caret-alt-down,span.k-svg-icon.k-svg-i-caret-alt-up",
                    multiple: selectableOptions.multiple,
                    filter: "table.k-month:eq(0) " + CELLSELECTORVALID,
                    change: that._onSelect.bind(that),
                    relatedTarget: that._onRelatedTarget.bind(that)
                });
            },

            _onRelatedTarget: function(target) {
                var that = this;

                if (that.selectable.options.multiple && target.is(CELLSELECTORVALID)) {
                    that._current = toDateObject(target.find("a"));
                    that._setCurrent(that._current);
                }

            },

            _onSelect: function(e) {
                var that = this,
                    eventArgs = e,
                    selectableOptions = Selectable.parseOptions(that.options.selectable);

                if (!selectableOptions.multiple) {
                    if ($(eventArgs.event.currentTarget).is("td") && !$(eventArgs.event.currentTarget).hasClass("k-selected")) {
                        $(eventArgs.event.currentTarget).addClass("k-selected");
                    }
                    else {
                        that._click($(eventArgs.event.currentTarget).find("a"));
                    }
                    return;
                }

                if (eventArgs.event.ctrlKey || eventArgs.event.metaKey) {
                    if ($(eventArgs.event.currentTarget).is(CELLSELECTORVALID)) {
                        that._toggleSelection($(eventArgs.event.currentTarget));
                    }
                    else {
                        that._cellsBySelector(CELLSELECTORVALID).each(function(index, element) {
                            var value = toDateObject($(element).find("a"));
                            that._deselect(value);
                        });
                        that._addSelectedCellsToArray();
                    }
                }
                else if (eventArgs.event.shiftKey) {
                    that._rangeSelection(that._cell);
                }
                else if ($(eventArgs.event.currentTarget).is(CELLSELECTOR)) {
                    that.value(toDateObject($(eventArgs.event.currentTarget).find("a")));
                }
                else {
                    that._selectDates = [];
                    that._addSelectedCellsToArray();
                }
                 that.trigger(CHANGE);
            },

            _destroySelectable: function() {
                var that = this;

                if (that.selectable) {
                    that.selectable.destroy();
                    that.selectable = null;
                }
            },

            //when ctrl key is clicked
            _toggleSelection: function(currentCell) {
                var that = this,
                    date = toDateObject(currentCell.find("a"));
                    if (currentCell.hasClass("k-selected")) {
                        that._selectDates.push(date);
                    }
                    else {
                        that._deselect(date);
                    }
            },

            //shift selection
            _rangeSelection: function(toDateCell, startDate) {
                var that = this,
                    fromDate = startDate || toDateObject(that.selectable.value().first().find("a")),
                    toDate = toDateObject(toDateCell.find("a")),
                    daysDifference;

                if (that.selectable._lastActive || that._value) {
                    fromDate = that.selectable._lastActive ? toDateObject(that.selectable._lastActive.find("a")) : new Date(+that._value);
                } else {
                    that.selectable._lastActive = startDate ? that._cellByDate(that._view.toDateString(startDate), CELLSELECTORVALID) : that.selectable.value().first();
                }

                that._selectDates = [];
                daysDifference = daysBetweenTwoDates(fromDate, toDate);
                addDaysToArray(that._selectDates, daysDifference, fromDate, that.options.disableDates);

                that._visualizeSelectedDatesInView();
            },

            _cellsBySelector: function(selector) {
                var that = this;
                return that._table.find(selector);
            },

            _addSelectedCellsToArray: function() {
                var that = this;
                that.selectable.value().each(function(index, item) {
                    var date = toDateObject($(item.firstChild));
                    if (!that.options.disableDates(date)) {
                        that._selectDates.push(date);
                    }
                });
            },

             _deselect: function(date) {
                var that = this;
                 var currentDateIndex = that._selectDates.map(Number).indexOf(+date);
                if (currentDateIndex != -1) {
                    that._selectDates.splice(currentDateIndex, 1);
                }
            },

            _dateInView: function(date) {
                var that = this,
                    firstDateInView = toDateObject(that._cellsBySelector(CELLSELECTORVALID).first().find("a")),
                    lastDateInView = toDateObject(that._cellsBySelector(CELLSELECTORVALID).last().find("a"));

                return +date <= +lastDateInView && +date >= +firstDateInView;
            },

            _isNavigatable: function(currentValue, cellIndex) {
                var that = this;
                var isDisabled = that.options.disableDates;
                var cell;
                var index;

                if (that._view.name == "month") {
                    return !isDisabled(currentValue);
                } else {
                    index = that.wrapper.find("." + FOCUSED).index();
                    cell = that.wrapper.find(".k-content td").eq(index + cellIndex);
                    return cell.is(CELLSELECTORVALID) || !isDisabled(currentValue);
                }
            },

            _move: function(e) {
                var that = this,
                    options = that.options,
                    key = e.keyCode,
                    view = that._view,
                    index = that._index,
                    min = that.options.min,
                    max = that.options.max,
                    currentValue = new DATE(+that._current),
                    isRtl = that.isRtl(),
                    isDisabled = that.options.disableDates,
                    value, prevent, method, temp;

                if (e.target === that._table[0]) {
                    that._active = true;
                }

                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
                    value = 1;
                    prevent = true;
                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
                    value = -1;
                    prevent = true;
                } else if (key == keys.UP) {
                    value = index === 0 ? -7 : -4;
                    prevent = true;
                } else if (key == keys.DOWN) {
                    value = index === 0 ? 7 : 4;
                    prevent = true;
                } else if (key == keys.SPACEBAR) {
                    value = 0;
                    prevent = true;
                } else if (key == keys.HOME || key == keys.END) {
                    method = key == keys.HOME ? "first" : "last";
                    temp = view[method](currentValue);
                    currentValue = new DATE(temp.getFullYear(), temp.getMonth(), temp.getDate(), currentValue.getHours(), currentValue.getMinutes(), currentValue.getSeconds(), currentValue.getMilliseconds());
                    currentValue.setFullYear(temp.getFullYear());
                    prevent = true;
                } else if (key === 84) {
                    that._todayClick(e);
                    prevent = true;
                }

                if (e.ctrlKey || e.metaKey) {
                    if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
                        that.navigateToFuture();
                        prevent = true;
                    } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
                        that.navigateToPast();
                        prevent = true;
                    } else if (key == keys.UP) {
                        that.navigateUp();
                        prevent = true;
                    } else if (key == keys.DOWN) {
                        that._click($(that._cell[0].firstChild));
                        prevent = true;
                    }
                      else if ((key == keys.ENTER || key == keys.SPACEBAR) && that._isMultipleSelection()) {
                        that._keyboardToggleSelection(e);

                        var focusedDate = toDateObject($(that._cell[0]).find("a"));
                        that._setCurrent(focusedDate);

                    }
                } else if (e.shiftKey) {
                    if (value !== undefined$1 || method) {
                        if (!method) {
                            view.setDate(currentValue, value);
                        }

                        if (!isInRange(currentValue, min, max)) {
                            currentValue = restrictValue(currentValue, options.min, options.max);
                        }

                        if (isDisabled(currentValue)) {
                            currentValue = that._nextNavigatable(currentValue, value);
                        }

                        min = createDate(min.getFullYear(), min.getMonth(), min.getDate());
                        if (that._isMultipleSelection()) {
                            that._keyboardRangeSelection(e, currentValue);
                        }
                        else {
                            that._focus(currentValue);
                        }
                    }
                } else {
                    if (key == keys.ENTER || key == keys.SPACEBAR) {
                        if (view.name == "month" && that._isMultipleSelection()) {
                            that.value(toDateObject($(that._cell.find("a"))));
                            that.selectable._lastActive = $(that._cell[0]);
                            that.trigger(CHANGE);
                        }
                        else {
                            that._click($(that._cell[0].firstChild));
                        }
                        prevent = true;
                    } else if (key == keys.PAGEUP) {
                        prevent = true;
                        that.navigateToPast();
                    } else if (key == keys.PAGEDOWN) {
                        prevent = true;
                        that.navigateToFuture();
                    }

                    if (value || method) {
                        if (!method) {
                            view.setDate(currentValue, value);
                        }

                        min = createDate(min.getFullYear(), min.getMonth(), min.getDate());

                        if (!isInRange(currentValue, min, max)) {
                            currentValue = restrictValue(currentValue, options.min, options.max);
                        }

                        if (!that._isNavigatable(currentValue, value)) {
                            currentValue = that._nextNavigatable(currentValue, value);
                        }

                        if (that._isMultipleSelection()) {
                            if (!that._dateInView(currentValue)) {
                                that.navigate(currentValue);
                            }
                            else {
                                that._current = currentValue;
                                that._setCurrent(currentValue);
                            }
                        }
                        else {
                            that._focus(currentValue);
                        }
                    }
                }

                if (prevent) {
                    e.preventDefault();
                }

                return that._current;
            },

            _keyboardRangeSelection: function(event, currentValue) {
                var that = this,
                    fromDate,
                    daysDifference;

                if (!that._dateInView(currentValue)) {
                    that._selectDates = [];

                    fromDate = that.selectable._lastActive ? toDateObject(that.selectable._lastActive.find("a")) : currentValue;
                    daysDifference = daysBetweenTwoDates(fromDate, new Date(+currentValue));

                    addDaysToArray(that._selectDates, daysDifference, fromDate, that.options.disableDates);

                    that.navigate(currentValue);
                    that._current = currentValue;
                    that.selectable._lastActive = that.selectable._lastActive || that._cellByDate(that._view.toDateString(currentValue), CELLSELECTORVALID);
                    that.trigger(CHANGE);
                    return;
                }
                that.selectable.options.filter = that.wrapper.find("table").length > 1 && +currentValue > +that._current ? "table.k-month:eq(1) " + CELLSELECTORVALID : "table.k-month:eq(0) " + CELLSELECTORVALID;
                that._setCurrent(currentValue);
                that._current = currentValue;

                that._rangeSelection(that._cellByDate(that._view.toDateString(currentValue), CELLSELECTORVALID), currentValue);

                that.trigger(CHANGE);

                that.selectable.options.filter = "table.k-month:eq(0) " + CELLSELECTORVALID;
            },

            _keyboardToggleSelection: function(event) {
                var that = this;

                event.currentTarget = that._cell[0];
                that.selectable._lastActive = $(that._cell[0]);

                if ($(that._cell[0]).hasClass(SELECTED)) {
                    that.selectable._unselect($(that._cell[0]));
                }
                else {
                    that.selectable.value($(that._cell[0]));
                }
                that.selectable.trigger(CHANGE, { event: event });
            },

            _nextNavigatable: function(currentValue, value) {
                var that = this,
                disabled = true,
                view = that._view,
                min = that.options.min,
                max = that.options.max,
                isDisabled = that.options.disableDates,
                navigatableDate = new Date(currentValue.getTime());

                view.setDate(navigatableDate, -value);

                while (disabled) {
                    view.setDate(currentValue, value);

                    if (!isInRange(currentValue, min, max)) {
                        currentValue = navigatableDate;
                        break;
                    }
                    disabled = isDisabled(currentValue);
                }
                return currentValue;
            },

            _animate: function(options) {
                var that = this;
                var from = options.from;
                var to = options.to;
                var active = that._active;
                var viewWrapper = that.element.children(".k-calendar-view");

                if (!from) {
                    viewWrapper.append(to);
                    that._bindTable(to);
                } else if (from.parent().data("animating")) {
                    from.off(ns);
                    from.parent().kendoStop(true, true).remove();
                    from.remove();

                    viewWrapper.append(to);
                    that._focusView(active);
                } else if (!from.is(":visible") || that.options.animation === false || options.replace) {
                    to.insertAfter(from);
                    from.off(ns).remove();

                    that._focusView(active);
                } else {
                    that[options.vertical ? "_vertical" : "_horizontal"](from, to, options.future);
                }
            },

            _horizontal: function(from, to, future) {
                var that = this,
                    active = that._active,
                    horizontal = that.options.animation.horizontal,
                    effects = horizontal.effects,
                    viewWidth = outerWidth(from),
                    margin = (outerWidth(from, true) - viewWidth);

                if (effects && effects.indexOf(SLIDE) != -1) {
                    from.add(to).css({ width: viewWidth });

                    from.wrap("<div/>");

                    that._focusView(active, from);

                    from.parent()
                    .css({
                        position: "relative",
                        width: (viewWidth * 2) + (2 * margin),
                        display: "flex",
                        "margin-left": future ? 0 : (-viewWidth - margin)
                    });

                    to[future ? "insertAfter" : "insertBefore"](from);

                    extend(horizontal, {
                        effects: SLIDE + ":" + (future ? "right" : LEFT),
                        complete: function() {
                            from.off(ns).remove();
                            that._oldTable = null;

                            to.unwrap();

                            that._focusView(active);

                        }
                    });

                    from.parent().kendoStop(true, true).kendoAnimate(horizontal);
                }
            },

            _vertical: function(from, to) {
                var that = this,
                    vertical = that.options.animation.vertical,
                    effects = vertical.effects,
                    active = that._active, //active state before from's blur
                    cell, position;

                if (effects && effects.indexOf("zoom") != -1) {
                    to.insertBefore(from);

                    from.css({
                        position: "absolute",
                        width: to.width()
                    });

                    if (transitionOrigin) {
                        cell = that._cellByDate(that._view.toDateString(that._current));
                        position = cell.position();
                        position = (position.left + parseInt(cell.width() / 2, 10)) + "px" + " " + (position.top + parseInt(cell.height() / 2, 10) + "px");
                        to.css(transitionOrigin, position);
                    }

                    from.kendoStop(true, true).kendoAnimate({
                        effects: "fadeOut",
                        duration: 600,
                        complete: function() {
                            from.off(ns).remove();
                            that._oldTable = null;

                            that._focusView(active);
                        }
                    });

                    to.kendoStop(true, true).kendoAnimate(vertical);
                }
            },

            _cellByDate: function(value, selector) {
                return this._table.find(selector ? selector : "td:not(." + OTHERMONTH + ")")
                .filter(function() {
                    return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
                });
            },

            _selectCell: function(date) {
                var that = this,
                    cell = that._selectedCell,
                    value = that._view.toDateString(date);

                    if (cell && cell[0]) {
                        cell[0].removeAttribute(ARIA_SELECTED);
                        cell.removeClass(SELECTED);
                    }

                    cell = that._cellByDate(value, that.options.selectable == "multiple" ? CELLSELECTOR : "td:not(." + OTHERMONTH + ")");

                    that._selectedCell = cell;
                    cell.addClass(SELECTED)
                        .attr(ARIA_SELECTED, true);
            },

            _setCurrent: function(date) {
                var that = this,
                    id = kendo.guid(),
                    cell = that._cell,
                    value = that._view.toDateString(date);

                    if (cell && cell[0]) {
                        cell.removeClass(FOCUSED);
                        cell[0].removeAttribute(ARIA_LABEL);
                        cell[0].removeAttribute(ID);
                    }

                    cell = that._cellByDate(value, that.options.selectable == "multiple" ? CELLSELECTOR : "td:not(." + OTHERMONTH + ")");

                    that._cell = cell;

                    cell.attr(ID, id)
                        .addClass(FOCUSED);

                    if (that._table[0]) {
                        that._table[0].removeAttribute("aria-activedescendant");
                        that._table.attr("aria-activedescendant", id);
                    }
            },

            _bindTable: function(table) {
                table
                .on(FOCUS_WITH_NS, this._addClassProxy)
                .on(BLUR, this._removeClassProxy);
            },

            _click: function(link) {
                var that = this,
                options = that.options,
                currentValue = new Date(+that._current),
                value = toDateObject(link);

                adjustDST(value, 0);

                if (that._view.name == "month" && that.options.disableDates(value)) {
                    value = that._value;
                }

                that._view.setDate(currentValue, value);

                that.navigateDown(restrictValue(currentValue, options.min, options.max));
            },

            _focus: function(value) {
                var that = this,
                view = that._view;

                if (view.compare(value, that._current) !== 0) {
                    that.navigate(value);
                } else {
                    that._current = value;
                    that._setCurrent(value);
                }
            },

            _focusView: function(active, table) {
                if (active) {
                    this.focus(table);
                }
            },

            _viewWrapper: function() {
                var that = this;
                var element = that.element;
                var viewWrapper = element.children(".k-calendar-view");

                if (!viewWrapper[0]) {
                    viewWrapper = $("<div class='k-calendar-view' />").insertAfter(element.find(HEADERSELECTOR));
                }
            },

            _footer: function(template) {
                var that = this,
                today = getToday(),
                element = that.element,
                footer = element.find(".k-footer");

                if (!template) {
                    that._toggle(false);
                    footer.hide();
                    return;
                }

                if (!footer[0]) {
                    footer = $("<div class=\"k-footer\">\n                    <button tabindex=\"-1\" class=\"k-calendar-nav-today k-flex k-button k-button-md k-button-flat k-button-flat-primary k-rounded-md\">\n                        <span class=\"k-button-text\"></span>\n                    </button>\n                </div>").appendTo(element);
                }

                that._today = footer.show()
                    .find(".k-button-flat-primary")
                    .attr("title", kendo.toString(today, "D", that.options.culture));

                footer.find(".k-button-text")
                    .html(template(today));

                that._toggle();
            },

            _header: function() {
                var that = this,
                element = that.element,
                linksSelector = that.options.linksSelector;

                if (!element.find(HEADERSELECTOR)[0]) {
                    element.html(kendo.template(that.options.header.template)($.extend(true,{}, that.options, {
                        actionAttr: kendo.attr("action"),
                        size: kendo.getValidCssClass("k-button-", "size", that.options.size),
                        isRtl: that.isRtl()
                    })));
                }

                element.find(linksSelector)
                    .on(CLICK + " touchend" + ns, function() { return false; } );

                that._title = element.find('[' + kendo.attr("action") + '="nav-up"]').on(CLICK + " touchend" + ns, function() {
                    that._active = that.options.focusOnNav !== false;
                    that.navigateUp();
                });
                that[PREVARROW] = element.find('[' + kendo.attr("action") + '="prev"]').on(CLICK + " touchend" + ns, function() {
                    that._active = that.options.focusOnNav !== false;
                    that.navigateToPast();
                });
                that[NEXTARROW] = element.find('[' + kendo.attr("action") + '="next"]').on(CLICK + " touchend" + ns, function() {
                    that._active = that.options.focusOnNav !== false;
                    that.navigateToFuture();
                });
                element.find('[' + kendo.attr("action") + '="today"]').on(CLICK + " touchend" + ns, that._todayClick.bind(that));

            },

            _navigate: function(arrow, modifier) {
                var that = this,
                index = that._index + 1,
                currentValue = new DATE(+that._current);

                if (that._isMultipleSelection()) {
                    var firstDayCurrentMonth = that._table.find("td:not(.k-other-month):not(.k-out-of-range)").has(".k-link").first();
                    currentValue = toDateObject(firstDayCurrentMonth.find("a"));
                    that._current = new Date(+currentValue);
                }

                arrow = that[arrow];

                if (!arrow.hasClass(DISABLED)) {
                    if (index > 3) {
                        currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);
                    } else {
                        calendar.views[index].setDate(currentValue, modifier);
                    }

                    that.navigate(currentValue);
                }
            },

            _option: function(option, value) {
                var that = this,
                    options = that.options,
                    currentValue = that._value || that._current,
                    isBigger;

                if (value === undefined$1) {
                    return options[option];
                }

                value = parse(value, options.format, options.culture);

                if (!value) {
                    return;
                }

                options[option] = new DATE(+value);

                if (option === MIN) {
                    isBigger = value > currentValue;
                } else {
                    isBigger = currentValue > value;
                }

                if (isBigger || isEqualMonth(currentValue, value)) {
                    if (isBigger) {
                        that._value = null;
                    }
                    that._changeView = true;
                }

                if (!that._changeView) {
                    that._changeView = !!(options.month.content || options.month.empty);
                }

                that.navigate(that._value);

                that._toggle();
            },

            _toggle: function(toggle) {
                var that = this,
                    options = that.options,
                    isTodayDisabled = that.options.disableDates(getToday()),
                    link = that._today,
                    todayClass = that._todayClass();

                if (toggle === undefined$1) {
                    toggle = isInRange(getToday(), options.min, options.max);
                }

                if (link) {
                    link.off(CLICK);

                    if (toggle && !isTodayDisabled) {
                        link.addClass(todayClass)
                        .removeClass(DISABLED)
                        .on(CLICK, that._todayClick.bind(that));
                    } else {
                        link.removeClass(todayClass)
                        .addClass(DISABLED)
                        .on(CLICK, prevent);
                    }
                }
            },

            _todayClass: function() {
                return TODAY;
            },

            _todayClick: function(e) {
                var that = this,
                depth = views[that.options.depth],
                disabled = that.options.disableDates,
                today = getToday();

                e.preventDefault();

                if (disabled(today)) {
                    return;
                }

                if (that._view.compare(that._current, today) === 0 && that._index == depth) {
                    that._changeView = false;
                }

                if (that._isMultipleSelection()) {
                    that._selectDates = [today];
                    that.selectable._lastActive = null;
                }

                that._value = today;
                that.navigate(today, depth);

                that.trigger(CHANGE);
            },

            _templates: function() {
                var that = this,
                    options = that.options,
                    footer = options.footer,
                    month = options.month,
                    content = month.content,
                    weekNumber = month.weekNumber,
                    empty = month.empty,
                    footerTemplate = function (data) { return ("" + (kendo.toString(data,"D",options.culture))); };

                that.month = {
                    content: function (data) { return ("<td class=\"" + (data.cssClass) + "\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link " + (data.linkClass) + "\" href=\"" + (data.url) + "\" " + (kendo.attr(VALUE)) + "=\"" + (data.dateString) + "\" title=\"" + (data.title) + "\">" + (executeTemplate(content, data) || data.value) + "</a></td>"); },
                    empty: function (data) { return ("<td role=\"gridcell\">" + (executeTemplate(empty, data) || "&nbsp;") + "</td>"); },
                    weekNumber: function (data) { return ("<td class=\"k-alt\">" + (executeTemplate(weekNumber, data) || data.weekNumber) + "</td>"); }
                };

                that.year = {
                    content: template(function (data) { return ("<td class=\"" + (data.cssClass) + "\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link\" href=\"#\" data-" + (data.ns) + "value=\"" + (data.dateString) + "\" aria-label=\"" + (data.label) + "\">" + (data.value) + "</a></td>"); })
                };

                if (footer && footer !== true) {
                    footerTemplate = footer;
                }

                that.footer = footer !== false ? template(footerTemplate, { useWithBlock: false }) : null;
            },

            _updateAria: function(ariaTemplate, date) {
                var that = this;
                var cell = that._cell;
                var valueType = that.view().valueType();
                var current = date || that.current();
                var text;

                if (valueType === "month") {
                    text = kendo.toString(current, "MMMM");
                } else if (valueType === "date") {
                    text = kendo.toString(current, "D");
                } else {
                    text = cell.text();
                }

                cell.attr("aria-label", ariaTemplate({ current: current, valueType: valueType, text: text }));

                return cell.attr("id");
            }
        });

        ui.plugin(Calendar);

        var calendar = {
            firstDayOfMonth: function(date) {
                return createDate(
                    date.getFullYear(),
                    date.getMonth(),
                    1
                );
            },

            firstVisibleDay: function(date, calendarInfo) {
                calendarInfo = calendarInfo || kendo.culture().calendar;

                var firstDay = calendarInfo.firstDay,
                firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
                firstVisibleDay.setFullYear(date.getFullYear());

                while (firstVisibleDay.getDay() != firstDay) {
                    calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);
                }

                return firstVisibleDay;
            },

            setTime: function(date, time) {
                var tzOffsetBefore = date.getTimezoneOffset(),
                resultDATE = new DATE(date.getTime() + time),
                tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;

                date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);
            },
            views: [{
                name: MONTH,
                title: function(date, min, max, culture) {
                    return getCalendarInfo(culture).months.names[date.getMonth()] + " " + date.getFullYear();
                },
                content: function(options) {
                    var that = this,
                        idx = 0,
                        min = options.min,
                        max = options.max,
                        date = options.date,
                        dates = options.dates,
                        format = options.format,
                        culture = options.culture,
                        navigateUrl = options.url,
                        showHeader = options.showHeader,
                        otherMonth = options.otherMonth,
                        isWeekColumnVisible = options.isWeekColumnVisible,
                        hasUrl = navigateUrl && dates[0],
                        currentCalendar = getCalendarInfo(culture),
                        firstDayIdx = currentCalendar.firstDay,
                        days = currentCalendar.days,
                        names = shiftArray(days.names, firstDayIdx),
                        shortNames = shiftArray(days.namesShort, firstDayIdx),
                        start = calendar.firstVisibleDay(date, currentCalendar),
                        firstDayOfMonth = that.first(date),
                        lastDayOfMonth = that.last(date),
                        toDateString = that.toDateString,
                        today = getToday(),
                        contentClasses = options.contentClasses,
                        html = '<table tabindex="0" role="grid" class="' + contentClasses + '" cellspacing="0" data-start="' + toDateString(start) + '">';

                    if (showHeader) {
                        html += '<caption class="k-calendar-caption k-month-header">' + this.title(date, min, max, culture) + '</caption>';
                    }

                    html += '<thead class="k-calendar-thead"><tr role="row" class="k-calendar-tr">';

                    if (isWeekColumnVisible) {
                        html += '<th scope="col" class="k-calendar-th k-alt">' + encode(options.messages.weekColumnHeader) + '</th>';
                    }

                    for (; idx < 7; idx++) {
                        html += '<th scope="col" class="k-calendar-th" aria-label="' + names[idx] + '">' + shortNames[idx] + '</th>';
                    }

                    adjustDST(today, 0);
                    today = +today;

                    return view({
                        cells: 42,
                        perRow: 7,
                        html: html += '</tr></thead><tbody class="k-calendar-tbody"><tr role="row" class="k-calendar-tr">',
                        start: createDate(start.getFullYear(), start.getMonth(), start.getDate()),
                        isWeekColumnVisible: isWeekColumnVisible,
                        weekNumber: options.weekNumber,
                        min: createDate(min.getFullYear(), min.getMonth(), min.getDate()),
                        max: createDate(max.getFullYear(), max.getMonth(), max.getDate()),
                        otherMonth: otherMonth,
                        content: options.content,
                        lastDayOfMonth: lastDayOfMonth,
                        empty: options.empty,
                        setter: that.setDate,
                        disableDates: options.disableDates,
                        build: function(date, idx, disableDates) {
                            var cssClass = [ "k-calendar-td" ],
                                day = date.getDay(),
                                linkClass = "",
                                url = "#";

                            if (date < firstDayOfMonth || date > lastDayOfMonth) {
                                cssClass.push(OTHERMONTH);
                            }

                            if (disableDates(date)) {
                                cssClass.push(DISABLED);
                            }

                            if (+date === today) {
                                cssClass.push("k-today");
                            }

                            if (day === 0 || day === 6) {
                                cssClass.push("k-weekend");
                            }

                            if (hasUrl && inArray(+date, dates)) {
                                url = navigateUrl.replace("{0}", kendo.toString(date, format, culture));
                                linkClass = " k-action-link";
                            }

                            return {
                                date: date,
                                dates: dates,
                                ns: kendo.ns,
                                title: kendo.toString(date, "D", culture),
                                value: date.getDate(),
                                dateString: toDateString(date),
                                cssClass: cssClass.join(" "),
                                linkClass: linkClass,
                                url: url
                            };
                        },
                        weekNumberBuild: function(date) {
                            return {
                                weekNumber: weekInYear(date, kendo.culture().calendar.firstDay),
                                currentDate: date
                            };
                        }
                    });
                },
                first: function(date) {
                    return calendar.firstDayOfMonth(date);
                },
                last: function(date) {
                    var last = createDate(date.getFullYear(), date.getMonth() + 1, 0),
                    first = calendar.firstDayOfMonth(date),
                    timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

                    if (timeOffset) {
                        last.setHours(first.getHours() + (timeOffset / 60));
                    }

                    return last;
                },
                compare: function(date1, date2) {
                    var result,
                    month1 = date1.getMonth(),
                    year1 = date1.getFullYear(),
                    month2 = date2.getMonth(),
                    year2 = date2.getFullYear();

                    if (year1 > year2) {
                        result = 1;
                    } else if (year1 < year2) {
                        result = -1;
                    } else {
                        result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;
                    }

                    return result;
                },
                setDate: function(date, value) {
                    var hours = date.getHours();
                    if (value instanceof DATE) {
                        date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
                    } else {
                        calendar.setTime(date, value * MS_PER_DAY);
                    }
                    adjustDST(date, hours);
                },
                toDateString: function(date) {
                    return date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate();
                },
                valueType: function() {
                    return "date";
                }
            },
            {
                name: "year",
                title: function(date) {
                    return date.getFullYear();
                },
                content: function(options) {
                    var calendarMonths = getCalendarInfo(options.culture).months,
                        namesAbbr = calendarMonths.namesAbbr,
                        namesFull = calendarMonths.names,
                        toDateString = this.toDateString,
                        min = options.min,
                        max = options.max,
                        html = "";

                    if (options.showHeader) {
                        html += '<table tabindex="0" role="grid" class="k-calendar-table k-content k-meta-view" cellspacing="0">';
                            html += '<caption class="k-calendar-caption k-meta-header">';
                                html += this.title(options.date);
                            html += '</caption>';
                            html += '<tbody class="k-calendar-tbody">';
                                html += '<tr role="row" class="k-calendar-tr">';
                    }

                    return view({
                        min: createDate(min.getFullYear(), min.getMonth(), 1),
                        max: createDate(max.getFullYear(), max.getMonth(), 1),
                        start: createDate(options.date.getFullYear(), 0, 1),
                        html: html,
                        setter: this.setDate,
                        content: options.content,
                        build: function(date) {
                            var cssClass = [ "k-calendar-td" ];

                            return {
                                value: namesAbbr[date.getMonth()],
                                label: namesFull[date.getMonth()],
                                ns: kendo.ns,
                                dateString: toDateString(date),
                                cssClass: cssClass.join(" ")
                            };
                        }
                    });
                },
                first: function(date) {
                    return createDate(date.getFullYear(), 0, date.getDate());
                },
                last: function(date) {
                    return createDate(date.getFullYear(), 11, date.getDate());
                },
                compare: function(date1, date2) {
                    return compare(date1, date2);
                },
                setDate: function(date, value) {
                    var month,
                    hours = date.getHours();

                    if (value instanceof DATE) {
                        month = value.getMonth();

                        date.setFullYear(value.getFullYear(), month, date.getDate());

                        if (month !== date.getMonth()) {
                            date.setDate(0);
                        }
                    } else {
                        month = date.getMonth() + value;

                        date.setMonth(month);

                        if (month > 11) {
                            month -= 12;
                        }

                        if (month > 0 && date.getMonth() != month) {
                            date.setDate(0);
                        }
                    }

                    adjustDST(date, hours);
                },
                toDateString: function(date) {
                    return date.getFullYear() + "/" + date.getMonth() + "/1";
                },
                valueType: function() {
                    return "month";
                }
            },
            {
                name: "decade",
                title: function(date, min, max) {
                    return title(date, min, max, 10);
                },
                content: function(options) {
                    var year = options.date.getFullYear(),
                    toDateString = this.toDateString,
                    html = "";

                    if (options.showHeader) {
                        html += '<table tabindex="0" role="grid" class="k-calendar-table k-content k-meta-view" cellspacing="0">';
                            html += '<caption class="k-meta-header">';
                                html += this.title(options.date, options.min, options.max);
                            html += '</caption>';
                            html += '<tbody class="k-calendar-thead">';
                                html += '<tr role="row" class="k-calendar-tr">';
                    }

                    return view({
                        start: createDate(year - year % 10 - 1, 0, 1),
                        min: createDate(options.min.getFullYear(), 0, 1),
                        max: createDate(options.max.getFullYear(), 0, 1),
                        otherMonth: options.otherMonth,
                        html: html,
                        setter: this.setDate,
                        build: function(date, idx) {
                            var cssClass = [ "k-calendar-td" ];

                            if (idx === 0 || idx === 11) {
                                cssClass.push(OTHERMONTH);
                            }

                            return {
                                value: date.getFullYear(),
                                ns: kendo.ns,
                                dateString: toDateString(date),
                                cssClass: cssClass.join(" ")
                            };
                        }
                    });
                },
                first: function(date) {
                    var year = date.getFullYear();
                    return createDate(year - year % 10, date.getMonth(), date.getDate());
                },
                last: function(date) {
                    var year = date.getFullYear();
                    return createDate(year - year % 10 + 9, date.getMonth(), date.getDate());
                },
                compare: function(date1, date2) {
                    return compare(date1, date2, 10);
                },
                setDate: function(date, value) {
                    setDate(date, value, 1);
                },
                toDateString: function(date) {
                    return date.getFullYear() + "/0/1";
                },
                valueType: function() {
                    return "year";
                }
            },
            {
                name: CENTURY,
                title: function(date, min, max) {
                    return title(date, min, max, 100);
                },
                content: function(options) {
                    var year = options.date.getFullYear(),
                    min = options.min.getFullYear(),
                    max = options.max.getFullYear(),
                    toDateString = this.toDateString,
                    minYear = min,
                    maxYear = max,
                    html = "";

                    minYear = minYear - minYear % 10;
                    maxYear = maxYear - maxYear % 10;

                    if (maxYear - minYear < 10) {
                        maxYear = minYear + 9;
                    }

                    if (options.showHeader) {
                        html += '<table tabindex="0" role="grid" class="k-calendar-table k-content k-meta-view" cellspacing="0">';
                            html += '<caption class="k-calendar-caption k-meta-header">';
                                html += this.title(options.date, options.min, options.max);
                            html += '</caption>';
                            html += '<tbody class="k-calendar-tbody">';
                                html += '<tr role="row" class="k-calendar-tr">';
                    }

                    return view({
                        start: createDate(year - year % 100 - 10, 0, 1),
                        min: createDate(minYear, 0, 1),
                        max: createDate(maxYear, 0, 1),
                        otherMonth: options.otherMonth,
                        html: html,
                        setter: this.setDate,
                        build: function(date, idx) {
                            var cssClass = [ "k-calendar-td" ];
                            var start = date.getFullYear(),
                                end = start + 9;

                            if (idx === 0 || idx === 11) {
                                cssClass.push(OTHERMONTH);
                            }

                            if (start < min) {
                                start = min;
                            }

                            if (end > max) {
                                end = max;
                            }

                            return {
                                ns: kendo.ns,
                                value: start + " - " + end,
                                dateString: toDateString(date),
                                cssClass: cssClass.join(" ")
                            };
                        }
                    });
                },
                first: function(date) {
                    var year = date.getFullYear();
                    return createDate(year - year % 100, date.getMonth(), date.getDate());
                },
                last: function(date) {
                    var year = date.getFullYear();
                    return createDate(year - year % 100 + 99, date.getMonth(), date.getDate());
                },
                compare: function(date1, date2) {
                    return compare(date1, date2, 100);
                },
                setDate: function(date, value) {
                    setDate(date, value, 10);
                },
                toDateString: function(date) {
                    var year = date.getFullYear();
                    return (year - year % 10) + "/0/1";
                },
                valueType: function() {
                    return "decade";
                }
            }]
        };

        function title(date, min, max, modular) {
            var start = date.getFullYear(),
                minYear = min.getFullYear(),
                maxYear = max.getFullYear(),
                end;

            start = start - start % modular;
            end = start + (modular - 1);

            if (start < minYear) {
                start = minYear;
            }
            if (end > maxYear) {
                end = maxYear;
            }

            return start + "-" + end;
        }

        function view(options) {
            var idx = 0,
                data,
                min = options.min,
                max = options.max,
                start = options.start,
                setter = options.setter,
                build = options.build,
                weekNumberBuild = options.weekNumberBuild,
                length = options.cells || 12,
                isWeekColumnVisible = options.isWeekColumnVisible,
                cellsPerRow = options.perRow || 4,
                otherMonth = options.otherMonth,
                lastDayOfMonth = options.lastDayOfMonth,
                weekNumber = options.weekNumber || weekNumberTemplate,
                content = options.content || cellTemplate,
                empty = options.empty || emptyCellTemplate,
                otherMonthTemplate = options.otherMonthCellTemplate || otherMonthCellTemplate,
                html = options.html || '<table tabindex="0" role="grid" class="k-calendar-table k-content k-meta-view" cellspacing="0"><tbody class="k-calendar-tbody"><tr role="row" class="k-calendar-tr">';

            if (isWeekColumnVisible) {
                html += weekNumber(weekNumberBuild(start));
            }


            for (; idx < length; idx++) {
                if (idx > 0 && idx % cellsPerRow === 0) {
                    html += '</tr><tr role="row" class="k-calendar-tr">';
                    if (isWeekColumnVisible) {
                        html += otherMonth || (+start <= +lastDayOfMonth) ? weekNumber(weekNumberBuild(start)) : weekNumber({ weekNumber: "&nbsp;" });
                    }
                }

                start = createDate(start.getFullYear(), start.getMonth(), start.getDate());
                adjustDST(start, 0);

                data = build(start, idx, options.disableDates);

                html += (data.cssClass.indexOf(OTHERMONTH) !== -1 && !otherMonth) ? otherMonthTemplate(data) : isInRange(start, min, max) ? content(data) : empty(data);

                setter(start, 1);
            }

            return html + "</tr></tbody></table>";
        }

        function compare(date1, date2, modifier) {
            var year1 = date1.getFullYear(),
                start = date2.getFullYear(),
                end = start,
                result = 0;

            if (modifier) {
                start = start - start % modifier;
                end = start - start % modifier + modifier - 1;
            }

            if (year1 > end) {
                result = 1;
            } else if (year1 < start) {
                result = -1;
            }

            return result;
        }

        function getToday() {
            var today = new DATE();
            return new DATE(today.getFullYear(), today.getMonth(), today.getDate());
        }

        function restrictValue(value, min, max) {
            var today = getToday();

            if (value) {
                today = new DATE(+value);
            }

            if (min > today) {
                today = new DATE(+min);
            } else if (max < today) {
                today = new DATE(+max);
            }
            return today;
        }

        function isInRange(date, min, max) {
            return +date >= +min && +date <= +max;
        }

        function shiftArray(array, idx) {
            return array.slice(idx).concat(array.slice(0, idx));
        }

        function setDate(date, value, multiplier) {
            value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;
            date.setFullYear(value);
        }

        function daysBetweenTwoDates(startDate, endDate) {
            if (+endDate < +startDate) {
                var temp = +startDate;
                calendar.views[0].setDate(startDate, endDate);
                calendar.views[0].setDate(endDate, new Date(temp));
            }
            var fromDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());
            var endDateUTC = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());

            return Math.ceil((+endDateUTC - +fromDateUTC) / kendo.date.MS_PER_DAY);
        }

        function addDaysToArray(array, numberOfDays, fromDate, disableDates) {
            for (var i = 0; i <= numberOfDays; i++) {
                var nextDay = new Date(fromDate.getTime());
                nextDay = new Date(nextDay.setDate(nextDay.getDate() + i));
                if (!disableDates(nextDay)) {
                    array.push(nextDay);
                }
            }
        }

        function mousetoggle(e) {
            var disabled = $(this).hasClass("k-disabled");

            if (!disabled) {
                $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);
            }
        }

        function prevent(e) {
            e.preventDefault();
        }

        // creates date with full year
        function createDate(year, month, date) {
            var dateObject = new DATE(year, month, date);
            dateObject.setFullYear(year, month, date);
            return dateObject;
        }

        function getCalendarInfo(culture) {
            return getCulture(culture).calendars.standard;
        }

        function normalize(options) {
            var start = views[options.start],
                depth = views[options.depth],
                culture = getCulture(options.culture);

            options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);

            if (isNaN(start)) {
                start = 0;
                options.start = MONTH;
            }

            if (depth === undefined$1 || depth > start) {
                options.depth = MONTH;
            }

            if (options.dates === null) {
                options.dates = [];
            }
        }

        function addClassToViewContainer(element, currentView) {
            element.addClass("k-" + currentView);
        }

        function inArray(date, dates) {
            for (var i = 0, length = dates.length; i < length; i++) {
                if (date === +dates[i]) {
                    return true;
                }
            }
            return false;
        }

        function isEqualDatePart(value1, value2) {
            if (value1) {
                return value1.getFullYear() === value2.getFullYear() &&
                    value1.getMonth() === value2.getMonth() &&
                    value1.getDate() === value2.getDate();
            }

            return false;
        }

        function isEqualMonth(value1, value2) {
            if (value1) {
                return value1.getFullYear() === value2.getFullYear() &&
                    value1.getMonth() === value2.getMonth();
            }

            return false;
        }


        function getDisabledExpr(option) {
            if (kendo.isFunction(option)) {
                return option;
            }

            if (Array.isArray(option)) {
                return createDisabledExpr(option);
            }
            return $.noop;
        }

        function convertDatesArray(dates) {
            var result = [];
            for (var i = 0; i < dates.length; i++) {
                result.push(dates[i].setHours(0, 0, 0, 0));
            }
            return result;
        }

        function createDisabledExpr(dates) {
            var callback,
                disabledDates = [],
                days = ["su", "mo", "tu", "we", "th", "fr", "sa"];

            if (dates[0] instanceof DATE) {
                disabledDates = convertDatesArray(dates);
                callback = function (date) { return !!(date && disabledDates.indexOf((new Date(date)).setHours(0, 0, 0, 0)) > -1); };
            } else {
                disabledDates = dates.map(function (day) {
                    day = day.slice(0,2).toLowerCase();
                    var index = days.indexOf(day);
                    if (index > -1) {
                        return index;
                    }
                });

                callback = function (date) { return !!(date && disabledDates.indexOf((new Date(date)).getDay()) > -1); };
            }

            return callback;
        }

        function isEqualDate(oldValue, newValue) {
           if (oldValue instanceof Date && newValue instanceof Date) {
               oldValue = oldValue.getTime();
               newValue = newValue.getTime();
           }

           return oldValue === newValue;
        }

        function toDateObject(link) {
            var value = $(link).attr(kendo.attr(VALUE)).split("/");
            //Safari cannot create correctly date from "1/1/2090"
            value = createDate(value[0], value[1], value[2]);

            return value;
        }

        // Backwards compatibility after CSP changes.
        function executeTemplate(tmpl, data) {
            if (tmpl) {
                if (kendo.isFunction(tmpl)) {
                    return tmpl(data);
                }
                return template(tmpl)(data);
            }
            return undefined$1;
        }

        calendar.isEqualDatePart = isEqualDatePart;
        calendar.isEqualDate = isEqualDate;
        calendar.restrictValue = restrictValue;
        calendar.isInRange = isInRange;
        calendar.addClassToViewContainer = addClassToViewContainer;
        calendar.normalize = normalize;
        calendar.viewsEnum = views;
        calendar.disabled = getDisabledExpr;
        calendar.toDateObject = toDateObject;
        calendar.getToday = getToday;
        calendar.createDate = createDate;

        kendo.calendar = calendar;
    })(window.kendo.jQuery);
    var kendo$o = kendo;

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$t = {
        id: "dateinput",
        name: "DateInput",
        category: "web",
        description: "The DateInput widget allows to edit date by typing.",
        depends: [ "core", "label" ]
    };

    (function($, undefined$1) {
        var global = window;
        var kendo = global.kendo;
        var caret = kendo.caret;
        var ui = kendo.ui;
        var Widget = ui.Widget;
        var keys = kendo.keys;
        var ns = ".kendoDateInput";
        var objectToString = {}.toString;
        var isPlainObject = $.isPlainObject;

        var INPUT_EVENT_NAME = (kendo.support.propertyChangeEvent ? "propertychange.kendoDateInput input" : "input") + ns;

        var FOCUSED = "k-focus";
        var STATEDISABLED = "k-disabled";
        var STATEINVALID = "k-invalid";

        var DISABLED = "disabled";
        var READONLY = "readonly";
        var CHANGE = "change";

        var knownSymbols = "dMyHhmftsz";

        var DateInput = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                element = that.element;

                options = that.options;
                options.format = kendo._extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.d);
                options.min = kendo.parseDate(element.attr("min")) || kendo.parseDate(options.min);
                options.max = kendo.parseDate(element.attr("max")) || kendo.parseDate(options.max);

                var wrapperClass = (element.parent().attr("class") || "");
                var skipStyling = wrapperClass.indexOf("picker") >= 0 && wrapperClass.indexOf("rangepicker") < 0;

                if (skipStyling) {
                    that.wrapper = that.element.parent();
                } else {
                    that.wrapper = element.wrap("<span class='k-dateinput k-input'></span>").parent();
                    that.wrapper.addClass(element[0].className).removeClass('input-validation-error');
                }
                that.wrapper[0].style.cssText = element[0].style.cssText;
                element.css({
                    height: element[0].style.height
                });


                that._validationIcon = $(kendo.ui.icon({ icon: "exclamation-circle", iconClass: "k-input-validation-icon k-hidden" })).insertAfter(element);

                that._form();

                that.element
                    .addClass("k-input-inner")
                    .attr("autocomplete", "off")
                    .on("focus" + ns, function() {
                        that.wrapper.addClass(FOCUSED);
                    })
                    .on("focusout" + ns, function() {
                        that.wrapper.removeClass(FOCUSED);
                        that._change();
                    });

                try {
                    element[0].setAttribute("type", "text");
                } catch (e) {
                    element[0].type = "text";
                }

                var disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                } else {
                    that.readonly(element.is("[readonly]"));
                }
                that.value(that.options.value || element.val());
                if (!skipStyling) {
                    that._applyCssClasses();
                }

                if (options.label) {
                    that._label();
                }

                kendo.notify(that);
            },

            options: {
                name: "DateInput",
                culture: "",
                value: "",
                format: "",
                min: new Date(1900, 0, 1),
                max: new Date(2099, 11, 31),
                messages: {
                    "year": "year",
                    "month": "month",
                    "day": "day",
                    "weekday": "day of the week",
                    "hour": "hours",
                    "minute": "minutes",
                    "second": "seconds",
                    "dayperiod": "AM/PM"
                },
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            events: [
                CHANGE
            ],

            min: function(value) {
                if (value !== undefined$1) {
                    this.options.min = value;
                } else {
                    return this.options.min;
                }
            },

            max: function(value) {
                if (value !== undefined$1) {
                    this.options.max = value;
                } else {
                    return this.options.max;
                }
            },

            setOptions: function(options) {
                var that = this;
                Widget.fn.setOptions.call(that, options);
                this._unbindInput();
                this._bindInput();
                this._updateElementValue();

                if (options.label && that._inputLabel) {
                    that.label.setOptions(options.label);
                } else if (options.label === false) {
                    that.label._unwrapFloating();
                    that._inputLabel.remove();
                    delete that._inputLabel;
                } else if (options.label) {
                    that._label();
                }
            },

            destroy: function() {
                var that = this;
                that.element.off(ns);

                if (that._formElement) {
                    that._formElement.off("reset", that._resetHandler);
                }

                if (that.label) {
                    that.label.destroy();
                }

                Widget.fn.destroy.call(that);
            },

            value: function(value) {
                if (value === undefined$1) {
                    return this._dateTime.getDateObject();
                }

                if (value === null) {
                    value = "";
                }

                if (objectToString.call(value) !== "[object Date]") {
                    value = kendo.parseDate(value, this.options.format, this.options.culture);
                }

                if (value && !value.getTime()) {
                    value = null;
                }

                this._dateTime = new customDateTime(value, this.options.format, this.options.culture, this.options.messages);

                this._updateElementValue();
                this._oldValue = value;

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.refresh();
                }
            },

            _updateElementValue: function() {
                var stringAndFormat = this._dateTime.toPair(this.options.format, this.options.culture, this.options.messages);
                this.element.val(stringAndFormat[0]);
                this._oldText = stringAndFormat[0];
                this._format = stringAndFormat[1];
            },

            _toggleDateMask: function(toShow) {
                var that = this;

                if (toShow) {
                    that._updateElementValue();
                } else {
                    this.element.val("");
                }
            },

            _hasDateInput: function() {
                var emptyInput = (new customDateTime(null, this.options.format, this.options.culture, this.options.messages))
                                    .toPair(this.options.format, this.options.culture, this.options.messages)[0];
                var currentInput = this._dateTime.toPair(this.options.format, this.options.culture, this.options.messages)[0];

                return emptyInput !== currentInput;
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            _label: function() {
                var that = this;
                var options = that.options;
                var labelOptions = isPlainObject(options.label) ? options.label : {
                    content: options.label
                };

                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {
                    widget: that,
                    floatCheck: function () {
                        that._toggleDateMask(true);

                        if (!that.value() && !that._hasDateInput() && document.activeElement !== that.element[0]) {
                            that._toggleDateMask(false);
                            return true;
                        }

                        return false;
                    }
                }));

                that._inputLabel = that.label.element;
            },

            _bindInput: function() {
                var that = this;
                that.element
                    .on("focus" + ns, function() {
                        that.wrapper.addClass(FOCUSED);
                    })
                    .on("focusout" + ns, function() {
                        that.wrapper.removeClass(FOCUSED);
                        that._change();
                    })
                    .on("paste" + ns, that._paste.bind(that))
                    .on("keydown" + ns, that._keydown.bind(that))
                    .on(INPUT_EVENT_NAME, that._input.bind(that))
                    .on("mouseup" + ns, that._mouseUp.bind(that))
                    .on("DOMMouseScroll" + ns + " mousewheel" + ns, that._scroll.bind(that));
            },

            _unbindInput: function() {
                this.element
                    .off("keydown" + ns)
                    .off("paste" + ns)
                    .off("focus" + ns)
                    .off("focusout" + ns)
                    .off(INPUT_EVENT_NAME)
                    .off("mouseup" + ns)
                    .off("DOMMouseScroll" + ns + " mousewheel" + ns);
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var disable = options.disable;
                var readonly = options.readonly;
                var wrapper = that.wrapper;

                that._unbindInput();

                if (!readonly && !disable) {
                    wrapper.removeClass(STATEDISABLED);
                    if (element && element.length) {
                        element[0].removeAttribute(DISABLED);
                        element[0].removeAttribute(READONLY);
                    }

                    that._bindInput();
                } else {
                    if (disable) {
                        wrapper.addClass(STATEDISABLED);
                        element.attr(DISABLED, disable);
                        if (element && element.length) {
                            element[0].removeAttribute(READONLY);
                        }
                    }
                    if (readonly) {
                        element.attr(READONLY, readonly);
                    }
                }
            },

            _change: function() {
                var that = this;
                var oldValue = that._oldValue;
                var value = that.value();

                if (value && that.min() && value < that.min()) {
                    that.value(that.min());
                    value = that.value();
                }
                if (value && that.max() && value > that.max()) {
                    that.value(that.max());
                    value = that.value();
                }

                if (oldValue && value && value.getTime() !== oldValue.getTime() ||
                    oldValue && !value ||
                    !oldValue && value
                ) {
                    that._oldValue = value;
                    that.trigger(CHANGE);
                    that.element.trigger(CHANGE);
                }
            },

            _input: function() {
                var that = this;
                var element = that.element[0];
                var blinkInvalid = false;

                if (kendo._activeElement() !== element) {
                    return;
                }

                var diff = approximateStringMatching(
                    this._oldText,
                    this._format,
                    this.element[0].value,
                    caret(this.element[0])[0]);

                var navigationOnly = (diff.length === 1 && diff[0][1] === " ");
                if (!navigationOnly) {
                    for (var i = 0; i < diff.length; i++) {
                        var valid = this._dateTime.parsePart(diff[i][0], diff[i][1]);
                        blinkInvalid = blinkInvalid || !valid;
                    }
                }
                this._updateElementValue();

                if (diff.length && diff[0][0] !== " ") {
                    this._selectSegment(diff[0][0]);

                    //android fix
                    if (!navigationOnly) {
                        var difSym = diff[0][0];
                        setTimeout(function() { that._selectSegment(difSym); });
                    }
                }
                if (navigationOnly) {
                    var newEvent = { keyCode: 39, preventDefault: function() { } };
                    this._keydown(newEvent);
                }
                if (blinkInvalid) {
                    that._blinkInvalidState();
                }
            },

            _blinkInvalidState: function() {
                var that = this;

                that._addInvalidState();
                clearTimeout(that._invalidStateTimeout);
                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);
            },

            _addInvalidState: function() {
                var that = this;

                that.wrapper.addClass(STATEINVALID);
                that._validationIcon.removeClass("k-hidden");
            },

            _removeInvalidState: function() {
                var that = this;

                that.wrapper.removeClass(STATEINVALID);
                that._validationIcon.addClass("k-hidden");
                that._invalidStateTimeout = null;
            },

            _mouseUp: function() {
                var selection = caret(this.element[0]);
                if (selection[0] === selection[1]) {
                    this._selectNearestSegment();
                }
            },

            _scroll: function(e) {
                if (kendo._activeElement() !== this.element[0] || this.element.is("[readonly]")) {
                    return;
                }
                e = window.event || e;

                var newEvent = { keyCode: 37, preventDefault: function() { } };

                if (e.shiftKey) {
                    newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 37 : 39;
                } else {
                    newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 38 : 40;
                }
                this._keydown(newEvent);
                e.returnValue = false;
                if (e.preventDefault) {
                    e.preventDefault();
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            },

            _form: function() {
                var that = this;
                var element = that.element;
                var formId = element.attr("form");
                var form = formId ? $("#" + formId) : element.closest("form");
                var initialValue = element[0].value;

                if (!initialValue && that.options.value) {
                    initialValue = that.options.value;
                }

                if (form[0]) {
                    that._resetHandler = function() {
                        setTimeout(function() {
                            that.value(initialValue);
                        });
                    };

                    that._formElement = form.on("reset", that._resetHandler);
                }
            },

            _paste: function(e) {
                e.preventDefault();
            },

            _keydown: function(e) {
                var key = e.keyCode;
                var selection;
                if (key == 37 || key == 39) { //left/right
                    e.preventDefault();
                    selection = caret(this.element[0]);
                    if (selection[0] != selection[1]) {
                        this._selectNearestSegment();
                    }
                    var dir = (key == 37) ? -1 : 1;
                    var index = (dir == -1) ? caret(this.element[0])[0] - 1 : caret(this.element[0])[1] + 1;
                    while (index >= 0 && index < this._format.length) {
                        if (knownSymbols.indexOf(this._format[index]) >= 0) {
                            this._selectSegment(this._format[index]);
                            break;
                        }
                        index += dir;
                    }
                }
                if (key == 38 || key == 40) { //up/down
                    e.preventDefault();
                    selection = caret(this.element[0]);
                    var symbol = this._format[selection[0]];
                    if (knownSymbols.indexOf(symbol) >= 0) {
                        var interval = 1;
                        if (symbol == 'm') {
                            interval = this.options.interval || 1;
                        }
                        this._dateTime.modifyPart(symbol, key == 38 ? interval * 1 : interval * -1);
                        this._updateElementValue();
                        this._selectSegment(symbol);
                        this.element.trigger(CHANGE);
                    }
                }
                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
                    var keycode = e.keyCode ? e.keyCode : e.which;
                    if (keycode === 8 || keycode === 46) {
                        var that = this;
                        setTimeout(function() {
                            that._input();
                        }, 0);
                    }
                }
                if (key === keys.ENTER) {
                    this._change();
                }
            },

            _selectNearestSegment: function() {
                var selection = caret(this.element[0]);
                var start = selection[0];
                for (var i = start, j = start - 1; i < this._format.length || j >= 0; i++ , j--) {
                    if (i < this._format.length && knownSymbols.indexOf(this._format[i]) !== -1) {
                        this._selectSegment(this._format[i]);
                        return;
                    }
                    if (j >= 0 && knownSymbols.indexOf(this._format[j]) !== -1) {
                        this._selectSegment(this._format[j]);
                        return;
                    }
                }
            },

            _selectSegment: function(symbol) {
                var begin = -1, end = 0;
                for (var i = 0; i < this._format.length; i++) {
                    if (this._format[i] === symbol) {
                        end = i + 1;
                        if (begin === -1) {
                            begin = i;
                        }
                    }
                }
                if (begin < 0) {
                    begin = 0;
                }
                caret(this.element, begin, end);
            }

        });

        kendo.cssProperties.registerPrefix("DateInput", "k-input-");

        kendo.cssProperties.registerValues("DateInput", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(DateInput);

        var customDateTime = function(initDate, initFormat, initCulture, initMessages) {

            var value = null;
            var year = true, month = true, date = true, hours = true, minutes = true, seconds = true, milliseconds = true;
            var typedMonthPart = "";
            var typedDayPeriodPart = "";
            var placeholders = {};

            //TODO: rewrite pad method
            var zeros = ["", "0", "00", "000", "0000"];
            function pad(number, digits, end) {
                number = number + "";
                digits = digits || 2;
                end = digits - number.length;

                if (end) {
                    return zeros[digits].substring(0, end) + number;
                }

                return number;
            }
            var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g;
            var months = null, calendar = null, days = null, returnsFormat = false;
            var matcher = function(match) {
                var mins, sign;
                var result;

                switch (match) {
                    case ("d"): result = date ? value.getDate() : placeholders.day; break;
                    case ("dd"): result = date ? pad(value.getDate()) : placeholders.day; break;
                    case ("ddd"): result = date && month && year ? days.namesAbbr[value.getDay()] : placeholders.weekday; break;
                    case ("dddd"): result = date && month && year ? days.names[value.getDay()] : placeholders.weekday; break;

                    case ("M"): result = month ? value.getMonth() + 1 : placeholders.month; break;
                    case ("MM"): result = month ? pad(value.getMonth() + 1) : placeholders.month; break;
                    case ("MMM"): result = month ? months.namesAbbr[value.getMonth()] : placeholders.month; break;
                    case ("MMMM"): result = month ? months.names[value.getMonth()] : placeholders.month; break;

                    case ("yy"): result = year ? pad(value.getFullYear() % 100) : placeholders.year; break;
                    case ("yyyy"): result = year ? pad(value.getFullYear(), 4) : placeholders.year; break;

                    case ("h"): result = hours ? value.getHours() % 12 || 12 : placeholders.hour; break;
                    case ("hh"): result = hours ? pad(value.getHours() % 12 || 12) : placeholders.hour; break;
                    case ("H"): result = hours ? value.getHours() : placeholders.hour; break;
                    case ("HH"): result = hours ? pad(value.getHours()) : placeholders.hour; break;

                    case ("m"): result = minutes ? value.getMinutes() : placeholders.minute; break;
                    case ("mm"): result = minutes ? pad(value.getMinutes()) : placeholders.minute; break;
                    case ("s"): result = seconds ? value.getSeconds() : placeholders.second; break;
                    case ("ss"): result = seconds ? pad(value.getSeconds()) : placeholders.second; break;
                    case ("f"): result = milliseconds ? Math.floor(value.getMilliseconds() / 100) : milliseconds; break;
                    case ("ff"):
                        result = value.getMilliseconds();
                        if (result > 99) {
                            result = Math.floor(result / 10);
                        }
                        result = milliseconds ? pad(result) : match;
                        break;
                    case ("fff"): result = milliseconds ? pad(value.getMilliseconds(), 3) : match; break;
                    case ("tt"): result = hours ? (value.getHours() < 12 ? calendar.AM[0] : calendar.PM[0]) : placeholders.dayperiod; break;
                    case ("zzz"):
                        mins = value.getTimezoneOffset();
                        sign = mins < 0;
                        result = Math.abs(mins / 60).toString().split(".")[0];
                        mins = Math.abs(mins) - (result * 60);
                        result = (sign ? "+" : "-") + pad(result);
                        result += ":" + pad(mins);
                        break;
                    case ("z"):
                    case ("zz"):
                        result = value.getTimezoneOffset() / 60;
                        sign = result < 0;
                        result = Math.abs(result).toString().split(".")[0];
                        result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
                        break;
                }
                result = (result !== undefined$1 ? result : match.slice(1, match.length - 1));

                if (returnsFormat) {
                    result = "" + result;
                    var formatResult = "";
                    if (match == "ddd") { match = "EEE"; }
                    if (match == "dddd") { match = "EEEE"; }
                    for (var i = 0; i < result.length; i++) {
                        formatResult += match[0];
                    }
                    return formatResult;
                } else {
                    return result;
                }
            };

            function generateMatcher(retFormat) {
                returnsFormat = retFormat;
                return matcher;
            }

            function setExisting(symbol, val) {
                switch (symbol) {
                    case "y": year = val; break;
                    case "M": month = val;
                        if (!val) {
                            value.setMonth(0);
                            typedMonthPart = "";
                        }
                        break;
                    case "d": date = val; break;
                    case "H":
                    case "h": hours = val;
                        if (!val) {
                            typedDayPeriodPart = "";
                        }
                        break;
                    case "m": minutes = val; break;
                    case "s": seconds = val; break;
                    default: return;
                }
            }

            this.setValue = function(val) {
                date = val;
            };

            this.getValue = function() {
                return date;
            };

            this.modifyPart = function(symbol, offset) {
                var newValue = new Date((value && value.getTime) ? value.getTime() : value);
                switch (symbol) {
                    case "y": newValue.setFullYear(newValue.getFullYear() + offset); break;
                    case "M":
                        var newMonth = newValue.getMonth() + offset;
                        newValue.setMonth(newMonth);
                        if (newValue.getMonth() % 12 !== (newMonth + 12) % 12) {
                            //handle case when new month does not have such date
                            newValue.setDate(1);
                            newValue.setMonth(newMonth);
                        }
                        break;
                    case "d":
                    case "E": newValue.setDate(newValue.getDate() + offset); break;
                    case "H":
                    case "h": newValue.setHours(newValue.getHours() + offset); break;
                    case "m": newValue.setMinutes(newValue.getMinutes() + offset); break;
                    case "s": newValue.setSeconds(newValue.getSeconds() + offset); break;
                    case "t": newValue.setHours((newValue.getHours() + 12) % 24); break;
                    default: break;
                }
                if (newValue.getFullYear() > 0) {
                    setExisting(symbol, true);
                    value = newValue;
                }
            };

            this.parsePart = function(symbol, currentChar) {
                if (!currentChar) {
                    setExisting(symbol, false);
                    return true;
                }
                var newValue = new Date((value && value.getTime) ? value.getTime() : value);
                var lastDateOfMonth = new Date(newValue.getFullYear(), newValue.getMonth() + 1, 0).getDate();
                var newHours;
                switch (symbol) {
                    case "d":
                        var newDate = (date ? newValue.getDate() * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newDate)) { return; }
                        while (newDate > lastDateOfMonth) {
                            newDate = parseInt(newDate.toString().slice(1), 10);
                        }
                        if (newDate < 1) {
                            date = false;
                        } else {
                            newValue.setDate(newDate);
                            if (newValue.getMonth() !== value.getMonth()) {
                                return;
                            }
                            date = true;
                        }
                        break;
                    case "M":
                        var newMonth = (month ? (newValue.getMonth() + 1) * 10 : 0) + parseInt(currentChar, 10);
                        if (!isNaN(newMonth)) {
                            while (newMonth > 12) {
                                newMonth = parseInt(newMonth.toString().slice(1), 10);
                            }
                            if (newMonth < 1) {
                                month = false;
                            } else {
                                newValue.setMonth(newMonth - 1);
                                if (newValue.getMonth() !== newMonth - 1) {
                                    newValue.setDate(1);
                                    newValue.setMonth(newMonth - 1);
                                }
                                month = true;
                            }
                        }
                        else {
                            var monthNames = calendar.months.names;
                            typedMonthPart += currentChar.toLowerCase();

                            while (typedMonthPart.length > 0) {
                                for (var i = 0; i < monthNames.length; i++) {
                                    if (monthNames[i].toLowerCase().indexOf(typedMonthPart) === 0) {
                                        newValue.setMonth(i);
                                        month = true;
                                        value = newValue;
                                        return true;
                                    }
                                }
                                typedMonthPart = typedMonthPart.substring(1, typedMonthPart.length);
                            }
                            return false;
                        }
                        break;
                    case "y":
                        var newYear = (year ? (newValue.getFullYear()) * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newYear)) {return;}
                        while (newYear > 9999) {
                            newYear = parseInt(newYear.toString().slice(1), 10);
                        }
                        if (newYear < 1) {
                            year = false;
                        } else {
                            newValue.setFullYear(newYear);
                            year = true;
                        }
                        break;
                    case "h":
                        newHours = (hours ? (newValue.getHours() % 12 || 12) * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newHours)) { return; }
                        while (newHours > 12) {
                            newHours = parseInt(newHours.toString().slice(1), 10);
                        }
                        newValue.setHours(Math.floor(newValue.getHours() / 12) * 12 + newHours % 12);
                        hours = true;
                        break;
                    case "H":
                        newHours = (hours ? (newValue.getHours()) * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newHours)) { return; }
                        while (newHours > 23) {
                            newHours = parseInt(newHours.toString().slice(1), 10);
                        }
                        newValue.setHours(newHours);
                        hours = true;
                        break;
                    case "m":
                        var newMinutes = (minutes ? (newValue.getMinutes()) * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newMinutes)) { return; }
                        while (newMinutes > 59) {
                            newMinutes = parseInt(newMinutes.toString().slice(1), 10);
                        }
                        newValue.setMinutes(newMinutes);
                        minutes = true;
                        break;
                    case "s":
                        var newSeconds = (seconds ? (newValue.getSeconds()) * 10 : 0) + parseInt(currentChar, 10);
                        if (isNaN(newSeconds)) { return; }
                        while (newSeconds > 59) {
                            newSeconds = parseInt(newSeconds.toString().slice(1), 10);
                        }
                        newValue.setSeconds(newSeconds);
                        seconds = true;
                        break;
                    case "t":
                        if (hours) {
                            typedDayPeriodPart += currentChar.toLowerCase();
                            while (typedDayPeriodPart.length > 0) {
                                if (calendar.AM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() >= 12 ||
                                    calendar.PM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() < 12) {
                                    newValue.setHours((newValue.getHours() + 12) % 24);
                                    value = newValue;
                                    return true;
                                }
                                typedDayPeriodPart = typedDayPeriodPart.substring(1, typedDayPeriodPart.length);
                            }
                            return false;
                        }
                        break;
                    default: break;
                }
                value = newValue;
                return true;
            };

            this.toPair = function(format, culture , messages) {
                if (!format) {
                    return ["", ""];
                }
                culture = kendo.getCulture(culture);
                calendar = culture.calendars.standard;
                format = calendar.patterns[format] || format;
                days = calendar.days;
                months = calendar.months;
                placeholders = messages;
                return [
                    format.replace(dateFormatRegExp, generateMatcher(false)),
                    format.replace(dateFormatRegExp, generateMatcher(true))
                ];
            };

            this.getDateObject = function() {
                return (year && month && date && hours && minutes && seconds && milliseconds) ?
                    new Date(value.getTime()) : null;
            };

            if (!initDate) {
                value = new Date();
                var sampleFormat = this.toPair(initFormat, initCulture, initMessages)[1];
                for (var i = 0; i < sampleFormat.length; i++) {
                    setExisting(sampleFormat[i], false);
                }
            } else {
                value = new Date(initDate.getTime());
            }
        };

        function approximateStringMatching(oldText, oldFormat, newText, caret) {
            var oldTextSeparator = oldText[caret + oldText.length - newText.length];
            oldText = oldText.substring(0, caret + oldText.length - newText.length);
            newText = newText.substring(0, caret);
            var diff = [];
            var i;
            //handle typing single character over the same selection
            if (oldText === newText && caret > 0) {
                diff.push([oldFormat[caret - 1], newText[caret - 1]]);
                return diff;
            }
            if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
                //handle delete/backspace
                var deletedSymbol = "";
                for (i = newText.length; i < oldText.length; i++) {
                    if (oldFormat[i] !== deletedSymbol && knownSymbols.indexOf(oldFormat[i]) >= 0) {
                        deletedSymbol = oldFormat[i];
                        diff.push([deletedSymbol, ""]);
                    }
                }
                return diff;
            }

            //handle entering space or separator, for nagivation to next item
            if (newText[newText.length - 1] === " " || newText[newText.length - 1] === oldTextSeparator) {
                return [[oldFormat[caret - 1], " "]];
            }

            //handle inserting text (new text is longer than previous)
            //handle typing over literal as well
            if (newText.indexOf(oldText) === 0 || knownSymbols.indexOf(oldFormat[caret - 1]) === -1) {
                var symbol = oldFormat[0];
                for (i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
                    if (knownSymbols.indexOf(oldFormat[i]) >= 0) {
                        symbol = oldFormat[i];
                        break;
                    }
                }
                return [[symbol, newText[caret - 1]]];
            }
            //handle typing over correctly selected part
            return [[oldFormat[caret - 1], newText[caret - 1]]];
    }

    })(window.kendo.jQuery);

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$s = {
        id: "datepicker",
        name: "DatePicker",
        category: "web",
        description: "The DatePicker widget allows the user to select a date from a calendar or by direct input.",
        depends: [ "calendar", "popup", "html.button", "label" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
        ui = kendo.ui,
        html = kendo.html,
        Widget = ui.Widget,
        parse = kendo.parseDate,
        keys = kendo.keys,
        support = kendo.support,
        template = kendo.template,
        activeElement = kendo._activeElement,
        DIV = "<div />",
        SPAN = "<span />",
        ns = ".kendoDatePicker",
        CLICK = "click" + ns,
        UP = support.mouseAndTouchPresent ? kendo.applyEventMap("up", ns.slice(1)) : CLICK,
        OPEN = "open",
        CLOSE = "close",
        CHANGE = "change",
        DISABLED = "disabled",
        READONLY = "readonly",
        FOCUSED = "k-focus",
        SELECTED = "k-selected",
        STATEDISABLED = "k-disabled",
        HOVER = "k-hover",
        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
        MOUSEDOWN = "mousedown" + ns,
        NAVIGATE = "navigate",
        ID = "id",
        MIN = "min",
        MAX = "max",
        MONTH = "month",
        ARIA_DISABLED = "aria-disabled",
        ARIA_READONLY = "aria-readonly",
        ARIA_EXPANDED = "aria-expanded",
        ARIA_HIDDEN = "aria-hidden",
        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
        calendar = kendo.calendar,
        isInRange = calendar.isInRange,
        restrictValue = calendar.restrictValue,
        isEqualDatePart = calendar.isEqualDatePart,
        extend = $.extend,
        DATE = Date;

        function normalize(options) {
            var parseFormats = options.parseFormats,
                format = options.format;

            calendar.normalize(options);

            parseFormats = Array.isArray(parseFormats) ? parseFormats : [parseFormats];

            if (!parseFormats.length) {
                parseFormats.push("yyyy-MM-dd");
            }

            if ($.inArray(format, parseFormats) === -1) {
                parseFormats.splice(0, 0, options.format);
            }

            options.parseFormats = parseFormats;
        }

        function preventDefault(e) {
            e.preventDefault();
        }

        var DateView = function(options) {
            var that = this, id,
                body = document.body,
                div = $(DIV).attr(ARIA_HIDDEN, "true")
                            .addClass("k-calendar-container");

            that.options = options = options || {};
            id = options.id;

            if (!options.omitPopup) {
                div.appendTo(body);
                that.popup = new ui.Popup(div, extend(options.popup, options, { name: "Popup", isRtl: kendo.support.isRtl(options.anchor) }));
            } else {
                div = options.dateDiv;
            }
            if (id) {
                id += "_dateview";

                div.attr(ID, id);
                that._dateViewID = id;
            }
            that.div = div;

            that.value(options.value);
        };

        DateView.prototype = {
            _calendar: function() {
                var that = this;
                var calendar = that.calendar;
                var options = that.options;
                var div;

                if (!calendar) {
                    div = $(DIV).attr(ID, kendo.guid())
                                .appendTo(options.omitPopup ? options.dateDiv : that.popup.element)
                                .on(MOUSEDOWN, preventDefault)
                                .on(CLICK, "td:has(.k-link)", that._click.bind(that));

                    that.calendar = calendar = new ui.Calendar(div, {
                        componentType: options.componentType,
                        size: options.size,
                        messages: options.messages
                    });
                    that._setOptions(options);

                    div.addClass(kendo.getValidCssClass("k-calendar-", "size", options.size));

                    calendar.navigate(that._value || that._current, options.start);

                    that.value(that._value);
                }
            },

            _setOptions: function(options) {
                this.calendar.setOptions({
                    focusOnNav: false,
                    change: options.change,
                    culture: options.culture,
                    dates: options.dates,
                    depth: options.depth,
                    footer: options.footer,
                    format: options.format,
                    max: options.max,
                    min: options.min,
                    month: options.month,
                    weekNumber: options.weekNumber,
                    start: options.start,
                    messages: options.messages,
                    disableDates: options.disableDates
                });
            },

            setOptions: function(options) {
                var that = this;
                var old = that.options;
                var disableDates = options.disableDates;

                if (disableDates) {
                    options.disableDates = calendar.disabled(disableDates);
                }

                that.options = extend(old, options, {
                    change: old.change,
                    close: old.close,
                    open: old.open
                });

                if (that.calendar) {
                    that._setOptions(that.options);
                }
            },

            destroy: function() {
                if (this.popup) {
                    this.popup.destroy();
                }
            },

            open: function() {
                var that = this;
                var popupHovered;

                that._calendar();

                // In some cases when the popup is opened resize is triggered which will cause it to close
                // Setting the below flag will prevent this from happening
                // Reference: https://github.com/telerik/kendo/pull/7553
                popupHovered = that.popup._hovered;
                that.popup._hovered = true;

                that.popup.open();

                setTimeout(function() {
                    that.popup._hovered = popupHovered;
                }, 1);
            },

            close: function() {
                if (this.popup) {
                    this.popup.close();
                }
            },

            min: function(value) {
                this._option(MIN, value);
            },

            max: function(value) {
                this._option(MAX, value);
            },

            toggle: function() {
                var that = this;

                that[that.popup.visible() ? CLOSE : OPEN]();
            },

            move: function(e) {
                var that = this,
                    key = e.keyCode,
                    calendar = that.calendar,
                    selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER,
                    handled = false;

                if (e.altKey) {
                    if (key == keys.DOWN) {
                        that.open();
                        e.preventDefault();
                        handled = true;
                    } else if (key == keys.UP) {
                        that.close();
                        e.preventDefault();
                        handled = true;
                    }

                } else if (that.popup && that.popup.visible()) {

                    if (key == keys.ESC || (selectIsClicked && calendar._cell.hasClass(SELECTED))) {
                        that.close();
                        e.preventDefault();
                        return true;
                    }
                    //spacebar selects a date in the calendar
                    if (key != keys.SPACEBAR) {
                        that._current = calendar._move(e);
                    }

                    handled = true;
                }

                return handled;
            },

            current: function(date) {
                this._current = date;
                if (this.calendar) {
                    this.calendar._focus(date);
                }
            },

            value: function(value) {
                var that = this,
                    calendar = that.calendar,
                    options = that.options,
                    disabledDate = options.disableDates;

                if (disabledDate && disabledDate(value)) {
                    value = null;
                }

                that._value = value;
                that._current = new DATE(+restrictValue(value, options.min, options.max));

                if (calendar) {
                    calendar.value(value);
                }
            },

            _click: function(e) {

                if (e.currentTarget.className.indexOf(SELECTED) !== -1) {
                    this.calendar.trigger("change");
                    this.close();
                }
            },

            _option: function(option, value) {
                var that = this;
                var calendar = that.calendar;

                that.options[option] = value;

                if (calendar) {
                    calendar[option](value);
                }
            }
        };

        DateView.normalize = normalize;

        kendo.DateView = DateView;

        var DatePicker = Widget.extend({
            init: function(element, options) {
                var that = this,
                    initialValue,
                    disabled,
                    div;

                Widget.fn.init.call(that, element, options);
                element = that.element;
                options = that.options;

                options.disableDates = kendo.calendar.disabled(options.disableDates);

                options.min = parse(element.attr("min")) || parse(options.min);
                options.max = parse(element.attr("max")) || parse(options.max);

                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr("readonly"));
                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(element.is("[disabled]") || $(element).parents("fieldset").is(':disabled')));

                normalize(options);

                that._initialOptions = extend({}, options);

                that._wrapper();

                that.dateView = new DateView(extend({}, options, {
                    id: element.attr(ID),
                    anchor: that.wrapper,
                    change: function() {
                        // calendar is the current scope
                        that._change(this.value());
                        that.close();
                    },
                    close: function(e) {
                        if (that.trigger(CLOSE)) {
                            e.preventDefault();
                        } else {
                            element.attr(ARIA_EXPANDED, false);
                            div.attr(ARIA_HIDDEN, true);

                            setTimeout(function() {
                                element.removeAttr("aria-activedescendant");
                            });
                        }
                    },
                    open: function(e) {
                        var options = that.options,
                            date;

                        if (that.trigger(OPEN)) {
                            e.preventDefault();
                        } else {
                            if (that.element.val() !== that._oldText) {
                                date = parse(element.val(), options.parseFormats, options.culture);

                                that.dateView[date ? "current" : "value"](date);
                            }

                            element.attr(ARIA_EXPANDED, true);
                            div.attr(ARIA_HIDDEN, false);

                            that._updateARIA(date);

                        }
                    }
                }));

                div = that.dateView.div;

                that._icon();

                try {
                    element[0].setAttribute("type", "text");
                } catch (e) {
                    element[0].type = "text";
                }

                element
                    .addClass("k-input-inner")
                    .attr({
                        role: "combobox",
                        "aria-expanded": false,
                        "aria-haspopup": "grid",
                        "aria-controls": that.dateView._dateViewID,
                        "autocomplete": "off"
                    });
                that._reset();
                that._template();

                disabled = !that.options.enable;
                if (disabled) {
                    that.enable(false);
                } else {
                    that.readonly(element.is("[readonly]"));
                }

                initialValue = parse(options.value || that.element.val(), options.parseFormats, options.culture);

                that._createDateInput(options);

                that._old = that._update(initialValue || that.element.val());
                that._oldText = element.val();
                that._applyCssClasses();

                if (options.label) {
                    that._label();
                }

                kendo.notify(that);
            },
            events: [
            OPEN,
            CLOSE,
            CHANGE],
            options: {
                name: "DatePicker",
                value: null,
                footer: "",
                format: "",
                culture: "",
                parseFormats: [],
                min: new Date(1900, 0, 1),
                max: new Date(2099, 11, 31),
                start: MONTH,
                depth: MONTH,
                animation: {},
                month: {},
                dates: [],
                disableDates: null,
                ARIATemplate: function (ref) {
                    var valueType = ref.valueType;
                    var text = ref.text;

                    return ("Current focused " + valueType + " is " + text);
        },
                dateInput: false,
                weekNumber: false,
                messages: {
                    weekColumnHeader: ""
                },
                componentType: "classic",
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            setOptions: function(options) {
                var that = this;
                var value = that._value;

                Widget.fn.setOptions.call(that, options);

                options = that.options;

                options.min = parse(options.min);
                options.max = parse(options.max);

                normalize(options);

                that._dateIcon.off(ns);
                that._dateIcon.remove();

                that.dateView.setOptions(options);
                that._icon();
                that._editable({
                    readonly: options.readonly === undefined$1 ? that.options.readonly : options.readonly,
                    disable: !(options.enable === undefined$1 ? that.options.enable : options.enable)
                });

                that._createDateInput(options);

                if (!that._dateInput) {
                    that.element.val(kendo.toString(value, options.format, options.culture));
                }

                if (value) {
                    that._updateARIA(value);
                }

                if (options.label && that._inputLabel) {
                    that.label.setOptions(options.label);
                } else if (options.label === false) {
                    that.label._unwrapFloating();
                    that._inputLabel.remove();
                    delete that._inputLabel;
                } else if (options.label) {
                    that._label();
                }
            },

            _editable: function(options) {
                var that = this,
                    icon = that._dateIcon.off(ns),
                    element = that.element.off(ns),
                    wrapper = that.wrapper.off(ns),
                    readonly = options.readonly,
                    disable = options.disable;

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);
                    if (element && element.length) {
                        element[0].removeAttribute(DISABLED);
                        element[0].removeAttribute(READONLY);
                    }
                    element.attr(ARIA_DISABLED, false)
                           .attr(ARIA_READONLY, false)
                           .on("keydown" + ns, that._keydown.bind(that))
                           .on("focusout" + ns, that._blur.bind(that))
                           .on("focus" + ns, function() {
                               that.wrapper.addClass(FOCUSED);
                           });

                   icon.on(UP, that._click.bind(that))
                       .on(MOUSEDOWN, preventDefault);
                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable)
                           .attr(ARIA_READONLY, readonly);
                }
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });
                if (this._dateInput) {
                    this._dateInput._editable({
                        readonly: readonly === undefined$1 ? true : readonly,
                        disable: false
                    });
                }

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });
                if (this._dateInput) {
                    this._dateInput._editable({
                        readonly: false,
                        disable: !(enable = enable === undefined$1 ? true : enable)
                    });
                }

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            _label: function() {
                var that = this;
                var options = that.options;
                var labelOptions = $.isPlainObject(options.label) ? options.label : {
                    content: options.label
                };

                if (that._dateInput) {
                    labelOptions.floatCheck = function () {
                        that._dateInput._toggleDateMask(true);

                        if (!that.value() && !that._dateInput._hasDateInput() && document.activeElement !== that.element[0]) {
                            that._dateInput._toggleDateMask(false);
                            return true;
                        }

                        return false;
                    };
                }

                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {
                    widget: that
                }));

                that._inputLabel = that.label.element;
            },

            destroy: function() {
                var that = this;

                if (that.label) {
                    that.label.destroy();
                }

                Widget.fn.destroy.call(that);

                if (that.dateView.calendar && that._navigateCalendarHandler) {
                    that.dateView.calendar.unbind(NAVIGATE, that._navigateCalendarHandler);
                    that._navigateCalendarHandler = null;
                }

                that.dateView.destroy();

                that.element.off(ns);
                that._dateIcon.off(ns);

                if (that._form) {
                    that._form.off("reset", that._resetHandler);
                }
            },

            open: function() {
                this.dateView.open();
                this._navigateCalendar();
            },

            close: function() {
                this.dateView.close();
            },

            min: function(value) {
                return this._option(MIN, value);
            },

            max: function(value) {
                return this._option(MAX, value);
            },

            value: function(value) {
                var that = this;

                if (value === undefined$1) {
                    return that._value;
                }

                that._old = that._update(value);

                if (that._old === null) {
                    if (that._dateInput) {
                        that._dateInput.value(that._old);
                    } else {
                        that.element.val("");
                    }
                }

                that._oldText = that.element.val();

                if (that.label && that.label.floatingLabel) {
                    that.label.floatingLabel.refresh();
                }
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            },

            _blur: function() {
                var that = this,
                    value = that.element.val();

                that.close();
                if (value !== that._oldText) {
                    that._change(value);
                    if (!value) {
                        that.dateView.current(kendo.calendar.getToday());
                    }
                }

                that.wrapper.removeClass(FOCUSED);
            },

            _click: function(e) {
                var that = this;

                that.dateView.toggle();
                that._navigateCalendar();
                that._focusElement(e.type);
            },

            _focusElement: function(eventType) {
                var element = this.element;

                if ((!support.touch || (support.mouseAndTouchPresent && !(eventType || "").match(/touch/i))) && element[0] !== activeElement()) {
                    element.trigger("focus");
                }
            },

            _change: function(value) {
                var that = this,
                oldValue = that.element.val(),
                dateChanged;

                value = that._update(value);
                dateChanged = !kendo.calendar.isEqualDate(that._old, value);

                var valueUpdated = dateChanged && !that._typing;
                var textFormatted = oldValue !== that.element.val();

                if (valueUpdated || textFormatted) {
                    that.element.trigger(CHANGE);
                }

                if (dateChanged) {
                    that._old = value;
                    that._oldText = that.element.val();

                    that.trigger(CHANGE);
                }

                that._typing = false;
            },

            _keydown: function(e) {
                var that = this,
                    dateView = that.dateView,
                    value = that.element.val(),
                    handled = false;

                if (!dateView.popup.visible() && e.keyCode == keys.ENTER && value !== that._oldText) {
                    that._change(value);
                } else {
                    handled = dateView.move(e);
                    that._updateARIA(dateView._current);

                    if (!handled) {
                        that._typing = true;
                    } else if (that._dateInput && e.stopImmediatePropagation) {
                        e.stopImmediatePropagation();
                    }
                }
            },

            _icon: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    icon;

                icon = element.next("button.k-input-button");

                if (!icon[0]) {
                    icon = $(html.renderButton('<button aria-label="select" tabindex="-1" class="k-input-button k-button k-icon-button"></button>', {
                        icon: "calendar",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none"
                    })).insertAfter(element);
                }

                that._dateIcon = icon.attr({
                    "role": "button"
                });
            },

            _setCalendarAttribute: function() {
                var that = this;
                setTimeout(function() {
                    that.element.attr(ARIA_ACTIVEDESCENDANT, that.dateView.calendar._table.attr(ARIA_ACTIVEDESCENDANT));
                });
            },

            _navigateCalendar: function() {
                var that = this;

                if (!that._navigateCalendarHandler) {
                    that._navigateCalendarHandler = that._setCalendarAttribute.bind(that);
                }

                if (!!that.dateView.calendar) {
                    that.dateView.calendar.unbind(NAVIGATE, that._navigateCalendarHandler).bind(NAVIGATE, that._navigateCalendarHandler);
                }
            },

            _option: function(option, value) {
                var that = this,
                    options = that.options;

                if (value === undefined$1) {
                    return options[option];
                }

                value = parse(value, options.parseFormats, options.culture);

                if (!value) {
                    return;
                }

                options[option] = new DATE(+value);
                that.dateView[option](value);
            },

            _update: function(value) {
                var that = this,
                    options = that.options,
                    min = options.min,
                    max = options.max,
                    current = that._value,
                    date = parse(value, options.parseFormats, options.culture),
                    isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
                    formattedValue;

                if (options.disableDates(date)) {
                    date = null;
                    if (!that._old && !that.element.val()) {
                        value = null;
                    }
                }

                if (+date === +current && isSameType) {
                    formattedValue = kendo.toString(date, options.format, options.culture);

                    if (formattedValue !== value && !(that._dateInput && !date)) {
                        that.element.val(date === null ? value : formattedValue);
                    }

                    return date;
                }

                if (date !== null && isEqualDatePart(date, min)) {
                    date = restrictValue(date, min, max);
                } else if (!isInRange(date, min, max)) {
                    date = null;
                }

                that._value = date;
                that.dateView.value(date);
                if (that._dateInput && date) {
                    that._dateInput.value(date || value);
                } else {
                    that.element.val(kendo.toString(date || value, options.format, options.culture));
                }
                that._updateARIA(date);

                return date;
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    wrapper;

                wrapper = element.parents(".k-datepicker");

                if (!wrapper[0]) {
                    wrapper = element.wrap(SPAN).parent();
                }

                wrapper[0].style.cssText = element[0].style.cssText;
                element.css({
                    height: element[0].style.height
                });

                that.wrapper = wrapper.addClass("k-datepicker k-input")
                    .addClass(element[0].className).removeClass('input-validation-error');
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    options = that.options,
                    disabledDate = options.disableDates,
                    parseFormats = options.parseFormats.length ? options.parseFormats : null,
                    optionsValue = that._initialOptions.value,
                    form = formId ? $("#" + formId) : element.closest("form"),
                    initialValue = element[0].defaultValue;

                if (optionsValue && (disabledDate && disabledDate(optionsValue))) {
                    optionsValue = null;
                }

                if ((!initialValue || !kendo.parseDate(initialValue, parseFormats, options.culture)) && optionsValue) {
                    element.attr("value", kendo.toString(optionsValue, options.format, options.culture));
                }

                if (form[0]) {
                    that._resetHandler = function() {
                        that.value(optionsValue || element[0].defaultValue);
                        that.max(that._initialOptions.max);
                        that.min(that._initialOptions.min);
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            },

            _template: function() {
                this._ariaTemplate = template(this.options.ARIATemplate).bind(this);
            },

            _createDateInput: function(options) {
                if (this._dateInput) {
                    this._dateInput.destroy();
                    this._dateInput = null;
                }

                if (options.dateInput ) {
                    this._dateInput = new ui.DateInput(this.element, {
                        culture: options.culture,
                        format: options.format,
                        size: options.size,
                        fillMode: options.fillMode,
                        rounded: options.rounded,
                        min: options.min,
                        max: options.max,
                        messages: options.messages.dateInput
                    });
                }
            },

            _updateARIA: function(date) {
                var that = this;
                var calendar = that.dateView.calendar;

                if (that.element && that.element.length) {
                    that.element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);
                }

                if (calendar) {
                    that.element.attr(ARIA_ACTIVEDESCENDANT, calendar._updateAria(that._ariaTemplate, date));
                }
            }
        });

        kendo.cssProperties.registerPrefix("DatePicker", "k-input-");

        kendo.cssProperties.registerValues("DatePicker", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(DatePicker);

    })(window.kendo.jQuery);

    var __meta__$r = {
        id: "virtuallist",
        name: "VirtualList",
        category: "framework",
        depends: [ "data" ],
        hidden: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            encode = kendo.htmlEncode,
            Widget = ui.Widget,
            DataBoundWidget = ui.DataBoundWidget,
            percentageUnitsRegex = /^\d+(\.\d+)?%$/i,
            LIST_CONTENT = "k-list-content k-virtual-content",
            TABLE_CONTENT = "k-table-body k-table-scroller",
            HEADER = "k-list-group-sticky-header",
            LIST_ITEM = "k-list-item",
            TABLE_ITEM = "k-table-row",
            HEIGHTCONTAINER = "k-height-container",
            GROUPITEM = "k-list-item-group-label",
            LIST_UL = "k-list-ul",
            TABLE_LIST = "k-table-list",

            SELECTED = "k-selected",
            FOCUSED = "k-focus",
            HOVER = "k-hover",
            CHANGE = "change",
            CLICK = "click",
            LISTBOUND = "listBound",
            ITEMCHANGE = "itemChange",

            ACTIVATE = "activate",
            DEACTIVATE = "deactivate",

            GROUP_ROW_SEL = ".k-table-group-row",

            VIRTUAL_LIST_NS = ".VirtualList";

        function lastFrom(array) {
            return array[array.length - 1];
        }

        function toArray(value) {
            return value instanceof Array ? value : [value];
        }

        function isPrimitive(dataItem) {
            return typeof dataItem === "string" || typeof dataItem === "number" || typeof dataItem === "boolean";
        }

        function getItemCount(screenHeight, listScreens, itemHeight) {
            return Math.ceil(screenHeight * listScreens / itemHeight);
        }

        function appendChild(parent, className, tagName) {
            var element = document.createElement(tagName || "div");
            if (className) {
                element.className = className;
            }
            parent.appendChild(element);

            return element;
        }

        function getDefaultItemHeight(listSize) {
            var mockList = $('<div class="k-list ' + listSize + ' k-virtual-list">' +
                    '<div class="k-list-content k-virtual-content">' +
                        '<ul class="k-list-ul">' +
                            '<li class="k-list-item">' +
                                '<span class="k-list-item-text">test</span>' +
                            '</li>' +
                        '</ul>' +
                    '</div>' +
                '</div>');
            var lineHeight;

            mockList.css({
                position: "absolute",
                left: "-200000px",
                visibility: "hidden"
            });
            mockList.appendTo(document.body);
            lineHeight = parseFloat(kendo.getComputedStyles(mockList.find(".k-list-item")[0], ["height"]).height);
            mockList.remove();

            return lineHeight;
        }

        function bufferSizes(screenHeight, listScreens, opposite) { //in pixels
            return {
                down: screenHeight * opposite,
                up: screenHeight * (listScreens - 1 - opposite)
            };
        }

        function listValidator(options, screenHeight) {
            var downThreshold = (options.listScreens - 1 - options.threshold) * screenHeight;
            var upThreshold = options.threshold * screenHeight;

            return function(list, scrollTop, lastScrollTop) {
                if (scrollTop > lastScrollTop) {
                    return scrollTop - list.top < downThreshold;
                } else {
                    return list.top === 0 || scrollTop - list.top > upThreshold;
                }
            };
        }

        function scrollCallback(element, callback) {
            return function(force) {
                return callback(element.scrollTop, force);
            };
        }

        function syncList(reorder) {
            return function(list, force) {
                reorder(list.items, list.index, force);
                return list;
            };
        }

        function position(element, y) {
            element.style.webkitTransform = 'translateY(' + y + "px)";
            element.style.transform = 'translateY(' + y + "px)";
        }

        function map2(callback, templates) {
            return function(arr1, arr2) {
                for (var i = 0, len = arr1.length; i < len; i++) {
                    callback(arr1[i], arr2[i], templates);
                    if (arr2[i].item) {
                        this.trigger(ITEMCHANGE, { item: $(arr1[i]), data: arr2[i].item, ns: kendo.ui });
                    }
                }
            };
        }

        function reshift(items, diff) {
            var range;

            if (diff > 0) { // down
                range = items.splice(0, diff);
                items.push.apply(items, range);
            } else { // up
                range = items.splice(diff, -diff);
                items.unshift.apply(items, range);
            }

            return range;
        }

        function render(element, data, templates) {
            var itemTemplate = templates.template,
                hasColumns = this.options.columns && this.options.columns.length,
                altRow = data.index % 2 === 1 ? "k-table-alt-row" : "";

            element = $(element);

            if (!data.item) {
                itemTemplate = templates.placeholderTemplate;
            }

            if (data.index === 0 && this.header && data.group) {
                this.header.html(templates.fixedGroupTemplate(data.group));
            }

            element
                .attr("data-uid", data.item ? data.item.uid : "")
                .attr("data-offset-index", data.index);

            if (hasColumns && data.item) {
                if (altRow.length > 0) {
                    element.addClass(altRow);
                } else {
                    element.removeClass("k-table-alt-row");
                }

                var renderedColumns = $(renderColumns(this.options, data.item, templates));
                kendo.applyStylesFromKendoAttributes(renderedColumns, ["width", "max-width"]);
                element.empty().append(renderedColumns);
            } else {
                element.find("." + GROUPITEM).remove();
                element.find(".k-list-item-text").html(itemTemplate(data.item || {}));
            }

            element.toggleClass(FOCUSED, data.current);
            element.toggleClass(SELECTED, data.selected);
            element.toggleClass("k-first", data.newGroup);
            element.toggleClass("k-last", data.isLastGroupedItem);
            element.toggleClass("k-loading-item", !data.item);

            if (data.index !== 0 && data.newGroup) {
                if (hasColumns) {
                    $('<span class="k-table-td k-table-group-td"><span>' + templates.groupTemplate(data.group) + '</span></span>')
                        .appendTo(element);
                } else {
                    $("<div class=" + GROUPITEM + "></div>")
                        .appendTo(element)
                        .html(templates.groupTemplate(data.group));
                }
            } else if (data.group && hasColumns) {
                element.append($('<span class="k-table-td k-table-spacer-td"></span>'));
            }

            if (data.top !== undefined$1) {
                position(element[0], data.top);
            }
        }

        function renderColumns(options, dataItem, templates) {
            var item = "";

            for (var i = 0; i < options.columns.length; i++) {
                var currentWidth = options.columns[i].width;
                var currentWidthInt = parseInt(currentWidth, 10);
                var widthStyle = '';

                if (currentWidth) {
                    var widthValue = "" + currentWidthInt + (percentageUnitsRegex.test(currentWidth) ? "%" : "px");
                    widthStyle = (kendo.attr("style-width")) + "=\"" + widthValue + "\" " + (kendo.attr("style-max-width")) + "=\"" + widthValue + "\"";
                }

                item += "<span class='k-table-td' " + widthStyle + ">";
                item += templates["column" + i](dataItem);
                item += "</span>";
            }

            return item;
        }

        function mapChangedItems(selected, itemsToMatch) {
            var itemsLength = itemsToMatch.length;
            var selectedLength = selected.length;
            var dataItem;
            var found;
            var i, j;

            var changed = [];
            var unchanged = [];

            if (selectedLength) {
                for (i = 0; i < selectedLength; i++) {
                    dataItem = selected[i];
                    found = false;

                    for (j = 0; j < itemsLength; j++) {
                        if (dataItem === itemsToMatch[j]) {
                            found = true;
                            changed.push({ index: i, item: dataItem });
                            break;
                        }
                    }

                    if (!found) {
                        unchanged.push(dataItem);
                    }
                }
            }

            return {
                changed: changed,
                unchanged: unchanged
            };
        }

        function isActivePromise(promise) {
            return promise && promise.state() !== "resolved";
        }

        var VirtualList = DataBoundWidget.extend({
            init: function(element, options) {
                var that = this,
                    contentClasses = options.columns && options.columns.length ? TABLE_CONTENT : LIST_CONTENT;

                that.bound(false);
                that._fetching = false;

                Widget.fn.init.call(that, element, options);

                if (!that.options.itemHeight) {
                    that.options.itemHeight = getDefaultItemHeight(options.listSize);
                }

                options = that.options;

                that.element.attr("role", "listbox");

                var contentSelector = "." + contentClasses.split(' ').join('.');
                var wrapper = that.element.closest(contentSelector);

                that.content = that.wrapper = wrapper.length ? wrapper : that.element.wrap("<div unselectable='on' class='" + contentClasses + "'></div>").parent();

                if (that.options.columns && that.options.columns.length) {
                    var thead = that.element.closest(".k-data-table").find('.k-table-thead');
                    var row = $('<tr class="k-table-group-row">' +
                        '<th class="k-table-th" colspan="' + that.options.columns.length + '"></th>' +
                    '</tr>');

                    thead.append(row);

                    that.header = row.find(".k-table-th");
                    that.element.addClass(TABLE_LIST + " k-virtual-table");
                } else {
                    that.header = that.content.before("<div class='" + HEADER + "'></div>").prev();
                    that.element.addClass(LIST_UL);
                }

                if (options.ariaLabel) {
                    this.element.attr("aria-label", options.ariaLabel);
                } else if (options.ariaLabelledBy) {
                    this.element.attr("aria-labelledby", options.ariaLabelledBy);
                }

                that.element.on("mouseenter" + VIRTUAL_LIST_NS, "li:not(.k-loading-item)", function() { $(this).addClass(HOVER); })
                            .on("mouseleave" + VIRTUAL_LIST_NS, "li", function() { $(this).removeClass(HOVER); });

                that._values = toArray(that.options.value);
                that._selectedDataItems = [];
                that._selectedIndexes = [];
                that._rangesList = {};
                that._promisesList = [];
                that._optionID = kendo.guid();

                that._templates();

                that.setDataSource(options.dataSource);

                that.content.on("scroll" + VIRTUAL_LIST_NS, kendo.throttle(function() {
                    that._renderItems();
                    that._triggerListBound();
                }, options.delay));

                that._selectable();
            },

            options: {
                name: "VirtualList",
                autoBind: true,
                delay: 100,
                height: null,
                listScreens: 4,
                threshold: 0.5,
                itemHeight: null,
                oppositeBuffer: 1,
                type: "flat",
                selectable: false,
                value: [],
                dataValueField: null,
                template: function (data) { return encode(data); },
                placeholderTemplate: function () { return "loading..."; },
                groupTemplate: function (data) { return encode(data); },
                fixedGroupTemplate: function (data) { return encode(data); },
                mapValueTo: "index",
                valueMapper: null,
                ariaLabel: null,
                ariaLabelledBy: null
            },

            events: [
                CHANGE,
                CLICK,
                LISTBOUND,
                ITEMCHANGE,
                ACTIVATE,
                DEACTIVATE
            ],

            setOptions: function(options) {
                var itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;

                Widget.fn.setOptions.call(this, options);

                if (this._selectProxy && this.options.selectable === false) {
                    this.element.off(CLICK, "." + itemClass, this._selectProxy);
                } else if (!this._selectProxy && this.options.selectable) {
                    this._selectable();
                }

                this._templates();
                this.refresh();
            },

            items: function() {
                return $(this._items);
            },

            destroy: function() {
                this.wrapper.off(VIRTUAL_LIST_NS);
                this.dataSource.unbind(CHANGE, this._refreshHandler);
                Widget.fn.destroy.call(this);
            },

            setDataSource: function(source) {
                var that = this;
                var dataSource = source || {};
                var value;

                dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;
                dataSource = kendo.data.DataSource.create(dataSource);

                if (that.dataSource) {
                    that.dataSource.unbind(CHANGE, that._refreshHandler);

                    that._clean();
                    that.bound(false);

                    that._deferValueSet = true;
                    value = that.value();

                    that.value([]);
                    that.mute(function() {
                        that.value(value);
                    });
                } else {
                    that._refreshHandler = that.refresh.bind(that);
                }

                that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);

                that.setDSFilter(dataSource.filter());

                if (dataSource.view().length !== 0) {
                    that.refresh();
                } else if (that.options.autoBind) {
                    dataSource.fetch();
                }
            },

            skip: function() {
                return this.dataSource.currentRangeStart();
            },

            _triggerListBound: function() {
                var that = this;
                var skip = that.skip();

                if (that.bound() && !that._selectingValue && that._skip !== skip) {
                    that._skip = skip;
                    that.trigger(LISTBOUND);
                }
            },

            _getValues: function(dataItems) {
                var getter = this._valueGetter;

                return $.map(dataItems, function(dataItem) {
                    return getter(dataItem);
                });
            },

            _highlightSelectedItems: function() {
                for (var i = 0; i < this._selectedDataItems.length; i++) {
                    var item = this._getElementByDataItem(this._selectedDataItems[i]);
                    if (item.length) {
                        item.addClass(SELECTED);
                    }
                }
            },

            refresh: function(e) {
                var that = this;
                var action = e && e.action;
                var isItemChange = action === "itemchange";
                var filtered = this.isFiltered();
                var result;

                if (that._mute) { return; }

                that._deferValueSet = false;

                if (!that._fetching) {
                    if (filtered) {
                        that.focus(0);
                    }

                    that._createList();
                    if (!action && that._values.length && !filtered &&
                         !that.options.skipUpdateOnBind && !that._emptySearch) {
                        that._selectingValue = true;

                        that.bound(true);
                        that.value(that._values, true).done(function() {
                            that._selectingValue = false;
                            that._triggerListBound();
                        });
                    } else {
                        that.bound(true);
                        that._highlightSelectedItems();
                        that._triggerListBound();
                    }
                } else {
                    if (that._renderItems) {
                        that._renderItems(true);
                    }

                    that._triggerListBound();
                }

                if (isItemChange || action === "remove") {
                    result = mapChangedItems(that._selectedDataItems, e.items);
                    if (result.changed.length) {
                        if (isItemChange) {
                            that.trigger("selectedItemChange", {
                                items: result.changed
                            });
                        } else {
                            that.value(that._getValues(result.unchanged));
                        }
                    }
                }

                that._fetching = false;
            },

            removeAt: function(position) {
                var value = this._values.splice(position, 1)[0];

                return {
                    position: position,
                    dataItem: this._removeSelectedDataItem(value)
                };
            },

            _removeSelectedDataItem: function(value) {
                var that = this,
                    valueGetter = that._valueGetter;

                for (var idx in that._selectedDataItems) {
                    if (valueGetter(that._selectedDataItems[idx]) === value) {
                        that._selectedIndexes.splice(idx, 1);
                        return that._selectedDataItems.splice(idx, 1)[0];
                    }
                }
            },

            setValue: function(value) {
                this._values = toArray(value);
            },

            value: function(value, _forcePrefetch) {
                var that = this;

                if (value === undefined$1) {
                    return that._values.slice();
                }

                if (value === null) {
                    value = [];
                }

                value = toArray(value);

                if (!that._valueDeferred || that._valueDeferred.state() === "resolved") {
                    that._valueDeferred = $.Deferred();
                }

                var shouldClear = that.options.selectable === "multiple" && that.select().length && value.length;

                if (shouldClear || !value.length) {
                    that.select(-1);
                }

                that._values = value;

                if ((that.bound() && !that._mute && !that._deferValueSet) || _forcePrefetch) {
                    that._prefetchByValue(value);
                }

                return that._valueDeferred;
            },

            _checkValuesOrder: function(value) {
                if (this._removedAddedIndexes &&
                    this._removedAddedIndexes.length === value.length) {
                        var newValue = this._removedAddedIndexes.slice();
                        this._removedAddedIndexes = null;
                    return newValue;
                }

                return value;
            },

            _prefetchByValue: function(value) {
                var that = this,
                    dataView = that._dataView,
                    valueGetter = that._valueGetter,
                    mapValueTo = that.options.mapValueTo,
                    item, match = false,
                    forSelection = [];

                //try to find the items in the loaded data
                for (var i = 0; i < value.length; i++) {
                    for (var idx = 0; idx < dataView.length; idx++) {
                        item = dataView[idx].item;
                        if (item) {
                            match = isPrimitive(item) ? value[i] === item : value[i] === valueGetter(item);

                            if (match) {
                                forSelection.push(dataView[idx].index);
                            }
                        }
                    }
                }

                if (forSelection.length === value.length) {
                    that._values = [];
                    that.select(forSelection);
                    return;
                }

                //prefetch the items
                if (typeof that.options.valueMapper === "function") {
                    that.options.valueMapper({
                        value: (this.options.selectable === "multiple") ? value : value[0],
                        success: function(response) {
                            if (mapValueTo === "index") {
                                that.mapValueToIndex(response);
                            } else if (mapValueTo === "dataItem") {
                                that.mapValueToDataItem(response);
                            }
                        }
                    });
                } else {
                     if (!that.value()[0]) {
                         that.select([-1]);
                     } else {
                        that._selectingValue = false;
                        that._triggerListBound();
                     }
                }
            },

            mapValueToIndex: function(indexes) {
                if (indexes === undefined$1 || indexes === -1 || indexes === null) {
                    indexes = [];
                } else {
                    indexes = toArray(indexes);
                }

                if (!indexes.length) {
                    indexes = [-1];
                } else {
                    var removed = this._deselect([]).removed;
                    if (removed.length) {
                        this._triggerChange(removed, []);
                    }
                }

                this.select(indexes);
            },

            mapValueToDataItem: function(dataItems) {
                var removed, added;

                if (dataItems === undefined$1 || dataItems === null) {
                    dataItems = [];
                } else {
                    dataItems = toArray(dataItems);
                }

                if (!dataItems.length) {
                    this.select([-1]);
                } else {
                    removed = $.map(this._selectedDataItems, function(item, index) {
                        return { index: index, dataItem: item };
                    });

                    added = $.map(dataItems, function(item, index) {
                        return { index: index, dataItem: item };
                    });

                    this._selectedDataItems = dataItems;

                    this._selectedIndexes = [];

                    for (var i = 0; i < this._selectedDataItems.length; i++) {
                        var item = this._getElementByDataItem(this._selectedDataItems[i]);
                        this._selectedIndexes.push(this._getIndecies(item)[0]);
                        item.addClass(SELECTED);
                    }

                    this._triggerChange(removed, added);

                    if (this._valueDeferred) {
                        this._valueDeferred.resolve();
                    }
                }
            },

            deferredRange: function(index) {
                var dataSource = this.dataSource;
                var take = this.itemCount;
                var ranges = this._rangesList;
                var result = $.Deferred();
                var defs = [];

                var low = Math.floor(index / take) * take;
                var high = Math.ceil(index / take) * take;

                var pages = high === low ? [ high ] : [ low, high ];

                $.each(pages, function(_, skip) {
                    var end = skip + take;
                    var existingRange = ranges[skip];
                    var deferred;

                    if (!existingRange || (existingRange.end !== end)) {
                        deferred = $.Deferred();
                        ranges[skip] = { end: end, deferred: deferred };

                        dataSource._multiplePrefetch(skip, take, function() {
                            deferred.resolve();
                        });
                    } else {
                        deferred = existingRange.deferred;
                    }

                    defs.push(deferred);
                });

                $.when.apply($, defs).done(function() {
                    result.resolve();
                });

                return result;
            },

            prefetch: function(indexes) {
                var that = this,
                    take = this.itemCount,
                    isEmptyList = !that._promisesList.length;

                if (!isActivePromise(that._activeDeferred)) {
                    that._activeDeferred = $.Deferred();
                    that._promisesList = [];
                }

                $.each(indexes, function(_, index) {
                    that._promisesList.push(that.deferredRange(that._getSkip(index, take)));
                });

                if (isEmptyList) {
                    $.when.apply($, that._promisesList).done(function() {
                        that._promisesList = [];
                        that._activeDeferred.resolve();
                    });
                }

                return that._activeDeferred;
            },

            _findDataItem: function(view, index) {
                var group;

                //find in grouped view
                if (this.options.type === "group") {
                    for (var i = 0; i < view.length; i++) {
                        group = view[i].items;
                        if (group.length <= index) {
                            index = index - group.length;
                        } else {
                            return group[index];
                        }
                    }
                }

                //find in flat view
                return view[index];
            },

            _getRange: function(skip, take) {
                return this.dataSource._findRange(skip, Math.min(skip + take, this.dataSource.total()));
            },

            dataItemByIndex: function(index) {
                var that = this;
                var take = that.itemCount;
                var skip = that._getSkip(index, take);
                var view = this._getRange(skip, take);

                //should not return item if data is not loaded
                if (!that._getRange(skip, take).length) {
                    return null;
                }

                if (that.options.type === "group") {
                    kendo.ui.progress($(that.wrapper), true);
                    that.mute(function() {
                        that.dataSource.range(skip, take, function() {
                            kendo.ui.progress($(that.wrapper), false);
                        });
                        view = that.dataSource.view();
                    });
                }

                return that._findDataItem(view, [index - skip]);
            },

            selectedDataItems: function() {
                return this._selectedDataItems.slice();
            },

            scrollWith: function(value) {
                this.content.scrollTop(this.content.scrollTop() + value);
            },

            scrollTo: function(y) {
                this.content.scrollTop(y); //works only if the element is visible
            },

            scrollToIndex: function(index) {
                this.scrollTo(index * this.options.itemHeight);
            },

            focus: function(candidate) {
                var element,
                    index,
                    data,
                    current,
                    itemHeight = this.options.itemHeight,
                    id = this._optionID,
                    triggerEvent = true;

                if (candidate === undefined$1) {
                    current = this.element.find("." + FOCUSED);
                    return current.length ? current : null;
                }

                if (typeof candidate === "function") {
                    data = this.dataSource.flatView();
                    for (var idx = 0; idx < data.length; idx++) {
                        if (candidate(data[idx])) {
                            candidate = idx;
                            break;
                        }
                    }
                }

                if (candidate instanceof Array) {
                    candidate = lastFrom(candidate);
                }

                if (isNaN(candidate)) {
                    element = $(candidate);
                    index = parseInt($(element).attr("data-offset-index"), 10);
                } else {
                    index = candidate;
                    element = this._getElementByIndex(index);
                }

                if (index === -1) {
                    this.element.find("." + FOCUSED).removeClass(FOCUSED);
                    this._focusedIndex = undefined$1;
                    return;
                }

                if (element.length) { /*focus rendered item*/
                    if (element.hasClass(FOCUSED)) {
                        triggerEvent = false;
                    }
                    if (this._focusedIndex !== undefined$1) {
                        current = this._getElementByIndex(this._focusedIndex);
                        current
                            .removeClass(FOCUSED)
                            .removeAttr("id");

                        if (triggerEvent) {
                            this.trigger(DEACTIVATE);
                        }
                    }

                    this._focusedIndex = index;

                    element
                        .addClass(FOCUSED)
                        .attr("id", id);

                    var position = this._getElementLocation(index);

                    if (position === "top") {
                        this.scrollTo(index * itemHeight);
                    } else if (position === "bottom") {
                        this.scrollTo((index * itemHeight + itemHeight) - this._screenHeight);
                    } else if (position === "outScreen") {
                        this.scrollTo(index * itemHeight);
                    }

                    if (triggerEvent) {
                        this.trigger(ACTIVATE);
                    }
                } else { /*focus non rendered item*/
                    this._focusedIndex = index;
                    this.items().removeClass(FOCUSED);
                    this.scrollToIndex(index);
                }
            },

            focusIndex: function() {
                return this._focusedIndex;
            },

            focusFirst: function() {
                this.scrollTo(0);
                this.focus(0);
            },

            focusLast: function() {
                var lastIndex = this.dataSource.total();
                this.scrollTo(this.heightContainer.offsetHeight);
                this.focus(lastIndex - 1);
            },

            focusPrev: function() {
                var index = this._focusedIndex;
                var current;

                if (!isNaN(index) && index > 0) {
                    index -= 1;
                    this.focus(index);

                    current = this.focus();
                    if (current && current.hasClass("k-loading-item")) {
                        index += 1;
                        this.focus(index);
                    }

                    return index;
                } else {
                    index = this.dataSource.total() - 1;
                    this.focus(index);
                    return index;
                }
            },

            focusNext: function() {
                var index = this._focusedIndex;
                var lastIndex = this.dataSource.total() - 1;
                var current;

                if (!isNaN(index) && index < lastIndex) {
                    index += 1;
                    this.focus(index);

                    current = this.focus();
                    if (current && current.hasClass("k-loading-item")) {
                        index -= 1;
                        this.focus(index);
                    }

                    return index;
                } else {
                    index = 0;
                    this.focus(index);
                    return index;
                }
            },

            _triggerChange: function(removed, added) {
                removed = removed || [];
                added = added || [];

                if (removed.length || added.length) {
                     this.trigger(CHANGE, {
                        removed: removed,
                        added: added
                    });
                }
            },

            select: function(candidate) {
                var that = this,
                    indices,
                    initialIndices,
                    singleSelection = that.options.selectable !== "multiple",
                    prefetchStarted = isActivePromise(that._activeDeferred),
                    filtered = this.isFiltered(),
                    isAlreadySelected,
                    deferred,
                    result,
                    removed = [];

                if (candidate === undefined$1) {
                    return that._selectedIndexes.slice();
                }

                if (!that._selectDeferred || that._selectDeferred.state() === "resolved") {
                    that._selectDeferred = $.Deferred();
                }

                indices = that._getIndecies(candidate);
                isAlreadySelected = singleSelection && !filtered && lastFrom(indices) === lastFrom(this._selectedIndexes);
                removed = that._deselectCurrentValues(indices);

                if (removed.length || !indices.length || isAlreadySelected) {
                    that._triggerChange(removed);

                    if (that._valueDeferred) {
                        that._valueDeferred.resolve().promise();
                    }

                    return that._selectDeferred.resolve().promise();
                }

                if (indices.length === 1 && indices[0] === -1) {
                    indices = [];
                }

                initialIndices = indices;
                result = that._deselect(indices);
                removed = result.removed;
                indices = result.indices;

                if (singleSelection) {
                    prefetchStarted = false;
                    if (indices.length) {
                        indices = [lastFrom(indices)];
                    }
                }

                var done = function() {
                    var added = that._select(indices);

                    if (initialIndices.length === indices.length || singleSelection) {
                        that.focus(indices);
                    }

                    that._triggerChange(removed, added);

                    if (that._valueDeferred) {
                        that._valueDeferred.resolve();
                    }

                    that._selectDeferred.resolve();
                };

                deferred = that.prefetch(indices);

                if (!prefetchStarted) {
                    if (deferred) {
                        deferred.done(done);
                    } else {
                        done();
                    }
                }

                return that._selectDeferred.promise();
            },

            bound: function(bound) {
                if (bound === undefined$1) {
                    return this._listCreated;
                }

                this._listCreated = bound;
            },

            mute: function(callback) {
                this._mute = true;
                callback();
                this._mute = false;
            },

            setDSFilter: function(filter) {
                this._lastDSFilter = $.extend({}, filter);
            },

            isFiltered: function() {
                if (!this._lastDSFilter) {
                    this.setDSFilter(this.dataSource.filter());
                }

                return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);
            },

            skipUpdate: $.noop,

            _getElementByIndex: function(index) {
                return this.items().filter(function(idx, element) {
                    return index === parseInt($(element).attr("data-offset-index"), 10);
                });
            },

            _getElementByDataItem: function(dataItem) {
                var dataView = this._dataView,
                valueGetter = this._valueGetter,
                    element, match;

                for (var i = 0; i < dataView.length; i++) {
                    match = dataView[i].item && isPrimitive(dataView[i].item) ? dataView[i].item === dataItem : dataView[i].item && dataItem && valueGetter(dataView[i].item) == valueGetter(dataItem);
                    if (match) {
                        element = dataView[i];
                        break;
                    }
                }

                return element ? this._getElementByIndex(element.index) : $();
            },

            _clean: function() {
                this.result = undefined$1;
                this._lastScrollTop = undefined$1;
                this._skip = undefined$1;
                $(this.heightContainer).remove();
                this.heightContainer = undefined$1;
                this.element.empty();
            },

            _height: function() {
                var hasData = !!this.dataSource.view().length,
                    height = this.options.height,
                    itemHeight = this.options.itemHeight,
                    total = this.dataSource.total();

                if (!hasData) {
                    height = 0;
                } else if (height / itemHeight > total) {
                    height = total * itemHeight;
                }

                return height;
            },

            setScreenHeight: function() {
                var height = this._height();

                this.content.height(height);
                this._screenHeight = height;
            },

            screenHeight: function() {
                return this._screenHeight;
            },

            _getElementLocation: function(index) {
                var scrollTop = this.content.scrollTop(),
                    screenHeight = this._screenHeight,
                    itemHeight = this.options.itemHeight,
                    yPosition = index * itemHeight,
                    yDownPostion = yPosition + itemHeight,
                    screenEnd = scrollTop + screenHeight,
                    position;

                if (yPosition === (scrollTop - itemHeight) || (yDownPostion > scrollTop && yPosition < scrollTop)) {
                    position = "top";
                } else if (yPosition === screenEnd || (yPosition < screenEnd && screenEnd < yDownPostion)) {
                    position = "bottom";
                } else if ((yPosition >= scrollTop) && (yPosition <= scrollTop + (screenHeight - itemHeight))) {
                    position = "inScreen";
                } else {
                    position = "outScreen";
                }

                return position;
            },

            _templates: function() {
                var options = this.options;
                var templates = {
                    template: options.template,
                    placeholderTemplate: options.placeholderTemplate,
                    groupTemplate: options.groupTemplate,
                    fixedGroupTemplate: options.fixedGroupTemplate
                };

                if (options.columns) {
                    options.columns.forEach(function (column, i) {
                        var templateText = column.field ? column.field.toString() : "text";
                        var templateFunc = function (data) { return encode(kendo.getter(templateText)(data)); };

                        templates["column" + i] = column.template || templateFunc;
                    });
                }

                for (var key in templates) {
                    if (typeof templates[key] !== "function") {
                        templates[key] = kendo.template(templates[key] || "");
                    }
                }

                this.templates = templates;
            },

            _generateItems: function(element, count) {
                var items = [],
                    item, text,
                    itemHeight = this.options.itemHeight + "px",
                    itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;

                while (count-- > 0) {
                    text = document.createElement("span");
                    text.className = "k-list-item-text";

                    item = document.createElement("li");
                    item.tabIndex = -1;
                    item.className = itemClass;
                    item.setAttribute("role", "option");
                    item.style.height = itemHeight;
                    item.style.minHeight = itemHeight;
                    item.appendChild(text);

                    element.appendChild(item);

                    items.push(item);
                }

                return items;
            },

            _saveInitialRanges: function() {
                var ranges = this.dataSource._ranges;
                var deferred = $.Deferred();
                deferred.resolve();

                this._rangesList = {};
                for (var i = 0; i < ranges.length; i++) {
                    this._rangesList[ranges[i].start] = { end: ranges[i].end, deferred: deferred };
                }
            },

            _createList: function() {
                var that = this,
                    content = that.content.get(0),
                    options = that.options,
                    dataSource = that.dataSource;

                if (that.bound()) {
                    that._clean();
                }

                that._saveInitialRanges();
                that._buildValueGetter();
                that.setScreenHeight();
                that.itemCount = getItemCount(that._screenHeight, options.listScreens, options.itemHeight);

                if (that.itemCount > dataSource.total()) {
                    that.itemCount = dataSource.total();
                }

                that._items = that._generateItems(that.element[0], that.itemCount);

                that._setHeight(options.itemHeight * dataSource.total());
                that.options.type = (dataSource.group() || []).length ? "group" : "flat";

                if (that.options.type === "flat") {
                    if (that.header.closest(GROUP_ROW_SEL).length) {
                        that.header.closest(GROUP_ROW_SEL).hide();
                    } else {
                        that.header.hide();
                    }
                } else {
                    if (that.header.closest(GROUP_ROW_SEL).length) {
                        that.header.closest(GROUP_ROW_SEL).show();
                    } else {
                        that.header.show();
                    }
                }

                that.getter = that._getter(function() {
                    that._renderItems(true);
                });

                that._onScroll = function(scrollTop, force) {
                    var getList = that._listItems(that.getter);
                    return that._fixedHeader(scrollTop, getList(scrollTop, force));
                };

                that._renderItems = that._whenChanged(
                    scrollCallback(content, that._onScroll),
                    syncList(that._reorderList(that._items, render.bind(that)))
                );

                that._renderItems();
                that._calculateGroupPadding(that._screenHeight);
                that._calculateColumnsHeaderPadding();
            },

            _setHeight: function(height) {
                var currentHeight,
                    heightContainer = this.heightContainer;

                if (!heightContainer) {
                    heightContainer = this.heightContainer = appendChild(this.content[0], HEIGHTCONTAINER);
                } else {
                    currentHeight = heightContainer.offsetHeight;
                }

                if (height !== currentHeight) {
                    heightContainer.innerHTML = "";

                    while (height > 0) {
                        var padHeight = Math.min(height, 250000); //IE workaround, should not create elements with height larger than 250000px
                        appendChild(heightContainer).style.height = padHeight + "px";
                        height -= padHeight;
                    }
                }
            },

            _getter: function() {
                var lastRequestedRange = null,
                    dataSource = this.dataSource,
                    lastRangeStart = dataSource.skip(),
                    type = this.options.type,
                    pageSize = this.itemCount,
                    flatGroups = {};

                if (dataSource.pageSize() < pageSize) {
                    this.mute(function() {
                        dataSource.pageSize(pageSize);
                    });
                }

                return function(index, rangeStart) {
                    var that = this;
                    if (!dataSource.inRange(rangeStart, pageSize)) {
                        if (lastRequestedRange !== rangeStart) {
                            lastRequestedRange = rangeStart;
                            lastRangeStart = rangeStart;

                            if (that._getterDeferred) {
                                that._getterDeferred.reject();
                            }

                            that._getterDeferred = that.deferredRange(rangeStart);
                            that._getterDeferred.then(function() {
                                var firstItemIndex = that._indexConstraint(that.content[0].scrollTop);

                                that._getterDeferred = null;

                                if (rangeStart <= firstItemIndex && firstItemIndex <= (rangeStart + pageSize)) {
                                    that._fetching = true;
                                    dataSource.range(rangeStart, pageSize);
                                }
                            });
                        }

                        return null;
                    } else {
                        if (lastRangeStart !== rangeStart) {
                            this.mute(function() {
                                dataSource.range(rangeStart, pageSize);
                                lastRangeStart = rangeStart;
                            });
                        }

                        var result;
                        if (type === "group") { //grouped list
                            if (!flatGroups[rangeStart]) {
                                var flatGroup = flatGroups[rangeStart] = [];
                                var groups = dataSource.view();
                                for (var i = 0, len = groups.length; i < len; i++) {
                                    var group = groups[i];
                                    for (var j = 0, groupLength = group.items.length; j < groupLength; j++) {
                                        flatGroup.push({ item: group.items[j], group: group.value });
                                    }
                                }
                            }

                            result = flatGroups[rangeStart][index - rangeStart];
                        } else { //flat list
                            result = dataSource.view()[index - rangeStart];
                        }

                        return result;
                    }
                };
            },

            _fixedHeader: function(scrollTop, list) {
                var group = this.currentVisibleGroup,
                    itemHeight = this.options.itemHeight,
                    firstVisibleDataItemIndex = Math.floor((scrollTop - list.top) / itemHeight),
                    firstVisibleDataItem = list.items[firstVisibleDataItemIndex];

                if (firstVisibleDataItem && firstVisibleDataItem.item) {
                    var firstVisibleGroup = firstVisibleDataItem.group;

                    if (firstVisibleGroup !== group) {
                        var fixedGroupText = firstVisibleGroup || "";
                        this.header.html(this.templates.fixedGroupTemplate(fixedGroupText));
                        this.currentVisibleGroup = firstVisibleGroup;
                    }
                }

                return list;
            },

            _itemMapper: function(item, index, value) {
                var listType = this.options.type,
                    itemHeight = this.options.itemHeight,
                    currentIndex = this._focusedIndex,
                    selected = false,
                    current = false,
                    newGroup = false,
                    group = null,
                    match = false,
                    valueGetter = this._valueGetter;

                if (listType === "group") {
                    if (item) {
                        newGroup = index === 0 || (this._currentGroup !== false && this._currentGroup !== item.group);
                        this._currentGroup = item.group;
                    }

                    group = item ? item.group : null;
                    item = item ? item.item : null;
                }

                if (this.options.mapValueTo === "dataItem" && this._selectedDataItems.length && item) {
                    for (var i = 0; i < this._selectedDataItems.length; i++) {
                        match = valueGetter(this._selectedDataItems[i]) === valueGetter(item);
                        if (match) {
                            selected = true;
                            break;
                        }
                    }
                } else if (!this.isFiltered() && value.length && item) {
                    for (var j = 0; j < value.length; j++) {
                        match = isPrimitive(item) ? value[j] === item : value[j] === valueGetter(item);
                        if (match) {
                            value.splice(j , 1);
                            selected = true;
                            break;
                        }
                    }
                }

                if (currentIndex === index) {
                    current = true;
                }

                return {
                    item: item ? item : null,
                    group: group,
                    newGroup: newGroup,
                    selected: selected,
                    current: current,
                    index: index,
                    top: index * itemHeight
                };
            },

            _range: function(index) {
                var itemCount = this.itemCount,
                    value = this._values.slice(),
                    items = [],
                    item;

                this._view = {};
                this._currentGroup = false;

                for (var i = index, length = index + itemCount; i < length; i++) {
                    item = this._itemMapper(this.getter(i, index), i, value);
                    if (items[items.length - 1]) {
                        items[items.length - 1].isLastGroupedItem = item.newGroup;
                    }
                    items.push(item);
                    this._view[item.index] = item;
                }

                this._dataView = items;
                return items;
            },

            _getDataItemsCollection: function(scrollTop, lastScrollTop) {
                var items = this._range(this._listIndex(scrollTop, lastScrollTop));
                return {
                    index: items.length ? items[0].index : 0,
                    top: items.length ? items[0].top : 0,
                    items: items
                };
            },

            _listItems: function() {
                var screenHeight = this._screenHeight,
                    options = this.options;

                var theValidator = listValidator(options, screenHeight);

                return (function(value, force) {
                    var result = this.result,
                        lastScrollTop = this._lastScrollTop;

                    if (force || !result || !theValidator(result, value, lastScrollTop)) {
                        result = this._getDataItemsCollection(value, lastScrollTop);
                    }

                    this._lastScrollTop = value;
                    this.result = result;

                    return result;
                }).bind(this);
            },

            _whenChanged: function(getter, callback) {
                var current;

                return function(force) {
                    var theNew = getter(force);

                    if (theNew !== current) {
                        current = theNew;
                        callback(theNew, force);
                    }
                };
            },

            _reorderList: function(list, reorder) {
                var that = this;
                var length = list.length;
                var currentOffset = -Infinity;
                reorder = map2(reorder, this.templates).bind(this);

                return function(list2, offset, force) {
                    var diff = offset - currentOffset;
                    var range, range2;

                    if (force || Math.abs(diff) >= length) { // full reorder
                        range = list;
                        range2 = list2;
                    } else { // partial reorder
                        range = reshift(list, diff);
                        range2 = diff > 0 ? list2.slice(-diff) : list2.slice(0, -diff);
                    }

                    reorder(range, range2, that.bound());

                    currentOffset = offset;
                };
            },

            _bufferSizes: function() {
                var options = this.options;

                return bufferSizes(this._screenHeight, options.listScreens, options.oppositeBuffer);
            },

            _indexConstraint: function(position) {
                var itemCount = this.itemCount,
                    itemHeight = this.options.itemHeight,
                    total = this.dataSource.total();

                return Math.min(Math.max(total - itemCount, 0), Math.max(0, Math.floor(position / itemHeight )));
            },

            _listIndex: function(scrollTop, lastScrollTop) {
                var buffers = this._bufferSizes(),
                    position;

                position = scrollTop - ((scrollTop > lastScrollTop) ? buffers.down : buffers.up);

                return this._indexConstraint(position);
            },

            _selectable: function() {
                var itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;

                if (this.options.selectable) {
                    this._selectProxy = this._clickHandler.bind(this);
                    this.element.on(CLICK + VIRTUAL_LIST_NS, "." + itemClass, this._selectProxy);
                }
            },

            getElementIndex: function(element) {
                if (!(element instanceof jQuery)) {
                    return undefined$1;
                }

                return parseInt(element.attr("data-offset-index"), 10);
            },

            _getIndecies: function(candidate) {
                var result = [], data;

                if (typeof candidate === "function") {
                    data = this.dataSource.flatView();
                    for (var idx = 0; idx < data.length; idx++) {
                        if (candidate(data[idx])) {
                            result.push(idx);
                            break;
                        }
                    }
                }

                if (typeof candidate === "number") {
                    result.push(candidate);
                }

                var elementIndex = this.getElementIndex(candidate);
                if (!isNaN(elementIndex)) {
                    result.push(elementIndex);
                }

                if (candidate instanceof Array) {
                    result = candidate;
                }

                return result;
            },

            _deselect: function(indices) {
                var removed = [],
                    selectedIndex,
                    dataItem,
                    selectedIndexes = this._selectedIndexes,
                    selectedDataItems = this._selectedDataItems,
                    position = 0,
                    selectable = this.options.selectable,
                    removedindexesCounter = 0,
                    valueGetter = this._valueGetter,
                    item, match,
                    result = null;

                indices = indices.slice();

                if (selectable === true || !indices.length) { //deselect everything
                    for (var idx = 0; idx < selectedIndexes.length; idx++) {
                        if (selectedIndexes[idx] !== undefined$1) {
                            this._getElementByIndex(selectedIndexes[idx]).removeClass(SELECTED);
                        } else if (selectedDataItems[idx]) {
                            this._getElementByDataItem(selectedDataItems[idx]).removeClass(SELECTED);
                        }

                        removed.push({
                            index: selectedIndexes[idx],
                            position: idx,
                            dataItem: selectedDataItems[idx]
                        });
                    }

                    this._values = [];
                    this._selectedDataItems = [];
                    this._selectedIndexes = [];
                } else if (selectable === "multiple") {
                    for (var i = 0; i < indices.length; i++) {
                        result = null;
                        position = $.inArray(indices[i], selectedIndexes);
                        dataItem = this.dataItemByIndex(indices[i]);

                        if (position === -1 && dataItem) {
                            for (var j = 0; j < selectedDataItems.length; j++) {
                                match = isPrimitive(dataItem) ? selectedDataItems[j] === dataItem : valueGetter(selectedDataItems[j]) === valueGetter(dataItem);
                                if (match) {
                                    item = this._getElementByIndex(indices[i]);
                                    result = this._deselectSingleItem(item, j, indices[i], removedindexesCounter);
                                }
                            }
                        } else {
                            selectedIndex = selectedIndexes[position];

                            if (selectedIndex !== undefined$1) {
                                item = this._getElementByIndex(selectedIndex);
                                result = this._deselectSingleItem(item, position, selectedIndex, removedindexesCounter);
                            }
                        }

                        if (result) {
                            indices.splice(i, 1);
                            removed.push(result);

                            removedindexesCounter++;
                            i--;
                        }
                    }
                }

                return {
                    indices: indices,
                    removed: removed
                };
            },

            _deselectSingleItem: function(item, position, selectedIndex, removedindexesCounter) {
                var dataItem;

                if (!item.hasClass(SELECTED)) {
                    return;
                }

                item.removeClass(SELECTED);
                this._values.splice(position, 1);
                this._selectedIndexes.splice(position, 1);
                dataItem = this._selectedDataItems.splice(position, 1)[0];

                return {
                    index: selectedIndex,
                    position: position + removedindexesCounter,
                    dataItem: dataItem
                };
            },

            _deselectCurrentValues: function(indices) {
                var children = this.element[0].children;
                var value, index, position;
                var values = this._values;
                var removed = [];
                var idx = 0;
                var j;

                if (this.options.selectable !== "multiple" || !this.isFiltered()) {
                    return [];
                }

                if (indices[0] === -1) {
                    $(children).removeClass(SELECTED);
                    removed = $.map(this._selectedDataItems.slice(0), function(dataItem, idx) {
                       return {
                          dataItem: dataItem,
                          position: idx
                       };
                    });
                    this._selectedIndexes = [];
                    this._selectedDataItems = [];
                    this._values = [];
                    return removed;
                }

                for (; idx < indices.length; idx++) {
                    position = -1;
                    index = indices[idx];
                    if (this.dataItemByIndex(index)) {
                        value = this._valueGetter(this.dataItemByIndex(index));
                    }

                    for (j = 0; j < values.length; j++) {
                        if (value == values[j]) {
                            position = j;
                            break;
                        }
                    }

                    if (position > -1) {
                        removed.push(this.removeAt(position));
                        $(children[index]).removeClass(SELECTED);
                    }
                }

                return removed;
            },

            _getSkip: function(index, take) {
                var page = index < take ? 1 : Math.floor(index / take) + 1;

                return (page - 1) * take;
            },

            _select: function(indexes) {
                var that = this,
                    singleSelection = this.options.selectable !== "multiple",
                    dataSource = this.dataSource,
                    dataItem, oldSkip,
                    take = this.itemCount,
                    valueGetter = this._valueGetter,
                    added = [];

                if (singleSelection) {
                    that._selectedIndexes = [];
                    that._selectedDataItems = [];
                    that._values = [];
                }

                oldSkip = dataSource.skip();

                $.each(indexes, function(_, index) {
                    var skip = that._getSkip(index, take);

                    that.mute(function() {
                        dataSource.range(skip, take); //switch the range to get the dataItem

                        dataItem = that._findDataItem(dataSource.view(), [index - skip]);
                        that._selectedIndexes.push(index);
                        that._selectedDataItems.push(dataItem);
                        that._values.push(isPrimitive(dataItem) ? dataItem : valueGetter(dataItem));

                        added.push({
                            index: index,
                            dataItem: dataItem
                        });

                        that._getElementByIndex(index).addClass(SELECTED);

                        dataSource.range(oldSkip, take); //switch back the range
                    });
                });

                that._values = that._checkValuesOrder(that._values);

                return added;
            },

            _clickHandler: function(e) {
                var item = $(e.currentTarget);

                if (!e.isDefaultPrevented() && item.attr("data-uid")) {
                    this.trigger(CLICK, { item: item });
                }
            },

            _buildValueGetter: function() {
                this._valueGetter = kendo.getter(this.options.dataValueField);
            },

            _calculateGroupPadding: function(height) {
                var firstItem = this.items().first(),
                    groupHeader = this.header,
                    padding = 0;

                if (groupHeader[0] && groupHeader[0].style.display !== "none") {
                    if (height !== "auto") {
                        padding = kendo.support.scrollbar();
                    }

                    padding += parseFloat(firstItem.css("border-right-width"), 10) + parseFloat(firstItem.children(".k-group").css("right"), 10);

                    groupHeader.css("padding-right", padding);
                }
            },

            _calculateColumnsHeaderPadding: function() {
                if (this.options.columns && this.options.columns.length) {
                    var isRtl = kendo.support.isRtl(this.wrapper);
                    var scrollbar = kendo.support.scrollbar();
                    var columnsHeader = this.content.parent().parent().find(".k-table-header");
                    var total = this.dataSource.total();

                    columnsHeader.css((isRtl ? "padding-left" : "padding-right"), total ? scrollbar : 0);
                }
            }

        });

        kendo.ui.VirtualList = VirtualList;
        kendo.ui.plugin(VirtualList);

    })(window.kendo.jQuery);
    var kendo$n = kendo;

    var __meta__$q = {
        id: "autocomplete",
        name: "AutoComplete",
        category: "web",
        description: "The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.",
        depends: [ "list" ],
        features: [ {
            id: "mobile-scroller",
            name: "Mobile scroller",
            description: "Support for kinetic scrolling in mobile device",
            depends: [ "mobile.scroller" ]
        }, {
            id: "virtualization",
            name: "VirtualList",
            description: "Support for virtualization",
            depends: [ "virtuallist" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            encode = kendo.htmlEncode,
            support = kendo.support,
            caret = kendo.caret,
            activeElement = kendo._activeElement,
            placeholderSupported = support.placeholder,
            ui = kendo.ui,
            List = ui.List,
            keys = kendo.keys,
            DataSource = kendo.data.DataSource,
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            CHANGE = "change",
            DISABLED = "disabled",
            READONLY = "readonly",
            FOCUSED = "k-focus",
            SELECTED = "k-selected",
            HIDDENCLASS = "k-hidden",
            STATEDISABLED = "k-disabled",
            AUTOCOMPLETEVALUE = "off",
            HOVER = "k-hover",
            ns = ".kendoAutoComplete",
            HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns;

        function indexOfWordAtCaret(caretIdx, text, separator) {
            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;
        }

        function wordAtCaret(caretIdx, text, separator) {
            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];
        }

        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {
            var words = text.split(separator);

            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);

            if (separator && words[words.length - 1] !== "") {
                words.push("");
            }

            return words.join(defaultSeparator);
        }

        var AutoComplete = List.extend({
            init: function(element, options) {
                var that = this, wrapper, disabled;

                that.ns = ns;
                options = Array.isArray(options) ? { dataSource: options } : options;

                List.fn.init.call(that, element, options);

                element = that.element;
                options = that.options;

                options.placeholder = options.placeholder || element.attr("placeholder");
                if (placeholderSupported) {
                    element.attr("placeholder", options.placeholder);
                }

                that._wrapper();
                that._loader();
                that._clearButton();

                that._dataSource();
                that._ignoreCase();

                element[0].type = "text";
                wrapper = that.wrapper;

                that._popup();

                element
                    .addClass("k-input-inner")
                    .on("keydown" + ns, that._keydown.bind(that))
                    .on("keypress" + ns, that._keypress.bind(that))
                    .on("input" + ns, that._search.bind(that))
                    .on("paste" + ns, that._search.bind(that))
                    .on("focus" + ns, function() {
                        that._prev = that._accessor();
                        that._oldText = that._prev;
                        that._placeholder(false);
                        wrapper.addClass(FOCUSED);
                    })
                    .on("focusout" + ns, function(ev) {
                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {
                            return;
                        }

                        that._change();
                        that._placeholder();
                        that.close();
                        wrapper.removeClass(FOCUSED);
                    })
                    .attr({
                        autocomplete: AUTOCOMPLETEVALUE,
                        role: "combobox",
                        "aria-expanded": false
                    });

                that._clear.on("click" + ns + " touchend" + ns, that._clearValue.bind(that));
                that._enable();

                that._old = that._accessor();

                that._placeholder();

                that._initList();

                disabled = $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                }

                that.listView.bind("click", function(e) { e.preventDefault(); });

                that._resetFocusItemHandler = that._resetFocusItem.bind(that);

                kendo.notify(that);
                that._toggleCloseVisibility();
                that._applyCssClasses();

                if (options.label) {
                    that._label();
                }

                that._aria();
            },

            options: {
                name: "AutoComplete",
                enabled: true,
                suggest: false,
                template: "",
                groupTemplate: function (data) { return encode(data); },
                fixedGroupTemplate: function (data) { return encode(data); },
                dataTextField: "",
                minLength: 1,
                enforceMinLength: false,
                delay: 200,
                height: 200,
                filter: "startswith",
                ignoreCase: true,
                highlightFirst: false,
                separator: null,
                placeholder: "",
                animation: {},
                virtual: false,
                value: null,
                clearButton: true,
                autoWidth: false,
                popup: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            _onActionSheetCreate: function() {
                var that = this;

                if (that.filterInput) {
                    that.filterInput
                        .on("keydown" + ns, that._keydown.bind(that))
                        .on("keypress" + ns, that._keypress.bind(that))
                        .on("input" + ns, that._search.bind(that))
                        .on("paste" + ns, that._search.bind(that))
                        .attr({
                            autocomplete: AUTOCOMPLETEVALUE,
                            role: "combobox",
                            "aria-expanded": false
                        });

                    that.popup.bind("activate", function () {
                        that.filterInput.val(that.element.val());
                        that.filterInput.trigger("focus");
                    });

                    that.popup.bind("deactivate", function () {
                        that.element.trigger("focus");
                    });
                }
            },

            _onCloseButtonPressed: function() {
                var that = this;

                if (that.filterInput && activeElement() === that.filterInput[0]) {
                    that.element.val(that.filterInput.val());
                }
            },

            _dataSource: function() {
                var that = this;

                if (that.dataSource && that._refreshHandler) {
                    that._unbindDataSource();
                } else {
                    that._progressHandler = that._showBusy.bind(that);
                    that._errorHandler = that._hideBusy.bind(that);
                }

                that.dataSource = DataSource.create(that.options.dataSource)
                    .bind("progress", that._progressHandler)
                    .bind("error", that._errorHandler);
            },

            setDataSource: function(dataSource) {
                this.options.dataSource = dataSource;
                this._dataSource();

                this.listView.setDataSource(this.dataSource);
            },

            events: [
                "open",
                "close",
                CHANGE,
                "select",
                "filtering",
                "dataBinding",
                "dataBound"
            ],

            setOptions: function(options) {
                var listOptions = this._listOptions(options);

                List.fn.setOptions.call(this, options);

                this.listView.setOptions(listOptions);
                this._accessors();
                this._aria();
                this._clearButton();
            },

            _listOptions: function(options) {
                var listOptions = List.fn._listOptions.call(this, $.extend(options, {
                    skipUpdateOnBind: true
                }));

                listOptions.dataValueField = listOptions.dataTextField;
                listOptions.selectedItemChange = null;

                return listOptions;
            },

            _editable: function(options) {
                var that = this,
                    element = that.element,
                    wrapper = that.wrapper.off(ns),
                    readonly = options.readonly,
                    disable = options.disable;

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);

                    element.prop(DISABLED, false)
                           .prop(READONLY, false)
                           .attr(ARIA_DISABLED, false)
                           .attr(ARIA_READONLY, false);
                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable)
                           .attr(ARIA_READONLY, readonly);
                }

                that._toggleCloseVisibility();
            },

            close: function() {
                var that = this;
                var current = that.listView.focus();

                if (current) {
                    current.removeClass(SELECTED);
                }

                that.popup.close();
                that._deactivateItem();
            },

            destroy: function() {
                var that = this;

                that.element.off(ns);
                that._clear.off(ns);
                that.wrapper.off(ns);

                if (that.filterInput) {
                    that.filterInput.off(ns);
                }

                List.fn.destroy.call(that);
            },

            refresh: function() {
                this.listView.refresh();
            },

            select: function(li) {
                this._select(li);
            },

            search: function(word) {
                var that = this,
                options = that.options,
                ignoreCase = options.ignoreCase,
                separator = that._separator(),
                length,
                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,
                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;

                word = word || that._accessor();

                clearTimeout(that._typingTimeout);

                if (separator) {
                    word = wordAtCaret(caret(element)[0], word, separator);
                }

                length = word.length;

                if ((!options.enforceMinLength && !length) || length >= options.minLength) {
                    that._open = true;

                    that._mute(function() {
                        this.listView.value([]);
                    });

                    that._filterSource({
                        value: ignoreCase ? (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) : word,
                        operator: options.filter,
                        field: options.dataTextField,
                        ignoreCase: ignoreCase
                    });

                    that.one("close", that._unifySeparators.bind(that));
                }
                that._toggleCloseVisibility();
            },

            suggest: function(word) {
                var that = this,
                    key = that._last,
                    value = that._accessor(),
                    element = that.element[0],
                    caretIdx = caret(element)[0],
                    separator = that._separator(),
                    words = value.split(separator),
                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),
                    selectionEnd = caretIdx,
                    idx,
                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;

                if (key == keys.BACKSPACE || key == keys.DELETE) {
                    that._last = undefined$1;
                    return;
                }

                word = word || "";

                if (typeof word !== "string") {
                    if (word[0]) {
                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
                    }

                    word = word ? that._text(word) : "";
                }

                if (caretIdx <= 0) {
                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;
                }

                idx = value.substring(0, caretIdx).lastIndexOf(separator);
                idx = idx > -1 ? caretIdx - (idx + separator.length) : caretIdx;
                value = words[wordIndex].substring(0, idx);

                if (word) {
                    word = word.toString();
                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());
                    if (idx > -1) {
                        word = word.substring(idx + value.length);

                        selectionEnd = caretIdx + word.length;

                        value += word;
                    }

                    if (separator && words[words.length - 1] !== "") {
                        words.push("");
                    }

                }

                words[wordIndex] = value;

                that._accessor(words.join(separator || ""));

                if (element === activeElement()) {
                    caret(element, caretIdx, selectionEnd);
                }
            },

            value: function(value) {
                if (value !== undefined$1) {
                    this.listView.value(value);

                    this._accessor(value);
                    this._old = this._accessor();
                    this._oldText = this._accessor();
                } else {
                    return this._accessor();
                }
                this._toggleCloseVisibility();
                this._refreshFloatingLabel();
            },

            _click: function(e) {
                var item = e.item;
                var that = this;
                var element = that.element;
                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));

                e.preventDefault();

                that._active = true;

                if (that.trigger("select", { dataItem: dataItem, item: item })) {
                    that.close();
                    return;
                }
                that._oldText = element.val();
                that._select(item).done(function() {
                    that._blur();

                    caret(element, element.val().length);
                });
            },

            _clearText: $.noop,

            _resetFocusItem: function() {
                var index = this.options.highlightFirst ? 0 : -1;

                if (this.options.virtual) {
                    this.listView.scrollTo(0);
                }

                this.listView.focus(index);
            },

            _listBound: function() {
                var that = this;
                var popup = that.popup;
                var options = that.options;
                var data = that.dataSource.flatView();
                var length = data.length;
                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;
                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();
                var action;

                that._renderFooter();
                that._renderNoData();
                that._toggleNoData(!length);
                that._toggleHeader(!!groupsLength && !!length);

                that._resizePopup();

                popup.position();

                if (length) {
                    if (options.suggest && isActive && that._inputValue()) {
                        that.suggest(data[0]);
                    }
                }

                if (that._open) {
                    that._open = false;
                    action = that._allowOpening() ? "open" : "close";

                    if (that._typingTimeout && !isActive) {
                        action = "close";
                    }

                    if (length) {
                        that._resetFocusItem();

                        if (options.virtual) {
                            that.popup
                                .unbind("activate", that._resetFocusItemHandler)
                                .one("activate", that._resetFocusItemHandler);
                        }
                    }

                    popup[action]();
                    that._typingTimeout = undefined$1;
                }

                if (that._touchScroller) {
                    that._touchScroller.reset();
                }

                that._hideBusy();

                that.trigger("dataBound");
            },

            _mute: function(callback) {
                this._muted = true;
                callback.call(this);
                this._muted = false;
            },

            _listChange: function() {
                var isActive = this._active || this.element[0] === activeElement();

                if (isActive && !this._muted) {
                    this._selectValue(this.listView.selectedDataItems()[0]);
                }
            },

            _selectValue: function(dataItem) {
                var separator = this._separator();
                var text = "";

                if (dataItem) {
                    text = this._text(dataItem);
                }

                if (text === null) {
                    text = "";
                }

                if (separator) {
                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());
                }

                this._prev = text;
                this._accessor(text);
                this._placeholder();
            },

            _unifySeparators: function() {
                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));
                return this;
            },

            _preselect: function(value, text) {
                this._inputValue(text);
                this._accessor(value);

                this._old = this.oldText = this._accessor();

                this.listView.setValue(value);
                this._placeholder();
            },

            _change: function() {
                var that = this;
                var value = that._unifySeparators().value();
                var trigger = value !== List.unifyType(that._old, typeof value);

                var valueUpdated = trigger && !that._typing;
                var itemSelected = that._oldText !== value;

                that._old = value;
                that._oldText = value;

                if (that.filterInput && activeElement() === that.filterInput[0]) {
                    that.element.val(that.filterInput.val());
                }

                if (valueUpdated || itemSelected) {
                    // trigger the DOM change event so any subscriber gets notified
                    that.element.trigger(CHANGE);
                }

                if (trigger) {
                    that.trigger(CHANGE);
                }

                that.typing = false;
                that._toggleCloseVisibility();
            },

            _accessor: function(value) {
                var that = this,
                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];

                if (value !== undefined$1) {
                    element.value = value === null ? "" : value;
                    that._placeholder();
                } else {
                    value = element.value;

                    if (element.className.indexOf("k-readonly") > -1) {
                        if (value === that.options.placeholder) {
                            return "";
                        } else {
                            return value;
                        }
                    }

                    return value;
                }
            },

            _keydown: function(e) {
                var that = this;
                var key = e.keyCode;
                var listView = that.listView;
                var visible = that.popup.visible();
                var current = listView.focus();

                that._last = key;

                if (key === keys.DOWN) {
                    if (visible) {
                        this._move(current ? "focusNext" : "focusFirst");
                    } else if (that.value()) {
                        that._filterSource({
                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),
                            operator: that.options.filter,
                            field: that.options.dataTextField,
                            ignoreCase: that.ignoreCase
                        }).done(function() {
                            if (that._allowOpening()) {
                                that._resetFocusItem();
                                that.popup.open();
                            }
                        });
                    }
                    e.preventDefault();
                } else if (key === keys.ESC ) {
                    if (visible) {
                        e.preventDefault();
                        that.close();
                    } else {
                        that._clearValue();
                    }
                } else if (e.altKey && key === keys.UP && visible) {
                    e.preventDefault();
                    that.close();
                } else if (key === keys.UP) {
                    if (visible) {
                        this._move(current ? "focusPrev" : "focusLast");
                    }
                    e.preventDefault();
                } else if (key === keys.HOME) {
                    this._move("focusFirst");
                } else if (key === keys.END) {
                    this._move("focusLast");
                } else if (key === keys.ENTER || key === keys.TAB) {

                    if (key === keys.ENTER && visible) {
                        e.preventDefault();
                    }

                    if (visible && current) {
                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));
                        if (that.trigger("select", { dataItem: dataItem, item: current })) {
                            return;
                        }

                        this._select(current);
                    }

                    this._blur();
                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
                    e.preventDefault();

                    var direction = key === keys.PAGEDOWN ? 1 : -1;
                    listView.scrollWith(direction * listView.screenHeight());
                } else {
                    // In some cases when the popup is opened resize is triggered which will cause it to close
                    // Setting the below flag will prevent this from happening
                    that.popup._hovered = true;
                    that._search();
                }
            },

            _keypress: function() {
                this._oldText = this.element.val();
                this._typing = true;
            },

            _move: function(action) {
                this.listView[action]();

                if (this.options.suggest) {
                    this.suggest(this.listView.focus());
                }
            },

            _hideBusy: function() {
                var that = this;
                clearTimeout(that._busy);
                that._loading.addClass(HIDDENCLASS);
                that.element.attr("aria-busy", false);
                that._busy = null;
                that._toggleCloseVisibility();
            },

            _showBusy: function() {
                var that = this;

                if (that._busy) {
                    return;
                }

                that._busy = setTimeout(function() {
                    that.element.attr("aria-busy", true);
                    that._loading.removeClass(HIDDENCLASS);
                    that._hideClear();
                }, 100);
            },

            _placeholder: function(show) {
                if (placeholderSupported) {
                    return;
                }

                var that = this,
                    element = that.element,
                    placeholder = that.options.placeholder,
                    value;

                if (placeholder) {
                    value = element.val();

                    if (show === undefined$1) {
                        show = !value;
                    }

                    if (!show) {
                        if (value !== placeholder) {
                            placeholder = value;
                        } else {
                            placeholder = "";
                        }
                    }

                    if (value === that._old && !show) {
                        return;
                    }

                    element.toggleClass("k-readonly", show)
                           .val(placeholder);

                    if (!placeholder && element[0] === document.activeElement) {
                        caret(element[0], 0, 0);
                    }
                }
            },

            _separator: function() {
                var separator = this.options.separator;
                if (separator instanceof Array) {
                   return new RegExp(separator.join("|"), 'gi');
                }
                return separator;
            },

            _defaultSeparator: function() {
                var separator = this.options.separator;
                if (separator instanceof Array) {
                    return separator[0];
                }
                return separator;
            },

            _inputValue: function() {
                return this.element.val();
            },

            _search: function() {
                var that = this;
                clearTimeout(that._typingTimeout);

                that._typingTimeout = setTimeout(function() {
                    if (that._prev !== that._accessor()) {
                        that._prev = that._accessor();
                        that.search();
                    }
                }, that.options.delay);
            },

            _select: function(candidate) {
                var that = this;
                that._active = true;

                return that.listView.select(candidate).done(function() {
                    that._active = false;
                });
            },

            _loader: function() {
                this._loading = $('<span class="k-icon k-i-loading k-input-loading-icon ' + HIDDENCLASS + '"></span>').insertAfter(this.element);
            },

            _clearButton: function() {
                List.fn._clearButton.call(this);

                if (this.options.clearButton) {
                    this._clear.insertAfter(this.element);
                    this.wrapper.addClass("k-autocomplete-clearable");
                }
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            },

            _toggleCloseVisibility: function() {
                var preventShow = this.element.is(":disabled") || this.element.is("[readonly]");

                if (this.value() && !preventShow) {
                    this._showClear();
                } else {
                    this._hideClear();
                }
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    DOMelement = element[0],
                    wrapper;

                wrapper = element.parent();

                if (!wrapper.is("span.k-autocomplete")) {
                    wrapper = element.wrap("<span />").parent();
                }

                wrapper.attr("tabindex", -1);

                wrapper[0].style.cssText = DOMelement.style.cssText;
                element.css({
                    width: "",
                    height: DOMelement.style.height
                });

                that._focused = that.element;
                that.wrapper = wrapper
                    .addClass("k-autocomplete k-input")
                    .addClass(DOMelement.className)
                    .removeClass('input-validation-error');
            },

            _clearValue: function() {
                List.fn._clearValue.call(this);
                this.element.focus();
            }
        });

        ui.plugin(AutoComplete);

        kendo.cssProperties.registerPrefix("AutoComplete", "k-input-");

        kendo.cssProperties.registerValues("AutoComplete", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);
    })(window.kendo.jQuery);
    var kendo$m = kendo;

    var __meta__$p = {
        id: "dropdownlist",
        name: "DropDownList",
        category: "web",
        description: "The DropDownList widget displays a list of values and allows the selection of a single value from the list.",
        depends: [ "list", "html.button", "icons" ],
        features: [ {
            id: "mobile-scroller",
            name: "Mobile scroller",
            description: "Support for kinetic scrolling in mobile device",
            depends: [ "mobile.scroller" ]
        }, {
            id: "virtualization",
            name: "VirtualList",
            description: "Support for virtualization",
            depends: [ "virtuallist" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            encode = kendo.htmlEncode,
            ui = kendo.ui,
            html = kendo.html,
            List = ui.List,
            Select = ui.Select,
            support = kendo.support,
            activeElement = kendo._activeElement,
            ObservableObject = kendo.data.ObservableObject,
            keys = kendo.keys,
            ns = ".kendoDropDownList",
            nsFocusEvent = ns + "FocusEvent",
            DISABLED = "disabled",
            READONLY = "readonly",
            CHANGE = "change",
            FOCUSED = "k-focus",
            STATEDISABLED = "k-disabled",
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            CLICKEVENTS = "click" + ns + " touchend" + ns,
            HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
            TABINDEX = "tabindex",
            STATE_FILTER = "filter",
            STATE_ACCEPT = "accept",
            MSG_INVALID_OPTION_LABEL = "The `optionLabel` option is not valid due to missing fields. Define a custom optionLabel as shown here http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-optionLabel",
            OPEN = "open",
            CLOSE = "close";

        var DropDownList = Select.extend( {
            init: function(element, options) {
                var that = this;
                var index = options && options.index;
                var optionLabel, text, disabled;

                that.ns = ns;
                options = Array.isArray(options) ? { dataSource: options } : options;

                Select.fn.init.call(that, element, options);

                options = that.options;
                element = that.element.on("focus" + ns, that._focusHandler.bind(that));

                that._focusInputHandler = that._focusInput.bind(that);

                that.optionLabel = $();
                that._optionLabel();

                that._inputTemplate();

                that._reset();

                that._prev = "";
                that._word = "";

                that._wrapper();

                that._tabindex();
                that.wrapper.data(TABINDEX, that.wrapper.attr(TABINDEX));

                that._span();

                that._popup();

                that._mobile();

                that._dataSource();

                that._ignoreCase();

                if (options.label) {
                    this._label();
                }

                that._aria();

                that._enable();

                that._oldIndex = that.selectedIndex = -1;

                if (index !== undefined$1) {
                    options.index = index;
                }

                that._initialIndex = options.index;

                that.requireValueMapper(that.options);
                that._initList();
                that.listView.one("dataBound", that._attachAriaActiveDescendant.bind(that));

                that._cascade();

                that.one("set", function(e) {
                    if (!e.sender.listView.bound() && that.hasOptionLabel()) {
                        that._textAccessor(that._optionLabelText());
                    }
                });

                if (options.autoBind) {
                    that.dataSource.fetch();
                } else if (that.selectedIndex === -1) { //selectedIndex !== -1 when cascade functionality happens instantly
                    text = options.text || "";
                    if (!text) {
                        optionLabel = options.optionLabel;

                        if (optionLabel && options.index === 0) {
                            text = optionLabel;
                        } else if (that._isSelect) {
                            text = element.children(":selected").text();
                        }
                    }

                    that._textAccessor(text);
                }

                disabled = $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                }

                that.listView.bind("click", function(e) { e.preventDefault(); });

                kendo.notify(that);
                that._applyCssClasses();
            },

            options: {
                name: "DropDownList",
                enabled: true,
                autoBind: true,
                index: 0,
                text: null,
                value: null,
                delay: 500,
                height: 200,
                dataTextField: "",
                dataValueField: "",
                optionLabel: "",
                cascadeFrom: "",
                cascadeFromField: "",
                cascadeFromParentField: "",
                ignoreCase: true,
                animation: {},
                filter: "none",
                minLength: 1,
                enforceMinLength: false,
                virtual: false,
                template: null,
                valueTemplate: null,
                optionLabelTemplate: null,
                groupTemplate: function (data) { return encode(data); },
                fixedGroupTemplate: function (data) { return encode(data); },
                autoWidth: false,
                popup: null,
                filterTitle: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null,
                popupFilter: true
            },

            events: [
                "open",
                "close",
                CHANGE,
                "select",
                "filtering",
                "dataBinding",
                "dataBound",
                "cascade",
                "set",
                "kendoKeydown"
            ],

            setOptions: function(options) {
                Select.fn.setOptions.call(this, options);

                this.listView.setOptions(this._listOptions(options));

                this._optionLabel();
                this._inputTemplate();
                this._accessors();
                this._removeFilterHeader();
                this._addFilterHeader();
                this._enable();
                this._aria();

                if (!this.value() && this.hasOptionLabel()) {
                    this.select(0);
                }
            },

            destroy: function() {
                var that = this;

                Select.fn.destroy.call(that);

                that.wrapper.off(ns);
                that.wrapper.off(nsFocusEvent);
                that.element.off(ns);

                that._arrow.off();
                that._arrow = null;
                that._arrowIcon = null;

                that.optionLabel.off();

                if (that.filterInput) {
                    that.filterInput.off(nsFocusEvent);
                }
            },

            open: function() {
                var that = this;
                var isFiltered = that.dataSource.filter() ? that.dataSource.filter().filters.length > 0 : false;
                var listView = this.listView;

                if (that.popup.visible()) {
                    return;
                }

                if (!that.listView.bound() || that._state === STATE_ACCEPT) {
                    that._open = true;
                    that._state = "rebind";

                    if (that.filterInput) {
                        that.filterInput.val("");
                        that._prev = "";
                    }

                    if (that.filterInput && that.options.minLength !== 1 && !isFiltered) {
                        that.refresh();
                        that.popup.one("activate", that._focusInputHandler);
                        that.wrapper.attr("aria-activedescendant", listView._optionID);
                        that.popup.open();
                        that._resizeFilterInput();
                    } else {
                        that._filterSource();
                    }
                } else if (that._allowOpening()) {
                    that._focusFilter = true;
                    that.popup.one("activate", that._focusInputHandler);
                    // In some cases when the popup is opened resize is triggered which will cause it to close
                    // Setting the below flag will prevent this from happening
                    that.popup._hovered = true;
                    that.wrapper.attr("aria-activedescendant", listView._optionID);
                    that.popup.open();
                    that._resizeFilterInput();
                    that._focusItem();
                }
            },

            close: function() {
                this._attachAriaActiveDescendant();
                this.popup.close();
            },

            _attachAriaActiveDescendant: function() {
                var wrapper = this.wrapper,
                    inputId = wrapper.find(".k-input-inner").attr('id');

                wrapper.attr("aria-describedby", inputId);
            },

            _focusInput: function() {
                if (!this._hasActionSheet()) {
                    this._focusElement(this.filterInput);
                }
            },

            _resizeFilterInput: function() {
                var filterInput = this.filterInput;
                var originalPrevent = this._prevent;

                if (!filterInput || this._hasActionSheet()) {
                    return;
                }

                var isInputActive = this.filterInput[0] === activeElement();
                var caret = kendo.caret(this.filterInput[0])[0];

                this._prevent = true;

                filterInput.addClass("k-hidden");
                filterInput.closest(".k-list-filter").css("width", this.popup.element.width());
                filterInput.removeClass("k-hidden");

                if (isInputActive) {
                    filterInput.trigger("focus");
                    kendo.caret(filterInput[0], caret);
                }

                this._prevent = originalPrevent;
            },

            _allowOpening: function() {
                return this.hasOptionLabel() || this.filterInput || Select.fn._allowOpening.call(this);
            },

            toggle: function(toggle) {
                this._toggle(toggle, true);
            },

            current: function(candidate) {
                var current;

                if (candidate === undefined$1) {
                    current = this.listView.focus();

                    if (!current && this.selectedIndex === 0 && this.hasOptionLabel()) {
                        return this.optionLabel;
                    }

                    return current;
                }

                this._focus(candidate);
            },

            dataItem: function(index) {
                var that = this;
                var dataItem = null;

                if (index === null) { return index; }

                if (index === undefined$1) {
                    dataItem = that.listView.selectedDataItems()[0];
                } else {
                    if (typeof index !== "number") {
                        if (that.options.virtual) {
                            return that.dataSource.getByUid($(index).data("uid"));
                        }
                        if (index.hasClass("k-list-optionlabel")) {
                            index = -1;
                        } else {
                            index = $(that.items()).index(index);
                        }
                    } else if (that.hasOptionLabel()) {
                        index -= 1;
                    }

                    dataItem = that.dataSource.flatView()[index];
                }

                if (!dataItem) {
                    dataItem = that._optionLabelDataItem();
                }

                return dataItem;
            },

            refresh: function() {
                this.listView.refresh();
            },

            text: function(text) {
                var that = this;
                var loweredText;
                var ignoreCase = that.options.ignoreCase;

                text = text === null ? "" : text;

                if (text !== undefined$1) {
                    if (typeof text !== "string") {
                        that._textAccessor(text);
                        return;
                    }

                    loweredText = ignoreCase ? text.toLowerCase() : text;

                    that._select(function(data) {
                        data = that._text(data);

                        if (ignoreCase) {
                            data = (data + "").toLowerCase();
                        }

                        return data === loweredText;
                    }).done(function() {
                        that._textAccessor(that.dataItem() || text);
                        that._refreshFloatingLabel();
                    });

                } else {
                    return that._textAccessor();
                }
            },

            _clearFilter: function() {
                $(this.filterInput).val("");
                Select.fn._clearFilter.call(this);
            },

            value: function(value) {
                var that = this;
                var listView = that.listView;
                var dataSource = that.dataSource;
                var valueFn = function() { that.value(value); };

                if (value === undefined$1) {
                    value = that._accessor() || that.listView.value()[0];
                    return value === undefined$1 || value === null ? "" : value;
                }

                that.requireValueMapper(that.options, value);

                if (value || !that.hasOptionLabel()) {
                    that._initialIndex = null;
                }

                this.trigger("set", { value: value });

                if (that._request && that.options.cascadeFrom && that.listView.bound()) {
                    if (that._valueSetter) {
                        dataSource.unbind(CHANGE, that._valueSetter);
                    }

                    that._valueSetter = valueFn.bind(that);

                    dataSource.one(CHANGE, that._valueSetter);
                    return;
                }

                if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
                    that._clearFilter();
                } else {
                    that._fetchData();
                }

                listView.value(value).done(function() {
                    that._old = that._valueBeforeCascade = that._accessor();
                    that._oldIndex = that.selectedIndex;
                    that._refreshFloatingLabel();
                });
            },

            hasOptionLabel: function() {
                return this.optionLabel && !!this.optionLabel[0];
            },

            _optionLabel: function() {
                var that = this;
                var options = that.options;
                var optionLabel = options.optionLabel;
                var template = options.optionLabelTemplate;

                if (!optionLabel) {
                    that.optionLabel.off().remove();
                    that.optionLabel = $();
                    return;
                }

                if (!template) {
                    template = function (data) { return (typeof optionLabel === "string" ?
                        encode(data) :
                        encode(kendo.getter(options.dataTextField)(data))); };
                }

                if (typeof template !== "function") {
                    template = kendo.template(template);
                }

                that.optionLabelTemplate = template;

                if (!that.hasOptionLabel()) {
                    that.optionLabel = $('<div role="option" class="k-list-optionlabel"></div>').prependTo(that.list);
                }

                that.optionLabel.html(template(optionLabel))
                                .off()
                                .on(CLICKEVENTS, that._click.bind(that))
                                .on(HOVEREVENTS, that._toggleHover);

            },

            _optionLabelText: function() {
                var optionLabel = this.options.optionLabel;
                return (typeof optionLabel === "string") ? optionLabel : this._text(optionLabel);
            },

            _optionLabelDataItem: function() {
                var that = this;
                var optionLabel = that.options.optionLabel;

                if (that.hasOptionLabel()) {
                    return $.isPlainObject(optionLabel) ? new ObservableObject(optionLabel) : that._assignInstance(that._optionLabelText(), "");
                }

                return undefined$1;
            },

            _buildOptions: function(data) {
                var that = this;
                if (!that._isSelect) {
                    return;
                }

                var value = that.listView.value()[0];
                var optionLabel = that._optionLabelDataItem();
                var optionLabelValue = optionLabel && that._value(optionLabel);

                if (value === undefined$1 || value === null) {
                    value = "";
                }

                if (optionLabel) {
                    if (optionLabelValue === undefined$1 || optionLabelValue === null) {
                        optionLabelValue = "";
                    }

                    optionLabel = '<option value="' + optionLabelValue + '">' + that._text(optionLabel) + "</option>";
                }

                that._options(data, optionLabel, value);

                if (value !== List.unifyType(that._accessor(), typeof value)) {
                    that._customOption = null;
                    that._custom(value);
                }
            },

            _listBound: function() {

                var that = this;
                var initialIndex = that._initialIndex;
                var filtered = that._state === STATE_FILTER;

                var data = that.dataSource.flatView();
                var dataItem;

                that._presetValue = false;

                that._renderFooter();
                that._renderNoData();
                that._toggleNoData(!data.length);

                that._resizePopup(true);

                that.popup.position();

                that._buildOptions(data);

                if (!filtered) {
                    if (that._open) {
                        that.toggle(that._allowOpening());
                    }

                    that._open = false;

                    if (!that._fetch) {
                        if (data.length) {
                            if (!that.listView.value().length && initialIndex > -1 && initialIndex !== null) {
                                that.select(initialIndex);
                            }

                            that._initialIndex = null;
                            dataItem = that.listView.selectedDataItems()[0];
                            if (dataItem && that.text() !== that._text(dataItem)) {
                                that._selectValue(dataItem);
                            }
                        } else if (that._textAccessor() !== that._optionLabelText()) {
                            that.listView.value("");
                            that._selectValue(null);
                            that._oldIndex = that.selectedIndex;
                        }
                    }
                }

                that._hideBusy();
                that.trigger("dataBound");
            },

            _listChange: function() {
                this._selectValue(this.listView.selectedDataItems()[0]);

                if (this._presetValue || (this._old && this._oldIndex === -1)) {
                    this._oldIndex = this.selectedIndex;
                }
            },

            _filterPaste: function() {
                this._search();
            },

            _attachFocusHandlers: function() {
                var that = this;
                var wrapper = that.wrapper;

                wrapper.on("focusin" + nsFocusEvent, that._focusinHandler.bind(that))
                       .on("focusout" + nsFocusEvent, that._focusoutHandler.bind(that));
                if (that.filterInput) {
                    that.filterInput.on("focusin" + nsFocusEvent, that._focusinHandler.bind(that))
                       .on("focusout" + nsFocusEvent, that._focusoutHandler.bind(that));
                }
            },

            _focusHandler: function() {
                this.wrapper.trigger("focus");
            },

            _focusinHandler: function() {
                this.wrapper.addClass(FOCUSED);
                this._prevent = false;
            },

            _focusoutHandler: function() {
                var that = this;
                var isIFrame = window.self !== window.top;

                if (!that._prevent) {
                    clearTimeout(that._typingTimeout);

                    if (support.mobileOS.ios && isIFrame) {
                        that._change();
                    } else {
                        that._blur();
                    }

                    that.wrapper.removeClass(FOCUSED);
                    that._prevent = true;
                    that._open = false;
                    that.element.trigger("blur");
                }
            },

            _wrapperMousedown: function() {
                this._prevent = !!this.filterInput;
            },

            _wrapperClick: function(e) {
                e.preventDefault();
                this.popup.unbind("activate", this._focusInputHandler);
                this._focused = this.wrapper;
                this._prevent = false;
                this._toggle();
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var disable = options.disable;
                var readonly = options.readonly;
                var wrapper = that.wrapper.add(that.filterInput).off(ns);
                var dropDownWrapper = that.wrapper.off(HOVEREVENTS);

                if (!readonly && !disable) {
                    element.prop(DISABLED, false).prop(READONLY, false);

                    dropDownWrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);

                    wrapper
                        .attr(TABINDEX, wrapper.data(TABINDEX))
                        .attr(ARIA_DISABLED, false)
                        .attr(ARIA_READONLY, false)
                        .on("keydown" + ns, that, that._keydown.bind(that))
                        .on(kendo.support.mousedown + ns, that._wrapperMousedown.bind(that))
                        .on("paste" + ns, that._filterPaste.bind(that));

                    that.wrapper.on("click" + ns, that._wrapperClick.bind(that));

                    if (!that.filterInput) {
                        wrapper.on("keypress" + ns, that._keypress.bind(that));
                    } else {
                        wrapper.on("input" + ns, that._search.bind(that));
                    }

                } else if (disable) {
                    wrapper.removeAttr(TABINDEX);
                    dropDownWrapper.addClass(STATEDISABLED);
                } else {
                    dropDownWrapper.removeClass(STATEDISABLED);
                }

                element.attr(DISABLED, disable)
                       .attr(READONLY, readonly);

                wrapper.attr(ARIA_DISABLED, disable)
                        .attr(ARIA_READONLY, readonly);
            },

            _keydown: function(e) {
                var that = this;
                var key = e.keyCode;
                var altKey = e.altKey;
                var isInputActive;
                var handled;

                var isPopupVisible = that.popup.visible();

                if (that.filterInput) {
                    isInputActive = that.filterInput[0] === activeElement();
                }

                if (key === keys.LEFT) {
                    key = keys.UP;
                    handled = true;
                } else if (key === keys.RIGHT) {
                    key = keys.DOWN;
                    handled = true;
                }

                if (handled && isInputActive) {
                    return;
                }

                e.keyCode = key;

                if ((altKey && key === keys.UP) || key === keys.ESC) {
                    that._focusElement(that.wrapper);
                }

                if (that._state === STATE_FILTER && key === keys.ESC) {
                    that._clearFilter();
                    that._open = false;
                    that._state = STATE_ACCEPT;
                }

                if (key === keys.ENTER && that._typingTimeout && that.filterInput && isPopupVisible) {
                    e.preventDefault();
                    return;
                }

                if (key === keys.SPACEBAR && !isInputActive) {
                    that.toggle(!isPopupVisible);
                    e.preventDefault();
                }

                handled = that._move(e);

                if (handled) {
                    return;
                }

                if (!isPopupVisible || !that.filterInput) {
                    var current = that._focus();

                    if (key === keys.HOME) {
                        handled = true;
                        that._firstItem();
                    } else if (key === keys.END) {
                        handled = true;
                        that._lastItem();
                    }

                    if (handled) {
                        if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
                            that._focus(current);
                            return;
                        }

                        that._select(that._focus(), true).done(function() {
                            if (!isPopupVisible) {
                                that._blur();
                            }
                        });
                        e.preventDefault();
                    }
                }

                if (!altKey && !handled && that.filterInput) {
                    that._search();
                }
            },

            _matchText: function(text, word) {
                var ignoreCase = this.options.ignoreCase;

                if (text === undefined$1 || text === null) {
                    return false;
                }

                text = text + "";

                if (ignoreCase) {
                    text = text.toLowerCase();
                }

                return text.indexOf(word) === 0;
            },

            _shuffleData: function(data, splitIndex) {
                var optionDataItem = this._optionLabelDataItem();

                if (optionDataItem) {
                    data = [optionDataItem].concat(data);
                }

                return data.slice(splitIndex).concat(data.slice(0, splitIndex));
            },

            _selectNext: function() {
                var that = this;
                var data = that.dataSource.flatView();
                var dataLength = data.length + (that.hasOptionLabel() ? 1 : 0);
                var isInLoop = sameCharsOnly(that._word, that._last);
                var startIndex = that.selectedIndex;
                var oldFocusedItem;
                var text;

                if (startIndex === -1) {
                    startIndex = 0;
                } else {
                    startIndex += isInLoop ? 1 : 0;
                    startIndex = normalizeIndex(startIndex, dataLength);
                }

                data = data.toJSON ? data.toJSON() : data.slice();
                data = that._shuffleData(data, startIndex);

                for (var idx = 0; idx < dataLength; idx++) {
                    text = that._text(data[idx]);

                    if (isInLoop && that._matchText(text, that._last)) {
                        break;
                    } else if (that._matchText(text, that._word)) {
                        break;
                    }
                }

                if (idx !== dataLength) {
                    oldFocusedItem = that._focus();

                    that._select(normalizeIndex(startIndex + idx, dataLength)).done(function() {
                        var done = function() {
                            if (!that.popup.visible()) {
                                that._change();
                            }
                        };

                        if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
                            that._select(oldFocusedItem).done(done);
                        } else {
                            done();
                        }
                    });
                }
            },

            _keypress: function(e) {
                var that = this;

                if (e.which === 0 || e.keyCode === kendo.keys.ENTER) {
                    return;
                }

                var character = String.fromCharCode(e.charCode || e.keyCode);

                if (that.options.ignoreCase) {
                    character = character.toLowerCase();
                }

                if (character === " ") {
                    e.preventDefault();
                }

                that._word += character;
                that._last = character;

                that._search();
            },

            _popupOpen: function(e) {
                var popup = this.popup;

                if (e.isDefaultPrevented() || this._hasActionSheet()) {
                    return;
                }

                popup.wrapper = kendo.wrap(popup.element);

                if (popup.element.closest(".km-root")[0]) {
                    popup.wrapper.addClass("km-popup km-widget");
                    this.wrapper.addClass("km-widget");
                }
            },

            _popup: function() {
                Select.fn._popup.call(this);
                this.popup.one("open", this._popupOpen.bind(this));
            },

            _postCreatePopup: function() {
                Select.fn._postCreatePopup.call(this);
                this._attachFocusHandlers();
            },

            _getElementDataItem: function(element) {
                if (!element || !element[0]) {
                    return null;
                }

                if (element[0] === this.optionLabel[0]) {
                    return this._optionLabelDataItem();
                }

                return this.listView.dataItemByIndex(this.listView.getElementIndex(element));
            },

            _click: function(e) {
                var that = this;
                var item = e.item || $(e.currentTarget);

                e.preventDefault();

                if (that.trigger("select", { dataItem: that._getElementDataItem(item), item: item })) {
                    that.close();
                    return;
                }

                that._userTriggered = true;

                that._select(item).done(function() {
                    that._blur();
                    that._focusElement(that.wrapper);
                });
            },

            _focusElement: function(element) {
                var active = activeElement();
                var wrapper = this.wrapper;
                var filterInput = this.filterInput;
                var compareElement = element === filterInput ? wrapper : filterInput;
                var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

                if (filterInput && filterInput[0] === element[0] && touchEnabled) {
                    return;
                }

                if (filterInput && (compareElement[0] === active || this._focusFilter)) {
                    this._focusFilter = false;
                    this._prevent = true;
                    this._focused = element.trigger("focus");
                }
            },

            _searchByWord: function(word) {
                if (!word) {
                    return;
                }

                var that = this;
                var ignoreCase = that.options.ignoreCase;

                if (ignoreCase) {
                    word = word.toLowerCase();
                }

                that._select(function(dataItem) {
                    return that._matchText(that._text(dataItem), word);
                });
            },

            _inputValue: function() {
                return this.text();
            },

            _search: function() {
                var that = this;
                var dataSource = that.dataSource;

                clearTimeout(that._typingTimeout);

                if (that._isFilterEnabled()) {
                    that._typingTimeout = setTimeout(function() {
                        var value = that.filterInput.val();

                        if (that._prev !== value) {
                            that._prev = value;
                            that.search(value);
                            that._resizeFilterInput();
                        }

                        that._typingTimeout = null;
                    }, that.options.delay);
                } else {
                    that._typingTimeout = setTimeout(function() {
                        that._word = "";
                    }, that.options.delay);

                    if (!that.listView.bound()) {
                        dataSource.fetch().done(function() {
                            that._selectNext();
                        });
                        return;
                    }

                    that._selectNext();
                }
            },

            _get: function(candidate) {
                var data, found, idx;
                var isFunction = typeof candidate === "function";
                var jQueryCandidate = !isFunction ? $(candidate) : $();

                if (this.hasOptionLabel()) {
                    if (typeof candidate === "number") {
                        if (candidate > -1) {
                            candidate -= 1;
                        }
                    } else if (jQueryCandidate.hasClass("k-list-optionlabel")) {
                        candidate = -1;
                    }
                }

                if (isFunction) {
                    data = this.dataSource.flatView();

                    for (idx = 0; idx < data.length; idx++) {
                        if (candidate(data[idx])) {
                            candidate = idx;
                            found = true;
                            break;
                        }
                    }

                    if (!found) {
                        candidate = -1;
                    }
                }

                return candidate;
            },

            _firstItem: function() {
                if (this.hasOptionLabel()) {
                    this._focus(this.optionLabel);
                } else {
                    this.listView.focusFirst();
                }
            },

            _lastItem: function() {
                this._resetOptionLabel();
                this.listView.focusLast();
            },

            _nextItem: function() {
                var focusIndex;

                if (this.optionLabel.hasClass("k-focus")) {
                    this._resetOptionLabel();
                    this.listView.focusFirst();
                    focusIndex = 1;
                } else {
                    focusIndex = this.listView.focusNext();
                }

                return focusIndex;
            },

            _prevItem: function() {
                var focusIndex;

                if (this.optionLabel.hasClass("k-focus")) {
                    return;
                }

                focusIndex = this.listView.focusPrev();

                if (!this.listView.focus() && !this.options.virtual) {
                    this._focus(this.optionLabel);
                }

                return focusIndex;
            },

            _focusItem: function() {
                var options = this.options;
                var listView = this.listView;
                var focusedItem = listView.focus();
                var index = listView.select();

                index = index[index.length - 1];

                if (index === undefined$1 && options.highlightFirst && !focusedItem) {
                    index = 0;
                }

                if (index !== undefined$1) {
                    listView.focus(index);
                } else {
                    if (options.optionLabel && (!options.virtual || options.virtual.mapValueTo !== "dataItem")) {
                        this._focus(this.optionLabel);
                        this._select(this.optionLabel);
                        this.listView.content.scrollTop(0);
                    } else {
                        listView.scrollToIndex(0);
                    }
                }
            },

            _resetOptionLabel: function(additionalClass) {
                this.optionLabel.removeClass("k-focus" + (additionalClass || "")).removeAttr("id");
            },

            _focus: function(candidate) {
                var listView = this.listView;
                var optionLabel = this.optionLabel;

                if (candidate === undefined$1) {
                    candidate = listView.focus();

                    if (!candidate && optionLabel.hasClass("k-focus")) {
                        candidate = optionLabel;
                    }

                    return candidate;
                }

                this._resetOptionLabel();

                candidate = this._get(candidate);

                listView.focus(candidate);

                if (candidate === -1) {
                    optionLabel.addClass("k-focus")
                               .attr("id", listView._optionID);

                    if (this.filterInput) {
                        this.filterInput
                            .removeAttr("aria-activedescendant")
                            .attr("aria-activedescendant", listView._optionID);
                    }
                }
            },

            _select: function(candidate, keepState) {
                var that = this;

                candidate = that._get(candidate);

                return that.listView.select(candidate).done(function() {
                    if (!keepState && that._state === STATE_FILTER) {
                        that._state = STATE_ACCEPT;
                    }

                    if (candidate === -1) {
                        that._selectValue(null);
                    }
                });
            },

            _selectValue: function(dataItem) {
                var that = this;
                var optionLabel = that.options.optionLabel;
                var idx = that.listView.select();

                var value = "";
                var text = "";

                idx = idx[idx.length - 1];
                if (idx === undefined$1) {
                    idx = -1;
                }

                this._resetOptionLabel(" k-selected");

                if (dataItem || dataItem === 0) {
                    text = dataItem;
                    value = that._dataValue(dataItem);
                    if (optionLabel) {
                        idx += 1;
                    }
                } else if (optionLabel) {
                    that._focus(that.optionLabel.addClass("k-selected"));

                    text = that._optionLabelText();

                    if (typeof optionLabel === "string") {
                        value = "";
                    } else {
                        value = that._value(optionLabel);
                    }

                    idx = 0;
                }

                that.selectedIndex = idx;

                if (value === null) {
                    value = "";
                }

                that._textAccessor(text);
                that._accessor(value, idx);

                that._triggerCascade();
            },

            _mobile: function() {
                var that = this,
                    popup = that.popup,
                    mobileOS = support.mobileOS,
                    root = popup.element.parents(".km-root").eq(0);

                if (root.length && mobileOS) {
                    popup.options.animation.open.effects = (mobileOS.android || mobileOS.meego) ? "fadeIn" : (mobileOS.ios || mobileOS.wp) ? "slideIn:up" : popup.options.animation.open.effects;
                }
            },

            _span: function() {
                var that = this,
                    wrapper = that.wrapper,
                    SELECTOR = "span.k-input-value-text",
                    id = kendo.guid(),
                    options = that.options,
                    span, arrowBtn;

                span = wrapper.find(SELECTOR);

                if (!span[0]) {
                    arrowBtn = html.renderButton('<span role="button" class="k-input-button" aria-label="select"></span>', {
                        icon: "caret-alt-down",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none"
                    });

                    wrapper.append('<span id="' + id + '" unselectable="on" class="k-input-inner">' +
                                '<span class="k-input-value-text"></span>' +
                            '</span>')
                        .append(arrowBtn)
                        .append(that.element);

                    span = wrapper.find(SELECTOR);
                }

                that.span = span;
                that._arrow = wrapper.find(".k-input-button");
                that._arrowIcon = that._arrow.find(".k-icon,.k-svg-icon");
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    DOMelement = element[0],
                    wrapper;

                wrapper = element.parent();

                if (!wrapper.is("span.k-picker")) {
                    wrapper = element.wrap("<span />").parent();
                    wrapper[0].style.cssText = DOMelement.style.cssText;
                    wrapper[0].title = DOMelement.title;
                }

                that._focused = that.wrapper = wrapper
                    .addClass("k-picker k-dropdownlist")
                    .addClass(DOMelement.className)
                    .removeClass('input-validation-error')
                    .css("display", "")
                    .attr({
                        accesskey: element.attr("accesskey"),
                        unselectable: "on",
                        role: "combobox",
                        "aria-expanded": false
                    });

                element.hide().removeAttr("accesskey");
            },

            _clearSelection: function(parent) {
                this.select(parent.value() ? 0 : -1);
            },

            _openHandler: function(e) {
                this._adjustListWidth();

                if (this.trigger(OPEN)) {
                    e.preventDefault();
                } else {
                    this.wrapper.attr("aria-expanded", true);
                    this.ul.attr("aria-hidden", false);
                }
            },

            _closeHandler: function(e) {
                if (this.trigger(CLOSE)) {
                    e.preventDefault();
                } else {
                    this.wrapper.attr("aria-expanded", false);
                    this.ul.attr("aria-hidden", true);
                }
            },

            _inputTemplate: function() {
                var that = this,
                    template = that.options.valueTemplate;


                if (!template) {
                    template = function (data) { return encode(that._text(data)); };
                } else {
                    template = kendo.template(template);
                }

                that.valueTemplate = template;

                if (that.hasOptionLabel() && !that.options.optionLabelTemplate) {
                    try {
                        that.valueTemplate(that._optionLabelDataItem());
                    } catch (e) {
                        throw new Error(MSG_INVALID_OPTION_LABEL);
                    }
                }
            },

            _textAccessor: function(text) {
                var dataItem = null;
                var template = this.valueTemplate;
                var optionLabelText = this._optionLabelText();
                var span = this.span;

                if (text === undefined$1) {
                    return span.text();
                }

                if ($.isPlainObject(text) || text instanceof ObservableObject) {
                    dataItem = text;
                } else if (optionLabelText && optionLabelText === text) {
                    dataItem = this.options.optionLabel;
                }

                if (!dataItem) {
                    dataItem = this._assignInstance(text, this._accessor());
                }

                if (this.hasOptionLabel()) {
                    if (dataItem === optionLabelText || this._text(dataItem) === optionLabelText) {
                        template = this.optionLabelTemplate;

                        if (typeof this.options.optionLabel === "string" && !this.options.optionLabelTemplate) {
                            dataItem = optionLabelText;
                        }
                    }
                }

                try {
                    span.html(template(dataItem));
                } catch (e) {
                    //dataItem has missing fields required in custom template
                    span.html("");
                }
            },

            _preselect: function(value, text) {
                if (!value && !text) {
                    text = this._optionLabelText();
                }

                this._accessor(value);
                this._textAccessor(text);

                this._old = this._accessor();
                this._oldIndex = this.selectedIndex;

                this.listView.setValue(value);

                this._initialIndex = null;
                this._presetValue = true;
            },

            _assignInstance: function(text, value) {
                var dataTextField = this.options.dataTextField;
                var dataItem = {};

                if (dataTextField) {
                    assign(dataItem, dataTextField.split("."), text);
                    assign(dataItem, this.options.dataValueField.split("."), value);
                    dataItem = new ObservableObject(dataItem);
                } else {
                    dataItem = text;
                }

                return dataItem;
            }
        });

        function assign(instance, fields, value) {
            var idx = 0,
                lastIndex = fields.length - 1,
                field;

            for (; idx < lastIndex; ++idx) {
                field = fields[idx];

                if (!(field in instance)) {
                    instance[field] = {};
                }

                instance = instance[field];
            }

            instance[fields[lastIndex]] = value;
        }

        function normalizeIndex(index, length) {
            if (index >= length) {
                index -= length;
            }
            return index;
        }

        function sameCharsOnly(word, character) {
            for (var idx = 0; idx < word.length; idx++) {
                if (word.charAt(idx) !== character) {
                    return false;
                }
            }
            return true;
        }

        ui.plugin(DropDownList);

        kendo.cssProperties.registerPrefix("DropDownList", "k-picker-");

        kendo.cssProperties.registerValues("DropDownList", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);
    })(window.kendo.jQuery);
    var kendo$l = kendo;

    var __meta__$o = {
        id: "combobox",
        name: "ComboBox",
        category: "web",
        description: "The ComboBox widget allows the selection from pre-defined values or entering a new value.",
        depends: [ "list", "html.button" ],
        features: [ {
            id: "mobile-scroller",
            name: "Mobile scroller",
            description: "Support for kinetic scrolling in mobile device",
            depends: [ "mobile.scroller" ]
        }, {
            id: "virtualization",
            name: "VirtualList",
            description: "Support for virtualization",
            depends: [ "virtuallist" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            encode = kendo.htmlEncode,
            ui = kendo.ui,
            html = kendo.html,
            List = ui.List,
            Select = ui.Select,
            caret = kendo.caret,
            support = kendo.support,
            placeholderSupported = support.placeholder,
            activeElement = kendo._activeElement,
            keys = kendo.keys,
            ns = ".kendoComboBox",
            nsFocusEvent = ns + "FocusEvent",
            CLICK = "click" + ns,
            MOUSEDOWN = "mousedown" + ns,
            DISABLED = "disabled",
            READONLY = "readonly",
            CHANGE = "change",
            LOADING = "k-i-loading k-input-loading-icon",
            FOCUSED = "k-focus",
            STATEDISABLED = "k-disabled",
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            AUTOCOMPLETEVALUE = "off",
            STATE_FILTER = "filter",
            STATE_ACCEPT = "accept",
            STATE_REBIND = "rebind",
            HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
            newLineRegEx = /(\r\n|\n|\r)/gm,
            NON_PRINTABLE_KEYS = [16,17,18,19,20,33,34,37,39,45,91,92,144,145];

        var ComboBox = Select.extend({
            init: function(element, options) {
                var that = this, text, disabled;

                that.ns = ns;

                options = Array.isArray(options) ? { dataSource: options } : options;

                Select.fn.init.call(that, element, options);

                options = that.options;
                element = that.element.on("focus" + ns, that._focusHandler.bind(that));

                options.placeholder = options.placeholder || element.attr("placeholder");

                that._reset();

                that._wrapper();

                that._input();

                that._clearButton();

                that._tabindex(that.input);

                that._popup();

                that._dataSource();
                that._ignoreCase();

                that._enable();

                that._attachFocusEvents();

                that._oldIndex = that.selectedIndex = -1;

                that._initialIndex = options.index;

                that.requireValueMapper(that.options);
                that._initList();

                that._cascade();

                if (options.autoBind) {
                    that._filterSource();
                } else {
                    text = options.text;

                    if (!text && that._isSelect) {
                        text = element.children(":selected").text();
                    }

                    if (text) {
                        that._setText(text);
                    }
                }

                if (!text) {
                    that._placeholder();
                }

                disabled = $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                }

                kendo.notify(that);
                that._toggleCloseVisibility();
                that._applyCssClasses();

                if (options.label) {
                    that._label();
                }

                that._aria();
            },

            options: {
                name: "ComboBox",
                enabled: true,
                index: -1,
                text: null,
                value: null,
                autoBind: true,
                delay: 200,
                dataTextField: "",
                dataValueField: "",
                minLength: 1,
                enforceMinLength: false,
                height: 200,
                highlightFirst: true,
                filter: "none",
                placeholder: "",
                suggest: false,
                cascadeFrom: "",
                cascadeFromField: "",
                cascadeFromParentField: "",
                cascadeOnCustomValue: false,
                ignoreCase: true,
                animation: {},
                virtual: false,
                template: null,
                groupTemplate: function (data) { return encode(data); },
                fixedGroupTemplate: function (data) { return encode(data); },
                clearButton: true,
                syncValueAndText: true,
                autoWidth: false,
                popup: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null,
                clearOnEscape: true
            },

            events: [
                "open",
                "close",
                CHANGE,
                "select",
                "filtering",
                "dataBinding",
                "dataBound",
                "cascade",
                "set"
            ],

            setOptions: function(options) {
                var listOptions = this._listOptions(options);

                Select.fn.setOptions.call(this, options);

                this.listView.setOptions(listOptions);

                this._accessors();
                this._aria();
                this._clearButton();
            },

            destroy: function() {
                var that = this;

                that.input.off(ns);
                that.input.off(nsFocusEvent);
                that.element.off(ns);
                that.wrapper.off(ns);
                clearTimeout(that._pasteTimeout);

                if (that.filterInput) {
                    that.filterInput.off(ns);
                }

                that._arrow.off(CLICK + " " + MOUSEDOWN);
                that._clear.off(CLICK + " " + MOUSEDOWN);

                Select.fn.destroy.call(that);
            },

            _onActionSheetCreate: function() {
                var that = this;

                if (that.filterInput) {
                    that.filterInput
                        .on("keydown" + ns, that._keydown.bind(that))
                        .on("input" + ns, that._search.bind(that))
                        .on("paste" + ns, that._inputPaste.bind(that))
                        .attr({
                            "role": "combobox",
                            "aria-expanded": false
                        });

                    that.popup.bind("activate", function () {
                        that.filterInput.val(that.input.val());
                        that.filterInput.trigger("focus");
                    });

                    that.popup.bind("deactivate", function () {
                        that.input.trigger("focus");
                    });
                }
            },

            _onCloseButtonPressed: function() {
                var that = this;
                var textField = that.options.dataTextField || "text";
                var current = that.listView.focus();

                if (!current) {
                    if (that._syncValueAndText() || that._isSelect) {
                        if (!that.dataItem() || that.dataItem()[textField] !== that.input.val()) {
                            var input = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.input;
                            that._accessor(input.val());
                        }
                    }

                    if (that.options.highlightFirst) {
                        that.listView.value(that.input.val());
                        that._blur();
                    } else {
                        that._oldText = that.text();
                    }
                }
            },

            _isValueChanged: function(value) {
                return value !== List.unifyType(this._old, typeof value) &&
                    value !== List.unifyType(this._oldText, typeof value);
            },

            _change: function() {
                var that = this;
                var text = that.text();
                var hasText = text && text !== that._oldText && text !== that.options.placeholder;
                var index = that.selectedIndex;
                var isCustom = index === -1;

                if (that.filterInput && activeElement() === that.filterInput[0] && isCustom && hasText) {
                    that.input.val(that.filterInput.val());
                }

                if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {
                    that._old = "";
                    that._oldIndex = index;
                    that._oldText = text;

                    if (!that._typing) {
                        // trigger the DOM change event so any subscriber gets notified
                        that.element.trigger(CHANGE);
                    }

                    that.trigger(CHANGE);
                    that._typing = false;
                    return;
                }

                Select.fn._change.call(that);

                that._oldText = that.text && that.text();

                that._toggleCloseVisibility();
            },

            _attachFocusEvents: function() {
                var that = this;
                that.input.on("focus" + nsFocusEvent, that._inputFocus.bind(that))
                          .on("focusout" + nsFocusEvent, that._inputFocusout.bind(that));
            },

            _focusHandler: function(e) {
                if (e.target === this.element[0]) {
                    this.input.trigger("focus");
                }
            },

            _arrowClick: function() {
                this._toggle();
            },

            _inputFocus: function() {
                this.wrapper.addClass(FOCUSED);
                this._placeholder(false);
            },

            _inputFocusout: function(e) {
                var that = this;
                var value = that.value();
                var isClearButton = !$(e.relatedTarget).closest('.k-clear-value').length;

                if (that.filterInput && e.relatedTarget === that.filterInput[0]) {
                    return;
                }

                that._userTriggered = true;
                that.wrapper.removeClass(FOCUSED);
                clearTimeout(that._typingTimeout);
                that._typingTimeout = null;

                if (isClearButton) {
                  that.text(that.text());
                }

                var item = that._focus();
                var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));

                if (value !== that.value() && that.trigger("select", { dataItem: dataItem, item: item })) {
                    that.value(value);
                    return;
                }

                that._placeholder();
                that._valueBeforeCascade = that._old;

                if (isClearButton) {
                    that._blur();

                    that.element.trigger("blur");
                }
            },

            _inputPaste: function() {
                var that = this;
                clearTimeout(that._pasteTimeout);
                that._pasteTimeout = null;

                that._pasteTimeout = setTimeout(function() {
                    that.search();
                });
            },

            _editable: function(options) {
                var that = this,
                    disable = options.disable,
                    readonly = options.readonly,
                    wrapper = that.wrapper.off(ns),
                    input = that.element.add(that.input.off(ns)),
                    arrow = that._arrow.off(CLICK + " " + MOUSEDOWN),
                    clear = that._clear;

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);

                    input.prop(DISABLED, false)
                         .prop(READONLY, false)
                         .attr(ARIA_DISABLED, false)
                         .attr(ARIA_READONLY, false);

                    arrow.on(CLICK, that._arrowClick.bind(that))
                         .on(MOUSEDOWN, function(e) { e.preventDefault(); });

                    clear.on(CLICK + " touchend" + ns, that._clearValue.bind(that));

                    that.input
                        .on("keydown" + ns, that._keydown.bind(that))
                        .on("input" + ns, that._search.bind(that))
                        .on("paste" + ns, that._inputPaste.bind(that));

                    that.wrapper.on(CLICK + ns, that._focusHandler.bind(that));
                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    input.attr(DISABLED, disable)
                         .attr(READONLY, readonly)
                         .attr(ARIA_DISABLED, disable)
                         .attr(ARIA_READONLY, readonly);
                }

                that._toggleCloseVisibility();
            },

            open: function() {
                var that = this;
                var state = that._state;
                var isFiltered = that.dataSource.filter() ? that.dataSource.filter().filters.length > 0 : false;
                var reinitialized = !that.ul.find(that.listView.focus()).length;

                if (that.popup.visible()) {
                    return;
                }

                if ((!that.listView.bound() && state !== STATE_FILTER) || state === STATE_ACCEPT) {
                    that._open = true;
                    that._state = STATE_REBIND;

                    if ((that.options.minLength !== 1 && !isFiltered) || (isFiltered && that.value() && that.selectedIndex === -1 )) {
                        that.refresh();
                        that._openPopup();
                        if (!this.options.virtual) {
                            that.listView.bound(false);
                        }
                    } else {
                        that._filterSource();
                    }
                } else if (that._allowOpening()) {
                    // In some cases when the popup is opened resize is triggered which will cause it to close
                    // Setting the below flag will prevent this from happening
                    that.popup._hovered = true;
                    that._openPopup();
                    if (that.options.virtual) {
                        that._focusItem();
                    } else if (reinitialized && that.options.highlightFirst) {
                        that.listView.focus(0);
                    }
                }
            },

            _scrollToFocusedItem: function() {
                var listView = this.listView;

                listView.scrollToIndex(listView.getElementIndex(listView.focus()));
            },

            _openPopup: function() {
                this.popup.one("activate", this._scrollToFocusedItem.bind(this));
                this.popup.open();
            },

            _updateSelectionState: function() {
                var that = this;
                var text = that.options.text;
                var value = that.options.value;

                if (that.listView.isFiltered()) {
                    return;
                }

                if (that.selectedIndex === -1) {
                    if (text === undefined$1 || text === null) {
                        text = value;
                    }

                    that._accessor(value);
                    that.input.val(text || that.input.val());
                    that._placeholder();
                } else if (that._oldIndex === -1) {
                    that._oldIndex = that.selectedIndex;
                }
            },

            _buildOptions: function(data) {
                var that = this;
                if (!that._isSelect) {
                    return;
                }

                var custom = that._customOption;

                if (that._state === STATE_REBIND) {
                    that._state = "";
                }

                that._customOption = undefined$1;
                that._options(data, "", that.value());

                if (custom && custom[0].selected && !that.listView._emptySearch) {
                    that._custom(custom.val());
                }
            },

            _updateSelection: function() {
                var that = this;
                var listView = that.listView;
                var initialIndex = that._initialIndex;
                var hasInitialIndex = initialIndex !== null && initialIndex > -1;
                var filtered = that._state === STATE_FILTER;

                if (filtered) {
                    $(listView.focus()).removeClass("k-selected");
                    return;
                }

                if (that._fetch) {
                    return;
                }

                if (!listView.value().length) {
                    if (hasInitialIndex) {
                        that.select(initialIndex);
                    } else if (that._accessor()) {
                        listView.value(that._accessor());
                    }
                }

                that._initialIndex = null;
                var dataItem = listView.selectedDataItems()[0];

                if (!dataItem) {
                    return;
                }

                if (that._value(dataItem) !== that.value()) {
                    that._custom(that._value(dataItem));
                } else if (that._value(dataItem) !== that.element[0].value) {
                    that._accessor(that._value(dataItem));
                }

                if (that.text() && that.text() !== that._text(dataItem)) {
                    that._selectValue(dataItem);
                }
            },

            _updateItemFocus: function() {
                var listView = this.listView;

                if (!this.options.highlightFirst) {
                    listView.focus(-1);
                } else if (!listView.focus() && !listView.focusIndex()) {
                    listView.focus(0);
                }
            },

            _listBound: function() {
                var that = this;
                var isActive = that.input[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();

                var data = that.dataSource.flatView();
                var skip = that.listView.skip();
                var length = data.length;
                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;
                var isFirstPage = skip === undefined$1 || skip === 0;

                that._presetValue = false;

                that._renderFooter();
                that._renderNoData();
                that._toggleNoData(!length);
                that._toggleHeader(!!groupsLength && !!length);

                that._resizePopup();

                that.popup.position();

                that._buildOptions(data);

                that._updateSelection();

                if (data.length && isFirstPage) {
                    that._updateItemFocus();

                    if (that.options.suggest && isActive && that.input.val()) {
                        that.suggest(data[0]);
                    }
                }

                if (that._open) {
                    that._open = false;

                    if (that._typingTimeout && !isActive) {
                        that.popup.close();
                    } else {
                        that.toggle(that._allowOpening());
                    }

                    that._typingTimeout = null;
                }

                that._hideBusy();
                that.trigger("dataBound");
            },

            _listChange: function() {
                this._selectValue(this.listView.selectedDataItems()[0]);

                if (this._presetValue) {
                    this._oldIndex = this.selectedIndex;
                }
            },

            _get: function(candidate) {
                var data, found, idx;

                if (typeof candidate === "function") {
                    data = this.dataSource.flatView();

                    for (idx = 0; idx < data.length; idx++) {
                        if (candidate(data[idx])) {
                            candidate = idx;
                            found = true;
                            break;
                        }
                    }

                    if (!found) {
                        candidate = -1;
                    }
                }

                if (!this.dataSource.total() && !candidate) {
                    candidate = -1;
                }

                return candidate;
            },

            _select: function(candidate, keepState) {
                var that = this;

                candidate = that._get(candidate);

                if (candidate === -1) {
                    that.input[0].value = "";
                    that._accessor("");
                }

                return that.listView.select(candidate).done(function() {
                    if (!keepState && that._state === STATE_FILTER) {
                        that._state = STATE_ACCEPT;
                    }
                    that._toggleCloseVisibility();
                });
            },

            _selectValue: function(dataItem) {
                var idx = this.listView.select();
                var value = "";
                var text = "";

                idx = idx[idx.length - 1];
                if (idx === undefined$1) {
                    idx = -1;
                }

                this.selectedIndex = idx;

                if (this.listView.isFiltered() && idx !== -1) {
                    this._valueBeforeCascade = this._old;
                }

                if (idx === -1 && !dataItem) {
                    if (this.options.syncValueAndText) {
                        if (this.options.dataTextField === this.options.dataValueField) {
                            text = this._accessor();
                        } else {
                            text = this.input[0].value;
                        }
                        value = text;
                    }
                    else {
                        text = this.text();
                    }
                    this.listView.focus(-1);
                } else {
                    if (dataItem || dataItem === 0) {
                        value = this._dataValue(dataItem);
                        text = this._text(dataItem);
                    }

                    if (value === null) {
                        value = "";
                    }
                }

                this._setDomInputValue(text);
                this._accessor(value !== undefined$1 ? value : text, idx);

                this._placeholder();
                this._triggerCascade();
            },

            _setDomInputValue: function(text) {
                var that = this;
                var currentCaret = caret(this.input);
                var caretStart;

                if (currentCaret && currentCaret.length) {
                    caretStart = currentCaret[0];
                }

                this._prev = this.input[0].value = text;

                if (caretStart && this.selectedIndex === -1) {
                    var mobile = support.mobileOS;
                    if (mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input
                        setTimeout(function() { that.input[0].setSelectionRange(caretStart, caretStart); }, 0);
                    }
                    else {
                        this.input[0].setSelectionRange(caretStart, caretStart);
                    }
                }
            },

            refresh: function() {
                this.listView.refresh();
            },

            _toggleCloseVisibility: function() {
                var preventShow = this.element.is(":disabled") || this.element.is("[readonly]");

                if (this.text() && !preventShow) {
                    this._showClear();
                } else {
                    this._hideClear();
                }
            },

            suggest: function(word) {
                var that = this;
                var element = that.input[0];
                var value = that.text();
                var caretIdx = caret(element)[0];
                var key = that._last;
                var idx;
                var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;

                if (key == keys.BACKSPACE || key == keys.DELETE) {
                    that._last = undefined$1;
                    return;
                }

                word = word || "";

                if (typeof word !== "string") {
                    if (word[0]) {
                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
                    }

                    word = word ? that._text(word) : "";
                }

                if (caretIdx <= 0) {
                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;
                }

                if (word) {
                    word = word.toString();
                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());
                    if (idx > -1) {
                        value += word.substring(idx + value.length);
                    }
                } else {
                    value = value.substring(0, caretIdx);
                }

                if (value.length !== caretIdx || !word) {
                    element.value = value;
                    if (element === activeElement()) {
                        caret(element, caretIdx, value.length);
                    }
                }
            },

            text: function(text) {
                text = text === null ? "" : text;

                var that = this;
                var input = that.filterInput && that.filterInput[0] === activeElement() ? that.filterInput[0] : that.input[0];
                var ignoreCase = that.options.ignoreCase;
                var loweredText = text;
                var dataItem;
                var value;

                if (text === undefined$1) {
                    return input.value;
                }

                if (that.options.autoBind === false && !that.listView.bound()) {
                    that._setText(text);
                    return;
                }

                dataItem = that.dataItem();

                if (dataItem && that._text(dataItem).replace && that._text(dataItem).replace(newLineRegEx,"") === text) {
                    value = that._value(dataItem);

                    if (value === List.unifyType(that._old, typeof value)) {
                        that._triggerCascade();
                        return;
                    }
                }

                if (ignoreCase) {
                    loweredText = loweredText.toLowerCase();
                }

                if (that.dataItem() && that._text(that.dataItem()) === text) {
                    return;
                }

                that._select(function(data) {
                    data = that._text(data);
                    if (ignoreCase) {
                        data = (data + "").toLowerCase();
                    }

                    return data === loweredText;
                }).done(function() {
                    if (that.selectedIndex < 0) {
                        input.value = text;

                        if (that.options.syncValueAndText) {
                            that._accessor(text);
                        }

                        that._cascadeTriggered = true;
                        that._triggerCascade();
                        that._refreshFloatingLabel();
                    }

                    that._prev = input.value;
                });

                that._toggleCloseVisibility();
            },

            toggle: function(toggle) {
                this._toggle(toggle, true);
            },

            value: function(value) {
                var that = this;
                var options = that.options;
                var listView = that.listView;

                if (value === undefined$1) {
                    value = that._accessor() || that.listView.value()[0];
                    return value === undefined$1 || value === null ? "" : value;
                }

                that.requireValueMapper(that.options, value);

                that.trigger("set", { value: value });

                if (value === options.value && that.input.val() === options.text &&
                !that.options.cascadeFrom) {
                    return;
                }

                that._accessor(value);

                if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
                    that._clearFilter();
                } else {
                    that._fetchData();
                }

                listView
                    .value(value)
                    .done(function() {
                        if (that.selectedIndex === -1 && (!listView._selectedDataItems || !listView._selectedDataItems.length)) {
                            that._accessor(value);
                            that.input.val(value);
                            that._placeholder(true);
                        }

                        if (that._userTriggered) {
                             that._old = that._accessor();
                        } else {
                             that._old = that._valueBeforeCascade = that._accessor();
                        }

                        that._oldIndex = that.selectedIndex;

                        that._prev = that._oldText = that.input.val();

                        if (that._state === STATE_FILTER) {
                            that._state = STATE_ACCEPT;
                        }
                        that._toggleCloseVisibility();

                        that._refreshFloatingLabel();
                    });
            },

            _hideBusy: function() {
                var that = this;
                clearTimeout(that._busy);
                that._arrowIcon.removeClass(LOADING);
                that._focused.attr("aria-busy", false);
                that._busy = null;
                that._toggleCloseVisibility();
            },

            _click: function(e) {
                var that = this;
                var item = e.item;
                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));
                var shouldTrigger = true;
                e.preventDefault();

                if (dataItem) {
                    shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));

                    if (!shouldTrigger) {
                       that.input.val(that._text(dataItem));
                    }
                }

                if (shouldTrigger && that.trigger("select", { dataItem: dataItem, item: item })) {
                    that.close();
                    return;
                }

                that._userTriggered = true;

                that._select(item).done(function() {
                    that._blur();
                });
            },

            _syncValueAndText: function() {
                return this.options.syncValueAndText;
            },

            _inputValue: function() {
                return this.text();
            },

            _searchByWord: function(word) {
                var that = this;
                var options = that.options;
                var dataSource = that.dataSource;
                var ignoreCase = options.ignoreCase;
                var predicate = function(dataItem) {
                    var text = that._text(dataItem);
                    if (text !== undefined$1) {
                        text = text + "";
                        if (text !== "" && word === "") {
                            return false;
                        }

                        if (ignoreCase) {
                            text = text.toLowerCase();
                        }

                        return text.indexOf(word) === 0;
                    }
                };

                if (ignoreCase) {
                    word = word.toLowerCase();
                }

                if (!that.ul[0].firstChild) {
                    dataSource.one(CHANGE, function() {
                        if (dataSource.view()[0]) {
                            that.search(word);
                        }
                    }).fetch();
                    return;
                }

                this.listView.focus(this._get(predicate));

                var current = this.listView.focus();

                if (current) {
                    if (options.suggest) {
                        that.suggest(current);
                    }

                    this.open();
                }

                if (this.options.highlightFirst && !word) {
                    this.listView.focusFirst();
                }
            },

            _input: function() {
                var that = this,
                    element = that.element.removeClass("k-input-inner")[0],
                    accessKey = element.accessKey,
                    wrapper = that.wrapper,
                    SELECTOR = "input.k-input-inner",
                    name = element.name || "",
                    options = that.options,
                    input,
                    maxLength,
                    arrowBtn;

                if (name) {
                    name = 'name="' + name + '_input" ';
                }

                input = wrapper.find(SELECTOR);

                if (!input[0]) {
                    arrowBtn = html.renderButton('<button type="button" class="k-input-button" aria-label="expand combobox"></button>', {
                        icon: "caret-alt-down",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none",
                    });

                    wrapper.append('<input ' + name + 'class="k-input-inner" type="text" autocomplete="' + AUTOCOMPLETEVALUE + '"/>')
                        .append(arrowBtn)
                        .append(that.element);

                    input = wrapper.find(SELECTOR);
                }

                input[0].style.cssText = element.style.cssText;
                input[0].title = element.title;

                maxLength = parseInt(this.element.prop("maxlength") || this.element.attr("maxlength"), 10);
                if (maxLength > -1) {
                    input[0].maxLength = maxLength;
                }

                input.addClass(element.className)
                    .css({
                        width: "",
                        height: element.style.height,
                        position: ""
                    })
                    .attr({
                        "role": "combobox",
                        "aria-expanded": false
                    })
                    .show();

                if (placeholderSupported) {
                    input.attr("placeholder", that.options.placeholder);
                }

                if (accessKey) {
                    element.accessKey = "";
                    input[0].accessKey = accessKey;
                }

                that._focused = that.input = input;
                that._arrow = wrapper.find(".k-input-button")
                    .attr({
                        "role": "button",
                        "tabIndex": -1
                    });
                that._arrowIcon = that._arrow.find(".k-icon, .k-svg-icon");
            },

            _clearButton: function() {
                List.fn._clearButton.call(this);

                if (this.options.clearButton) {
                    this._clear.insertAfter(this.input);
                    this.wrapper.addClass("k-combobox-clearable");
                }
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    textField = that.options.dataTextField || "text",
                    isFkey = key >= 112 && key <= 135,
                    isNonPrintableKey = NON_PRINTABLE_KEYS.indexOf(key) > -1;

                that._last = key;

                clearTimeout(that._typingTimeout);
                that._typingTimeout = null;

                if (key === keys.HOME) {
                    that._firstItem();
                } else if (key === keys.END) {
                    that._lastItem();
                } else if (key === keys.ENTER || (key === keys.TAB && that.popup.visible())) {
                    var current = that.listView.focus();
                    var dataItem = that.dataItem();
                    var shouldTrigger = true;

                    if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {
                        current = null;
                    }

                    if (current) {
                        if (that.popup.visible()) {
                            e.preventDefault();
                        }

                        dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(current));

                        if (dataItem) {
                            shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));
                        }

                        if (shouldTrigger && that.trigger("select", { dataItem: dataItem, item: current })) {
                            return;
                        }

                        that._userTriggered = true;

                        that._select(current).done(function() {
                            that._blur();
                            that._valueBeforeCascade = that._old = that.value();
                        });
                    } else {
                        if (that._syncValueAndText() || that._isSelect) {
                            if (!that.dataItem() || that.dataItem()[textField] !== that.input.val()) {
                                var input = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.input;
                                that._accessor(input.val());
                            }
                        }

                        if (that.options.highlightFirst) {
                            that.listView.value(that.input.val());
                            that._blur();
                        } else {
                            that._oldText = that.text();
                        }
                    }
                } else if (key != keys.TAB && !that._move(e) && !isNonPrintableKey && !isFkey && !e.ctrlKey) {
                   that._search();
                } else if (that.options.clearOnEscape && key === keys.ESC && !that.popup.visible() && that.text()) {
                    that._clearValue();
                }
            },

            _placeholder: function(show) {
                if (placeholderSupported) {
                    return;
                }

                var that = this,
                    input = that.input,
                    placeholder = that.options.placeholder,
                    value;

                if (placeholder) {
                    value = that.value();

                    if (show === undefined$1) {
                        show = !value;
                    }

                    input.toggleClass("k-readonly", show);

                    if (!show) {
                        if (!value) {
                            placeholder = "";
                        } else {
                            return;
                        }
                    }

                    input.val(placeholder);

                    if (!placeholder && input[0] === activeElement()) {
                        caret(input[0], 0, 0);
                    }
                }
            },

            _search: function() {
                var that = this;

                clearTimeout(that._typingTimeout);

                that._typingTimeout = setTimeout(function() {
                    var value = that.text();

                    if (value !== "" && that._prev !== value) {
                        that._prev = value;

                        if (that.options.filter === "none" && that.options.virtual) {
                            that.listView.select(-1);
                        }

                        that.search(value);

                        that._toggleCloseVisibility();
                    }
                    else if (value === "" && that._prev !== "" && that._prev !== undefined$1) {
                        that._clearValue();
                        that._open = true;
                        that._state = STATE_REBIND;
                    }

                    that._typingTimeout = null;
                }, that.options.delay);
            },

            _setText: function(text) {
                this.input.val(text);
                this._prev = text;
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    wrapper = element.parent();

                if (!wrapper.is("span.k-input")) {
                    wrapper = element.hide().wrap("<span />").parent();
                    wrapper[0].style.cssText = element[0].style.cssText;
                }

                that.wrapper = wrapper.addClass("k-input k-combobox")
                    .addClass(element[0].className)
                    .removeClass('input-validation-error')
                    .css("display", "");
            },

            _clearSelection: function(parent, isFiltered) {
                var that = this;
                var hasValue = parent.value();
                var custom = hasValue && parent.selectedIndex === -1;

                if (this.selectedIndex == -1 && this.value()) {
                    return;
                }

                if (isFiltered || !hasValue || custom) {
                    that.options.value = "";
                    that.value("");
                }
            },

            _preselect: function(value, text) {
                this.input.val(text);
                this._accessor(value);

                this._old = this._accessor();
                this._oldIndex = this.selectedIndex;

                this.listView.setValue(value);
                this._placeholder();

                this._initialIndex = null;
                this._presetValue = true;
                this._toggleCloseVisibility();
            },

            _clearText: function() {
                this._old = this.value();
                this.text("");
            },

            _clearValue: function() {
                var that = this;
                var input = that.filterInput && that.filterInput[0] === activeElement() ? that.filterInput : that.input;

                Select.fn._clearValue.call(this);
                input.trigger("focus");
            }
        });

        ui.plugin(ComboBox);

        kendo.cssProperties.registerPrefix("ComboBox", "k-input-");

        kendo.cssProperties.registerValues("ComboBox", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);
    })(window.kendo.jQuery);
    var kendo$k = kendo;

    var __meta__$n = {
        id: "html.chip",
        name: "Html.Chip",
        category: "web",
        description: "HTML rendering utility for Kendo UI for jQuery.",
        depends: [ "html.base", "icons" ],
        features: []
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            HTMLBase = kendo.html.HTMLBase;

        var renderChip = function(element, options) {
            if (!element || $.isPlainObject(element)) {
                options = element;
                element = $("<span></span>");
            }

            return (new HTMLChip(element, options)).html();
        };

        var HTMLChip = HTMLBase.extend({
            init: function(element, options) {
                var that = this;
                HTMLBase.fn.init.call(that, element, options);
                that._wrapper();
            },
            options: {
                name: "HTMLChip",
                size: "medium",
                rounded: "medium",
                fillMode: "solid",
                themeColor: "base",
                attr: {},
                icon: "",
                iconClass: "",
                iconAttr: {},
                removable: false,
                removableAttr: {},
                removeIcon: "x-circle",
                removeIconClass: "",
                content: "",
                text: "",
                actions: [],
                stylingOptions: [ "size", "rounded", "fillMode", "themeColor" ]
            },
            _wrapper: function() {
                var that = this,
                    options = that.options;

                options.text = options.text || options.label;
                that.wrapper = that.element.wrap("<div class='k-chip'></div>").parent().attr(options.attr);
                that._addClasses();

                if (options.icon) {
                    that.wrapper.prepend($(kendo.ui.icon({ icon: options.icon, size: "small", iconClass: ("k-chip-icon" + (options.iconClass ? (" " + (options.iconClass)) : '')) })).attr(options.iconAttr));
                } else if (options.iconClass) {
                    that.wrapper.prepend($("<span class='" + options.iconClass + "'></span>").attr(options.iconAttr));
                } else if (options.avatarClass) {
                    that.wrapper.prepend($("<span class='k-chip-avatar k-avatar k-avatar-md k-avatar-solid k-avatar-solid-primary k-rounded-full " + options.avatarClass + "'></span>").attr(options.iconAttr));
                }

                that.element.addClass("k-chip-content");
                if (options.text) {
                    that.element.html('<span class="k-chip-label">' + options.text + '</span>');
                }

                if (options.visible === false) {
                    that.wrapper.addClass("k-hidden");
                }

                if (options.selected === true) {
                    that.wrapper.addClass("k-selected");
                }

                if (options.enabled === false) {
                    that.wrapper.addClass("k-disabled");
                }

                if ((options.actions && options.actions.length > 0) || options.removable) {
                    that._actions();
                }


            },
            _actions: function() {
                var that = this,
                    options = that.options;

                that.actionsWrapper = $("<span class='k-chip-actions'></span>");
                that.actionsWrapper.appendTo(that.wrapper);

                if (options.actions && options.actions.length > 0) {
                    for (var i = 0; i < options.actions.length; i++) {
                        var action = options.actions[i];
                        that.actionsWrapper.append($(("<span class='k-chip-action " + (action.iconClass ? action.iconClass : '') + "'>" + (kendo.ui.icon({ icon: action.icon, iconClass: "k-chip-icon" })) + "</span>")).attr(action.attr ? action.attr : {}));
                    }
                }

                if (options.removable) {
                    that.actionsWrapper.append($(("<span class='k-chip-action k-chip-remove-action'>" + (kendo.ui.icon({ icon: options.removeIcon, iconClass: "k-chip-icon" })) + "</span>")).attr(options.removableAttr));
                }
            }
        });

        $.extend(kendo.html, {
            renderChip: renderChip,
            HTMLChip: HTMLChip
        });

        kendo.cssProperties.registerPrefix("HTMLChip", "k-chip-");

        kendo.cssProperties.registerValues("HTMLChip", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

    })(window.kendo.jQuery);
    var kendo$j = kendo;

    var __meta__$m = {
        id: "html.chiplist",
        name: "Html.ChipList",
        category: "web",
        description: "HTML rendering utility for Kendo UI for jQuery.",
        depends: ["html.base"],
        features: []
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            HTMLBase = kendo.html.HTMLBase;

        var renderChipList = function(element, options) {
            if (arguments[0] === undefined$1 || $.isPlainObject(arguments[0])) {
                options = element;
                element = $("<div></div>");
            }

            return (new HTMLChipList(element, options)).html();
        };

        var HTMLChipList = HTMLBase.extend({
            init: function(element, options) {
                var that = this;
                HTMLBase.fn.init.call(that, element, options);
                that.wrapper = that.element.addClass("k-chip-list");
                that._applyAriaAttributes(options);
                that._addClasses();
            },
            options: {
                name: "HTMLChipList",
                size: "medium",
                stylingOptions: ["size"]
            },
            _applyAriaAttributes: function(options) {
                var that = this;
                options = $.extend({ selectable: "none" }, options);
                var ariaLabelOption = (options.attributes || {})["aria-label"];

                if (options.selectable !== "none") {
                    that.element.attr({
                        "aria-multiselectable": options.selectable === "multiple",
                        role: "listbox",
                        "aria-label": ariaLabelOption || that.element.attr("id") + " listbox",
                        "aria-orientation": "horizontal"
                    });
                } else {
                    that.element.removeAttr("role aria-label aria-multiselectable aria-orientation");
                }
            }
        });

        $.extend(kendo.html, {
            renderChipList: renderChipList,
            HTMLChipList: HTMLChipList
        });

        kendo.cssProperties.registerPrefix("HTMLChipList", "k-chip-list-");

    })(window.kendo.jQuery);
    var kendo$i = kendo;

    var __meta__$l = {
        id: "multiselect",
        name: "MultiSelect",
        category: "web",
        description: "The MultiSelect widget allows the selection from pre-defined values.",
        depends: [ "list", "html.chip", "html.chiplist", "html.button" ],
        features: [ {
            id: "mobile-scroller",
            name: "Mobile scroller",
            description: "Support for kinetic scrolling in mobile device",
            depends: [ "mobile.scroller" ]
        }, {
            id: "virtualization",
            name: "VirtualList",
            description: "Support for virtualization",
            depends: [ "virtuallist" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            List = ui.List,
            encode = kendo.htmlEncode,
            html = kendo.html,
            keys = $.extend({ A: 65 }, kendo.keys),
            activeElement = kendo._activeElement,
            ObservableArray = kendo.data.ObservableArray,
            ID = "id",
            CHIP = ".k-chip",
            ACCEPT = "accept",
            FILTER = "filter",
            REBIND = "rebind",
            OPEN = "open",
            CLOSE = "close",
            CHANGE = "change",
            PROGRESS = "progress",
            SELECT = "select",
            DESELECT = "deselect",
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            ARIA_EXPANDED = "aria-expanded",
            ARIA_HIDDEN = "aria-hidden",
            ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
            ARIA_BUSY = "aria-busy",
            FOCUSEDCLASS = "k-focus",
            SELECTEDCLASS = "k-selected",
            HIDDENCLASS = "k-hidden",
            HOVERCLASS = "k-hover",
            STATEDISABLED = "k-disabled",
            NOCLICKCLASS = "k-no-click",
            DISABLED = "disabled",
            READONLY = "readonly",
            AUTOCOMPLETEVALUE = "off",
            ns = ".kendoMultiSelect",
            CLICK = "click" + ns,
            KEYDOWN = "keydown" + ns,
            MOUSEENTER = "mouseenter" + ns,
            MOUSELEAVE = "mouseleave" + ns,
            HOVEREVENTS = MOUSEENTER + " " + MOUSELEAVE,
            quotRegExp = /"/g,
            isArray = Array.isArray,
            styles = ["font-family",
                      "font-size",
                      "font-stretch",
                      "font-style",
                      "font-weight",
                      "letter-spacing",
                      "text-transform",
                      "line-height"];

        var MultiSelect = List.extend({
            init: function(element, options) {
                var that = this, id, disabled;

                that.ns = ns;
                List.fn.init.call(that, element, options);

                that._optionsMap = {};
                that._customOptions = {};

                that._wrapper();
                that._inputValuesContainer();
                that._tagList();
                that._input();
                that._textContainer();
                that._loader();
                that._clearButton();
                that._arrowButton();

                that._tabindex(that.input);

                element = that.element.attr("multiple", "multiple").hide();
                options = that.options;

                if (!options.placeholder) {
                    options.placeholder = element.data("placeholder");
                }

                id = element.attr(ID);

                if (!id) {
                    id = kendo.guid();
                }

                if (id) {
                    that._tagID = id + "_tag_active";
                    id = id + "_taglist";
                    that.tagList.attr(ID, id);
                }

                that._initialOpen = true;

                if (options.label) {
                    this._label();
                }

                that._aria();

                that._dataSource();
                that._ignoreCase();
                that._popup();

                that._tagTemplate();
                that.requireValueMapper(that.options);
                that._initList();

                that._reset();
                that._enable();
                that._placeholder();

                if (options.autoBind) {
                    that.dataSource.fetch();
                } else if (options.value) {
                    that._preselect(options.value);
                }

                disabled = $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                }

                that._toggleCloseVisibility();
                that._applyCssClasses();

                kendo.notify(that);
            },

            options: {
                name: "MultiSelect",
                tagMode: "multiple",
                enabled: true,
                autoBind: true,
                autoClose: true,
                highlightFirst: true,
                dataTextField: "",
                dataValueField: "",
                filter: "startswith",
                ignoreCase: true,
                minLength: 1,
                messages: {
                    "singleTag": "item(s) selected",
                    "clear": "clear",
                    "deleteTag": "delete",
                    "noData": "No data found.",
                    "downArrow": "select"
                },
                enforceMinLength: false,
                delay: 100,
                value: null,
                maxSelectedItems: null,
                placeholder: "",
                height: 200,
                animation: {},
                virtual: false,
                itemTemplate: "",
                tagTemplate: "",
                groupTemplate: function (data) { return encode(data); },
                fixedGroupTemplate: function (data) { return encode(data); },
                clearButton: true,
                autoWidth: false,
                popup: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            events: [
                OPEN,
                CLOSE,
                CHANGE,
                SELECT,
                DESELECT,
                "filtering",
                "dataBinding",
                "dataBound"
            ],

            setDataSource: function(dataSource) {
                this.options.dataSource = dataSource;

                this._state = "";
                this._dataSource();

                this.persistTagList = false;
                this.listView.setDataSource(this.dataSource);

                if (this.options.autoBind) {
                    this.dataSource.fetch();
                }
            },

            setOptions: function(options) {
                var listOptions = this._listOptions(options);

                List.fn.setOptions.call(this, options);

                this.listView.setOptions(listOptions);


                this._accessors();
                this._aria();
                this._tagTemplate();
                this._placeholder();
                this._clearButton();
                this._arrowButton();
            },

            currentTag: function(candidate) {
                var that = this;

                if (candidate !== undefined$1) {
                    if (that._currentTag) {
                        that._currentTag
                            .removeClass(FOCUSEDCLASS)
                            .removeAttr(ID);

                        that._currentTag.find(".k-chip-action").attr(ARIA_HIDDEN, true);

                        that.input.removeAttr(ARIA_ACTIVEDESCENDANT);
                    }

                    if (candidate) {
                        candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);

                        candidate.find(".k-chip-action").removeAttr(ARIA_HIDDEN);

                        that.input.attr(ARIA_ACTIVEDESCENDANT, that._tagID);
                    }

                    that._currentTag = candidate;
                } else {
                    return that._currentTag;
                }
            },

            dataItems: function() {
                return this.listView.selectedDataItems();
            },

            destroy: function() {
                var that = this,
                    ns = that.ns;

                clearTimeout(that._busy);
                clearTimeout(that._typingTimeout);

                if (that.filterInput) {
                    that.filterInput.off(ns);
                }

                that.wrapper.off(ns);
                that.tagList.off(ns);
                that.input.off(ns);
                that._clear.off(ns);

                List.fn.destroy.call(that);
            },

            _onActionSheetCreate: function() {
                var that = this;

                that.filterInput
                    .on("keydown" + ns, that._keydown.bind(that))
                    .on("input" + ns, that._search.bind(that))
                    .on("paste" + ns, that._search.bind(that))
                    .attr({
                        "role": "combobox",
                        "aria-expanded": false,
                        "aria-controls": that.input.attr("aria-controls"),
                        "aria-autocomplete": that.input.attr("aria-autocomplete"),
                        "aria-describedby": that.input.attr("aria-describedby")
                    });

                that.popup.bind("activate", function () {
                    that.filterInput.val(that.input.val());
                    that.filterInput.trigger("focus");
                });

                that.popup.bind("close", function () {
                    that.input.trigger("focus");
                });
            },

            _aria: function() {
                var that = this,
                    id = that.ul[0].id,
                    autocomplete = this.options.filter === "none" ? "none" : "list",
                    tagListId = that.tagList.attr(ID);

                that.input.attr({
                    "role": "combobox",
                    "aria-expanded": false,
                    "aria-controls": id,
                    "aria-autocomplete": autocomplete,
                    "aria-describedby": tagListId
                });

                that._ariaLabel(that._focused);
            },

            _activateItem: function() {
                if (this.popup.visible()) {
                    List.fn._activateItem.call(this);
                }
                this.currentTag(null);
            },

            _listOptions: function(options) {
                var that = this;
                var listOptions = List.fn._listOptions.call(that, $.extend(options, {
                    selectedItemChange: that._selectedItemChange.bind(that),
                    selectable: "multiple"
                }));

                var itemTemplate = this.options.itemTemplate || this.options.template;
                var template = listOptions.itemTemplate || itemTemplate || listOptions.template;

                if (!template) {
                    template = function (data) { return encode(kendo.getter(listOptions.dataTextField)(data)); };
                }

                listOptions.template = template;

                return listOptions;
            },

            _setListValue: function() {
                List.fn._setListValue.call(this, this._initialValues.slice(0));
            },

            _listChange: function(e) {
                var data = this.dataSource.flatView();
                var optionsMap = this._optionsMap;
                var valueGetter = this._value;

                if (this._state === REBIND) {
                    this._state = "";
                }

                for (var i = 0; i < e.added.length; i++) {
                    if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined$1) {
                        this._render(data); //render select element <option> tags if the item does not persist in the current data view
                        break;
                    }
                }

                this._selectValue(e.added, e.removed);
            },

            _selectedItemChange: function(e) {
                var items = e.items;
                var context;
                var idx;

                for (idx = 0; idx < items.length; idx++) {
                    context = items[idx];
                    this.tagList.children(CHIP).eq(context.index).children("span").first().html(this.tagTextTemplate(context.item));
                }
            },

            _wrapperMousedown: function(e) {
                var that = this;
                var notInput = e.target.nodeName.toLowerCase() !== "input";
                var target = $(e.target);
                var closeButton = target.closest(".k-multiselect-toggle-button, .k-chip").children("[class*='-i-caret-alt-down']")[0];
                var removeButton = target.closest("[class*='-i-x']")[0];

                if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {
                    e.preventDefault();
                }

                if (!removeButton) {
                    if (closeButton && that.popup.visible()) {
                        that.toggle(false);
                    } else {
                        if (that.input[0] !== activeElement() && notInput) {
                            that.input.trigger("focus");
                        }

                        if (that.options.minLength === 1 && !that.popup.visible()) {
                            that.open();
                        }
                    }
                }

            },

            _inputFocus: function() {
                this._placeholder(false, true);
                this.wrapper.addClass(FOCUSEDCLASS);
            },

            _inputFocusout: function(e) {
                var that = this;

                if (that.filterInput && e.relatedTarget === that.filterInput[0]) {
                    return;
                }

                clearTimeout(that._typingTimeout);

                that.wrapper.removeClass(FOCUSEDCLASS);

                that._placeholder(!that.listView.selectedDataItems()[0], true);
                that.close();

                if (that._state === FILTER) {
                    that._state = ACCEPT;
                    that.listView.skipUpdate(true);
                }

                if (that.listView.bound() && that.listView.isFiltered()) {
                    that.persistTagList = true;
                    that._clearFilter();
                }

                that.element.trigger("blur");
            },

            _removeTag: function(tag, shouldTrigger) {
                var that = this;
                var state = that._state;
                var position = tag.index();
                var listView = that.listView;
                var value = listView.value()[position];
                var dataItem = that.listView.selectedDataItems()[position];
                var customIndex = that._customOptions[value];
                var listViewChildren = listView.element[0].children;
                var option;
                var listViewChild;

                if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {
                    that._close();
                    return;
                }

                if (customIndex === undefined$1 && (state === ACCEPT || state === FILTER)) {
                    customIndex = that._optionsMap[value];
                }

                var done = function() {
                    that.currentTag(null);
                    if (shouldTrigger) {
                        that._change();
                    }

                    that._refreshTagListAria();
                    that._close();
                };

                if (customIndex === undefined$1 && listView.select().length) {
                    that.persistTagList = false;
                    listView.select(listView.select()[position]).done(done);
                } else {
                    option = that.element[0].children[customIndex];
                    if (option) {
                        option.selected = false;
                    }

                    listView.removeAt(position);

                    if (listView._removedAddedIndexes) {
                        listView._removedAddedIndexes.splice(position, 1);
                    }

                    listViewChild = listViewChildren[customIndex];
                    if (listViewChild) {
                        listViewChildren[customIndex].classList.remove("k-selected");
                    }
                    if (that.options.tagMode !== "single") {
                        tag.remove();
                    } else {
                        that._updateTagListHTML();
                    }
                    done();
                }
            },

            _tagListClick: function(e) {
                e.preventDefault();
                e.stopPropagation();
                var target = $(e.currentTarget);

                if (target.is("[class*='-i-x-circle']")) {
                    this._removeTag(target.closest(CHIP), true);
                }
            },

            _clearValue: function() {
                var that = this;

                if (that.options.tagMode === "single") {
                    that._clearSingleTagValue();
                } else {
                    that.tagList.children(CHIP).each(function(index, tag) {
                        that._removeTag($(tag), false);
                    });
                }

                that.input.val("");
                that._search();
                that._change();
                that.focus();
                that._hideClear();

                if (that._state === FILTER) {
                    that._state = ACCEPT;
                }
            },

            _clearSingleTagValue: function() {
                var that = this;
                var items = that.dataItems();
                var tags = that.tagList.children(CHIP);
                var persistTagList = that.persistTagList;

                for (var i = 0; i < items.length; i += 1) {
                    if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {
                        that._close();
                        return;
                    }
                }

                if (persistTagList) {
                    that.persistTagList = false;
                }

                that.listView.value([]);
                that.persistTagList = persistTagList;
            },

            _focusHandler: function() {
                var input = this.input;
                var active = activeElement();
                var isActive = input[0] === active;

                if (!isActive) {
                    this.input.trigger("focus");
                }
            },

            _editable: function(options) {
                var that = this,
                    disable = options.disable,
                    readonly = options.readonly,
                    wrapper = that.wrapper.off(ns),
                    tagList = that.tagList.off(ns),
                    input = that.input.off(ns);

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .removeClass(NOCLICKCLASS)
                        .on(HOVEREVENTS, that._toggleHover)
                        .on("mousedown" + ns + " touchend" + ns, that._wrapperMousedown.bind(that))
                        .on(CLICK, that._focusHandler.bind(that));

                    that.input.on(KEYDOWN, that._keydown.bind(that))
                        .on("paste" + ns, that._search.bind(that))
                        .on("input" + ns, that._search.bind(that))
                        .on("focus" + ns, that._inputFocus.bind(that))
                        .on("focusout" + ns, that._inputFocusout.bind(that));

                    that._clear.on(CLICK + " touchend" + ns, that._clearValue.bind(that));

                    input.prop(DISABLED, false)
                         .prop(READONLY, false)
                         .attr(ARIA_DISABLED, false)
                         .attr(ARIA_READONLY, false);

                    that.element.prop(DISABLED, false);

                    tagList
                        .on(MOUSEENTER, CHIP, function() { $(this).addClass(HOVERCLASS); })
                        .on(MOUSELEAVE, CHIP, function() { $(this).removeClass(HOVERCLASS); })
                        .on(CLICK + " touchend" + ns, ".k-chip .k-icon,.k-chip .k-svg-icon", that._tagListClick.bind(that));
                } else {

                    wrapper.toggleClass(STATEDISABLED, disable)
                           .toggleClass(NOCLICKCLASS, readonly);

                    input.attr(DISABLED, disable)
                         .attr(READONLY, readonly)
                         .attr(ARIA_DISABLED, disable)
                         .attr(ARIA_READONLY, readonly);

                    that.element.prop(DISABLED, disable);
                }
            },

            _close: function() {
                var that = this;
                if (that.options.autoClose) {
                    that.close();
                } else {
                    that.popup.position();
                }
            },

            _filterSource: function(filter, force) {
                if (!force) {
                    force = this._retrieveData;
                }
                this._retrieveData = false;
                List.fn._filterSource.call(this, filter, force);
            },

            close: function() {
                this._activeItem = null;
                this.input.removeAttr(ARIA_ACTIVEDESCENDANT);

                this.popup.close();
            },

            open: function() {
                var that = this,
                    filterValue = that.input.val().toLowerCase(),
                    listViewFilter = that.listView.dataSource.filter(),
                    listViewFilterValue;

                if (listViewFilter && listViewFilter.filters.length > 0) {
                    listViewFilterValue = (listViewFilter.filters[0].value || "").toString().toLowerCase();
                }

                if (that._request) {
                    that._retrieveData = false;
                }

                if (that._retrieveData || !that.listView.bound() || (that._state === ACCEPT && filterValue !== listViewFilterValue)) {
                    that._open = true;
                    that._state = REBIND;

                    that.listView.skipUpdate(true);

                    that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;
                    that._filterSource();
                    that._focusItem();
                } else if (that._allowOpening()) {

                    //selects values in autoBind false and non virtual scenario on initial load
                    if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {
                        that.value(that.value() || that._initialValues);
                    }

                    // In some cases when the popup is opened resize is triggered which will cause it to close
                    // Setting the below flag will prevent this from happening
                    that.popup._hovered = true;
                    that._initialOpen = false;
                    that.popup.open({ altTarget: that.wrapper.add(that.element).add(that.input) });
                    that._focusItem();
                }
            },

            toggle: function(toggle) {
                toggle = toggle !== undefined$1 ? toggle : !this.popup.visible();

                this[toggle ? OPEN : CLOSE]();
            },

            refresh: function() {
                this.listView.refresh();
            },

            _floatCheck: function() {
                if (this.listView) {
                    var hasValue = (this.value() && this.value().length);
                    return !hasValue && !this.popup.visible();
                }

                return true;
            },

            _listBound: function() {
                var that = this;
                var data = that.dataSource.flatView();

                that._render(data);
                that._renderFooter();
                that._renderNoData();
                that._toggleNoData(!data.length);
                that._resizePopup();

                if (that._open) {
                    that._open = false;
                    that.toggle(that._allowOpening());
                }

                that.popup.position();
                that._updateItemFocus();

                if (that._touchScroller) {
                    that._touchScroller.reset();
                }

                that._hideBusy();

                that.trigger("dataBound");
            },

            _updateItemFocus: function() {
                var that = this,
                    data = that.dataSource.flatView(),
                    skip = that.listView.skip(),
                    isFirstPage = skip === undefined$1 || skip === 0;

                if (data.length && isFirstPage) {
                    if (!that.options.highlightFirst) {
                        that.listView.focus(-1);
                    } else {
                        that.listView.focusFirst();
                    }
                }
            },

            _inputValue: function() {
                var that = this;
                var inputValue = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput.val() : that.input.val();

                if (that.options.placeholder === inputValue) {
                    inputValue = "";
                }
                return inputValue;
            },

            value: function(value) {
                var that = this;
                var listView = that.listView;
                var oldValue = listView.value().slice();
                var maxSelectedItems = that.options.maxSelectedItems;
                var clearFilters = listView.bound() && listView.isFiltered();

                if (value === undefined$1) {
                    return oldValue;
                }

                that.persistTagList = false;
                that.requireValueMapper(that.options, value);

                value = that._normalizeValues(value);

                if (maxSelectedItems !== null && value.length > maxSelectedItems) {
                    value = value.slice(0, maxSelectedItems);
                }

                if (clearFilters) {
                    that._clearFilter();
                }

                listView.value(value);
                that._old = that._valueBeforeCascade = value.slice(); //get a new array reference

                if (!clearFilters) {
                    that._fetchData();
                }

                that._toggleCloseVisibility();
            },

            _preselect: function(data, value) {
                var that = this;

                if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {
                    data = [data];
                }

                if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {
                    that.dataSource.data(data);
                    that.value(value || that._initialValues);
                    that._retrieveData = true;
                }
            },

            _setOption: function(value, selected) {
                var option = this.element[0].children[this._optionsMap[value]];

                if (option) {
                    option.selected = selected;
                }
            },

            _fetchData: function() {
                var that = this;
                var hasItems = !!that.dataSource.view().length;
                var isEmptyArray = that.listView.value().length === 0;

                if (isEmptyArray || that._request) {
                    return;
                }

                if (that._retrieveData || (!that._fetch && !hasItems)) {
                    that._fetch = true;
                    that._retrieveData = false;
                    that.dataSource.read().done(function() {
                        that._fetch = false;
                    });
                }
            },

            _isBound: function() {
                return this.listView.bound() && !this._retrieveData;
            },

            _dataSource: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    dataSource = options.dataSource || {};

                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

                dataSource.select = element;
                dataSource.fields = [{ field: options.dataTextField },
                                     { field: options.dataValueField }];

                if (that.dataSource && that._refreshHandler) {
                    that._unbindDataSource();
                } else {
                    that._progressHandler = that._showBusy.bind(that);
                    that._errorHandler = that._hideBusy.bind(that);
                }

                that.dataSource = kendo.data.DataSource.create(dataSource)
                                       .bind(PROGRESS, that._progressHandler)
                                       .bind("error", that._errorHandler);
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._resetHandler = function() {
                        setTimeout(function() {
                            that.value(that._initialValues);
                            that._placeholder();
                        });
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            },

            _initValue: function() {
                var value = this.options.value || this.element.val();

                this._old = this._initialValues = this._normalizeValues(value);
            },

            _normalizeValues: function(value) {
                var that = this;

                if (value === null) {
                    value = [];
                } else if (value && $.isPlainObject(value)) {
                    value = [that._value(value)];
                } else if (value && $.isPlainObject(value[0])) {
                    value = $.map(value, function(dataItem) { return that._value(dataItem); });
                } else if (!isArray(value) && !(value instanceof ObservableArray)) {
                    value = [value];
                } else if (isArray(value)) {
                    value = value.slice();
                }

                return value;
            },

            _change: function() {
                var that = this,
                    value = that.value();

                if (!compare(value, that._old)) {
                    that._old = value.slice();

                    that.trigger(CHANGE);

                    // trigger the DOM change event so any subscriber gets notified
                    that.element.trigger(CHANGE);
                }
                that.popup.position();

                that._toggleCloseVisibility();
            },

            _click: function(e) {
                var that = this;
                var item = e.item;

                e.preventDefault();

                that._select(item).done(function() {
                    that._activeItem = item;
                    that._change();
                    that._close();
                });
            },

            _getActiveItem: function() {
                return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();
            },

            _getSelectedIndices: function() {
                return this.listView._selectedIndices || this.listView._selectedIndexes;
            },

            _keydown: function(e) {
                var that = this;
                var key = e.keyCode;
                var tag = that._currentTag;
                var listView = that.listView;
                var hasValue = that.input.val();
                var isRtl = kendo.support.isRtl(that.wrapper);
                var visible = that.popup.visible();
                var dir = 0;
                var activeItemIdx;

                if (key !== keys.ENTER) {
                    this._multipleSelection = false;
                }

                if (key === keys.DOWN) {
                    e.preventDefault();

                    if (!visible) {
                        that.open();

                        if (!listView.focus()) {
                            listView.focusFirst();
                        }
                        return;
                    }

                    if (listView.focus()) {
                        if (!that._activeItem && e.shiftKey) {
                            that._activeItem = listView.focus();
                            dir = -1;
                        }
                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());

                        listView.focusNext();
                        if (!listView.focus()) {
                            listView.focusLast();
                        } else {
                            if (e.shiftKey && !that.options.virtual) {
                                this._multipleSelection = true;
                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);
                            }
                        }
                    } else {
                        listView.focusFirst();
                    }

                } else if (key === keys.UP) {
                    if (visible) {
                        if (!that._activeItem && e.shiftKey) {
                            that._activeItem = listView.focus();
                            dir = 1;
                        }
                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());
                        listView.focusPrev();
                        if (!listView.focus()) {
                            that.close();
                        } else {
                            if (e.shiftKey && !that.options.virtual) {
                                this._multipleSelection = true;
                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);
                            }
                        }
                    }
                    e.preventDefault();
                } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {
                    if (!hasValue) {
                        tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();
                        if (tag[0]) {
                            that.currentTag(tag);
                        }
                    }
                } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {
                    if (!hasValue && tag) {
                        tag = tag.next(CHIP);
                        that.currentTag(tag[0] ? tag : null);
                    }
                } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {
                    this._multipleSelection = true;
                    if (this._getSelectedIndices().length === listView.items().length) {
                        that._activeItem = null;
                    }

                    if (listView.items().length) {
                        that._selectRange(0, listView.items().length - 1);
                    }
                } else if (key === keys.ENTER && visible) {
                    if (!listView.focus()) {
                        return;
                    }

                    e.preventDefault();

                    if (this._multipleSelection) {
                        this._multipleSelection = false;
                         if (listView.focus().hasClass(SELECTEDCLASS)) {
                            that._close();
                            return;
                        }
                    }

                    that._select(listView.focus()).done(function() {
                        that._change();
                        that._close();
                    });
                } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {
                    if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {
                        that._activeItem = null;
                    }
                    if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {
                        that._activeItem = listView.focus();
                    }
                    that._select(listView.focus()).done(function() {
                        that._change();
                    });
                    e.preventDefault();
                } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {
                    var activeIndex = listView.getElementIndex(that._getActiveItem());
                    var currentIndex = listView.getElementIndex(listView.focus());

                    if (activeIndex !== undefined$1 && currentIndex !== undefined$1) {
                        that._selectRange(activeIndex, currentIndex);
                    }

                    e.preventDefault();
                } else if (key === keys.ESC) {
                    if (visible) {
                        e.preventDefault();
                    } else {
                        that.tagList.children(CHIP).each(function(index, tag) {
                            that._removeTag($(tag), false);
                        });
                        that._change();
                    }

                    that.close();
                } else if (key === keys.HOME) {
                    if (visible) {
                        if (!listView.focus()) {
                            that.close();
                        } else {
                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {
                                that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);
                            }
                            listView.focusFirst();
                        }
                    } else if (!hasValue) {
                        tag = that.tagList.children(CHIP).first()[0];

                        if (tag) {
                            that.currentTag($(tag));
                        }
                    }
                } else if (key === keys.END) {
                    if (visible) {
                        if (!listView.focus()) {
                            that.close();
                        } else {
                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {
                                that._selectRange(
                                    listView.getElementIndex(listView.focus()[0]),
                                    listView.element.children().length - 1
                                );
                            }
                            listView.focusLast();
                        }
                    } else if (!hasValue) {
                        tag = that.tagList.children(CHIP).last()[0];

                        if (tag) {
                            that.currentTag($(tag));
                        }
                    }
                } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {
                    that._state = ACCEPT;

                    if (that.options.tagMode === "single") {
                        that._clearSingleTagValue();

                        that._change();
                        that._close();
                        return;
                    }

                    if (key === keys.BACKSPACE && !tag) {
                        tag = that.tagList.children(CHIP).last();
                    }

                    if (tag && tag[0]) {
                        that._removeTag(tag, true);
                    }
                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
                    e.preventDefault();

                    var direction = key === keys.PAGEDOWN ? 1 : -1;
                    listView.scrollWith(direction * listView.screenHeight());
                } else {
                    clearTimeout(that._typingTimeout);
                    that._search();
                }
            },

            _hideBusy: function() {
                var that = this;
                clearTimeout(that._busy);
                that.input.attr(ARIA_BUSY, false);
                that._loading.addClass(HIDDENCLASS);
                that._request = false;
                that._busy = null;

                that._toggleCloseVisibility();
            },

            _showBusyHandler: function() {
                this.input.attr(ARIA_BUSY, true);
                this._loading.removeClass(HIDDENCLASS);
                this._hideClear();
            },

            _showBusy: function() {
                var that = this;

                that._request = true;

                if (that._busy) {
                    return;
                }

                that._busy = setTimeout(that._showBusyHandler.bind(that), 100);
            },

            _placeholder: function(show, skipCaret) {
                var that = this;
                var input = that.input;
                var active = activeElement();
                var placeholder = that.options.placeholder;
                var inputValue = input.val();
                var isActive = input[0] === active;
                var caretPos = inputValue.length;

                if (!isActive || that.options.autoClose || inputValue === placeholder) {
                    caretPos = 0;
                    inputValue = "";
                }

                if (show === undefined$1) {
                    show = false;
                    if (input[0] !== active) {
                        show = !that.listView.selectedDataItems()[0];
                    }
                }

                that._prev = inputValue;
                input.toggleClass("k-readonly", show).val(show ? placeholder : inputValue);

                if (isActive && !skipCaret) {
                    kendo.caret(input[0], caretPos, caretPos);
                }
            },

            _option: function(dataValue, dataText, selected) {
                var option = "<option";

                if (dataValue !== undefined$1) {
                    dataValue += "";

                    if (dataValue.indexOf('"') !== -1) {
                        dataValue = dataValue.replace(quotRegExp, "&quot;");
                    }

                    option += ' value="' + dataValue + '"';
                }

                if (selected) {
                    option += ' selected';
                }

                option += ">";

                if (dataText !== undefined$1) {
                    option += kendo.htmlEncode(dataText);
                }

                return option += "</option>";
            },

            _render: function(data) {
                var selectedItems = this.listView.selectedDataItems();
                var values = this.listView.value();
                var length = data.length;
                var selectedIndex;
                var options = "";
                var dataItem;
                var value;
                var idx;

                if (values.length !== selectedItems.length) {
                    selectedItems = this._buildSelectedItems(values);
                }

                var custom = {};
                var optionsMap = {};

                for (idx = 0; idx < length; idx++) {
                    dataItem = data[idx];
                    value = this._value(dataItem);

                    selectedIndex = this._selectedItemIndex(value, selectedItems);
                    if (selectedIndex !== -1) {
                        selectedItems.splice(selectedIndex, 1);
                    }

                    optionsMap[value] = idx;
                    options += this._option(value, this._text(dataItem), selectedIndex !== -1);
                }

                if (selectedItems.length) {
                    for (idx = 0; idx < selectedItems.length; idx++) {
                        dataItem = selectedItems[idx];

                        value = this._value(dataItem);
                        custom[value] = length;
                        optionsMap[value] = length;

                        length += 1;
                        options += this._option(value, this._text(dataItem), true);
                    }
                }

                this._customOptions = custom;
                this._optionsMap = optionsMap;

                this.element.html(options);
            },

            _buildSelectedItems: function(values) {
                var valueField = this.options.dataValueField;
                var textField = this.options.dataTextField;
                var result = [];
                var item;

                for (var idx = 0; idx < values.length; idx++) {
                    item = {};
                    item[valueField] = values[idx];
                    item[textField] = values[idx];

                    result.push(item);
                }

                return result;
            },

            _selectedItemIndex: function(value, selectedItems) {
                var valueGetter = this._value;
                var idx = 0;

                for (; idx < selectedItems.length; idx++) {
                    if (value === valueGetter(selectedItems[idx])) {
                        return idx;
                    }
                }

                return -1;
            },

            _search: function() {
                var that = this;

                clearTimeout(that._typingTimeout);

                that._typingTimeout = setTimeout(function() {
                    var value = that._inputValue();
                    if (that._prev !== value) {
                        that._prev = value;
                        that.search(value);
                        that._toggleCloseVisibility();
                    }
                }, that.options.delay);
            },

            _toggleCloseVisibility: function() {
                if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {
                    this._showClear();
                } else {
                    this._hideClear();
                }
            },

            _allowOpening: function() {
                return this._allowSelection() && List.fn._allowOpening.call(this);
            },

            _allowSelection: function() {
                var max = this.options.maxSelectedItems;
                return max === null || max > this.listView.value().length;
            },

            updatePersistTagList: function(added, removed) {
                if (this.persistTagList.added &&
                    this.persistTagList.added.length === removed.length &&
                    this.persistTagList.removed &&
                    this.persistTagList.removed.length === added.length) {
                        this.persistTagList = false;
                 } else {
                     this.listView._removedAddedIndexes = this._old.slice();
                     this.persistTagList = {
                         added: added,
                         removed: removed
                     };
                 }
            },

            _selectValue: function(added, removed) {
                var that = this;
                var total = that.dataSource.total();
                var tagList = that.tagList;
                var getter = that._value;
                var removedItem;
                var addedItem;
                var idx;

                if (this.persistTagList) {
                    this.updatePersistTagList(added, removed);
                    that._refreshTagListAria();

                    return;
                }

                if (that.options.tagMode === "multiple") {
                    for (idx = removed.length - 1; idx > -1; idx--) {
                        removedItem = removed[idx];

                        if (tagList.children(CHIP).length) {
                            tagList[0].removeChild(tagList[0].children[removedItem.position]);
                            that._setOption(getter(removedItem.dataItem), false);
                        }
                    }

                    for (idx = 0; idx < added.length; idx++) {
                        addedItem = added[idx];

                        that.tagList.append(that.tagTemplate(addedItem.dataItem));

                        that._setOption(getter(addedItem.dataItem), true);
                    }

                    kendo.applyStylesFromKendoAttributes(that.tagList, ["background-color"]);
                } else {
                    if (!that._maxTotal || that._maxTotal < total) {
                        that._maxTotal = total;
                    }

                    this._updateTagListHTML();

                    for (idx = removed.length - 1; idx > -1; idx--) {
                        that._setOption(getter(removed[idx].dataItem), false);
                    }

                    for (idx = 0; idx < added.length; idx++) {
                        that._setOption(getter(added[idx].dataItem), true);
                    }
                }

                that._refreshTagListAria();
                that._refreshFloatingLabel();

                that._placeholder();
            },

            _refreshTagListAria: function() {
                var that = this;
                html.renderChipList(that.tagList, $.extend({ selectable: that.value().length === 0 ? "none" : "multiple" }, that.options));
            },

            _updateTagListHTML: function() {
                var that = this;
                var values = that.value();
                var total = that.dataSource.total();
                var tagList = that.tagList;

                tagList.children(CHIP).each(function(index, tag) {
                    $(tag).remove();
                });

                if (values.length) {
                    that.tagList.append(that.tagTemplate({
                        values: values,
                        dataItems: that.dataItems(),
                        maxTotal: that._maxTotal,
                        currentTotal: total
                    }));

                    kendo.applyStylesFromKendoAttributes(that.tagList, ["background-color"]);
                }

                that._refreshTagListAria();
            },

            _select: function(candidate) {
                var resolved = $.Deferred().resolve();

                if (!candidate) {
                    return resolved;
                }

                var that = this;
                var listView = that.listView;
                var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));
                var isSelected = candidate.hasClass("k-selected");

                if (that._state === REBIND) {
                    that._state = "";
                }

                if (!that._allowSelection() && !isSelected) {
                    return resolved;
                }

                if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {
                    that._close();
                    return resolved;
                }

                that.persistTagList = false;
                return listView.select(candidate).done(function() {
                    that._placeholder();

                    if (that._state === FILTER) {
                        that._state = ACCEPT;
                        listView.skipUpdate(true);
                    }
                });
            },

            _selectRange: function(startIndex, endIndex) {
                var that = this;
                var listView = this.listView;
                var maxSelectedItems = this.options.maxSelectedItems;
                var indices = this._getSelectedIndices().slice();
                var indicesToSelect = [];
                var i;

                var selectIndices = function(indices) {
                    listView.select(indices).done(function() {
                        indices.forEach(function(index) {
                            var dataItem = listView.dataItemByIndex(index);
                            var candidate = listView.element.children()[index];
                            var isSelected = $(candidate).hasClass("k-selected");

                            that.trigger(isSelected ? SELECT : DESELECT, { dataItem: dataItem, item: $(candidate) });
                        });
                        that._change();
                    });
                };

                if (indices.length - 1 === endIndex - startIndex) {
                    return selectIndices(indices);
                }

                if (startIndex < endIndex) {
                    for (i = startIndex; i <= endIndex; i++) {
                        indicesToSelect.push(i);
                    }
                } else {
                    for (i = startIndex; i >= endIndex; i--) {
                        indicesToSelect.push(i);
                    }
                }

                if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {
                    indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);
                }

                for (i = 0; i < indicesToSelect.length; i++) {
                    var index = indicesToSelect[i];

                    if (this._getSelectedIndices().indexOf(index) == -1) {
                        indices.push(index);
                    } else {
                        indices.splice(indices.indexOf(index), 1);
                    }
                }

                if (!indices.length) {
                    return;
                }

                that.persistTagList = false;
                return selectIndices(indices);
            },

            _input: function() {
                var that = this;
                var element = that.element;
                var accessKey = element[0].accessKey;
                var input = that._inputValuesContainer.children("input.k-input-inner");

                if (!input[0]) {
                    input = $('<input class="k-input-inner" />').appendTo(that._inputValuesContainer);
                }

                element.removeAttr("accesskey");

                that._focused = that.input = input.attr({
                    "autocomplete": AUTOCOMPLETEVALUE,
                    "title": element[0].title
                });

                if (accessKey) {
                    that._focused.attr("accesskey", accessKey);
                }
            },

            _inputValuesContainer: function() {
                var that = this,
                    inputValuesContainer = that.wrapper.children(".k-input-values");

                if (!inputValuesContainer[0]) {
                    inputValuesContainer = $('<div class="k-input-values"></div>').appendTo(that.wrapper);
                }

                that._inputValuesContainer = inputValuesContainer;
            },

            _tagList: function() {
                var that = this,
                    options = that.options,
                    tagList = that._inputValuesContainer.children(".k-chip-list");

                if (!tagList[0]) {
                    tagList = $(html.renderChipList('<div unselectable="on" class="k-selection-multiple" />', $.extend({ selectable: "none" }, options))).appendTo(that._inputValuesContainer);
                }

                that.tagList = tagList;
            },

            _tagTemplate: function() {
                var that = this;
                var options = that.options;
                var tagTemplate = options.tagTemplate;
                var hasDataSource = options.dataSource;
                var isMultiple = options.tagMode === "multiple";
                var singleTag = options.messages.singleTag;
                var defaultTemplate;
                var multipleTemplateFunc;
                var singleTemplateFunc;

                if (that.element[0].length && !hasDataSource) {
                    options.dataTextField = options.dataTextField || "text";
                    options.dataValueField = options.dataValueField || "value";
                }

                multipleTemplateFunc = function (data) { return encode(kendo.getter(options.dataTextField)(data)); };
                singleTemplateFunc = function (ref) {
                    var values = ref.values;

                    return ((values.length) + " " + (encode(singleTag)));
                };

                defaultTemplate = isMultiple ? multipleTemplateFunc : singleTemplateFunc;

                that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;

                that.tagTemplate = function(data) {
                    return html.renderChip('<span unselectable="on">' +
                    '</span>', $.extend({}, options, {
                            fillMode: "solid",
                            rounded: "medium",
                            enabled: true,
                            themeColor: "base",
                            text: tagTemplate(data),
                            attr: {
                                unselectable: "on",
                                "aria-selected": true,
                                role: "option",
                                "aria-keyshortcuts": isMultiple ? "Enter Delete" : "Enter"
                            },
                            removable: isMultiple,
                            removableAttr: {
                                unselectable: "on",
                                "aria-hidden": true,
                                "aria-label": that.options.messages.deleteTag,
                                title: that.options.messages.deleteTag
                            },
                            icon: !isMultiple ? "caret-alt-down" : "",
                            iconAttr: {
                                unselectable: "on",
                                "aria-hidden": true,
                                "aria-label": 'open'
                            }
                        })
                    );
                };
            },

            _loader: function() {
                this._loading = $('<span class="k-icon k-i-loading k-input-loading-icon ' + HIDDENCLASS + '"></span>').insertAfter(this._inputValuesContainer);
            },

            _clearButton: function() {
                List.fn._clearButton.call(this);

                if (this.options.clearButton) {
                    this._clear.insertAfter(this._inputValuesContainer);
                    this.wrapper.addClass("k-multiselect-clearable");
                }
            },

            _arrowButton: function() {
                var arrowTitle = encode(this.options.messages.downArrow),
                    arrow = $(html.renderButton('<button type="button" aria-label="' + arrowTitle + '" class="k-input-button k-multiselect-toggle-button"></button>', $.extend({}, this.options, {
                        icon: "caret-alt-down"
                    })));

                if (this._arrow) {
                    this._arrow.remove();
                    this._arrow = null;
                }

                if (this.options.downArrow) {
                    this._arrow = arrow.attr({
                        "tabIndex": -1
                    });

                    this._arrow.appendTo(this.wrapper);
                }
            },

            _textContainer: function() {
                var computedStyles = kendo.getComputedStyles(this.input[0], styles);

                computedStyles.position = "absolute";
                computedStyles.visibility = "hidden";
                computedStyles.top = -3333;
                computedStyles.left = -3333;

                this._span = $("<span/>").css(computedStyles).appendTo(this.wrapper);
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    wrapper = element.parent("span.k-multiselect");

                if (!wrapper[0]) {
                    wrapper = element.wrap('<span class="k-multiselect k-input" unselectable="on" />').parent();
                    wrapper[0].style.cssText = element[0].style.cssText;
                }

                that.wrapper = wrapper
                                .addClass(element[0].className)
                                .removeClass('input-validation-error').css("display", "");
            },

            _closeHandler: function(e) {
                if (this.trigger(CLOSE)) {
                    e.preventDefault();
                } else {
                    this.input.attr(ARIA_EXPANDED, false);
                    this.ul.attr(ARIA_HIDDEN, true);
                }
            },

            _openHandler: function(e) {
                this._adjustListWidth();

                if (this.trigger(OPEN)) {
                    e.preventDefault();
                } else {
                    this.input.attr(ARIA_EXPANDED, true);
                    this.ul.attr(ARIA_HIDDEN, false);
                }
            }
        });

        function compare(a, b) {
            var length;

            if ((a === null && b !== null) || (a !== null && b === null)) {
                return false;
            }

            length = a.length;
            if (length !== b.length) {
                return false;
            }

            while (length--) {
                if (a[length] !== b[length]) {
                    return false;
                }
            }

            return true;
        }

        ui.plugin(MultiSelect);

        kendo.cssProperties.registerPrefix("MultiSelect", "k-input-");

        kendo.cssProperties.registerValues("MultiSelect", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

    })(window.kendo.jQuery);
    var kendo$h = kendo;

    /***********************************************************************
     * WARNING: this file is auto-generated.  If you change it directly,
     * your modifications will eventually be lost.  The source code is in
     * `kendo-drawing` repository, you should make your changes there and
     * run `src-modules/sync.sh` in this repository.
     */
    /* eslint-disable space-before-blocks, space-before-function-paren, no-multi-spaces */

        var __meta__$k = {
            id: "color",
            name: "Color utils",
            category: "framework",
            advanced: true,
            description: "Color utilities used across components",
            depends: [ "core" ]
        };

    window.kendo = window.kendo || {};

    var Class = kendo.Class;
    var support = kendo.support;

    var namedColors = {
        aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
        aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
        bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
        blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
        burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
        chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
        cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
        darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
        darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
        darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
        darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
        darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
        darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
        darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
        dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
        firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
        fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
        gold: "ffd700", goldenrod: "daa520", gray: "808080",
        grey: "808080", green: "008000", greenyellow: "adff2f",
        honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
        indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
        lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
        lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
        lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
        lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
        lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
        lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
        lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
        linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
        mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
        mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
        midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
        moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
        oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
        orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
        palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
        palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
        peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
        powderblue: "b0e0e6", purple: "800080", red: "ff0000",
        rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
        salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
        seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
        skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
        slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
        steelblue: "4682b4", tan: "d2b48c", teal: "008080",
        thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
        violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
        whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
    };

    var browser = support.browser;

    var matchNamedColor = function (color) {
        var colorNames = Object.keys(namedColors);
        colorNames.push("transparent");

        var regexp = new RegExp("^(" + colorNames.join("|") + ")(\\W|$)", "i");
        matchNamedColor = function (color) { return regexp.exec(color); };

        return regexp.exec(color);
    };

    var BaseColor = Class.extend({
        init: function() {  },

        toHSV: function() { return this; },

        toRGB: function() { return this; },

        toHex: function(options) { return this.toBytes().toHex(options); },

        toBytes: function() { return this; },

        toCss: function(options) { return "#" + this.toHex(options); },

        toCssRgba: function() {
            var rgb = this.toBytes();
            return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
        },

        toDisplay: function() {
            if (browser.msie && browser.version < 9) {
                return this.toCss(); // no RGBA support; does it support any opacity in colors?
            }
            return this.toCssRgba();
        },

        equals: function(c) {
            return c === this || ((c !== null && c !== undefined) && this.toCssRgba() === parseColor(c).toCssRgba());
        },

        diff: function(other) {
            if (other === null) {
                return NaN;
            }

            var c1 = this.toBytes();
            var c2 = other.toBytes();

            return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
                             Math.pow((c1.g - c2.g) * 0.59, 2) +
                             Math.pow((c1.b - c2.b) * 0.11, 2));
        },

        clone: function() {
            var c = this.toBytes();
            if (c === this) {
                c = new Bytes(c.r, c.g, c.b, c.a);
            }

            return c;
        }
    });

    var RGB = BaseColor.extend({
        init: function(r, g, b, a) {
            BaseColor.fn.init.call(this);

            this.r = r;
            this.g = g;
            this.b = b;
            this.a = a;
        },

        toHSV: function() {
            var ref = this;
            var r = ref.r;
            var g = ref.g;
            var b = ref.b;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var delta = max - min;
            var v = max;
            var h, s;

            if (delta === 0) {
                return new HSV(0, 0, v, this.a);
            }

            if (max !== 0) {
                s = delta / max;
                if (r === max) {
                    h = (g - b) / delta;
                } else if (g === max) {
                    h = 2 + (b - r) / delta;
                } else {
                    h = 4 + (r - g) / delta;
                }

                h *= 60;
                if (h < 0) {
                    h += 360;
                }
            } else {
                s = 0;
                h = -1;
            }

            return new HSV(h, s, v, this.a);
        },

        toHSL: function() {
            var ref = this;
            var r = ref.r;
            var g = ref.g;
            var b = ref.b;
            var max = Math.max(r, g, b);
            var min = Math.min(r, g, b);
            var h, s, l = (max + min) / 2;

            if (max === min) {
                h = s = 0;
            } else {
                var d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
                default: break;
                }
            }

            return new HSL(h * 60, s * 100, l * 100, this.a);
        },

        toBytes: function() {
            return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
        }
    });

    var Bytes = RGB.extend({
        init: function(r, g, b, a) {
            RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);
        },

        toRGB: function() {
            return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
        },

        toHSV: function() {
            return this.toRGB().toHSV();
        },

        toHSL: function() {
            return this.toRGB().toHSL();
        },

        toHex: function(options) {
            var value = hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);

            if (options && options.alpha) {
                value += hex(Math.round(this.a * 255), 2);
            }

            return value;
        },

        toBytes: function() {
            return this;
        }
    });

    function hex(n, width, pad) {
        if (pad === void 0) { pad = "0"; }

        var result = n.toString(16);
        while (width > result.length) {
            result = pad + result;
        }

        return result;
    }

    var HSV = BaseColor.extend({
        init: function(h, s, v, a) {
            BaseColor.fn.init.call(this);

            this.h = h;
            this.s = s;
            this.v = v;
            this.a = a;
        },

        toRGB: function() {
            var ref = this;
            var h = ref.h;
            var s = ref.s;
            var v = ref.v;
            var r, g, b;

            if (s === 0) {
                r = g = b = v;
            } else {
                h /= 60;

                var i = Math.floor(h);
                var f = h - i;
                var p = v * (1 - s);
                var q = v * (1 - s * f);
                var t = v * (1 - s * (1 - f));

                switch (i) {
                case 0: r = v; g = t; b = p; break;
                case 1: r = q; g = v; b = p; break;
                case 2: r = p; g = v; b = t; break;
                case 3: r = p; g = q; b = v; break;
                case 4: r = t; g = p; b = v; break;
                default: r = v; g = p; b = q; break;
                }
            }

            return new RGB(r, g, b, this.a);
        },

        toHSL: function() {
            return this.toRGB().toHSL();
        },

        toBytes: function() {
            return this.toRGB().toBytes();
        }
    });

    var HSL = BaseColor.extend({
        init: function(h, s, l, a) {
            BaseColor.fn.init.call(this);

            this.h = h;
            this.s = s;
            this.l = l;
            this.a = a;
        },

        toRGB: function() {
            var h = this.h / 360;
            var s = this.s / 100;
            var l = this.l / 100;
            var r, g, b;

            if (s === 0) {
                r = g = b = l; // achromatic
            } else {
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }

            return new RGB(r, g, b, this.a);
        },

        toHSV: function() {
            return this.toRGB().toHSV();
        },

        toBytes: function() {
            return this.toRGB().toBytes();
        }
    });

    function hue2rgb(p, q, s) {
        var t = s;

        if (t < 0) {
            t += 1;
        }

        if (t > 1) {
            t -= 1;
        }

        if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
        }

        if (t < 1 / 2) {
            return q;
        }

        if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
        }

        return p;
    }

    function alphaFromHex(a) {
        return parseFloat(parseFloat(parseInt(a, 16) / 255 ).toFixed(3));
    }

    function parseColor(value, safe) {
        var m, ret;

        if (value == null || value === "none") {
            return null;
        }

        if (value instanceof BaseColor) {
            return value;
        }

        var color = value.toLowerCase();
        if ((m = matchNamedColor(color))) {
            if (m[1] === "transparent") {
                color = new RGB(1, 1, 1, 0);
            } else {
                color = parseColor(namedColors[m[1]], safe);
            }
            color.match = [ m[1] ];
            return color;
        }
        if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
            ret = new Bytes(parseInt(m[1], 16),
                parseInt(m[2], 16),
                parseInt(m[3], 16), 1);
        } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
            ret = new Bytes(parseInt(m[1] + m[1], 16),
                parseInt(m[2] + m[2], 16),
                parseInt(m[3] + m[3], 16), 1);
        } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) { // Parse 4 digit hex color
            ret = new Bytes(parseInt(m[1] + m[1], 16),
                parseInt(m[2] + m[2], 16),
                parseInt(m[3] + m[3], 16),
                alphaFromHex(m[4] + m[4]));
        } else if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) { // Parse 8 digit hex color
            ret = new Bytes(parseInt(m[1], 16),
                parseInt(m[2], 16),
                parseInt(m[3], 16),
                alphaFromHex(m[4]));
        } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
            ret = new Bytes(parseInt(m[1], 10),
                parseInt(m[2], 10),
                parseInt(m[3], 10), 1);
        } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
            ret = new Bytes(parseInt(m[1], 10),
                parseInt(m[2], 10),
                parseInt(m[3], 10), parseFloat(m[4]));
        } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
            ret = new RGB(parseFloat(m[1]) / 100,
                parseFloat(m[2]) / 100,
                parseFloat(m[3]) / 100, 1);
        } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
            ret = new RGB(parseFloat(m[1]) / 100,
                parseFloat(m[2]) / 100,
                parseFloat(m[3]) / 100, parseFloat(m[4]));
        }

        if (ret) {
            ret.match = m;
        } else if (!safe) {
            throw new Error("Cannot parse color: " + color);
        }

        return ret;
    }

    var DARK_TRESHOLD = 180;

    var Color = Class.extend({
        init: function(value) {
            var this$1$1 = this;

            if (arguments.length === 1) {
                var formats = Color.formats;
                var resolvedColor = this.resolveColor(value);

                for (var idx = 0; idx < formats.length; idx++) {
                    var formatRegex = formats[idx].re;
                    var processor = formats[idx].process;
                    var parts = formatRegex.exec(resolvedColor);

                    if (parts) {
                        var channels = processor(parts);
                        this$1$1.r = channels[0];
                        this$1$1.g = channels[1];
                        this$1$1.b = channels[2];
                    }
                }
            } else {
                this.r = arguments[0];
                this.g = arguments[1];
                this.b = arguments[2];
            }

            this.r = this.normalizeByte(this.r);
            this.g = this.normalizeByte(this.g);
            this.b = this.normalizeByte(this.b);
        },

        toHex: function() {
            var pad = this.padDigit;
            var r = this.r.toString(16);
            var g = this.g.toString(16);
            var b = this.b.toString(16);

            return "#" + pad(r) + pad(g) + pad(b);
        },

        resolveColor: function(value) {
            var color = value || "black";

            if (color.charAt(0) === "#") {
                color = color.substr(1, 6);
            }

            color = color.replace(/ /g, "");
            color = color.toLowerCase();
            color = Color.namedColors[color] || color;

            return color;
        },

        normalizeByte: function(value) {
            if (value < 0 || isNaN(value)) {
                return 0;
            }

            return value > 255 ? 255 : value;
        },

        padDigit: function(value) {
            return (value.length === 1) ? "0" + value : value;
        },

        brightness: function(value) {
            var round = Math.round;

            this.r = round(this.normalizeByte(this.r * value));
            this.g = round(this.normalizeByte(this.g * value));
            this.b = round(this.normalizeByte(this.b * value));

            return this;
        },

        percBrightness: function() {
            return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
        },

        isDark: function() {
            return this.percBrightness() < DARK_TRESHOLD;
        }
    });

    Color.fromBytes = function(r, g, b, a) {
        return new Bytes(r, g, b, a != null ? a : 1);
    };

    Color.fromRGB = function(r, g, b, a) {
        return new RGB(r, g, b, a != null ? a : 1);
    };

    Color.fromHSV = function(h, s, v, a) {
        return new HSV(h, s, v, a != null ? a : 1);
    };

    Color.fromHSL = function(h, s, l, a) {
        return new HSL(h, s, l, a != null ? a : 1);
    };

    Color.formats = [ {
        re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
        process: function(parts) {
            return [
                parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
            ];
        }
    }, {
        re: /^(\w{2})(\w{2})(\w{2})$/,
        process: function(parts) {
            return [
                parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
            ];
        }
    }, {
        re: /^(\w{1})(\w{1})(\w{1})$/,
        process: function(parts) {
            return [
                parseInt(parts[1] + parts[1], 16),
                parseInt(parts[2] + parts[2], 16),
                parseInt(parts[3] + parts[3], 16)
            ];
        }
    } ];

    Color.namedColors = namedColors;

    kendo.deepExtend(kendo, {
        parseColor: parseColor,
        namedColors: namedColors,
        Color: Color
    });

    var __meta__$j = {
        id: "slider",
        name: "Slider",
        category: "web",
        description: "The Slider widget provides a rich input for selecting values or ranges of values.",
        depends: [ "draganddrop", "icons" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            Draggable = kendo.ui.Draggable,
            outerWidth = kendo._outerWidth,
            outerHeight = kendo._outerHeight,
            extend = $.extend,
            format = kendo.format,
            parse = kendo.parseFloat,
            isArray = Array.isArray,
            math = Math,
            support = kendo.support,
            pointers = support.pointers,
            msPointers = support.msPointers,
            CHANGE = "change",
            SLIDE = "slide",
            NS = ".slider",
            MOUSE_DOWN = "touchstart" + NS + " mousedown" + NS,
            TRACK_MOUSE_DOWN = pointers ? "pointerdown" + NS : (msPointers ? "MSPointerDown" + NS : MOUSE_DOWN),
            MOUSE_UP = "touchend" + NS + " mouseup" + NS,
            TRACK_MOUSE_UP = pointers ? "pointerup" : (msPointers ? "MSPointerUp" + NS : MOUSE_UP),
            MOVE_SELECTION = "moveSelection",
            KEY_DOWN = "keydown" + NS,
            CLICK = "click" + NS,
            MOUSE_OVER = "mouseover" + NS,
            FOCUS = "focus" + NS,
            BLUR = "blur" + NS,
            DRAG_HANDLE = ".k-draghandle",
            TRACK_SELECTOR = ".k-slider-track",
            TICK_SELECTOR = ".k-tick",
            STATE_SELECTED = "k-selected",
            STATE_FOCUSED = "k-focus",
            STATE_DISABLED = "k-disabled",
            DISABLED = "disabled",
            UNDEFINED = "undefined",
            TABINDEX = "tabindex",
            getTouches = kendo.getTouches,

            ARIA_VALUETEXT = "aria-valuetext",
            ARIA_VALUENOW = "aria-valuenow";

        var SliderBase = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                options = that.options;
                that._isHorizontal = options.orientation == "horizontal";
                that._isRtl = that._isHorizontal && kendo.support.isRtl(element);
                that._position = that._isRtl ? "right" : that._isHorizontal ? "left" : "bottom";
                that._sizeFn = that._isHorizontal ? "width" : "height";
                that._outerSize = that._isHorizontal ? outerWidth : outerHeight;

                options.tooltip.format = options.tooltip.enabled ? options.tooltip.format || "{0}" : "{0}";

                if (options.smallStep <= 0) {
                    throw new Error('Kendo UI Slider smallStep must be a positive number.');
                }

                that._createHtml();
                that._trackDiv = that.wrapper.find(TRACK_SELECTOR);

                that._maxSelection = that._trackDiv[that._sizeFn]();

                that._sliderItemsInit();

                that._reset();

                that._tabindex(that.wrapper.find(DRAG_HANDLE));
                that[options.enabled ? "enable" : "disable"]();

                var rtlDirectionSign = kendo.support.isRtl(that.wrapper) ? -1 : 1;

                that._keyMap = {
                    37: step(-1 * rtlDirectionSign * options.smallStep), // left arrow
                    40: step(-options.smallStep), // down arrow
                    39: step(+1 * rtlDirectionSign * options.smallStep), // right arrow
                    38: step(+options.smallStep), // up arrow
                    35: setValue(options.max), // end
                    36: setValue(options.min), // home
                    33: step(+options.largeStep), // page up
                    34: step(-options.largeStep) // page down
                };

                that._ariaLabel(that.wrapper.find(DRAG_HANDLE));

                kendo.notify(that);
            },

            events: [
                CHANGE,
                SLIDE
            ],

            options: {
                enabled: true,
                min: 0,
                max: 10,
                smallStep: 1,
                largeStep: 5,
                orientation: "horizontal",
                tickPlacement: "both",
                tooltip: { enabled: true, format: "{0}" }
            },

            _distance: function() {
                return round(this.options.max - this.options.min);
            },

            _resize: function() {
                this.wrapper.find(".k-slider-items").remove();

                this._maxSelection = this._trackDiv[this._sizeFn]();
                this._sliderItemsInit();
                this._refresh();

                if (this.options.enabled) {
                    this.enable(true);
                }
            },

            _sliderItemsInit: function() {
                var that = this,
                    options = that.options;

                // [Backwards compatibilty]: maxSelection is reduced with 2 to compensate new styling and preserve automatic calculation to not show ticks.
                var sizeBetweenTicks = (that._maxSelection - 2) / ((options.max - options.min) / options.smallStep);

                var pixelWidths = that._calculateItemsWidth(math.floor(removeFraction(that._distance()) / removeFraction(options.smallStep)));

                if (options.tickPlacement != "none" && sizeBetweenTicks >= 2) {
                    $(this.element).parent().find(".k-slider-items").remove();
                    that._trackDiv.before(createSliderItems(options, that._distance()));
                    that._setItemsTitle();
                }

                that._calculateSteps(pixelWidths);

                if (options.tickPlacement != "none" && sizeBetweenTicks >= 2 &&
                    options.largeStep >= options.smallStep) {
                    that._setItemsLargeTick();
                    that.wrapper.find(TICK_SELECTOR).first().addClass("k-first");
                    that.wrapper.find(TICK_SELECTOR).last().addClass("k-last");
                }
            },

            getSize: function() {
                return kendo.dimensions(this.wrapper);
            },

            _setItemsTitle: function() {
                var that = this,
                    options = that.options,
                    items = that.wrapper.find(TICK_SELECTOR),
                    titleNumber = options.min,
                    count = items.length;

                for (var i = 0; i <= count; i += 1) {
                    $(items[i]).attr("title", format(options.tooltip.format, round(titleNumber)));
                    titleNumber += options.smallStep;
                }
            },

            _setItemsLargeTick: function() {
                var that = this,
                    options = that.options,
                    items = that.wrapper.find(TICK_SELECTOR),
                    i = 0, item, value;

                if (removeFraction(options.largeStep) % removeFraction(options.smallStep) === 0 || that._distance() / options.largeStep >= 3) {
                    if (!that._isHorizontal && !that._isRtl) {
                        items = $.makeArray(items).reverse();
                    }

                    for (i = 0; i < items.length; i++) {
                        item = $(items[i]);
                        value = that._values[i];
                        var valueWithoutFraction = round(removeFraction(value - this.options.min));
                        if (valueWithoutFraction % removeFraction(options.smallStep) === 0 && valueWithoutFraction % removeFraction(options.largeStep) === 0) {
                            item.addClass("k-tick-large")
                                .html("<span class='k-label'>" + item.attr("title") + "</span>");

                            if (i !== 0 && i !== items.length - 1) {
                                item.css("line-height", item[that._sizeFn]() + "px");
                            }
                        }
                    }
                }
            },

            _calculateItemsWidth: function(itemsCount) {
                var that = this,
                    options = that.options,
                    trackDivSize = parseFloat(that._trackDiv.css(that._sizeFn)) + 1,
                    distance = that._distance(),
                    preciseItemsCount = removeFraction(distance) / removeFraction(options.smallStep),
                    pixelStep = trackDivSize / removeFraction(distance),
                    itemWidth,
                    pixelWidths,
                    i;

                if (preciseItemsCount - itemsCount > 0) {
                    trackDivSize -= ((removeFraction(distance) % removeFraction(options.smallStep)) * pixelStep);
                }

                itemWidth = trackDivSize / itemsCount;
                pixelWidths = [];

                for (i = 0; i < itemsCount - 1; i++) {
                    pixelWidths[i] = itemWidth;
                }

                pixelWidths[itemsCount - 1] = pixelWidths[itemsCount] = itemWidth / 2;
                return that._roundWidths(pixelWidths);
            },

            _roundWidths: function(pixelWidthsArray) {
                var balance = 0,
                    count = pixelWidthsArray.length,
                    i;

                for (i = 0; i < count; i++) {
                    balance += (pixelWidthsArray[i] - math.floor(pixelWidthsArray[i]));
                    pixelWidthsArray[i] = math.floor(pixelWidthsArray[i]);
                }

                balance = math.round(balance);

                return this._addAdditionalSize(balance, pixelWidthsArray);
            },

            _addAdditionalSize: function(additionalSize, pixelWidthsArray) {
                if (additionalSize === 0) {
                    return pixelWidthsArray;
                }

                //set step size
                var step = parseFloat(pixelWidthsArray.length - 1) / parseFloat(additionalSize == 1 ? additionalSize : additionalSize - 1),
                    i;

                for (i = 0; i < additionalSize; i++) {
                    pixelWidthsArray[parseInt(math.round(step * i), 10)] += 1;
                }

                return pixelWidthsArray;
            },

            _calculateSteps: function(pixelWidths) {
                var that = this,
                    options = that.options,
                    val = options.min,
                    selection = 0,
                    distance = that._distance(),
                    itemsCount = math.ceil(removeFraction(distance) / removeFraction(options.smallStep)),
                    i = 1,
                    lastItem;

                itemsCount += (removeFraction(distance) / removeFraction(options.smallStep)) % 1 === 0 ? 1 : 0;
                pixelWidths.splice(0, 0, pixelWidths[itemsCount - 2] * 2);
                pixelWidths.splice(itemsCount - 1, 1, pixelWidths.pop() * 2);

                that._pixelSteps = [selection];
                that._values = [val];

                if (itemsCount === 0) {
                    return;
                }

                while (i < itemsCount) {
                    selection += (pixelWidths[i - 1] + pixelWidths[i]) / 2;
                    that._pixelSteps[i] = selection;
                    val += options.smallStep;
                    that._values[i] = round(val);

                    i++;
                }

                lastItem = (removeFraction(distance) % removeFraction(options.smallStep)) === 0 ? itemsCount - 1 : itemsCount;

                that._pixelSteps[lastItem] = that._maxSelection;
                that._values[lastItem] = options.max;
            },

            _getValueFromPosition: function(mousePosition, draggableArea) {
                var that = this,
                    options = that.options,
                    step = math.max(options.smallStep * (that._maxSelection / that._distance()), 0),
                    position = 0,
                    halfStep = (step / 2),
                    i;

                if (that._isHorizontal) {
                    position = mousePosition - draggableArea.startPoint;
                    if (that._isRtl) {
                        position = that._maxSelection - position;
                    }
                } else {
                    position = draggableArea.startPoint - mousePosition;
                }

                if (that._maxSelection - ((parseInt(that._maxSelection % step, 10) - 3) / 2) < position) {
                    return options.max;
                }

                for (i = 0; i < that._pixelSteps.length; i++) {
                    if (math.abs(that._pixelSteps[i] - position) - 1 <= halfStep) {
                        return round(that._values[i]);
                    }
                }
            },

            _getFormattedValue: function(val, drag) {
                var that = this,
                    html = "",
                    tooltip = that.options.tooltip,
                    tooltipTemplate,
                    selectionStart,
                    selectionEnd;

                if (isArray(val)) {
                    selectionStart = val[0];
                    selectionEnd = val[1];
                } else if (drag && drag.type) {
                    selectionStart = drag.selectionStart;
                    selectionEnd = drag.selectionEnd;
                }

                if (drag) {
                    tooltipTemplate = drag.tooltipTemplate;
                }

                if (!tooltipTemplate && tooltip.template) {
                    tooltipTemplate = kendo.template(tooltip.template);
                }

                if (isArray(val) || (drag && drag.type)) {

                    if (tooltipTemplate) {
                        html = tooltipTemplate({
                            selectionStart: selectionStart,
                            selectionEnd: selectionEnd
                        });
                    } else {
                        selectionStart = format(tooltip.format, selectionStart);
                        selectionEnd = format(tooltip.format, selectionEnd);
                        html = selectionStart + " - " + selectionEnd;
                    }
                } else {
                    if (drag) {
                        drag.val = val;
                    }

                    if (tooltipTemplate) {
                        html = tooltipTemplate({
                            value: val
                        });
                    } else {
                        html = format(tooltip.format, val);
                    }
                }
                return html;
            },

            _getDraggableArea: function() {
                var that = this,
                    offset = kendo.getOffset(that._trackDiv);

                return {
                    startPoint: that._isHorizontal ? offset.left : offset.top + that._maxSelection,
                    endPoint: that._isHorizontal ? offset.left + that._maxSelection : offset.top
                };
            },

            _createHtml: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    inputs = element.find("input");

                if (inputs.length == 2) {
                    inputs.eq(0).prop("value", formatValue(options.selectionStart));
                    inputs.eq(1).prop("value", formatValue(options.selectionEnd));
                } else {
                    element.prop("value", formatValue(options.value));
                }

                that.wrapper = element.wrap(createWrapper(options, element, that._isHorizontal)).hide().parents(".k-slider");

                if (options.showButtons) {
                    that.wrapper.find(".k-slider-track-wrap")
                           .after(createButton(options, "increase", that._isHorizontal, that._isRtl))
                           .before(createButton(options, "decrease", that._isHorizontal, that._isRtl));
                }

                element.before(createTrack(options, element, that._isHorizontal));
            },

            _focus: function(e) {
                var that = this,
                    target = e.target,
                    val = that.value(),
                    drag = that._drag;

                if (!drag) {
                    if (target == that.wrapper.find(DRAG_HANDLE).eq(0)[0]) {
                        drag = that._firstHandleDrag;
                        that._activeHandle = 0;
                    } else {
                        drag = that._lastHandleDrag;
                        that._activeHandle = 1;
                    }
                    val = val[that._activeHandle];
                }

                $(target).addClass(STATE_FOCUSED + " " + STATE_SELECTED);

                if (drag) {
                    that._activeHandleDrag = drag;

                    drag.selectionStart = that.options.selectionStart;
                    drag.selectionEnd = that.options.selectionEnd;

                    drag._updateTooltip(val);
                }
            },

            _focusWithMouse: function(target) {
                target = $(target);

                var that = this,
                    idx = target.is(DRAG_HANDLE) ? target.index() : 0;

                window.setTimeout(function() {
                    that.wrapper.find(DRAG_HANDLE)[idx == 2 ? 1 : 0].focus();
                }, 1);

                that._setTooltipTimeout();
            },

            _blur: function(e) {
                var that = this,
                    drag = that._activeHandleDrag;

                $(e.target).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);

                if (drag) {
                    drag._removeTooltip();
                    delete that._activeHandleDrag;
                    delete that._activeHandle;
                }
            },

            _setTooltipTimeout: function() {
                var that = this;
                that._tooltipTimeout = window.setTimeout(function() {
                    var drag = that._drag || that._activeHandleDrag;
                    if (drag) {
                        drag._removeTooltip();
                    }
                }, 300);
            },

            _clearTooltipTimeout: function() {
                var that = this;
                window.clearTimeout(this._tooltipTimeout);
                var drag = that._drag || that._activeHandleDrag;
                if (drag && drag.tooltipDiv) {
                    drag.tooltipDiv.stop(true, false).css("opacity", 1);
                }
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._form = form.on("reset", that._formResetHandler.bind(that));
                }
            },

            min: function(value) {
                if (!value) {
                    return this.options.min;
                }
                this.setOptions({ "min": value });
            },

            max: function(value) {
                if (!value) {
                    return this.options.max;
                }
                this.setOptions({ "max": value });
            },

            setOptions: function(options) {
                Widget.fn.setOptions.call(this, options);
                this._sliderItemsInit();
                this._refresh();
            },

            destroy: function() {
                if (this._form) {
                    this._form.off("reset", this._formResetHandler);
                }
                Widget.fn.destroy.call(this);
            }
        });

        function createWrapper(options, element, isHorizontal) {
            var orientationCssClass = isHorizontal ? " k-slider-horizontal" : " k-slider-vertical",
                style = options.style ? options.style : element.attr("style"),
                cssClasses = element.attr("class") ? (" " + element.attr("class")) : "",
                tickPlacementCssClass = "";

            if (options.tickPlacement == "bottomRight") {
                tickPlacementCssClass = " k-slider-bottomright";
            } else if (options.tickPlacement == "topLeft") {
                tickPlacementCssClass = " k-slider-topleft";
            }

            style = style ? " style='" + style + "'" : "";

            return "<div class='k-widget k-slider" + orientationCssClass + cssClasses + "'" + style + ">" +
                   "<div class='k-slider-track-wrap" + tickPlacementCssClass +
                   "'></div></div>";
        }

        function createButton(options, type, isHorizontal, isRtl) {
            var buttonIconName = "";

            if (isHorizontal) {
                if (type === "increase") {
                    buttonIconName = isRtl ? "caret-alt-left" : "caret-alt-right";
                } else {
                    buttonIconName = isRtl ? "caret-alt-right" : "caret-alt-left";
                }
            } else {
                if (type == "increase") {
                    buttonIconName = "caret-alt-up";
                } else {
                    buttonIconName = "caret-alt-down";
                }
            }

            return "<a role='button' class='k-button k-button-md k-rounded-full k-button-solid k-button-solid-base k-icon-button k-button-" + type + "' " +
                    "title='" + options[type + "ButtonTitle"] + "' " +
                    "aria-label='" + options[type + "ButtonTitle"] + "'>" +
                        kendo.ui.icon({ icon: buttonIconName, iconClass: "k-button-icon" }) +
                    "</a>";
        }

        function createSliderItems(options, distance) {
            var result = "<ul class='k-reset k-slider-items' role='presentation'>",
                count = math.floor(round(distance / options.smallStep)) + 1,
                i;

            for (i = 0; i < count; i++) {
                result += "<li class='k-tick'></li>";
            }

            result += "</ul>";

            return result;
        }

        function createTrack(options, element, isHorizontal) {
            var dragHandleCount = element.is("input") ? 1 : 2,
                firstDragHandleTitle = dragHandleCount == 2 ? options.leftDragHandleTitle : options.dragHandleTitle,
                value = options.value,
                min = options.selectionStart,
                max = options.selectionEnd,
                elementValue, minElementValue, maxElementValue;

            if (dragHandleCount === 1) {
                elementValue = element.val();

                if (elementValue !== null && elementValue !== undefined$1 && elementValue !== 'null') {
                    if (value === null || value === undefined$1) {
                        value = elementValue;
                    }
                }
            } else {
                minElementValue = element.find("input").eq(0).val();
                maxElementValue = element.find("input").eq(1).val();

                if (minElementValue !== null && minElementValue !== undefined$1 && minElementValue !== 'null') {
                    if (min === null || min === undefined$1) {
                        min = minElementValue;
                    }
                }

                if (maxElementValue !== null && maxElementValue !== undefined$1 && maxElementValue !== 'null') {
                    if (max === null || max === undefined$1) {
                        max = maxElementValue;
                    }
                }
            }

            var result = "<div class='k-slider-track'><div class='k-slider-selection'><!-- --></div>" +
                   "<span tabindex='0' class='k-draghandle' title='" + firstDragHandleTitle + "' role='slider' " +
                   (isHorizontal === false ? "aria-orientation='vertical' " : "") +
                   "aria-valuemin='" + options.min + "' aria-valuemax='" + options.max + "' aria-valuenow='" + (dragHandleCount > 1 ? (min || options.min) : value || options.min) + "'></span>" +
                   (dragHandleCount > 1 ? "<span tabindex='0' class='k-draghandle' title='" + options.rightDragHandleTitle + "'role='slider' " +
                   (isHorizontal === false ? "aria-orientation='vertical' " : "") +
                   "aria-valuemin='" + options.min + "' aria-valuemax='" + options.max + "' aria-valuenow='" + (max || options.max) + "'></span>" : "") +
                   "</div>";

            return result;
        }

        function step(stepValue) {
            return function(value) {
                return value + stepValue;
            };
        }

        function setValue(value) {
            return function() {
                return value;
            };
        }

        function formatValue(value) {
            return (value + "").replace(".", kendo.cultures.current.numberFormat["."]);
        }

        function calculatePrecision(value) {
            var number = value.toString();
            var precision = 0;

            number = number.split(".");

            if (number[1]) {
                precision = number[1].length;
            }

            precision = precision > 10 ? 10 : precision;
            return precision;
        }

        function round(value) {
            var precision, power;

            value = parseFloat(value, 10);
            precision = calculatePrecision(value);
            power = math.pow(10, precision || 0);

            return math.round(value * power) / power;
        }

        function parseAttr(element, name) {
            var value = parse(element.getAttribute(name));
            if (value === null) {
                value = undefined$1;
            }
            return value;
        }

        function defined(value) {
            return typeof value !== UNDEFINED;
        }

        function removeFraction(value) {
            return value * 10000;
        }

        var Slider = SliderBase.extend({
            init: function(element, options) {
                var that = this,
                    dragHandle;

                element.type = "text";
                options = extend({}, {
                    value: parseAttr(element, "value"),
                    min: parseAttr(element, "min"),
                    max: parseAttr(element, "max"),
                    smallStep: parseAttr(element, "step")
                }, options);

                element = $(element);

                if (options && options.enabled === undefined$1) {
                    options.enabled = !element.is("[disabled]");
                }

                SliderBase.fn.init.call(that, element, options);
                options = that.options;
                if (!defined(options.value) || options.value === null) {
                    options.value = options.min;
                    element.prop("value", formatValue(options.min));
                }
                options.value = math.max(math.min(options.value, options.max), options.min);

                dragHandle = that.wrapper.find(DRAG_HANDLE);

                that._selection = new Slider.Selection(dragHandle, that, options);
                that._drag = new Slider.Drag(dragHandle, "", that, options);

                that._refreshAriaAttr(options.value);
            },

            options: {
                name: "Slider",
                showButtons: true,
                increaseButtonTitle: "Increase",
                decreaseButtonTitle: "Decrease",
                dragHandleTitle: "drag",
                tooltip: { format: "{0:#,#.##}" },
                value: null
            },

            enable: function(enable) {
                var that = this,
                    options = that.options,
                    clickHandler,
                    move;

                that.disable();
                if (enable === false) {
                    return;
                }

                that.wrapper
                    .removeClass(STATE_DISABLED);

                that.wrapper.find("input").prop(DISABLED, false);

                clickHandler = function(e) {
                    var touch = getTouches(e)[0];

                    if (!touch) {
                        return;
                    }

                    var mousePosition = that._isHorizontal ? touch.location.pageX : touch.location.pageY,
                        draggableArea = that._getDraggableArea(),
                        target = $(e.target);

                    if (target.hasClass("k-draghandle")) {
                        target.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
                        return;
                    }

                    that._update(that._getValueFromPosition(mousePosition, draggableArea));

                    that._focusWithMouse(e.target);

                    that._drag.dragstart(e);
                    e.preventDefault();
                };

                that.wrapper
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
                        .on(TRACK_MOUSE_DOWN, clickHandler)
                        .end()
                        .on(TRACK_MOUSE_DOWN, function() {
                            $(document.documentElement).one("selectstart", kendo.preventDefault);
                        })
                        .on(TRACK_MOUSE_UP, function() {
                            that._drag._end();
                        });

                that.wrapper
                    .find(DRAG_HANDLE)
                    .attr(TABINDEX, 0)
                    .on(MOUSE_UP, function() {
                        that._setTooltipTimeout();
                    })
                    .on(CLICK, function(e) {
                        that._focusWithMouse(e.target);
                        e.preventDefault();
                    })
                    .on(FOCUS, that._focus.bind(that))
                    .on(BLUR, that._blur.bind(that));

                move = (function(sign) {
                    var newVal = that._nextValueByIndex(that._valueIndex + (sign * 1));
                    that._setValueInRange(newVal);
                    that._drag._updateTooltip(newVal);
                });

                if (options.showButtons) {
                    var mouseDownHandler = (function(e, sign) {
                        this._clearTooltipTimeout();
                        if (e.which === 1 || (support.touch && e.which === 0)) {
                            move(sign);

                            this.timeout = setTimeout((function() {
                                this.timer = setInterval(function() {
                                    move(sign);
                                }, 60);
                            }).bind(this), 200);
                        }
                    }).bind(that);

                    that.wrapper.find(".k-button")
                        .on(MOUSE_UP, (function(e) {
                            this._clearTimer();
                            that._focusWithMouse(e.target);
                        }).bind(that))
                        .on(MOUSE_OVER, function(e) {
                            $(e.currentTarget).addClass("k-hover");
                        })
                        .on("mouseout" + NS, (function(e) {
                            $(e.currentTarget).removeClass("k-hover");
                            this._clearTimer();
                        }).bind(that))
                        .on(MOUSE_DOWN, (function(e) {
                            var sign = $(e.target).closest(".k-button").is(".k-button-increase") ? 1 : -1;
                            mouseDownHandler(e, sign);
                        }))
                        .on("click", kendo.preventDefault);
                }

                that.wrapper
                    .find(DRAG_HANDLE)
                    .off(KEY_DOWN, false)
                    .on(KEY_DOWN, this._keydown.bind(that));

                options.enabled = true;
            },

            disable: function() {
                var that = this;

                that.wrapper
                    .addClass(STATE_DISABLED);

                $(that.element).prop(DISABLED, DISABLED);

                that.wrapper
                    .find(".k-button")
                    .off(MOUSE_DOWN)
                    .on(MOUSE_DOWN, function(e) {
                        e.preventDefault();
                        $(this).addClass("k-active");
                    })
                    .off(MOUSE_UP)
                    .on(MOUSE_UP, function(e) {
                        e.preventDefault();
                        $(this).removeClass("k-active");
                    })
                    .off("mouseleave" + NS)
                    .on("mouseleave" + NS, kendo.preventDefault)
                    .off(MOUSE_OVER)
                    .on(MOUSE_OVER, kendo.preventDefault);

                that.wrapper
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(TRACK_MOUSE_DOWN).off(TRACK_MOUSE_UP);

                that.wrapper
                    .find(DRAG_HANDLE)
                    .attr(TABINDEX, -1)
                    .off(MOUSE_UP)
                    .off(KEY_DOWN)
                    .off(CLICK)
                    .off(FOCUS)
                    .off(BLUR);

                that.options.enabled = false;
            },

            _update: function(val) {
                var that = this,
                    change = that.value() != val;

                that.value(val);

                if (change) {
                    that.trigger(CHANGE, { value: that.options.value });
                }
            },

            value: function(value) {
                var that = this,
                    options = that.options;

                value = round(value);
                if (isNaN(value)) {
                    return options.value;
                }

                if (value >= options.min && value <= options.max) {
                    if (options.value != value) {
                        that.element.prop("value", formatValue(value));
                        options.value = value;
                        that._refreshAriaAttr(value);
                        that._refresh();
                    }
                }
            },

            _refresh: function() {
                this.trigger(MOVE_SELECTION, { value: this.options.value });
            },

            _refreshAriaAttr: function(value) {
                var that = this,
                    drag = that._drag,
                    formattedValue;

                if (drag && drag._tooltipDiv) {
                    formattedValue = drag._tooltipDiv.text();
                } else {
                    formattedValue = that._getFormattedValue(value, null);
                }
                this.wrapper.find(DRAG_HANDLE).attr(ARIA_VALUENOW, value).attr(ARIA_VALUETEXT, formattedValue);
            },

            _clearTimer: function() {
                clearTimeout(this.timeout);
                clearInterval(this.timer);
            },

            _keydown: function(e) {
                var that = this;

                if (e.keyCode in that._keyMap) {
                    that._clearTooltipTimeout();
                    that._setValueInRange(that._keyMap[e.keyCode](that.options.value));
                    that._drag._updateTooltip(that.value());
                    e.preventDefault();
                }
            },

            _setValueInRange: function(val) {
                var that = this,
                    options = that.options;

                val = round(val);
                if (isNaN(val)) {
                    that._update(options.min);
                    return;
                }

                val = math.max(math.min(val, options.max), options.min);
                that._update(val);
            },

            _nextValueByIndex: function(index) {
                var count = this._values.length;

                return this._values[math.max(0, math.min(index, count - 1))];
            },

            _formResetHandler: function() {
                var that = this,
                    min = that.options.min;

                setTimeout(function() {
                    var value = that.element[0].value;
                    that.value(value === "" || isNaN(value) ? min : value);
                });
            },

            destroy: function() {
                var that = this;

                SliderBase.fn.destroy.call(that);

                that.wrapper.off(NS)
                    .find(".k-button").off(NS)
                    .end()
                    .find(DRAG_HANDLE).off(NS)
                    .end()
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(NS)
                    .end();

                that._drag.draggable.destroy();
                that._drag._removeTooltip(true);
            }
        });

        Slider.Selection = function(dragHandle, that, options) {
            function moveSelection(val) {
                var selectionValue = val - options.min,
                    index = that._valueIndex = math.ceil(round(selectionValue / options.smallStep)),
                    selection = parseInt(that._pixelSteps[index], 10),
                    selectionDiv = that._trackDiv.find(".k-slider-selection");

                selectionDiv[that._sizeFn](selection);
                dragHandle.css(that._position, selection);
            }

            moveSelection(options.value);

            that.bind([SLIDE, MOVE_SELECTION], function(e) {
                moveSelection(parseFloat(e.value, 10));
            });

            that.bind(CHANGE, function(e) {
                moveSelection(parseFloat(e.sender.value(), 10));
            });
        };

        Slider.Drag = function(element, type, owner, options) {
            var that = this;
            that.owner = owner;
            that.options = options;
            that.element = element;
            that.type = type;

            that.draggable = new Draggable(element, {
                distance: 0,
                dragstart: that._dragstart.bind(that),
                drag: that.drag.bind(that),
                dragend: that.dragend.bind(that),
                dragcancel: that.dragcancel.bind(that)
            });

            element.click(false);

            // Disable link dragging
            element.on("dragstart", function(e) {
                e.preventDefault();
            });
        };

        Slider.Drag.prototype = {
            dragstart: function(e) {
                // add reference to the last active drag handle.
                this.owner._activeDragHandle = this;
                // HACK to initiate click on the line
                this.draggable.userEvents.cancel();
                this._dragstart(e);
                this.dragend();
            },

            _dragstart: function(e) {
                var that = this,
                    owner = that.owner,
                    options = that.options;

                if (!options.enabled) {
                    e.preventDefault();
                    return;
                }

                // add reference to the last active drag handle.
                this.owner._activeDragHandle = this;

                owner.element.off(MOUSE_OVER);
                owner.wrapper.find("." + STATE_FOCUSED).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);
                that.element.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
                $(document.documentElement).css("cursor", "pointer");

                that.draggableArea = owner._getDraggableArea();
                that.step = math.max(options.smallStep * (owner._maxSelection / owner._distance()), 0);

                if (that.type) {
                    that.selectionStart = options.selectionStart;
                    that.selectionEnd = options.selectionEnd;
                    owner._setZIndex(that.type);
                } else {
                    that.oldVal = that.val = options.value;
                }

                that._removeTooltip(true);
                that._createTooltip();
            },

            _createTooltip: function() {
                var that = this,
                    owner = that.owner,
                    tooltip = that.options.tooltip,
                    html = '',
                    wnd = $(window),
                    tooltipTemplate, calloutCssClass;

                if (!tooltip.enabled) {
                    return;
                }

                if (tooltip.template) {
                    tooltipTemplate = that.tooltipTemplate = kendo.template(tooltip.template);
                }

                $(".k-slider-tooltip").remove(); // if user changes window while tooltip is visible, a second one will be created
                that.tooltipDiv = $("<div role='tooltip' class='k-tooltip k-slider-tooltip'><!-- --></div>").appendTo(document.body);

                html = owner._getFormattedValue(that.val || owner.value(), that);

                if (!that.type) {
                    calloutCssClass = "k-callout-" + (owner._isHorizontal ? 's' : 'e');
                    that.tooltipInnerDiv = "<div class='k-callout " + calloutCssClass + "'><!-- --></div>";
                    html += that.tooltipInnerDiv;
                }

                that.tooltipDiv.html(html);

                that._scrollOffset = {
                    top: wnd.scrollTop(),
                    left: kendo.scrollLeft(wnd)
                };

                that.moveTooltip();
            },

            drag: function(e) {
                var that = this,
                    owner = that.owner,
                    x = e.x.location,
                    y = e.y.location,
                    startPoint = that.draggableArea.startPoint,
                    endPoint = that.draggableArea.endPoint,
                    slideParams;

                e.preventDefault();

                if (owner._isHorizontal) {
                    if (owner._isRtl) {
                        that.val = that.constrainValue(x, startPoint, endPoint, x < endPoint);
                    } else {
                        that.val = that.constrainValue(x, startPoint, endPoint, x >= endPoint);
                    }
                } else {
                    that.val = that.constrainValue(y, endPoint, startPoint, y <= endPoint);
                }

                if (that.oldVal != that.val) {
                    that.oldVal = that.val;

                    if (that.type) {
                        if (that.type == "firstHandle") {
                            if (that.val < that.selectionEnd) {
                                that.selectionStart = that.val;
                            } else {
                                that.selectionStart = that.selectionEnd = that.val;
                            }
                        } else {
                            if (that.val > that.selectionStart) {
                                that.selectionEnd = that.val;
                            } else {
                                that.selectionStart = that.selectionEnd = that.val;
                            }
                        }
                        slideParams = {
                            values: [that.selectionStart, that.selectionEnd],
                            value: [that.selectionStart, that.selectionEnd]
                        };
                    } else {
                        slideParams = { value: that.val };
                    }

                    owner.trigger(SLIDE, slideParams);
                }
                that._updateTooltip(that.val);
            },

            _updateTooltip: function(val) {
                var that = this,
                    options = that.options,
                    tooltip = options.tooltip,
                    html = "";

                if (!tooltip.enabled) {
                    return;
                }

                if (!that.tooltipDiv) {
                    that._createTooltip();
                }

                html = that.owner._getFormattedValue(round(val), that);

                if (!that.type) {
                    html += that.tooltipInnerDiv;
                }

                that.tooltipDiv.html(html);
                that.moveTooltip();
            },

            dragcancel: function() {
                this.owner._refresh();
                $(document.documentElement).css("cursor", "");
                return this._end();
            },

            dragend: function() {
                var that = this,
                    owner = that.owner;

                $(document.documentElement).css("cursor", "");

                if (that.type) {
                    owner._update(that.selectionStart, that.selectionEnd);
                } else {
                    owner._update(that.val);
                    that.draggable.userEvents._disposeAll();
                }

                that.draggable.userEvents.cancel();
                return that._end();
            },

            _end: function() {
                var that = this,
                    owner = that.owner;

                owner._focusWithMouse(that.element);

                owner.element.on(MOUSE_OVER);

                return false;
            },

            _removeTooltip: function(noAnimation) {
                var that = this,
                    owner = that.owner;

                if (that.tooltipDiv && owner.options.tooltip.enabled && owner.options.enabled) {
                    if (noAnimation) {
                        that.tooltipDiv.remove();
                        that.tooltipDiv = null;
                    } else {
                        that.tooltipDiv.fadeOut("slow", function() {
                            $(this).remove();
                            that.tooltipDiv = null;
                        });
                    }
                }
            },

            moveTooltip: function() {
                var that = this,
                    owner = that.owner,
                    top = 0,
                    left = 0,
                    element = that.element,
                    offset = kendo.getOffset(element),
                    margin = 8,
                    viewport = $(window),
                    callout = that.tooltipDiv.find(".k-callout"),
                    width = outerWidth(that.tooltipDiv),
                    height = outerHeight(that.tooltipDiv),
                    dragHandles, sdhOffset, diff, anchorSize;

                if (that.type) {
                    dragHandles = owner.wrapper.find(DRAG_HANDLE);
                    offset = kendo.getOffset(dragHandles.eq(0));
                    sdhOffset = kendo.getOffset(dragHandles.eq(1));

                    if (owner._isHorizontal) {
                        top = sdhOffset.top;
                        left = offset.left + ((sdhOffset.left - offset.left) / 2);
                    } else {
                        top = offset.top + ((sdhOffset.top - offset.top) / 2);
                        left = sdhOffset.left;
                    }

                    anchorSize = outerWidth(dragHandles.eq(0)) + 2 * margin;
                } else {
                    top = offset.top;
                    left = offset.left;
                    anchorSize = outerWidth(element) + 2 * margin;
                }

                if (owner._isHorizontal) {
                    left -= parseInt((width - owner._outerSize(element)) / 2, 10);
                    top -= height + margin + (callout.length ? callout.height() : 0);
                } else {
                    top -= parseInt((height - owner._outerSize(element)) / 2, 10);
                    left -= width + margin + (callout.length ? callout.width() : 0);
                }

                if (owner._isHorizontal) {
                    diff = that._flip(top, height, anchorSize, outerHeight(viewport) + that._scrollOffset.top);
                    top += diff;
                    left += that._fit(left, width, outerWidth(viewport) + that._scrollOffset.left);
                } else {
                    diff = that._flip(left, width, anchorSize, outerWidth(viewport) + that._scrollOffset.left);
                    top += that._fit(top, height, outerHeight(viewport) + that._scrollOffset.top);
                    left += diff;
                }

                if (diff > 0 && callout) {
                    callout.removeClass();
                    callout.addClass("k-callout k-callout-" + (owner._isHorizontal ? "n" : "w"));
                }

                that.tooltipDiv.css({ top: top, left: left });
            },

            _fit: function(position, size, viewPortEnd) {
                var output = 0;

                if (position + size > viewPortEnd) {
                    output = viewPortEnd - (position + size);
                }

                if (position < 0) {
                    output = -position;
                }

                return output;
            },

            _flip: function(offset, size, anchorSize, viewPortEnd) {
                var output = 0;

                if (offset + size > viewPortEnd) {
                    output += -(anchorSize + size);
                }

                if (offset + output < 0) {
                    output += anchorSize + size;
                }

                return output;
            },

            constrainValue: function(position, min, max, maxOverflow) {
                var that = this,
                    val = 0;

                if (min < position && position < max) {
                    val = that.owner._getValueFromPosition(position, that.draggableArea);
                } else {
                    if (maxOverflow ) {
                        val = that.options.max;
                    } else {
                        val = that.options.min;
                    }
                }

                return val;
            }

        };

        kendo.ui.plugin(Slider);

        var RangeSlider = SliderBase.extend({
            init: function(element, options) {
                var that = this,
                    inputs = $(element).find("input"),
                    firstInput = inputs.eq(0)[0],
                    secondInput = inputs.eq(1)[0];

                firstInput.type = "text";
                secondInput.type = "text";

                if (options && options.showButtons) {
                    if (window.console) {
                        window.console.warn("showbuttons option is not supported for the range slider, ignoring");
                    }

                    options.showButtons = false;
                }

                options = extend({}, {
                    selectionStart: parseAttr(firstInput, "value"),
                    min: parseAttr(firstInput, "min"),
                    max: parseAttr(firstInput, "max"),
                    smallStep: parseAttr(firstInput, "step")
                }, {
                    selectionEnd: parseAttr(secondInput, "value"),
                    min: parseAttr(secondInput, "min"),
                    max: parseAttr(secondInput, "max"),
                    smallStep: parseAttr(secondInput, "step")
                }, options);

                if (options && options.enabled === undefined$1) {
                    options.enabled = !inputs.is("[disabled]");
                }

                SliderBase.fn.init.call(that, element, options);
                options = that.options;
                if (!defined(options.selectionStart) || options.selectionStart === null) {
                    options.selectionStart = options.min;
                    inputs.eq(0).prop("value", formatValue(options.min));
                }

                if (!defined(options.selectionEnd) || options.selectionEnd === null) {
                    options.selectionEnd = options.max;
                    inputs.eq(1).prop("value", formatValue(options.max));
                }

                var dragHandles = that.wrapper.find(DRAG_HANDLE);

                this._selection = new RangeSlider.Selection(dragHandles, that, options);
                that._firstHandleDrag = new Slider.Drag(dragHandles.eq(0), "firstHandle", that, options);
                that._lastHandleDrag = new Slider.Drag(dragHandles.eq(1), "lastHandle" , that, options);

                that._refreshAriaAttr(options.selectionStart , options.selectionEnd);
            },

            options: {
                name: "RangeSlider",
                leftDragHandleTitle: "drag",
                rightDragHandleTitle: "drag",
                tooltip: { format: "{0:#,#.##}" },
                selectionStart: null,
                selectionEnd: null
            },

            enable: function(enable) {
                var that = this,
                    options = that.options,
                    clickHandler;

                that.disable();
                if (enable === false) {
                    return;
                }

                that.wrapper
                    .removeClass(STATE_DISABLED);

                that.wrapper.find("input").prop(DISABLED, false);

                clickHandler = function(e) {
                    var touch = getTouches(e)[0];

                    if (!touch) {
                        return;
                    }

                    var mousePosition = that._isHorizontal ? touch.location.pageX : touch.location.pageY,
                        draggableArea = that._getDraggableArea(),
                        val = that._getValueFromPosition(mousePosition, draggableArea),
                        target = $(e.target),
                        from, to, drag;

                    if (target.hasClass("k-draghandle")) {
                        that.wrapper.find("." + STATE_FOCUSED).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);
                        target.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
                        return;
                    }

                    if (val < options.selectionStart) {
                        from = val;
                        to = options.selectionEnd;
                        drag = that._firstHandleDrag;
                    } else if (val > that.selectionEnd) {
                        from = options.selectionStart;
                        to = val;
                        drag = that._lastHandleDrag;
                    } else {
                        if (val - options.selectionStart <= options.selectionEnd - val) {
                            from = val;
                            to = options.selectionEnd;
                            drag = that._firstHandleDrag;
                        } else {
                            from = options.selectionStart;
                            to = val;
                            drag = that._lastHandleDrag;
                        }
                    }

                    drag.dragstart(e);
                    that._setValueInRange(from, to);
                    that._focusWithMouse(drag.element);
                };

                that.wrapper
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
                        .on(TRACK_MOUSE_DOWN, clickHandler)
                        .end()
                        .on(TRACK_MOUSE_DOWN, function() {
                            $(document.documentElement).one("selectstart", kendo.preventDefault);
                        })
                        .on(TRACK_MOUSE_UP, function() {
                            if (that._activeDragHandle) {
                                that._activeDragHandle._end();
                            }
                        });

                that.wrapper
                    .find(DRAG_HANDLE)
                    .attr(TABINDEX, 0)
                    .on(MOUSE_UP, function() {
                        that._setTooltipTimeout();
                    })
                    .on(CLICK, function(e) {
                        that._focusWithMouse(e.target);
                        e.preventDefault();
                    })
                    .on(FOCUS, that._focus.bind(that))
                    .on(BLUR, that._blur.bind(that));

                that.wrapper.find(DRAG_HANDLE)
                    .off(KEY_DOWN, kendo.preventDefault)
                    .eq(0).on(KEY_DOWN,
                        (function(e) {
                            this._keydown(e, "firstHandle");
                        }).bind(that)
                    )
                    .end()
                    .eq(1).on(KEY_DOWN,
                        (function(e) {
                            this._keydown(e, "lastHandle");
                        }).bind(that)
                    );

                that.options.enabled = true;
            },

            disable: function() {
                var that = this;

                that.wrapper
                    .addClass(STATE_DISABLED);

                that.wrapper.find("input").prop(DISABLED, DISABLED);

                that.wrapper
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(TRACK_MOUSE_DOWN).off(TRACK_MOUSE_UP);

                that.wrapper
                    .find(DRAG_HANDLE)
                    .attr(TABINDEX, -1)
                    .off(MOUSE_UP)
                    .off(KEY_DOWN)
                    .off(CLICK)
                    .off(FOCUS)
                    .off(BLUR);

                that.options.enabled = false;
            },

            _keydown: function(e, handle) {
                var that = this,
                    selectionStartValue = that.options.selectionStart,
                    selectionEndValue = that.options.selectionEnd,
                    dragSelectionStart,
                    dragSelectionEnd,
                    activeHandleDrag;

                if (e.keyCode in that._keyMap) {

                    that._clearTooltipTimeout();

                    if (handle == "firstHandle") {
                        activeHandleDrag = that._activeHandleDrag = that._firstHandleDrag;
                        selectionStartValue = that._keyMap[e.keyCode](selectionStartValue);

                        if (selectionStartValue > selectionEndValue) {
                            selectionEndValue = selectionStartValue;
                        }
                    } else {
                        activeHandleDrag = that._activeHandleDrag = that._lastHandleDrag;
                        selectionEndValue = that._keyMap[e.keyCode](selectionEndValue);

                        if (selectionStartValue > selectionEndValue) {
                            selectionStartValue = selectionEndValue;
                        }
                    }

                    that._setValueInRange(round(selectionStartValue), round(selectionEndValue));

                    dragSelectionStart = Math.max(selectionStartValue, that.options.selectionStart);
                    dragSelectionEnd = Math.min(selectionEndValue, that.options.selectionEnd);

                    activeHandleDrag.selectionEnd = Math.max(dragSelectionEnd, that.options.selectionStart);
                    activeHandleDrag.selectionStart = Math.min(dragSelectionStart, that.options.selectionEnd);

                    activeHandleDrag._updateTooltip(that.value()[that._activeHandle]);

                    e.preventDefault();
                }
            },

            _update: function(selectionStart, selectionEnd) {
                var that = this,
                    values = that.value();

                var change = values[0] != selectionStart || values[1] != selectionEnd;

                that.value([selectionStart, selectionEnd]);

                if (change) {
                    that.trigger(CHANGE, {
                        values: [selectionStart, selectionEnd],
                        value: [selectionStart, selectionEnd]
                    });
                }
            },

            value: function(value) {
                if (value && value.length) {
                    return this._value(value[0], value[1]);
                } else {
                    return this._value();
                }
            },

            _value: function(start, end) {
                var that = this,
                    options = that.options,
                    selectionStart = options.selectionStart,
                    selectionEnd = options.selectionEnd;

                if (isNaN(start) && isNaN(end)) {
                    return [selectionStart, selectionEnd];
                } else {
                    start = round(start);
                    end = round(end);
                }

                if (start >= options.min && start <= options.max &&
                    end >= options.min && end <= options.max && start <= end) {
                    if (selectionStart != start || selectionEnd != end) {
                        that.element.find("input")
                            .eq(0).prop("value", formatValue(start))
                            .end()
                            .eq(1).prop("value", formatValue(end));

                        options.selectionStart = start;
                        options.selectionEnd = end;
                        that._refresh();
                        that._refreshAriaAttr(start, end);
                    }
                }
            },

            values: function(start, end) {
                if (isArray(start)) {
                    return this._value(start[0], start[1]);
                } else {
                    return this._value(start, end);
                }
            },

            _refresh: function() {
                var that = this,
                    options = that.options;

                that.trigger(MOVE_SELECTION, {
                    values: [options.selectionStart, options.selectionEnd],
                    value: [options.selectionStart, options.selectionEnd]
                });

                if (options.selectionStart == options.max && options.selectionEnd == options.max) {
                    that._setZIndex("firstHandle");
                }
            },

            _refreshAriaAttr: function(start, end) {
                var that = this,
                    dragHandles = that.wrapper.find(DRAG_HANDLE),
                    drag = that._activeHandleDrag,
                    formattedValue;

                formattedValue = that._getFormattedValue([start, end], drag);

                dragHandles.eq(0).attr(ARIA_VALUENOW, start);
                dragHandles.eq(1).attr(ARIA_VALUENOW, end);
                dragHandles.attr(ARIA_VALUETEXT, formattedValue);
            },

            _setValueInRange: function(selectionStart, selectionEnd) {
                var options = this.options;

                selectionStart = math.max(math.min(selectionStart, options.max), options.min);

                selectionEnd = math.max(math.min(selectionEnd, options.max), options.min);

                if (selectionStart == options.max && selectionEnd == options.max) {
                    this._setZIndex("firstHandle");
                }

                this._update(math.min(selectionStart, selectionEnd), math.max(selectionStart, selectionEnd));
            },

            _setZIndex: function(type) {
                this.wrapper.find(DRAG_HANDLE).each(function(index) {
                    $(this).css("z-index", type == "firstHandle" ? 1 - index : index);
                });
            },

            _formResetHandler: function() {
                var that = this,
                    options = that.options;

                setTimeout(function() {
                    var inputs = that.element.find("input");
                    var start = inputs[0].value;
                    var end = inputs[1].value;
                    that.values(start === "" || isNaN(start) ? options.min : start, end === "" || isNaN(end) ? options.max : end);
                });
            },

            destroy: function() {
                var that = this;

                SliderBase.fn.destroy.call(that);

                that.wrapper.off(NS)
                    .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(NS)
                    .end()
                    .find(DRAG_HANDLE).off(NS);

                that._firstHandleDrag.draggable.destroy();
                that._lastHandleDrag.draggable.destroy();
            }
        });

        RangeSlider.Selection = function(dragHandles, that, options) {
            function moveSelection(value) {
                value = value || [];
                var selectionStartValue = value[0] - options.min,
                    selectionEndValue = value[1] - options.min,
                    selectionStartIndex = math.ceil(round(selectionStartValue / options.smallStep)),
                    selectionEndIndex = math.ceil(round(selectionEndValue / options.smallStep)),
                    selectionStart = that._pixelSteps[selectionStartIndex],
                    selectionEnd = that._pixelSteps[selectionEndIndex];

                dragHandles.eq(0).css(that._position, selectionStart)
                           .end()
                           .eq(1).css(that._position, selectionEnd);

                makeSelection(selectionStart, selectionEnd);
            }

            function makeSelection(selectionStart, selectionEnd) {
                var selection,
                    selectionPosition,
                    selectionDiv = that._trackDiv.find(".k-slider-selection");

                selection = math.abs(selectionStart - selectionEnd);

                selectionDiv[that._sizeFn](selection);
                selectionPosition = math.min(selectionStart, selectionEnd);
                selectionDiv.css(that._position, selectionPosition - 1);
            }

            moveSelection(that.value());

            that.bind([ CHANGE, SLIDE, MOVE_SELECTION ], function(e) {
                moveSelection(e.values);
            });
        };

        kendo.ui.plugin(RangeSlider);

    })(window.kendo.jQuery);
    var kendo$g = kendo;

    var __meta__$i = {
        id: "textbox",
        name: "TextBox",
        category: "web",
        description: "The TextBox widget enables you to style and provide a floating label functionality to input elements",
        depends: ["core", "floatinglabel", "icons"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            ui = kendo.ui,
            isPlainObject = $.isPlainObject,
            NS = ".kendoTextBox",
            CHANGE = "change",
            DISABLED = "disabled",
            READONLY = "readonly",
            INPUT = "k-input-inner",
            INPUT_EV = "input",
            FOCUSED = "k-focus",
            LABELCLASSES = "k-label k-input-label",
            STATEDISABLED = "k-disabled",
            NOCLICKCLASS = "k-no-click",
            ARIA_DISABLED = "aria-disabled";

        var TextBox = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                options = $.extend(true, {}, options);

                that.options.value = options.value || that.element.val();
                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr("readonly"));
                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.attr("disabled")));
                that.options.placeholder = options.placeholder || that.element.attr("placeholder");

                that.value(that.options.value);
                that._wrapper();
                that._label();
                that._editable({
                    readonly: that.options.readonly,
                    disable: !(that.options.enable)
                });

                that.element
                    .addClass(INPUT)
                    .attr("placeholder", that.options.placeholder)
                    .attr("autocomplete", "off");

                if (options.icon) {
                    that._icon();
                }

                kendo.notify(that);
                that._applyCssClasses();
            },

            events: [
                CHANGE,
                INPUT_EV
            ],

            options: {
                name: 'TextBox',
                value: '',
                readonly: false,
                enable: true,
                placeholder: '',
                label: null,
                rounded: "medium",
                size: "medium",
                fillMode: "solid",
                icon: null
            },

            value: function(value) {
                var that = this;

                if (value === undefined$1) {
                    return that._value;
                }

                that._value = value;
                that.element.val(value);

                if (that.floatingLabel) {
                    that.floatingLabel.refresh();
                }
            },

            readonly: function(readonly) {
                var that = this;

                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (that.floatingLabel) {
                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                var that = this;

                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (that.floatingLabel) {
                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            focus: function() {
                var that = this;

                that.element[0].focus();
            },

            destroy: function() {
                var that = this;

                if (that.floatingLabel) {
                    that.floatingLabel.destroy();
                }

                that.element.off(NS);
                that.element[0].style.width = "";
                that.element.removeClass(INPUT);
                Widget.fn.destroy.call(that);
            },

            setOptions: function(options) {
                this.destroy();

                if (this._inputLabel) {
                    this._inputLabel.remove();
                    this._inputLabel = null;
                }

                if (this._floatingLabelContainer) {
                    this.floatingLabel.destroy();
                    this.floatingLabel = null;
                    this.element.unwrap();
                    this.element.unwrap();
                    this._floatingLabelContainer = null;
                } else {
                    this.element.unwrap();
                }

                kendo.deepExtend(this.options, options);
                this.init(this.element, this.options);
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var wrapper = that.wrapper;
                var disable = options.disable;
                var readonly = options.readonly;

                element.off(NS);

                if (!readonly && !disable) {
                    element.prop(DISABLED, false)
                           .prop(READONLY, false)
                           .attr(ARIA_DISABLED, false);

                    wrapper.removeClass(STATEDISABLED)
                            .removeClass(NOCLICKCLASS);

                    element.on("focusin" + NS, that._focusin.bind(that));
                    element.on("focusout" + NS, that._focusout.bind(that));
                    element.on("change" + NS, that._change.bind(that));
                    element.on(INPUT_EV + NS, that._input.bind(that));
                } else {
                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable);

                    wrapper.toggleClass(STATEDISABLED, disable)
                            .toggleClass(NOCLICKCLASS, readonly);
                }
            },

            _icon: function() {
                this.wrapper.prepend(kendo.ui.icon({ icon: this.options.icon, iconClass: "k-input-icon" }));
            },

            _input: function(e) {
                var that = this;
                var newValue = that.element.val();

                that.trigger(INPUT_EV, { value: newValue, originalEvent: e });
            },

            _label: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var id = element.attr("id");
                var floating;
                var labelText;

                if (options.label !== null) {
                    floating = isPlainObject(options.label) ? options.label.floating : false;
                    labelText = isPlainObject(options.label) ? options.label.content : options.label;

                    if (floating) {
                        that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();
                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });
                    }

                    if (kendo.isFunction(labelText)) {
                        labelText = labelText.call(that);
                    }

                    if (!labelText) {
                        labelText = "";
                    }

                    if (!id) {
                        id = options.name + "_" + kendo.guid();
                        element.attr("id", id);
                    }

                    that._inputLabel = $("<label class='" + LABELCLASSES + "' for='" + id + "'>" + labelText + "</label>'").insertBefore(that.wrapper);
                }
            },

            _focusin: function() {
                var that = this;

                that.wrapper.addClass(FOCUSED);
            },

            _focusout: function() {
                var that = this;

                that.wrapper.removeClass(FOCUSED);
            },

            _change: function(e) {
                var that = this;
                var newValue = that.element.val();

                that._value = newValue;

                that.trigger(CHANGE, { value: newValue, originalEvent: e });
            },

            _wrapper: function() {
                var that = this;
                var element = that.element;
                var DOMElement = element[0];
                var wrapper;

                wrapper = element.wrap("<span class='k-input k-textbox'></span>").parent();
                wrapper[0].style.cssText = DOMElement.style.cssText;
                DOMElement.style.width = "100%";
                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');
            }
        });

        kendo.cssProperties.registerPrefix("TextBox", "k-input-");

        kendo.cssProperties.registerValues("TextBox", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(TextBox);
    })(window.kendo.jQuery);
    var kendo$f = kendo;

    var __meta__$h = {
        id: "numerictextbox",
        name: "NumericTextBox",
        category: "web",
        description: "The NumericTextBox widget can format and display numeric, percentage or currency textbox.",
        depends: [ "core", "userevents", "floatinglabel", "html.button", "icons" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            caret = kendo.caret,
            keys = kendo.keys,
            html = kendo.html,
            ui = kendo.ui,
            Widget = ui.Widget,
            activeElement = kendo._activeElement,
            extractFormat = kendo._extractFormat,
            parse = kendo.parseFloat,
            placeholderSupported = kendo.support.placeholder,
            getCulture = kendo.getCulture,
            CHANGE = "change",
            DISABLED = "disabled",
            READONLY = "readonly",
            INPUT = "k-input-inner",
            SPIN = "spin",
            ns = ".kendoNumericTextBox",
            TOUCHEND = "touchend",
            MOUSELEAVE = "mouseleave" + ns,
            HOVEREVENTS = "mouseenter" + ns + " " + MOUSELEAVE,
            FOCUSED = "k-focus",
            HOVER = "k-hover",
            FOCUS = "focus",
            POINT = ".",
            SYMBOL = "symbol",
            CLASS_ICON = "k-icon",
            LABELCLASSES = "k-label k-input-label",
            SELECTED = "k-selected",
            STATEDISABLED = "k-disabled",
            STATEINVALID = "k-invalid",
            ARIA_DISABLED = "aria-disabled",
            INTEGER_REGEXP = /^(-)?(\d*)$/,
            NULL = null,
            isPlainObject = $.isPlainObject,
            extend = $.extend;

        var NumericTextBox = Widget.extend({
             init: function(element, options) {
                 var that = this,
                 isStep = options && options.step !== undefined$1,
                 min, max, step, value, disabled;
                 var inputType;

                 Widget.fn.init.call(that, element, options);

                 options = that.options;
                 element = that.element
                               .on("focusout" + ns, that._focusout.bind(that))
                               .attr("role", "spinbutton");

                 options.placeholder = options.placeholder || element.attr("placeholder");

                 min = that.min(element.attr("min"));
                 max = that.max(element.attr("max"));
                 step = that._parse(element.attr("step"));

                 if (options.min === NULL && min !== NULL) {
                     options.min = min;
                 }

                 if (options.max === NULL && max !== NULL) {
                     options.max = max;
                 }

                 if (!isStep && step !== NULL) {
                     options.step = step;
                 }

                 that._initialOptions = extend({}, options);

                 inputType = element.attr("type");

                 that._reset();
                 that._wrapper();
                 that._arrows();
                 that._validation();
                 that._input();

                 if (!kendo.support.mobileOS) {
                     that._text.on(FOCUS + ns, that._click.bind(that));
                 } else {
                     that._text.on(TOUCHEND + ns + " " + FOCUS + ns, function() {
                         if (kendo.support.browser.edge) {
                             that._text.one(FOCUS + ns, function() {
                                that._focusin();
                             });
                         } else {
                            that._focusin();
                         }
                         that.selectValue();
                     });
                 }

                 element.attr("aria-valuemin", options.min !== NULL ? options.min * options.factor : options.min)
                        .attr("aria-valuemax", options.max !== NULL ? options.max * options.factor : options.max);

                 options.format = extractFormat(options.format);

                 value = options.value;

                 if (value == NULL) {
                     if (inputType == "number") {
                        value = parseFloat(element.val());
                     } else {
                         value = element.val();
                     }
                 }

                 that.value(value);

                 disabled = !options.enable || element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

                 if (disabled) {
                     that.enable(false);
                 } else {
                     that.readonly(element.is("[readonly]"));
                 }

                 that._label();
                 that._ariaLabel(that._text);
                 that._applyCssClasses();

                 kendo.notify(that);
             },

            options: {
                name: "NumericTextBox",
                decimals: NULL,
                enable: true,
                restrictDecimals: false,
                min: NULL,
                max: NULL,
                value: NULL,
                step: 1,
                round: true,
                culture: "",
                format: "n",
                spinners: true,
                placeholder: "",
                selectOnFocus: false,
                factor: 1,
                upArrowText: "Increase value",
                downArrowText: "Decrease value",
                label: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium"
            },
            events: [
                CHANGE,
                SPIN
            ],

            _editable: function(options) {
                var that = this,
                    element = that.element,
                    disable = options.disable,
                    readonly = options.readonly,
                    text = that._text.add(element),
                    wrapper = that.wrapper.off(HOVEREVENTS);

                that._toggleText(true);

                that._upArrowEventHandler.unbind("press");
                that._downArrowEventHandler.unbind("press");
                element
                    .off("keydown" + ns)
                    .off("keyup" + ns)
                    .off("input" + ns)
                    .off("paste" + ns);

                if (that._inputLabel) {
                    that._inputLabel.off(ns);
                }

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);

                    text.prop(DISABLED, false)
                        .prop(READONLY, false)
                        .attr(ARIA_DISABLED, false);

                    that._upArrowEventHandler.bind("press", function(e) {
                        e.preventDefault();
                        that._spin(1);
                        that._upArrow.addClass(SELECTED);
                    });

                    that._downArrowEventHandler.bind("press", function(e) {
                        e.preventDefault();
                        that._spin(-1);
                        that._downArrow.addClass(SELECTED);
                    });

                    that.element
                        .on("keydown" + ns, that._keydown.bind(that))
                        .on("keyup" + ns, that._keyup.bind(that))
                        .on("paste" + ns, that._paste.bind(that))
                        .on("input" + ns, that._inputHandler.bind(that));

                    if (that._inputLabel) {
                        that._inputLabel.on("click" + ns, that.focus.bind(that));
                    }

                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    text.attr(DISABLED, disable)
                        .attr(READONLY, readonly)
                        .attr(ARIA_DISABLED, disable);
                }
            },

            readonly: function(readonly) {
                var that = this;

                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (that.floatingLabel) {
                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                var that = this;

                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (that.floatingLabel) {
                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            setOptions: function(options) {
                var that = this;
                Widget.fn.setOptions.call(that, options);

                that.wrapper.toggleClass("k-expand-padding", !that.options.spinners);
                that._text.prop("placeholder", that.options.placeholder);
                that._placeholder(that.options.placeholder);
                that.element.attr({
                    "aria-valuemin": that.options.min !== NULL ? that.options.min * that.options.factor : that.options.min,
                    "aria-valuemax": that.options.max !== NULL ? that.options.max * that.options.factor : that.options.max
                });

                that.options.format = extractFormat(that.options.format);
                that._upArrowEventHandler.destroy();
                that._upArrowEventHandler = null;
                that._downArrowEventHandler.destroy();
                that._downArrowEventHandler = null;
                that._arrowsWrap.remove();
                that._arrows();

                that._applyCssClasses();

                if (that._inputLabel) {
                    that._inputLabel.off(ns);
                    that._inputLabel.remove();

                    if (that.floatingLabel) {
                        that.floatingLabel.destroy();
                        if (that._floatingLabelContainer) {
                            that.wrapper.unwrap();
                        }
                    }
                }

                that._label();

                that._editable({
                    readonly: that.options.readonly,
                    disable: !that.options.enable
                });

                if (options.value !== undefined$1) {
                    that.value(options.value);
                }
            },

            destroy: function() {
                var that = this;

                if (that._inputLabel) {
                    that._inputLabel.off(ns);

                    if (that.floatingLabel) {
                        that.floatingLabel.destroy();
                    }
                }

                that.element
                    .add(that._text)
                    .add(that._upArrow)
                    .add(that._downArrow)
                    .off(ns);

                that._upArrowEventHandler.destroy();
                that._downArrowEventHandler.destroy();

                if (that._form) {
                    that._form.off("reset", that._resetHandler);
                }

                Widget.fn.destroy.call(that);
            },

            min: function(value) {
                return this._option("min", value);
            },

            max: function(value) {
                return this._option("max", value);
            },

            step: function(value) {
                return this._option("step", value);
            },

            value: function(value) {
                var that = this, adjusted;

                if (value === undefined$1) {
                    return that._value;
                }

                value = that._parse(value);
                adjusted = that._adjust(value);

                if (value !== adjusted) {
                    return;
                }

                that._update(value);
                that._old = that._value;

                if (that.floatingLabel) {
                    that.floatingLabel.refresh();
                }
            },

            focus: function() {
                this._focusin();
            },

            _adjust: function(value) {
                var that = this,
                options = that.options,
                min = options.min,
                max = options.max;

                if (value === NULL) {
                    return value;
                }

                if (min !== NULL && value < min) {
                    value = min;
                } else if (max !== NULL && value > max) {
                    value = max;
                }

                return value;
            },

            _arrows: function() {
                var that = this,
                arrows,
                _release = function() {
                    clearTimeout( that._spinning );
                    arrows.removeClass(SELECTED);
                },
                options = that.options,
                spinners = options.spinners,
                element = that.element;

                arrows = element.siblings(".k-icon-button");

                if (!arrows[0]) {
                    arrows = $(buttonHtml("increase", options.upArrowText, options) + buttonHtml("decrease", options.downArrowText, options))
                            .appendTo(that.wrapper);

                    that._arrowsWrap = arrows.wrapAll('<span class="k-input-spinner k-spin-button"/>').parent();
                }

                if (!spinners) {
                    arrows.parent().toggle(spinners);
                    that.wrapper.addClass("k-expand-padding");
                }

                that._upArrow = arrows.eq(0);
                that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });
                that._downArrow = arrows.eq(1);
                that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });
            },

            _validation: function() {
                var that = this;
                var element = that.element;

                that._validationIcon = $(kendo.ui.icon({ icon: "exclamation-circle", iconClass: "k-input-validation-icon k-hidden" })).insertAfter(element);
            },

            _blur: function() {
                var that = this;

                that._toggleText(true);

                that._change(that.element.val());
            },

            _click: function(e) {
                var that = this;

                clearTimeout(that._focusing);
                that._focusing = setTimeout(function() {
                    var input = e.target,
                        idx = caret(input)[0],
                        value = input.value.substring(0, idx),
                        format = that._format(that.options.format),
                        group = format[","],
                        result, groupRegExp, extractRegExp,
                        caretPosition = 0;

                    if (group) {
                        groupRegExp = new RegExp("\\" + group, "g");
                        extractRegExp = new RegExp("(-)?(" + format[SYMBOL] + ")?([\\d\\" + group + "]+)(\\" + format[POINT] + ")?(\\d+)?");
                    }

                    if (extractRegExp) {
                        result = extractRegExp.exec(value);
                    }

                    if (result) {
                        caretPosition = result[0].replace(groupRegExp, "").length;

                        if (value.indexOf("(") != -1 && that._value < 0) {
                            caretPosition++;
                        }
                    }

                    that._focusin();

                    caret(that.element[0], caretPosition);
                    that.selectValue();
                });
            },

            selectValue: function() {
                if (this.options.selectOnFocus) {
                    this.element[0].select();
                }
            },

            _getFactorValue: function(value) {
                var that = this,
                    factor = that.options.factor;

                if (factor && factor !== 1) {
                    value = kendo.parseFloat(value);
                    if (value !== null) {
                        value = value / factor;
                    }
                }

                return value;
            },

            _change: function(value) {
                var that = this;

                value = that._getFactorValue(value);
                that._update(value);
                value = that._value;

                if (that._old != value) {
                    that._old = value;

                    if (!that._typing) {
                        // trigger the DOM change event so any subscriber gets notified
                        that.element.trigger(CHANGE);
                    }

                    that.trigger(CHANGE);
                }

                that._typing = false;
            },

            _culture: function(culture) {
                return culture || getCulture(this.options.culture);
            },

            _focusin: function() {
                var that = this;
                that.wrapper.addClass(FOCUSED);
                that._toggleText(false);
                that.element[0].focus();
            },

            _focusout: function() {
                var that = this;

                clearTimeout(that._focusing);
                that.wrapper.removeClass(FOCUSED).removeClass(HOVER);
                that._blur();
                that._removeInvalidState();
            },

            _format: function(format, culture) {
                var numberFormat = this._culture(culture).numberFormat;

                format = format.toLowerCase();

                if (format.indexOf("c") > -1) {
                    numberFormat = numberFormat.currency;
                } else if (format.indexOf("p") > -1) {
                    numberFormat = numberFormat.percent;
                }

                return numberFormat;
            },

            _input: function() {
                var that = this,
                    options = that.options,
                    element = that.element.addClass(INPUT).show()[0],
                    accessKey = element.accessKey,
                    wrapper = that.wrapper,
                    inputs = wrapper.find(POINT + INPUT),
                    text;

                text = inputs.first();

                if (text.length < 2) {
                    text = $('<input type="text"/>')
                            .attr(kendo.attr("validate"), false)
                            .insertBefore(element);
                }

                try {
                    element.setAttribute("type", "text");
                } catch (e) {
                    element.type = "text";
                }

                text[0].title = element.title;
                text[0].tabIndex = element.tabIndex;
                text[0].style.cssText = element.style.cssText;
                text.prop("placeholder", options.placeholder);

                if (accessKey) {
                    text.attr("accesskey", accessKey);
                    element.accessKey = "";
                }


                that._text = text.addClass(element.className)
                                 .attr({
                                     "role": "spinbutton",
                                     "aria-valuemin": options.min !== NULL ? options.min * options.factor : options.min,
                                     "aria-valuemax": options.max !== NULL ? options.max * options.factor : options.max,
                                     "autocomplete": "off"
                                 });
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode;

                if (key === keys.NUMPAD_DOT) {
                    that._numPadDot = true;
                }

                if (key == keys.DOWN) {
                    that._step(-1);
                    return;
                } else if (key == keys.UP) {
                    that._step(1);
                    return;
                } else if (key == keys.ENTER) {
                    that._change(that.element.val());
                    return;
                }

                if (key != keys.TAB) {
                    that._typing = true;
                }
                that._cachedCaret = caret(that.element);
            },

            _keyup: function() {
                this._removeInvalidState();
            },

            _inputHandler: function() {
                var element = this.element;
                var value = element.val();
                var min = this.options.min;
                var numberFormat = this._format(this.options.format);
                var decimalSeparator = numberFormat[POINT];
                var minInvalid = (min !== null && min >= 0 && value.charAt(0) === "-");

                if (this._numPadDot && decimalSeparator !== POINT) {
                    value = value.replace(POINT, decimalSeparator);
                    this.element.val(value);
                    this._numPadDot = false;
                }

                if (this._isPasted && this._parse(value)) {
                    value = this._parse(value)
                        .toString()
                        .replace(POINT, numberFormat[POINT]);
                }

                if (this._numericRegex(numberFormat).test(value) && !minInvalid) {
                    this._oldText = value;
                } else {
                    this._blinkInvalidState();
                    this.element.val(this._oldText);
                    if (this._cachedCaret) {
                        caret(element, this._cachedCaret[0]);
                        this._cachedCaret = null;
                    }
                }

                this._isPasted = false;
            },

            _blinkInvalidState: function() {
                var that = this;

                that._addInvalidState();
                clearTimeout(that._invalidStateTimeout);
                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);
            },

            _addInvalidState: function() {
                var that = this;

                that.wrapper.addClass(STATEINVALID);
                that._validationIcon.removeClass('k-hidden');
            },

            _removeInvalidState: function() {
                var that = this;

                that.wrapper.removeClass(STATEINVALID);
                that._validationIcon.addClass('k-hidden');
                that._invalidStateTimeout = null;
            },

            _numericRegex: function(numberFormat) {
                var that = this;
                var separator = numberFormat[POINT];
                var precision = that.options.decimals;
                var fractionRule = "*";

                if (separator === POINT) {
                    separator = "\\" + separator;
                }

                if (precision === NULL) {
                    precision = numberFormat.decimals;
                }

                if (precision === 0 && that.options.restrictDecimals) {
                    return INTEGER_REGEXP;
                }

                if (that.options.restrictDecimals) {
                    fractionRule = "{0," + precision + "}";
                }

                if (that._separator !== separator) {
                    that._separator = separator;
                    that._floatRegExp = new RegExp("^(-)?(((\\d+(" + separator + "\\d" + fractionRule + ")?)|(" + separator + "\\d" + fractionRule + ")))?$");
                }

                return that._floatRegExp;
            },

            _paste: function(e) {
                var that = this;
                var element = e.target;
                var value = element.value;
                var numberFormat = that._format(that.options.format);

                that._isPasted = true;

               setTimeout(function() {
                    var result = that._parse(element.value);

                    if (result === NULL) {
                        that._update(value);
                    } else {
                        element.value = result.toString().replace(POINT, numberFormat[POINT]);
                        if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {
                            value = that._getFactorValue(element.value);
                            that._update(value);
                        }
                    }
                });
            },

            _option: function(option, value) {
                var that = this,
                    element = that.element,
                    options = that.options;

                if (value === undefined$1) {
                    return options[option];
                }

                value = that._parse(value);

                if (!value && option === "step") {
                    return;
                }

                options[option] = value;
                element
                    .add(that._text)
                    .attr("aria-value" + option, value);

                element.attr(option, value);
            },

            _spin: function(step, timeout) {
                var that = this;

                timeout = timeout || 500;

                clearTimeout( that._spinning );
                that._spinning = setTimeout(function() {
                    that._spin(step, 50);
                }, timeout );

                that._step(step);
            },

            _step: function(step) {
                var that = this,
                    element = that.element,
                    originalValue = that._value,
                    value = that._parse(element.val()) || 0,
                    precision = that.options.decimals || 2;

                if (activeElement() != element[0]) {
                    that._focusin();
                }

                if (that.options.factor && value) {
                    value = value / that.options.factor;
                }

                value = +(value + that.options.step * step).toFixed(precision);
                value = that._adjust(value);
                that._update(value);
                that._typing = false;

                if (originalValue !== value) {
                    that.trigger(SPIN);
                }
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            },

            _toggleText: function(toggle) {
                var that = this;

                that._text.toggle(toggle);
                if (toggle) {
                    that._text.removeAttr("aria-hidden");
                } else {
                    that._text.attr("aria-hidden", "true");
                }
                that.element.toggle(!toggle);
            },

            _parse: function(value, culture) {
                return parse(value, this._culture(culture), this.options.format);
            },

            _round: function(value, precision) {
                var rounder = this.options.round ? kendo._round : truncate;

                return rounder(value, precision);
            },

            _update: function(value) {
                var that = this,
                    options = that.options,
                    factor = options.factor,
                    format = options.format,
                    decimals = options.decimals,
                    culture = that._culture(),
                    numberFormat = that._format(format, culture),
                    originalValue,
                    isNotNull;

                if (decimals === NULL) {
                    decimals = numberFormat.decimals;
                }

                value = that._parse(value, culture);

                isNotNull = value !== NULL;

                if (isNotNull) {
                    value = parseFloat(that._round(value, decimals), 10);
                }

                that._value = value = that._adjust(value);
                that._placeholder(kendo.toString(value, format, culture));

                if (isNotNull) {
                    if (factor) {
                        value = parseFloat(that._round(value * factor, decimals), 10);
                    }
                    value = value.toString();
                    if (value.indexOf("e") !== -1) {
                        value = that._round(+value, decimals);
                    }
                    originalValue = value;
                    value = value.replace(POINT, numberFormat[POINT]);
                } else {
                    value = null;
                    originalValue = null;
                }

                that.element.val(value);
                that._oldText = value;
                that.element.add(that._text).attr("aria-valuenow", originalValue);
            },

            _placeholder: function(value) {
                var input = this._text;

                input.val(value);
                if (!placeholderSupported && !value) {
                    input.val(this.options.placeholder);
                }

                input.attr("title", this.element.attr("title") || input.val());
            },

            _label: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var id = element.attr("id");
                var floating;
                var labelText;

                if (options.label !== null) {
                    floating = isPlainObject(options.label) ? options.label.floating : false;
                    labelText = isPlainObject(options.label) ? options.label.content : options.label;

                    if (floating) {
                        that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();
                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });
                    }

                    if (kendo.isFunction(labelText)) {
                        labelText = labelText.call(that);
                    }

                    if (!labelText) {
                        labelText = "";
                    }

                    if (!id) {
                        id = options.name + "_" + kendo.guid();
                        element.attr("id", id);
                    }

                    that._inputLabel = $("<label class='" + LABELCLASSES + "' for='" + id + "'>" + labelText + "</label>'").insertBefore(that.wrapper);

                    if ((that.element.attr("disabled") === undefined$1) && (that.element.attr("readonly") === undefined$1)) {
                        that._inputLabel.on("click" + ns, that.focus.bind(that));
                    }
                }
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    DOMElement = element[0],
                    wrapper;

                wrapper = element.parents(".k-numerictextbox");

                if (!wrapper.is("span.k-numerictextbox")) {
                    wrapper = element.hide().wrap("<span/>").parent();
                }

                wrapper[0].style.cssText = DOMElement.style.cssText;
                DOMElement.style.width = "";
                that.wrapper = wrapper.addClass("k-numerictextbox k-input")
                                      .addClass(DOMElement.className)
                                      .removeClass('input-validation-error')
                                      .css("display", "");
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._resetHandler = function() {
                        setTimeout(function() {
                            that.value(element[0].value);
                            that.max(that._initialOptions.max);
                            that.min(that._initialOptions.min);
                        });
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            }
        });

        kendo.cssProperties.registerPrefix("NumericTextBox", "k-input-");

        kendo.cssProperties.registerValues("NumericTextBox", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        function buttonHtml(direction, text, options) {
            var className = direction === "increase" ? "caret-alt-up" : "caret-alt-down";
            var dir = direction === "increase" ? "increase" : "decrease";

            return html.renderButton('<button role="button" tabindex="-1" unselectable="on" class="k-spinner-' + dir + '" aria-label="' + text + '" title="' + text + '"></button>', extend({}, options, {
                icon: className,
                shape: null,
                rounded: null
            }));
        }

        function truncate(value, precision) {
            var parts = parseFloat(value, 10).toString().split(POINT);

            if (parts[1]) {
                parts[1] = parts[1].substring(0, precision);
            }

            return parts.join(POINT);

        }

        ui.plugin(NumericTextBox);
    })(window.kendo.jQuery);
    var kendo$e = kendo;

    (function($, undefined$1) {
        // WARNING: removing the following jshint declaration and turning
        // == into === to make JSHint happy will break functionality.

        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            parseColor = kendo.parseColor,
            TabKeyTrap = kendo.ui.Popup.TabKeyTrap,

            extend = $.extend,

            NS = ".kendoColorTools",
            KEYDOWN_NS = "keydown" + NS,
            DISABLED = "k-disabled";

        var ColorSelector = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                element = that.element;
                options = that.options;

                if (element.is("input")) {
                    that._initialValue();
                    that._preventDefaultLabelClick();
                } else {
                    that._value = parseColor(options.value);
                }

                that._tabIndex = element.attr("tabIndex") || 0;

                if (options._standalone) {
                    that._triggerSelect = that._triggerChange;
                }
            },
            options: {
                name: "ColorSelector",
                ARIATemplate: function (data) { return ("Current selected color is " + (data || "none")); },
                value: null,
                _standalone: true
            },
            events: [
                "change",
                "select",
                "forceSelect",
                "cancel"
            ],
            color: function(value) {
                if (value !== undefined$1) {
                    this._value = parseColor(value);

                    if (this.element.is("input")) {
                        this._updateInput(this._value);
                    }

                    this._updateUI(this._value);
                }

                return this._value;
            },
            value: function(color) {
                color = this.color(color);

                if (color) {
                    if (this.options.opacity) {
                        color = color.toCssRgba();
                    } else {
                        color = color.toCss();
                    }
                }

                return color || null;
            },
            enable: function(enable) {
                if (arguments.length === 0) {
                    enable = true;
                }

                if (this.element.is("input")) {
                    this.element.attr("disabled", !enable);
                }

                this.wrapper.toggleClass(DISABLED, !enable);

                this._onEnable(enable);
            },
            _attachFocusEvents: function () {
                this.wrapper.on(KEYDOWN_NS, this._navKeydown.bind(this))
                    .on("focusout" + NS, this._navFocusout.bind(this));
            },
            _initialValue: function() {
                var element = this.element,
                    options = this.options,
                    value = options.value || element.attr("value");

                if (value) {
                    this._value = parseColor(value, true);
                }

                this.element.val(value);
            },
            _innerTabindex: function(value) {
                var wrapper = this.wrapper;

                wrapper.find(".k-draghandle, .k-button, .k-input-inner").attr("tabindex", value);
            },
            _isInputTypeColor: function() {
                var el = this.element[0];
                return (/^input$/i).test(el.tagName) && (/^color$/i).test(el.type);
            },
            _navFocusout: function() {
                var that = this,
                    wrapper = that.wrapper[0];

                setTimeout(function() {
                    if (!wrapper.contains(document.activeElement)) {
                        that._releaseInnerFocus();
                    }
                });
            },
            _navKeydown: function(e) {
                var wrapper = this.wrapper;

                if (e.keyCode === kendo.keys.ENTER && wrapper.attr("tabindex")) {
                    e.preventDefault();

                    this._trapInnerFocus();
                } else if (e.keyCode === kendo.keys.ESC && wrapper.attr("tabindex") === undefined$1) {
                    this._releaseInnerFocus();
                    this.wrapper.trigger("focus");
                }
            },
            _releaseInnerFocus: function() {
                this._tabKeyTrap.removeTrap();
                this.wrapper.attr("tabindex", this._tabIndex);
                this._innerTabindex(-1);
            },
            _select: function(color, nohooks) {
                var prev = this._value;

                color = this.color(color);

                if (!nohooks) {
                    if ((color && (!prev || !color.equals(prev))) || (color === null && color !== prev)) {
                        if (color === null && this.element.val) {
                            this.element.val(color);
                        }

                        this.element.trigger("change");
                        this.trigger("change", { value: this.value() });
                    } else if (!this._standalone) {
                        this.trigger("cancel");
                    }
                }
            },
            _navigation: function() {
                var value = this.value();

                if (value && value.indexOf("rgba") > -1) {
                    value = value.replace("rgba", "RGBA");
                };

                if (this.options._otOfPicker) {
                    this._innerTabindex(-1);
                    this._attachFocusEvents();
                    this._tabKeyTrap = new TabKeyTrap(this.wrapper);

                    this._ariaTemplate = kendo.template(this.options.ARIATemplate);
                    this.wrapper.attr({
                        "aria-label": this._ariaTemplate(value || ""),
                        tabindex: this._tabIndex
                    });
                } else {
                    this.wrapper.removeAttr("tabindex");
                    this.wrapper.removeAttr("aria-label");
                    this.wrapper.removeAttr("role");
                    this.wrapper.removeAttr("aria-keyshortcuts");
                }
            },
            _trapInnerFocus: function() {
                this._innerTabindex(0);
                this.wrapper.removeAttr("tabindex");
                this.wrapper.find(".k-hsv-draghandle").trigger("focus");
                this._tabKeyTrap.trap();
            },
            _triggerSelect: function(color) {
                triggerEvent(this, "select", color);
            },
            _triggerChange: function(color) {
                triggerEvent(this, "change", color);
            },
            destroy: function() {
                if (this.element) {
                    this.element.off(NS);
                }

                if (this.wrapper) {
                    this.wrapper.off(KEYDOWN_NS);
                    this.wrapper.off(NS).find("*").off(NS);
                    this.wrapper = null;
                }

                Widget.fn.destroy.call(this);
            },
            _preventDefaultLabelClick: function() {
                // if there exists a <label> associated with this
                // input field, we must catch clicks on it to prevent
                // the built-in color picker from showing up.
                // https://github.com/telerik/kendo-ui-core/issues/292
                var element = this.element,
                    label = element.closest("label"),
                    id = element.attr("id");

                if (id) {
                    label = label.add('label[for="' + id + '"]');
                }
                label.on("click", function(ev) {
                    ev.preventDefault();
                });
            },
            _updateUI: $.noop,
            _updateInput: function(value) {
                var formattedValue = "",
                    valueForLabel;

                if (value) {
                    if (this._isInputTypeColor() || value.a == 1) {
                        // seems that input type="color" doesn't support opacity
                        // in colors; the only accepted format is hex #RRGGBB
                        formattedValue = value.toCss();
                    } else {
                        formattedValue = value.toCssRgba();
                    }

                    this.element.val(formattedValue);
                }

                if (this.options._otOfPicker) {
                    if (!this._ariaTemplate) {
                        this._ariaTemplate = kendo.template(this.options.ARIATemplate);
                    }

                    valueForLabel = this.value();

                    if (valueForLabel && valueForLabel.indexOf("rgba") > -1) {
                        valueForLabel = valueForLabel.replace("rgba", "RGBA");
                    };

                    this.wrapper.attr("aria-label", this._ariaTemplate(valueForLabel || ""));
                }
            },
            _selectOnHide: function() {
                return null;
            },
            _cancel: function() {
                this.trigger("cancel");
            }
        });

        function triggerEvent(self, type, color) {
            color = parseColor(color);

            if ((color && !color.equals(self.color())) || color !== self.color()) {
                if (type == "change") {
                    // UI is already updated.  setting _value directly
                    // rather than calling self.color(color) to avoid an
                    // endless loop.
                    self._value = color;
                    self._updateInput(self._value);
                }
                if (color && color.a != 1) {
                    color = color.toCssRgba();
                } else if (color) {
                    color = color.toCss();
                }

                self.trigger(type, { value: color });
            }
        }

        extend(ui, {
            colorpicker: {
                ColorSelector: ColorSelector
            }
        });


    })(window.kendo.jQuery);

    (function($, undefined$1){
        var colorpicker = kendo.ui.colorpicker,
            extend = $.extend,
            Color = kendo.Color,
            parseColor = kendo.parseColor,

            AA_CONTRAST = 4.5,
            AAA_CONTRAST = 7,
            STEP_COUNT = 16;

        // Color utils - calc contrast

        function getContrast(luminance1, luminance2) {
            var brightest = Math.max(luminance1, luminance2);
            var darkest = Math.min(luminance1, luminance2);
            return (brightest + 0.05) / (darkest + 0.05);
        }

        function getContrastFromTwoRGBAs(a, b) {
            return getContrast(
                getLuminance(getRGBFromRGBA(a, b)),
                getLuminance(getRGBFromRGBA(b, { r: 0, g: 0, b: 0, a: 1 })));
        }

        function getLuminance (rgb) {
            var a = [rgb.r, rgb.g, rgb.b].map(function (v) {
                v /= 255;
                return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
            });
            return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
        }

        function getRGBFromRGBA(foregroundColor, backgroundColor) {
            var r1 = fitIntoBounds(foregroundColor.r, 0, 255);
            var g1 = fitIntoBounds(foregroundColor.g, 0, 255);
            var b1 = fitIntoBounds(foregroundColor.b, 0, 255);
            var a1 = fitIntoBounds(foregroundColor.a, 0, 1);

            var r2 = fitIntoBounds(backgroundColor.r, 0, 255);
            var g2 = fitIntoBounds(backgroundColor.g, 0, 255);
            var b2 = fitIntoBounds(backgroundColor.b, 0, 255);

            return {
                r: Math.round(((1 - a1) * r2) + (a1 * r1)),
                g: Math.round(((1 - a1) * g2) + (a1 * g1)),
                b: Math.round(((1 - a1) * b2) + (a1 * b1))
            };
        }

        function fitIntoBounds(contender, min, max) {
            if (!isPresent(contender) || isNaN(contender)) {
                return min;
            }

            return contender <= min ? min : contender >= max ? max : contender;
        }

        function isPresent(value) { return value !== null && value !== undefined$1; }


        // Color utils - Contrast tool SVG path

        function renderSvgCurveLine(gradientRectMetrics, hsva, backgroundColor) {
            var findValue = function (contrast, saturation, low, high, comparer) {
                var mid = (low + high) / 2;
                var currentHsva = extend({}, hsva, { s: saturation / gradientRectMetrics.width, v: 1 - mid / gradientRectMetrics.height });
                var currentContrast = getContrastFromTwoRGBAs(parseColor(getColorFromHSV(currentHsva)).toBytes(), parseColor(backgroundColor).toBytes());

                if (low + 0.5 > high) {
                    if (currentContrast < contrast + 1 && currentContrast > contrast - 1) {
                        return mid;
                    } else {
                        return null;
                    }
                }

                if (comparer(currentContrast, contrast)) {
                    return findValue(contrast, saturation, low, high - (high - low) / 2, comparer);
                }
                return findValue(contrast, saturation, low + (high - low) / 2, high, comparer);
            };

            var comparer = function (a, b) {
                return a > b;
            };

            var reversedComparer = function (a, b) {
                return a < b;
            };

            var getPaths = function (contrast, stepCount, reversed) {
                var points = [];
                for (var i = 0; i <= gradientRectMetrics.width; i += gradientRectMetrics.width/stepCount) {
                   var value = findValue(contrast, i, 0, gradientRectMetrics.height, reversed ? reversedComparer : comparer);
                    if (value !== null){
                        points.push([i, value]);
                    }
                }
                return points;
            };

            var bezierCommandCalc = bezierCommand(controlPoint(line));
            var paths = svgPath(getPaths(AA_CONTRAST, STEP_COUNT, false), bezierCommandCalc) +
                    svgPath(getPaths(AA_CONTRAST, STEP_COUNT, true), bezierCommandCalc) +
                    svgPath(getPaths(AAA_CONTRAST, STEP_COUNT, false), bezierCommandCalc) +
                    svgPath(getPaths(AAA_CONTRAST, STEP_COUNT, true), bezierCommandCalc);

            return "<svg xmlns=\"http://www.w3.org/2000/svg\" " + (kendo.attr("style-position")) + "=\"absolute\" " + (kendo.attr("style-overflow")) + "=\"visible\" " + (kendo.attr("style-pointer-events")) + "=\"none\" " +
                    (kendo.attr("style-left")) + "=\"0px\" " + (kendo.attr("style-top")) + "=\"0px\" " + (kendo.attr("style-z-index")) + "=\"3\" >" +
                        paths  + '</svg>';
        }

        function svgPath(points, command) {
            if (points.length === 0){
                return '';
            }

            var reducer = function (acc, point, i, a) {
                return i === 0 ?
                    // if first point
                    kendo.format("M {0},{1}", point[0], point[1]) :
                    // else
                    kendo.format("{0} {1}", acc, command(point, i, a));
            };

            // build the d attributes by looping over the points
            var d = points.reduce(reducer, "");

            return kendo.format('<path d="{0}" fill="none" stroke="white" stroke-width="1"/>', d);
        }

        function bezierCommand(controlPointCalc) {
            return function(point, i, a) {
                // start control point
                var cps = controlPointCalc(a[i - 1], a[i - 2], point); // [cpsX, cpsY]

                // end control point
                var cpe = controlPointCalc(point, a[i - 1], a[i + 1], true); //  [cpeX, cpeY]

                return kendo.format("C {0},{1} {2},{3} {4},{5}", cps[0], cps[1], cpe[0], cpe[1], point[0], point[1]);
            };
        }

        function controlPoint(lineCalc) {
            return function (current, previous, next, reverse) {
                // when 'current' is the first or last point of the array
                // 'previous' and 'next' are undefined
                // replace with 'current'
                    var p = previous || current;
                    var n = next || current;
                    var smooth = 0.1;

                    // properties of the line between previous and next
                    var l = lineCalc(p, n);

                    // If is end-control-point, add PI to the angle to go backward
                    var angle = l.angle + (reverse ? Math.PI : 0);
                    var length = l.length * smooth;

                    // The control point position is relative to the current point
                    var x = current[0] + Math.cos(angle) * length;
                    var y = current[1] + Math.sin(angle) * length;

                    return [x, y];
            };
        }

        function line (pointA, pointB) {
            var lengthX = pointB[0] - pointA[0];
            var lengthY = pointB[1] - pointA[1];

            return {
                length: Math.sqrt(Math.pow(lengthX, 2) + Math.pow(lengthY, 2)),
                angle: Math.atan2(lengthY, lengthX)
            };
        }

        function getColorFromHSV (hsva) {
            var hue = fitIntoBounds(hsva.h, 0, 359.9);
            var saturation = fitIntoBounds(hsva.s, 0, 1);
            var value = fitIntoBounds(hsva.v, 0, 1);
            var alpha = fitIntoBounds(hsva.a, 0, 1);

            return Color.fromHSV(hue, saturation, value, alpha).toCssRgba();
        }

        extend(colorpicker, {
            contrastToolUtils: {
                getContrastFromTwoRGBAs: getContrastFromTwoRGBAs,
                renderSvgCurveLine: renderSvgCurveLine
            }
        });

    })(window.kendo.jQuery);

    var __meta__$g = {
            id: "colorgradient",
            name: "ColorGradient",
            category: "web", // suite
            description: "ColorGradient allows selection of a color from an HSV canvas.",
            depends: ["core", "popup", "textbox", "icons"] // dependencies
        };
    (function($, undefined$1) {
        // WARNING: removing the following jshint declaration and turning
        // == into === to make JSHint happy will break functionality.

        var kendo = window.kendo,
            ui = kendo.ui,
            Observable = kendo.Observable,
            parseColor = kendo.parseColor,
            extend = $.extend,
            encode = kendo.htmlEncode,
            Color = kendo.Color,
            KEYS = kendo.keys,
            BACKGROUNDCOLOR = "background-color",
            WHITE = "#ffffff",
            BLACK = "#000000",
            NS = ".kendoColorTools",
            KEYDOWN_NS = "keydown" + NS,
            ColorSelector = ui.colorpicker.ColorSelector,

            contrastToolUtils = ui.colorpicker.contrastToolUtils;

        function preventDefault(ev) { ev.preventDefault(); }

        function bind(callback, obj) {
            return function() {
                return callback.apply(obj, arguments);
            };
        }

        var ColorInput = Observable.extend({
            init: function(element, options) {
                var that = this;

                that.element = element;
                that.options = options;

                that._viewModel = kendo.observable({
                    switchMode: that.switchMode.bind(that),
                    keydown: that.keydown.bind(that),
                    isHEXMode: function () { return this.get("format") === 'hex' },
                    isRGBMode: function () { return this.get("format") === 'rgb' },
                    format: options.format,
                    formats: options.formats,
                    rgb: null,
                    hex: function () {
                        return this.get("rgb") !== null && this.get("rgb").toCss({alpha: options.opacity});
                    }
                });

                that._changeHandler = that.change.bind(that);

                that._viewModel.bind("change", that._changeHandler);

                that._render();

                that.element.on(KEYDOWN_NS, that.keydown.bind(that));

                Observable.fn.init.call(that);
            },
            _template: kendo.template(function (ref) {
                var options = ref.options;
                var ns = ref.ns;

                var optionsSize = encode(options.size);
                var optionsTabIndex = encode(options.tabindex);

                var vStackElement = "";
                if (options.formats && options.formats.length > 1) {
                    var optionsMessagesToggleFormat = encode(options.messages.toggleFormat);

                    vStackElement =
                    '<div class="k-vstack">' +
                        "<button class=\"k-colorgradient-toggle-mode\" data-" + ns + "role=\"button\" data-" + ns + "icon=\"caret-alt-expand\" data data-" + ns + "bind=\"click: switchMode\" data-" + ns + "fill-mode=\"flat\" data-" + ns + "size=\"" + optionsSize + "\" title=\"" + optionsMessagesToggleFormat + "\">" +
                        '</button>' +
                    '</div>';
                }

                // HEX input
                var hexInputElement = "";
                if (options.formats && options.formats.indexOf("hex") >= 0) {
                    var optionsMessagesHex = encode(options.messages.hex);

                    hexInputElement =
                    "<div class=\"k-vstack\" data-" + ns + "bind=\"visible: isHEXMode\">" +
                        "<input type=\"text\" data-" + ns + "bind=\"value: hex\" data-" + ns + "role=\"textbox\" data-" + ns + "size=\"" + optionsSize + "\" tabindex=\"" + optionsTabIndex + "\"  aria-label=\"" + optionsMessagesHex + "\"/>" +
                        '<label class="k-colorgradient-input-label">HEX</label>' +
                    '</div>';
                }

                // RGBA input
                var rgbaInputElement = "";
                if (options.formats && options.formats.indexOf("rgb") >= 0) {
                    var optionsMessagesRed = encode(options.messages.red);
                    var optionsMessagesGreen = encode(options.messages.green);
                    var optionsMessagesBlue = encode(options.messages.blue);

                    rgbaInputElement =
                    "<div class=\"k-vstack\" data-" + ns + "bind=\"visible: isRGBMode\">" +
                        "<input tabindex=\"" + optionsTabIndex + "\" data-" + ns + "bind=\"value: rgb.r\" data-" + ns + "role=\"numerictextbox\" data-" + ns + "size=\"" + optionsSize + "\" data-" + ns + "max=\"255\" data-" + ns + "min=\"0\" data-" + ns + "decimals=\"0\" data-" + ns + "spinners=\"false\" data-" + ns + "format=\"n0\" aria-label=\"" + optionsMessagesRed + "\" />" +
                        '<label class="k-colorgradient-input-label">R</label>' +
                    '</div>' +
                    "<div class=\"k-vstack\" data-" + ns + "bind=\"visible: isRGBMode\">" +
                        "<input tabindex=\"" + optionsTabIndex + "\" data-" + ns + "bind=\"value: rgb.g\" data-" + ns + "role=\"numerictextbox\" data-" + ns + "size=\"" + optionsSize + "\" data-" + ns + "max=\"255\" data-" + ns + "min=\"0\" data-" + ns + "decimals=\"0\" data-" + ns + "spinners=\"false\" data-" + ns + "format=\"n0\" aria-label=\"" + optionsMessagesGreen + "\" />" +
                        '<label class="k-colorgradient-input-label">G</label>' +
                    '</div>' +
                    "<div class=\"k-vstack\" data-" + ns + "bind=\"visible: isRGBMode\">" +
                        "<input tabindex=\"" + optionsTabIndex + "\" data-" + ns + "bind=\"value: rgb.b\" data-" + ns + "role=\"numerictextbox\" data-" + ns + "size=\"" + optionsSize + "\" data-" + ns + "max=\"255\" data-" + ns + "min=\"0\" data-" + ns + "decimals=\"0\" data-" + ns + "spinners=\"false\" data-" + ns + "format=\"n0\" aria-label=\"" + optionsMessagesBlue + "\"/>" +
                        '<label class="k-colorgradient-input-label">B</label>' +
                    '</div>';

                    if(options.opacity) {
                        var optionsMessagesAlpha = options.messages.alpha;
                        rgbaInputElement +=
                        "<div class=\"k-vstack\" data-" + ns + "bind=\"visible: isRGBMode\">" +
                            "<input tabindex=\"" + optionsTabIndex + "\" data-" + ns + "bind=\"value: rgb.a\" data-" + ns + "role=\"numerictextbox\" data-" + ns + "size=\"" + optionsSize + "\" data-" + ns + "step=\"0.1\" data-" + ns + "max=\"1\" data-" + ns + "min=\"0\" data-" + ns + "decimals=\"1\" data-" + ns + "spinners=\"false\" data-" + ns + "format=\"n1\" aria-label=\"" + optionsMessagesAlpha + "\" />" +
                            '<label class="k-colorgradient-input-label">A</label>' +
                        '</div>';
                    }
                }

                return vStackElement + hexInputElement + rgbaInputElement;
            }),
            destroy: function(){
                var that = this;

                that._viewModel.unbind("change", that._changeHandler);
                kendo.unbind(that.element);
                kendo.destroy(that.element);
                that.element.off(KEYDOWN_NS);
                delete that._viewModel;
                delete that._changeHandler;
            },
            change: function (ev) {
                var that = this;

                if (ev.field.indexOf("rgb") >= 0) {
                    that._color = that._tryParseColor(that._viewModel.rgb.toCssRgba());
                    that._viewModel.set("hex", that._color.toCss({ alpha: that.options.opacity }));
                } else if (ev.field === "hex") {
                    that._color = that._tryParseColor(ev.sender[ev.field]);
                    that._viewModel.set("rgb", that._color);
                }

                if (!that._preventChangeEvent) {
                    that.trigger("change", {value: that._color});
                }
            },
            keydown: function (ev) {
                var that = this,
                    textbox = $(ev.target).data("kendoTextBox");

                if (ev.keyCode === KEYS.ENTER && $(ev.target).is("input")) {
                    if(textbox && textbox._change) {
                        textbox._change();
                    }

                    that.trigger("change", {value: that._color});
                    that.trigger("select", {value: that._color});
                }
            },
            reset: function () {
                var that = this;

                that._preventChangeEvent = true;
                that._viewModel.set("rgb", parseColor(BLACK));
                delete that._preventChangeEvent;
            },
            switchMode: function() {
                var that = this,
                    model = that._viewModel,
                    currentFormat = model.format,
                    index = model.formats.indexOf(currentFormat) + 1;

                index = index >= model.formats.length ? 0 : index;

                that._preventChangeEvent = true;
                that._viewModel.set("format", model.formats[index]);
                delete that._preventChangeEvent;
            },
            value: function (color) {
                var that = this;

                that._color = (color && color.toBytes()) || parseColor(BLACK);
                that._preventChangeEvent = true;
                that._viewModel.set("rgb", that._color);
                delete that._preventChangeEvent;
            },
            _render: function() {
                var that = this;

                that.element
                    .append(that._template({ ns: kendo.ns, guid: kendo.guid(), options: that.options }))
                    .parent();

                kendo.bind(that.element, that._viewModel);
                that.element.attr("data-" + kendo.ns + "stop", "stop");
            },
            _tryParseColor: function (color) {
                var that = this;

                try {
                    color = parseColor(color) || that._color;
                } catch (error) {
                    color = that._color;
                }

                return color;
            }
        });

        var ColorGradient = ColorSelector.extend({
            init: function (element, options) {
                var that = this,
                    value;

                ColorSelector.fn.init.call(that, element, options);

                options = that.options = kendo.deepExtend({}, that.options, options);

                if(options.messages.previewInput) {
                    options.messages.hex = options.messages.previewInput;
                }

                options.messages = options.messages ? $.extend(that.options.messages, options.messages) : that.options.messages;
                element = that.element;

                that._wrapper();
                that._sliders();
                that._hsvArea();

                value = that._value;

                that._gradientInputs();
                that._updateUI(value);
                that._navigation();
            },
            options: {
                name : "ColorGradient",
                opacity : false,
                hsvDragARIATemplate: function (data) { return ("Color well with two-dimensional slider for selecting saturation and value. Selected color is " + (data || "none")); },
                input : true,
                format: "hex",
                formats: ["rgb", "hex"],
                contrastTool: false,
                size: "medium",
                messages: {
                    contrastRatio: "Contrast ratio:",
                    fail: "Fail",
                    pass: "Pass",
                    hex: "HEX",
                    toggleFormat: "Toggle format",
                    red: "Red channel",
                    green: "Green channel",
                    blue: "Blue channel",
                    alpha: "Alpha channel"
                },
                _otOfPicker: true
            },
            _template: kendo.template(function (options) { return '<div class="k-colorgradient-canvas k-hstack">' +
                        '<div class="k-hsv-rectangle"><div class="k-hsv-gradient"><div role="slider" aria-orientation="undefined" class="k-hsv-draghandle k-draghandle"></div></div></div>' +
                        '<div class="k-hsv-controls k-hstack">' +
                            '<input class="k-hue-slider k-colorgradient-slider" />' +
                            (options.opacity ? '<input class="k-alpha-slider k-colorgradient-slider" />' : '') +
                        '</div>' +
                    '</div>' +
                    (options.input ? '<div class="k-colorgradient-inputs k-hstack"></div>' : '') +
                    (options.contrastTool ? '<div class="k-colorgradient-color-contrast k-vbox"></div>' : ''); }
            ),
            focus: function() {
                this._hsvHandle.focus();
            },
            setBackgroundColor: function(color) {
                var that = this;

                if (that.options.contrastTool) {
                    that.options.contrastTool = $.isPlainObject(that.options.contrastTool) ? extend({}, that.options.contrastTool, {
                        backgroundColor: color
                    }) : {
                        backgroundColor: color
                    };

                    that._updateColorContrast(that.color() || parseColor(WHITE));
                }
            },
            _getHSV: function(h, s, v, a) {
                var that = this,
                    rect = that._hsvRect,
                    width = rect.width(),
                    height = rect.height(),
                    handlePosition = this._hsvHandle.position();

                if(!width || !height) {
                    return that.color() ? that.color().toHSV() : parseColor(BLACK);
                }

                if (h == null) {
                    h = that._hueSlider.value();
                }
                if (s == null) {
                    s = handlePosition.left / width;
                }
                if (v == null) {
                    v = 1 - handlePosition.top / height;
                }
                if (a == null) {
                    a = that._opacitySlider ? that._opacitySlider.value() / 100 : 1;
                }
                return Color.fromHSV(h, s, v, a);
            },
            _gradientInputs: function() {
                var that = this,
                    options = that.options;

                if(that._colorgradientInputs.length) {
                    that._colorInput = new ColorInput(that._colorgradientInputs, extend({}, options, {
                        tabindex: 0
                    }));

                    that._colorInput.bind("change", function(ev){
                        that._updateUI(ev.value, true);
                    });

                    that._colorInput.bind("select", function(ev){
                        var color = parseColor(ev.value);
                        that._select(color);
                        that.trigger("forceSelect", { value: that.value() });
                    });
                }
            },
            _hsvArea: function() {
                var that = this,
                    wrapper = that.wrapper,
                    hsvRect = wrapper.find(".k-hsv-rectangle"),
                    hsvHandle = hsvRect.find(".k-draghandle").attr("tabIndex", 0).on(KEYDOWN_NS, bind(that._hsvKeydown, that)),
                    value = this.value();

                if (value && value.indexOf("rgba") > -1) {
                    value = value.replace("rgba", "RGBA");
                };

                if (!this._hsvDragAriaTemplate) {
                    this._hsvDragAriaTemplate = kendo.template(this.options.hsvDragARIATemplate);
                }

                hsvHandle.attr("aria-label", this._hsvDragAriaTemplate(value || ''));

                function update(x, y) {
                    var offset = this.offset,
                        dx = x - offset.left, dy = y - offset.top,
                        rw = this.width, rh = this.height,
                        resultX, resultY;

                    dx = dx < 0 ? 0 : dx > rw ? rw : dx;
                    dy = dy < 0 ? 0 : dy > rh ? rh : dy;
                    resultX = dx / rw;
                    resultY = 1 - dy / rh;

                    that._svChange(resultX, resultY);
                }

                that._hsvEvents = new kendo.UserEvents(hsvRect, {
                    global: true,
                    press: function(e) {
                        this.offset = kendo.getOffset(hsvRect);
                        this.width = hsvRect.width();
                        this.height = hsvRect.height();
                        hsvHandle.focus();
                        update.call(this, e.x.location, e.y.location);
                    },
                    start: function() {
                        hsvRect.addClass("k-dragging");
                        hsvHandle.focus();
                    },
                    move: function(e) {
                        e.preventDefault();
                        update.call(this, e.x.location, e.y.location);
                    },
                    end: function() {
                        hsvRect.removeClass("k-dragging");
                    }
                });

                that._hsvRect = hsvRect;
                that._hsvHandle = hsvHandle;
            },
            _hsvKeydown: function(ev) {
                var that = this;
                function move(prop, d) {
                    var c = that._getHSV();
                    c[prop] += d * (ev.shiftKey ? 0.01 : 0.05);
                    if (c[prop] < 0) { c[prop] = 0; }
                    if (c[prop] > 1) { c[prop] = 1; }
                    that._updateUI(c);
                    preventDefault(ev);
                }
                function hue(d) {
                    var c = that._getHSV();
                    c.h += d * (ev.shiftKey ? 1 : 5);
                    if (c.h < 0) { c.h = 0; }
                    if (c.h > 359) { c.h = 359; }
                    that._updateUI(c);
                    preventDefault(ev);
                }
                switch (ev.keyCode) {
                case KEYS.LEFT:
                    if (ev.ctrlKey) {
                        hue(-1);
                    } else {
                        move("s", -1);
                    }
                    break;
                case KEYS.RIGHT:
                    if (ev.ctrlKey) {
                        hue(1);
                    } else {
                        move("s", 1);
                    }
                    break;
                case KEYS.UP:
                    move(ev.ctrlKey && that._opacitySlider ? "a" : "v", 1);
                    break;
                case KEYS.DOWN:
                    move(ev.ctrlKey && that._opacitySlider ? "a" : "v", -1);
                    break;
                case KEYS.ENTER:
                    that._select(that._getHSV());
                    break;
                case KEYS.F2:
                    that._colorInput.element.find("input").trigger("focus").select();
                    break;
                case KEYS.ESC:
                    that._cancel();
                    break;
                }
            },
            _onEnable: function(enable) {
                var wrapper = this.wrapper;

                this._hueSlider.enable(enable);

                if (this._opacitySlider) {
                    this._opacitySlider.enable(enable);
                }

                wrapper.find("input").attr("disabled", !enable);

                if (this.options._standalone) {
                    if (enable) {
                        wrapper.removeAttr("aria-disabled");
                    } else {
                        wrapper.attr("aria-disabled", true);
                    }
                }
            },
            _reset: function () {
                var that = this;

                if (that._colorInput) {
                    that._colorInput.reset();
                }

                that._resetHsv();
                that._resetColorContrast();
            },
            _resetColorContrast: function () {
                var that = this,
                    contrastOptions = that.options.contrastTool;

                if(that._contrastTool.length) {
                    that._updateColorContrast(contrastOptions.backgroundColor ? parseColor(contrastOptions.backgroundColor) : parseColor(WHITE));
                }
            },
            _resetHsv: function () {
                var that = this,
                    color = parseColor(BLACK);

                that._updateHsv(color);
            },
            _sliders: function() {
                var that = this,
                    wrapper = that.wrapper,
                    hueSlider = wrapper.find(".k-hue-slider"),
                    opacitySlider = wrapper.find(".k-alpha-slider");

                function hueChange(e) {
                    that._updateUI(that._getHSV(e.value, null, null, null));
                }

                hueSlider.attr("aria-label", "hue");
                that._hueSlider = hueSlider.kendoSlider({
                    min: 0,
                    max: 360,
                    tickPlacement: "none",
                    showButtons: false,
                    orientation: "vertical",
                    slide: hueChange,
                    change: hueChange
                }).data("kendoSlider");

                function opacityChange(e) {
                    that._updateUI(that._getHSV(null, null, null, e.value / 100));
                }

                opacitySlider.attr("aria-label", "opacity");
                that._opacitySlider = opacitySlider.kendoSlider({
                    min: 0,
                    max: 100,
                    tickPlacement: "none",
                    showButtons: false,
                    orientation: "vertical",
                    slide: opacityChange,
                    change: opacityChange
                }).data("kendoSlider");
            },
            _svChange: function(s, v) {
                var color = this._getHSV(null, s, v, null);
                this._updateUI(color);
            },
            _updateColorContrast: function (color) {
                var that = this,
                    contrastOptions = that.options.contrastTool,
                    backgroundColor = contrastOptions.backgroundColor ? parseColor(contrastOptions.backgroundColor) : parseColor(WHITE),
                    contrastRatio = contrastToolUtils.getContrastFromTwoRGBAs(parseColor(color.toCssRgba()), backgroundColor),
                    contrastRatioTemplate = kendo.template(function (ref) {
                                                    var messages = ref.messages;
                                                    var ratio = ref.ratio;

                                                    return '<div class="k-contrast-ratio">' +
                                                    "<span class=\"k-contrast-ratio-text\">" + (encode(messages.contrastRatio)) + " " + (encode(kendo.toString(ratio, "n2"))) + "</span>" +
                                                    '<span class="k-contrast-validation k-text-success">' +
                                                        (ratio > 4.5 ?  kendo.ui.icon("check") : '') +
                                                        (ratio > 7 ?  kendo.ui.icon("check") : '') +
                                                '</span></div>';
                }),
                    labelTemplate = kendo.template(function (ref) {
                                                    var messages = ref.messages;
                                                    var ratio = ref.ratio;
                                                    var limit = ref.limit;
                                                    var level = ref.level;

                                                    return '<div>' +
                                                    "<span>" + (encode(level)) + ": " + (encode(limit)) + " </span>" +
                                                    (ratio > limit ?
                                                    ("<span class=\"k-contrast-validation k-text-success\">" + (encode(messages.pass)) + " " + (kendo.ui.icon("check")) + "</span>")
                                                    :
                                                    ("<span class=\"k-contrast-validation k-text-error\">" + (encode(messages.fail)) + " " + (kendo.ui.icon("x")) + "</span>")) +
                                                '</div>';
                }),
                    output = "";

                output += contrastRatioTemplate({
                    messages: that.options.messages,
                    ratio: contrastRatio,
                });

                output += labelTemplate({
                    messages: that.options.messages,
                    ratio: contrastRatio,
                    limit: 4.5,
                    level: "AA"
                });

                output += labelTemplate({
                    messages: that.options.messages,
                    ratio: contrastRatio,
                    limit: 7,
                    level: "AAA"
                });

                that._contrastTool.find(".k-contrast-ratio, div").remove();
                that._contrastTool.append(output);

                that._updateContrastSvg(backgroundColor);
            },
            _updateContrastSvg: function (backgroundColor) {
                var that = this,
                    hsvRect = that._hsvRect,
                    svgClassName = "k-color-contrast-svg",
                    metrics = { width: hsvRect.width(), height: hsvRect.height() },
                    newSvg;

                if(!metrics.width || !metrics.height) {
                    return;
                }

                newSvg = $(contrastToolUtils.renderSvgCurveLine(metrics, that._getHSV(), backgroundColor)).addClass(svgClassName);
                kendo.applyStylesFromKendoAttributes(newSvg, ["position", "overflow", "pointer-events", "left", "top", "z-index"]);

                hsvRect.find("." + svgClassName).remove();
                hsvRect.append(newSvg);
            },
            _updateHsv: function (color) {
                var that = this,
                    rect = that._hsvRect;

                color = color.toHSV();

                that._hsvHandle.css({
                    // saturation is 0 on the left side, full (1) on the right
                    left: color.s * rect.width() + "px",
                    // value is 0 on the bottom, full on the top.
                    top: (1 - color.v) * rect.height() + "px"
                });

                that._hueElements.css(BACKGROUNDCOLOR, Color.fromHSV(color.h, 1, 1, 1).toCss());
                that._hueSlider.value(color.h);

                if (that._opacitySlider) {
                    that._opacitySlider.wrapper.find(".k-slider-track").css("background", "linear-gradient(to top, transparent, " + Color.fromHSV(color.h, 1, 1, 1).toCss());
                    that._opacitySlider.value(100 * color.a);
                }

                that._updateHsvAria(color.s, color.v);
            },
            _updateHsvAria: function(x,y) {
                var value = this.value();

                if (value && value.indexOf("rgba") > -1) {
                    value = value.replace("rgba", "RGBA");
                }

                this._hsvHandle.attr({
                    "aria-label": this._hsvDragAriaTemplate(value || ''),
                    "aria-valuenow": Math.round(x * 100),
                    "aria-valuetext": "saturation: " + Math.round(x * 100) + "%, value: " + Math.round(y * 100) + "%"
                });
            },
            _updateUI: function(color, dontChangeInput) {
                var that = this;

                if (!color) {
                    that._reset();
                    return;
                }

                if (!dontChangeInput && that._colorInput) {
                    that._colorInput.value(color);
                }

                that._triggerSelect(color);
                that._updateHsv(color);

                if(that._contrastTool.length) {
                    that._updateColorContrast(color);
                }
            },
            _wrapper: function() {
                var options = this.options,
                    wrapper;

                if (this.element.is("input")) {
                    wrapper = this.element.addClass("k-hidden").wrap("<div>").parent();
                } else {
                    wrapper = this.element;
                }

                wrapper.addClass("k-colorgradient")
                    .attr({
                        "role": "textbox",
                        "aria-keyshortcuts": "Enter"
                    })
                    .append(this._template(options));

                this._hueElements = $(".k-hsv-rectangle, .k-alpha-slider .k-slider-track", wrapper);
                this._colorgradientInputs = $(".k-colorgradient-inputs", wrapper);
                this._contrastTool = $(".k-colorgradient-color-contrast", wrapper);

                this.wrapper = wrapper;
            },
            destroy: function (){
                this._hsvEvents.destroy();

                this._hueSlider.destroy();
                if (this._opacitySlider) {
                    this._opacitySlider.destroy();
                }

                if(this._colorInput) {
                    this._colorInput.destroy();
                }

                this._hueSlider = this._opacitySlider = this._hsvRect = this._hsvHandle =
                    this._hueElements = this._selectedColor = this._colorAsText =
                    this._contrastTool = null;

                ColorSelector.fn.destroy.call(this);
            }
        });

        ui.plugin(ColorGradient);

    })(window.kendo.jQuery);

    (function($, undefined$1){
        // WARNING: removing the following jshint declaration and turning
        // == into === to make JSHint happy will break functionality.

        var kendo = window.kendo,
            ui = kendo.ui,
            parseColor = kendo.parseColor,
            KEYS = kendo.keys,
            DOT = ".",
            BACKGROUNDCOLOR = "background-color",
            ITEMSELECTEDCLASS = "k-selected",
            ITEMSFOCUSEDCLASS = "k-focus",
            TILE_CLASS = "k-colorpalette-tile",
            SIMPLEPALETTE = "000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7",
            WEBPALETTE = "FFFFFF,FFCCFF,FF99FF,FF66FF,FF33FF,FF00FF,CCFFFF,CCCCFF,CC99FF,CC66FF,CC33FF,CC00FF,99FFFF,99CCFF,9999FF,9966FF,9933FF,9900FF,FFFFCC,FFCCCC,FF99CC,FF66CC,FF33CC,FF00CC,CCFFCC,CCCCCC,CC99CC,CC66CC,CC33CC,CC00CC,99FFCC,99CCCC,9999CC,9966CC,9933CC,9900CC,FFFF99,FFCC99,FF9999,FF6699,FF3399,FF0099,CCFF99,CCCC99,CC9999,CC6699,CC3399,CC0099,99FF99,99CC99,999999,996699,993399,990099,FFFF66,FFCC66,FF9966,FF6666,FF3366,FF0066,CCFF66,CCCC66,CC9966,CC6666,CC3366,CC0066,99FF66,99CC66,999966,996666,993366,990066,FFFF33,FFCC33,FF9933,FF6633,FF3333,FF0033,CCFF33,CCCC33,CC9933,CC6633,CC3333,CC0033,99FF33,99CC33,999933,996633,993333,990033,FFFF00,FFCC00,FF9900,FF6600,FF3300,FF0000,CCFF00,CCCC00,CC9900,CC6600,CC3300,CC0000,99FF00,99CC00,999900,996600,993300,990000,66FFFF,66CCFF,6699FF,6666FF,6633FF,6600FF,33FFFF,33CCFF,3399FF,3366FF,3333FF,3300FF,00FFFF,00CCFF,0099FF,0066FF,0033FF,0000FF,66FFCC,66CCCC,6699CC,6666CC,6633CC,6600CC,33FFCC,33CCCC,3399CC,3366CC,3333CC,3300CC,00FFCC,00CCCC,0099CC,0066CC,0033CC,0000CC,66FF99,66CC99,669999,666699,663399,660099,33FF99,33CC99,339999,336699,333399,330099,00FF99,00CC99,009999,006699,003399,000099,66FF66,66CC66,669966,666666,663366,660066,33FF66,33CC66,339966,336666,333366,330066,00FF66,00CC66,009966,006666,003366,000066,66FF33,66CC33,669933,666633,663333,660033,33FF33,33CC33,339933,336633,333333,330033,00FF33,00CC33,009933,006633,003333,000033,66FF00,66CC00,669900,666600,663300,660000,33FF00,33CC00,339900,336600,333300,330000,00FF00,00CC00,009900,006600,003300,000000",
            NS = ".kendoColorTools",
            FOCUS_NS = "focus" + NS,
            CLICK_NS = "click" + NS,
            KEYDOWN_NS = "keydown" + NS,
            BLUR_NS = "blur" + NS,
            ColorSelector = ui.colorpicker.ColorSelector;

        function preventDefault(ev) { ev.preventDefault(); }

        function bind(callback, obj) {
            return function() {
                return callback.apply(obj, arguments);
            };
        }

        function relative(array, element, delta) {
            array = Array.prototype.slice.call(array);
            var n = array.length;
            var pos = array.indexOf(element);
            if (pos < 0) {
                return delta < 0 ? array[n - 1] : array[0];
            }
            pos += delta;
            if (pos < 0) {
                pos += n;
            } else {
                pos %= n;
            }
            return array[pos];
        }

        var ColorPalette = ColorSelector.extend({
            init: function(element, options) {
                var that = this;

                ColorSelector.fn.init.call(that, element, options);

                that._tabIndex = this.element.attr("tabindex") || 0;

                that._wrapper();

                options = that.options;

                that._selectedID = (options.ariaId || kendo.guid()) + "_selected";
                that._ariaTemplate = kendo.template(that.options.ARIATemplate);

                if (that._value) {
                    that._updateUI(that._value);
                    that.wrapper.find(DOT + ITEMSFOCUSEDCLASS).removeClass(ITEMSFOCUSEDCLASS);
                }

                that.wrapper.attr("aria-label", that._ariaTemplate(that.value() || ""));

                that._attachEvents();
            },
            focus: function(){
                if (this.wrapper && !this.wrapper.is("[unselectable='on']")) {
                    this.wrapper.trigger("focus");
                }
            },
            options: {
                name: "ColorPalette",
                columns: 10,
                tileSize: null,
                palette: "basic"
            },
            _attachEvents: function() {
                var that = this;

                that.wrapper.on(CLICK_NS, DOT + TILE_CLASS, function(ev){
                    that._select(ev.currentTarget);
                })
                .on(KEYDOWN_NS, bind(that._keydown, that))
                .on(BLUR_NS, function(){
                    that.wrapper.find(DOT + TILE_CLASS).removeClass(ITEMSFOCUSEDCLASS);
                })
                .on(FOCUS_NS, bind(that._focus, that));
            },
            _colors: function() {
                var options = this.options,
                    colors = options.palette || "basic";

                if (colors == "websafe") {
                    colors = WEBPALETTE;
                    options.columns = 18;
                } else if (colors == "basic") {
                    colors = SIMPLEPALETTE;
                }

                if (typeof colors == "string") {
                    colors = colors.split(",");
                }

                if (Array.isArray(colors)) {
                    colors = $.map(colors, function(x) { return parseColor(x); });
                }

                return colors;
            },
            _current: function(item) {
                this.wrapper.find(DOT + TILE_CLASS)
                    .removeClass(ITEMSFOCUSEDCLASS)
                    .removeAttr("id");

                $(item)
                    .addClass(ITEMSFOCUSEDCLASS)
                    .attr("id", this._selectedID);

                this.wrapper
                    .removeAttr("aria-activedescendant")
                    .attr("aria-activedescendant", this._selectedID);
            },
            _focus: function() {
                var wrapper = this.wrapper,
                    selected = wrapper.find("#" + this._selectedID);

                if (selected.length === 0) {
                    this._current(wrapper.find(DOT + TILE_CLASS).first());
                }
            },
            _keydown: function(e) {
                var newCurrent,
                    wrapper = this.wrapper,
                    items = wrapper.find(DOT + TILE_CLASS),
                    current = items.filter(DOT + ITEMSFOCUSEDCLASS).get(0) || items.filter(DOT + ITEMSELECTEDCLASS).get(0),
                    keyCode = e.keyCode,
                    index;

                if (current) {
                    index = Array.prototype.indexOf.call(current.parentNode.children, current);
                }

                if (keyCode == KEYS.LEFT) {
                    newCurrent = current ? current.previousSibling : items[items.length - 1];
                } else if (keyCode == KEYS.RIGHT) {
                    newCurrent = current ? current.nextSibling : items[0];
                } else if (keyCode == KEYS.DOWN) {
                    newCurrent = current ? (current.parentNode.nextSibling ? current.parentNode.nextSibling.children[index] : null) : items[0];
                } else if (keyCode == KEYS.UP) {
                    newCurrent = current ? (current.parentNode.previousSibling ? current.parentNode.previousSibling.children[index] : null) : items.get[items.length - 1];
                } else if (keyCode == KEYS.ENTER) {
                    preventDefault(e);
                    if (current) {
                        this._select(current);
                        this.trigger("forceSelect", { value: this.value() });
                        return;
                    }
                } else if (keyCode == KEYS.ESC) {
                    this._cancel();
                }

                if (newCurrent && newCurrent.nodeType !== 1) {
                    newCurrent = null;
                }

                if (newCurrent) {
                    preventDefault(e);

                    this._current(newCurrent);
                }
            },
            _onEnable: function(enable) {
                if (this.options._standalone) {
                    if (enable) {
                        this.wrapper.attr("tabindex", this._tabIndex);
                        this.wrapper.removeAttr("aria-disabled");
                    } else {
                        this.wrapper.removeAttr("tabindex");
                        this.wrapper.attr("aria-disabled", true);
                    }
                }
            },
            _select: function(item) {
                var that = this,
                    items = that.wrapper.find(DOT + TILE_CLASS);

                item = $(item);

                ColorSelector.fn._select.call(that, item.css(BACKGROUNDCOLOR));

                items.removeClass(ITEMSELECTEDCLASS).removeAttr("aria-selected");
                item.addClass(ITEMSELECTEDCLASS).attr("aria-selected", true);
            },
            _template: kendo.template(function (ref) {
                var colors = ref.colors;
                var columns = ref.columns;
                var tileSize = ref.tileSize;
                var value = ref.value;
                var id = ref.id;

                var startPart = '<table class="k-colorpalette-table" role="presentation"><tr role="row">';

                var cellElements = "";
                for (var i = 0; i < colors.length; ++i) {
                    var selected = colors[i].equals(value);
                    if (i && i % columns == 0) {
                        cellElements += '</tr><tr role="row">';
                    }

                    cellElements +=
                    "<td role=\"gridcell\" unselectable=\"on\" " + (kendo.attr("style-background-color")) + "=\"" + (colors[i].toCss()) + "\"" +
                        (selected ? " aria-selected=true" : "") + " " +
                        ((id && i === 0) ? 'id=\\"' + id + '\\" ' : '') + " " +

                        "class=\"k-colorpalette-tile" + (selected ? " " + ITEMSELECTEDCLASS : "") + "\" " +
                        "aria-label=\"" + (colors[i].toCss()) + "\"></td>";
                }

                var endPart = '</tr></table>';
                return startPart + cellElements + endPart;
            }),
            _tileSize: function() {
                var tileSize = this.options.tileSize,
                    width, height;

                if (tileSize) {
                    if (/number|string/.test(typeof tileSize)) {
                        width = height = parseFloat(tileSize);
                    } else if (typeof tileSize == "object") {
                        width = parseFloat(tileSize.width);
                        height = parseFloat(tileSize.height);
                    } else {
                        throw new Error("Unsupported value for the 'tileSize' argument");
                    }
                    this.wrapper.find(DOT + TILE_CLASS).css({ width: width, height: height });
                }
            },
            _updateUI: function(color) {
                var item = null,
                    items = this.wrapper.find(DOT + TILE_CLASS);

                this.wrapper.find(DOT + TILE_CLASS).each(function(){
                    var c = parseColor($(this).css(BACKGROUNDCOLOR));

                    if (c && c.equals(color)) {
                        item = this;

                        return false;
                    }
                });

                this._current(item);

                items.removeClass(ITEMSELECTEDCLASS);

                if (item) {
                    $(item).addClass(ITEMSELECTEDCLASS);
                    this.wrapper.attr("aria-label", this._ariaTemplate(this.value() || ""));
                }
            },
            _wrapper: function() {
                var options = this.options,
                    colors = this._colors(),
                    wrapper,
                    templateElement;

                if (this.element.is("input")) {
                    wrapper = this.element.addClass("k-hidden").wrap("<div>").parent();
                } else {
                    wrapper = this.element;
                }

                templateElement = $(this._template({
                    colors: colors,
                    columns: options.columns,
                    tileSize: options.tileSize,
                    value: this._value,
                    id: options.ariaId
                }));

                kendo.applyStylesFromKendoAttributes(templateElement, ["background-color"]);
                wrapper.addClass("k-colorpalette")
                    .attr("role", "grid")
                    .append(templateElement)
                    .attr("tabindex", this._tabIndex);

                this.wrapper = wrapper;
                this._tileSize();
            }
        });


        ui.plugin(ColorPalette);


    })(window.kendo.jQuery);

    (function($, undefined$1){
        // WARNING: removing the following jshint declaration and turning
        // == into === to make JSHint happy will break functionality.

        var kendo = window.kendo,
            ui = kendo.ui,
            html = kendo.html,
            Color = kendo.Color,
            extend = $.extend,
            encode = kendo.htmlEncode,
            BACKGROUNDCOLOR = "background-color",
            MESSAGES = {
                apply  : "Apply",
                cancel : "Cancel",
                noColor: "no color",
                clearColor: "Clear color",
                previewInput: null,
                contrastRatio: "Contrast ratio:",
                fail: "Fail",
                pass: "Pass",
                hex: "HEX",
                toggleFormat: "Toggle format",
                red: "Red",
                green: "Green",
                blue: "Blue",
                alpha: "Alpha",
                gradient: "Gradient view",
                palette: "Palette view"
            },
            NS = ".kendoColorTools",
            CLICK_NS = "click" + NS,
            KEYDOWN_NS = "keydown" + NS,
            ColorSelector = ui.colorpicker.ColorSelector,
            KEYS = kendo.keys,

            NO_COLOR = "k-no-color",
            SELECTED = "k-selected",
            PREVIEW_MASK = ".k-color-preview-mask",

            ARIA_PRESSED = "aria-pressed",
            ARIA_DISABLED = "aria-disabled",

            VIEWS = {
                "gradient": ui.ColorGradient,
                "palette": ui.ColorPalette
            };

        function bind(callback, obj) {
            return function() {
                return callback.apply(obj, arguments);
            };
        }

        var FlatColorPicker = ColorSelector.extend({
            init: function(element, options) {
                var that = this;

                if (options && options.autoupdate === false) {
                    options._standalone = false;
                }

                ColorSelector.fn.init.call(that, element, options);
                options = that.options = kendo.deepExtend({}, that.options, options);
                element = that.element;

                that._wrapper();

                var value = that.color();

                that._changeView(options.view);

                that._setViewSize();

                if (value) {
                    that._updateUI(value);
                    that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());
                    that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());
                } else {
                    that._selectedColor.addClass(NO_COLOR);
                    that._previousColor.addClass(NO_COLOR);
                }

                that._attachEvents();
                that._navigation();
            },
            destroy: function() {
                var that = this;

                ColorSelector.fn.destroy.call(this);

                if (that._view) {
                    that._view.destroy();
                    that._viewsContainer.empty();
                }

                that.element.off(NS);

                that._selectedColor = that._previousColor = that._viewsContainer = that._view = null;
            },
            options: {
                name: "FlatColorPicker",
                opacity: false,
                buttons: false,
                input: true,
                preview: true,
                clearButton: false,
                format: "hex",
                formats: ["rgb", "hex"],
                view: "gradient",
                views: ["gradient", "palette"],
                palette: null,
                autoupdate : true,
                backgroundColor: null,
                columns: 10,
                tileSize: 24,
                messages   : MESSAGES,
                size: "medium", // Fake styling option to accomplish colorpicker's size for textbox and button
                _otOfPicker: true
            },
            setBackgroundColor: function (color) {
                var that = this;

                if(that._view && that._view.setBackgroundColor) {
                    that._view.setBackgroundColor(color);
                }
            },
            _attachEvents: function() {
                var that = this;

                that.wrapper
                    .on(KEYDOWN_NS, bind(that._keydown, that))
                    .on(CLICK_NS, ".k-coloreditor-reset", function () {
                        that._clearColor = true;
                        that._updateUI(null);
                        that._view.value(null);
                    })
                    .on(CLICK_NS, ".k-coloreditor-apply", function(){
                        if(that._clearColor) {
                            that._select(null);
                        } else {
                            that._select(that._view.color());
                        }
                    })
                    .on(CLICK_NS, ".k-coloreditor-cancel", function(){
                        delete that._clearColor;
                        that._updateUI(that.color());
                        that._cancel();
                    })
                    .on(CLICK_NS, ".k-button[data-view]", function(ev){
                        var viewButton =  $(ev.target).closest("[data-view]");

                        if(viewButton.is("." + SELECTED)) {
                            return;
                        }

                        that.wrapper.find(".k-button[data-view]").removeClass(SELECTED).attr(ARIA_PRESSED, false);
                        viewButton.addClass(SELECTED).attr(ARIA_PRESSED, true);
                        that._changeView(viewButton.data("view"));
                    });
            },
            _select: function(value) {
                var that = this;

                ColorSelector.fn._select.call(that, value);

                that._updatePreviousColor(value);
            },
            _updatePreviousColor: function (value) {
                var that = this;

                if (value) {
                    that._previousColor.removeClass(NO_COLOR);
                    that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());
                } else {
                    that._previousColor.addClass(NO_COLOR);
                    that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, "");
                }
            },
            _changeView: function (mode) {
                var that = this,
                    options = $.extend({}, that.options),
                    selector =  VIEWS[mode],
                    selectedColor, hsvColor;

                if(that._view && that._view._colorInput) {
                    that.options.format = that._view._colorInput._viewModel.format;
                }

                that.options.view = mode;

                delete options.name;
                delete options.change;
                delete options.select;
                delete options.cancel;
                delete options._standalone;

                if (that._view) {
                    selectedColor = that._view.color();
                    that._view.destroy();
                    that._viewsContainer.empty();
                }

                if (selectedColor) {
                    selectedColor = selectedColor.toHSV();
                    hsvColor = Color.fromHSV(that._cachedHue || 0, selectedColor.s, selectedColor.v, selectedColor.a);
                    that._cachedHue = selectedColor.toHSV().h;
                    selectedColor = selectedColor.equals(hsvColor) ? hsvColor : selectedColor;
                }

                options._otOfPicker = false;

                if (selector) {
                    that._view = new VIEWS[mode]($("<div></div>").appendTo(that._viewsContainer), options);
                    that._view.value(selectedColor);

                    that._view.bind("change", function (ev) {
                        delete that._clearColor;
                        that._updateUI(ev.sender.color(), true);
                    });

                    that._view.bind("forceSelect", function (ev) {
                        delete that._clearColor;
                        that._select(ev.sender.color());
                    });
                }
            },
            _onEnable: function(enable) {
                var that = this;

                if (that._view) {
                    that._view._onEnable(enable);
                }

                if (that.options._standalone) {
                    if (enable) {
                        that.wrapper.removeAttr(ARIA_DISABLED);
                    } else {
                        that.wrapper.attr(ARIA_DISABLED, true);
                    }
                }
            },
            focus: function() {
                var that = this;

                if (that._view) {
                    that._view.focus();
                }
            },
            _updateUI: function(color, dontChangeView) {
                var that = this;

                if (color && color.toDisplay) {
                    that._selectedColor.removeClass(NO_COLOR);
                    that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, color.toDisplay());
                } else {
                    that._selectedColor.addClass(NO_COLOR);
                    that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, "");
                }

                that._triggerSelect(color);

                if (that.options.autoupdate) {
                    that._updatePreviousColor(color);
                }

                if(!dontChangeView) {
                    that._view.value(color);
                }
            },
            _setViewSize: function() {
                var that = this,
                    wrapper = that.wrapper[0],
                    previewWidth = parseInt((that.options.tileSize.width || that.options.tileSize), 10),
                    previewHeight = parseInt((that.options.tileSize.width || that.options.tileSize), 10),
                    previewColumns = that.options.columns;

                wrapper.style.setProperty("--kendo-color-preview-columns", previewColumns);
                wrapper.style.setProperty("--kendo-color-preview-width", previewWidth + "px");
                wrapper.style.setProperty("--kendo-color-preview-height", previewHeight + "px");
            },
            _keydown: function(e) {
                if (e.keyCode == KEYS.ESC) {
                    this._cancel();
                }
            },
            _template: function () {
                var that = this,
                    options = that.options,
                    buttonOptions = extend({}, options, {
                        fillMode: "flat",
                        themeColor: "base",
                        rounded: "medium"
                    });

                return kendo.template(function (options, buttonOptions) { return '<div class="k-coloreditor-header k-hstack">' +
                            ((options.views && options.views.length > 1) ?
                            '<div class="k-coloreditor-header-actions k-hstack">' +
                                '<div role="group" class="k-button-group k-button-group-flat">' +
                                    html.renderButton(("<button aria-pressed=\"false\" data-view=\"gradient\" title=\"" + (encode(options.messages.gradient)) + "\"></button>"), extend({ icon: "droplet-slider" }, buttonOptions)) +
                                    html.renderButton(("<button aria-pressed=\"false\" data-view=\"palette\" title=\"" + (encode(options.messages.palette)) + "\"></button>"), extend({ icon: "palette" }, buttonOptions)) +
                                '</div>' +
                            '</div>'
                            : '') +
                            '<div class="k-spacer"></div>' +
                            '<div class="k-coloreditor-header-actions k-hstack">' +
                                (options.clearButton ?
                                html.renderButton(("<button class=\"k-coloreditor-reset\" title=\"" + (encode(options.messages.clearColor)) + "\"></button>"), extend({ icon: "droplet-slash" }, buttonOptions))
                                : '') +
                                (options.preview ?
                                '<div class="k-coloreditor-preview k-vstack">' +
                                    '<span class="k-coloreditor-preview-color k-color-preview">' +
                                        '<span class="k-color-preview-mask"></span>' +
                                    '</span>' +
                                    '<span class="k-coloreditor-current-color k-color-preview">' +
                                        '<span class="k-color-preview-mask"></span>' +
                                    '</span>' +
                                '</div>'
                                : '') +
                            '</div>' +
                        '</div>' +
                        '<div class="k-coloreditor-views k-vstack"></div>' +
                        (options.buttons ?
                        '<div class="k-coloreditor-footer k-actions k-actions-end k-actions-horizontal">' +
                            html.renderButton(("<button class=\"k-coloreditor-cancel\" title=\"" + (encode(options.messages.cancel)) + "\">" + (encode(options.messages.cancel)) + "</button>"), extend({}, buttonOptions, { fillMode: "solid" })) +
                            html.renderButton(("<button class=\"k-coloreditor-apply\" title=\"" + (encode(options.messages.apply)) + "\">" + (encode(options.messages.apply)) + "</button>"), extend({}, buttonOptions, { fillMode: "solid", themeColor: "primary" })) +
                        '</div>'
                        : ''); }
                    )(options, buttonOptions);
            },
            _wrapper: function() {
                var options = this.options,
                    wrapper;

                if (this.element.is("input")) {
                    wrapper = this.element.addClass("k-hidden").wrap("<div>").parent();
                } else {
                    wrapper = this.element;
                }

                wrapper.addClass("k-flatcolorpicker k-coloreditor")
                    .attr({
                        "role": "textbox",
                        "aria-keyshortcuts": "Enter"
                    })
                    .append(this._template());

                this._selectedColor = $(".k-coloreditor-preview-color", wrapper);
                this._previousColor = $(".k-coloreditor-current-color", wrapper);
                this._viewsContainer = $(".k-coloreditor-views", wrapper);

                wrapper.find(".k-button[data-view=" + options.view + "]").addClass(SELECTED).attr(ARIA_PRESSED, true);

                this.wrapper = wrapper;
            }
        });

        ui.plugin(FlatColorPicker);
    })(window.kendo.jQuery);

    var __meta__$f = {
        id: "colorpicker",
        name: "Color tools",
        category: "web",
        description: "Color selection widgets",
        depends: [ "core", "color", "popup", "slider", "userevents", "button", "binder", "textbox", "numerictextbox", "html.button" ]
    };

    (function($, undefined$1) {
        // WARNING: removing the following jshint declaration and turning
        // == into === to make JSHint happy will break functionality.

        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            Color = kendo.Color,
            parseColor = kendo.parseColor,
            KEYS = kendo.keys,
            BACKGROUNDCOLOR = "background-color",
            MESSAGES = {
                apply: "Apply",
                cancel: "Cancel",
                noColor: "no color",
                clearColor: "Clear color",
                previewInput: null,
                contrastRatio: "Contrast ratio:",
                fail: "Fail",
                pass: "Pass",
                hex: "HEX",
                toggleFormat: "Toggle format",
                red: "Red",
                green: "Green",
                blue: "Blue",
                alpha: "Alpha",
                gradient: "Gradient view",
                palette: "Palette view"
            },
            NS = ".kendoColorTools",
            CLICK_NS = "click" + NS,
            KEYDOWN_NS = "keydown" + NS,
            ColorSelector = ui.colorpicker.ColorSelector,
            FlatColorPicker = ui.FlatColorPicker;

        /* -----[ The ColorPicker widget ]----- */

        var ColorPicker = Widget.extend({
            init: function(element, options) {
                var that = this;

                // Legacy support for the cases where only palette is defined
                if (options && options.palette && !options.view) {
                    options.view = "palette";
                }

                Widget.fn.init.call(that, element, options);
                options = that.options = kendo.deepExtend({}, that.options, options);
                element = that.element;

                var value = element.attr("value") || element.val();
                if (value) {
                    value = parseColor(value, true);
                } else {
                    value = parseColor(options.value, true);
                }
                that._value = options.value = value;

                var _buttonHtml = kendo.html.renderButton('<button class="k-input-button" unselectable="on" aria-label="select" tabindex="-1"></button>', $.extend({}, that.options, {
                    icon: "caret-alt-down"
                }));

                var content = that._inputWrapper = that.wrapper = $(that._template($.extend({}, that.options, {
                    _buttonHtml: _buttonHtml
                })));

                that._applyCssClasses();
                element.hide().after(content);

                if (element.is("input")) {
                    element.appendTo(content);
                    that._preventDefaultLabelClick();
                }

                that._tabIndex = element.attr("tabIndex") || 0;

                that.enable(!element.attr("disabled"));

                var accesskey = element.attr("accesskey");
                if (accesskey) {
                    element.attr("accesskey", null);
                    content.attr("accesskey", accesskey);
                }

                that.bind("activate", function(ev) {
                    if (!ev.isDefaultPrevented()) {
                        that.toggle();
                    }
                });

                that._updateUI(value);
            },
            destroy: function() {
                this.wrapper.off(NS).find("*").off(NS);
                if (this._popup) {
                    this._selector.destroy();
                    this._popup.destroy();
                }
                this._selector = this._popup = this.wrapper = null;
                Widget.fn.destroy.call(this);
            },
            enable: function(enable) {
                var that = this,
                    wrapper = that.wrapper,
                    arrow = wrapper.find(".k-input-button");

                if (arguments.length === 0) {
                    enable = true;
                }

                that.element.attr("disabled", !enable);
                wrapper.attr("aria-disabled", !enable);

                arrow.off(NS).on("mousedown" + NS, preventDefault);

                wrapper.addClass("k-disabled")
                    .removeAttr("tabIndex")
                    .add("*", wrapper).off(NS);

                if (enable) {
                    wrapper.removeClass("k-disabled")
                        .attr("tabIndex", that._tabIndex)
                        .on("mouseenter" + NS, function() { wrapper.addClass("k-hover"); })
                        .on("mouseleave" + NS, function() { wrapper.removeClass("k-hover"); })
                        .on("focus" + NS, function() { wrapper.addClass("k-focus"); })
                        .on("blur" + NS, function() { wrapper.removeClass("k-focus"); })
                        .on(KEYDOWN_NS, bind(that._keydown, that))
                        .on(CLICK_NS, ".k-input-button", bind(that.toggle, that))
                        .on(CLICK_NS, ".k-input-inner", function() {
                            that.trigger("activate");
                        });
                } else {
                    that.close();
                }
            },

            _template: kendo.template(function (ref) {
                   var toolIcon = ref.toolIcon;
                   var _buttonHtml = ref._buttonHtml;

                   return '<span role="combobox" aria-haspopup="dialog" aria-expanded="false" class="k-colorpicker k-picker k-icon-picker">' +
                    '<span class="k-input-inner">' +
                        "<span class=\"k-value-icon k-color-preview " + (toolIcon ? 'k-icon-color-preview' : '') + "\">" +
                            (toolIcon ? kendo.ui.icon({ icon: toolIcon, iconClass: "k-color-preview-icon" }) : '') +
                            '<span class="k-color-preview-mask"></span>' +
                        '</span>' +
                    '</span >' +
                    _buttonHtml +
                '</span>';
        }
            ),

            options: {
                name: "ColorPicker",
                closeOnSelect: false,
                contrastTool: false,
                palette: null,
                columns: 10,
                toolIcon: null,
                value: null,
                messages: MESSAGES,
                opacity: false,
                buttons: true,
                preview: true,
                clearButton: false,
                input: true,
                format: "hex",
                formats: ["rgb", "hex"],
                view: "gradient",
                views: ["gradient", "palette"],
                backgroundColor: null,
                ARIATemplate: function (data) { return ("Current selected color is " + (data || "none")); },
                size: "medium",
                rounded: "medium",
                fillMode: "solid"
            },

            events: [ "activate", "change", "select", "open", "close" ],

            open: function() {
                if (!this.element.prop("disabled")) {
                    this._getPopup().open();
                }
            },
            close: function() {
                var selOptions = (this._selector && this._selector.options) || {};
                selOptions._closing = true;
                this._getPopup().close();

                delete selOptions._closing;
            },
            toggle: function() {
                if (!this.element.prop("disabled")) {
                    this._getPopup().toggle();
                }
            },
            setBackgroundColor: function(color) {
                var that = this,
                    handler = function() { that._selector.setBackgroundColor(color); };

                that.options.contrastTool.backgroundColor = color;

                if (that._selector && (that._popup && that._popup.visible())) {
                    that._selector.setBackgroundColor(color);
                } else if (that._popup) {
                    that._popup.unbind("activate", handler);
                    that._popup.bind("activate", handler);
                }
            },
            _noColorIcon: function() {
                return this.wrapper.find(".k-color-preview");
            },
            color: ColorSelector.fn.color,
            value: ColorSelector.fn.value,
            _select: ColorSelector.fn._select,
            _triggerSelect: ColorSelector.fn._triggerSelect,
            _isInputTypeColor: ColorSelector.fn._isInputTypeColor,

            _preventDefaultLabelClick: function() {
                // if there exists a <label> associated with this
                // input field, we must catch clicks on it to prevent
                // the built-in color picker from showing up.
                // https://github.com/telerik/kendo-ui-core/issues/292
                var that = this,
                    element = that.element,
                    label = element.closest("label"),
                    id = element.attr("id");

                if (id) {
                    label = label.add('label[for="' + id + '"]');
                }
                label.on("click", function(ev) {
                    that.open();
                    ev.preventDefault();
                });
            },

            _updateUI: function(value, dontChangeSelector) {
                this._updateInput(value);
                this._triggerSelect(value);

                this.wrapper.find(".k-color-preview-mask").css(
                    BACKGROUNDCOLOR,
                    value ? value.toDisplay() : ""
                );

                this._noColorIcon().toggleClass("k-no-color", !value);

                if (this._selector && !dontChangeSelector) {
                    this._selector.value(value);
                }
            },
            _updateInput: function(value) {
                var formattedValue = "";

                if (value) {
                    if (this._isInputTypeColor() || value.a == 1) {
                        // seems that input type="color" doesn't support opacity
                        // in colors; the only accepted format is hex #RRGGBB
                        formattedValue = value.toCss();
                    } else {
                        formattedValue = value.toCssRgba();
                    }

                    this.element.val(formattedValue);
                }

                if (!this._ariaTemplate) {
                    this._ariaTemplate = kendo.template(this.options.ARIATemplate);
                }

                this.wrapper.attr("aria-label", this._ariaTemplate(formattedValue));
            },
            _keydown: function(ev) {
                var key = ev.keyCode;
                if (this._getPopup().visible()) {
                    if (key == KEYS.ESC) {
                        this._selector._cancel();
                    } else {
                        this._selector._keydown(ev);
                    }
                    preventDefault(ev);
                }
                else if (key == KEYS.ENTER || key == KEYS.DOWN) {
                    this.open();
                    preventDefault(ev);
                }
            },
            _getPopup: function() {
                var that = this, popup = that._popup;

                if (!popup) {
                    var options = that.options;
                    var selectorType;

                    selectorType = FlatColorPicker;

                    options.autoupdate = options.buttons !== true;
                    delete options.select;
                    delete options.change;
                    delete options.cancel;

                    options._otOfPicker = false;

                    var id = kendo.guid();

                    var selectorWrapper = $('<div id="' + id + '" class="k-colorpicker-popup"></div>').appendTo(document.body);
                    var selector = that._selector = new selectorType($('<div></div>').appendTo(selectorWrapper), options);

                    that.wrapper.attr("aria-controls", id);

                    that._popup = popup = selectorWrapper.kendoPopup({
                        anchor: that.wrapper,
                        adjustSize: { width: 5, height: 0 }
                    }).data("kendoPopup");

                    selector.bind({
                        select: function(ev) {
                            that._updateUI(parseColor(ev.value), true);
                        },
                        change: function(ev) {
                            if (that.options.buttons) {
                                that._select(selector.color());
                            } else {
                                that._updateUI(parseColor(ev.value), true);
                            }

                            if (that.options.buttons || (that._selector.options.view === "palette" && that.options.closeOnSelect)) {
                                that.close();
                            }
                        },
                        cancel: function() {
                            that.close();
                        }
                    });
                    popup.bind({
                        close: function(ev) {
                            if (that.trigger("close")) {
                                ev.preventDefault();
                                return;
                            }
                            that.wrapper.removeClass("k-focus");

                            var color = selector.color();

                            if (!that.options.buttons) {
                                that._select(color);
                            } else {
                                that._select(that.color());
                            }

                            color = that.color();

                            if (color && color.h) {
                                that._cachedHue = color.h;
                            }

                            var clickedOutside = event &&
                                event instanceof MouseEvent &&
                                $(event.target).parents(".k-colorpicker-popup").length === 0;

                            if (!clickedOutside) {
                                setTimeout(function() {
                                    if (that.wrapper && !that.wrapper.is("[unselectable='on']")) {
                                        that.wrapper.trigger("focus");
                                    }
                                }, 0);
                            }

                            that.wrapper.attr("aria-expanded", false);
                        },
                        open: function(ev) {
                            if (that.trigger("open")) {
                                ev.preventDefault();
                            } else {
                                that.wrapper.addClass("k-focus");
                                that.wrapper.attr("aria-expanded", true);
                            }
                        },
                        activate: function() {
                            var hsvColor,
                                selectedColor = that.color();

                            if (selectedColor) {
                                selectedColor = selectedColor.toHSV();
                                hsvColor = Color.fromHSV(that._cachedHue || 0, selectedColor.s, selectedColor.v, selectedColor.a);
                                selectedColor = selectedColor.equals(hsvColor) ? hsvColor : selectedColor;
                            }

                            selector.value(selectedColor);
                            selector.focus();
                            that.wrapper.addClass("k-focus");
                        }
                    });
                }
                return popup;
            }
        });

        function preventDefault(ev) { ev.preventDefault(); }

        function bind(callback, obj) {
            return function() {
                return callback.apply(obj, arguments);
            };
        }

        ui.plugin(ColorPicker);

        kendo.cssProperties.registerPrefix("ColorPicker", "k-picker-");

        kendo.cssProperties.registerValues("ColorPicker", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

    })(window.kendo.jQuery);
    var kendo$d = kendo;

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$e = {
        id: "editable",
        name: "Editable",
        category: "framework",
        depends: [ "checkbox", "dropdownlist", "datepicker", "numerictextbox", "validator", "binder", "icons" ],
        hidden: true
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            extend = $.extend,
            isFunction = kendo.isFunction,
            isPlainObject = $.isPlainObject,
            inArray = $.inArray,
            POINT = ".",
            AUTOCOMPLETEVALUE = "off",
            nameSpecialCharRegExp = /("|\%|'|\[|\]|\$|\.|\,|\:|\;|\+|\*|\&|\!|\#|\(|\)|<|>|\=|\?|\@|\^|\{|\}|\~|\/|\||`)/g,
            ERRORTEMPLATE = function (ref) {
               var message = ref.message;

               return '<div class="k-tooltip k-tooltip-error k-validator-tooltip">' +
                kendo.ui.icon({ icon: "exclamation-circle", iconClass: "k-tooltip-icon" }) +
                "<span class=\"k-tooltip-content\">" + message + "</span>" +
                '<span class="k-callout k-callout-n"></span>' +
            '</div>';
        },
            CHANGE = "change";
        var EQUAL_SET = "equalSet";
        var specialRules = ["url", "email", "number", "date", "boolean"];

        function fieldType(field) {
            field = field != null ? field : "";
            return field.type || kendo.type(field) || "string";
        }

        function convertToValueBinding(container) {
            container.find(":input:not(:button, .k-combobox .k-input, .k-checkbox-list .k-checkbox, .k-radio-list .k-radio, [" + kendo.attr("role") + "=listbox], [" + kendo.attr("role") + "=upload], [" + kendo.attr("skip") + "], [type=file]), [" + kendo.attr("role") + "=radiogroup]").each(function() {
                var bindAttr = kendo.attr("bind"),
                    binding = this.getAttribute(bindAttr) || "",
                    bindingName = this.type === "checkbox" || this.type === "radio" ? "checked:" : "value:",
                    isAntiForgeryToken = this.getAttribute("name") === Editable.antiForgeryTokenName,
                    fieldName = this.attributes.name && this.attributes.name.value;

                if (binding.indexOf(bindingName) === -1 && fieldName && !isAntiForgeryToken) {
                    binding += (binding.length ? "," : "") + bindingName + fieldName;

                    $(this).attr(bindAttr, binding);
                }
            });
        }

        function createAttributes(options) {
            var field = (options.model.fields || options.model)[options.field],
                type = fieldType(field),
                validation = field ? field.validation : {},
                attributes = field ? field.attributes : {},
                ruleName,
                DATATYPE = kendo.attr("type"),
                BINDING = kendo.attr("bind"),
                rule,
                attr = {
                    id: options.id || options.field,
                    name: options.field,
                    title: options.title ? options.title : options.field
                };

            for (ruleName in validation) {
                rule = validation[ruleName];

                if (inArray(ruleName, specialRules) >= 0) {
                    attr[DATATYPE] = ruleName;
                } else if (!isFunction(rule)) {
                    var culture = kendo.getCulture();

                    if (typeof rule === "number" && culture.name.length) {
                        var numberFormat = culture.numberFormat;
                        var stringRule = rule.toString()
                            .replace(POINT, numberFormat[POINT]);

                        attr[ruleName] = stringRule;
                    } else {
                        attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;
                    }
                }

                attr[kendo.attr(ruleName + "-msg")] = rule.message;

                attr.autocomplete = AUTOCOMPLETEVALUE;
            }

            for (var attributeName in attributes) {
                attr[attributeName] = attributes[attributeName];
            }

            if (inArray(type, specialRules) >= 0) {
                attr[DATATYPE] = type;
            }

            attr[BINDING] = (type === "boolean" ? "checked:" : "value:") + options.field;

            return attr;
        }

        function addIdAttribute(container, attr) {
            var id = container.attr("id");

            if (id) {
                attr.id = id;
                container.removeAttr("id");
            }

            return attr;
        }

        function convertItems(items) {
            var idx,
                length,
                item,
                value,
                text,
                result;

            if (items && items.length) {
                result = [];
                for (idx = 0, length = items.length; idx < length; idx++) {
                    item = items[idx];
                    text = item.text || item.value || item;
                    value = item.value == null ? (item.text || item) : item.value;

                    result[idx] = { text: text, value: value };
                }
            }
            return result;
        }

        function getEditorTag(type, options) {
            var tag;

            if (!type.length) { return; }

            if ((type === "DropDownTree" && options && options.checkboxes) || type === "MultiSelect") {
                tag = "<select />";
            } else if (type === "RadioGroup" || type === "CheckBoxGroup") {
                tag = "<ul />";
            } else if (type === "Signature") {
                tag = "<div></div>";
            } else {
                tag = type === "Editor" || type === "TextArea" ? "<textarea />" : "<input />";
            }

            return tag;
        }

        var kendoEditors = [
            "AutoComplete", "CheckBox", "CheckBoxGroup", "ColorGradient", "ColorPicker", "ColorPalette", "ComboBox", "DateInput",
            "DatePicker", "DateTimePicker", "DropDownTree",
            "Editor", "FlatColorPicker", "MaskedTextBox", "MultiColumnComboBox","MultiSelect",
            "NumericTextBox", "RadioGroup", "Rating", "Slider", "Switch", "TimePicker", "DropDownList",
            "TextBox", "TextArea", "Captcha", "Signature", "TimeDurationPicker"
        ];

        var editors = {
            "hidden": function(container, options) {
                var attr = createAttributes(options);
                $('<input type="hidden"/>').attr(attr).appendTo(container);
            },
            "number": function(container, options) {
                var attr = createAttributes(options);
                $('<input type="text"/>').attr(attr).appendTo(container).kendoNumericTextBox(extend({}, options.editorOptions, { format: options.format }));
                $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg k-hidden"/>').appendTo(container);
            },
            "date": function(container, options) {
                var attr = createAttributes(options),
                    format = options.format;

                if (format) {
                    format = kendo._extractFormat(format);
                }

                attr[kendo.attr("format")] = format;

                $('<input type="text"/>').attr(attr).appendTo(container).kendoDatePicker(extend({}, options.editorOptions, { format: options.format }));
                $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg k-hidden"/>').appendTo(container);
            },
            "string": function(container, options) {
                var attr = createAttributes(options);

                $('<input type="text"/>').attr(attr).appendTo(container).kendoTextBox(options.editorOptions);
            },
            "boolean": function(container, options) {
                var attr = createAttributes(options);
                var element = $('<input type="checkbox" />').attr(attr).kendoCheckBox(options.editorOptions).appendTo(container);

                renderHiddenForMvcCheckbox(element, container, options);
            },
            "values": function(container, options) {
                var attr = createAttributes(options);
                var items = kendo.stringify(convertItems(options.values));
                $('<select ' +
                    kendo.attr("text-field") + '="text"' +
                    kendo.attr("value-field") + '="value"' +
                    kendo.attr("source") + "=\'" + (items ? items.replace(/\'/g,"&apos;") : items) + "\'" +
                    kendo.attr("size") + '="' + options.editorOptions.size + '"' +
                    kendo.attr("role") + '="dropdownlist"/>')
                    .attr(attr).appendTo(container);
                $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg  k-hidden"/>').appendTo(container);
            },
            "kendoEditor": function(container, options) {
                var attr = createAttributes(options);
                var type = options.editor;
                var editor = "kendo" + type;
                var editorOptions = options.editorOptions;
                var tagElement = getEditorTag(type, editorOptions);

                var element = $(tagElement)
                    .attr(attr)
                    .appendTo(container)
                    [editor](editorOptions);

                renderHiddenForMvcCheckbox(element, container, options);
            }
        };

        var mobileEditors = {
            "number": function(container, options) {
                var attr = createAttributes(options);
                attr = addIdAttribute(container, attr);

                $('<input type="number"/>').attr(attr).appendTo(container);
            },
            "date": function(container, options) {
                var attr = createAttributes(options);
                attr = addIdAttribute(container, attr);

                $('<input type="date"/>').attr(attr).appendTo(container);
            },
            "string": function(container, options) {
                var attr = createAttributes(options);
                attr = addIdAttribute(container, attr);

                $('<input type="text" />').attr(attr).appendTo(container);
            },
            "boolean": function(container, options) {
                var attr = createAttributes(options);
                attr = addIdAttribute(container, attr);

                $('<input type="checkbox" />').attr(attr).appendTo(container);
            },
            "values": function(container, options) {
                var attr = createAttributes(options);
                var items = options.values;
                var select = $('<select />');

                attr = addIdAttribute(container, attr);

                for (var index in items) {
                    $('<option value="' + items[index].value + '">' + items[index].text + '</option>').appendTo(select);
                }

                select.attr(attr).appendTo(container);
            }
        };

        function addValidationRules(modelField, rules) {
            var validation = modelField ? (modelField.validation || {}) : {},
                rule,
                descriptor;

            for (rule in validation) {
                descriptor = validation[rule];

                if (isPlainObject(descriptor) && descriptor.value) {
                    descriptor = descriptor.value;
                }

                if (isFunction(descriptor)) {
                    rules[rule] = descriptor;
                }
            }
        }

        function renderHiddenForMvcCheckbox(tag, container, field) {
            var addHidden = field ? (field.shouldRenderHidden || false) : false;

            if (addHidden) {
                tag.val(true);
                container.append($("<input type='hidden' name='" + field.field + "' value='false' data-skip='true' data-validate='false'/>"));
            }
        }

        var Editable = Widget.extend({
            init: function(element, options) {
                var that = this;

                if (options.target) {
                    if (options.target.pane) {
                        that._isMobile = true;
                    }
                }
                Widget.fn.init.call(that, element, options);
                that._validateProxy = that._validate.bind(that);
                that.refresh();
            },

            events: [CHANGE],

            options: {
                name: "Editable",
                editors: editors,
                mobileEditors: mobileEditors,
                clearContainer: true,
                validateOnBlur: true,
                validationSummary: false,
                errorTemplate: ERRORTEMPLATE,
                skipFocus: false,
                size: "medium"
            },

            editor: function(field, modelField) {
                var that = this,
                    editors = that._isMobile ? mobileEditors : that.options.editors,
                    isObject = isPlainObject(field),
                    fieldName = isObject ? field.field : field,
                    model = that.options.model || {},
                    isValuesEditor = isObject && field.values,
                    type = isValuesEditor ? "values" : fieldType(modelField),
                    isHidden = isObject && typeof field.editor === "string" && field.editor === "hidden",
                    isCustomEditor = isObject && !isHidden && field.editor,
                    isKendoEditor = isObject && $.inArray(field.editor, kendoEditors) !== -1,
                    editor = isCustomEditor ? field.editor : editors[isHidden ? "hidden" : type],
                    container = that.element.find("[" + kendo.attr("container-for") + "=" + fieldName.replace(nameSpecialCharRegExp, "\\$1") + "]"),
                    op;

                editor = editor ? editor : editors.string;

                if (isKendoEditor) {
                    editor = editors.kendoEditor;
                } else if (isCustomEditor && typeof field.editor === "string") {
                    editor = function(container) {
                        container.append(field.editor);
                    };
                }

                if (!isObject) {
                    op = {
                        field: fieldName,
                        editorOptions: {
                            size: that.options.size
                        }
                    };
                } else {
                    if (!field.editorOptions) {
                        field.editorOptions = {};
                    }

                    field.editorOptions = extend({}, { size: that.options.size }, field.editorOptions);
                    op = field;
                }

                container = container.length ? container : that.element;
                editor(container, extend(true, {}, op, { model: model }));
            },

            _validate: function(e) {
                var that = this,
                    input,
                    value = e.value,
                    preventChangeTrigger = that._validationEventInProgress,
                    values = {},
                    bindAttribute = kendo.attr("bind"),
                    fieldName = e.field.replace(nameSpecialCharRegExp, "\\$1"),
                    bindingRegex = new RegExp("(value|checked)\\s*:\\s*" + fieldName + "\\s*(,|$)");

                values[e.field] = e.value;

                input = $(':input[' + bindAttribute + '*="' + fieldName + '"]', that.element)
                    .filter("[" + kendo.attr("validate") + "!='false']").filter(function() {
                       return bindingRegex.test($(this).attr(bindAttribute));
                    });
                if (input.length > 1) {
                    input = input.filter(function() {
                        var element = $(this);
                        return !element.is(":radio") || element.val() == value;
                    });
                }

                try {
                    that._validationEventInProgress = true;

                    if (!that.validatable.validateInput(input) || (!preventChangeTrigger && that.trigger(CHANGE, { values: values }))) {
                        e.preventDefault();
                    }

                } finally {
                    that._validationEventInProgress = false;
                }
            },

            end: function() {
                return this.validatable.validate();
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that.options.model.unbind("set", that._validateProxy);
                that.options.model.unbind(EQUAL_SET, that._validateProxy);

                kendo.unbind(that.element);

                if (that.validatable) {
                    that.validatable.destroy();
                }
                kendo.destroy(that.element);

                that.element.removeData("kendoValidator");

                if (that.element.is("[" + kendo.attr("role") + "=editable]")) {
                    that.element.removeAttr(kendo.attr("role"));
                }
            },

            refresh: function() {
                var that = this,
                    idx,
                    length,
                    fields = that.options.fields || [],
                    container = that.options.clearContainer ? that.element.empty() : that.element,
                    model = that.options.model || {},
                    rules = {},
                    field,
                    isObject,
                    fieldName,
                    modelField,
                    modelFields;

                if (!Array.isArray(fields)) {
                    fields = [fields];
                }

                for (idx = 0, length = fields.length; idx < length; idx++) {
                     field = fields[idx];
                     isObject = isPlainObject(field);
                     fieldName = isObject ? field.field : field;
                     modelField = (model.fields || model)[fieldName];

                     addValidationRules(modelField, rules);

                     that.editor(field, modelField);
                }

                if (!length) {
                    modelFields = model.fields || model;
                    for (fieldName in modelFields) {
                        addValidationRules(modelFields[fieldName], rules);
                   }
                }

                convertToValueBinding(container);

                if (that.validatable) {
                    that.validatable.destroy();
                }

                kendo.bind(container, that.options.model);

                if (that.options.validateOnBlur) {
                    that.options.model
                        .unbind("set", that._validateProxy)
                        .bind("set", that._validateProxy);

                    that.options.model
                        .unbind(EQUAL_SET, that._validateProxy)
                        .bind(EQUAL_SET, that._validateProxy);
                }

                that.validatable = new kendo.ui.Validator(container, {
                    validateOnBlur: that.options.validateOnBlur,
                    validationSummary: that.options.validationSummary,
                    errorTemplate: that.options.errorTemplate || undefined$1,
                    rules: rules });

                if (!that.options.skipFocus) {
                    container.find(":kendoFocusable").eq(0).trigger("focus");
                }
            }
       });

       Editable.antiForgeryTokenName = "__RequestVerificationToken";

       ui.plugin(Editable);
    })(window.kendo.jQuery);

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$d = {
        id: "listview",
        name: "ListView",
        category: "web",
        description: "The ListView widget offers rich support for interacting with data.",
        depends: [ "data" ],
        features: [ {
            id: "listview-editing",
            name: "Editing",
            description: "Support for record editing",
            depends: [ "editable" ]
        }, {
            id: "listview-selection",
            name: "Selection",
            description: "Support for selection",
            depends: [ "selectable" ]
        }, {
            id: "listview-paging",
            name: "Paging",
            description: "Support for paging",
            depends: [ "pager" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            CHANGE = "change",
            KENDO_KEYDOWN = "kendoKeydown",
            CANCEL = "cancel",
            DATABOUND = "dataBound",
            DATABINDING = "dataBinding",
            Widget = kendo.ui.Widget,
            keys = kendo.keys,
            EMPTY_STRING = "",
            EMPTY_STRING_TEMPLATE = function () { return EMPTY_STRING; },
            DOT = ".",
            FOCUSSELECTOR = "> *:not(.k-loading-mask)",
            PROGRESS = "progress",
            ERROR = "error",
            FOCUSED = "k-focus",
            SELECTED = "k-selected",
            KEDITITEM = "k-edit-item",
            PAGER_CLASS = "k-listview-pager",
            ITEM_CLASS = "k-listview-item",
            ARIA_SETSIZE = "aria-setsize",
            ARIA_POSINSET = "aria-posinset",
            ARIA_ROLE = "role",
            ARIA_LABEL = "aria-label",
            ARIA_MULTISELECTABLE = "aria-multiselectable",
            ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
            EDIT = "edit",
            REMOVE = "remove",
            SAVE = "save",
            MOUSEDOWN = "mousedown",
            CLICK = "click",
            TOUCHSTART = "touchstart",
            NS = ".kendoListView",
            activeElement = kendo._activeElement,
            progress = kendo.ui.progress,
            DataSource = kendo.data.DataSource;

        var ListView = kendo.ui.DataBoundWidget.extend( {
            init: function(element, options) {
                var that = this;

                options = Array.isArray(options) ? { dataSource: options } : options;

                Widget.fn.init.call(that, element, options);

                options = that.options;

                that.wrapper = element = that.element;

                if (element[0].id) {
                    that._itemId = element[0].id + "_lv_active";
                } else {
                    that._itemId = kendo.guid() + "_lv_active";
                }

                that._element();

                that._layout();

                that._dataSource();

                that._setContentHeight();

                that._templates();

                that._navigatable();

                that._selectable();

                that._pageable();

                that._crudHandlers();

                that._scrollable();

                if (that.options.autoBind) {
                    that.dataSource.fetch();
                }

                kendo.notify(that);
            },

            events: [
                CHANGE,
                CANCEL,
                DATABINDING,
                DATABOUND,
                EDIT,
                REMOVE,
                SAVE,
                KENDO_KEYDOWN
            ],

            options: {
                name: "ListView",
                ariaLabel: null,
                autoBind: true,
                selectable: false,
                navigatable: false,
                pageable: false,
                height: null,
                template: EMPTY_STRING_TEMPLATE,
                altTemplate: null,
                editTemplate: null,
                contentTemplate: function () { return "<div data-content='true' />"; },
                contentElement: "div",
                bordered: true,
                borders: "",
                layout: "",
                flex: {
                    direction: "row",
                    wrap: "nowrap"
                },
                grid: {},
                scrollable: false
            },

            setOptions: function(options) {
                Widget.fn.setOptions.call(this, options);

                this._layout();

                this._templates();

                if (this.selectable) {
                    this.selectable.destroy();
                    this.selectable = null;
                }

                this._selectable();
            },

            _templates: function() {
                var options = this.options;

                this.template = kendo.template(options.template || EMPTY_STRING_TEMPLATE);
                this.altTemplate = kendo.template(options.altTemplate || options.template || EMPTY_STRING_TEMPLATE);
                this.editTemplate = kendo.template(options.editTemplate || EMPTY_STRING_TEMPLATE);
            },

            _item: function(action) {
                return this.content.children()[action]();
            },

            items: function() {
                return this.content.children(":not(.k-loading-mask)");
            },

            dataItem: function(element) {
                var attr = kendo.attr("uid");
                var uid = $(element).closest("[" + attr + "]").attr(attr);

                return this.dataSource.getByUid(uid);
            },

            setDataSource: function(dataSource) {
                this.options.dataSource = dataSource;
                this._dataSource();

                if (this.options.autoBind) {
                    dataSource.fetch();
                }

                if (this.options.scrollable === "endless") {
                    this._bindScrollable();
                }
            },

            _unbindDataSource: function() {
                var that = this;

                that.dataSource.unbind(CHANGE, that._refreshHandler)
                                .unbind(PROGRESS, that._progressHandler)
                                .unbind(ERROR, that._errorHandler);
            },

            _dataSource: function() {
                var that = this,
                    pageable = that.options.pageable,
                    dataSource = that.options.dataSource;

                if ($.isPlainObject(pageable) && pageable.pageSize !== undefined$1) {
                    dataSource.pageSize = pageable.pageSize;
                }

                if (that.dataSource && that._refreshHandler) {
                    that._unbindDataSource();
                } else {
                    that._refreshHandler = that.refresh.bind(that);
                    that._progressHandler = that._progress.bind(that);
                    that._errorHandler = that._error.bind(that);
                }

                that.dataSource = DataSource.create(dataSource)
                                    .bind(CHANGE, that._refreshHandler)
                                    .bind(PROGRESS, that._progressHandler)
                                    .bind(ERROR, that._errorHandler);
            },

            _progress: function(toggle) {
                var element = this.wrapper;
                if (toggle && this.content.height()) {
                    element = this.content;
                }
                progress(element, toggle, { opacity: true });
            },

            _error: function() {
                progress(this.content, false);
            },

            _element: function() {
                var options = this.options;
                var height = options.height;

                this.element.addClass("k-listview");


                if (options.contentElement) {
                    this.content = $(document.createElement(options.contentElement)).appendTo(this.element);
                } else {
                    this.content = this.element;
                }

                if (height) {
                    this.element.css("height", height);
                }
            },

            _layout: function() {
                var that = this;
                var options = that.options;
                var flex = options.flex;
                var grid = options.grid;
                var element = that.element;
                var elementClassNames = ["k-listview"];
                var content = that.content;
                var contentClassNames = ["k-listview-content"];

                element.add(content).removeClass(function(index, className) {
                    if (className.indexOf("k-") >= 0) {
                        return true;
                    }
                });

                // Element class names
                if (options.bordered === true) {
                    elementClassNames.push("k-listview-bordered");
                }

                if (typeof options.borders === "string" && options.borders !== EMPTY_STRING) {
                    elementClassNames.push("k-listview-borders-" + options.borders);
                }


                // Content class names
                if (typeof options.contentPadding === "string" && options.contentPadding !== EMPTY_STRING) {
                    contentClassNames.push("k-listview-content-padding-" + options.contentPadding);
                }

                if (typeof options.layout === "string" && options.layout !== EMPTY_STRING) {
                    contentClassNames.push("k-d-" + options.layout);
                }

                if (options.layout === "flex" && typeof flex === "object") {
                    if (typeof flex.direction === "string" && flex.direction !== "") {
                        contentClassNames.push("k-flex-" + flex.direction);
                    }

                    if (typeof flex.wrap === "string" && flex.wrap !== "") {
                        contentClassNames.push("k-flex-" + flex.wrap);
                    }
                }

                if (options.layout === "grid" && typeof grid === "object") {
                    if (typeof grid.cols === "number") {
                        content.css("grid-template-columns", "repeat(" + grid.cols + ", 1fr)");
                    } else if (typeof grid.cols === "string") {
                        content.css("grid-template-columns", grid.cols);
                    }

                    if (typeof grid.rows === "number") {
                        content.css("grid-template-rows", "repeat(" + grid.rows + ", " + (grid.rowHeight !== undefined$1 ? grid.rowHeight : "1fr") + ")");
                    } else if (typeof grid.rows === "string") {
                        content.css("grid-template-rows", grid.rows);
                    }

                    if (typeof grid.gutter === "number") {
                        content.css("grid-gap", grid.gutter);
                    } else if (typeof grid.gutter === "string") {
                        content.css("grid-gap", grid.gutter);
                    }
                }

                that.element.addClass(elementClassNames.join(" "));
                that.content.addClass(contentClassNames.join(" "));

            },

            _setContentHeight: function() {
                var that = this,
                    options = that.options,
                    height;

                if (options.scrollable && that.wrapper.is(":visible")) {

                    height = that.wrapper.innerHeight();
                    that.content.height(height);
                }
            },

            refresh: function(e) {
                var that = this,
                    view = that.dataSource.view(),
                    data,
                    items,
                    item,
                    html = "",
                    idx,
                    length,
                    template = that.template,
                    altTemplate = that.altTemplate,
                    options = that.options,
                    role = options.selectable ? "option" : "listitem",
                    active = activeElement(),
                    endlessAppend = that._endlessFetchInProgress,
                    index = endlessAppend ? that._skipRerenderItemsCount : 0,
                    scrollable = that.options.scrollable;

                e = e || {};

                if (e.action === "itemchange") {
                    if (!that._hasBindingTarget() && !that.editable) {
                        data = e.items[0];
                        item = that.items().filter("[" + kendo.attr("uid") + "=" + data.uid + "]");

                        if (item.length > 0) {
                            idx = item.index();

                            item.replaceWith(template(data));
                            item = that.items().eq(idx);
                            item.attr(kendo.attr("uid"), data.uid);

                            that.trigger("itemChange", {
                                item: item,
                                data: data
                            });
                        }
                    }

                    return;
                }

                if (that.trigger(DATABINDING, { action: e.action || "rebind", items: e.items, index: e.index })) {
                    return;
                }

                if (!endlessAppend) {
                    that._destroyEditable();
                }

                for (idx = index, length = view.length; idx < length; idx++) {
                    if (idx % 2) {
                        html += altTemplate(view[idx]);
                    } else {
                        html += template(view[idx]);
                    }
                }

                if (endlessAppend) {
                    that.content.append(html);
                } else {
                    that.content.html(html);
                }

                items = that.items().not(".k-loading-mask");

                that._ariaAttributes(view.length);

                for (idx = index, length = view.length; idx < length; idx++) {
                    item = items.eq(idx);

                    item.addClass(ITEM_CLASS);

                    item.attr(kendo.attr("uid"), view[idx].uid)
                        .attr(ARIA_ROLE, role);

                    if (that.options.selectable) {
                        item.attr("aria-selected", "false");
                    }

                    if (that.options.pageable) {
                        item.attr(ARIA_SETSIZE, that.dataSource.total());
                        item.attr(ARIA_POSINSET, that.dataSource.indexOf(that.dataItem(item)) + 1);
                    }
                }

                if (that.content[0] === active && that.options.navigatable) {
                    if (that._focusNext) {
                        that.current(that.current().next());
                    } else {
                        if (!scrollable) {
                            that.current(items.eq(0));
                        }
                    }
                }

                if (that.element.attr(ARIA_ACTIVEDESCENDANT) &&
                    that.element.find("#" + that.element.attr(ARIA_ACTIVEDESCENDANT)).length === 0) {
                        that.element.removeAttr(ARIA_ACTIVEDESCENDANT);
                }

                that._setContentHeight();

                that._progress(false);
                that._endlessFetchInProgress = null;

                that.trigger(DATABOUND, { action: e.action || "rebind", items: e.items, index: e.index });
            },

            _ariaAttributes: function(length) {
                var content = this.content,
                    options = this.options,
                    selectable = options.selectable;

                this._ariaLabelValue = this._ariaLabelValue || this.options.ariaLabel;

                if (length === 0) {
                    content.removeAttr(ARIA_ROLE);
                    content.removeAttr(ARIA_MULTISELECTABLE);

                    if (content.attr(ARIA_LABEL)) {
                        this._ariaLabelValue = content.attr(ARIA_LABEL);
                        content.removeAttr(ARIA_LABEL);
                    }
                } else {
                    content.attr(ARIA_ROLE, selectable ? "listbox" : "list");

                    if (selectable && kendo.ui.Selectable.parseOptions(selectable).multiple) {
                        content.attr(ARIA_MULTISELECTABLE, true);
                    }

                    if (this._ariaLabelValue) {
                        content.attr(ARIA_LABEL, this._ariaLabelValue);
                    }
                }
            },

            _pageable: function() {
                var that = this,
                    pageable = that.options.pageable,
                    navigatable = that.options.navigatable,
                    pagerWrap,
                    settings;

                if (!pageable) {
                    return;
                }

                pagerWrap = that.wrapper.find(DOT + PAGER_CLASS);

                if (!pagerWrap.length) {
                    pagerWrap = $('<div />').addClass(PAGER_CLASS);
                }

                if (pageable.position === "top") {
                    pagerWrap
                        .addClass(kendo.format("{0}-{1}", PAGER_CLASS, pageable.position))
                        .prependTo(that.wrapper);
                } else {
                    pagerWrap.appendTo(that.wrapper);
                }

                if (that.pager) {
                    that.pager.destroy();
                }

                if (typeof pageable === "object" && pageable instanceof kendo.ui.Pager) {
                    that.pager = pageable;
                } else {
                    pagerWrap = pageable.pagerId ? $("#" + pageable.pagerId) : pagerWrap;

                    settings = $.extend({}, pageable, {
                        dataSource: that.dataSource,
                        navigatable: navigatable,
                        pagerId: null
                    });

                    that.pager = new kendo.ui.Pager(pagerWrap, settings);
                }
            },

            _selectable: function() {
                var that = this,
                    multi,
                    current,
                    selectable = that.options.selectable,
                    navigatable = that.options.navigatable;

                if (selectable) {
                    multi = kendo.ui.Selectable.parseOptions(selectable).multiple;

                    that.selectable = new kendo.ui.Selectable(that.element, {
                        aria: true,
                        multiple: multi,
                        filter: that.options.contentElement ? ".k-listview-content " + FOCUSSELECTOR : FOCUSSELECTOR,
                        change: function() {
                            that.trigger(CHANGE);
                        }
                    });

                    if (navigatable) {
                        that.element.on("keydown" + NS, function(e) {

                            if (!$(e.target).is(that.element)) { return; }

                            if (e.keyCode === keys.SPACEBAR) {
                                current = that.current();

                                if (e.target == e.currentTarget) {
                                    e.preventDefault();
                                }

                                if (multi) {
                                    if (!e.ctrlKey) {
                                        that.selectable.clear();
                                    } else {
                                        if (current && current.hasClass(SELECTED)) {
                                            current.removeClass(SELECTED);
                                            that.trigger(CHANGE);
                                            return;
                                        }
                                    }
                                } else {
                                    that.selectable.clear();
                                }

                                that.selectable.value(current);
                                that.trigger(CHANGE);
                            }
                        });
                    }
                }
            },

            _scrollable: function() {
                var that = this;
                var scrollable = that.options.scrollable;

                if (scrollable) {

                    that.content.css({
                        "overflow-y": "scroll",
                        "position": "relative",
                        "-webkit-overflow-scrolling": "touch"
                    });

                    if (scrollable === "endless") {
                        that._bindScrollable();
                    }
                }
            },

            _bindScrollable: function() {
                var that = this;
                var originalPageSize = that._endlessPageSize = that.dataSource.options.pageSize;

                that.content
                    .off("scroll" + NS)
                    .on("scroll" + NS, function() {
                        if (this.scrollTop + this.clientHeight - this.scrollHeight >= -15 &&
                        !that._endlessFetchInProgress &&
                        that._endlessPageSize < that.dataSource.total()) {
                            that._skipRerenderItemsCount = that._endlessPageSize;
                            that._endlessPageSize = that._skipRerenderItemsCount + originalPageSize;
                            that.dataSource.options.endless = true;
                            that._endlessFetchInProgress = true;
                            that.dataSource.pageSize(that._endlessPageSize);
                        }
                    });
            },

            current: function(candidate) {
                var that = this,
                    element = that.element,
                    current = that._current,
                    id = that._itemId;

                if (candidate === undefined$1) {
                    return current;
                }

                if (current && current[0]) {
                    if (current[0].id === id) {
                        current.removeAttr("id");
                    }

                    current.removeClass(FOCUSED);
                    element.removeAttr(ARIA_ACTIVEDESCENDANT);
                }

                if (candidate && candidate[0]) {
                    id = candidate[0].id || id;

                    that._scrollTo(candidate[0]);

                    element.attr(ARIA_ACTIVEDESCENDANT, id);
                    candidate.addClass(FOCUSED).attr("id", id);
                }

                that._current = candidate;
            },

            _scrollTo: function(element) {
                var that = this,
                    content = that.content,
                    container,
                    UseJQueryoffset = false,
                    SCROLL = "scroll";

                if (content.css("overflow") === "auto" || content.css("overflow") === SCROLL || content.css("overflow-y") === SCROLL) {
                    container = content[0];
                } else {
                    container = window;
                    UseJQueryoffset = true;
                }

                var scrollDirectionFunc = function(direction, dimension) {

                    var elementOffset = UseJQueryoffset ? $(element).offset()[direction.toLowerCase()] : element["offset" + direction],
                        elementDimension = element["client" + dimension],
                        containerScrollAmount = $(container)[SCROLL + direction](),
                        containerDimension = $(container)[dimension.toLowerCase()]();

                    if (elementOffset + elementDimension > containerScrollAmount + containerDimension) {
                        $(container)[SCROLL + direction](elementOffset + elementDimension - containerDimension);
                    } else if (elementOffset < containerScrollAmount) {
                        $(container)[SCROLL + direction](elementOffset);
                    }
                };

                scrollDirectionFunc("Top", "Height");
                scrollDirectionFunc("Left", "Width");
            },

            _navigatable: function() {
                var that = this,
                    navigatable = that.options.navigatable,
                    element = that.element,
                    content = that.content,
                    clickCallback = function(e) {
                        that.current($(e.currentTarget));
                        if (!$(e.target).is(":button, a, :input, a > .k-icon, a > k-svg-icon, textarea")) {
                            kendo.focusElement(element);
                        }
                    };

                if (navigatable) {
                    that._tabindex();

                    element
                        .on("focus" + NS, function() {
                            var current = that._current;

                            if (!current || !current.is(":visible")) {
                                current = that._item("first");
                            }

                            that.current(current);
                        })
                        .on("focusout" + NS, function() {
                            if (that._current) {
                                that._current.removeClass(FOCUSED);
                            }
                        })
                        .on("keydown" + NS, that, function(e) {
                            var key = e.keyCode,
                                current = that.current(),
                                target = $(e.target),
                                canHandle = !target.is(":button, textarea, a, a > .t-icon, input"),
                                isTextBox = target.is(":text, :password"),
                                preventDefault = kendo.preventDefault,
                                editItem = content.find("." + KEDITITEM),
                                active = activeElement(), idx,
                                scrollable = that.options.scrollable;

                            if (target.hasClass(PAGER_CLASS) || (!canHandle && !isTextBox && key !== keys.ESC) || (isTextBox && key !== keys.ESC && key !== keys.ENTER)) {
                                return;
                            }

                            if (key === keys.UP || key === keys.LEFT) {
                                if (current && current[0]) {
                                    current = current.prev();
                                }

                                if (current && current[0]) {
                                    that.current(current);
                                }
                                else if (!scrollable) {
                                    that.current(that._item("last"));
                                }
                                preventDefault(e);
                            }

                            if (key === keys.DOWN || key === keys.RIGHT) {
                                if (scrollable) {
                                    if (that.options.scrollable === "endless" && !current.next().length) {
                                        that.content[0].scrollTop = that.content[0].scrollHeight;
                                        that._focusNext = true;
                                    } else {
                                        current = current.next();

                                        if (current && current[0]) {
                                            that.current(current);
                                        }
                                    }
                                }
                                else {
                                    current = current.next();
                                    that.current(!current || !current[0] ? that._item("first") : current);
                                }
                                preventDefault(e);
                            }

                            if (key === keys.PAGEUP) {
                                that.current(null);
                                that.dataSource.page(that.dataSource.page() - 1);
                                preventDefault(e);
                            }

                            if (key === keys.PAGEDOWN) {
                                that.current(null);
                                that.dataSource.page(that.dataSource.page() + 1);
                                preventDefault(e);
                            }

                            if (key === keys.HOME) {
                                that.current(that._item("first"));
                                preventDefault(e);
                            }

                            if (key === keys.END) {
                                that.current(that._item("last"));
                                preventDefault(e);
                            }

                            if (key === keys.ENTER) {
                                if (editItem.length !== 0 && (canHandle || isTextBox)) {
                                    idx = that.items().index(editItem);

                                    if (active) {
                                        active.blur();
                                    }

                                    that.save();

                                    var focusAgain = function() {
                                        that.element.trigger("focus");
                                        that.current(that.items().eq(idx));
                                    };

                                    that.one("dataBound", focusAgain);
                                } else if (that.options.editTemplate) {
                                    that.edit(current);
                                }
                            }

                            if (key === keys.ESC) {
                                editItem = content.find("." + KEDITITEM);

                                if (editItem.length === 0) {
                                    return;
                                }

                                idx = that.items().index(editItem);
                                that.cancel();
                                that.element.trigger("focus");
                                that.current(that.items().eq(idx));
                            }
                        });

                    element.on(MOUSEDOWN + NS + " " + TOUCHSTART + NS, that.options.contentElement ? ".k-listview-content " + FOCUSSELECTOR : FOCUSSELECTOR, clickCallback.bind(that));
                }
            },

            clearSelection: function() {
                var that = this;
                that.selectable.clear();
            },

            select: function(items) {
                var that = this,
                    selectable = that.selectable;

                items = $(items);

                if (items.length) {
                    if (!selectable.options.multiple) {
                        selectable.clear();
                        items = items.first();
                    }
                    selectable.value(items);
                    return;
                }

                return selectable.value();
            },

            _destroyEditable: function() {
                var that = this;
                if (that.editable) {
                    that.editable.destroy();
                    delete that.editable;
                }
            },

            _modelFromElement: function(element) {
                var uid = element.attr(kendo.attr("uid"));

                return this.dataSource.getByUid(uid);
            },

            _closeEditable: function() {
                var that = this,
                    editable = that.editable,
                    options = that.options,
                    role = options.selectable ? "option" : "listitem",
                    data,
                    item,
                    index,
                    template = that.template;

                if (editable) {
                    if (editable.element.index() % 2) {
                        template = that.altTemplate;
                    }

                    data = that._modelFromElement(editable.element);
                    that._destroyEditable();

                    index = editable.element.index();
                    editable.element.replaceWith(template(data));
                    item = that.items().eq(index);
                    item.addClass(ITEM_CLASS);
                    item.attr(kendo.attr("uid"), data.uid);
                    item.attr(ARIA_ROLE, role);

                    if (that._hasBindingTarget()) {
                        kendo.bind(item, data);
                    }
                }
                return true;
            },

            edit: function(item) {
                var that = this,
                    data = that._modelFromElement(item),
                    container,
                    uid = data.uid,
                    index;

                that.cancel();

                item = that.items().filter("[" + kendo.attr("uid") + "=" + uid + "]");
                index = item.index();
                item.replaceWith(that.editTemplate(data));
                container = that.items().eq(index).addClass(KEDITITEM).attr(kendo.attr("uid"), data.uid);
                that.editable = container.kendoEditable({
                    model: data,
                    clearContainer: false,
                    errorTemplate: false,
                    target: that
                }).data("kendoEditable");

                that.trigger(EDIT, { model: data, item: container });
            },

            save: function() {
                var that = this,
                    editable = that.editable,
                    model;

                if (!editable) {
                    return;
                }

                var container = editable.element;
                model = that._modelFromElement(container);

                if (editable.end() && !that.trigger(SAVE, { model: model, item: container })) {
                    that._closeEditable();
                    that.dataSource.sync();
                }
            },

            remove: function(item) {
                var that = this,
                    dataSource = that.dataSource,
                    data = that._modelFromElement(item);

                if (that.editable) {
                    dataSource.cancelChanges(that._modelFromElement(that.editable.element));
                    that._closeEditable();
                }

                if (!that.trigger(REMOVE, { model: data, item: item })) {
                    if (item.attr("id") === that.element.attr(ARIA_ACTIVEDESCENDANT)) {
                        that.element.removeAttr(ARIA_ACTIVEDESCENDANT);
                    }

                    item.hide();
                    dataSource.remove(data);
                    dataSource.sync();
                }
            },

            add: function() {
                var that = this,
                    dataItem,
                    dataSource = that.dataSource,
                    index = dataSource.indexOf((dataSource.view() || [])[0]);

                if (index < 0) {
                    index = 0;
                }

                that.cancel();
                dataItem = dataSource.insert(index, {});
                that.edit(that.element.find("[data-uid='" + dataItem.uid + "']"));
            },

            cancel: function() {
                var that = this,
                    dataSource = that.dataSource;

                if (that.editable) {
                    var container = that.editable.element;
                    var model = that._modelFromElement(container);

                    if (!that.trigger(CANCEL, { model: model, container: container })) {
                        dataSource.cancelChanges(model);
                        that._closeEditable();
                    }
                }
            },

            _crudHandlers: function() {
                var that = this,
                    touchstartNs = TOUCHSTART + NS,
                    clickNs = CLICK + NS;

                that.content.on(touchstartNs + " " + clickNs, ".k-edit-button", function(e) {
                    e.preventDefault();
                    var item = $(this).closest("[" + kendo.attr("uid") + "]");
                    setTimeout(function() {
                        that.edit(item);
                    });
                });


                that.content.on(touchstartNs + " " + clickNs, ".k-delete-button", function(e) {
                    e.preventDefault();
                    var item = $(this).closest("[" + kendo.attr("uid") + "]");
                     setTimeout(function() {
                        that.remove(item);
                     });
                });

                that.content.on(clickNs, ".k-update-button", function(e) {
                    that.save();
                    e.preventDefault();
                });

                that.content.on(clickNs, ".k-cancel-button", function(e) {
                    that.cancel();
                    e.preventDefault();
                });
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that._unbindDataSource();

                that._destroyEditable();

                that.element.off(NS);
                that.content.off(NS);

                that._endlessFetchInProgress = that._endlessPageSize = that._skipRerenderItemsCount = that._focusNext = null;

                if (that.pager) {
                    that.pager.destroy();
                }

                kendo.destroy(that.element);
            }
        });

        kendo.ui.plugin(ListView);
    })(window.kendo.jQuery);

    var __meta__$c = {
        id: "listbox",
        name: "ListBox",
        category: "web",
        depends: ["draganddrop", "data", "selectable", 'html.button']
    };

    (function($, undefined$1) {
        var kendo = window.kendo;
        var kendoAttr = kendo.attr;
        var data = kendo.data;
        var keys = kendo.keys;
        var kendoTemplate = kendo.template;
        var Widget = kendo.ui.Widget;
        var DataSource = data.DataSource;
        var Selectable = kendo.ui.Selectable;
        var DataBoundWidget = kendo.ui.DataBoundWidget;
        var Class = kendo.Class;

        var extend = $.extend;
        var noop = $.noop;

        var DASH = "-";
        var DOT = ".";
        var SPACE = " ";
        var HASH = "#";

        var KENDO_LISTBOX = "kendoListBox";
        var NS = DOT + KENDO_LISTBOX;
        var DISABLED_STATE_CLASS = "k-disabled";
        var SELECTED_STATE_CLASS = "k-selected";
        var ENABLED_ITEM_SELECTOR = ".k-list-item:not(.k-disabled)";
        var ENABLED_ITEMS_SELECTOR = ".k-list-ul:not(.k-disabled) >" + ENABLED_ITEM_SELECTOR;
        var TOOLBAR_CLASS = "k-listbox-actions";
        var TOOL_SELECTOR = ".k-button";
        var ENABLED_TOOL_SELECTOR = "button.k-button:not(.k-disabled)";
        var FOCUSED_CLASS = "k-focus";
        var DRAG_CLUE_CLASS = "k-drag-clue";
        var DROP_HINT_CLASS = "k-drop-hint";
        var LIST_CLASS = "k-list-ul";
        var LIST_SELECTOR = ".k-list-ul";

        var CLICK = "click" + NS;
        var KEYDOWN = "keydown" + NS;
        var BLUR = "blur" + NS;
        var outerWidth = kendo._outerWidth;
        var outerHeight = kendo._outerHeight;
        var CHANGE = "change";
        var DATABOUND = "dataBound";
        var ADD = "add";
        var REMOVE = "remove";
        var REORDER = "reorder";
        var MOVE_UP = "moveUp";
        var MOVE_DOWN = "moveDown";
        var TRANSFER_TO = "transferTo";
        var TRANSFER_FROM = "transferFrom";
        var TRANSFER_ALL_TO = "transferAllTo";
        var TRANSFER_ALL_FROM = "transferAllFrom";
        var CARET_ALT_RIGHT = "caret-alt-right";
        var CARET_ALT_LEFT = "caret-alt-left";
        var CARET_ALT_DOUBLE_RIGHT = "caret-double-alt-right";
        var CARET_ALT_DOUBLE_LEFT = "caret-double-alt-left";
        var DRAGGEDCLASS = "k-ghost";
        var UNIQUE_ID = "uid";
        var ID = "id";
        var TABINDEX = "tabindex";
        var COMMAND = "command";

        var MOVE_UP_OFFSET = -1;
        var MOVE_DOWN_OFFSET = 1;
        var DRAGSTART = "dragstart";
        var DRAG = "drag";
        var DROP = "drop";
        var DRAGEND = "dragend";
        var DEFAULT_FILTER = "ul.k-list-ul>li.k-list-item";

        var RIGHT = "right";
        var BOTTOM = "bottom";

        var ARIA_ACTIVEDESCENDENT = "aria-activedescendant";
        var ARIA_BUSY = "aria-busy";
        var ARIA_CONTROLS = "aria-controls";
        var ARIA_LABEL = "aria-label";
        var ARIA_LABELLEDBY = "aria-labelledby";
        var ARIA_MULTISELECTABLE = "aria-multiselectable";

        var TOOLBAR_POSITION_CLASS_NAMES = [
            TOOLBAR_CLASS + DASH + "left",
            TOOLBAR_CLASS + DASH + RIGHT,
            TOOLBAR_CLASS + DASH + "top",
            TOOLBAR_CLASS + DASH + BOTTOM
        ];

        function getSortedDomIndices(items) {
            var indices = $.map(items, function(item) {
                return $(item).index();
            });

            return indices;
        }

        function isUndefined(value) {
            return (typeof value === "undefined");
        }

        function defaultHint(element) {
            return element.clone()
                .attr('class', '')
                .addClass(DRAG_CLUE_CLASS);
        }

        function defaultPlaceholder() {
            return $('<li>').addClass(DROP_HINT_CLASS);
        }

        var ListBox = DataBoundWidget.extend({
            init: function(element, options) {
                var that = this;
                Widget.fn.init.call(that, element, options);

                that._wrapper();
                that._list();
                that._ariaLabel(that._getList());
                element = that.element.attr("multiple", "multiple").hide();

                if (element[0] && !that.options.dataSource) {
                    that.options.dataTextField = that.options.dataTextField || "text";
                    that.options.dataValueField = that.options.dataValueField || "value";
                }
                that._templates();
                that._selectable();
                that._dataSource();
                that._createToolbar();
                that._createDraggable();
                that._createNavigatable();
            },

            destroy: function() {
                var that = this;

                DataBoundWidget.fn.destroy.call(that);
                if (!isNaN(that._listTabIndex)) {
                    that._getList().off();
                    that._listTabIndex = null;
                }
                that._unbindDataSource();
                that._destroySelectable();
                that._destroyToolbar();
                that.wrapper.off(NS);
                if (that._target) {
                    that._target = null;
                }
                if (that._draggable) {
                    that._draggable.destroy();
                    that.placeholder = null;
                }

                kendo.destroy(that.element);
            },

            setOptions: function(options) {
                Widget.fn.setOptions.call(this, options);
                this._templates();
                this._dataSource();
            },

            events: [
                CHANGE,
                DATABOUND,
                ADD,
                REMOVE,
                REORDER,
                DRAGSTART,
                DRAG,
                DROP,
                DRAGEND
            ],

            options: {
                name: "ListBox",
                autoBind: true,
                template: "",
                dataTextField: "",
                dataValueField: "",
                selectable: "single",
                draggable: null,
                dropSources: [],
                connectWith: "",
                navigatable: true,
                toolbar: {
                    position: RIGHT,
                    tools: []
                },
                messages: {
                    tools: {
                        remove: "Delete",
                        moveUp: "Move Up",
                        moveDown: "Move Down",
                        transferTo: "Transfer To",
                        transferFrom: "Transfer From",
                        transferAllTo: "Transfer All To",
                        transferAllFrom: "Transfer All From"
                    }
                }
            },

            add: function(dataItems) {
                var that = this;
                var items = dataItems && dataItems.length ? dataItems : [dataItems];
                var itemsLength = items.length;
                var list = that._getList();
                var i;

                that._unbindDataSource();
                that._unbindDataChange();
                for (i = 0; i < itemsLength; i++) {
                    that._addItem(items[i], list);
                }
                that._bindDataChange();
                that._bindDataSource();
                that._syncElement();
            },

            _addItem: function(dataItem, list) {
                var that = this;
                var item = $(that.templates.itemTemplate({ item: dataItem, r: that.templates.itemContent }));

                that._setItemId(item, dataItem.uid);

                item.appendTo(list);

                if (typeof dataItem === typeof "") {
                    that.dataSource._data.push(dataItem);
                } else {
                    that.dataSource.add(dataItem);
                }
            },

            _addItemAt: function(dataItem, index) {
                var that = this;
                var item = $(that.templates.itemTemplate({ item: dataItem, r: that.templates.itemContent }));
                that._unbindDataSource();
                if (typeof dataItem === typeof "") {
                    that._insertElementAt(item, index);
                    that.dataSource._data.push(dataItem);
                } else {
                    that._setItemId(item, dataItem.uid);
                    that._insertElementAt(item, index);
                    that.dataSource.add(dataItem);
                }
                that._bindDataSource();
                that._syncElement();
            },

            _insertElementAt: function(item, index) {
                var that = this;
                var list = that._getList();

                if (index > 0) {
                    $(item).insertAfter(list.children().eq(index - 1));
                } else {
                    $(list).prepend(item);
                }
            },

            _createNavigatable: function() {
                var that = this;
                var options = that.options;

                if (options.navigatable) {
                    that._getList().on(CLICK, ENABLED_ITEM_SELECTOR, that._click.bind(that))
                                .on(KEYDOWN, that._keyDown.bind(that))
                                .on(BLUR, that._blur.bind(that));
                }
            },

            _getTabIndex: function() {
                var that = this;
                var tabindex;

                if (!isNaN(that._listTabIndex))
                {
                    return that._listTabIndex;
                }

                tabindex = that.element.attr(TABINDEX);
                that._listTabIndex = !isNaN(tabindex) ? tabindex : 0;

                that.element.removeAttr(TABINDEX);

                return that._listTabIndex;
            },

            _blur: function() {
                if (this._target) {
                    this._target.removeClass(FOCUSED_CLASS);
                    this._getList().removeAttr(ARIA_ACTIVEDESCENDENT);
                }
                this._target = null;
            },

            _click: function(e) {
                var that = this;
                var target = $(e.currentTarget);
                var oldTarget = that._target;
                var list = that._getList();
                var activeEl = kendo._activeElement();
                var isContained = $.contains(list, activeEl);

                if (oldTarget) {
                    oldTarget.removeClass(FOCUSED_CLASS);
                }

                that._target = target;
                target.addClass(FOCUSED_CLASS);
                list.attr(ARIA_ACTIVEDESCENDENT, target.attr(ID));

                if (list[0] !== activeEl && (!isContained || !isInputElement(activeEl))) {
                    that.focus();
                }
            },

            _getNavigatableItem: function(key) {
                var that = this;
                var current;

                if (!that._target) {
                    current = that.items().filter(ENABLED_ITEM_SELECTOR).first();
                } else {
                    current = that._target;
                }

                if (key === keys.UP && that._target) {
                    current = that._target.prevAll(ENABLED_ITEM_SELECTOR).first();
                }

                if (key === keys.DOWN && that._target) {
                    current = that._target.nextAll(ENABLED_ITEM_SELECTOR).first();
                }

                return current.length ? current : null;
            },

            _scrollIntoView: function(item) {
                if (!item) {
                    return;
                }

                if (item[0]) {
                    item = item[0];
                }

                var list = this._getList().parent()[0];
                var itemOffsetTop = item.offsetTop;
                var contentScrollTop = list.scrollTop;
                var contentOffsetHeight = list.clientHeight;
                var bottomDistance = itemOffsetTop + item.offsetHeight;

                if (contentScrollTop > itemOffsetTop) {
                    contentScrollTop = itemOffsetTop;
                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
                    contentScrollTop = (bottomDistance - contentOffsetHeight);
                }

                list.scrollTop = contentScrollTop;
            },

            _keyDown: function(e) {
                var that = this;
                var key = e.keyCode;
                var current = that._getNavigatableItem(key);
                var shouldPreventDefault;

                if (!(e.shiftKey && !e.ctrlKey && (key === keys.DOWN || key === keys.UP))) {
                    that._shiftSelecting = false;
                }

                if (key == keys.DELETE) {
                    that._executeCommand(REMOVE);
                    if (that._target) {
                        that._target.removeClass(FOCUSED_CLASS);
                        that._getList().removeAttr(ARIA_ACTIVEDESCENDENT);
                        that._target = null;
                    }
                    shouldPreventDefault = true;
                } else if (key === keys.DOWN || key === keys.UP) {
                    if (!current) {
                        e.preventDefault();
                        return;
                    }

                    if (e.shiftKey && !e.ctrlKey) {
                        if (that._target) {
                            that._target.removeClass(FOCUSED_CLASS);
                        }

                        if (!that._shiftSelecting) {
                            that.clearSelection();
                            that._shiftSelecting = true;
                        }
                        if (that._target && current.hasClass("k-selected")) {
                            that._target.removeClass(SELECTED_STATE_CLASS);
                        } else if (that.options.selectable == "single") {
                            that.select(current);
                        } else {
                            that.select(current.add(that._target));
                        }

                        that._updateToolbar();
                        that._updateAllToolbars();
                        that.trigger(CHANGE);
                    } else if (e.shiftKey && e.ctrlKey) {
                        that._executeCommand(key === keys.DOWN ? MOVE_DOWN : MOVE_UP);
                        that._scrollIntoView(that._target);
                        e.preventDefault();
                        return;
                    } else if (!e.shiftKey && !e.ctrlKey) {
                        if (that._target) {
                            that._target.removeClass(FOCUSED_CLASS);
                        }

                        if (that.options.selectable === "multiple") {
                            that.clearSelection();
                        }

                        that.select(current);
                        that._updateToolbar();
                        that._updateAllToolbars();
                        that.trigger(CHANGE);
                    }

                    if (current && that._target && that._target[0] !== current[0]) {
                        that._target.removeClass(FOCUSED_CLASS);
                    }

                    that._target = current;

                    if (that._target) {
                        that._target.addClass(FOCUSED_CLASS);
                        that._scrollIntoView(that._target);
                        that._getList().attr(ARIA_ACTIVEDESCENDENT, that._target.attr(ID));
                    } else {
                        that._getList().removeAttr(ARIA_ACTIVEDESCENDENT);
                    }
                    shouldPreventDefault = true;
                } else if (key == keys.SPACEBAR) {
                    if (e.ctrlKey && that._target) {
                        if (that._target.hasClass(SELECTED_STATE_CLASS)) {
                            that._target.removeClass(SELECTED_STATE_CLASS);
                        } else {
                            that.select(that._target);
                        }

                        that.trigger(CHANGE);
                    } else {
                       that.clearSelection();
                       that.select(that._target);
                       that.trigger(CHANGE);
                    }

                    that._updateToolbar();
                    that._updateAllToolbars();
                    shouldPreventDefault = true;
                } else if (e.ctrlKey && key == keys.RIGHT) {
                    if (e.shiftKey) {
                       that._executeCommand(TRANSFER_ALL_TO);
                    } else {
                       that._executeCommand(TRANSFER_TO);
                    }

                    that._target = that.select().length ? that.select() : null;
                    shouldPreventDefault = true;
                } else if (e.ctrlKey && key == keys.LEFT) {
                    if (e.shiftKey) {
                       that._executeCommand(TRANSFER_ALL_FROM);
                    } else {
                       that._executeCommand(TRANSFER_FROM);
                    }
                    shouldPreventDefault = true;
                } else if (key === keys.F10) {
                    if (that.toolbar) {
                        that.toolbar.element.find(TOOL_SELECTOR).not("[tabindex=-1]").trigger("focus");

                        shouldPreventDefault = true;
                    }
                }

                if (shouldPreventDefault) {
                    e.preventDefault();
                }
            },

            focus: function() {
                kendo.focusElement(this._getList());
            },

            _createDraggable: function() {
                var that = this;
                var draggable = that.options.draggable;
                var hint;

                if (draggable) {
                    hint = draggable.hint;
                    if (!that.options.selectable) {
                        throw new Error("Dragging requires selection to be enabled");
                    }

                    if (!hint) {
                        hint = defaultHint;
                    }

                    that._draggable = new kendo.ui.Draggable(that.wrapper, {
                        filter: draggable.filter ? draggable.filter : DEFAULT_FILTER,
                        hint: kendo.isFunction(hint) ? hint : $(hint),
                        dragstart: that._dragstart.bind(that),
                        dragcancel: that._clear.bind(that),
                        drag: that._drag.bind(that),
                        dragend: that._dragend.bind(that)
                    });
                }
            },

            _dragstart: function(e) {
                var that = this;
                var draggedElement = that.draggedElement = e.currentTarget;
                var placeholder = that.options.draggable.placeholder;
                var dataItem = that.dataItem(draggedElement);
                var eventData = { dataItems: dataItem, items: $(draggedElement), draggableEvent: e };

                if (that.options.draggable.enabled === false) {
                    e.preventDefault();
                    return;
                }

                if (!placeholder) {
                    placeholder = defaultPlaceholder;
                }

                that.placeholder = kendo.isFunction(placeholder) ? $(placeholder.call(that, draggedElement)) : $(placeholder);

                if (draggedElement.is(DOT + DISABLED_STATE_CLASS)) {
                    e.preventDefault();
                } else {
                    if (that.trigger(DRAGSTART, eventData)) {
                        e.preventDefault();
                    } else {
                        that.clearSelection();
                        that.select(draggedElement);
                        draggedElement.addClass(DRAGGEDCLASS);
                    }
                }
            },

            _clear: function() {
                this.draggedElement.removeClass(DRAGGEDCLASS);
                this.placeholder.remove();
            },

            _findElementUnderCursor: function(e) {
                var elementUnderCursor = kendo.elementUnderCursor(e);
                var draggable = e.sender;

                if ($.contains(draggable.hint[0], elementUnderCursor) || draggable.hint[0] === elementUnderCursor) {
                    draggable.hint.hide();
                    elementUnderCursor = kendo.elementUnderCursor(e);
                    draggable.hint.show();
                }

                return elementUnderCursor;
            },

            _findTarget: function(e) {
                var that = this;
                var element = that._findElementUnderCursor(e);
                var elementNode = $(element);
                var list = that._getList();
                var items;
                var node;

                if ($.contains(list[0], element)) {
                    items = that.items();
                    element = elementNode.is("li") ? element : elementNode.closest("li")[0];
                    node = items.filter(element)[0] || items.has(element)[0];
                    if (node) {
                        node = $(node);
                        return !node.hasClass(DISABLED_STATE_CLASS) ? { element: node, listBox: that } : null;
                    } else {
                        return null;
                    }
                } else if (list[0] == element || list.parent()[0] == element) {
                    return { element: $(list), appendToBottom: true, listBox: that };
                } else {
                    return that._searchConnectedListBox(elementNode);
                }
            },

            _getElementCenter: function(element) {
                var center = element.length ? kendo.getOffset(element) : null;
                if (center) {
                    center.top += outerHeight(element) / 2;
                    center.left += outerWidth(element) / 2;
                }

                return center;
            },

            _searchConnectedListBox: function(element) {
                var connectedListBox;
                var items;
                var node;
                var originalElement = element;
                var closestContainer;

                if (element.hasClass("k-list-scroller k-selectable")) {
                    closestContainer = element;
                } else {
                    closestContainer = element.closest(".k-list-scroller.k-selectable");
                }

                if (closestContainer.length) {
                    connectedListBox = closestContainer.parent().find("[data-role='listbox']").getKendoListBox();
                } else {
                    return null;
                }

                if (connectedListBox && $.inArray(this.element[0].id, connectedListBox.options.dropSources) !== -1) {
                    items = connectedListBox.items();
                    element = element.is("li") ? element[0] : element.closest("li")[0];
                    node = items.filter(element)[0] || items.has(element)[0];
                    if (node) {
                        node = $(node);
                        return !node.hasClass(DISABLED_STATE_CLASS) ? { element: node, listBox: connectedListBox } : null;
                    } else if (!items.length ||
                                originalElement.hasClass("k-list-scroller k-selectable") ||
                                originalElement.hasClass("k-list-content")) {
                        return { element: connectedListBox._getList(), listBox: connectedListBox, appendToBottom: true };
                    } else {
                        return null;
                    }
                }
                return null;
            },

            _drag: function(e) {
                var that = this;
                var draggedElement = that.draggedElement;
                var target = that._findTarget(e);
                var cursorOffset = { left: e.x.location, top: e.y.location };
                var dataItem = that.dataItem(draggedElement);
                var eventData = { dataItems: [dataItem], items: $(draggedElement), draggableEvent: e };
                var targetCenter;
                var offsetDelta;
                var direction;

                if (that.trigger(DRAG, eventData)) {
                    e.preventDefault();
                    return;
                }

                if (target) {
                    targetCenter = this._getElementCenter(target.element);

                    offsetDelta = {
                        left: Math.round(cursorOffset.left - targetCenter.left),
                        top: Math.round(cursorOffset.top - targetCenter.top)
                    };

                    if (target.appendToBottom) {
                        that._movePlaceholder(target, null , draggedElement);
                        return;
                    }

                    if (offsetDelta.top < 0) {
                        direction = "prev";
                    } else if (offsetDelta.top > 0) {
                        direction = "next";
                    }

                    if (direction) {
                        if (target.element[0] != that.placeholder[0]) {
                            that._movePlaceholder(target, direction, draggedElement);
                        }
                    }
                 }
                 else if (that.placeholder.parent().length) {
                    that.placeholder.remove();
                 }
            },

            _movePlaceholder: function(target, direction, draggedElement) {
                var that = this;
                var placeholder = that.placeholder;
                var draggableOptions = target.listBox.options.draggable;

                if (placeholder.parent().length) {
                    that.placeholder.remove();
                    if (draggableOptions && draggableOptions.placeholder) {
                        that.placeholder = kendo.isFunction(draggableOptions.placeholder) ? $(draggableOptions.placeholder.call(that, draggedElement)) : $(draggableOptions.placeholder);
                    } else {
                        that.placeholder = $(defaultPlaceholder.call(that, draggedElement));
                    }
                }

                if (!direction) {
                    target.element.append(that.placeholder);
                } else if (direction === "prev") {
                    target.element.before(that.placeholder);
                } else if (direction === "next") {
                    target.element.after(that.placeholder);
                }
            },

            _dragend: function(e) {
                var that = this;
                var draggedItem = that.draggedElement;
                var items = that.items();
                var placeholderIndex = items.not(that.draggedElement).index(that.placeholder);
                var draggedIndex = items.not(that.placeholder).index(that.draggedElement);
                var dataItem = that.dataItem(draggedItem);
                var eventData = { dataItems: [dataItem], items: $(draggedItem) };
                var connectedListBox = that.placeholder.closest(".k-listbox").find("[data-role='listbox']").getKendoListBox();

                if (that.trigger(DROP, extend({}, eventData, { draggableEvent: e }))) {
                    e.preventDefault();
                    this._clear();
                    return;
                }

                if (placeholderIndex >= 0) {
                    if (placeholderIndex !== draggedIndex && !that.trigger(REORDER, extend({}, eventData, { offset: placeholderIndex - draggedIndex }))) {
                        draggedItem.removeClass(DRAGGEDCLASS);
                        that.reorder(draggedItem, placeholderIndex);
                    }
                } else if (connectedListBox) {
                    if (!that.trigger(REMOVE, eventData)) {
                        that.remove($(draggedItem));
                    }

                    if (!connectedListBox.trigger(ADD, eventData)) {
                        connectedListBox._addItemAt(dataItem, connectedListBox.items().index(that.placeholder));
                    }
                }

                that._clear();
                that._draggable.dropped = true;

                that.trigger(DRAGEND, extend({}, eventData, { draggableEvent: e }));

                that._updateToolbar();
                that._updateAllToolbars();
            },

            reorder: function(item, index) {
                var that = this;
                var dataSource = that.dataSource;
                var dataItem = that.dataItem(item);
                var dataItemAtIndex = dataSource.at(index);
                var itemAtIndex = that.items()[index];
                var listItem = $(item);

                if (dataItem && itemAtIndex && dataItemAtIndex) {
                    that._removeElement(listItem);
                    that._insertElementAt(listItem, index);
                    that._updateToolbar();
                }
            },

            remove: function(items) {
                var that = this;
                var listItems = that._getItems(items);
                var itemsLength = listItems.length;
                var i;

                that._unbindDataSource();
                that._unbindDataChange();
                for (i = 0; i < itemsLength; i++) {
                    that._removeItem($(listItems[i]));
                }
                that._bindDataChange();
                that._bindDataSource();
                that._syncElement();
                that._updateToolbar();
                that._updateAllToolbars();
            },

            _removeItem: function(item) {
                var that = this;
                var dataSource = that.dataSource;
                var dataItem = that.dataItem(item);
                var transport = dataSource.transport;

                if (!dataItem || !dataSource) {
                    return;
                }
                if (typeof dataItem === typeof "") {
                    var data = dataSource._data;
                    for (var i = 0; i < data.length; i++) {
                        if (dataItem === data[i]) {
                            data[i] = data[data.length - 1];
                            data.pop();
                            break;
                        }
                    }
                } else {
                    dataSource.remove(dataItem);
                    if (transport && (transport.destroy || (transport.options || {}).destroy) &&
                        (!dataItem.isNew || !dataItem.isNew())) {
                        dataSource._destroyed.push(dataItem);
                    }
                }
                that._removeElement(item);
            },

            _removeElement: function(item) {
                kendo.destroy(item);
                $(item).off().remove();
            },

            dataItem: function(element) {
                var uniqueIdAttr = kendoAttr(UNIQUE_ID);
                var uid = $(element).attr(uniqueIdAttr) || $(element).closest("[" + uniqueIdAttr + "]").attr(uniqueIdAttr);
                if (uid) {
                    return this.dataSource.getByUid(uid);
                }
                else {
                    return $(element).find(".k-list-item-text").html();
                }
            },

            _dataItems: function(items) {
                var dataItems = [];
                var listItems = $(items);
                var itemsLength = listItems.length;
                var i;

                for (i = 0; i < itemsLength; i++) {
                    dataItems.push(this.dataItem(listItems.eq(i)));
                }

                return dataItems;
            },

            items: function() {
                var list = this._getList();
                return list.children();
            },

            select: function(items) {
                var that = this;
                var selectable = that.selectable;
                var enabledItems;

                if (isUndefined(items)) {
                    return selectable.value();
                }

                enabledItems = that.items().filter(items).filter(ENABLED_ITEMS_SELECTOR);

                if (!selectable.options.multiple) {
                    selectable.clear();
                    enabledItems = enabledItems.first();
                }

                return selectable.value(enabledItems);
            },

            clearSelection: function() {
                var that = this;
                var selectable = that.selectable;

                if (selectable) {
                    selectable.clear();
                }
            },

            enable: function(items, enable) {
                var that = this;
                var enabled = isUndefined(enable) ? true : !!enable;
                var listItems = that._getItems(items);
                var itemsLength = listItems.length;
                var i;

                for (i = 0; i < itemsLength; i++) {
                    that._enableItem($(listItems[i]), enabled);
                }

                that._updateAllToolbars();
            },

            _enableItem: function(item, enable) {
                var that = this;
                var dataItem = that.dataItem(item);

                if (dataItem) {
                    if (enable) {
                        $(item).removeClass(DISABLED_STATE_CLASS);
                    } else {
                        $(item)
                            .addClass(DISABLED_STATE_CLASS)
                            .removeClass(SELECTED_STATE_CLASS);
                    }
                }
            },

            setDataSource: function(dataSource) {
                var that = this;

                that.options.dataSource = dataSource;

                that._dataSource();
            },

            _dataSource: function() {
                var that = this;
                var options = that.options;
                var dataSource = options.dataSource || {};

                dataSource = Array.isArray(dataSource) ? { data: dataSource } : dataSource;
                dataSource.select = that.element;
                dataSource.fields = [
                    { field: options.dataTextField },
                    { field: options.dataValueField }];

                that._unbindDataSource();
                that.dataSource = DataSource.create(dataSource);
                that._bindDataSource();

                if (that.options.autoBind) {
                    that.wrapper.attr(ARIA_BUSY, true);
                    that.dataSource.fetch();
                }
            },

            _bindDataChange: function() {
                var dataSource = this.dataSource;
                if (dataSource._data && dataSource._changeHandler) {
                    dataSource._data.bind(CHANGE, dataSource._changeHandler);
                    dataSource._data.trigger(CHANGE);
                }
            },

            _unbindDataChange: function() {
                var dataSource = this.dataSource;
                if (dataSource._data && dataSource._changeHandler) {
                    dataSource._data.unbind(CHANGE, dataSource._changeHandler);
                }
            },

            _bindDataSource: function() {
                var that = this;
                var dataSource = that.dataSource;

                that._dataChangeHandler = that.refresh.bind(that);

                if (dataSource) {
                    dataSource.bind(CHANGE, that._dataChangeHandler);
                }
            },

            _unbindDataSource: function() {
                var that = this;
                var dataSource = that.dataSource;

                if (dataSource) {
                    dataSource.unbind(CHANGE, that._dataChangeHandler);
                }
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    wrapper = element.parent("div.k-listbox");

                if (!wrapper[0]) {
                    wrapper = element.wrap('<div class="k-listbox" unselectable="on" />').parent();
                    wrapper[0].style.cssText = element[0].style.cssText;
                    wrapper[0].title = element[0].title;
                    $('<div class="k-list-scroller"><div class="k-list k-list-md"><div class="k-list-content"></div></div></div>').insertBefore(element);
                }

                that.wrapper = wrapper.addClass(element[0].className).css("display", "");
                that._innerWrapper = $(wrapper[0].firstChild);
            },

            _list: function() {
                var that = this,
                    list = $("<ul class='" + LIST_CLASS + "' role='listbox'></ul>"),
                    selectable = that.options.selectable,
                    selectableOptions = Selectable.parseOptions(selectable);

                if (selectableOptions.multiple) {
                    list.attr(ARIA_MULTISELECTABLE, "true");
                }

                list.appendTo(that.wrapper.find(".k-list-content"));

                if (that.options.navigatable) {
                    that._getList().attr(TABINDEX, that._getTabIndex());
                }
            },

            _templates: function() {
                var that = this;
                var options = this.options;
                var template;

                if (options.template && typeof options.template == "string") {
                    template = kendo.template(options.template);
                } else if (!options.template) {
                    template = kendo.template(function (data) { return ("" + (kendo.getter(options.dataTextField)(data))); });
                } else {
                    template = options.template;
                }

                that.templates = {
                    itemTemplate: kendo.template(function (ref) {
                            var item = ref.item;
                            var r = ref.r;

                            return ("<li class='k-list-item' role='option' aria-selected='false'><span class='k-list-item-text'>" + (r(item)) + "</span></li>");
                }
                    ),
                    itemContent: template,
                    toolbar: ("<div role='toolbar' class='" + TOOLBAR_CLASS + "'></div>")
                };
            },

            refresh: function() {
                var that = this;
                var view = that.dataSource.view();
                var template = that.templates.itemTemplate;
                var html = "";

                for (var idx = 0; idx < view.length; idx++) {
                    html += template({ item: view[idx], r: that.templates.itemContent });
                }
                that._getList().html(html);
                that._setItemIds();
                that._createToolbar();
                that._syncElement();
                that._updateToolbar();
                that._updateAllToolbars();
                that.trigger(DATABOUND);

                that.wrapper.attr(ARIA_BUSY, false);
            },

            _syncElement: function() {
                var options = "";
                var view = this.dataSource.view();
                for (var idx = 0; idx < view.length; idx++) {
                    options += this._option(view[idx][this.options.dataValueField] || view[idx], view[idx][this.options.dataTextField] || view[idx], true);
                }
                this.element.html(options);
            },

            _option: function(dataValue, dataText) {
                var option = "<option";

                if (dataValue !== undefined$1) {
                    dataValue += "";

                    if (dataValue.indexOf('"') !== -1) {
                        dataValue = dataValue.replace(/"/g, "&quot;");
                    }

                    option += ' value="' + dataValue + '"';
                }
                option += " selected>";

                if (dataText !== undefined$1) {
                    option += kendo.htmlEncode(dataText);
                }

                return option += "</option>";
            },

            _setItemId: function(item, id) {
                if (!item.length) {
                    return;
                }

                item.attr(kendoAttr(UNIQUE_ID), id).attr(ID, id);
            },

            _setItemIds: function() {
                var that = this;
                var items = that.items();
                var view = that.dataSource.view();
                var viewLength = view.length;
                var i;

                for (i = 0; i < viewLength; i++) {
                    that._setItemId(items.eq(i), view[i].uid);
                }
            },

            _selectable: function() {
                var that = this;
                var selectable = that.options.selectable;
                var selectableOptions = Selectable.parseOptions(selectable);

                that.selectable = new Selectable(that._innerWrapper, {
                    aria: true,
                    selectedClass: "k-selected",
                    multiple: selectableOptions.multiple,
                    filter: ENABLED_ITEM_SELECTOR,
                    change: that._onSelect.bind(that)
                });
            },

            _onSelect: function() {
                var that = this;

                that._updateToolbar();
                that._updateAllToolbars();
                that.trigger(CHANGE);
            },

            _destroySelectable: function() {
                var that = this;

                if (that.selectable && that.selectable.element) {
                    that.selectable.destroy();
                    that.selectable = null;
                }
            },

            _getList: function() {
                return this.wrapper.find(LIST_SELECTOR);
            },

            _getItems: function(items) {
                return this.items().filter(items);
            },

            _createToolbar: function() {
                var that = this;
                var toolbarOptions = that.options.toolbar;
                var position = toolbarOptions.position || RIGHT;
                var toolbarInsertion = position === BOTTOM ? "insertAfter" : "insertBefore";
                var tools = toolbarOptions.tools || [];
                var messages = that.options.messages;

                that._destroyToolbar();
                that.wrapper.removeClass(TOOLBAR_POSITION_CLASS_NAMES.join(SPACE));

                if (tools.length && tools.length > 0) {
                    var toolbarElement = $(that.templates.toolbar)[toolbarInsertion](that._innerWrapper);
                    that.toolbar = new ToolBar(toolbarElement, extend({}, toolbarOptions, { listBox: that, messages: messages }));
                    that.wrapper.addClass(TOOLBAR_CLASS + DASH + position);
                }
            },

            _destroyToolbar: function() {
                var that = this;

                if (that.toolbar) {
                    that.toolbar.destroy();
                    that.toolbar = null;
                }
            },

            _executeCommand: function(commandName) {
                var that = this;
                var command = CommandFactory.current.create(commandName, { listBox: that });

                if (command) {
                    command.execute();
                    that._updateToolbar();
                    that._updateAllToolbars();
                }
            },

            _updateToolbar: function() {
                var toolbar = this.toolbar;

                if (toolbar) {
                    toolbar._updateToolStates();
                }
            },

            _updateAllToolbars: function() {
                var listBoxElements = $("select[data-role='listbox']");
                var elementsLength = listBoxElements.length;
                var listBox;
                var i;

                for (i = 0; i < elementsLength; i++) {
                    listBox = $(listBoxElements[i]).data(KENDO_LISTBOX);

                    if (listBox) {
                        listBox._updateToolbar();
                    }
                }
            }
        });

        kendo.ui.plugin(ListBox);

        var CommandFactory = Class.extend({
            init: function() {
                this._commands = [];
            },

            register: function(commandName, commandType) {
                this._commands.push({
                    commandName: commandName,
                    commandType: commandType
                });
            },

            create: function(commandName, options) {
                var commands = this._commands;
                var itemsLength = commands.length;
                var name = commandName ? commandName.toLowerCase() : "";
                var match;
                var command;
                var i;

                for (i = 0; i < itemsLength; i++) {
                    command = commands[i];

                    if (command.commandName.toLowerCase() === name) {
                        match = command;
                        break;
                    }
                }

                if (match) {
                    return new match.commandType(options);
                }
            }
        });
        CommandFactory.current = new CommandFactory();

        var ListBoxCommand = Class.extend({
            init: function(options) {
                var that = this;

                that.options = extend({}, that.options, options);
                that.listBox = that.options.listBox;
            },

            options: {
                listBox: null
            },

            getItems: function() {
                return $(this.listBox.select());
            },

            execute: noop,
            canExecute: noop
        });

        var RemoveItemsCommand = ListBoxCommand.extend({
            execute: function() {
                var that = this;
                var listBox = that.listBox;
                var items = that.getItems();

                if (!listBox.trigger(REMOVE, { dataItems: listBox._dataItems(items), items: items })) {
                    listBox.remove(items);
                }
            },

            canExecute: function() {
                return this.listBox.select().length > 0;
            }
        });
        CommandFactory.current.register(REMOVE, RemoveItemsCommand);

        var MoveItemsCommand = ListBoxCommand.extend({
            execute: function() {
                var that = this;

                if (that.canExecute()) {
                    that.moveItems();
                }
            },

            canExecute: noop,

            moveItems: function() {
                var that = this;
                var listBox = that.listBox;
                var options = that.options;
                var items = that.getItems();
                var offset = options.offset;
                var indecesInDom = getSortedDomIndices(items);
                var movedItems = $.makeArray(items.sort(that.itemComparer));
                var moveAction = options.moveAction;
                var movedItem;

                if (!listBox.trigger(REORDER, { dataItems: listBox._dataItems(movedItems), items: $(movedItems), offset: offset })) {
                    while (movedItems.length > 0 && indecesInDom.length > 0) {
                        movedItem = movedItems[moveAction]();

                        listBox.reorder(movedItem, indecesInDom[moveAction]() + offset);
                    }
                }
            },

            options: {
                offset: 0,
                moveAction: "pop"
            },

            itemComparer: function(item1, item2) {
                var indexItem1 = $(item1).index();
                var indexItem2 = $(item2).index();

                if (indexItem1 === indexItem2) {
                    return 0;
                } else {
                    return (indexItem1 > indexItem2 ? 1 : (-1));
                }
            }
        });

        var MoveUpItemsCommand = MoveItemsCommand.extend({
            options: {
                offset: MOVE_UP_OFFSET,
                moveAction: "shift"
            },

            canExecute: function() {
                var items = this.getItems();
                var domIndices = getSortedDomIndices(items);

                return (domIndices.length > 0 && domIndices[0] > 0);
            }
        });
        CommandFactory.current.register(MOVE_UP, MoveUpItemsCommand);

        var MoveDownItemsCommand = MoveItemsCommand.extend({
            options: {
                offset: MOVE_DOWN_OFFSET,
                moveAction: "pop"
            },

            canExecute: function() {
                var that = this;
                var items = that.getItems();
                var domIndices = getSortedDomIndices(items);

                return (domIndices.length > 0 && $(domIndices).last()[0] < (that.listBox.items().length - 1));
            }
        });
        CommandFactory.current.register(MOVE_DOWN, MoveDownItemsCommand);

        var TransferItemsCommand = ListBoxCommand.extend({
            options: {
                filter: ENABLED_ITEM_SELECTOR
            },

            execute: function() {
                var that = this;
                var sourceListBox = that.getSourceListBox();
                var items = that.getItems().filter(that.options.filter);
                var dataItems = sourceListBox ? sourceListBox._dataItems(items) : [];
                var destinationListBox = that.getDestinationListBox();
                var updatedSelection = that.getUpdatedSelection(items);

                if (destinationListBox && items.length > 0) {
                    if (!destinationListBox.trigger(ADD, { dataItems: dataItems, items: items })) {
                        destinationListBox.add(dataItems);
                    }

                    if (!sourceListBox.trigger(REMOVE, { dataItems: dataItems, items: items })) {
                        sourceListBox.remove(items);
                        that.updateSelection(updatedSelection);
                    }
                }
            },

            getUpdatedSelection: function(items) {

                if (items.length !== 1) {
                    return null;
                }
                var that = this;
                var itemFilter = that.options.filter;
                var sourceListBox = that.getSourceListBox();
                var lastEnabledItem = sourceListBox ? sourceListBox.items().filter(itemFilter).last() : null;
                var containsLastItem = $(items).filter(lastEnabledItem).length > 0;
                var itemToSelect = containsLastItem ? $(items).prevAll(itemFilter)[0] : $(items).nextAll(itemFilter)[0];

                if (itemToSelect) {
                    return itemToSelect;
                } else {
                    return null;
                }
            },

            updateSelection: function(item) {
                var sourceListBox = this.getSourceListBox();

                if (sourceListBox && item) {
                    sourceListBox.select($(item));
                    sourceListBox.selectable.trigger(CHANGE);
                    sourceListBox._scrollIntoView(item);
                }
            },

            getSourceListBox: noop,
            getDestinationListBox: noop
        });

        var TransferItemsToCommand = TransferItemsCommand.extend({
            canExecute: function() {
                var sourceListBox = this.getSourceListBox();

                return (sourceListBox ? sourceListBox.select().length > 0 : false);
            },

            getSourceListBox: function() {
                return this.listBox;
            },

            getDestinationListBox: function() {
                var sourceListBox = this.getSourceListBox();
                return sourceListBox && sourceListBox.options.connectWith ? $(HASH + sourceListBox.options.connectWith).data(KENDO_LISTBOX) : null;
            },

            getItems: function() {
                var sourceListBox = this.getSourceListBox();
                return sourceListBox ? $(sourceListBox.select()) : $();
            }
        });
        CommandFactory.current.register(TRANSFER_TO, TransferItemsToCommand);

        var TransferItemsFromCommand = TransferItemsCommand.extend({
            canExecute: function() {
                var sourceListBox = this.getSourceListBox();

                return (sourceListBox ? sourceListBox.select().length > 0 : false);
            },

            getSourceListBox: function() {
                var destinationListBox = this.getDestinationListBox();
                return (destinationListBox && destinationListBox.options.connectWith) ? $(HASH + destinationListBox.options.connectWith).data(KENDO_LISTBOX) : null;
            },

            getDestinationListBox: function() {
                return this.listBox;
            },

            getItems: function() {
                var sourceListBox = this.getSourceListBox();
                return sourceListBox ? $(sourceListBox.select()) : $();
            }
        });
        CommandFactory.current.register(TRANSFER_FROM, TransferItemsFromCommand);

        var TransferAllItemsToCommand = TransferItemsToCommand.extend({
            canExecute: function() {
                var sourceListBox = this.getSourceListBox();

                return (sourceListBox ? sourceListBox.wrapper.find(ENABLED_ITEMS_SELECTOR).length > 0 : false);
            },

            getItems: function() {
                var sourceListBox = this.getSourceListBox();
                return sourceListBox ? sourceListBox.items() : $();
            },

            getUpdatedSelection: noop,
            updateSelection: noop
        });
        CommandFactory.current.register(TRANSFER_ALL_TO, TransferAllItemsToCommand);

        var TransferAllItemsFromCommand = TransferItemsFromCommand.extend({
            canExecute: function() {
                var sourceListBox = this.getSourceListBox();

                return (sourceListBox ? sourceListBox.wrapper.find(ENABLED_ITEMS_SELECTOR).length > 0 : false);
            },

            getItems: function() {
                var sourceListBox = this.getSourceListBox();
                return sourceListBox ? sourceListBox.items() : $();
            },

            getUpdatedSelection: noop,
            updateSelection: noop
        });
        CommandFactory.current.register(TRANSFER_ALL_FROM, TransferAllItemsFromCommand);

        var ToolBar = Class.extend({
            init: function(element, options) {
                var that = this;

                that.element = $(element).addClass(TOOLBAR_CLASS);
                that.options = extend({}, that.options, options);
                that.listBox = that.options.listBox;

                that._initTemplates();
                that._createTools();
                that._updateToolStates();
                that._attachEventHandlers();
                that._aria();
                that._tabindex();
            },

            destroy: function() {
                var that = this;

                that._detachEventHandlers();
                kendo.destroy(that.element);
                that.element.remove();
                that.element = null;
            },

            options: {
                position: RIGHT,
                tools: []
            },

            _aria: function() {
                var listEl = this.listBox._getList(),
                    listBoxLabelledby = listEl.attr(ARIA_LABELLEDBY),
                    listBoxLabel = listBoxLabelledby ? $("#" + listBoxLabelledby).text() : listEl.attr(ARIA_LABEL),
                    listElId = listEl.attr("id") || kendo.guid();

                listEl.attr("id", listElId);
                this.element.attr(ARIA_CONTROLS, listElId);

                if (listBoxLabel) {
                    this.element.attr(ARIA_LABEL, listBoxLabel + " toolbar.");
                }
            },

            _attachEventHandlers: function() {
                var that = this;

                that.element
                    .on(CLICK, ENABLED_TOOL_SELECTOR, that._onToolClick.bind(that))
                    .on(KEYDOWN, that._keyDown.bind(that));
            },
            _createTools: function() {
                var that = this;
                var isRtl = kendo.support.isRtl(that.element);
                var tools = that.options.tools;
                var toolsLength = tools.length;
                var toolsMessages = that.options.messages.tools;
                var toolList = that.element;
                var tool;
                var i;

                ToolBar.defaultTools = kendo.deepExtend({}, ToolBar.defaultTools, {
                    transferTo: {
                        icon: isRtl ? CARET_ALT_LEFT : CARET_ALT_RIGHT
                    },
                    transferFrom: {
                        icon: isRtl ? CARET_ALT_RIGHT : CARET_ALT_LEFT
                    },
                    transferAllTo: {
                        icon: isRtl ? CARET_ALT_DOUBLE_LEFT : CARET_ALT_DOUBLE_RIGHT
                    },
                    transferAllFrom: {
                        icon: isRtl ? CARET_ALT_DOUBLE_RIGHT : CARET_ALT_DOUBLE_LEFT
                    }
                });

                for (i = 0; i < toolsLength; i++) {
                    tool = extend({}, ToolBar.defaultTools[tools[i]], { text: toolsMessages[tools[i]] });

                    if (tool) {
                        toolList.append($(that.templates.tool(tool)));
                    }
                }

                that.element.append(toolList);
            },

            _detachEventHandlers: function() {
                this.element.off(NS).find("*").off(NS);
            },

            _executeToolCommand: function(command) {
                var that = this;
                var listBox = that.listBox;

                if (listBox) {
                    listBox._executeCommand(command);
                }
            },

            _focusTool: function() {
                this.element.find(TOOL_SELECTOR).not("[tabindex=-1]").trigger("focus");
            },

            _initTemplates: function() {
                this.templates = {
                    tool: kendoTemplate( function (ref) {
                            var icon = ref.icon;
                            var iconClass = ref.iconClass;
                            var command = ref.command;
                            var text = ref.text;

                            return kendo.html.renderButton(("<button data-command='" + command + "' title='" + text + "' aria-label='" + text + "'></button>"), { icon: icon, iconClass: iconClass });
                })
                };
            },

            _keyDown: function(e) {
                var key = e.keyCode,
                    target = $(e.target),
                    targetTool = target.is(TOOL_SELECTOR) ? target : target.closest("li");

                if (key === kendo.keys.UP || key === kendo.keys.LEFT) {
                    e.preventDefault();
                    if (targetTool.prev().length) {
                        this._tabindex(targetTool.prev());
                    }
                    this._focusTool();
                } else if (key === kendo.keys.DOWN || key === kendo.keys.RIGHT) {
                    e.preventDefault();
                    if (targetTool.next()) {
                        this._tabindex(targetTool.next());
                    }
                    this._focusTool();
                }
            },

            _onToolClick: function(e) {
                e.preventDefault();

                this._executeToolCommand($(e.currentTarget).data(COMMAND));
                this._focusTool();
            },

            _tabindex: function(candidate) {
                var buttons = this.element.find(TOOL_SELECTOR),
                    focusable;

                if (candidate && candidate.length) {
                    focusable = candidate;
                } else {
                    focusable = buttons.first();
                }

                buttons.attr(TABINDEX, -1);
                focusable.removeAttr(TABINDEX);
            },

            _updateToolStates: function() {
                var that = this;
                var tools = that.options.tools;
                var toolsLength = tools.length;
                var i;
                var focusable = that.element.find(TOOL_SELECTOR).not("[tabindex=-1]");

                for (i = 0; i < toolsLength; i++) {
                    that._updateToolState(tools[i]);
                }

                that._tabindex(focusable);
            },

            _updateToolState: function(toolName) {
                var that = this;
                var command = CommandFactory.current.create(toolName, { listBox: that.listBox });
                var tool = that.element.find("[data-command='" + toolName + "']");
                var toolElement = tool[0];

                if (toolElement && command && command.canExecute) {
                    if (command.canExecute()) {
                        tool.removeClass(DISABLED_STATE_CLASS).removeAttr(TABINDEX);
                    } else {
                        tool.addClass(DISABLED_STATE_CLASS).attr(TABINDEX, "-1");
                    }
                }
            }
        });

        ToolBar.defaultTools = {
            remove: {
                command: REMOVE,
                icon: "x"
            },
            moveUp: {
                command: MOVE_UP,
                icon: "caret-alt-up"
            },
            moveDown: {
                command: MOVE_DOWN,
                icon: "caret-alt-down"
            },
            transferTo: {
                command: TRANSFER_TO,
                icon: CARET_ALT_RIGHT
            },
            transferFrom: {
                command: TRANSFER_FROM,
                icon: CARET_ALT_LEFT
            },
            transferAllTo: {
                command: TRANSFER_ALL_TO,
                icon: CARET_ALT_DOUBLE_RIGHT
            },
            transferAllFrom: {
                command: TRANSFER_ALL_FROM,
                icon: CARET_ALT_DOUBLE_LEFT
            }
        };

        extend(ListBox, {
            ToolBar: ToolBar
        });

        function isInputElement(element) {
            return $(element).is(":button,a,:input,a>.k-icon,a>.k-svg-icon,textarea,span.k-select,span.k-icon,span.k-svg-icon,span.k-link,label.k-checkbox-label,.k-input,.k-multiselect-wrap,.k-picker-wrap,.k-picker-wrap>.k-selected-color,.k-tool-icon,.k-dropdownlist");
        }

    })(window.kendo.jQuery);
    var kendo$c = kendo;

    var __meta__$b = {
        id: "loader",
        name: "Loader",
        category: "web",
        description: "The Loader is a visual indicator of loading data across different parts of the page.",
        depends: ["core"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            ui = kendo.ui,

            HIDDEN = 'k-hidden',
            ROLE = 'role',
            ARIA_LABEL = 'aria-label',
            ARIA_HIDDEN = 'aria-hidden',
            ARIA_LIVE = 'aria-live';

        var loaderClasses = {
            loader: "k-loader",
            canvas: "k-loader-canvas",
            segment: "k-loader-segment"
        };

        var loaderTypes = {
            'pulsing': { className: 'pulsing-2', segments: 2 },
            'infinite-spinner': { className: 'spinner-3', segments: 3 },
            'converging-spinner': { className: 'spinner-4', segments: 4 }
        };

        var Loader = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);

                that._render();

                that._appearance();

                kendo.notify(that);
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);
            },

            options: {
                name: 'Loader',
                themeColor: "primary",
                sizes: {
                    'small': 'sm',
                    'medium': 'md',
                    'large': 'lg'
                },
                size: 'medium',
                type: "pulsing",
                visible: true,
                messages: {
                    "loading": "Loading"
                },
                _classNames: []
            },

            _render: function() {
                var that = this,
                    wrapper = that.element,
                    type = that.options.type,
                    typeData = loaderTypes[type] === undefined$1 ? type : loaderTypes[type],
                    segments = [];

                wrapper
                    .empty()
                    .attr(ARIA_LABEL, that.options.messages.loading)
                    .attr(ROLE, "alert")
                    .attr(ARIA_LIVE, "polite");

                if (typeData.segments) {
                    for (var i = 0; i < typeData.segments; i += 1) {
                        segments.push($('<span/>').addClass(loaderClasses.segment));
                    }
                }

                $("<div>").addClass(loaderClasses.canvas)
                    .append(segments)
                    .appendTo(wrapper);
            },

            _appearance: function() {
                var that = this;

                that._themeColor = that.options.themeColor;
                that._sizes = that.options.sizes;
                that._size = that.options.size;
                that._type = that.options.type;
                that._visible = that.options.visible;

                that._updateClassNames();
            },

            _updateClassNames: function() {
                var that = this,
                    classNames = [loaderClasses.loader],
                    keepClassNames = that.options._classNames,
                    themeColor = that._themeColor,
                    sizes = that._sizes,
                    size = that._size,
                    type = that._type,
                    typeData = loaderTypes[type] === undefined$1 ? type : loaderTypes[type],
                    sizeAbbr = sizes[size] === undefined$1 ? size : sizes[size],
                    visible = that._visible;

                // Remove all class names
                that.element.removeClass(function(index, className) {
                    if (className.indexOf('k-') === 0 && keepClassNames.indexOf(className) === -1) {
                        that.element.removeClass(className);
                    }
                });

                // Color
                if (typeof themeColor === 'string' && themeColor !== '' && themeColor !== 'inherit') {
                    classNames.push('k-loader-' + themeColor);
                }

                // Size
                if (typeof size === 'string' && size !== '' && sizeAbbr !== '') {
                    classNames.push('k-loader-' + sizeAbbr);
                }

                // Type
                if (typeof type === 'string' && type !== '') {
                    classNames.push('k-loader-' + ($.isPlainObject(typeData) ? typeData.className : type));
                }

                // Visibility
                if (visible === false) {
                    classNames.push(HIDDEN);
                }

                that.element.attr(ARIA_HIDDEN, !visible);

                // Apply classnames
                that.element.addClass(classNames.join(' '));
            },

            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                that._render();

                that._appearance();
            },

            themeColor: function(color) {
                var that = this;

                if (arguments.length === 0 || color === undefined$1) {
                    return that._themeColor;
                }

                that._themeColor = color;

                that._updateClassNames();
            },

            hide: function() {
                var that = this;

                that._visible = false;

                that._updateClassNames();
            },

            show: function() {
                var that = this;

                that._visible = true;

                that._updateClassNames();
            }
        });

        ui.plugin(Loader);

    })(window.kendo.jQuery);
    var kendo$b = kendo;

    var __meta__$a = {
        id: "textarea",
        name: "TextArea",
        category: "web",
        description: "The TextArea widget represents a multi-line plain-text editing control which enables you to style and provide a floating label functionality to textarea elements",
        depends: ["core", "floatinglabel"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            Widget = kendo.ui.Widget,
            ui = kendo.ui,
            isPlainObject = $.isPlainObject,
            NS = ".kendoTextArea",
            CHANGE = "change",
            DISABLED = "disabled",
            READONLY = "readonly",
            INPUT = "k-input-inner",
            FOCUSED = "k-focus",
            LABELCLASSES = "k-label k-input-label",
            STATEDISABLED = "k-disabled",
            STATEREADONLY = "k-readonly",
            ARIA_DISABLED = "aria-disabled",
            TEXTAREACONTAINER = "k-textarea-container";

        var TextArea = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(that, element, options);
                options = $.extend(true, {}, options);

                that.options.value = options.value || that.element.val();
                that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr("readonly"));
                that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.attr("disabled")));
                that.options.placeholder = options.placeholder || that.element.attr("placeholder");

                if (!that.options.value.replace(/\s/g, '').length) {
                    that.options.value = '';
                    that.element.val('');
                }

                that.value(that.options.value);
                that._wrapper();
                that._label();
                that._editable({
                    readonly: that.options.readonly,
                    disable: !(that.options.enable)
                });
                that._applyAttributes();
                that._applyCssClasses();
                that.element
                    .addClass(INPUT)
                    .css("resize", that.options.resizable)
                    .attr("autocomplete", "off");

                kendo.notify(that);
            },

            events: [
                CHANGE
            ],

            attributes: [
                "maxLength",
                "rows",
                "placeholder"
            ],

            options: {
                name: 'TextArea',
                value: '',
                readonly: false,
                enable: true,
                placeholder: '',
                label: null,
                resizable: "none",
                maxLength: null,
                cols: 20,
                rows: 1,
                rounded: "medium",
                size: "medium",
                fillMode: "solid",
                resize: "none",
                overflow: "auto"
            },

            _applyCssClasses: function(action) {
                var that = this,
                    options = that.options,
                    resize = kendo.cssProperties.getValidClass({
                        widget: options.name,
                        propName: "resize",
                        value: options.resize
                    }),
                    overflow = kendo.cssProperties.getValidClass({
                        widget: options.name,
                        propName: "overflow",
                        value: options.overflow
                    });

                Widget.fn._applyCssClasses.call(that);

                if (!resize && options.resize === "none") {
                    resize = "k-resize-none";
                }

                if (overflow) {
                    overflow = "!" + overflow;
                }

                action = action || "addClass";

                that.wrapper[action](resize);
                that.element[action](overflow);
            },

            _applyAttributes: function() {
                var that = this;
                var property;
                var attributes = {};

                for (property in that.attributes) {
                    attributes[that.attributes[property]] = that.options[that.attributes[property]];
                }

                that.element.attr(attributes);
            },

            value: function(value) {
                var that = this;

                if (value === undefined$1) {
                    return that._value;
                }

                that._value = value;
                that.element.val(value);
            },

            readonly: function(readonly) {
                var that = this;

                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (that.floatingLabel) {
                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                var that = this;

                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (that.floatingLabel) {
                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            focus: function() {
                var that = this;

                that.element[0].focus();
            },

            destroy: function() {
                var that = this;

                if (that.floatingLabel) {
                    that.floatingLabel.destroy();
                }

                that.element.off(NS);
                Widget.fn.destroy.call(that);
            },

            setOptions: function(options) {
                var that = this;
                that._applyCssClasses("removeClass");
                Widget.fn.setOptions.call(that, options);
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var wrapper = that.wrapper;
                var disable = options.disable;
                var readonly = options.readonly;

                element.off(NS);

                if (!readonly && !disable) {
                    element.prop(DISABLED, false)
                           .prop(READONLY, false)
                           .attr(ARIA_DISABLED, false);

                    wrapper.removeClass(STATEDISABLED)
                            .removeClass(STATEREADONLY);

                    element.on("focusin" + NS, that._focusin.bind(that));
                    element.on("focusout" + NS, that._focusout.bind(that));
                } else {
                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable);

                    wrapper.toggleClass(STATEDISABLED, disable)
                            .toggleClass(STATEREADONLY, readonly);
                }
            },

            _label: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var id = element.attr("id");
                var floating;
                var labelText;

                if (options.label !== null) {
                    floating = isPlainObject(options.label) ? options.label.floating : false;
                    labelText = isPlainObject(options.label) ? options.label.content : options.label;

                    if (floating) {
                        that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();
                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that, useReadOnlyClass: true });
                        that._floatingLabelContainer.addClass(TEXTAREACONTAINER);
                    }

                    if (kendo.isFunction(labelText)) {
                        labelText = labelText.call(that);
                    }

                    if (!labelText) {
                        labelText = "";
                    }

                    if (!id) {
                        id = options.name + "_" + kendo.guid();
                        element.attr("id", id);
                    }

                    that._inputLabel = $("<label class='" + LABELCLASSES + "' for='" + id + "'>" + labelText + "</label>'").insertBefore(that.wrapper);
                }
            },

            _focusin: function() {
                var that = this;

                that.wrapper.addClass(FOCUSED);
            },

            _focusout: function() {
                var that = this;
                var value = that._value;
                var newValue = that.element.val();

                that.wrapper.removeClass(FOCUSED);

                if (value === null) {
                    value = "";
                }

                if (value !== newValue) {
                    that._value = newValue;

                    that.trigger(CHANGE);
                }
            },

            _wrapper: function() {
                var that = this;
                var element = that.element;
                var DOMElement = element[0];
                var wrapper;

                wrapper = element.wrap("<span class='k-input k-textarea'></span>").parent();
                wrapper[0].style.cssText = DOMElement.style.cssText;
                DOMElement.style.width = "100%";

                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');
            }
        });

        kendo.cssProperties.registerPrefix("TextArea", "k-input-");

        kendo.cssProperties.registerValues("TextArea", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(TextArea);
    })(window.kendo.jQuery);
    var kendo$a = kendo;

    var __meta__$9 = {
        id: "maskedtextbox",
        name: "MaskedTextBox",
        category: "web",
        description: "The MaskedTextBox widget allows to specify a mask type on an input field.",
        depends: ["core", "floatinglabel", "icons"]
    };

    (function($, undefined$1) {
        var global = window;
        var min = global.Math.min;
        var kendo = global.kendo;
        var caret = kendo.caret;
        var keys = kendo.keys;
        var ui = kendo.ui;
        var Widget = ui.Widget;
        var NS = ".kendoMaskedTextBox";
        var isPlainObject = $.isPlainObject;
        var setTimeout = window.setTimeout;

        var LABELCLASSES = "k-label k-input-label";
        var STATEDISABLED = "k-disabled";
        var STATEINVALID = "k-invalid";
        var FOCUSED = "k-focus";
        var DISABLED = "disabled";
        var READONLY = "readonly";
        var CHANGE = "change";
        var MOUSEUP = "mouseup";
        var DROP = "drop";
        var KEYDOWN = "keydown";
        var PASTE = "paste";
        var INPUT = "input";

        function ns(name) { return name + NS; }

        var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? "propertychange" : INPUT);

        function stringDiffStart(str1, str2) {
            var i = 0;
            while (i < str2.length) {
                if (str1[i] !== str2[i]) {
                    break;
                }
                i++;
            }

            return i;
        }
        var MaskedTextBox = Widget.extend({
            init: function(element, options) {
                var that = this;
                var DOMElement;

                Widget.fn.init.call(that, element, options);

                that._rules = $.extend({}, that.rules, that.options.rules);

                element = that.element;
                DOMElement = element[0];

                that._wrapper();
                that._tokenize();
                that._form();

                that.element
                    .addClass("k-input-inner")
                    .attr("autocomplete", "off")
                    .on("focus" + NS, function() {
                        var value = DOMElement.value;

                        if (!value) {
                            DOMElement.value = that._old = that._emptyMask;
                        } else {
                            that._togglePrompt(true);
                        }

                        that._oldValue = value;
                        that.wrapper.addClass(FOCUSED);

                        that._timeoutId = setTimeout(function() {
                            caret(element, 0, value ? that._maskLength : 0);
                        });
                    })
                    .on("focusout" + NS, function() {
                        var value = element.val();

                        clearTimeout(that._timeoutId);
                        DOMElement.value = that._old = "";

                        if (value !== that._emptyMask) {
                            DOMElement.value = that._old = value;
                        }

                        that.wrapper.removeClass(FOCUSED);
                        that._change();
                        that._togglePrompt();
                    });

                if (that.options.mask && that.options.mask.length > 0) {
                    that.element.attr("aria-placeholder", that.options.mask);
                }

                var disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

                if (disabled) {
                    that.enable(false);
                } else {
                    that.readonly(element.is("[readonly]"));
                }

                that._validationIcon = $(kendo.ui.icon({ icon: "exclamation-circle", iconClass: "k-input-validation-icon k-hidden" })).insertAfter(element);

                that.value(that.options.value || element.val());

                that._label();
                that._applyCssClasses();
                kendo.notify(that);
            },

            options: {
                name: "MaskedTextBox",
                clearPromptChar: false,
                unmaskOnPost: false,
                promptChar: "_",
                culture: "",
                rules: {},
                value: "",
                mask: "",
                label: null,
                size: "medium",
                fillMode: "solid",
                rounded: "medium"
            },

            events: [
                CHANGE
            ],

            rules: {
                "0": /\d/,
                "9": /\d|\s/,
                "#": /\d|\s|\+|\-/,
                "L": /[a-zA-Z]/,
                "?": /[a-zA-Z]|\s/,
                "&": /\S/,
                "C": /./,
                "A": /[a-zA-Z0-9]/,
                "a": /[a-zA-Z0-9]|\s/
            },

            setOptions: function(options) {
                var that = this;

                Widget.fn.setOptions.call(that, options);

                that._rules = $.extend({}, that.rules, that.options.rules);

                that._tokenize();

                this._unbindInput();
                this._bindInput();

                that.value(that.element.val());
            },

            destroy: function() {
                var that = this;

                if (that.floatingLabel) {
                    that.floatingLabel.destroy();
                }

                that.element.off(NS);

                if (that._formElement) {
                    that._formElement.off("reset", that._resetHandler);
                    that._formElement.off("submit", that._submitHandler);
                }

                Widget.fn.destroy.call(that);
            },

            raw: function() {
                var unmasked = this._unmask(this.element.val(), 0);
                return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), "g"), "");
            },

            value: function(value) {
                var element = this.element;
                var emptyMask = this._emptyMask;

                if (value === undefined$1) {
                    return this.element.val();
                }

                if (value === null) {
                    value = "";
                }

                if (!emptyMask) {
                    this._oldValue = value;
                    element.val(value);
                    return;
                }

                value = this._unmask(value + "");

                element.val(value ? emptyMask : "");

                this._mask(0, this._maskLength, value);
                this._unmaskedValue = null;

                value = element.val();
                this._oldValue = value;

                if (kendo._activeElement() !== element) {
                    if (value === emptyMask) {
                        element.val("");
                    } else {
                        this._togglePrompt();
                    }
                }

                if (this.floatingLabel) {
                    this.floatingLabel.refresh();
                }
            },

            _togglePrompt: function(show) {
                var DOMElement = this.element[0];
                var value = DOMElement.value;

                if (this.options.clearPromptChar) {
                    if (!show) {
                        value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), "g"), " ");
                    } else {
                        value = this._oldValue;
                    }

                    DOMElement.value = this._old = value;
                }
            },

            readonly: function(readonly) {
                var that = this;

                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (that.floatingLabel) {
                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                var that = this;

                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (that.floatingLabel) {
                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            _bindInput: function() {
                var that = this;

                if (that._maskLength) {
                    that.element
                        .on(ns(KEYDOWN), that._keydown.bind(that))
                        .on(ns(DROP), that._drop.bind(that))
                        .on(ns(CHANGE), that._trackChange.bind(that))
                        .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));


                    if (kendo.support.browser.msie) {
                        var version = kendo.support.browser.version;
                        if (version > 8 && version < 11) {
                            var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(" ");
                            that.element.on(events, that._legacyIEInputHandler.bind(that));
                        }
                    }
                }
            },

            _unbindInput: function() {
                var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(" ");

                this.element.off(events);
            },

            _editable: function(options) {
                var that = this;
                var element = that.element;
                var wrapper = that.wrapper;
                var disable = options.disable;
                var readonly = options.readonly;

                that._unbindInput();

                if (!readonly && !disable) {
                    element.prop(DISABLED, false)
                           .prop(READONLY, false);

                    wrapper.removeClass(STATEDISABLED);

                    that._bindInput();
                } else {
                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly);

                    wrapper.toggleClass(STATEDISABLED, disable);
                }
            },

            _change: function() {
                var that = this;
                var value = that.value();

                if (value !== that._oldValue) {
                    that._oldValue = value;

                    that.trigger(CHANGE);
                    that.element.trigger(CHANGE);
                }
                else if (value === "" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update
                    that.element.trigger(CHANGE);
                }
            },

            inputChange: function(backward) {
                var that = this;
                var old = that._old;
                var element = that.element[0];
                var value = element.value;
                var selection = caret(element);
                var cursor = selection[1];
                var lengthDiff = value.length - old.length;
                var mobile = kendo.support.mobileOS;

                if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase
                    return;
                }

                if (lengthDiff === -1 && mobile.android && mobile.browser === "chrome") {
                    backward = true;
                }

                var contentStart = min(cursor, stringDiffStart(value, old));
                var content = value.substring(contentStart, cursor);

                element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);

                var caretPos = that._mask(contentStart, cursor, content);
                var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));

                var unmasked = that._unmask(endContent, old.length - endContent.length);
                that._mask(caretPos, caretPos, unmasked);

                if (backward) {
                    caretPos = that._findCaretPosBackwards(contentStart);
                }

                caret(element, caretPos);

                //clean-up flags
                that.__dropping = false;
            },

            _trimStartPromptChars: function(content, count) {
                var promptChar = this.options.promptChar;

                while (count-- > 0 && content.indexOf(promptChar) === 0) {
                    content = content.substring(1);
                }

                return content;
            },

            _findCaretPosBackwards: function(pos) {
                var caretStart = this._find(pos, true);
                if (caretStart < pos) {
                    caretStart += 1;
                }

                return caretStart;
            },

            _inputHandler: function() {
                if (kendo._activeElement() !== this.element[0]) {
                    return;
                }

                this.inputChange(this.__backward);
            },

            _legacyIEInputHandler: function(e) {
                var that = this;
                var input = that.element[0];
                var value = input.value;
                var type = e.type;

                that.__pasting = (type === "paste");

                setTimeout(function() {
                    if (type === "mouseup" && that.__pasting) {
                        return;
                    }
                    if (input.value && input.value !== value) {
                        that.inputChange(that.__backward);
                    }
                });
            },

            _trackChange: function() {
                var that = this;

                that.__changing = true;
                setTimeout(function() { that.__changing = false; });
            },

            _form: function() {
                var that = this;
                var element = that.element;
                var formId = element.attr("form");
                var form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._resetHandler = function() {
                        setTimeout(function() {
                            that.value(element[0].value);
                        });
                    };

                    that._submitHandler = function() {
                        that.element[0].value = that._old = that.raw();
                    };

                    if (that.options.unmaskOnPost) {
                        form.on("submit", that._submitHandler);
                    }

                    that._formElement = form.on("reset", that._resetHandler);
                }
            },

            _keydown: function(e) {
                var key = e.keyCode;

                this.__backward = key === keys.BACKSPACE;

                if (key === keys.ENTER) {
                    this._change();
                }
            },

            _drop: function() {
                this.__dropping = true;
            },

            _find: function(idx, backward) {
                var value = this.element.val() || this._emptyMask;
                var step = 1;

                if (backward === true) {
                    step = -1;
                }

                while (idx > -1 || idx <= this._maskLength) {
                    if (value.charAt(idx) !== this.tokens[idx]) {
                        return idx;
                    }

                    idx += step;
                }

                return -1;
            },

            _mask: function(start, end, value, backward) {
                var element = this.element[0];
                var current = element.value || this._emptyMask;
                var empty = this.options.promptChar;
                var valueLength;
                var chrIdx = 0;
                var unmasked;
                var chr;
                var idx;

                start = this._find(start, backward);

                if (start > end) {
                    end = start;
                }

                unmasked = this._unmask(current.substring(end), end);
                value = this._unmask(value, start);
                valueLength = value.length;

                if (value) {
                    unmasked = unmasked.replace(new RegExp("^_{0," + valueLength + "}"), "");
                }

                value += unmasked;
                current = current.split("");
                chr = value.charAt(chrIdx);

                while (start < this._maskLength) {
                    current[start] = chr || empty;
                    chr = value.charAt(++chrIdx);

                    if (idx === undefined$1 && chrIdx > valueLength) {
                        idx = start;
                    }

                    start = this._find(start + 1);
                }

                element.value = this._old = current.join("");

                if (kendo._activeElement() === element) {
                    if (idx === undefined$1) {
                        idx = this._maskLength;
                    }

                    caret(element, idx);
                }

                return idx;
            },

            _unmask: function(value, idx) {
                if (!value) {
                    return "";
                }

                if (this._unmaskedValue === value) {
                    return this._unmaskedValue;
                }
                value = (value + "").split("");

                var chr;
                var token;
                var chrIdx = 0;
                var tokenIdx = idx || 0;

                var empty = this.options.promptChar;

                var valueLength = value.length;
                var tokensLength = this.tokens.length;

                var result = "";

                while (tokenIdx < tokensLength) {
                    chr = value[chrIdx];
                    token = this.tokens[tokenIdx];

                    if (chr === token || chr === empty) {
                        result += chr === empty ? empty : "";

                        chrIdx += 1;
                        tokenIdx += 1;
                    } else if (typeof token !== "string") {
                        if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {
                            result += chr;
                            tokenIdx += 1;
                        } else {
                            if (valueLength === 1) {
                                this._blinkInvalidState();
                            }
                        }

                        chrIdx += 1;
                    } else {
                        tokenIdx += 1;
                    }

                    if (chrIdx >= valueLength) {
                        break;
                    }
                }
                this._unmaskedValue = result;
                return result;
            },

            _label: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var id = element.attr("id");
                var floating;
                var labelText;

                if (options.label !== null) {
                    floating = isPlainObject(options.label) ? options.label.floating : false;
                    labelText = isPlainObject(options.label) ? options.label.content : options.label;

                    if (floating) {
                        that._floatingLabelContainer = that.wrapper.wrap("<span></span>").parent();
                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });
                    }

                    if (kendo.isFunction(labelText)) {
                        labelText = labelText.call(that);
                    }

                    if (!labelText) {
                        labelText = "";
                    }

                    if (!id) {
                        id = options.name + "_" + kendo.guid();
                        element.attr("id", id);
                    }

                    that._inputLabel = $("<label class='" + LABELCLASSES + "' for='" + id + "'>" + labelText + "</label>'").insertBefore(that.wrapper);
                }
            },

            _wrapper: function() {
                var that = this;
                var element = that.element;
                var DOMElement = element[0];

                var wrapper = element.wrap("<span class='k-input k-maskedtextbox'></span>").parent();
                wrapper[0].style.cssText = DOMElement.style.cssText;
                DOMElement.style.width = "100%";
                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');
            },

            _blinkInvalidState: function() {
                var that = this;

                that._addInvalidState();
                clearTimeout(that._invalidStateTimeout);
                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);
            },

            _addInvalidState: function() {
                var that = this;

                that.wrapper.addClass(STATEINVALID);
                that._validationIcon.removeClass("k-hidden");
            },

            _removeInvalidState: function() {
                var that = this;

                that.wrapper.removeClass(STATEINVALID);
                that._validationIcon.addClass("k-hidden");
                that._invalidStateTimeout = null;
            },

            _tokenize: function() {
                var tokens = [];
                var tokenIdx = 0;

                var mask = this.options.mask || "";
                var maskChars = mask.split("");
                var length = maskChars.length;
                var idx = 0;
                var chr;
                var rule;

                var emptyMask = "";
                var promptChar = this.options.promptChar;
                var numberFormat = kendo.getCulture(this.options.culture).numberFormat;
                var rules = this._rules;

                for (; idx < length; idx++) {
                    chr = maskChars[idx];
                    rule = rules[chr];

                    if (rule) {
                        tokens[tokenIdx] = rule;
                        emptyMask += promptChar;
                        tokenIdx += 1;
                    } else {
                        if (chr === "." || chr === ",") {
                            chr = numberFormat[chr];
                        } else if (chr === "$") {
                            chr = numberFormat.currency.symbol;
                        } else if (chr === "\\") {
                            idx += 1;
                            chr = maskChars[idx];
                        }

                        chr = chr.split("");

                        for (var i = 0, l = chr.length; i < l; i++) {
                            tokens[tokenIdx] = chr[i];
                            emptyMask += chr[i];
                            tokenIdx += 1;
                        }
                    }
                }

                this.tokens = tokens;

                this._emptyMask = emptyMask;
                this._maskLength = emptyMask.length;
            }
        });

        function escapeRegExp(text) {
            return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
        }

        kendo.cssProperties.registerPrefix("MaskedTextBox", "k-input-");

        kendo.cssProperties.registerValues("MaskedTextBox", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(MaskedTextBox);

    })(window.kendo.jQuery);
    var kendo$9 = kendo;

    var __meta__$8 = {
        id: "panelbar",
        name: "PanelBar",
        category: "web",
        description: "The PanelBar widget displays hierarchical data as a multi-level expandable panel bar.",
        depends: ["core", "data", "data.odata", "icons"]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            keys = kendo.keys,
            extend = $.extend,
            encode = kendo.htmlEncode,
            each = $.each,
            isArray = Array.isArray,
            template = kendo.template,
            Widget = ui.Widget,
            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
            excludedNodesRegExp = /^(ul|a|div)$/i,
            NS = ".kendoPanelBar",
            IMG = "img",
            HREF = "href",
            LAST = "k-last",
            LINK = "k-link",
            LINKSELECTOR = "." + LINK,
            ERROR = "error",
            ITEM = ".k-panelbar-item",
            GROUP = ".k-group",
            VISIBLEGROUP = GROUP + ":visible",
            IMAGE = "k-image",
            FIRST = "k-first",
            CHANGE = "change",
            EXPAND = "expand",
            SELECT = "select",
            CLICK = "click",
            CONTENT = "k-content",
            ACTIVATE = "activate",
            COLLAPSE = "collapse",
            DATABOUND = "dataBound",
            MOUSEENTER = "mouseenter",
            MOUSELEAVE = "mouseleave",
            CONTENTLOAD = "contentLoad",
            UNDEFINED = "undefined",
            ACTIVECLASS = "k-active",
            EXPANDEDCLASS = "k-expanded",
            GROUPS = "> .k-panel",
            CONTENTS = "> .k-content",
            STRING = "string",
            FOCUSEDCLASS = "k-focus",
            DISABLEDCLASS = "k-disabled",
            SELECTEDCLASS = "k-selected",
            SELECTEDSELECTOR = "." + SELECTEDCLASS,
            HIGHLIGHTCLASS = "k-highlight",
            ACTIVEITEMSELECTOR = ITEM + ":not(.k-disabled)",
            clickableItems = "> " + ACTIVEITEMSELECTOR + " > " + LINKSELECTOR + ", .k-panel > " + ACTIVEITEMSELECTOR + " > " + LINKSELECTOR,
            disabledItems = ITEM + ".k-disabled > .k-link",
            selectableItems = "> li > " + SELECTEDSELECTOR + ", .k-panel > li > " + SELECTEDSELECTOR,
            ARIA_DISABLED = "aria-disabled",
            ARIA_EXPANDED = "aria-expanded",
            ARIA_HIDDEN = "aria-hidden",
            ARIA_SELECTED = "aria-selected",
            VISIBLE = ":visible",
            EMPTY = ":empty",
            SINGLE = "single",
            bindings = {
                text: "dataTextField",
                url: "dataUrlField",
                spriteCssClass: "dataSpriteCssClassField",
                imageUrl: "dataImageUrlField"
            },
            itemIcon,
            rendering = {
            aria: function(item) {
                var attr = "";

                if (item.items || item.content || item.contentUrl || item.expanded) {
                    attr += ARIA_EXPANDED + "='" + (item.expanded ? "true" : "false") + "' ";
                }

                if (item.enabled === false) {
                    attr += ARIA_DISABLED + "='true'";
                }

                return attr;
            },

        wrapperCssClass: function(group, item) {
            var result = "k-panelbar-item",
                index = item.index;

            if (group.firstLevel) {
                result += " k-panelbar-header";
            }

            if (item.enabled === false) {
                result += " " + DISABLEDCLASS;
            } else if (item.expanded === true) {
                result += " " + ACTIVECLASS;
                result += " " + EXPANDEDCLASS;
            }

            if (index === 0) {
                result += " k-first";
            }

            if (index == group.length - 1) {
                result += " k-last";
            }

            if (item.cssClass) {
                result += " " + item.cssClass;
            }

            if (item.level) {
                result += " k-level-" + item.level();
            }

            return result;
        },

        textClass: function(item) {
            var result = LINK;

            if (item.selected) {
                result += " " + SELECTEDCLASS;
            }

            return result;
        },
        textAttributes: function(url) {
            return url ? " href='" + url + "'" : "";
        },
        arrowIconOptions: function(item) {
            return {
                icon: item.expanded ? "chevron-up" : "chevron-down",
                iconClass: ("k-panelbar-toggle k-panelbar-" + (item.expanded ? "collapse" : "expand"))
            };
        },
        text: function(item) {
             return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
        },
        groupAttributes: function(group) {
            return group.expanded !== true ? (" " + (kendo.attr("style-display")) + "=\"none\"") : "";
        },
        ariaHidden: function(group) {
            return group.expanded !== true;
        },
        groupCssClass: function() {
            return "k-panelbar-group k-group k-panel";
        },
        contentAttributes: function(content) {
            return content.item.expanded !== true ? (" " + (kendo.attr("style-display")) + "=\"none\"") : "";
        },
        content: function(item) {
            return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
        },
        contentUrl: function(item) {
            return item.contentUrl ? 'href="' + item.contentUrl + '"' : "";
        }
    };

        function updateFirstLast(items) {
            items = $(items);

            items.filter(".k-first:not(:first-child)").removeClass(FIRST);
            items.filter(".k-last:not(:last-child)").removeClass(LAST);
            items.filter(":first-child").addClass(FIRST);
            items.filter(":last-child").addClass(LAST);
        }

        function updateLevel(item) {
            item = $(item);

            item.addClass("k-level-" + item.parentsUntil(".k-panelbar", "ul").length);
        }

         function updateItemHtml(item) {
            var wrapper = item,
                group = item.children("ul"),
                toggleButton = wrapper.children(".k-link").children(".k-panelbar-toggle");

            if (item.hasClass("k-panelbar")) {
                return;
            }

            if (!toggleButton.length && group.length) {
                toggleButton = $("<span class='k-panelbar-toggle' />").appendTo(wrapper);
            } else if (!group.length || !group.children().length) {
                toggleButton.remove();
                group.remove();
            }
         }

        itemIcon = function(item) {
            return item.children("span").children(".k-panelbar-toggle");
        };

        var PanelBar = kendo.ui.DataBoundWidget.extend({
            init: function(element, options) {
                var that = this,
                    content,
                    hasDataSource;

               if (isArray(options)) {
                    options = { dataSource: options };
               }

                hasDataSource = options && !!options.dataSource;

                Widget.fn.init.call(that, element, options);

                element = that.wrapper = that.element.addClass("k-panelbar k-pos-relative");
                options = that.options;

                if (element[0].id) {
                    that._itemId = element[0].id + "_pb_active";
                }

                that._tabindex();

                that._accessors();

                that._dataSource();

                that._templates();

                that._initData(hasDataSource);

                that._updateClasses();

                that._animations(options);

                element
                    .on(CLICK + NS, clickableItems, that._click.bind(that))
                    .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS, clickableItems, that._toggleHover)
                    .on(CLICK + NS, disabledItems, false)
                    .on(CLICK + NS, ".k-request-retry", that._retryRequest.bind(that))
                    .on("keydown" + NS, that._keydown.bind(that))
                    .on("focus" + NS, function() {
                        var item = that.select();
                        that._current(item[0] ? item : that._first());
                    })
                    .on("blur" + NS, function() {
                        that._current(null);
                    })
                    .attr("role", "tree");

                content = element.find("li." + ACTIVECLASS + " > ." + CONTENT);

                if (content[0]) {
                    that.expand(content.parent(), false);
                }

                kendo.notify(that);

                if (that._showWatermarkOverlay) {
                    that._showWatermarkOverlay(that.wrapper[0]);
                }
            },

            events: [
                EXPAND,
                COLLAPSE,
                SELECT,
                ACTIVATE,
                CHANGE,
                ERROR,
                DATABOUND,
                CONTENTLOAD
            ],
            options: {
                name: "PanelBar",
                dataSource: {},
                animation: {
                    expand: {
                        effects: "expand:vertical",
                        duration: 200
                    },
                    collapse: { // if collapse animation effects are defined, they will be used instead of expand.reverse
                        duration: 200
                    }
                },
                messages: {
                    loading: "Loading...",
                    requestFailed: "Request failed.",
                    retry: "Retry"
                },
                autoBind: true,
                loadOnDemand: true,
                expandMode: "multiple",
                template: null,
                dataTextField: null
            },

            destroy: function() {
                Widget.fn.destroy.call(this);

                this.element.off(NS);

                kendo.destroy(this.element);
            },

            _initData: function(hasDataSource) {
                var that = this;

                if (hasDataSource) {
                    that.element.empty();
                     if (that.options.autoBind) {
                        that._progress(true);

                        that.dataSource.fetch();
                     }
                }
            },

            _templates: function() {
                var that = this,
                    options = that.options,
                    fieldAccessor = that._fieldAccessor.bind(that);

                  if (options.template && typeof options.template == STRING) {
                        options.template = template(options.template);
                  } else if (!options.template) {
                      options.template = template(function (data) {
                          var text = fieldAccessor("text")(data.item);
                          if (typeof data.item.encoded != 'undefined' && data.item.encoded === false) {
                              return ("<span class='k-panelbar-item-text'>" + text + "</span>");
                          } else {
                              return ("<span class='k-panelbar-item-text'>" + (encode(text)) + "</span>");
                          }
                      });
                    }

                that.templates = {
                    content: template(
                       function (ref) {
                           var data = ref.data;
                           var item = ref.item;
                           var contentAttributes = ref.contentAttributes;
                           var content = ref.content;

                           return ("<div class='k-panelbar-content k-content'" + (contentAttributes({ data: data, item: item, contentAttributes: contentAttributes, content: content })) + ">" + (content(item)) + "</div>");
                }
                    ),
                    group: template( function (ref) {
                            var data = ref.data;
                            var items = ref.items;
                            var group = ref.group;
                            var renderItems = ref.renderItems;
                            var panelBar = ref.panelBar;
                            var ariaHidden = ref.ariaHidden;
                            var groupCssClass = ref.groupCssClass;
                            var groupAttributes = ref.groupAttributes;

                            return "<ul role='group' aria-hidden='" + (ariaHidden(group)) + "' class='" + (groupCssClass(group)) + "' " + (groupAttributes(group)) + ">" +
                            renderItems({ data: data, items: items, group: group, renderItems: renderItems, panelBar: panelBar, ariaHidden: ariaHidden, groupCssClass: groupCssClass, groupAttributes: groupAttributes }) +
                        "</ul>";
                }
                    ),
                    itemWrapper: template(function (ref) {
                         var panelBar = ref.panelBar;
                         var item = ref.item;
                         var arrow = ref.arrow;
                         var textClass = ref.textClass;
                         var arrowIconOptions = ref.arrowIconOptions;
                         var textAttributes = ref.textAttributes;
                         var contentUrl = ref.contentUrl;

                         var url = fieldAccessor("url")(item);
                         var imageUrl = fieldAccessor("imageUrl")(item);
                         var spriteCssClass = fieldAccessor("spriteCssClass")(item);
                         var contentUrl = contentUrl(item);
                         var tag = url || contentUrl ? 'a' : 'span';

                        return "<" + tag + " class='" + (textClass(item)) + "' " + contentUrl + (textAttributes(url)) + ">" +
                            (imageUrl ? ("<img class='k-panelbar-item-icon k-image' alt='' src='" + imageUrl + "' />") : '') +
                            (spriteCssClass ? ("<span class='k-sprite " + spriteCssClass + "'></span>") : '') +
                            panelBar.options.template({ panelBar: panelBar, item: item, arrow: arrow, textClass: textClass, textAttributes: textAttributes, contentUrl: contentUrl }) +
                            arrow({ panelBar: panelBar, item: item, arrow: arrow, textClass: textClass, arrowIconOptions: arrowIconOptions, textAttributes: textAttributes, contentUrl: contentUrl }) +
                        "</" + tag + ">";
                    }),

                    item: template(function (ref) {
                            var data = ref.data;
                            var group = ref.group;
                            var item = ref.item;
                            var panelBar = ref.panelBar;
                            var itemWrapper = ref.itemWrapper;
                            var renderContent = ref.renderContent;
                            var arrow = ref.arrow;
                            var arrowIconOptions = ref.arrowIconOptions;
                            var subGroup = ref.subGroup;
                            var aria = ref.aria;
                            var wrapperCssClass = ref.wrapperCssClass;
                            var contentUrl = ref.contentUrl;
                            var textClass = ref.textClass;
                            var textAttributes = ref.textAttributes;

                            return "<li aria-selected='false' role='treeitem' " + (aria(item)) + "class='" + (wrapperCssClass(group, item)) + "' " +
                        kendo.attr("uid") + "='" + (item.uid) + "'>" +
                            itemWrapper({ data: data, group: group, item: item, panelBar: panelBar, itemWrapper: itemWrapper, renderContent: renderContent, arrow: arrow, arrowIconOptions: arrowIconOptions, subGroup: subGroup, aria: aria, wrapperCssClass: wrapperCssClass, contentUrl: contentUrl, textClass: textClass, textAttributes: textAttributes }) +
                            ((item.items && item.items.length > 0) ?
                            subGroup({ items: item.items, panelBar: panelBar, group: { expanded: item.expanded } })
                            : ((item.content || item.contentUrl) ?
                            renderContent({ data: data, group: group, item: item, panelBar: panelBar, itemWrapper: itemWrapper, renderContent: renderContent, arrow: arrow, arrowIconOptions: arrowIconOptions, subGroup: subGroup, aria: aria, wrapperCssClass: wrapperCssClass, contentUrl: contentUrl, textClass: textClass, textAttributes: textAttributes })
                            : "")
                            ) +
                        "</li>";
                }
                    ),
                    loading: template(function (ref) {
                        var messages = ref.messages;

                        return ("<li class='k-panelbar-item'><span class='k-icon k-i-loading'></span> " + (encode(messages.loading)) + "</li>");
                }),
                    retry: template(function (ref) {
                            var messages = ref.messages;

                            return "<li class='k-panelbar-item'>" +
                            (encode(messages.requestFailed)) + " " +
                            "<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-request-retry'><span class='k-button-text'>" + (encode(messages.retry)) + "</span></button>" +
                        "</li>";
                }
                    ),
                    arrow: template(function (ref) {
                        var item = ref.item;
                        var arrowIconOptions = ref.arrowIconOptions;

                        return kendo.ui.icon(arrowIconOptions(item));
                }),
                    empty: template(function () { return ""; })
                };
            },

            setOptions: function(options) {
                var animation = this.options.animation;

                this._animations(options);

                options.animation = extend(true, animation, options.animation);

                if ("dataSource" in options) {
                    this.setDataSource(options.dataSource);
                }

                Widget.fn.setOptions.call(this, options);
            },

            expand: function(element, useAnimation) {
                var that = this,
                    animBackup = {};

                element = this.element.find(element);

                if (that._animating && element.find("ul").is(":visible")) {
                    that.one("complete", function() {
                        setTimeout(function() {
                            that.expand(element);
                        });
                    });
                    return;
                }
                that._animating = true;

                useAnimation = useAnimation !== false;

                element.each(function(index, item) {
                    item = $(item);
                    var wrapper = element.children(".k-group,.k-content");

                    if (!wrapper.length) {
                        wrapper = that._addGroupElement(element);
                    }

                     var groups = wrapper.add(item.find(CONTENTS));

                    if (!item.hasClass(DISABLEDCLASS) && groups.length > 0) {

                        if (that.options.expandMode == SINGLE && that._collapseAllExpanded(item)) {
                            return that;
                        }

                        element.find("." + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);
                        item.addClass(HIGHLIGHTCLASS);

                        if (!useAnimation) {
                            animBackup = that.options.animation;
                            that.options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
                        }

                        if (!that._triggerEvent(EXPAND, item)) {
                            that._toggleItem(item, false, false);
                        }

                        if (!useAnimation) {
                            that.options.animation = animBackup;
                        }
                    }
                });

                return that;
            },

            collapse: function(element, useAnimation) {
                var that = this,
                    animBackup = {};

                that._animating = true;

                useAnimation = useAnimation !== false;
                element = that.element.find(element);

                element.each(function(index, item) {
                    item = $(item);
                    var groups = item.find(GROUPS).add(item.find(CONTENTS));

                    if (!item.hasClass(DISABLEDCLASS) && groups.is(VISIBLE)) {
                        item.removeClass(HIGHLIGHTCLASS);

                        if (!useAnimation) {
                            animBackup = that.options.animation;
                            that.options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
                        }

                        if (!that._triggerEvent(COLLAPSE, item)) {
                            that._toggleItem(item, true);
                        }

                        if (!useAnimation) {
                            that.options.animation = animBackup;
                        }
                    }

                });
                return that;
            },

             updateArrow: function(items) {
                    var that = this;

                    items = $(items);
                    items.children(LINKSELECTOR).children(".k-panelbar-collapse, .k-panelbar-expand").remove();

                    items
                        .filter(function() {
                            var dataItem = that.dataItem(this);

                            if (!dataItem) {
                                return $(this).find(".k-panel").length > 0 ||
                                    $(this).find(".k-content").length > 0;
                            }

                            return dataItem.hasChildren || dataItem.content || dataItem.contentUrl;
                        })
                        .children(".k-link:not(:has([class*=-i-chevron]))")
                        .each(function() {
                            var item = $(this),
                                parent = item.parent();
                            var icon = kendo.ui.icon({
                                icon: parent.hasClass(ACTIVECLASS) ? "chevron-up" : "chevron-down",
                                iconClass: ("k-panelbar-toggle k-panelbar-" + (parent.hasClass(ACTIVECLASS) ? "collapse" : "expand"))
                            });

                            item.append(icon);
                        });
             },

            _accessors: function() {
                var that = this,
                    options = that.options,
                    i, field, textField,
                    element = that.element;

                for (i in bindings) {
                    field = options[bindings[i]];
                    textField = element.attr(kendo.attr(i + "-field"));

                    if (!field && textField) {
                        field = textField;
                    }

                    if (!field) {
                        field = i;
                    }

                    if (!isArray(field)) {
                        field = [field];
                    }

                    options[bindings[i]] = field;
                }
            },

            _progress: function(item, showProgress) {
                var element = this.element;
                var loadingText = this.templates.loading({ messages: this.options.messages });

                if (arguments.length == 1) {
                    showProgress = item;

                    if (showProgress) {
                        element.html(loadingText);
                    } else {
                        element.empty();
                    }
                }
                else {
                    itemIcon(item)
                        .empty()
                        .removeClass("k-i-arrow-rotate-cw k-svg-i-arrow-rotate-cw")
                        .toggleClass("k-i-loading", showProgress);
                }
            },

            _refreshRoot: function(items) {
                var that = this;
                var parent = that.element;
                var groupData = {
                    firstLevel: true,
                    expanded: true,
                    length: parent.children().length
                };

                this.element.empty();

                var rootItemsHtml = $.map(items, function(value, idx) {
                        if (typeof value === "string") {
                            return $(value);
                        } else {
                            value.items = [];
                            var itemElement = $(that.renderItem({
                                group: groupData,
                                item: extend(value, { index: idx })
                            }));

                            kendo.applyStylesFromKendoAttributes(itemElement, ["display"]);
                            return itemElement;
                        }
                });

                this.element.append(rootItemsHtml);
                var elements = this.element.children(".k-panelbar-item");
                for (var i = 0; i < items.length; i++) {
                    this.trigger("itemChange", {
                        item: elements.eq(i).find(".k-link").first(),
                        data: items[i],
                        ns: ui
                    });
                }
            },

            _refreshChildren: function(item, parentNode) {
                var i, children, child;

                parentNode.children(".k-group").empty();
                var items = item.children.data();
                if (!items.length) {
                    updateItemHtml(parentNode);
                    children = parentNode.children(".k-group").children("li");
                } else {
                    this.append(item.children, parentNode);

                    if (this.options.loadOnDemand) {
                        this._toggleGroup(parentNode.children(".k-group"), false);
                    }
                    children = parentNode.children(".k-group").children("li");

                    for (i = 0; i < children.length; i++) {
                        child = children.eq(i);
                        this.trigger("itemChange", {
                            item: child.find(".k-link").first(),
                            data: this.dataItem(child),
                            ns: ui
                        });
                    }
                }
            },

            findByUid: function(uid) {
                var items = this.element.find(".k-panelbar-item");
                var uidAttr = kendo.attr("uid");
                var result;

                for (var i = 0; i < items.length; i++) {
                    if (items[i].getAttribute(uidAttr) == uid) {
                        result = items[i];
                        break;
                    }
                }

                return $(result);
            },

            refresh: function(e) {
                var options = this.options;
                var node = e.node;
                var action = e.action;
                var items = e.items;
                var parentNode = this.wrapper;
                var loadOnDemand = options.loadOnDemand;

                if (e.field) {
                    if (!items[0] || !items[0].level) {
                        return;
                    }

                    return this._updateItems(items, e.field);
                }

                if (node) {
                    parentNode = this.findByUid(node.uid);
                    this._progress(parentNode, false);
                }
                if (action == "add") {
                    this._appendItems(e.index, items, parentNode);
                } else if (action == "remove") {
                    this.remove(this.findByUid(items[0].uid));
                } else if (action == "itemchange") {
                    this._updateItems(items);
                } else if (action == "itemloaded") {
                    this._refreshChildren(node, parentNode);
                } else {
                    this._refreshRoot(items);
                }

                if (action != "remove") {
                    for (var k = 0; k < items.length; k++) {

                        if (!loadOnDemand || items[k].expanded) {
                            var tempItem = items[k];
                            if (this._hasChildItems(tempItem)) {
                                    tempItem.load();
                            }
                        }
                    }
                }

                this.trigger(DATABOUND, { node: node ? parentNode : undefined$1 });
            },

            _error: function(e) {
                var node = e.node && this.findByUid(e.node.uid);
                var retryHtml = this.templates.retry({ messages: this.options.messages });

                if (node) {
                    this._progress(node, false);
                    this._expanded(node, false);
                    kendo.ui.icon(itemIcon(node), { icon: "arrow-rotate-cw" });
                    e.node.loaded(false);
                } else {
                    this._progress(false);
                    this.element.html(retryHtml);
                }
            },

            _retryRequest: function(e) {
                e.preventDefault();

                this.dataSource.fetch();
            },

             items: function() {
                return this.element.find(".k-panelbar-item > span:first-child");
            },

            setDataSource: function(dataSource) {
                var options = this.options;

                options.dataSource = dataSource;

                this._dataSource();

                if (this.options.autoBind) {
                    this._progress(true);
                    this.dataSource.fetch();
                }
            },

            _bindDataSource: function() {
                this._refreshHandler = this.refresh.bind(this);
                this._errorHandler = this._error.bind(this);

                this.dataSource.bind(CHANGE, this._refreshHandler);
                this.dataSource.bind(ERROR, this._errorHandler);
            },

            _unbindDataSource: function() {
                var dataSource = this.dataSource;

                if (dataSource) {
                    dataSource.unbind(CHANGE, this._refreshHandler);
                    dataSource.unbind(ERROR, this._errorHandler);
                }
            },

            // generates accessor function for a given field name, honoring the data*Field arrays
            _fieldAccessor: function(fieldName) {
                var fieldBindings = this.options[bindings[fieldName]] || [],
                    count = fieldBindings.length;

                if (count === 0) {
                    return (function(item) { return item[fieldName]; });
                } else {
                    return (function(item) {
                        var levels = $.map(fieldBindings, kendo.getter);
                        if (item.level) {
                            return levels[Math.min(item.level(), count - 1)](item);
                        } else {
                            return levels[count - 1](item);
                        }
                    });
                }
            },

            _dataSource: function() {
                var that = this,
                    options = that.options,
                    dataSource = options.dataSource;

                if (!dataSource) {
                    return;
                }

                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

                that._unbindDataSource();

                if (!dataSource.fields) {
                    dataSource.fields = [
                        { field: "text" },
                        { field: "url" },
                        { field: "spriteCssClass" },
                        { field: "imageUrl" }
                    ];
                }

                that.dataSource = HierarchicalDataSource.create(dataSource);

                that._bindDataSource();
            },

            _appendItems: function(index, items, parentNode) {
                var that = this, children, wrapper;

                  if (parentNode.hasClass("k-panelbar")) {
                      children = parentNode.children("li");
                      wrapper = parentNode;
                  } else {
                      wrapper = parentNode.children(".k-group");
                      if (!wrapper.length) {
                          wrapper = that._addGroupElement(parentNode);
                      }

                      children = wrapper.children("li");
                  }

                 var groupData = {
                    firstLevel: parentNode.hasClass("k-panelbar"),
                    expanded: true,
                    length: children.length
                 };

                 var itemsHtml = $.map(items, function(value, idx) {
                        if (typeof value === "string") {
                            return $(value);
                        } else {
                            var itemElement = $(that.renderItem({
                                group: groupData,
                                item: extend(value, { index: idx })
                            }));

                            kendo.applyStylesFromKendoAttributes(itemElement, ["display"]);
                            return itemElement;
                        }
                });

                  if (typeof index == UNDEFINED) {
                       index = children.length;
                  }

                  for (var i = 0; i < itemsHtml.length; i++) {
                      if (children.length === 0 || index === 0) {
                          wrapper.append(itemsHtml[i]);
                      } else {
                           itemsHtml[i].insertAfter(children[index - 1]);
                      }
                   }

                  if (that.dataItem(parentNode)) {
                      that.dataItem(parentNode).hasChildren = true;
                      that.updateArrow(parentNode);
                  }
            },

            _updateItems: function(items, field) {
                var that = this;
                var i, node, nodeWrapper, item;
                var context = { panelBar: that.options, item: item, group: {} };
                var render = field != "expanded";

                if (field == "selected") {
                    if (items[0][field]) {
                        var currentNode = that.findByUid(items[0].uid);

                        if (!currentNode.hasClass(DISABLEDCLASS)) {
                            that.select(currentNode, true);
                        }
                    } else {
                        that.clearSelection();
                    }
                } else {
                    var elements = $.map(items, function(item) {
                        return that.findByUid(item.uid);
                    });

                    for (i = 0; i < items.length; i++) {
                        context.item = item = items[i];
                        context.panelBar = that;
                        nodeWrapper = elements[i];
                        node = nodeWrapper.parent();
                        if (render) {
                            context.group = {
                                firstLevel: node.hasClass("k-panelbar"),
                                expanded: nodeWrapper.parent().hasClass(ACTIVECLASS),
                                length: nodeWrapper.children().length
                            };

                            nodeWrapper.children(".k-link").remove();
                            nodeWrapper.prepend(that.templates.itemWrapper(extend(context,
                                {
                                    arrow: item.hasChildren || item.content || item.contentUrl ? that.templates.arrow : that.templates.empty
                                },
                                rendering)));
                        }

                        if (field == "expanded") {
                            that._toggleItem(nodeWrapper, !item[field], item[field] ? "true" : true);
                        } else if (field == "enabled") {
                            that.enable(nodeWrapper, item[field]);
                             if (!item[field]) {
                                if (item.selected) {
                                    item.set("selected", false);
                                }
                             }
                        }

                        if (nodeWrapper.length) {
                            this.trigger("itemChange", { item: nodeWrapper.find(".k-link").first(), data: item, ns: ui });
                        }
                    }
                }
            },

            _toggleDisabled: function(element, enable) {
                element = this.element.find(element);
                element
                    .toggleClass(DISABLEDCLASS, !enable)
                    .attr(ARIA_DISABLED, !enable);
            },

           dataItem: function(item) {
                var uid = $(item).closest(ITEM).attr(kendo.attr("uid")),
                    dataSource = this.dataSource;

                return dataSource && dataSource.getByUid(uid);
           },

           select: function(element, skipChange) {
               var that = this;

                if (element === undefined$1) {
                    return that.element.find(selectableItems).parent();
                }

                element = that.element.find(element);

                if (!element.length) {
                    this._updateSelected(element);
                } else {
                    element
                        .each(function() {
                            var item = $(this),
                                link = item.children(LINKSELECTOR);

                            if (item.hasClass(DISABLEDCLASS)) {
                                return that;
                            }

                            that._updateSelected(link, skipChange);
                        });
                }

                return that;
            },

            clearSelection: function() {
                this.select($());
            },

            enable: function(element, state) {
                this._toggleDisabled(element, state !== false);

                return this;
            },

            disable: function(element) {
                this._toggleDisabled(element, false);

                return this;
            },

            append: function(item, referenceItem) {
                referenceItem = this.element.find(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find(GROUPS) : null);

                each(inserted.items, function() {
                    inserted.group.append(this);
                    updateFirstLast(this);
                    updateLevel(this);
                });

                this.updateArrow(referenceItem);
                updateFirstLast(inserted.group.find(".k-first, .k-last"));
                inserted.group.height("auto");

                return this;
            },

            insertBefore: function(item, referenceItem) {
                referenceItem = this.element.find(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.parent());

                each(inserted.items, function() {
                    referenceItem.before(this);
                    updateFirstLast(this);
                    updateLevel(this);
                });

                updateFirstLast(referenceItem);
                inserted.group.height("auto");

                return this;
            },

            insertAfter: function(item, referenceItem) {
                referenceItem = this.element.find(referenceItem);

                var inserted = this._insert(item, referenceItem, referenceItem.parent());

                each(inserted.items, function() {
                    referenceItem.after(this);
                    updateFirstLast(this);
                    updateLevel(this);
                });

                updateFirstLast(referenceItem);
                inserted.group.height("auto");

                return this;
            },

            remove: function(element) {
                element = this.element.find(element);

                var that = this,
                    parent = element.parentsUntil(that.element, ITEM),
                    group = element.parent("ul");

                element.remove();

                if (group && !group.hasClass("k-panelbar") && !group.children(ITEM).length) {
                    group.remove();
                }

                if (parent.length) {
                    parent = parent.eq(0);

                    that.updateArrow(parent);
                    updateFirstLast(parent);
                }

                return that;
            },

            reload: function(element) {
                var that = this;
                element = that.element.find(element);

                element.each(function() {
                    var item = $(this);

                    that._ajaxRequest(item, item.children("." + CONTENT), !item.is(VISIBLE));
                });
            },

            _first: function() {
                return this.element.children(ACTIVEITEMSELECTOR).first();
            },

            _last: function() {
                var item = this.element.children(ACTIVEITEMSELECTOR).last(),
                    group = item.children(VISIBLEGROUP);

                if (group[0]) {
                    return group.children(ACTIVEITEMSELECTOR).last();
                }
                return item;
            },

            _current: function(candidate) {
                var that = this,
                    focused = that._focused,
                    id = that._itemId;

                if (candidate === undefined$1) {
                    return focused;
                }

                that.element.removeAttr("aria-activedescendant");

                if (focused && focused.length) {
                    if (focused[0].id === id) {
                        focused.removeAttr("id");
                    }

                    focused
                        .children(LINKSELECTOR)
                        .removeClass(FOCUSEDCLASS);
                }

                if ($(candidate).length) {
                    id = candidate[0].id || id;

                    candidate.attr("id", id)
                             .children(LINKSELECTOR)
                             .addClass(FOCUSEDCLASS);

                    that.element.attr("aria-activedescendant", id);
                }

                that._focused = candidate;
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    current = that._current();

                if (e.target != e.currentTarget) {
                    return;
                }

                if (key == keys.DOWN || key == keys.RIGHT) {
                    that._current(that._nextItem(current));
                    e.preventDefault();
                } else if (key == keys.UP || key == keys.LEFT) {
                    that._current(that._prevItem(current));
                    e.preventDefault();
                } else if (key == keys.ENTER || key == keys.SPACEBAR) {
                    that._click(e);
                    e.preventDefault();
                } else if (key == keys.HOME) {
                    that._current(that._first());
                    e.preventDefault();
                } else if (key == keys.END) {
                    that._current(that._last());
                    e.preventDefault();
                }
            },

            _nextItem: function(item) {
                if (!item) {
                    return this._first();
                }

                var group = item.children(VISIBLEGROUP),
                    next = item.nextAll(":visible").first();

                if (group[0]) {
                    next = group.children("." + FIRST);
                }

                if (!next[0]) {
                    next = item.parent(VISIBLEGROUP).parent(ITEM).next();
                }

                if (!next[0]) {
                    next = this._first();
                }

                return next;
            },

            _prevItem: function(item) {
                if (!item) {
                    return this._last();
                }

                var prev = item.prevAll(":visible").first(),
                    result;

                if (!prev[0]) {
                    prev = item.parent(VISIBLEGROUP).parent(ITEM);
                    if (!prev[0]) {
                        prev = this._last();
                    }
                } else {
                    result = prev;
                    while (result[0]) {
                        result = result.children(VISIBLEGROUP).children("." + LAST);
                        if (result[0]) {
                            prev = result;
                        }
                    }
                }

                return prev;
            },

            _insert: function(item, referenceItem, parent) {
                var that = this,
                    items,
                    plain = $.isPlainObject(item),
                    isReferenceItem = referenceItem && referenceItem[0],
                    groupData;

                if (!isReferenceItem) {
                    parent = that.element;
                }

                groupData = {
                    firstLevel: parent.hasClass("k-panelbar"),
                    expanded: $(referenceItem).hasClass(ACTIVECLASS),
                    length: parent.children().length
                };

                if (isReferenceItem && !parent.length) {
                    parent = $(that.renderGroup({ group: groupData, options: that.options }));
                    kendo.applyStylesFromKendoAttributes(parent, ["display"]);
                    parent.appendTo(referenceItem);
                }

                if (plain || Array.isArray(item) || item instanceof HierarchicalDataSource) { // is JSON or HierarchicalDataSource
                    if (item instanceof HierarchicalDataSource) {
                       item = item.data();
                    }

                    items = $.map(plain ? [item] : item, function(value, idx) {
                        if (typeof value === "string") {
                            return $(value);
                        } else {
                            var itemElement = $(that.renderItem({
                                group: groupData,
                                item: extend(value, { index: idx })
                            }));

                            kendo.applyStylesFromKendoAttributes(itemElement, ["display"]);
                            return itemElement;
                        }
                    });
                    if (isReferenceItem) {
                        var dataItem = that.dataItem(referenceItem);

                        if (dataItem) {
                            dataItem.hasChildren = true;
                            referenceItem
                                .attr(ARIA_EXPANDED, dataItem.expanded)
                                .not("." + ACTIVECLASS)
                                .children("ul")
                                .attr(ARIA_HIDDEN, !dataItem.expanded);
                        } else {
                            referenceItem.attr(ARIA_EXPANDED, false);
                        }
                    }
                } else {
                    if (typeof item == "string" && item.charAt(0) != "<") {
                        items = that.element.find(item);
                    } else {
                        items = $(item);
                    }
                    that._updateItemsClasses(items);
                }

                if (!item.length) {
                    item = [item];
                }

                return { items: items, group: parent };
            },

            _toggleHover: function(e) {
                var target = $(e.currentTarget);

                if (!target.parents("li." + DISABLEDCLASS).length) {
                    target.toggleClass("k-hover", e.type == MOUSEENTER);
                }
            },

            _updateClasses: function() {
                var that = this,
                    panels, items, expanded, panelsParent, dataItem;

                panels = that.element
                             .find("li > ul")
                             .not(function() { return $(this).parentsUntil(".k-panelbar", "div").length; })
                             .addClass("k-panelbar-group k-group k-panel")
                             .attr("role", "group");

                panelsParent = panels.parent();
                dataItem = that.dataItem(panelsParent);
                expanded = (dataItem && dataItem.expanded) || false;

                panels.parent()
                      .not("[" + ARIA_EXPANDED + "]")
                      .attr(ARIA_EXPANDED, expanded)
                      .not("." + ACTIVECLASS)
                      .children("ul")
                      .attr(ARIA_HIDDEN, !expanded)
                      .hide();

                items = that.element.add(panels).children();

                that._updateItemsClasses(items);
                that.updateArrow(items);
                updateFirstLast(items);
            },

            _updateItemsClasses: function(items) {
                var length = items.length,
                    idx = 0;

                for (; idx < length; idx++) {
                    this._updateItemClasses(items[idx], idx);
                }
            },

            _updateItemClasses: function(item, index) {
                var selected = this._selected,
                    contentUrls = this.options.contentUrls,
                    url = contentUrls && contentUrls[index],
                    root = this.element[0],
                    wrapElement, link;

                item = $(item)
                    .addClass("k-panelbar-item")
                    .attr({
                        role: "treeitem",
                        "aria-selected": false
                    });

                if (kendo.support.browser.msie) { // IE10 doesn't apply list-style: none on invisible items otherwise.
                    item.css("list-style-position", "inside")
                        .css("list-style-position", "");
                }

                item
                    .children(IMG)
                    .addClass(IMAGE);

                link = item
                        .children("a")
                        .addClass(LINK);

                if (link[0]) {
                    link.attr("href", url); //url can be undefined

                    link.children(IMG)
                        .addClass(IMAGE);
                }

                item
                    .filter("li[disabled]")
                    .addClass("k-disabled")
                    .attr(ARIA_DISABLED, true)
                    .prop("disabled", false);

                item
                    .children("div")
                    .addClass(CONTENT + " k-panelbar-content")
                    .attr(ARIA_HIDDEN, true)
                    .hide()
                    .parent()
                    .attr(ARIA_EXPANDED, false);

                link = item.children(SELECTEDSELECTOR);
                if (link[0]) {
                    if (selected) {
                        selected.attr(ARIA_SELECTED, false)
                                .children(SELECTEDSELECTOR)
                                .removeClass(SELECTEDCLASS);
                    }

                    link.addClass(SELECTEDCLASS);
                    this._selected = item.attr(ARIA_SELECTED, true);
                }

                if (!item.children(LINKSELECTOR)[0]) {
                    wrapElement = "<span class='" + LINK + "'><span class='k-panelbar-item-text'></span></span>";
                    if (contentUrls && contentUrls[index] && item[0].parentNode == root) {
                        wrapElement = '<a class="k-link" href="' + contentUrls[index] + '"></a>';
                    }

                    item
                        .contents() // exclude groups, real links, templates and empty text nodes
                        .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !kendo.trim(this.nodeValue.trim))); })
                        .wrapAll(wrapElement);
                }


                if (item.parent(".k-panelbar")[0]) {
                    item.addClass("k-panelbar-header");
                } else {
                    item.addClass("k-panelbar-item");
                }

                if (!/k\-level\-\d+/i.test(item.attr("class"))) {
                    item.addClass("k-level-" + item.parentsUntil(this.element, "ul").length);
                }
            },

            _click: function(e) {
                var that = this,
                    target = e.type == CLICK ? $(e.target) : that._current().children(LINKSELECTOR),
                    element = that.element,
                    prevent, contents, href, isAnchor;

                if (target.parents("li." + DISABLEDCLASS).length) {
                    return;
                }

                if (target.closest(".k-panelbar")[0] != element[0]) {
                    return;
                }

                if (target.is(":kendoFocusable") && !target.hasClass(LINK)) {
                    return;
                }

                var link = target.closest(LINKSELECTOR),
                    item = link.closest(ITEM);

                that._updateSelected(link);

                var wrapper = item.children(".k-group,.k-content");
                var dataItem = this.dataItem(item);

                if (!wrapper.length && ((that.options.loadOnDemand && dataItem && dataItem.hasChildren) ||
                 this._hasChildItems(item) || item.content || item.contentUrl)) {
                    wrapper = that._addGroupElement(item);
                }

                contents = item.find(GROUPS).add(item.find(CONTENTS));
                href = link.attr(HREF);
                isAnchor = href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1);
                prevent = !!(isAnchor || contents.length);

                if (contents.data("animating") && prevent) {
                    e.preventDefault();
                    return;
                }

                if (that._triggerEvent(SELECT, item)) {
                    prevent = true;
                }

                if (prevent === false) {
                    return;
                }

                if (that.options.expandMode == SINGLE) {
                    if (that._collapseAllExpanded(item) && prevent) {
                        e.preventDefault();
                        return;
                    }
                }

                if (contents.length) {
                    var visibility = contents.is(VISIBLE);

                    if (!that._triggerEvent(!visibility ? EXPAND : COLLAPSE, item)) {
                        prevent = that._toggleItem(item, visibility);
                    }
                }

                if (prevent) {
                    e.preventDefault();
                }
            },
            _hasChildItems: function(item) {
                return (item.items && item.items.length > 0) || item.hasChildren;
            },

            _toggleItem: function(element, isVisible, expanded) {
                var that = this,
                    childGroup = element.find(GROUPS),
                    link = element.find(LINKSELECTOR),
                    url = link.attr(HREF),
                    prevent, content,
                    dataItem = that.dataItem(element),
                    notVisible = !isVisible;

                var loaded = dataItem && dataItem.loaded();

                if (dataItem && !expanded && dataItem.expanded !== notVisible) {
                    dataItem.set("expanded", notVisible);
                    prevent = dataItem.hasChildren || !!dataItem.content || !!dataItem.contentUrl;
                    return prevent;
                }

                if (dataItem && (!expanded || expanded === "true") && !loaded && !dataItem.content && !dataItem.contentUrl) {
                     if (that.options.loadOnDemand) {
                         this._progress(element, true);
                     }

                     element.children(".k-group,.k-content").remove();
                     prevent = dataItem.hasChildren;

                     dataItem.load();
                 } else {
                       if (childGroup.length) {
                            this._toggleGroup(childGroup, isVisible);
                            prevent = true;
                       } else {
                            content = element.children("." + CONTENT);

                            if (content.length) {
                                prevent = true;

                                if (!content.is(EMPTY) || url === undefined$1) {
                                    that._toggleGroup(content, isVisible);
                                } else {
                                    that._ajaxRequest(element, content, isVisible);
                                }
                            }
                        }
                 }

                return prevent;
            },

            _toggleGroup: function(element, visibility) {
                var that = this,
                    animationSettings = that.options.animation,
                    animation = animationSettings.expand,
                    hasCollapseAnimation = animationSettings.collapse && "effects" in animationSettings.collapse,
                    collapse = extend({}, animationSettings.expand, animationSettings.collapse);

                if (element.hasClass("k-hidden")) {
                    element.removeClass("k-hidden");
                }

                if (!hasCollapseAnimation) {
                    collapse = extend(collapse, { reverse: true });
                }

                if (element.is(VISIBLE) != visibility) {
                    that._animating = false;
                    return;
                }

                element.attr(ARIA_HIDDEN, !!visibility);

                element.parent()
                    .attr(ARIA_EXPANDED, !visibility)
                    .toggleClass(ACTIVECLASS, !visibility)
                    .toggleClass(EXPANDEDCLASS, !visibility)
                    .find("> .k-link > .k-panelbar-collapse,> .k-link > .k-panelbar-expand")
                    .each(function(ind, el) {
                        var iconEl = $(el);
                        iconEl.removeClass("k-panelbar-expand k-panelbar-collapse");
                        kendo.ui.icon(iconEl, {
                            icon: visibility ? "chevron-down" : "chevron-up",
                            iconClass: visibility ? "k-panelbar-expand" : "k-panelbar-collapse"
                        });
                    });
                if (visibility) {
                    animation = extend(collapse, { hide: true });

                    animation.complete = function() {
                        that._animationCallback();
                    };
                } else {
                    animation = extend( { complete: function(element) {
                            that._triggerEvent(ACTIVATE, element.closest(ITEM));
                            that._animationCallback();
                        } }, animation );
                }

                element
                    .toggle(0)
                    .kendoStop(true, true)
                    .kendoAnimate( animation );
            },

            _animationCallback: function() {
                var that = this;
                that.trigger("complete");
                that._animating = false;
            },

            _addGroupElement: function(element) {
                var group = $('<ul role="group" aria-hidden="true" class="k-panelbar-group k-group k-panel"></ul>').hide();

                element.append(group);
                return group;
            },

            _collapseAllExpanded: function(item) {
                var that = this, children, stopExpand = false;

                var groups = item.find(GROUPS).add(item.find(CONTENTS));

                if (groups.is(VISIBLE)) {
                    stopExpand = true;
                }

                if (!(groups.is(VISIBLE) || groups.length === 0)) {
                    children = item.siblings();
                    children.find(GROUPS).add(children.find(CONTENTS))
                            .filter(function() { return $(this).is(VISIBLE); })
                            .each(function(index, content) {
                                content = $(content);

                                stopExpand = that._triggerEvent(COLLAPSE, content.closest(ITEM));
                                if (!stopExpand) {
                                    that._toggleGroup(content, true);
                                }
                            });

                     that.one("complete", function() {
                        setTimeout(function() {
                            children.each(function(index, child) {
                                var dataItem = that.dataItem(child);

                                if (dataItem) {
                                    dataItem.set("expanded", false);
                                }
                            });
                        });
                    });
                }

                return stopExpand;
            },

            _ajaxRequest: function(element, contentElement, isVisible) {

                var that = this,
                    statusIcon = element.find(".k-panelbar-collapse, .k-panelbar-expand"),
                    link = element.find(LINKSELECTOR),
                    loadingIconTimeout = setTimeout(function() {
                        statusIcon
                            .empty()
                            .removeClass("k-i-chevron-up k-i-chevron-down k-svg-i-chevron-up k-svg-i-chevron-down")
                            .addClass("k-i-loading");
                    }, 100),
                    data = {},
                    url = link.attr(HREF);

                $.ajax({
                    type: "GET",
                    cache: false,
                    url: url,
                    dataType: "html",
                    data: data,

                    error: function(xhr, status) {
                        statusIcon.removeClass("k-i-loading");
                        kendo.ui.icon(statusIcon, { icon: statusIcon.hasClass("k-panelbar-expand") ? "chevron-down" : "chevron-up" });
                        if (that.trigger(ERROR, { xhr: xhr, status: status })) {
                            this.complete();
                        }
                    },

                    complete: function() {
                        clearTimeout(loadingIconTimeout);
                        kendo.ui.icon(statusIcon, { icon: statusIcon.hasClass("k-panelbar-expand") ? "chevron-down" : "chevron-up" });
                        statusIcon.removeClass("k-i-loading");
                    },

                    success: function(data) {
                        function getElements() {
                            return { elements: contentElement.get() };
                        }
                        try {
                            contentElement.html(data);
                        } catch (e) {
                            var console = window.console;

                            if (console && console.error) {
                                console.error(e.name + ": " + e.message + " in " + url);
                            }
                            this.error(this.xhr, "error");
                        }

                        that._toggleGroup(contentElement, isVisible);

                        that.trigger(CONTENTLOAD, { item: element[0], contentElement: contentElement[0] });
                    }
                });
            },

            _triggerEvent: function(eventName, element) {
                var that = this;

                return that.trigger(eventName, { item: element[0] });
            },

            _updateSelected: function(link, skipChange) {
                var that = this,
                    element = that.element,
                    item = link.parent(ITEM),
                    selected = that._selected,
                    dataItem = that.dataItem(item);

                if (selected) {
                    selected.attr(ARIA_SELECTED, false);
                }

                that._selected = item.attr(ARIA_SELECTED, true);

                element.find(selectableItems).removeClass(SELECTEDCLASS);
                element.find("> ." + HIGHLIGHTCLASS + ", .k-panel > ." + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);

                link.addClass(SELECTEDCLASS);
                link.parentsUntil(element, ITEM).filter(":has(.k-link)").addClass(HIGHLIGHTCLASS);
                that._current(item[0] ? item : null);
                if (dataItem) {
                     dataItem.set("selected", true);
                }

                if (!skipChange) {
                    that.trigger(CHANGE);
                }
            },

            _animations: function(options) {
                if (options && ("animation" in options) && !options.animation) {
                    options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
                }
            },

            renderItem: function(options) {
                var that = this;
                    options = extend({ panelBar: that, group: {} }, options);

                var empty = that.templates.empty,
                    item = options.item;

                return that.templates.item(extend(options, {
                    itemWrapper: that.templates.itemWrapper,
                    renderContent: that.renderContent,
                    arrow: that._hasChildItems(item) || item.content || item.contentUrl ? that.templates.arrow : empty,
                    subGroup: !options.loadOnDemand || item.expanded ? that.renderGroup : empty
                }, rendering));
            },

            renderGroup: function(options) {
                var that = this;
                var templates = that.templates || options.panelBar.templates;

                return templates.group(extend({
                    renderItems: function(options) {
                        var html = "",
                            i = 0,
                            items = options.items,
                            len = items ? items.length : 0,
                            group = extend({ length: len }, options.group);

                        for (; i < len; i++) {
                            html += options.panelBar.renderItem(extend(options, {
                                group: group,
                                item: extend({ index: i }, items[i])
                            }));
                        }

                        return html;
                    }
                }, options, rendering));
            },

            renderContent: function(options) {
                return options.panelBar.templates.content(extend(options, rendering));
            }
        });

    kendo.ui.plugin(PanelBar);

    })(window.kendo.jQuery);
    var kendo$8 = kendo;

    var __meta__$7 = {
        id: "progressbar",
        name: "ProgressBar",
        category: "web",
        description: "The ProgressBar offers rich functionality for displaying and tracking progress",
        depends: [ "core" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            Widget = ui.Widget,
            HORIZONTAL = "horizontal",
            VERTICAL = "vertical",
            DEFAULTMIN = 0,
            DEFAULTMAX = 100,
            DEFAULTVALUE = 0,
            DEFAULTCHUNKCOUNT = 5,
            KPROGRESSBAR = "k-progressbar",
            KPROGRESSBARREVERSE = "k-progressbar-reverse",
            KPROGRESSBARINDETERMINATE = "k-progressbar-indeterminate",
            KPROGRESSBARCOMPLETE = "k-complete",
            KPROGRESSWRAPPER = "k-selected",
            KPROGRESSSTATUS = "k-progress-status",
            LABEL_POSITION_END = "k-progress-end",
            KCOMPLETEDCHUNK = "k-selected",
            STATEDISABLED = "k-disabled",
            PROGRESS_VALUE = "k-progressbar-value",
            CHUNK_ITEM = "k-progressbar-chunk",
            PROGRESSTYPE = {
                VALUE: "value",
                PERCENT: "percent",
                CHUNK: "chunk"
            },
            CHANGE = "change",
            COMPLETE = "complete",
            BOOLEAN = "boolean",
            math = Math,
            extend = $.extend,
            HUNDREDPERCENT = 100,
            DEFAULTANIMATIONDURATION = 400,
            PRECISION = 3,
            templates = {
                progressStatus: "<span class='k-progress-status-wrap " + LABEL_POSITION_END + "'><span class='k-progress-status'></span></span>",
                announceElement: '<span aria-live="polite" class="k-sr-only k-progress-announce"></span>'
            };

        var ProgressBar = Widget.extend({
            init: function(element, options) {
                var that = this;

                Widget.fn.init.call(this, element, options);

                options = that.options;

                that._progressProperty = (options.orientation === HORIZONTAL) ? "width" : "height";

                that._fields();

                options.value = that._validateValue(options.value);

                that._validateType(options.type);

                that._wrapper();

                if (options.ariaRole) {
                    that._aria();
                }

                that._progressAnimation();

                if ((options.value !== options.min) && (options.value !== false)) {
                   that._updateProgress();
                }
            },

            setOptions: function(options) {
                var that = this,
                    wrapper = that.wrapper;

                Widget.fn.setOptions.call(that, options);

                if (options.hasOwnProperty("reverse")) {
                    wrapper.toggleClass("k-progressbar-reverse", options.reverse);
                }

                if (options.hasOwnProperty("enable")) {
                    that.enable(options.enable);
                }

                if (options.ariaRole) {
                    that._aria();
                }

                that._progressAnimation();

                that._validateValue();

                that._updateProgress();
            },

            events: [
                CHANGE,
                COMPLETE
            ],

            options: {
                name: "ProgressBar",
                orientation: HORIZONTAL,
                reverse: false,
                min: DEFAULTMIN,
                max: DEFAULTMAX,
                value: DEFAULTVALUE,
                enable: true,
                type: PROGRESSTYPE.VALUE,
                chunkCount: DEFAULTCHUNKCOUNT,
                showStatus: true,
                animation: { },
                label: null,
                labelId: null,
                ariaRole: false
            },

            _aria: function() {
                var that = this,
                    options = that.options,
                    wrapper = that.wrapper;

                wrapper.attr({
                    "role": "progressbar",
                    "aria-valuemin": options.min,
                    "aria-valuemax": options.max
                });

                if (!!options.labelId) {
                    wrapper.attr("aria-labelledby", options.labelId);
                } else if (!!options.label) {
                    wrapper.attr("aria-label", options.label);
                }

                that.announce = $(templates.announceElement);
                that.announce.appendTo($("body"));

                if (options.value !== false) {
                    wrapper.attr("aria-valuenow", options.value);

                    that.announce.text(that._calculatePercentage().toFixed() + "%");
                }
            },

            _fields: function() {
                var that = this;

                that._isStarted = false;

                that.progressWrapper = that.progressStatus = $();
            },

            _validateType: function(currentType) {
                var isValid = false;

                $.each(PROGRESSTYPE, function(k, type) {
                    if (type === currentType) {
                        isValid = true;
                        return false;
                    }
                });

                if (!isValid) {
                    throw new Error(kendo.format("Invalid ProgressBar type '{0}'", currentType));
                }
            },

            _wrapper: function() {
                var that = this;
                var container = that.wrapper = that.element;
                var options = that.options;
                var orientation = options.orientation;
                var initialValue = (options.value !== false) ? options.value : options.min;

                container.addClass(KPROGRESSBAR);

                container.addClass(KPROGRESSBAR + "-" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));

                if (options.enable === false) {
                    container.addClass(STATEDISABLED);
                }

                if (options.reverse) {
                    container.addClass(KPROGRESSBARREVERSE);
                }

                if (options.value === false) {
                    container.addClass(KPROGRESSBARINDETERMINATE);
                }

                if (options.type === PROGRESSTYPE.CHUNK) {
                    that._addChunkProgressWrapper();
                } else {
                    if (options.showStatus) {
                        that.progressStatus = that.wrapper.prepend(templates.progressStatus)
                                                  .find("." + KPROGRESSSTATUS);

                        if (options.type === PROGRESSTYPE.VALUE) {
                            that.progressStatus.text(initialValue);
                        } else {
                            that.progressStatus.text(that._calculatePercentage(initialValue).toFixed() + "%");
                        }
                    }
                }
            },

            value: function(value) {
                return this._value(value);
            },

            _value: function(value) {
                var that = this;
                var options = that.options;
                var validated;

                if (value === undefined$1) {
                    return options.value;
                } else {
                    if (typeof value !== BOOLEAN) {
                        value = that._roundValue(value);

                        if (!isNaN(value)) {
                            validated = that._validateValue(value);

                            if (validated !== options.value) {
                                that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);

                                options.value = validated;

                                that._isStarted = true;

                                that._updateProgress();
                            }
                        }
                    } else if (!value) {
                        that.wrapper.addClass(KPROGRESSBARINDETERMINATE);
                        that.wrapper.removeAttr("aria-valuenow");
                        options.value = false;

                        if (that.announce) {
                            that.announce.text("");
                        }
                    }
                }
            },

            _roundValue: function(value) {
                 value = parseFloat(value);

                 var power = math.pow(10, PRECISION);

                 return kendo._round(value * power) / power;
            },

            _validateValue: function(value) {
                var that = this;
                var options = that.options;

                if (value !== false) {
                    if (value <= options.min || value === true) {
                        return options.min;
                    } else if (value >= options.max) {
                        return options.max;
                    }
                } else if (value === false) {
                    return false;
                }

                if (isNaN(that._roundValue(value))) {
                    return options.min;
                }

                return value;
            },

            _updateProgress: function() {
                var that = this;
                var options = that.options;
                var percentage = that._calculatePercentage();

                if (options.type === PROGRESSTYPE.CHUNK) {
                    that._updateChunks(percentage);
                    that._onProgressUpdateAlways(options.value);
                } else {
                    that._updateProgressWrapper(percentage);
                }

                if (options.ariaRole) {
                    that.wrapper.attr("aria-valuenow", that.options.value);

                    if (that.announce) {
                        that.announce.text(percentage.toFixed() + "%");
                    }
                }
            },

            _updateChunks: function(percentage) {
                var that = this;
                var options = that.options;
                var chunkCount = options.chunkCount;
                var percentagesPerChunk = parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;
                var percentageParsed = parseInt(percentage * 100, 10) / 100;
                var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);
                var completedChunks;

                if ((options.orientation === HORIZONTAL && !(options.reverse)) ||
                   (options.orientation === VERTICAL && options.reverse)) {
                    completedChunks = that.wrapper.find("li." + CHUNK_ITEM).slice(0, completedChunksCount);
                } else if (completedChunksCount === 0) {
                    completedChunks = kendo.jQuery();
                } else {
                    completedChunks = that.wrapper.find("li." + CHUNK_ITEM).slice(completedChunksCount * -1);
                }

                that.wrapper.find("." + KCOMPLETEDCHUNK)
                            .removeClass(KCOMPLETEDCHUNK + " " + PROGRESS_VALUE);

                completedChunks.addClass(KCOMPLETEDCHUNK + " " + PROGRESS_VALUE);
            },

            _updateProgressWrapper: function(percentage) {
                var that = this;
                var options = that.options;
                var progressWrapper = that.wrapper.find("." + KPROGRESSWRAPPER);
                var animationDuration = that._isStarted ? that._animation.duration : 0;
                var animationCssOptions = { };

                if (progressWrapper.length === 0) {
                    that._addRegularProgressWrapper();
                }

                animationCssOptions[that._progressProperty] = percentage + "%";
                that.progressWrapper.animate(animationCssOptions, {
                    duration: animationDuration,
                    start: that._onProgressAnimateStart.bind(that),
                    progress: that._onProgressAnimate.bind(that),
                    complete: that._onProgressAnimateComplete.bind(that, options.value),
                    always: that._onProgressUpdateAlways.bind(that, options.value)
                });
            },

            _onProgressAnimateStart: function() {
                this.progressWrapper.show();
            },

            _onProgressAnimate: function(e) {
                var that = this;
                var options = that.options;
                var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);
                var progressStatusWrapSize;

                if (options.showStatus) {
                    progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);

                    that.progressWrapper.find(".k-progress-status-wrap").css(that._progressProperty, progressStatusWrapSize + "%");
                }

                if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {
                    that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);
                }
            },

            _onProgressAnimateComplete: function(currentValue) {
                var that = this;
                var options = that.options;
                var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);
                var progressValue;

                if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {
                    that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);
                }

                if (options.showStatus) {
                    if (options.type === PROGRESSTYPE.VALUE) {
                        progressValue = currentValue;
                    } else if (options.type == PROGRESSTYPE.PERCENT) {
                        progressValue = that._calculatePercentage(currentValue).toFixed() + "%";
                    } else {
                        progressValue = math.floor(that._calculatePercentage(currentValue)) + "%";
                    }
                    that.progressStatus.text(progressValue);
                }

                if (currentValue === options.min) {
                    that.progressWrapper.hide();
                }
            },

            _onProgressUpdateAlways: function(currentValue) {
                var that = this;
                var options = that.options;

                if (that._isStarted) {
                    that.trigger(CHANGE, { value: currentValue });
                }

                if (currentValue === options.max && that._isStarted) {
                    that.trigger(COMPLETE, { value: options.max });
                }
            },

            enable: function(enable) {
                var that = this;
                var options = that.options;

                options.enable = typeof(enable) === "undefined" ? true : enable;
                that.wrapper.toggleClass(STATEDISABLED, !options.enable);
            },

            destroy: function() {
                var that = this;

                if (that.announce) {
                    that.announce.remove();
                }

                Widget.fn.destroy.call(that);
            },

            _addChunkProgressWrapper: function() {
                var that = this;
                var options = that.options;
                var container = that.wrapper;
                var chunkSize = HUNDREDPERCENT / options.chunkCount;
                var html = "";

                if (options.chunkCount <= 1) {
                    options.chunkCount = 1;
                }

                that.element.addClass("k-chunk-progressbar");
                html += "<ul class='k-reset k-progressbar-chunks'>";
                for (var i = options.chunkCount - 1; i >= 0; i--) {
                    html += "<li class='" + CHUNK_ITEM + "'></li>";
                }
                html += "</ul>";

                container.append(html).find("." + CHUNK_ITEM).css(that._progressProperty, chunkSize + "%")
                         .first().addClass("k-first")
                         .end()
                         .last().addClass("k-last");

                that._normalizeChunkSize();
            },

            _normalizeChunkSize: function() {
                var that = this;
                var options = that.options;
                var lastChunk = that.wrapper.find("." + CHUNK_ITEM).last();
                var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);
                var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);

                if (difference > 0) {
                    lastChunk.css(that._progressProperty, (currentSize + difference) + "%");
                }
            },

            _addRegularProgressWrapper: function() {
                var that = this;

                that.progressWrapper = $("<div class='" + KPROGRESSWRAPPER + " " + PROGRESS_VALUE + "'></div>").appendTo(that.wrapper);

                if (that.options.showStatus) {
                    that.progressWrapper.append(templates.progressStatus);

                    that.progressStatus = that.wrapper.find("." + KPROGRESSSTATUS);
                }
            },

            _calculateChunkSize: function() {
                var that = this;
                var chunkCount = that.options.chunkCount;
                var chunkContainer = that.wrapper.find("ul.k-reset");

                return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;
            },

            _calculatePercentage: function(currentValue) {
                var that = this;
                var options = that.options;
                var value = (currentValue !== undefined$1) ? currentValue : options.value;
                var min = options.min;
                var max = options.max;
                that._onePercent = math.abs((max - min) / 100);

                return math.abs((value - min) / that._onePercent);
            },

            _progressAnimation: function() {
                var that = this;
                var options = that.options;
                var animation = options.animation;

                if (animation === false) {
                    that._animation = { duration: 0 };
                } else {
                    that._animation = extend({
                        duration: DEFAULTANIMATIONDURATION
                    }, options.animation);
                }
            }
        });

        kendo.ui.plugin(ProgressBar);
    })(window.kendo.jQuery);
    var kendo$7 = kendo;

    var __meta__$6 = {
        id: "responsive-panel",
        name: "Responsive Panel",
        category: "web",
        description: "The Responsive Panel widget allows a panel of content to be hidden on mobile devices, available through a toggle button.",
        depends: [ "core" ]
    };

    (function($, undefined$1) {
        var NS = ".kendoResponsivePanel";
        var OPEN = "open";
        var CLOSE = "close";
        var ACTIVATE_EVENTS = "click" + NS + " touchstart" + NS + " touchend" + NS;
        var Widget = kendo.ui.Widget;
        var ResponsivePanel = Widget.extend({
            init: function(element, options) {
                Widget.fn.init.call(this, element, options);

                this._guid = "_" + kendo.guid();

                this._toggleHandler = this._toggleButtonClick.bind(this);
                this._closeHandler = this._close.bind(this);

                $(document.documentElement).on(ACTIVATE_EVENTS, this.options.toggleButton, this._toggleHandler);

                this._registerBreakpoint();

                if (this.options.content) {
                    kendo.destroy(this.element.children());
                    this.element.html(this.options.content);
                }

                this.element
                    .addClass("k-rpanel k-rpanel-" + this.options.orientation + " " + this._guid);

                this._resizeHandler = this.resize.bind(this, true);
                $(window).on("resize" + NS, this._resizeHandler);
            },
            _mediaQuery: function (ref) {
                    var breakpoint = ref.breakpoint;
                    var guid = ref.guid;
                    var toggleButton = ref.toggleButton;

                    return "@media (max-width: " + (breakpoint - 1) + "px) {" +
                    "." + guid + ".k-rpanel-animate.k-rpanel-left," +
                    "." + guid + ".k-rpanel-animate.k-rpanel-right {" +
                        "-webkit-transition: -webkit-transform .2s ease-out;" +
                        "-ms-transition: -ms-transform .2s ease-out;" +
                        "transition: transform .2s ease-out;" +
                    "} " +
                    "." + guid + ".k-rpanel-top {" +
                        "overflow: hidden;" +
                    "}" +
                    "." + guid + ".k-rpanel-animate.k-rpanel-top {" +
                        "-webkit-transition: max-height .2s linear;" +
                        "-ms-transition: max-height .2s linear;" +
                        "transition: max-height .2s linear;" +
                    "}" +
                "} " +
                "@media (min-width: " + breakpoint + "px) {" +
                    toggleButton + " { display: none; } " +
                    "." + guid + ".k-rpanel-left { float: left; } " +
                    "." + guid + ".k-rpanel-right { float: right; } " +
                    "." + guid + ".k-rpanel-left, ." + guid + ".k-rpanel-right {" +
                        "position: relative;" +
                        "-webkit-transform: translateX(0);" +
                        "-ms-transform: translateX(0);" +
                        "transform: translateX(0);" +
                        "-webkit-transform: translateX(0) translateZ(0);" +
                        "-ms-transform: translateX(0) translateZ(0);" +
                        "transform: translateX(0) translateZ(0);" +
                    "} " +
                    ".k-ie9 ." + guid + ".k-rpanel-left { left: 0; } " +
                    "." + guid + ".k-rpanel-top { max-height: none; }" +
                "}";
        },
            _registerBreakpoint: function() {
                var options = this.options;

                this._registerStyle(this._mediaQuery({
                    breakpoint: options.breakpoint,
                    toggleButton: options.toggleButton,
                    guid: this._guid
                }));
            },
            _registerStyle: function(cssText) {
                var head = $("head,body")[0];
                var style = document.createElement('style');

                head.appendChild(style);

                if (style.styleSheet) {
                    style.styleSheet.cssText = cssText;
                } else {
                    style.appendChild(document.createTextNode(cssText));
                }
            },
            options: {
                name: "ResponsivePanel",
                content: "",
                orientation: "left",
                toggleButton: ".k-rpanel-toggle",
                breakpoint: 640,
                autoClose: true
            },
            events: [
                OPEN,
                CLOSE
            ],
            _resize: function() {
                this.element.removeClass("k-rpanel-animate k-rpanel-expanded");

                $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
            },
            _toggleButtonClick: function(e) {
                e.preventDefault();

                if (e.type == "touchend") {
                    return;
                }

                if (this.element.hasClass("k-rpanel-expanded")) {
                    this.close();
                } else {
                    this.open();
                }
            },
            open: function() {
                if (!this.trigger(OPEN)) {
                    this.element.addClass("k-rpanel-animate k-rpanel-expanded");

                    if (this.options.autoClose) {
                        $(document.documentElement).on(ACTIVATE_EVENTS, this._closeHandler);
                    }
                }
            },
            close: function() {
                if (!this.trigger(CLOSE)) {
                    this.element.addClass("k-rpanel-animate").removeClass("k-rpanel-expanded");

                    $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
                }
            },
            _close: function(e) {
                var prevented = e.isDefaultPrevented();
                var container = $(e.target).closest(this.options.toggleButton + ",.k-rpanel");

                if (!container.length && !prevented) {
                    this.close();
                }
            },
            destroy: function() {
                Widget.fn.destroy.call(this);

                $(window).off("resize" + NS, this._resizeHandler);
                $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
            }
        });

        kendo.ui.plugin(ResponsivePanel);
    })(window.kendo.jQuery);
    var kendo$6 = kendo;

    var __meta__$5 = {
        id: "tabstrip",
        name: "TabStrip",
        category: "web",
        description: "The TabStrip widget displays a collection of tabs with associated tab content.",
        depends: [ "data", "icons", "sortable" ],
        features: [ {
            id: "tabstrip-fx",
            name: "Animation",
            description: "Support for animation",
            depends: [ "fx" ]
        } ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            keys = kendo.keys,
            map = $.map,
            each = $.each,
            trim = kendo.trim,
            extend = $.extend,
            isFunction = kendo.isFunction,
            template = kendo.template,
            outerWidth = kendo._outerWidth,
            outerHeight = kendo._outerHeight,
            Widget = ui.Widget,
            excludedNodesRegExp = /^(a|div)$/i,
            NS = ".kendoTabStrip",
            IMG = "img",
            HREF = "href",
            PREV = "prev",
            NEXT = "next",
            SHOW = "show",
            LINK = "k-link",
            LAST = "k-last",
            CLICK = "click",
            ERROR = "error",
            EMPTY = ":empty",
            IMAGE = "k-image",
            FIRST = "k-first",
            SELECT = "select",
            ACTIVATE = "activate",
            CONTENT = "k-tabstrip-content k-content",
            CONTENTURL = "contentUrl",
            MOUSEENTER = "mouseenter",
            MOUSELEAVE = "mouseleave",
            CONTENTLOAD = "contentLoad",
            DISABLEDSTATE = "k-disabled",
            ACTIVESTATE = "k-active",
            FOCUSEDSTATE = "k-focus",
            HOVERSTATE = "k-hover",
            TABONTOP = "k-tab-on-top",
            NAVIGATABLEITEMS = ".k-item:not(." + DISABLEDSTATE + ")",
            KEYBOARDNAVIGATABLEITEMS = ".k-item",
            HOVERABLEITEMS = ".k-tabstrip-items > " + NAVIGATABLEITEMS + ":not(." + ACTIVESTATE + ")",
            DEFAULTDISTANCE = 200,
            ARIA_HIDDEN = "aria-hidden",
            ARIA_CONTROLS = "aria-controls",
            ARIA_DISABLED = "aria-disabled",
            ARIA_SELECTED = "aria-selected",
            ARIA_ORIENTATION = "aria-orientation",
            ARIA_LABELLEDBY = "aria-labelledby",

            templates = {
                content: function (data) { return ("<div class='k-tabstrip-content k-content' " + (data.contentAttributes(data)) + " tabindex='0'>" + (data.content(data.item)) + "</div>"); },
                textWrapper: function (ref) {
                        var tag = ref.tag;
                        var item = ref.item;
                        var contentUrl = ref.contentUrl;
                        var textAttributes = ref.textAttributes;
                        var image = ref.image;
                        var sprite = ref.sprite;
                        var text = ref.text;

                        return "<" + (tag(item)) + " class='k-link' " + (contentUrl(item)) + " " + (textAttributes(item)) + ">" +
                        "" + (image(item)) + (sprite(item)) + (text(item)) +
                    "</" + (tag(item)) + ">";
        },
                item: function (data) { return templates.itemWrapper(data,("" + (data.textWrapper(data)))); },
                itemWrapper: function (data, item) { return "<li class='" + (data.wrapperCssClass(data.group, data.item)) + "' role='tab' " + (data.item.active ? "aria-selected='true'" : '') + ">" +
                        item +
                    "</li>"; },
                image: function (ref) {
                    var imageUrl = ref.imageUrl;

                    return ("<img class='k-image' alt='' src='" + imageUrl + "' />");
        },
                sprite: function (ref) {
                    var spriteCssClass = ref.spriteCssClass;

                    return ("<span class='k-sprite " + spriteCssClass + "'></span>");
        },
                empty: function () { return ""; }
            },

            rendering = {
                wrapperCssClass: function(group, item) {
                    var result = ["k-tabstrip-item", "k-item"],
                        index = item.index;

                    if (item.enabled === false) {
                        result.push("k-disabled");
                    }

                    if (index === 0) {
                        result.push("k-first");
                    }

                    if (index == group.length - 1) {
                        result.push("k-last");
                    }

                    return result.join(" ");
                },
                textAttributes: function(item) {
                    return item.url ? " href='" + item.url + "'" : "";
                },
                text: function(item) {
                    return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
                },
                tag: function(item) {
                    return item.url ? "a" : "span";
                },
                contentAttributes: function(content) {
                    return content.active !== true ? (" " + (kendo.attr("style-display")) + "=\"none\" aria-hidden='true'") : "";
                },
                content: function(item) {
                    return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
                },
                contentUrl: function(item) {
                    return item.contentUrl ? kendo.attr("content-url") + '="' + item.contentUrl + '"' : "";
                }
            };

        function updateTabClasses(tabs) {
            tabs.children(IMG)
                .addClass(IMAGE);

            tabs.children("a")
                .addClass(LINK)
                .children(IMG)
                .addClass(IMAGE);

            tabs.filter("li[disabled]")
                .addClass(DISABLEDSTATE)
                .attr(ARIA_DISABLED, "true")
                .prop("disabled", false);

            tabs.filter(":not([class*=k-state])")
                .children("a")
                .filter(":focus")
                .parent()
                .addClass(ACTIVESTATE + " " + TABONTOP);

            tabs.attr("role", "tab");
            tabs.filter("." + ACTIVESTATE)
                .attr(ARIA_SELECTED, true);


            tabs.each(function() {
                var item = $(this);

                if (!item.children("." + LINK).length) {
                    item
                        .contents() // exclude groups, real links, templates and empty text nodes
                        .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !trim(this.nodeValue))); })
                        .wrapAll("<span UNSELECTABLE='on' class='" + LINK + "'/>");
                }
            });

        }

        function updateFirstLast(tabGroup) {
            var tabs = tabGroup.children(".k-item");

            tabs.filter(".k-first:not(:first-child)").removeClass(FIRST);
            tabs.filter(".k-last:not(:last-child)").removeClass(LAST);
            tabs.filter(":first-child").addClass(FIRST);
            tabs.filter(":last-child").addClass(LAST);
        }

        function scrollButtonHtml(buttonClass, iconClass) {
            return ("<span aria-hidden='true' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-tabstrip-" + buttonClass + "' unselectable='on'>" + (kendo.ui.icon({ icon: iconClass, iconClass: "k-button-icon" })) + "</span>");
        }

        var TabStrip = Widget.extend({
            init: function(element, options) {
                var that = this, value;

                Widget.fn.init.call(that, element, options);

                that._animations(that.options);

                options = that.options;

                that._contentUrls = options.contentUrls || [];

                that._wrapper();

                that._isRtl = kendo.support.isRtl(that.wrapper);

                that._tabindex();
                that._updateClasses();
                that._dataSource();

                that.tabGroup.attr("role", "tablist");

                if (options.dataSource) {
                    that.dataSource.fetch();
                }

                that._tabPosition();
                that._scrollable();
                that._sortable();
                that._processContentUrls();
                that._attachEvents();

                if (that.options.value) {
                    value = that.options.value;
                }

                that._initialActivate();
                that.value(value);
                kendo.notify(that);

                if (that._showWatermarkOverlay) {
                    that._showWatermarkOverlay(that.element[0]);
                }
            },

            events: [
                SELECT,
                ACTIVATE,
                SHOW,
                ERROR,
                CONTENTLOAD,
                "change",
                "dataBinding",
                "dataBound"
            ],

            options: {
                name: "TabStrip",
                dataEncodedField: "",
                dataTextField: "",
                dataContentField: "",
                dataImageUrlField: "",
                dataUrlField: "",
                dataSpriteCssClass: "",
                dataContentUrlField: "",
                tabPosition: "top",
                tabTemplate: null,
                animation: {
                    open: {
                        effects: "expand:vertical fadeIn",
                        duration: 200
                    },
                    close: { // if close animation effects are defined, they will be used instead of open.reverse
                        duration: 200
                    }
                },
                collapsible: false,
                navigatable: true,
                contentUrls: false,
                applyMinHeight: true,
                scrollable: {
                    distance: DEFAULTDISTANCE
                },
                sortable: false
            },

            setDataSource: function(dataSource) {
                var that = this;

                that.options.dataSource = dataSource;
                that._dataSource();
                that.dataSource.fetch();
            },

            setOptions: function(options) {
                var that = this,
                    animation = that.options.animation;

                that._animations(options);

                if (options.contentUrls) {
                    that._contentUrls = options.contentUrls;
                }

                options.animation = extend(true, animation, options.animation);

                if (options.navigatable) {
                    that.wrapper.on("keydown" + NS, that._keyDownProxy);
                } else {
                    that.wrapper.off("keydown" + NS, that._keyDownProxy);
                }

                Widget.fn.setOptions.call(that, options);
            },

            activateTab: function(item) {
                if (this.tabGroup.children("[data-animating]").length) { return; }

                item = this.tabGroup.find(item);

                var that = this,
                    animationSettings = that.options.animation,
                    animation = animationSettings.open,
                    close = extend({}, animationSettings.close),
                    hasCloseAnimation = close && "effects" in close,
                    neighbours = item.parent().children(),
                    oldTab = neighbours.filter("." + ACTIVESTATE),
                    itemIndex = neighbours.index(item),
                    isAnimationEnabled = animation && "duration" in animation && "effects" in animation;

                close = extend( hasCloseAnimation ? close : extend({ reverse: true }, animation), { hide: true });
                // deactivate previously active tab
                if (kendo.size(animation.effects)) {
                    oldTab.kendoRemoveClass(ACTIVESTATE, { duration: close.duration });
                    item.kendoRemoveClass(HOVERSTATE, { duration: close.duration });
                } else {
                    oldTab.removeClass(ACTIVESTATE);
                    item.removeClass(HOVERSTATE);
                }

                // handle content elements
                var contentAnimators = that.contentAnimators;

                if (that.inRequest) {
                    that.xhr.abort();
                    that.inRequest = false;
                }

                if (contentAnimators.length === 0) {
                    that.tabGroup.find("." + TABONTOP).removeClass(TABONTOP);
                    item.addClass(TABONTOP) // change these directly to bring the tab on top.
                        .css("z-index");

                    item.addClass(ACTIVESTATE);
                    that._current(item);

                    that.trigger("change");

                    if (that._scrollableModeActive) {
                        that._scrollTabsToItem(item);
                    }

                    return false;
                }

                var visibleContents = contentAnimators.filter("." + ACTIVESTATE),
                    contentHolder = that.contentHolder(itemIndex),
                    contentElement = contentHolder.closest(".k-content");

                that.tabsHeight = outerHeight(that.tabGroup) +
                                  parseInt(that.wrapper.css("border-top-width"), 10) +
                                  parseInt(that.wrapper.css("border-bottom-width"), 10);

                if (contentHolder.length === 0) {
                    visibleContents
                        .removeClass( ACTIVESTATE )
                        .attr(ARIA_HIDDEN, true)
                        .kendoStop(true, true)
                        .kendoAnimate( close );
                    return false;
                }

                item.attr("data-animating", true);

                var isAjaxContent = (item.children("." + LINK).data(CONTENTURL) || that._contentUrls[itemIndex] || false) && contentHolder.is(EMPTY),
                    showContentElement = function() {
                        oldTab.removeAttr(ARIA_SELECTED);
                        item.attr(ARIA_SELECTED, true);

                        that._current(item);

                        contentElement
                            .addClass(ACTIVESTATE)
                            .removeAttr(ARIA_HIDDEN)
                            .kendoStop(true, true)
                            .kendoAnimate( extend({ init: function() {
                                that.trigger(SHOW, { item: item[0], contentElement: contentHolder[0] });
                                kendo.resize(contentHolder);
                            } }, animation, {
                                complete: function() {
                                    // See https://github.com/telerik/kendo-ui-core/issues/6660
                                    that.element.css('min-height', oldMinHeight);
                                    item.removeAttr("data-animating");

                                    that.trigger(ACTIVATE, { item: item[0], contentElement: contentHolder[0] });
                                    kendo.resize(contentHolder);

                                    // Force IE and Edge rendering to fix visual glitches telerik/kendo-ui-core#2777.
                                    if (isAnimationEnabled && (kendo.support.browser.msie || kendo.support.browser.edge)) {
                                        contentHolder.finish().animate({
                                            opacity: 0.9
                                        },"fast", "linear", function() {
                                            contentHolder.finish().animate({
                                                opacity: 1
                                            },"fast", "linear");
                                        });
                                    }
                                }
                            } ) );
                    },
                    showContent = function() {
                        if (!isAjaxContent) {
                            showContentElement();
                            that.trigger("change");
                        } else {
                            item.removeAttr("data-animating");
                            that.ajaxRequest(item, contentHolder, function() {
                                item.attr("data-animating", true);
                                showContentElement();
                                that.trigger("change");
                            });
                        }

                        if (that._scrollableModeActive) {
                            that._scrollTabsToItem(item);
                        }

                    };

                // See https://github.com/telerik/kendo-ui-core/issues/6660
                var oldMinHeight = that.element.css('min-height');

                if (that.options.applyMinHeight) {
                    that.element.css('min-height', that.element.outerHeight());
                }

                visibleContents.removeClass(ACTIVESTATE);
                that.tabGroup.find("." + TABONTOP).removeClass(TABONTOP);
                item.addClass(TABONTOP).css("z-index");

                if (kendo.size(animation.effects)) {
                    item.kendoAddClass(ACTIVESTATE, { duration: animation.duration });
                } else {
                    item.addClass(ACTIVESTATE);
                }

                visibleContents.attr(ARIA_HIDDEN, true);

                if (visibleContents.length) {
                    visibleContents
                        .kendoStop(true, true)
                        .kendoAnimate(extend( {
                            complete: showContent
                       }, close ));
                } else {
                    showContent();
                }

                return true;
            },

            ajaxRequest: function(element, content, complete, url) {
                element = this.tabGroup.find(element);

                var that = this,
                    xhr = $.ajaxSettings.xhr,
                    link = element.find("." + LINK),
                    data = {},
                    halfWidth = element.width() / 2,
                    fakeProgress = false,
                    statusIcon = element.find(".k-loading").removeClass("k-complete");

                if (!statusIcon[0]) {
                    statusIcon = $("<span class='k-loading'/>").prependTo(element);
                }

                var endState = halfWidth * 2 - statusIcon.width();

                var oldProgressAnimation = function() {
                    statusIcon.animate({ marginLeft: (parseInt(statusIcon.css("marginLeft"), 10) || 0) < halfWidth ? endState : 0 }, 500, oldProgressAnimation);
                };

                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
                    setTimeout(oldProgressAnimation, 40);
                }

                 url = url || link.data(CONTENTURL) || that._contentUrls[element.index()] || link.attr(HREF);
                that.inRequest = true;

                var ajaxOptions = {
                    type: "GET",
                    cache: false,
                    url: url,
                    dataType: "html",
                    data: data,
                    xhr: function() {
                        var current = this,
                            request = xhr(),
                            event = current.progressUpload ? "progressUpload" : current.progress ? "progress" : false;

                        if (request) {
                            $.each([ request, request.upload ], function() {
                                if (this.addEventListener) {
                                    this.addEventListener("progress", function(evt) {
                                        if (event) {
                                            current[event](evt);
                                        }
                                    }, false);
                                }
                            });
                        }

                        current.noProgress = !(window.XMLHttpRequest && ('upload' in new XMLHttpRequest()));
                        return request;
                    },

                    progress: function(evt) {
                        if (evt.lengthComputable) {
                            var percent = parseInt((evt.loaded / evt.total * 100), 10) + "%";
                            statusIcon
                                .stop(true)
                                .addClass("k-progress")
                                .css({
                                    "width": percent,
                                    "marginLeft": 0
                                });
                        }
                    },

                    error: function(xhr, status) {
                        if (that.trigger("error", { xhr: xhr, status: status })) {
                            this.complete();
                        }
                    },

                    stopProgress: function() {
                        clearInterval(fakeProgress);
                        statusIcon
                            .stop(true)
                            .addClass("k-progress")
                            [0].style.cssText = "";
                    },

                    complete: function(xhr) {
                        that.inRequest = false;
                        if (this.noProgress) {
                            setTimeout(this.stopProgress, 500);
                        } else {
                            this.stopProgress();
                        }

                        if (xhr.statusText == "abort") {
                            statusIcon.remove();
                        }
                    },

                    success: function(data) {
                        statusIcon.addClass("k-complete");
                        try {
                            var current = this,
                                loaded = 10;

                            if (current.noProgress) {
                                statusIcon.width(loaded + "%");
                                fakeProgress = setInterval(function() {
                                    current.progress({ lengthComputable: true, loaded: Math.min(loaded, 100), total: 100 });
                                    loaded += 10;
                                }, 40);
                            }

                            kendo.destroy(content);
                            content.html(data);
                        } catch (e) {
                            var console = window.console;

                            if (console && console.error) {
                                console.error(e.name + ": " + e.message + " in " + url);
                            }
                            this.error(this.xhr, "error");
                        }

                        if (complete) {
                            complete.call(that, content);
                        }

                        that.trigger(CONTENTLOAD, { item: element[0], contentElement: content[0] });
                    }
                };

                if (typeof url === "object") {
                    ajaxOptions = $.extend(true, {}, ajaxOptions, url);

                    if (isFunction(ajaxOptions.url)) {
                        ajaxOptions.url = ajaxOptions.url();
                    }
                }

                that.xhr = $.ajax(ajaxOptions);
            },

            append: function(tab) {
                var that = this,
                    inserted = that._create(tab);

                each(inserted.tabs, function(idx) {
                    var contents = inserted.contents[idx];
                    that.tabGroup.append(this);
                    if (that.options.tabPosition == "bottom") {
                        that.tabWrapper.before(contents);
                    } else {
                        that.wrapper.append(contents);
                    }
                });

                updateFirstLast(that.tabGroup);
                that._updateContentElements();
                that.resize(true);

                return that;
            },

            contentElement: function(itemIndex) {
                if (isNaN(itemIndex - 0)) {
                    return undefined$1;
                }

                var contentElements = this.contentElements && this.contentElements[0] && !kendo.kineticScrollNeeded ? this.contentElements : this.contentAnimators;
                var id = $(this.tabGroup.children()[itemIndex]).attr(ARIA_CONTROLS);

                if (contentElements) {
                    for (var i = 0, len = contentElements.length; i < len; i++) {
                        if (contentElements.eq(i).closest(".k-content")[0].id == id) {
                            return contentElements[i];
                        }
                    }
                }

                return undefined$1;
            },

            contentHolder: function(itemIndex) {
                var contentElement = $(this.contentElement(itemIndex)),
                    scrollContainer = contentElement.children(".km-scroll-container");

                return kendo.support.touch && scrollContainer[0] ? scrollContainer : contentElement;
            },

            deactivateTab: function(item) {
                var that = this,
                    animationSettings = that.options.animation,
                    animation = animationSettings.open,
                    close = extend({}, animationSettings.close),
                    hasCloseAnimation = close && "effects" in close;
                item = that.tabGroup.find(item);

                close = extend( hasCloseAnimation ? close : extend({ reverse: true }, animation), { hide: true });

                if (kendo.size(animation.effects)) {
                    item.kendoRemoveClass(ACTIVESTATE, { duration: animation.duration });
                } else {
                    item.removeClass(ACTIVESTATE);
                }

                item.removeAttr(ARIA_SELECTED);

                that.contentAnimators
                        .filter("." + ACTIVESTATE)
                        .kendoStop(true, true)
                        .kendoAnimate( close )
                        .removeClass(ACTIVESTATE)
                        .attr(ARIA_HIDDEN, true);
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                if (that._refreshHandler) {
                    that.dataSource.unbind("change", that._refreshHandler);
                }

                that.wrapper.off(NS);
                that.tabGroup.off(NS);

                if (that._scrollableModeActive) {
                    that._scrollPrevButton.off().remove();
                    that._scrollNextButton.off().remove();
                }

                kendo.destroy(that.wrapper);
            },

            disable: function(element) {
                this._toggleDisabled(element, false);

                return this;
            },

            enable: function(element, state) {
                this._toggleDisabled(element, state !== false);

                return this;
            },

            insertAfter: function(tab, referenceTab) {
                if ($(tab).is($(referenceTab))) {
                    referenceTab = this.tabGroup.find(referenceTab).prev();
                } else {
                    referenceTab = this.tabGroup.find(referenceTab);
                }

                var that = this,
                    inserted = that._create(tab),
                    referenceContent = that.element.find("[id='" + referenceTab.attr(ARIA_CONTROLS) + "']");

                each(inserted.tabs, function(idx) {
                    var contents = inserted.contents[idx];
                    var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;

                    referenceTab.after(this);
                    referenceContent.after(contents);

                    that._moveUrlItem(fromIndex, $(this).index());
                });

                updateFirstLast(that.tabGroup);
                that._updateContentElements(inserted.newTabsCreated);
                that.resize(true);

                return that;
            },

            insertBefore: function(tab, referenceTab) {
                if ($(tab).is($(referenceTab))) {
                    referenceTab = this.tabGroup.find(referenceTab).next();
                } else {
                    referenceTab = this.tabGroup.find(referenceTab);
                }

                var that = this,
                    inserted = that._create(tab),
                    referenceContent = that.element.find("[id='" + referenceTab.attr(ARIA_CONTROLS) + "']");

                each(inserted.tabs, function(idx) {
                    var contents = inserted.contents[idx];
                    var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;

                    referenceTab.before(this);
                    referenceContent.before(contents);

                    that._moveUrlItem(fromIndex, $(this).index());
                });

                updateFirstLast(that.tabGroup);
                that._updateContentElements(inserted.newTabsCreated);
                that.resize(true);

                return that;
            },

            items: function() {
                return this.tabGroup[0].children;
            },

            refresh: function(e) {
                var that = this,
                    options = that.options,
                    encoded = kendo.getter(options.dataEncodedField),
                    text = kendo.getter(options.dataTextField),
                    content = kendo.getter(options.dataContentField),
                    contentUrl = kendo.getter(options.dataContentUrlField),
                    image = kendo.getter(options.dataImageUrlField),
                    url = kendo.getter(options.dataUrlField),
                    sprite = kendo.getter(options.dataSpriteCssClass),
                    idx,
                    tabs = [],
                    tab,
                    action,
                    view = that.dataSource.view(),
                    length;


                e = e || {};
                action = e.action;

                if (action) {
                   view = e.items;
                }

                for (idx = 0, length = view.length; idx < length; idx ++) {
                    tab = {
                        text: text(view[idx])
                    };

                    if (options.tabTemplate) {
                        tab.model = view[idx];
                        tab.template = options.tabTemplate;
                    }

                    if (options.dataEncodedField) {
                        tab.encoded = encoded(view[idx]);
                    }

                    if (options.dataContentField) {
                        tab.content = content(view[idx]);
                    }

                    if (options.dataContentUrlField) {
                        tab.contentUrl = contentUrl(view[idx]);
                    }

                    if (options.dataUrlField) {
                        tab.url = url(view[idx]);
                    }

                    if (options.dataImageUrlField) {
                        tab.imageUrl = image(view[idx]);
                    }

                    if (options.dataSpriteCssClass) {
                        tab.spriteCssClass = sprite(view[idx]);
                    }

                    tabs[idx] = tab;
                }

                if (e.action == "add") {
                    if (e.index < that.tabGroup.children().length) {
                        that.insertBefore(tabs, that.tabGroup.children().eq(e.index));
                    } else {
                        that.append(tabs);
                    }
                } else if (e.action == "remove") {
                    for (idx = 0; idx < view.length; idx++) {
                       that.remove(e.index);
                    }
                } else if (e.action == "itemchange") {
                    idx = that.dataSource.view().indexOf(view[0]);
                    if (e.field === options.dataTextField) {
                        that.tabGroup.children().eq(idx).find(".k-link").text(view[0].get(e.field));
                    }

                    if (e.field === options.dataUrlField) {
                        that._contentUrls[idx] = view[0].get(e.field);
                    }
                } else {
                    that.trigger("dataBinding");
                    that.remove("li");
                    that._contentUrls = [];
                    that.append(tabs);
                    that.trigger("dataBound");
                }
            },

            reload: function(element) {
                element = this.tabGroup.find(element);
                var that = this;
                var contentUrls = that._contentUrls;

                element.each(function() {
                    var item = $(this),
                        contentUrl = item.find("." + LINK).data(CONTENTURL) || contentUrls[item.index()],
                        content = that.contentHolder(item.index());

                    if (contentUrl) {
                        that.ajaxRequest(item, content, null, contentUrl);
                    }
                });

                return that;
            },

            remove: function(elements) {
                var that = this;
                var type = typeof elements;
                var contents;

                if (type === "string") {
                    elements = that.tabGroup.find(elements);
                } else if (type === "number") {
                    elements = that.tabGroup.children().eq(elements);
                }

                contents = elements.map(function() {
                    var idx = $(this).index();
                    var content = that.contentElement(idx);

                    kendo.destroy(content);
                    that._removeUrlItem(idx);

                    return content;
                });

                elements.remove();
                contents.empty();
                contents.remove();

                that._updateContentElements();
                that.resize(true);

                return that;
            },

            select: function(element) {
                var that = this;

                if (arguments.length === 0) {
                    return that.tabGroup.children("li." + ACTIVESTATE);
                }

                if (!isNaN(element)) {
                    element = that.tabGroup.children().get(element);
                }

                element = that.tabGroup.find(element);
                $(element).each(function(index, item) {
                    item = $(item);
                    if (!item.hasClass(ACTIVESTATE) && !that.trigger(SELECT, { item: item[0], contentElement: that.contentHolder(item.index())[0] })) {
                        that.activateTab(item);
                    }
                });

                return that;
            },

            value: function(value) {
                var that = this;

                if (value !== undefined$1) {
                    if (value != that.value()) {
                       that.tabGroup.children().each(function() {
                            if (kendo.trim($(this).text()) == value) {
                                that.select(this);
                            }
                       });
                    }
                } else {
                    return that.select().text();
                }
            },

            _active: function() {
                var item = this.tabGroup.children().filter("." + ACTIVESTATE);

                item = item[0] ? item : this._endItem("first");
                if (item[0]) {
                    this._current(item);
                }
            },

            _animations: function(options) {
                if (options && ("animation" in options) && !options.animation) {
                    options.animation = { open: { effects: {} }, close: { effects: {} } }; // No animation
                }
            },

            _appendUrlItem: function(url) {
                this._contentUrls.push(url);
            },

            _attachEvents: function() {
                var that = this,
                    options = that.options;

                that.wrapper
                    .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS, HOVERABLEITEMS, that._toggleHover)
                    .on("focus" + NS, that._active.bind(that))
                    .on("blur" + NS, function() { that._current(null); });

                that._keyDownProxy = that._keydown.bind(that);

                if (options.navigatable) {
                    that.wrapper.on("keydown" + NS, that._keyDownProxy);
                }

                that.tabGroup
                    .on(CLICK + NS, ".k-disabled .k-link", false)
                    .on(CLICK + NS, " > " + NAVIGATABLEITEMS, that._itemClick.bind(that));
            },

            _click: function(item) {
                var that = this,
                    link = item.find("." + LINK),
                    href = link.attr(HREF),
                    collapse = that.options.collapsible,
                    index = item.index(),
                    contentHolder = that.contentHolder(index),
                    prevent, isAnchor,
                    neighbours = item.parent().children(),
                    oldFocusedTab = neighbours.filter("." + FOCUSEDSTATE);

                if (item.closest(".k-widget")[0] != that.wrapper[0]) {
                    return;
                }

                if (item.is("." + DISABLEDSTATE + (!collapse ? ",." + ACTIVESTATE : ""))) {
                    oldFocusedTab.removeClass(FOCUSEDSTATE);
                    that._focused = item;

                    item.addClass(FOCUSEDSTATE);
                    that._current(item);

                    if (that._scrollableModeActive) {
                        that._scrollTabsToItem(item);
                    }
                    return true;
                }

                isAnchor = link.data(CONTENTURL) || that._contentUrls[index] || (href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1));
                prevent = !href || isAnchor;

                if (that.tabGroup.children("[data-animating]").length) {
                    return prevent;
                }

                if (that.trigger(SELECT, { item: item[0], contentElement: contentHolder[0] })) {
                    return true;
                }

                if (prevent === false) {
                    return;
                }

                if (collapse && item.is("." + ACTIVESTATE)) {
                    that.deactivateTab(item);
                    return true;
                }

                if (that.activateTab(item)) {
                    prevent = true;
                }

                return prevent;
            },

            _create: function(tab) {
                var that = this,
                tabs,
                contents,
                content,
                newTabsCreated = false;

                tab = tab instanceof kendo.data.ObservableArray ? tab.toJSON() : tab;

                if ($.isPlainObject(tab) || Array.isArray(tab)) {
                    tab = Array.isArray(tab) ? tab : [tab];
                    newTabsCreated = true;

                    tabs = map(tab, function(value, idx) {
                                that._appendUrlItem(tab[idx].contentUrl || null);

                                return $(TabStrip.renderItem({
                                    group: that.tabGroup,
                                    item: extend(value, { index: idx })
                                }));
                            });

                    contents = map( tab, function(value, idx) {
                                if (typeof value.content == "string" || value.contentUrl) {
                                    var tabstripContent = $(TabStrip.renderContent({
                                        item: extend(value, { index: idx })
                                    }));

                                    kendo.applyStylesFromKendoAttributes(tabstripContent, ["display"]);
                                    return tabstripContent;
                                }
                            });
                } else {
                    if (typeof tab == "string" && tab[0] != "<") {
                        tabs = that.element.find(tab);
                    } else {
                        tabs = $(tab);
                    }
                    contents = $();
                    tabs.each(function() {
                        if (/k-tabstrip-items/.test(this.parentNode.className)) {
                            var element = that.element.find("[id='" + this.getAttribute(ARIA_CONTROLS) + "']");
                            content = element;
                        } else {
                            content = $("<div class='" + CONTENT + "'/>");
                        }

                        contents = contents.add(content);
                    });

                    updateTabClasses(tabs);
                }

                return { tabs: tabs, contents: contents, newTabsCreated: newTabsCreated };
            },

            _current: function(candidate) {
                var that = this,
                    focused = that._focused;

                if (candidate === undefined$1) {
                    return focused;
                }

                if (focused) {
                    focused.removeClass(FOCUSEDSTATE);
                }

                if (candidate) {
                    if (!candidate.hasClass(ACTIVESTATE)) {
                        candidate.addClass(FOCUSEDSTATE);
                    }
                }

                that._focused = candidate;
            },

            _dataSource: function() {
                var that = this;

                if (that.dataSource && that._refreshHandler) {
                    that.dataSource.unbind("change", that._refreshHandler);
                } else {
                    that._refreshHandler = that.refresh.bind(that);
                }

                that.dataSource = kendo.data.DataSource.create(that.options.dataSource)
                                    .bind("change", that._refreshHandler);
            },

            _elementId: function(element, idx, tab) {
                var elementId = element.attr("id"),
                    wrapperId = this.element.attr("id"),
                    guid = kendo.guid();

                if (!elementId || elementId.indexOf(wrapperId + "-") > -1) {
                    var tabStripID = (wrapperId || guid) + "-";

                    if (tab) {
                        tabStripID += "tab-";
                    }

                    return tabStripID + (idx + 1);
                }

                return elementId;
            },

            _endItem: function(action) {
                return this.tabGroup.children(NAVIGATABLEITEMS)[action]();
            },

            _getItem: function(action) {
                return this.tabGroup.children(KEYBOARDNAVIGATABLEITEMS)[action]();
            },

            _initialActivate: function() {
                var that = this,
                    selectedItems = that.tabGroup.children("li." + ACTIVESTATE),
                    content = that.contentHolder(selectedItems.index());

                if (selectedItems[0] && content.length > 0 && content[0].childNodes.length === 0) {
                    that.activateTab(selectedItems.eq(0));
                }
            },

            _item: function(item, action) {
                var endItem;
                if (action === PREV) {
                    endItem = "last";
                } else {
                    endItem = "first";
                }

                if (!item) {
                    return this._endItem(endItem);
                }

                item = item[action]();

                if (!item[0]) {
                    item = this.tabGroup.children(KEYBOARDNAVIGATABLEITEMS)[endItem]();
                }

                if (item.hasClass(DISABLEDSTATE)) {
                    item.addClass(FOCUSEDSTATE);
                }
                if (item.hasClass(DISABLEDSTATE) || item.hasClass(ACTIVESTATE)) {
                    this._focused = item;
                }

                return item;
            },

            _itemClick: function(e) {
                var that = this,
                    wr = that.wrapper[0];

                if (wr !== document.activeElement) {
                    var msie = kendo.support.browser.msie;
                    if (msie) {
                        try {
                            // does not scroll to the active element
                            wr.setActive();
                        } catch (j) {
                            wr.focus();
                        }
                    } else {
                        wr.focus();
                    }
                }

                if (that._click($(e.currentTarget))) {
                    e.preventDefault();
                }
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    current = that._current(),
                    rtl = that._isRtl,
                    isHorizontal = /top|bottom/.test(that.options.tabPosition),
                    action;

                if (e.target != e.currentTarget || !current) {
                    return;
                }

                if (key === keys.DOWN && !isHorizontal) {
                    action = NEXT;
                } else if (key === keys.UP && !isHorizontal) {
                    action = PREV;
                } else if (key === keys.RIGHT && isHorizontal) {
                    action = rtl ? PREV : NEXT;
                } else if (key === keys.LEFT && isHorizontal) {
                    action = rtl ? NEXT : PREV;
                } else if (key == keys.ENTER || key == keys.SPACEBAR) {
                    that._click(current);
                    e.preventDefault();
                } else if (key == keys.HOME) {
                    that._click(that._getItem("first"));
                    e.preventDefault();
                    return;
                } else if (key == keys.END) {
                    that._click(that._getItem("last"));
                    e.preventDefault();
                    return;
                }

                if (action) {
                    that._click(that._item(current, action));
                    e.preventDefault();
                }
            },

            _moveUrlItem: function(from, to) {
                this._contentUrls.splice(to, 0, this._contentUrls.splice(from, 1)[0]);
            },

            _processContentUrls: function() {
                var that = this;

                if (that._contentUrls.length) {
                    that.tabGroup.children(".k-item")
                        .each(function(index, item) {
                            var url = that._contentUrls[index];

                            if (typeof url === 'string') {
                                $(item).find(">." + LINK).data(CONTENTURL, url);
                            }
                        });
                } else {
                    that._contentUrls.length = that.tabGroup.find("li.k-item").length;
                }
            },

            _removeUrlItem: function(index) {
                this._contentUrls.splice(index, 1);
            },

            _resize: function() {
                this._scrollable();
            },

            _scrollable: function() {
                var that = this,
                    options = that.options,
                    wrapperOffsetWidth,
                    tabGroupScrollWidth,
                    scrollPrevButton,
                    scrollNextButton;

                if (that._scrollableAllowed()) {

                    that.wrapper.addClass("k-tabstrip-scrollable");

                    wrapperOffsetWidth = that.wrapper[0].offsetWidth;
                    tabGroupScrollWidth = that.tabGroup[0].scrollWidth;

                    if (tabGroupScrollWidth > wrapperOffsetWidth && !that._scrollableModeActive) {
                        that._nowScrollingTabs = false;
                        that._isRtl = kendo.support.isRtl(that.element);
                        var mouseDown = kendo.support.touch ? "touchstart" : "mousedown";
                        var mouseUp = kendo.support.touch ? "touchend" : "mouseup";
                        var browser = kendo.support.browser;
                        var isRtlScrollDirection = that._isRtl && !browser.msie && !browser.edge;

                        that.tabWrapper.prepend(scrollButtonHtml("prev", "caret-alt-left"));
                        that.tabWrapper.append(scrollButtonHtml("next", "caret-alt-right"));

                        scrollPrevButton = that._scrollPrevButton = that.tabWrapper.children(".k-tabstrip-prev");
                        scrollNextButton = that._scrollNextButton = that.tabWrapper.children(".k-tabstrip-next");

                        scrollPrevButton.on(mouseDown + NS, function() {
                            that._nowScrollingTabs = true;
                            that._scrollTabsByDelta(options.scrollable.distance * (isRtlScrollDirection ? 1 : -1));
                        });

                        scrollNextButton.on(mouseDown + NS, function() {
                            that._nowScrollingTabs = true;
                            that._scrollTabsByDelta(options.scrollable.distance * (isRtlScrollDirection ? -1 : 1));
                        });

                        scrollPrevButton.add(scrollNextButton).on(mouseUp + NS, function() {
                            that._nowScrollingTabs = false;
                        });

                        that._scrollableModeActive = true;

                        that._toggleScrollButtons();
                    } else if (that._scrollableModeActive && tabGroupScrollWidth <= wrapperOffsetWidth) {
                        that._scrollableModeActive = false;

                        that.wrapper.removeClass("k-tabstrip-scrollable");

                        that._scrollPrevButton.off().remove();
                        that._scrollNextButton.off().remove();
                    } else if (!that._scrollableModeActive) {
                        that.wrapper.removeClass("k-tabstrip-scrollable");
                    } else {
                        that._toggleScrollButtons();
                    }
                }
            },

            _scrollableAllowed: function() {
                var options = this.options;

                if (options.scrollable && !options.scrollable.distance) {
                    options.scrollable = { distance: DEFAULTDISTANCE };
                }

                return options.scrollable && !isNaN(options.scrollable.distance) && (options.tabPosition == "top" || options.tabPosition == "bottom");
            },

            _scrollTabsToItem: function(item) {
                var that = this,
                    tabGroup = that.tabGroup,
                    currentScrollOffset = kendo.scrollLeft(tabGroup),
                    itemWidth = outerWidth(item),
                    itemOffset = that._isRtl ? item.position().left : item.position().left - tabGroup.children().first().position().left,
                    tabGroupWidth = tabGroup[0].offsetWidth,
                    browser = kendo.support.browser,
                    itemPosition;

                if (that._isRtl && (browser.mozilla || (browser.webkit && browser.version >= 85))) {
                    currentScrollOffset = currentScrollOffset * -1;
                }

                if (that._isRtl) {
                    if (itemOffset < 0) {
                        itemPosition = currentScrollOffset + itemOffset - (tabGroupWidth - currentScrollOffset);
                    } else if (itemOffset + itemWidth > tabGroupWidth) {
                        itemPosition = currentScrollOffset + itemOffset - itemWidth;
                    }
                } else {
                    if (currentScrollOffset + tabGroupWidth < itemOffset + itemWidth) {
                        itemPosition = itemOffset + itemWidth - tabGroupWidth;
                    } else if (currentScrollOffset > itemOffset) {
                        itemPosition = itemOffset;
                    }
                }

                tabGroup.finish().animate({ "scrollLeft": itemPosition }, "fast", "linear", function() {
                    that._toggleScrollButtons();
                });
            },

            _scrollTabsByDelta: function(delta) {
                var that = this;
                var tabGroup = that.tabGroup;
                var scrLeft = kendo.scrollLeft(tabGroup);
                var browser = kendo.support.browser;

                if (that._isRtl && (browser.mozilla || (browser.webkit && browser.version >= 85))) {
                    scrLeft = scrLeft * -1;
                }

                tabGroup.finish().animate({ "scrollLeft": scrLeft + delta }, "fast", "linear", function() {
                    if (that._nowScrollingTabs && !jQuery.fx.off) {
                        that._scrollTabsByDelta(delta);
                    } else {
                        that._toggleScrollButtons();
                    }
                });
            },

            _sortable: function() {
                var that = this,
                options = that.options,
                position = options.tabPosition,
                axis = position === 'left' || position === 'right' ? 'y' : 'x';

                if (!that.options.sortable) {
                    return;
                }

                that.sortable = new kendo.ui.Sortable(that.tabGroup, {
                    filter: "li.k-tabstrip-item",
                    axis: axis,
                    container: that.tabWrapper,
                    hint: function (el) { return ("<div id='hint' class='k-tabstrip k-tabstrip-" + position + "'>\n                                <div class= 'k-tabstrip-items-wrapper k-hstack'>\n                                    <ul class='k-tabstrip-items k-reset'>\n                                        <li class='k-item k-tabstrip-item k-first k-active k-tab-on-" + position + "'>" + (el.html()) + "</li>\n                                    </ul>\n                                </div>\n                            </div>"); },
                    change: that._sortChange.bind(that),
                    start: function (e) { return that.activateTab(e.item); }
                });

            },

            _sortChange: function(e) {
                var that = this,
                    reference = that.tabGroup.children().eq(e.newIndex);

                if (e.oldIndex < e.newIndex) {
                    that.insertAfter(e.item, reference);
                } else {
                    that.insertBefore(e.item, reference);
                }
            },

            _tabPosition: function() {
                var that = this,
                    tabPosition = that.options.tabPosition;

                that.wrapper.addClass("k-tabstrip-" + tabPosition);

                if (tabPosition == "bottom") {
                    that.tabWrapper.appendTo(that.wrapper);
                }

                if (tabPosition === "left" || tabPosition === "right") {
                    that.tabGroup.attr(ARIA_ORIENTATION, "vertical");
                }

                that.resize(true);
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVERSTATE, e.type == MOUSEENTER);
            },

            _toggleDisabled: function(element, enable) {
                element = this.tabGroup.find(element);
                element.each(function() {
                    $(this)
                        .toggleClass(DISABLEDSTATE, !enable)
                        .attr(ARIA_DISABLED, !enable);
                });
            },

            _toggleScrollButtons: function() {
                var that = this,
                    ul = that.tabGroup,
                    scrollLeft = kendo.scrollLeft(ul);

                    that._scrollPrevButton.toggleClass('k-disabled', scrollLeft === 0);
                    that._scrollNextButton.toggleClass('k-disabled', scrollLeft === ul[0].scrollWidth - ul[0].offsetWidth);
            },

            _updateClasses: function() {
                var that = this,
                    tabs, activeItem, activeTab;
                var isHorizontal = /top|bottom/.test(that.options.tabPosition);

                that.wrapper.addClass("k-widget k-tabstrip");

                if (!that.tabGroup) {
                    that.tabGroup = that.wrapper.children("ul");
                    that.tabGroup.wrap('<div />');
                    that.tabWrapper = that.tabGroup.parent();
                }

                if (!that.tabGroup[0]) {
                    that.tabGroup = $("<ul />").prependTo(that.wrapper);
                    that.tabGroup.wrap('<div />');
                    that.tabWrapper = that.tabGroup.parent();
                }

                that.tabWrapper.addClass('k-tabstrip-items-wrapper');
                that.tabWrapper.addClass(isHorizontal ? 'k-hstack' : 'k-vstack');
                that.tabGroup.addClass('k-tabstrip-items k-reset');

                tabs = that.tabGroup.find("li").addClass("k-tabstrip-item k-item");

                if (tabs.length) {
                    activeItem = tabs.filter("." + ACTIVESTATE).index();
                    activeTab = activeItem >= 0 ? activeItem : undefined$1;

                    that.tabGroup // Remove empty text nodes
                        .contents()
                        .filter(function() { return (this.nodeType == 3 && !trim(this.nodeValue)); })
                        .remove();
                }

                if (activeItem >= 0) {
                    tabs.eq(activeItem).addClass(TABONTOP);
                }

                that.contentElements = that.wrapper.children("div:not(.k-tabstrip-items-wrapper)");

                that.contentElements
                    .addClass(CONTENT)
                    .eq(activeTab)
                    .addClass(ACTIVESTATE)
                    .css({ display: "block" });

                if (tabs.length) {
                    updateTabClasses(tabs);

                    updateFirstLast(that.tabGroup);
                    that._updateContentElements(true);
                }
            },

            _updateContentElements: function(isInitialUpdate) {
                var that = this,
                    contentUrls = that._contentUrls,
                    items = that.tabGroup.children(".k-item"),
                    contentElements = that.wrapper.children("div:not(.k-tabstrip-items-wrapper)"),
                    _elementId = that._elementId.bind(that);

                if (contentElements.length && (items.length > contentElements.length)) {
                    contentElements.each(function(idx) {
                        // Generate an ID for each content element
                        var contentId = _elementId($(this), idx),
                            item = items.filter("[aria-controls=" + (contentId || 0) + "]")[0],
                            tabId;

                        if (!item && isInitialUpdate) {
                            // On initialization of the widget get the tab by its index
                            item = items[idx];
                        }

                        if (item) {
                            // set the tab aria-controls attribute to the content ID
                            item.setAttribute(ARIA_CONTROLS, contentId);
                            tabId = item.id = _elementId($(item), idx, true);
                            this.setAttribute(ARIA_LABELLEDBY, tabId);
                        }

                        // set the get (possibly existing) ID on the content element
                        this.setAttribute("id", contentId);
                    });
                } else {
                    items.each(function(idx) {
                        var currentContent = contentElements.eq(idx),
                            contentId = _elementId(currentContent, idx),
                            tabId;

                        // set the tab aria-controls attribute to the content ID
                        this.setAttribute(ARIA_CONTROLS, contentId);

                        tabId = this.id = _elementId($(this), idx, true);

                        if (!currentContent.length && contentUrls[idx]) {
                            // Append content element in case contentUrl is used
                            $("<div class='" + CONTENT + "'/>").appendTo(that.wrapper).attr("id", contentId);
                        } else {
                            // set the ID on the content element
                            currentContent.attr("id", contentId);

                            if (!$(this).children(".k-loading")[0] && !contentUrls[idx]) {
                                $("<span class='k-loading k-complete'/>").prependTo(this);
                            }
                        }

                        currentContent.attr("role", "tabpanel");
                        currentContent.attr("tabindex", "0");
                        currentContent.attr(ARIA_LABELLEDBY, tabId);
                        currentContent.filter(":not(." + ACTIVESTATE + ")").attr(ARIA_HIDDEN, true);
                    });
                }

                that.contentElements = that.contentAnimators = that.wrapper.children("div:not(.k-tabstrip-items-wrapper)"); // refresh the contents

                that.tabsHeight = outerHeight(that.tabGroup) +
                                  parseInt(that.wrapper.css("border-top-width"), 10) +
                                  parseInt(that.wrapper.css("border-bottom-width"), 10);

                if (kendo.kineticScrollNeeded && kendo.mobile.ui.Scroller) {
                    kendo.touchScroller(that.contentElements);
                    that.contentElements = that.contentElements.children(".km-scroll-container");
                }
            },

            _wrapper: function() {
                var that = this;

                if (that.element.is("ul")) {
                    that.wrapper = that.element.wrapAll("<div />").parent();
                } else {
                    that.wrapper = that.element;
                }
            }
        });

        // client-side rendering
        extend(TabStrip, {
            renderItem: function(options) {
                options = extend({ tabStrip: {}, group: {} }, options);

                var empty = templates.empty,
                    item = options.item,
                    templateOptions = extend(options, {
                        image: item.imageUrl ? templates.image : empty,
                        sprite: item.spriteCssClass ? templates.sprite : empty,
                        textWrapper: templates.textWrapper
                    }, rendering);

                    if (item.template) {
                        return templates.itemWrapper(templateOptions, kendo.template(item.template)(item.model));
                    }

                return templates.item(templateOptions);
            },

            renderContent: function(options) {
                return templates.content(extend(options, rendering));
            }
        });

        kendo.ui.plugin(TabStrip);

    })(window.kendo.jQuery);
    var kendo$5 = kendo;

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$4 = {
        id: "timepicker",
        name: "TimePicker",
        category: "web",
        description: "The TimePicker widget allows the end user to select a value from a list of predefined values or to type a new value.",
        depends: [ "calendar", "popup", "html.button", "label" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            keys = kendo.keys,
            html = kendo.html,
            parse = kendo.parseDate,
            activeElement = kendo._activeElement,
            extractFormat = kendo._extractFormat,
            support = kendo.support,
            browser = support.browser,
            ui = kendo.ui,
            Widget = ui.Widget,
            OPEN = "open",
            CLOSE = "close",
            CHANGE = "change",
            ns = ".kendoTimePicker",
            CLICK = "click" + ns,
            DISABLED = "disabled",
            READONLY = "readonly",
            LI = "li",
            SPAN = "<span></span>",
            FOCUSED = "k-focus",
            HOVER = "k-hover",
            HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
            MOUSEDOWN = "mousedown" + ns,
            MS_PER_MINUTE = 60000,
            MS_PER_DAY = 86400000,
            SELECTED = "k-selected",
            STATEDISABLED = "k-disabled",
            ARIA_SELECTED = "aria-selected",
            ARIA_EXPANDED = "aria-expanded",
            ARIA_HIDDEN = "aria-hidden",
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
            ID = "id",
            isArray = Array.isArray,
            extend = $.extend,
            DATE = Date,
            dateFormatRegExp = /d{1,2}|E{1,6}|e{1,6}|c{3,6}|c{1}|M{1,5}|L{1,5}|y{1,4}|H{1,2}|h{1,2}|k{1,2}|K{1,2}|m{1,2}|a{1,5}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|x{1,5}|X{1,5}|G{1,5}|q{1,5}|Q{1,5}|"[^"]*"|'[^']*'/g,
            LITERAL = "literal",
            MONTH = "month",
            HOUR = "hour",
            ZONE = "zone",
            WEEKDAY = "weekday",
            QUARTER = "quarter",
            DATE_FIELD_MAP = {
                "G": "era",
                "y": "year",
                "q": QUARTER,
                "Q": QUARTER,
                "M": MONTH,
                "L": MONTH,
                "d": "day",
                "E": WEEKDAY,
                "c": WEEKDAY,
                "e": WEEKDAY,
                "h": HOUR,
                "H": HOUR,
                "k": HOUR,
                "K": HOUR,
                "m": "minute",
                "s": "second",
                "a": "dayperiod",
                "x": ZONE,
                "X": ZONE,
                "z": ZONE,
                "Z": ZONE
            },
            NAME_TYPES = {
                month: {
                    type: "months",
                    minLength: 3,
                    standAlone: "L"
                },

                quarter: {
                    type: "quarters",
                    minLength: 3,
                    standAlone: "q"
                },

                weekday: {
                    type: "days",
                    minLength: {
                        E: 0,
                        c: 3,
                        e: 3
                    },
                    standAlone: "c"
                },

                dayperiod: {
                    type: "dayPeriods",
                    minLength: 0
                },

                era: {
                    type: "eras",
                    minLength: 0
                }
            },
            TODAY = new DATE(),
            MODERN_RENDERING_TEMPLATE = function (ref) {
                var mainSize = ref.mainSize;
                var messages = ref.messages;
                var buttonSize = ref.buttonSize;

                return '<div>' +
                "<div tabindex=\"0\" class=\"k-timeselector " + mainSize + "\">" +
                    '<div class="k-time-header">' +
                        '<span class="k-title"></span>' +
                        kendo.html.renderButton(("<button class=\"k-time-now\" title=\"Select now\" aria-label=\"Select now\">" + (messages.now) + "</button>"), {
                            fillMode: "flat",
                            size: buttonSize
                        }) +
                    '</div>' +
                    '<div class="k-time-list-container">' +
                        '<span class="k-time-highlight"></span>' +
                    '</div>' +
                '</div>' +
                NEW_RENDERING_FOOTER(buttonSize, messages) +
            '</div>';
        },
            NEW_RENDERING_FOOTER = function (buttonSize, messages) { return '<div class="k-time-footer k-actions k-actions-stretched k-actions-horizontal">' +
                kendo.html.renderButton(("<button class=\"k-time-accept\" title=\"Set time\" aria-label=\"Set time\">" + (messages.set) + "</button>"), {
                    size: buttonSize,
                    themeColor: "primary"
                }) +
                kendo.html.renderButton(("<button class=\"k-time-cancel\" title=\"Cancel changes\" aria-label=\"Cancel changes\">" + (messages.cancel) + "</button>"), {
                    size: buttonSize
                }) +
            '</div>'; },
            HIGHLIGHTCONTAINER = '<span class="k-time-highlight"></span>';

            TODAY = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);

        var TimeView = function(options) {
            var that = this,
            id = options.id;

            that.options = options;
            that._dates = [];

            that._createList(options.timeView && options.timeView.list === "scroll");

            if (id) {
                that._timeViewID = id + "_timeview";
                that._optionID = id + "_option_selected";

                that.ul.attr(ID, that._timeViewID);
            }

            that._heightHandler = that._height.bind(that);
            that._popup();
        };

        TimeView.prototype = {
            _createList: function(scroll) {
                if (scroll) {
                    this._createScrollList();
                } else {
                    this._createClassicRenderingList();
                }
            },
            _createScrollList: function() {
                var templateOptions = $.extend({}, this.options, {
                    mainSize: kendo.getValidCssClass("k-timeselector-", "size", this.options.size || "medium"),
                    buttonSize: this.options.size || "medium"
                });
                this.popupContent = $(kendo.template(MODERN_RENDERING_TEMPLATE)(templateOptions))
                .on(MOUSEDOWN, preventDefault);
                this.list = this.popupContent.find(".k-timeselector");

                this.ul = this.list.find(".k-time-list-container");
                this.popupContent.on("click" + ns, ".k-time-header button.k-time-now", this._nowClickHandler.bind(this));
                this.popupContent.on("click" + ns, ".k-time-footer button.k-time-cancel", this._cancelClickHandler.bind(this));
                this.popupContent.on("click" + ns, ".k-time-footer button.k-time-accept", this._setClickHandler.bind(this));
                this.list.on("mouseover" + ns, ".k-time-list-wrapper", this._mouseOverHandler.bind(this));
                this.list.on("keydown" + ns, this._scrollerKeyDownHandler.bind(this));
            },

            _scrollerKeyDownHandler: function(e) {
                var that = this,
                    key = e.keyCode,
                    list = $(e.currentTarget).find(".k-time-list-wrapper.k-focus"),
                    lists = that.list.find(".k-time-list-wrapper"),
                    length = lists.length,
                    index = lists.index(list),
                    isRtl = kendo.support.isRtl(that.wrapper),
                    itemHeight = getItemHeight(list.find(".k-item:visible").eq(0)),
                    container = list.find(".k-time-container.k-content.k-scrollable");

                if (!list.length) {
                    return;
                }

                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
                    if (index + 1 < length) {
                        that._focusList(lists.eq(index + 1));
                    }

                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
                    if (index - 1 >= 0) {
                        that._focusList(lists.eq(index - 1));
                    }
                } else if (key == keys.UP) {
                    container.scrollTop(container.scrollTop() - itemHeight);
                    e.preventDefault();
                } else if (key == keys.DOWN) {
                    container.scrollTop(container.scrollTop() + itemHeight);
                    e.preventDefault();
                } else if (key === keys.ENTER) {
                    that._setClickHandler(e);
                } else if (key === keys.ESC) {
                    that._cancelClickHandler(e);
                }
            },

            _mouseOverHandler: function(e) {
                this._focusList($(e.currentTarget));
            },

            _focusList: function(list) {
                this.list.find(".k-time-list-wrapper").removeClass(FOCUSED);
                list.addClass(FOCUSED);
                this.list.trigger("focus");
                this._scrollTop = list.find('.k-scrollable').scrollTop();
            },
            _createClassicRenderingList: function() {
                var that = this;
                var listParent = $('<div class="k-list ' + kendo.getValidCssClass("k-list-", "size", that.options.size) + '"><ul tabindex="-1" role="listbox" aria-hidden="true" unselectable="on" class="k-list-ul"/></div>');

                that.ul = listParent.find("ul")
                    .css({
                        overflow: support.kineticScrollNeeded ? "" : "auto"
                    })
                    .on(CLICK, LI, that._click.bind(that))
                    .on("mouseenter" + ns, LI, function() {
                        $(this).addClass(HOVER);
                    })
                    .on("mouseleave" + ns, LI, function() {
                        $(this).removeClass(HOVER);
                    });

                that.list = $("<div class='k-list-container k-list-scroller' unselectable='on'/>")
                    .append(listParent)
                    .on(MOUSEDOWN, preventDefault);

                that.template = function (data) { return ("<li tabindex=\"-1\" role=\"option\" class=\"k-list-item\" unselectable=\"on\"><span class=\"k-list-item-text\">" + data + "</span></li>"); };

            },
            current: function(candidate) {
                var that = this,
                    active = that.options.active;

                if (candidate !== undefined$1) {
                    if (that._current) {
                        that._current
                            .removeClass(SELECTED);
                            if (that._current && that._current.length) {
                                that._current[0].removeAttribute(ID);
                                that._current[0].removeAttribute(ARIA_SELECTED);
                            }
                    }

                    if (candidate) {
                        candidate = $(candidate).addClass(SELECTED)
                                                .attr(ID, that._optionID)
                                                .attr(ARIA_SELECTED, true);

                        that.scroll(candidate[0]);
                    }

                    that._current = candidate;

                    if (active) {
                        active(candidate);
                    }
                } else {
                    return that._current;
                }
            },

            _updateTitle: function() {
                this.list.find(".k-time-header > .k-title").html(kendo.toString(this._value, this.options.format, this.options.culture));
            },

            applyValue: function(value) {
                if (!value) {
                    return;
                }

                var is12hourFormat = includes(this.options.format.toLowerCase(), "t");
                var hours = value.getHours();
                var minutes = value.getMinutes();
                var seconds = value.getSeconds();
                var designator;
                var indexAttr = kendo.attr('index');
                var hoursList = this.ul.find('[' + indexAttr + '="1"]');
                var minutessList = this.ul.find('[' + indexAttr + '="2"]');
                var secondsList = this.ul.find('[' + indexAttr + '="3"]');
                var designatorList = this.ul.find('[' + indexAttr + '="4"]');

                if (is12hourFormat) {
                    if (hours >= 12) {
                        designator = "PM";
                        if (hours > 12) {
                            hours -= 12;
                        }
                    } else {
                        designator = "AM";
                        if (hours === 0) {
                            hours = 12;
                        }
                    }
                }

                this._internalScroll = true;
                if (hoursList.length) {
                    this._scrollListToPosition(hoursList, hours);
                }

                if (minutessList.length) {
                    this._scrollListToPosition(minutessList, minutes);
                }

                if (secondsList.length) {
                    this._scrollListToPosition(secondsList, seconds);
                }

                if (designatorList.length) {
                    this._scrollListToPosition(designatorList, designator);
                }
                this._internalScroll = false;
            },

            _scrollListToPosition: function(list, value) {
                var item = list.find('.k-item[data-value="' + pad(value) + '"]');
                var itemHeight = getItemHeight(item);

                list.scrollTop(list.find(".k-item:visible").index(item) * itemHeight);
            },

            close: function() {
                this.popup.close();
            },

            destroy: function() {
                var that = this;

                that.ul.off(ns);
                that.list.off(ns);
                if (that.popupContent) {
                    that.popupContent.off(ns);
                }
                if (that.popup) {
                    that.popup.destroy();
                }
            },

            open: function() {
                var that = this;
                var popupHovered;

                if (!that.ul[0].firstChild || (that.ul.find("li").length < 1)) {
                    that.bind();
                }

                // In some cases when the popup is opened resize is triggered which will cause it to close
                // Setting the below flag will prevent this from happening
                // Reference: https://github.com/telerik/kendo/pull/7553
                popupHovered = that.popup._hovered;
                that.popup._hovered = true;

                that.popup.open();

                setTimeout(function() {
                    that.popup._hovered = popupHovered;
                }, 1);

                if (that._current) {
                    that.scroll(that._current[0]);
                }
            },

            dataBind: function(dates) {
                var that = this,
                    options = that.options,
                    format = options.format,
                    toString = kendo.toString,
                    template = that.template,
                    length = dates.length,
                    idx = 0,
                    date,
                    html = "";

                for (; idx < length; idx++) {
                    date = dates[idx];

                    if (isInRange(date, options.min, options.max)) {
                        html += template(toString(date, format, options.culture));
                    }
                }

                that._html(html);
            },

            refresh: function() {
                var that = this,
                    options = that.options,
                    format = options.format,
                    offset = dst(),
                    ignoreDST = offset < 0,
                    value = kendo.parseDate(that._value),
                    parsedValue = value ? mergeDateAndTime(value, options.min) : mergeDateAndTime(new Date(), options.min),
                    min = options.min,
                    max = options.max,
                    msMin = getMilliseconds(min),
                    msMax = getMilliseconds(max),
                    msLastTime = getMilliseconds(lastTimeOption(options.interval)),
                    msInterval = options.interval * MS_PER_MINUTE,
                    toString = kendo.toString,
                    template = that.template,
                    start = options.useValueToRender ? parsedValue : new Date(+options.min),
                    startDate = new DATE(start),
                    msStart,
                    length,
                    html = "";

                if (ignoreDST) {
                    length = (MS_PER_DAY + (offset * MS_PER_MINUTE)) / msInterval;
                } else {
                    length = MS_PER_DAY / msInterval;
                }

                if (msMin != msMax || msLastTime === msMax) {
                    if (msMin > msMax) {
                        msMax += MS_PER_DAY;
                    }

                    length = ((msMax - msMin) / msInterval) + 1;
                }

                if (options.timeView && options.timeView.list === "scroll") {
                    html = that._createListContent(splitDateFormat(format));
                } else {
                    that.getDatesInRange(msStart, msMax, startDate, max, msInterval, start).forEach(function(date) {
                        html += template(toString(date, format, options.culture));
                    });
                }

                that._html(html);
            },

            _showAllHiddenItems: function() {
                var items = this.list.find('.k-time-container');
                var length = items.length;
                var item;

                for (var i = 0; i < length; i++) {
                    item = $(items[i]);
                    item.find('.k-item:hidden').show();
                    this._updateListBottomOffset(item);
                }
            },

            _updateListBottomOffset: function(list) {
                var itemHeight = getItemHeight(list.find(".k-item:visible").eq(0));
                var listHeight = list.outerHeight();
                var bottomOffset = listHeight - itemHeight;
                list.find(".k-scrollable-placeholder").css({
                    height: list.find("ul").height() + bottomOffset
                });
            },

            _updateHoursRange: function() {
                var that = this;
                var indexAttr = kendo.attr('index');
                var hoursList = this.ul.find('[' + indexAttr + '="1"]');
                var minHours = this._minHours;
                var maxHours = this._maxHours;
                var is12hourFormat = includes(this.options.format.toLowerCase(), "t");
                var useMax;
                var useMin;
                var selectedDesignator = this._findSelectedValue(this.ul.find('[' + indexAttr + '="4"]'));

                if (!hoursList.length) {
                    return;
                }

                if (is12hourFormat && selectedDesignator) {

                    if (selectedDesignator === "AM") {
                        if (minHours < 12) {
                            useMin = true;
                        }

                        if (maxHours < 12) {
                            useMax = true;
                        }
                    } else if (selectedDesignator === "PM") {

                        if (minHours > 12) {
                            useMin = true;
                            minHours -= 12;
                        }

                        if (maxHours > 12) {
                            useMax = true;
                            maxHours -= 12;
                        }
                    }

                    hoursList.find(".k-item").each(function(_, item) {
                        item = $(item);
                        var value = +item.attr("data-value");
                        if ((that._validateMin && useMin && value < minHours) || (that._validateMax && useMax && value > maxHours)) {
                            item.hide();
                        } else {
                            item.show();
                        }
                    });
                } else {
                    hoursList.find(".k-item").each(function(_, item) {
                        item = $(item);
                        var value = +item.attr("data-value");
                        if ((that._validateMin && value < minHours) ||
                            (that._validateMax && value > maxHours)) {
                            item.hide();
                        } else {
                            item.show();
                        }
                    });
                }

                this._updateListBottomOffset(hoursList);
            },

            _updateMinutesRange: function() {
                var that = this;
                var indexAttr = kendo.attr('index');
                var minutesList = this.ul.find('[' + indexAttr + '="2"]');
                var minHours = this._minHours;
                var maxHours = this._maxHours;
                var minMinutes = this._minMinutes;
                var maxMinutes = this._maxMinutes;
                var selectedHour = +this._findSelectedValue(this.ul.find('[' + indexAttr + '="1"]'));
                var is12hourFormat = includes(this.options.format.toLowerCase(), "t");
                var selectedDesignator = this._findSelectedValue(this.ul.find('[' + indexAttr + '="4"]'));

                if (is12hourFormat && selectedDesignator === "PM") {
                    selectedHour += 12;
                }

                if (!minutesList.length) {
                    return;
                }

                minutesList.find(".k-item").each(function(_, item) {
                    item = $(item);
                    var value = +item.attr("data-value");
                    if ((that._validateMin && value < minMinutes && minHours && selectedHour === minHours) ||
                        (that._validateMax && value > maxMinutes && maxHours && selectedHour === maxHours)) {
                        item.hide();
                    } else {
                        item.show();
                    }
                });

                this._updateListBottomOffset(minutesList);
            },

            _updateSecondsRange: function() {
                var that = this;
                var indexAttr = kendo.attr('index');
                var secondsList = this.ul.find('[' + indexAttr + '="3"]');
                var minSeconds = this._minSeconds;
                var maxSeconds = this._minSeconds;
                var minMinutes = this._minMinutes;
                var maxMinutes = this._maxMinutes;
                var selectedMinutes = +this._findSelectedValue(this.ul.find('[' + indexAttr + '="2"]'));

                if (!secondsList.length) {
                    return;
                }

                secondsList.find(".k-item").each(function(_, item) {
                    item = $(item);
                    var value = +item.attr("data-value");
                    if ((that._validateMin && value < minSeconds && minMinutes && selectedMinutes === minMinutes) ||
                        (that._validateMax && value > maxSeconds && maxMinutes && selectedMinutes === maxMinutes)) {
                        item.hide();
                    } else {
                        item.show();
                    }
                });

                this._updateListBottomOffset(secondsList);
            },

            _updateDesignatorRange: function() {
                var minHours = this._minHours;
                var maxHours = this._maxHours;
                var indexAttr = kendo.attr('index');
                var designatorList = this.ul.find('[' + indexAttr + '="4"]');

                if (!designatorList.length) {
                   return;
                }

                if (this._validateMin && minHours >= 12) {
                    designatorList.find('.k-item[data-value="AM"]').hide();
                } else {
                    designatorList.find('.k-item[data-value="AM"]').show();
                }

                if (this._validateMax && maxHours < 12) {
                    designatorList.find('.k-item[data-value="PM"]').hide();
                } else {
                    designatorList.find('.k-item[data-value="PM"]').show();
                }
            },


            _updateRanges: function() {
                if (!this.options.specifiedRange) {
                    return;
                }
                if (!this._currentlySelected) {
                    this._currentlySelected = new Date();
                }

                var max = this.options.endTime ? this.options.endTime : this.options.max;
                var min = this.options.startTime ? this.options.startTime : this.options.min;

                if (this.options.validateDate) {
                    if (max.getFullYear() === this._currentlySelected.getFullYear() &&
                        max.getMonth() === this._currentlySelected.getMonth() &&
                        max.getDate() === this._currentlySelected.getDate()) {
                        this._validateMax = true;
                    } else {
                        this._validateMax = false;
                    }

                    if (min.getFullYear() === this._currentlySelected.getFullYear() &&
                        min.getMonth() === this._currentlySelected.getMonth() &&
                        min.getDate() === this._currentlySelected.getDate()) {
                        this._validateMin = true;
                    } else {
                        this._validateMin = false;
                    }

                    if (!this._validateMax && !this._validateMin) {
                        this._showAllHiddenItems();
                        return;
                    }
                } else {
                    this._validateMax = true;
                    this._validateMin = true;
                }

                this._minMinutes = min.getMinutes();
                this._maxMinutes = max.getMinutes();
                this._minHours = min.getHours();
                this._maxHours = max.getHours();
                this._minSeconds = min.getSeconds();
                this._maxSeconds = max.getSeconds();

                this._updateDesignatorRange();
                this._updateHoursRange();
                this._updateMinutesRange();
                this._updateSecondsRange();
            },

            addTranslate: function() {
                var lists = this.ul.find(".k-time-container.k-content.k-scrollable");
                var length = lists.length;
                var list;
                var itemHeight;
                var listHeight;
                var topOffset;
                var translate;
                var bottomOffset;

                for (var i = 0; i < length; i++) {
                    list = lists.eq(i);
                    itemHeight = getItemHeight(list.find(".k-item:visible").eq(0));
                    listHeight = list.outerHeight();
                    topOffset = (listHeight - itemHeight) / 2;
                    translate = "translateY(" + topOffset + "px)";
                    bottomOffset = listHeight - itemHeight;
                    list.find("ul").css({
                        transform: translate,
                        "-ms-transform": translate
                    });
                    list.find(".k-scrollable-placeholder").css({
                        height: list.find("ul").height() + bottomOffset
                    });
                    list.off(ns)
                        .on("click" + ns, ".k-item", this._itemClickHandler.bind(this))
                        .on("scroll" + ns, this._listScrollHandler.bind(this));
                }
            },

            _nowClickHandler: function(e) {
                e.preventDefault();

                var now = new Date();
                this.value(now);
                this.options.change(kendo.toString(now, this.options.format, this.options.culture), true);
            },

            _cancelClickHandler: function(e) {
                e.preventDefault();
                this.value(this._value);
                this.popup.close();
            },

            _setClickHandler: function(e) {
                e.preventDefault();
                this._value = new Date(this._currentlySelected);

                this.options.change(kendo.toString(this._currentlySelected, this.options.format, this.options.culture), true);
                this.popup.close();
            },

            _listScrollHandler: function(e) {
                var that = this;
                var itemHeight = getItemHeight($(e.currentTarget).find(".k-item:visible").eq(0));

                if (that._internalScroll) {
                    return;
                }

                if (that._scrollingTimeout) {
                    clearTimeout(that._scrollingTimeout);
                }

                that._scrollingTimeout = setTimeout(function() {
                    if (e.currentTarget.scrollTop % itemHeight > 1) {
                        e.currentTarget.scrollTop += itemHeight - e.currentTarget.scrollTop % itemHeight;
                    }
                    that._scrollTop = e.currentTarget.scrollTop;
                    that._updateCurrentlySelected();
                    that._updateRanges();
                }, 100);
            },

            _updateCurrentlySelected: function() {
                var is12hourFormat = includes(this.options.format.toLowerCase(), "t");
                var indexAttr = kendo.attr('index');
                var hoursList = this.ul.find('[' + indexAttr + '="1"]');
                var minutesList = this.ul.find('[' + indexAttr + '="2"]');
                var secondsList = this.ul.find('[' + indexAttr + '="3"]');
                var designatorList = this.ul.find('[' + indexAttr + '="4"]');
                var selectedHour;
                var selectedMinutes;
                var selectedSeconds;
                var selectedDesignator;

                if (!this.ul.is(":visible")) {
                    return;
                }

                if (!this._currentlySelected) {
                    this._currentlySelected = this._value ? new Date(this._value) : new Date();
                }

                if (hoursList.length) {
                    selectedHour = +this._findSelectedValue(hoursList);
                }

                if (minutesList.length) {
                    selectedMinutes = +this._findSelectedValue(minutesList);
                }

                if (secondsList.length) {
                    selectedSeconds = +this._findSelectedValue(secondsList);
                }

                if (designatorList.length) {
                    selectedDesignator = this._findSelectedValue(designatorList);
                }

                if (is12hourFormat) {
                    if (selectedDesignator == "PM") {
                        selectedHour += 12;
                        if (selectedHour == 24) {
                            selectedHour = 12;
                        }
                    }

                    if (selectedDesignator === "AM" && selectedHour === 12) {
                        selectedHour = 0;
                    }
                }

                if (selectedHour !== undefined$1) {
                    this._currentlySelected.setHours(selectedHour);
                }

                if (selectedMinutes !== undefined$1) {
                    this._currentlySelected.setMinutes(selectedMinutes);
                }

                if (selectedSeconds !== undefined$1) {
                    this._currentlySelected.setSeconds(selectedSeconds);
                }
            },

            _findSelectedValue: function(list) {
               var firstOccurence = firstItemIndex(list.scrollTop(), getItemHeight(list.find(".k-item:visible").eq(0)));
               return list.find(".k-item:visible").eq(firstOccurence).attr("data-value");
            },

            _itemClickHandler: function(e) {
                var list = $(e.originalEvent.currentTarget);
                var index = list.find(".k-item:visible").index($(e.currentTarget));
                var itemHeight = getItemHeight(list.find(".k-item:visible").eq(0));

                list.scrollTop(index * itemHeight);
            },

            getDatesInRange: function(msStart, msMax, startDate, max, msInterval, start) {
                var result = [];

                while (true) {
                    if (msMax && (getMilliseconds(start) >= msMax || startDate.getDate() != start.getDate())) {
                        msStart = getMilliseconds(start);
                        if (startDate < start) {
                            msStart += MS_PER_DAY;
                        }
                        if (msStart > msMax) {
                            start = new DATE(+max);
                        }
                        if (getMilliseconds(start) > 0) {
                            result.push(new Date(start));
                        }
                        break;
                    }
                    if (startDate.getDate() != start.getDate()) {
                        break;
                    }
                    result.push(new Date(start));
                    start.setTime(start.getTime() + msInterval);
                    if (!msMax && this.options.maxSet) {
                        break;
                    }
                }

                return result;
            },

            _createListContent: function(parts) {
                var length = parts.length;
                var result = "";
                var part;
                var values;

                for (var i = 0; i < length; i++) {
                    part = parts[i];

                    if (part.type === "literal") {
                        result += this._literalTemplate(part);
                    } else {
                        values = this._getValues(part, true);
                        result += this._itemTemplate(values.values, part, this.options.messages[part.type], values.index);
                    }
                }

                return result;
            },

            _itemTemplate: function(values, part, title, index) {
                var result = "";
                var length = values.length;
                var indexAttr = kendo.attr('index');

                result += '<div class="k-time-list-wrapper" role="presentation">' +
                            '<span class="k-title">' + (title || part.type) + '</span>' +
                            '<div class="k-time-list">' +
                                '<div class="k-time-container k-content k-scrollable" role="presentation" ' + indexAttr + '="' + index + '">' +
                                    '<ul class="k-reset">';

                for ( var i = 0; i < length; i++) {
                    result += '<li class="k-item" data-value="' + values[i] + '">' +
                                    '<span>' + values[i] + '</span>' +
                               '</li>';
                }

                result += '</ul>' +
                          '<div class="k-scrollable-placeholder"></div>' +
                        '</div>' +
                    '</div>' +
                '</div>';

                return result;
            },

            _getValues: function(part, shouldPad) {
                var result = [];
                var index;
                var start = 0;
                var end;

                if (part.type === "hour") {
                    start = part.hour12 ? 1 : 0;
                    index = 1;
                    end = part.hour12 ? 12 : 23;
                } else if (part.type === "minute") {
                    index = 2;
                    end = 59;
                } else if (part.type === "second") {
                    index = 3;
                    end = 59;
                }

                for (; start <= end; start++) {
                    result.push(shouldPad ? pad(start) : start);
                }

                return {
                    values: result,
                    index: index
                };
            },

            _literalTemplate: function(part) {
                var result = '<div class="k-time-separator">' +
                    (part.pattern === " tt" ? ':' : part.pattern) +
                    '</div>';

                if (part.pattern === " tt") {
                    result += this._itemTemplate(["AM", "PM"], part, "AM/PM", 4);
                }

                return result;
            },

            bind: function() {
                var that = this,
                    dates = that.options.dates;

                if (dates && dates[0]) {
                    that.dataBind(dates);
                } else {
                    that.refresh();
                }
            },

            _html: function(html) {
                var that = this;

                if (that.options.timeView && that.options.timeView.list === "scroll") {
                    html = HIGHLIGHTCONTAINER + html;
                    that.ul.html(html);
                } else {
                    that.ul[0].innerHTML = html;
                    that.popup.unbind(OPEN, that._heightHandler);
                    that.popup.one(OPEN, that._heightHandler);

                    that.current(null);
                    that.select(that._value);
                }
            },

            scroll: function(item) {
                if (!item) {
                    return;
                }

                if (item.scrollIntoViewIfNeeded) {
                    item.scrollIntoViewIfNeeded();
                } else {
                    scrollIntoViewIfNeeded(item);
                }
            },

            select: function(li) {
                var that = this,
                    options = that.options,
                    current = that._current,
                    selection;

                if (li instanceof Date) {
                    li = kendo.toString(li, options.format, options.culture);
                }

                if (typeof li === "string") {
                    if (!current || current.text() !== li) {
                        li = $.grep(that.ul[0].childNodes, function(node) {
                            return (node.textContent || node.innerText) == li;
                        });

                        li = li[0] ? li : null;
                    } else {
                        li = current;
                    }
                }
                selection = that._distinctSelection(li);
                that.current(selection);
            },

            _distinctSelection: function(selection) {
                var that = this,
                    currentValue,
                    selectionIndex;

                if (selection && selection.length > 1) {
                    currentValue = getMilliseconds(that._value);
                    selectionIndex = $.inArray(currentValue, that._dates);
                    selection = that.ul.children()[selectionIndex];
                }

                return selection;
            },

            setOptions: function(options) {
                var old = this.options;

                options.min = parse(options.min);
                options.max = parse(options.max);

                this.options = extend(old, options, {
                    active: old.active,
                    change: old.change,
                    close: old.close,
                    open: old.open
                });

                this.bind();
            },

            toggle: function() {
                var that = this;

                if (that.popup.visible()) {
                    that.close();
                } else {
                    that.open();
                }
            },

            value: function(value) {
                var that = this;

                that._value = value;
                if (that.ul[0].firstChild) {
                    if (that.options.timeView && that.options.timeView.list === "scroll") {
                        that.applyValue(value);
                    } else {
                        that.select(value);
                    }
                }
            },

            _click: function(e) {
                var that = this,
                    li = $(e.currentTarget),
                    date = li.text(),
                    dates = that.options.dates;

                if (dates && dates.length > 0) {
                    date = dates[li.index()];
                }

                if (!e.isDefaultPrevented()) {
                    that.select(li);
                    that.options.change(date, true);
                    that.close();
                }
            },

            _height: function() {
                var that = this;
                var list = that.list;
                var parent = list.closest(".k-child-animation-container");
                var container = list.closest(".k-animation-container");
                var height = that.options.height;
                var elements = list.add(container);
                var ul = that.ul[0];

                if (ul.children.length) {
                    elements.add(parent).show();

                    list.add(parent)
                        .height(ul.scrollHeight > height ? height : "auto");

                    elements.hide();
                }
            },

            _parse: function(value) {
                var that = this,
                    options = that.options,
                    min = getMilliseconds(options.min) != getMilliseconds(TODAY) ? options.min : null,
                    max = getMilliseconds(options.max) != getMilliseconds(TODAY) ? options.max : null,
                    current = that._value || min || max || TODAY;

                if (value instanceof DATE) {
                    return value;
                }

                value = parse(value, options.parseFormats, options.culture);

                if (value) {
                    value = new DATE(current.getFullYear(),
                                     current.getMonth(),
                                     current.getDate(),
                                     value.getHours(),
                                     value.getMinutes(),
                                     value.getSeconds(),
                                     value.getMilliseconds());
                }

                return value;
            },

            _adjustListWidth: function() {
                var list = this.list,
                    width = list[0].style.width,
                    wrapper = this.options.anchor,
                    computedStyle, computedWidth,
                    outerWidth = kendo._outerWidth;

                if (!list.data("width") && width) {
                    return;
                }

                computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
                computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);

                if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.
                    computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
                }

                width = computedWidth - (outerWidth(list) - list.width());

                list.css({
                    fontFamily: wrapper.css("font-family"),
                    width: width
                })
                .data("width", width);
            },

            _popup: function() {
                var that = this,
                    list = that.list,
                    options = that.options,
                    anchor = options.anchor;

                if (!this.options.omitPopup) {

                    that.popup = new ui.Popup(that.popupContent || list, extend(options.popup, {
                        anchor: anchor,
                        open: options.open,
                        close: options.close,
                        animation: options.animation,
                        isRtl: support.isRtl(options.anchor),
                        activate: function() {
                            if (that.options.timeView && that.options.timeView.list === "scroll") {
                                that.addTranslate();
                                if (that._value) {
                                    that.applyValue(that._value);
                                } else {
                                    that._updateCurrentlySelected();
                                }
                                that._updateRanges();
                                that._focusList(that.list.find(".k-time-list-wrapper").eq(0));
                            }
                        }
                    }));
                } else {
                    list.appendTo(options.timeDiv);
                }
            },

            move: function(e) {
                var that = this,
                    key = e.keyCode,
                    ul = that.ul[0],
                    current = that._current,
                    down = key === keys.DOWN;

                if (key === keys.UP || down) {
                    if (e.altKey) {
                        that.toggle(down);
                        return;
                    } else if (down) {
                        current = current ? current[0].nextSibling : ul.firstChild;
                    } else {
                        current = current ? current[0].previousSibling : ul.lastChild;
                    }

                    if (current) {
                        that.select(current);
                    }

                    that.options.change(that._current.text());
                    e.preventDefault();

                } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {
                    e.preventDefault();
                    if (current) {
                        that.options.change(current.text(), true);
                    }
                    that.close();
                }
            }
        };

        function dst() {
            var today = new DATE(),
                midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),
                noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);

            return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());
        }

        function getMilliseconds(date) {
            return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();
        }

        function lastTimeOption(interval) {
            var date = new Date(2100, 0, 1);
            date.setMinutes(-interval);
            return date;
        }

        function isInRange(value, min, max) {
            var msMin = getMilliseconds(min),
                msMax = getMilliseconds(max),
                msValue;

            if (!value || msMin == msMax) {
                return true;
            }

            msValue = getMilliseconds(value);

            if (msMin > msValue) {
                msValue += MS_PER_DAY;
            }

            if (msMax < msMin) {
                msMax += MS_PER_DAY;
            }

            return msValue >= msMin && msValue <= msMax;
        }

        TimeView.getMilliseconds = getMilliseconds;

        kendo.TimeView = TimeView;

        var TimePicker = Widget.extend({
            init: function(element, options) {
                var that = this, ul, timeView, disabled;

                options = options || {};
                options.componentType = options.componentType || "classic";

                Widget.fn.init.call(that, element, options);

                element = that.element;
                options = that.options;

                options.min = parse(element.attr("min")) || parse(options.min);
                options.max = parse(element.attr("max")) || parse(options.max);

                if (+options.max != +TODAY || +options.min != +TODAY) {
                    this._specifiedRange = true;
                }

                normalize(options);

                that._initialOptions = extend({}, options);

                that._wrapper();

                if (that.options.timeView && that.options.timeView.list === "scroll") {
                    that.options.height = null;
                }

                that.timeView = timeView = new TimeView(extend({}, options, {
                    id: element.attr(ID),
                    anchor: that.wrapper,
                    format: options.format,
                    change: function(value, trigger) {
                        if (trigger) {
                            that._change(value);
                        } else {
                            element.val(value);
                        }
                    },
                    open: function(e) {
                        if (that.options.timeView && that.options.timeView.list !== "scroll") {
                            that.timeView._adjustListWidth();
                        } else {
                            that.timeView._updateTitle();
                        }

                        if (that.trigger(OPEN)) {
                            e.preventDefault();
                        } else {
                            element.attr(ARIA_EXPANDED, true);
                            ul.attr(ARIA_HIDDEN, false);

                            if (timeView.current()) {
                                element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
                            }
                        }
                    },
                    close: function(e) {
                        if (that.trigger(CLOSE)) {
                            e.preventDefault();
                        } else {
                            element.attr(ARIA_EXPANDED, false);
                            ul.attr(ARIA_HIDDEN, true);
                            element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);
                        }
                    },
                    active: function(current) {
                        if (element && element.length) {
                            element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);
                        }
                        if (current) {
                            element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
                        }
                    },
                    specifiedRange: that._specifiedRange,
                    maxSet: +options.max != +TODAY
                }));
                ul = timeView.ul;

                that._ariaLabel(ul);

                that._icon();
                that._reset();

                try {
                    element[0].setAttribute("type", "text");
                } catch (e) {
                    element[0].type = "text";
                }

                element.addClass("k-input-inner")
                       .attr({
                            "role": "combobox",
                            "aria-expanded": false,
                            "aria-controls": timeView._timeViewID,
                            "autocomplete": "off"
                       });

                disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
                if (disabled) {
                    that.enable(false);
                } else {
                    that.readonly(element.is("[readonly]"));
                }
                if (options.dateInput) {
                    var min = options.min;
                    var max = options.max;
                    var today = new DATE();
                    if (getMilliseconds(min) == getMilliseconds(max)) {
                        min = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);
                        max = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 24, 0, 0);
                    }

                    that._dateInput = new ui.DateInput(element, {
                        culture: options.culture,
                        format: options.format,
                        min: min,
                        max: max,
                        value: options.value,
                        interval: options.interval,
                        size: options.size,
                        fillMode: options.fillMode,
                        rounded: options.rounded,
                        messages: options.messages.dateInput
                    });
                }
                that._old = that._update(options.value || that.element.val());
                that._oldText = element.val();
                that._applyCssClasses();

                if (options.label) {
                    that._label();
                }

                kendo.notify(that);
            },

            options: {
                name: "TimePicker",
                min: TODAY,
                max: TODAY,
                format: "",
                dates: [],
                parseFormats: [],
                value: null,
                interval: 30,
                height: 200,
                animation: {},
                dateInput: false,
                messages: {
                    set: "Set",
                    cancel: "Cancel",
                    hour: "hour",
                    minute: "minute",
                    second: "second",
                    millisecond: "millisecond",
                    now: "Now"
                },
                componentType: "classic",
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            events: [
             OPEN,
             CLOSE,
             CHANGE
            ],

            componentTypes: {
                "classic": {
                    timeView: {
                        list: "list"
                    }
                },
                "modern": {
                    timeView: {
                        list: "scroll"
                    }
                }
            },

            setOptions: function(options) {
                var that = this;
                var value = that._value;

                Widget.fn.setOptions.call(that, options);
                options = that.options;

                if (+options.max != +TODAY || +options.min != +TODAY) {
                    this._specifiedRange = true;
                }

                that._arrow.off(ns);
                that._arrow.remove();

                normalize(options);

                that.timeView.setOptions(options);

                that._icon();
                that._editable(options);

                if (value) {
                    that.element.val(kendo.toString(value, options.format, options.culture));
                }

                if (options.label && that._inputLabel) {
                    that.label.setOptions(options.label);
                } else if (options.label === false) {
                    that.label._unwrapFloating();
                    that._inputLabel.remove();
                    delete that._inputLabel;
                } else if (options.label) {
                    that._label();
                }
            },

            dataBind: function(dates) {
                if (isArray(dates)) {
                    this.timeView.dataBind(dates);
                }
            },

            _editable: function(options) {
                var that = this,
                    disable = options.disable,
                    readonly = options.readonly,
                    arrow = that._arrow.off(ns),
                    element = that.element.off(ns),
                    wrapper = that.wrapper.off(ns);

                if (that._dateInput) {
                    that._dateInput._unbindInput();
                }

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);

                    if (element && element.length) {
                        element[0].removeAttribute(DISABLED);
                        element[0].removeAttribute(READONLY);
                    }
                    element.attr(ARIA_DISABLED, false)
                           .attr(ARIA_READONLY, false)
                           .on("keydown" + ns, that._keydown.bind(that))
                           .on("focusout" + ns, that._blur.bind(that))
                           .on("focus" + ns, function() {
                               that.wrapper.addClass(FOCUSED);
                           });

                    if (that._dateInput) {
                        that._dateInput._bindInput();
                    }
                   arrow.on(CLICK, that._click.bind(that))
                       .on(MOUSEDOWN, preventDefault);
                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable)
                           .attr(ARIA_READONLY, readonly);
                }
            },

            _label: function() {
                var that = this;
                var options = that.options;
                var labelOptions = $.isPlainObject(options.label) ? options.label : {
                    content: options.label
                };

                if (that._dateInput) {
                    labelOptions.floatCheck = function () {
                        that._dateInput._toggleDateMask(true);

                        if (!that.value() && !that._dateInput._hasDateInput() && document.activeElement !== that.element[0]) {
                            that._dateInput._toggleDateMask(false);
                            return true;
                        }

                        return false;
                    };
                }

                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {
                    widget: that
                }));

                that._inputLabel = that.label.element;
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);

                that.timeView.destroy();

                that.element.off(ns);
                that._arrow.off(ns);
                that.wrapper.off(ns);

                if (that._form) {
                    that._form.off("reset", that._resetHandler);
                }

                if (that.label) {
                    that.label.destroy();
                }
            },

            close: function() {
                this.timeView.close();
            },

            open: function() {
                this.timeView.open();
            },

            min: function(value) {
                if (value) {
                    this._specifiedRange = true;
                }

                return this._option("min", value);
            },

            max: function(value) {
                if (value && this.timeView) {
                    this._specifiedRange = true;
                    this.timeView.options.maxSet = true;
                } else if (this.timeView) {
                    this.timeView.options.maxSet = false;
                }
                return this._option("max", value);
            },

            value: function(value) {
                var that = this;

                if (value === undefined$1) {
                    return that._value;
                }

                that._old = that._update(value);

                if (that._old === null) {
                    that.element.val("");
                }

                that._oldText = that.element.val();

                if (that.label && that.label.floatingLabel) {
                    that.label.floatingLabel.refresh();
                }
            },

            _blur: function() {
                var that = this,
                    value = that.element.val();

               if (!(that.options.timeView && that.options.timeView.list === "scroll")) {
                   that.close();
               }

                if (value !== that._oldText) {
                    that._change(value);
                }
                that.wrapper.removeClass(FOCUSED);
            },

            _click: function() {
                var that = this,
                    element = that.element;

                that.timeView.toggle();

                if (!support.touch && element[0] !== activeElement()) {
                    element.trigger("focus");
                }
            },

            _change: function(value) {
                var that = this,
                oldValue = that.element.val(),
                dateChanged;

                value = that._update(value);
                dateChanged = !kendo.calendar.isEqualDate(that._old, value);

                var valueUpdated = dateChanged && !that._typing;
                var textFormatted = oldValue !== that.element.val();

                if (valueUpdated || textFormatted) {
                    that.element.trigger(CHANGE);
                }

                if (dateChanged) {
                    that._old = value;
                    that._oldText = that.element.val();

                    that.trigger(CHANGE);
                }

                that._typing = false;
            },

            _icon: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    arrow;

                arrow = element.next("button.k-input-button");

                if (!arrow[0]) {
                    arrow = $(html.renderButton('<button unselectable="on" tabindex="-1" class="k-input-button" aria-label="select"></button>', {
                        icon: "clock",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none"
                    })).insertAfter(element);
                }

                that._arrow = arrow.attr({
                    "role": "button"
                });
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    timeView = that.timeView,
                    value = that.element.val();

                if (timeView.popup.visible() || e.altKey) {
                    timeView.move(e);
                    if (that._dateInput && e.stopImmediatePropagation) {
                        e.stopImmediatePropagation();
                    }
                } else if (key === keys.ENTER && value !== that._oldText) {
                    that._change(value);
                } else {
                    that._typing = true;
                }
            },

            _option: function(option, value) {
                var that = this,
                    options = that.options;

                if (value === undefined$1) {
                    return options[option];
                }

                value = that.timeView._parse(value);

                if (!value) {
                    return;
                }

                value = new DATE(+value);

                options[option] = value;
                that.timeView.options[option] = value;
                that.timeView.bind();
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            },

            _update: function(value) {
                var that = this,
                    options = that.options,
                    timeView = that.timeView,
                    date = timeView._parse(value);

                if (!isInRange(date, options.min, options.max)) {
                    date = null;
                }

                that._value = date;
                that._currentlySelected = date;
                if (that._dateInput && date) {
                    that._dateInput.value(date || value);
                } else {
                    that.element.val(kendo.toString(date || value, options.format, options.culture));
                }
                timeView.value(date);

                return date;
            },

            _wrapper: function() {
                var that = this,
                    element = that.element,
                    wrapper;

                wrapper = element.parents(".k-timepicker");

                if (!wrapper[0]) {
                    wrapper = element.wrap(SPAN).parent();
                }

                wrapper[0].style.cssText = element[0].style.cssText;
                that.wrapper = wrapper.addClass("k-timepicker k-input")
                    .addClass(element[0].className);

                element.css({
                    height: element[0].style.height
                });
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form");

                if (form[0]) {
                    that._resetHandler = function() {
                        that.value(element[0].defaultValue);
                        that.max(that._initialOptions.max);
                        that.min(that._initialOptions.min);
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            }
        });

        function normalize(options) {
            var parseFormats = options.parseFormats;

            options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);

            parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];
            parseFormats.splice(0, 0, options.format);
            options.parseFormats = parseFormats;
        }

        function preventDefault(e) {
            e.preventDefault();
        }

        function mergeDateAndTime(date, time) {
            return new Date(date.getFullYear(),
                date.getMonth(),
                date.getDate(),
                time.getHours(),
                time.getMinutes(),
                time.getSeconds(),
                time.getMilliseconds());
        }

        function datePattern(format, info) {
            var calendar = info.calendar;
            var result;
            if (typeof format === "string") {
                if (calendar.patterns[format]) {
                    result = calendar.patterns[format];
                } else {
                    result = format;
                }
            }

            if (!result) {
                result = calendar.patterns.d;
            }

            return result;
        }

        function addLiteral(parts, value) {
            var lastPart = parts[parts.length - 1];
            if (lastPart && lastPart.type === "LITERAL") {
                lastPart.pattern += value;
            } else {
                parts.push({
                    type: LITERAL,
                    pattern: value
                });
            }
        }

        function isHour12(pattern) {
            return pattern === "h" || pattern === "K";
        }

        function dateNameType(formatLength) {
            var nameType;
            if (formatLength <= 3) {
                nameType = "abbreviated";
            } else if (formatLength === 4) {
                nameType = "wide";
            } else if (formatLength === 5) {
                nameType = "narrow";
            } else if (formatLength === 6) {
                nameType = "short";
            }

            return nameType;
        }

        function startsWith(text, searchString, position) {
            position = position || 0;
            return text.indexOf(searchString, position) === position;
        }

        function includes(text, subStr) {
            var returnValue = false;

            if (text.indexOf(subStr) !== -1) {
                returnValue = true;
            }

            return returnValue;
        }

        function splitDateFormat(format) {
            var info = kendo.culture();
            var pattern = datePattern(format, info);
            var parts = [];
            var lastIndex = dateFormatRegExp.lastIndex = 0;
            var match = dateFormatRegExp.exec(pattern);
            var specifier;
            var type;
            var part;
            var names;
            var minLength;
            var patternLength;

            while (match) {
                var value = match[0];

                if (lastIndex < match.index) {
                    addLiteral(parts, pattern.substring(lastIndex, match.index));
                }

                if (startsWith(value, '"') || startsWith(value, "'")) {
                    addLiteral(parts, value);
                } else {
                    specifier = value[0];
                    type = DATE_FIELD_MAP[specifier];
                    part = {
                        type: type,
                        pattern: value
                    };

                    if (type === "hour") {
                        part.hour12 = isHour12(value);
                    }

                    names = NAME_TYPES[type];

                    if (names) {
                        minLength = typeof names.minLength === "number" ? names.minLength : names.minLength[specifier];
                        patternLength = value.length;

                        if (patternLength >= minLength) {
                            part.names = {
                                type: names.type,
                                nameType: dateNameType(patternLength),
                                standAlone: names.standAlone === specifier
                            };
                        }
                    }

                    parts.push(part);
                }

                lastIndex = dateFormatRegExp.lastIndex;
                match = dateFormatRegExp.exec(pattern);
            }

            if (lastIndex < pattern.length) {
                addLiteral(parts, pattern.substring(lastIndex));
            }

            return parts;
        }

        function pad(value, size) {
            var s = String(value);
            while (s.length < (size || 2)) {
                s = "0" + s;
            }
            return s;
        }

        function firstItemIndex(scrollTop, itemHeight) {
            return Math.max(Math.round(scrollTop / itemHeight), 0);
        }

        function getItemHeight(item) {
            return item.length && item[0].getBoundingClientRect().height;
        }

        function scrollIntoViewIfNeeded(element, centerIfNeeded) {

            function makeRange(start, length) {
                return { start: start, length: length, end: start + length };
            }

            function coverRange(inner, outer) {
                if (centerIfNeeded === false ||
                    (outer.start < inner.end && inner.start < outer.end))
                {
                    return Math.min(
                        inner.start, Math.max(outer.start, inner.end - outer.length)
                    );
                }
                return (inner.start + inner.end - outer.length) / 2;
            }

            function makePoint(x, y) {
                return {
                    x: x, y: y,
                    translate: function translate(dX, dY) {
                        return makePoint(x + dX, y + dY);
                    }
                };
            }

            function absolute(elem, pt) {
                while (elem) {
                    pt = pt.translate(elem.offsetLeft, elem.offsetTop);
                    elem = elem.offsetParent;
                }
                return pt;
            }

            var target = absolute(element, makePoint(0, 0)),
                extent = makePoint(element.offsetWidth, element.offsetHeight),
                elem = element.parentNode,
                origin;

            while (elem instanceof HTMLElement) {
                origin = absolute(elem, makePoint(elem.clientLeft, elem.clientTop));
                elem.scrollLeft = coverRange(
                    makeRange(target.x - origin.x, extent.x),
                    makeRange(elem.scrollLeft, elem.clientWidth)
                );
                elem.scrollTop = coverRange(
                    makeRange(target.y - origin.y, extent.y),
                    makeRange(elem.scrollTop, elem.clientHeight)
                );

                target = target.translate(-elem.scrollLeft, -elem.scrollTop);
                elem = elem.parentNode;
            }
        }


        kendo.cssProperties.registerPrefix("TimePicker", "k-input-");

        kendo.cssProperties.registerValues("TimePicker", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(TimePicker);

    })(window.kendo.jQuery);

    // The current file development is no longer in active phase but the code will be kept as is.

    var __meta__$3 = {
        id: "datetimepicker",
        name: "DateTimePicker",
        category: "web",
        description: "The DateTimePicker allows the end user to select a value from a calendar or a time drop-down list.",
        depends: [ "datepicker", "timepicker", "label" ]
    };

    (function($, undefined$1) {

        var kendo = window.kendo,
            TimeView = kendo.TimeView,
            html = kendo.html,
            parse = kendo.parseDate,
            support = kendo.support,
            activeElement = kendo._activeElement,
            extractFormat = kendo._extractFormat,
            calendar = kendo.calendar,
            isInRange = calendar.isInRange,
            restrictValue = calendar.restrictValue,
            isEqualDatePart = calendar.isEqualDatePart,
            getMilliseconds = TimeView.getMilliseconds,
            ui = kendo.ui,
            Widget = ui.Widget,
            OPEN = "open",
            CLOSE = "close",
            CHANGE = "change",
            ns = ".kendoDateTimePicker",
            CLICK = "click" + ns,
            UP = support.mouseAndTouchPresent ? kendo.applyEventMap("up", ns.slice(1)) : CLICK,
            DISABLED = "disabled",
            READONLY = "readonly",
            FOCUSED = "k-focus",
            HOVER = "k-hover",
            STATEDISABLED = "k-disabled",
            HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
            MOUSEDOWN = "mousedown" + ns,
            MONTH = "month",
            SPAN = "<span/>",
            ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
            ARIA_EXPANDED = "aria-expanded",
            ARIA_HIDDEN = "aria-hidden",
            ARIA_DISABLED = "aria-disabled",
            ARIA_READONLY = "aria-readonly",
            DATE = Date,
            MIN = new DATE(1800, 0, 1),
            MAX = new DATE(2099, 11, 31),
            dateViewParams = { view: "date" },
            timeViewParams = { view: "time" },
            extend = $.extend,
            SINGLE_POPUP_TEMPLATE = function (ref) {
                var buttonSize = ref.buttonSize;
                var messages = ref.messages;

                return '<div class="k-date-tab k-datetime-wrap">' +
                                        '<div class="k-datetime-buttongroup">' +
                                            '<div class="k-button-group k-button-group-stretched">' +
                                                kendo.html.renderButton(("<button class=\"k-selected k-group-start\">" + (messages.date) + "</button>"), {
                                                    size: buttonSize
                                                }) +
                                                kendo.html.renderButton(("<button class=\"k-group-end\">" + (messages.time) + "</button>"), {
                                                    size: buttonSize
                                                }) +
                                            '</div>' +
                                        '</div>' +
                                        '<div class="k-datetime-selector">' +
                                            '<div class="k-datetime-calendar-wrap">' +
                                            '</div>' +
                                            '<div class="k-datetime-time-wrap">' +
                                            '</div>' +
                                        '</div>' +
                                        '<div class="k-datetime-footer k-actions">' +
                                            kendo.html.renderButton(("<button class=\"k-time-accept\" title=\"Set\" aria-label=\"Set\">" + (messages.set) + "</button>"), {
                                                size: buttonSize,
                                                themeColor: "primary"
                                            }) +
                                            kendo.html.renderButton(("<button class=\"k-time-cancel\" title=\"Cancel\" aria-label=\"Cancel\">" + (messages.cancel) + "</button>"), {
                                                size: buttonSize
                                            }) +
                                        '</div>' +
                                    '</div>';
        },
            STATE_SELECTED = "k-selected";

        var DateTimePicker = Widget.extend({
            init: function(element, options) {
                var that = this, disabled, initialValue;

                options = options || {};
                options.componentType = options.componentType || "classic";
                Widget.fn.init.call(that, element, options);

                element = that.element;
                options = that.options;

                options.disableDates = kendo.calendar.disabled(options.disableDates);
                options.min = parse(element.attr("min")) || parse(options.min);
                options.max = parse(element.attr("max")) || parse(options.max);

                if (+options.max != +MAX || +options.min != +MIN || +options.startTime != +MIN || options.endTime != +MAX) {
                    this._specifiedRange = true;
                }

                normalize(options);

                that._initialOptions = extend({}, options);

                that._wrapper();

                if (options.singlePopup) {
                    that._popup();
                }

                that._views();

                that._icons();

                that._reset();
                that._template();

                try {
                    element[0].setAttribute("type", "text");
                } catch (e) {
                    element[0].type = "text";
                }

                element.addClass("k-input-inner")
                       .attr({
                           "role": "combobox",
                           "aria-expanded": false,
                           "aria-haspopup": "grid",
                           "aria-controls": that.dateView._dateViewID + " " + that.timeView._timeViewID,
                           "autocomplete": "off"
                       });


                that._midnight = that._calculateMidnight(options.min, options.max);

                disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
                if (disabled) {
                    that.enable(false);
                } else {
                    that.readonly(element.is("[readonly]"));
                }

                initialValue = parse(options.value || that.element.val(), options.parseFormats, options.culture);

                that._createDateInput(options);

                that._old = that._update(initialValue || that.element.val());
                that._oldText = element.val();
                that._applyCssClasses();

                if (options.label) {
                    that._label();
                }

                kendo.notify(that);
            },

            options: {
                name: "DateTimePicker",
                value: null,
                format: "",
                timeFormat: "",
                culture: "",
                parseFormats: [],
                dates: [],
                disableDates: null,
                startTime: null,
                endTime: null,
                min: new DATE(MIN),
                max: new DATE(MAX),
                interval: 30,
                height: 200,
                footer: "",
                start: MONTH,
                depth: MONTH,
                animation: {},
                month: {},
                ARIATemplate: function (ref) {
                    var valueType = ref.valueType;
                    var text = ref.text;

                    return ("Current focused " + valueType + " is " + text);
        },
                dateButtonText: "Open the date view",
                timeButtonText: "Open the time view",
                dateInput: false,
                weekNumber: false,
                messages: {
                    set: "Set",
                    cancel: "Cancel",
                    hour: "hour",
                    minute: "minute",
                    second: "second",
                    millisecond: "millisecond",
                    now: "Now",
                    date: "Date",
                    time: "Time",
                    today: "Today",
                    weekColumnHeader: ""
                },
                componentType: "classic",
                size: "medium",
                fillMode: "solid",
                rounded: "medium",
                label: null
            },

            events: [
                OPEN,
                CLOSE,
                CHANGE
            ],

            componentTypes: {
                "classic": {
                    singlePopup: false,
                    timeView: {
                        list: "list"
                    }
                },
                "modern": {
                    singlePopup: true,
                    timeView: {
                        list: "scroll"
                    }
                }
            },

            setOptions: function(options) {
                var that = this,
                    value = that._value,
                    min, max, currentValue;

                Widget.fn.setOptions.call(that, options);

                options = that.options;

                options.min = min = parse(options.min);
                options.max = max = parse(options.max);

                normalize(options);

                that._midnight = that._calculateMidnight(options.min, options.max);

                currentValue = options.value || that._value || that.dateView._current;

                if (min && !isEqualDatePart(min, currentValue)) {
                    min = new DATE(MIN);
                }

                if (max && !isEqualDatePart(max, currentValue)) {
                    max = new DATE(MAX);
                }

                that._dateIcon.off(ns);
                that._dateIcon.remove();
                that._timeIcon.off(ns);
                that._timeIcon.remove();

                that.dateView.setOptions(options);

                that.timeView.setOptions(extend({}, options, {
                    format: options.timeFormat,
                    min: min,
                    max: max
                }));

                that._icons();
                that._editable(options);
                that._createDateInput(options);

                if (!that._dateInput) {
                    that.element.val(kendo.toString(value, options.format, options.culture));
                }

                if (value) {
                    that._updateARIA(value);
                }

                if (options.label && that._inputLabel) {
                    that.label.setOptions(options.label);
                } else if (options.label === false) {
                    that.label._unwrapFloating();
                    that._inputLabel.remove();
                    delete that._inputLabel;
                } else if (options.label) {
                    that._label();
                }
            },

            _editable: function(options) {
                var that = this,
                    element = that.element.off(ns),
                    dateIcon = that._dateIcon.off(ns),
                    timeIcon = that._timeIcon.off(ns),
                    wrapper = that.wrapper.off(ns),
                    readonly = options.readonly,
                    disable = options.disable;

                if (!readonly && !disable) {
                    wrapper
                        .removeClass(STATEDISABLED)
                        .on(HOVEREVENTS, that._toggleHover);
                    if (element && element.length) {
                        element[0].removeAttribute(DISABLED);
                        element[0].removeAttribute(READONLY, false);
                        element[0].removeAttribute(ARIA_DISABLED, false);
                        element[0].removeAttribute(ARIA_READONLY, false);
                    }
                    element.on("keydown" + ns, that._keydown.bind(that))
                           .on("focus" + ns, function() {
                               that.wrapper.addClass(FOCUSED);
                           })
                           .on("focusout" + ns, function() {
                               that.wrapper.removeClass(FOCUSED);
                               if (element.val() !== that._oldText) {
                                   that._change(element.val());
                                   if (!element.val()) {
                                       that.dateView.current(kendo.calendar.getToday());
                                   }
                               }
                               if (that.options.singlePopup) {
                                   return;
                               }
                               that.close("date");
                               that.close("time");
                           });

                   dateIcon.on(MOUSEDOWN, preventDefault)
                            .on(UP, function(e) {
                                that.toggle("date");
                                that._focusElement(e.type);
                            });

                   timeIcon.on(MOUSEDOWN, preventDefault)
                            .on(UP, function(e) {
                                that.toggle("time");
                                that._focusElement(e.type);
                            });

                } else {
                    wrapper
                        .addClass(disable ? STATEDISABLED : "")
                        .removeClass(disable ? "" : STATEDISABLED);

                    element.attr(DISABLED, disable)
                           .attr(READONLY, readonly)
                           .attr(ARIA_DISABLED, disable)
                           .attr(ARIA_READONLY, readonly);
                }
            },

            _label: function() {
                var that = this;
                var options = that.options;
                var labelOptions = $.isPlainObject(options.label) ? options.label : {
                    content: options.label
                };

                if (that._dateInput) {
                    labelOptions.floatCheck = function () {
                        that._dateInput._toggleDateMask(true);

                        if (!that.value() && !that._dateInput._hasDateInput() && document.activeElement !== that.element[0]) {
                            that._dateInput._toggleDateMask(false);
                            return true;
                        }

                        return false;
                    };
                }

                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {
                    widget: that
                }));

                that._inputLabel = that.label.element;
            },

            _focusElement: function(eventType) {
                var element = this.element;

                if ((!support.touch || (support.mouseAndTouchPresent && !(eventType || "").match(/touch/i))) && element[0] !== activeElement()) {
                    element.trigger("focus");
                }
            },

            readonly: function(readonly) {
                this._editable({
                    readonly: readonly === undefined$1 ? true : readonly,
                    disable: false
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);
                }
            },

            enable: function(enable) {
                this._editable({
                    readonly: false,
                    disable: !(enable = enable === undefined$1 ? true : enable)
                });

                if (this.label && this.label.floatingLabel) {
                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);
                }
            },

            destroy: function() {
                var that = this;

                Widget.fn.destroy.call(that);
                that.dateView.destroy();
                that.timeView.destroy();

                if (that.label) {
                    that.label.destroy();
                }

                if (that.options.singlePopup) {
                    that.popup.element.off(ns);
                    that.popup.destroy();
                }

                that.element.off(ns);
                that._dateIcon.off(ns);
                that._timeIcon.off(ns);
                that.wrapper.off(ns);

                if (that._form) {
                    that._form.off("reset", that._resetHandler);
                }
            },

            close: function(view) {
                var that = this;

                if (that.options.singlePopup) {
                    that.popup.close();
                } else {
                    if (view !== "time") {
                        view = "date";
                    }

                    that[view + "View"].close();
                }

                setTimeout(function() {
                    that.element.removeAttr("aria-activedescendant");
                });
            },

            open: function(view) {
                var that = this;
                var popupHovered;

                if (that.options.singlePopup) {

                    that.dateView._calendar();

                    if (that.timeView.ul.find("li").length < 1) {
                        that.timeView.bind();
                    }

                    // In some cases when the popup is opened resize is triggered which will cause it to close
                    // Setting the below flag will prevent this from happening
                    // Reference: https://github.com/telerik/kendo/pull/7553
                    popupHovered = that.popup._hovered;
                    that.popup._hovered = true;

                    that.popup.open();

                    if (view === "time") {
                        that._switchToTimeView();
                    } else {
                        that._switchToDateView();
                    }

                    this._dateIcon.toggle(view !== "time");
                    this._timeIcon.toggle(view === "time");

                    setTimeout(function() {
                        that.popup._hovered = popupHovered;
                    }, 1);

                } else {
                    if (view !== "time") {
                        view = "date";
                    }

                    this[view + "View"].open();
                }
            },

            min: function(value) {
                return this._option("min", value);
            },

            max: function(value) {
                return this._option("max", value);
            },

            toggle: function(view) {
                if (this.options.singlePopup) {
                    if (this.popup.visible()) {
                        this.close();
                    } else {
                        this.open(view);
                    }
                } else {
                    var secondView = "timeView";

                    if (view !== "time") {
                        view = "date";
                    } else {
                        secondView = "dateView";
                    }

                    this[view + "View"].toggle();
                    this[secondView].close();
                }

            },

            value: function(value) {
                var that = this;

                if (value === undefined$1) {
                    return that._value;
                }

                that._old = that._update(value);
                if (that._old === null) {
                    if (that._dateInput) {
                        that._dateInput.value(that._old);
                    } else {
                        that.element.val("");
                    }
                }

                that._oldText = that.element.val();

                if (that.label && that.label.floatingLabel) {
                    that.label.floatingLabel.refresh();
                }
            },

            _change: function(value) {
                var that = this,
                oldValue = that.element.val(),
                dateChanged;

                value = that._update(value);
                dateChanged = +that._old != +value;

                var valueUpdated = dateChanged && !that._typing;
                var textFormatted = oldValue !== that.element.val();

                if (valueUpdated || textFormatted) {
                    that.element.trigger(CHANGE);
                }

                if (dateChanged) {
                    that._old = value;
                    that._oldText = that.element.val();

                    that.trigger(CHANGE);
                }

                that._typing = false;
            },

            _option: function(option, value) {
                var that = this;
                var options = that.options;
                var timeView = that.timeView;
                var timeViewOptions = timeView.options;
                var current = that._value || that._old;
                var minDateEqual;
                var maxDateEqual;

                if (value === undefined$1) {
                    return options[option];
                }

                value = parse(value, options.parseFormats, options.culture);
                timeViewOptions.maxSet = false;

                if (!value) {
                    return;
                }

                if (options.min.getTime() === options.max.getTime()) {
                    timeViewOptions.dates = [];
                }

                options[option] = new DATE(value.getTime());
                that.dateView[option](value);

                that._midnight = that._calculateMidnight(options.min, options.max);

                if (current) {
                    minDateEqual = isEqualDatePart(options.min, current);
                    maxDateEqual = isEqualDatePart(options.max, current);
                }

                if (minDateEqual || maxDateEqual) {
                    timeViewOptions[option] = value;

                    if (minDateEqual && !maxDateEqual) {
                        timeViewOptions.max = lastTimeOption(options.interval);
                    }

                    if (maxDateEqual) {
                        if (that._midnight) {
                            timeView.dataBind([MAX]);
                            return;
                        } else if (!minDateEqual) {
                            timeViewOptions.min = MIN;
                            timeViewOptions.maxSet = true;
                        }
                    }
                } else {
                    timeViewOptions.max = MAX;
                    timeViewOptions.min = MIN;
                }

                timeView.bind();
            },

            _toggleHover: function(e) {
                $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
            },

            _update: function(value) {
                var that = this,
                    options = that.options,
                    min = options.min,
                    max = options.max,
                    startTime = options.startTime,
                    endTime = options.endTime,
                    dates = options.dates,
                    timeView = that.timeView,
                    current = that._value,
                    date = parse(value, options.parseFormats, options.culture),
                    isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
                    rebind, timeViewOptions, old, skip, formattedValue;

                if (options.disableDates && options.disableDates(date)) {
                    date = null;
                    if (!that._old && !that.element.val()) {
                        value = null;
                    }
                }

                if (+date === +current && isSameType) {
                    formattedValue = kendo.toString(date, options.format, options.culture);

                    if (formattedValue !== value ) {
                        that.element.val(date === null ? value : formattedValue);
                        if (value instanceof String) {
                            that.element.trigger(CHANGE);
                        }
                    }

                    return date;
                }

                if (date !== null && isEqualDatePart(date, min)) {
                    date = restrictValue(date, min, max);
                } else if (!isInRange(date, min, max)) {
                    date = null;
                }

                that._value = date;
                timeView.value(date);
                that.dateView.value(date);

                if (date) {
                    old = that._old;
                    timeViewOptions = timeView.options;
                    timeViewOptions.maxSet = false;

                    if (dates[0]) {
                        dates = $.grep(dates, function(d) { return isEqualDatePart(date, d); });

                        if (dates[0]) {
                            timeView.dataBind(dates);
                            skip = true;
                        }
                    }

                    if (!skip) {
                        if (isEqualDatePart(date, min)) {
                            timeViewOptions.min = startTime ? startTime : min;
                            timeViewOptions.max = endTime ? endTime : lastTimeOption(options.interval);
                            rebind = true;
                        }

                        if (isEqualDatePart(date, max)) {
                            if (that._midnight) {
                                timeView.dataBind([MAX]);
                                skip = true;
                            } else {
                                timeViewOptions.max = endTime ? endTime : max;
                                timeViewOptions.maxSet = true;
                                if (!rebind) {
                                    timeViewOptions.min = MIN;
                                }
                                rebind = true;
                            }
                        }
                    }

                    if (!skip && ((!old && rebind) || (old && !isEqualDatePart(old, date)))) {
                        if (!rebind) {
                            timeViewOptions.max = endTime ? endTime : MAX;
                            timeViewOptions.min = startTime ? startTime : MIN;
                        }

                        timeView.bind();
                    }
                }
                if (that._dateInput) {
                    if (date) {
                        that._dateInput.value(date);
                    }
                } else {
                    that.element.val(kendo.toString(date || value, options.format, options.culture));
                }
                that._updateARIA(date);

                return date;
            },

            _keydown: function(e) {
                var that = this,
                    dateView = that.dateView,
                    timeView = that.timeView,
                    value = that.element.val(),
                    isDateViewVisible = that.options.singlePopup ? that.popup.visible() : dateView.popup.visible();

                var stopPropagation = that._dateInput && e.stopImmediatePropagation;

                if (e.altKey && e.keyCode === kendo.keys.DOWN) {
                    that.toggle(isDateViewVisible ? "time" : "date");
                } else if (isDateViewVisible) {
                    dateView.move(e);
                    that._updateARIA(dateView._current);

                    if (e.keyCode === kendo.keys.ENTER) {
                        that.toggle("time");
                    }
                } else if (!that.options.singlePopup && timeView.popup.visible()) {
                    timeView.move(e);
                } else if (e.keyCode === kendo.keys.ENTER && value !== that._oldText) {
                    that._change(value);
                } else {
                    that._typing = true;
                    stopPropagation = false;
                }
                if (stopPropagation) {
                    e.stopImmediatePropagation();
                }
            },

            _timeOption: function(arg) {
                var that = this,
                options = that.options,
                timeOption = options[arg],
                dateRangeOption = arg == "startTime" ? options.min : options.max,
                option = arg == "startTime" ? new DATE(MIN) : new DATE(MAX),
                date;

                if ( timeOption ) {
                    option = new DATE(timeOption);
                }

                if (timeOption && dateRangeOption ) {
                    date = new Date(dateRangeOption.getFullYear(), dateRangeOption.getMonth(), dateRangeOption.getDate(), timeOption.getHours(), timeOption.getMinutes(), timeOption.getSeconds());
                    if (arg == "startTime" ) {
                        that.options.min = date;
                    } else {
                        that.options.max = date;
                    }
                }

                if ( options.componentType === "modern") {
                    option = dateRangeOption;
                }

                return option;
            },

            _views: function() {
                var that = this,
                    element = that.element,
                    options = that.options,
                    id = element.attr("id"),
                    dateView, timeView,
                    div, ul, msMin,
                    date,
                    timeDiv,
                    omitPopup,
                    timeViewOptions;

                if (options.singlePopup) {
                    options.dateDiv = that.popup.element.find(".k-datetime-calendar-wrap");
                    timeDiv = that.popup.element.find(".k-datetime-time-wrap");
                    options.omitPopup = omitPopup = true;
                    timeViewOptions = options.timeView;
                }

                that.dateView = dateView = new kendo.DateView(extend({}, options, {
                    id: id,
                    anchor: that.wrapper,
                    change: function() {
                        var value = that._applyDateValue();

                        if (options.singlePopup) {
                            if (!that.timeView._currentlySelected) {
                                that.timeView._currentlySelected = new Date();
                            }
                            that.timeView._currentlySelected.setFullYear(value.getFullYear());
                            that.timeView._currentlySelected.setMonth(value.getMonth());
                            that.timeView._currentlySelected.setDate(value.getDate());
                            that._switchToTimeView();
                            that._toggleIcons();
                        } else {
                            that._change(value);
                            that.close("date");
                        }
                    },
                    close: function(e) {
                        if (that.trigger(CLOSE, dateViewParams)) {
                            e.preventDefault();
                        } else {
                            element.attr(ARIA_EXPANDED, false);
                            div.attr(ARIA_HIDDEN, true);
                        }
                    },
                    open: function(e) {
                        if (that.trigger(OPEN, dateViewParams)) {
                            e.preventDefault();
                        } else {

                            if (element.val() !== that._oldText) {
                                date = parse(element.val(), options.parseFormats, options.culture);

                                that.dateView[date ? "current" : "value"](date);
                            }

                            div.attr(ARIA_HIDDEN, false);
                            element.attr(ARIA_EXPANDED, true);

                            that._updateARIA(date);
                        }
                    }
                }));
                div = dateView.div;

                msMin = options.min.getTime();
                that.timeView = timeView = new TimeView({
                    id: id,
                    value: options.value,
                    size: options.size,
                    anchor: that.wrapper,
                    animation: options.animation,
                    format: options.timeFormat,
                    culture: options.culture,
                    height: options.componentType === "modern" ? null : options.height,
                    interval: options.interval,
                    startTime: options.startTime,
                    endTime: options.endTime,
                    min: that._timeOption("startTime"),
                    max: that._timeOption("endTime"),
                    dates: msMin === options.max.getTime() ? [new Date(msMin)] : [],
                    parseFormats: options.parseFormats,
                    validateDate: (options.startTime || options.endTime ) ? false : true,
                    change: function(value, trigger) {
                        value = that._applyTimeValue(value);

                        if (trigger) {
                            that._timeSelected = true;
                            that._change(value);
                        } else {
                            element.val(kendo.toString(value, options.format, options.culture));
                            dateView.value(value);
                            that._updateARIA(value);
                        }
                    },
                    close: function(e) {
                        if (that.trigger(CLOSE, timeViewParams)) {
                            e.preventDefault();
                        } else {
                            ul.attr(ARIA_HIDDEN, true);
                            element.attr(ARIA_EXPANDED, false);
                        }
                    },
                    open: function(e) {
                        if (that.options.componentType !== "modern") {
                            timeView._adjustListWidth();
                        } else {
                            that.timeView._updateTitle();
                        }

                        if (that.trigger(OPEN, timeViewParams)) {
                            e.preventDefault();
                        } else {
                            if (element.val() !== that._oldText) {
                                date = parse(element.val(), options.parseFormats, options.culture);

                                that.timeView.value(date);
                            }

                            ul.attr(ARIA_HIDDEN, false);
                            element.attr(ARIA_EXPANDED, true);

                            timeView.options.active(timeView.current());
                        }
                    },
                    active: function(current) {
                        if (element && element.length) {
                            element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);
                        }
                        if (current) {
                            element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
                        }
                    },
                    popup: options.popup,
                    useValueToRender: true,
                    specifiedRange: that._specifiedRange,
                    omitPopup: omitPopup,
                    timeDiv: timeDiv,
                    timeView: timeViewOptions,
                    messages: that.options.messages
                });
                ul = timeView.ul;
            },

            _applyDateValue: function() {
                var that = this;
                var options = that.options;
                var dateView = that.dateView;
                var value = dateView.calendar.value();
                var msValue = +value;
                var msMin = +options.min;
                var msMax = +options.max;
                var current, adjustedDate;

                if (msValue === msMin || msValue === msMax) {
                    current = msValue === msMin ? msMin : msMax;
                    current = new DATE(that._value || current);
                    current.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());

                    if (isInRange(current, msMin, msMax)) {
                        value = current;
                    }
                }

                if (that._value) {

                    adjustedDate = kendo.date.setHours(new Date(value), that._value);

                    if (isInRange(adjustedDate, msMin, msMax)) {
                        value = adjustedDate;
                    }
                }

                return value;
            },

            _applyTimeValue: function(value) {
                var timeView = this.timeView;
                var options = this.options;

                value = timeView._parse(value);

                if (value < options.min) {
                    value = new DATE(+options.min);
                    timeView.options.min = value;
                } else if (value > options.max) {
                    value = new DATE(+options.max);
                    timeView.options.max = value;
                }

                return value;
            },

            _icons: function() {
                var that = this;
                var element = that.element;
                var options = that.options;
                var icons;

                icons = that.wrapper.find("button.k-input-button");

                if (!icons[0]) {
                    that._dateIcon = $(html.renderButton('<button unselectable="on" tabindex="-1" class="k-input-button" aria-label="' + options.dateButtonText + '"></button>', {
                        icon: "calendar",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none"
                    })).insertAfter(element);
                    that._timeIcon = $(html.renderButton('<button unselectable="on" tabindex="-1" class="k-input-button" aria-label="' + options.timeButtonText + '"></button>', {
                        icon: "clock",
                        size: options.size,
                        fillMode: options.fillMode,
                        shape: "none",
                        rounded: "none"
                    })).insertAfter(element);
                }

                if (options.singlePopup) {
                    that._timeIcon.hide();
                }
            },

            _wrapper: function() {
                var that = this,
                element = that.element,
                wrapper;

                wrapper = element.parents(".k-datetimepicker");

                if (!wrapper[0]) {
                    wrapper = element.wrap(SPAN).parent();
                }

                wrapper[0].style.cssText = element[0].style.cssText;
                element.css({
                    height: element[0].style.height
                });

                that.wrapper = wrapper.addClass("k-datetimepicker k-input")
                    .addClass(element[0].className).removeClass('input-validation-error');
            },

            _reset: function() {
                var that = this,
                    element = that.element,
                    formId = element.attr("form"),
                    form = formId ? $("#" + formId) : element.closest("form"),
                    options = that.options,
                    disabledDate = options.disableDates,
                    parseFormats = options.parseFormats.length ? options.parseFormats : null,
                    optionsValue = that._initialOptions.value,
                    initialValue = element[0].defaultValue;

                if (optionsValue && (disabledDate && disabledDate(optionsValue))) {
                    optionsValue = null;
                }

                if ((!initialValue || !kendo.parseDate(initialValue, parseFormats, options.culture)) && optionsValue) {
                    element.attr("value", kendo.toString(optionsValue, options.format, options.culture));
                }

                if (form[0]) {
                    that._resetHandler = function() {
                        that.value(optionsValue || element[0].defaultValue);
                        that.max(that._initialOptions.max);
                        that.min(that._initialOptions.min);
                    };

                    that._form = form.on("reset", that._resetHandler);
                }
            },

            _template: function() {
                this._ariaTemplate = kendo.template(this.options.ARIATemplate).bind(this);
            },

            _createDateInput: function(options) {
                if (this._dateInput) {
                    this._dateInput.destroy();
                    this._dateInput = null;
                }

                if (options.dateInput ) {
                    this._dateInput = new ui.DateInput(this.element, {
                        culture: options.culture,
                        format: options.format,
                        size: options.size,
                        fillMode: options.fillMode,
                        rounded: options.rounded,
                        min: options.min,
                        max: options.max,
                        interval: options.interval,
                        messages: options.messages.dateInput
                    });
                }
            },

            _calculateMidnight: function(min, max) {
                return getMilliseconds(min) + getMilliseconds(max) === 0;
            },

            _updateARIA: function(date) {
                var that = this;
                var calendar = that.dateView.calendar;

                if (that.element && that.element.length) {
                    that.element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);
                }

                if (calendar) {
                    that.element.attr(ARIA_ACTIVEDESCENDANT, calendar._updateAria(that._ariaTemplate, date));
                }
            },
            _popup: function() {
                var that = this;
                var options = that.options;
                var div = $("<div></div>").attr(ARIA_HIDDEN, "true")
                    .addClass("k-datetime-container k-group k-reset")
                    .appendTo(document.body);

                div.append(kendo.template(SINGLE_POPUP_TEMPLATE)(extend({}, that.options, {
                    buttonSize: that.options.size
                })));
                that.popup = new ui.Popup(div, extend(options.popup, options, {
                    name: "Popup",
                    isRtl: kendo.support.isRtl(that.wrapper),
                    anchor: that.wrapper,
                    activate: function() {
                        if (that.options.timeView && that.options.timeView.list === "scroll") {
                            that.timeView.addTranslate();
                            that.timeView.applyValue(that._value);
                            that.timeView._updateRanges();
                        }
                    },
                    open: function(e) {
                        if (that.trigger(OPEN, { view: this.element.find('.k-date-tab').length ? 'date' : 'time', sender: that })) {
                            e.preventDefault();
                        } else {
                            this.element.attr(ARIA_HIDDEN, false);
                            that.element.attr(ARIA_EXPANDED, true);
                        }

                        that.timeView._updateTitle();
                    },
                    close: function(e) {
                        if (that.trigger(CLOSE, { view: this.element.find('.k-date-tab').length ? 'date' : 'time', sender: that })) {
                            e.preventDefault();
                        } else {
                            that.element.attr(ARIA_EXPANDED, false);
                            this.element.attr(ARIA_HIDDEN, true);
                        }
                    }
                }));

                div.on(CLICK + ns, ".k-datetime-buttongroup .k-button", that._groupChangeClick.bind(that));
                div.on(CLICK + ns, ".k-datetime-footer button.k-time-cancel", that._cancelClickHandler.bind(that));
                div.on(CLICK + ns, ".k-datetime-footer button.k-time-accept", that._setClickHandler.bind(that));
            },

            _groupChangeClick: function(e) {
                preventDefault(e);
                var button = $(e.currentTarget);
                var index = button.index();

                if (index) {
                    this._switchToTimeView();
                } else {
                    this._switchToDateView();
                }
                this._toggleIcons();
            },

            _switchToDateView: function() {
                this.popup.element.find(".k-group-start, .k-group-end").removeClass(STATE_SELECTED).eq(0).addClass(STATE_SELECTED);
                this.popup.element.find(".k-datetime-wrap").removeClass("k-time-tab").addClass("k-date-tab");
            },

            _switchToTimeView: function() {
                this.timeView.addTranslate();
                this.timeView.applyValue(this._value);
                this.timeView._updateRanges();
                this.popup.element.find(".k-group-start, .k-group-end").removeClass(STATE_SELECTED).eq(1).addClass(STATE_SELECTED);
                this.popup.element.find(".k-datetime-wrap").removeClass("k-date-tab").addClass("k-time-tab");
            },

            _toggleIcons: function() {
                this._dateIcon.toggle();
                this._timeIcon.toggle();
            },

            _cancelClickHandler: function(e) {
                preventDefault(e);
                if (this._value) {
                    this.value(this._value);
                    this.dateView.value(this._value);
                }
                this.popup.close();
            },

            _setClickHandler: function(e) {
                preventDefault(e);
                var value = this._applyDateValue();
                var time;

                value = value || new Date();
                time = this.timeView._currentlySelected || value;
                this.timeView._updateCurrentlySelected();
                value.setHours(time.getHours());
                value.setMinutes(time.getMinutes());
                value.setSeconds(time.getSeconds());
                value = this._applyTimeValue(value);

                this._change(value);
                this.popup.close();
            }
        });

        function lastTimeOption(interval) {
            var date = new Date(2100, 0, 1);
            date.setMinutes(-interval);
            return date;
        }

        function preventDefault(e) {
            e.preventDefault();
        }

        function normalize(options) {
            var patterns = kendo.getCulture(options.culture).calendars.standard.patterns,
                parseFormats = !options.parseFormats.length,
                timeFormat;

            options.format = extractFormat(options.format || patterns.g);
            options.timeFormat = timeFormat = extractFormat(options.timeFormat || patterns.t);
            kendo.DateView.normalize(options);

            if (parseFormats) {
               options.parseFormats.unshift("yyyy-MM-ddTHH:mm:ss");
            }

            if ($.inArray(timeFormat, options.parseFormats) === -1) {
                options.parseFormats.push(timeFormat);
            }
        }

        kendo.cssProperties.registerPrefix("DateTimePicker", "k-input-");

        kendo.cssProperties.registerValues("DateTimePicker", [{
            prop: "rounded",
            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])
        }]);

        ui.plugin(DateTimePicker);

    })(window.kendo.jQuery);

    var __meta__$2 = {
        id: "splitter",
        name: "Splitter",
        category: "web",
        description: "The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.",
        depends: [ "resizable", "icons" ]
    };

    (function($, undefined$1) {
        var kendo = window.kendo,
            ui = kendo.ui,
            keys = kendo.keys,
            extend = $.extend,
            Widget = ui.Widget,
            pxUnitsRegex = /^\d+(\.\d+)?px$/i,
            percentageUnitsRegex = /^\d+(\.\d+)?%$/i,
            NS = ".kendoSplitter",
            EXPAND = "expand",
            COLLAPSE = "collapse",
            CONTENTLOAD = "contentLoad",
            ERROR = "error",
            RESIZE = "resize",
            LAYOUTCHANGE = "layoutChange",
            HORIZONTAL = "horizontal",
            VERTICAL = "vertical",
            MOUSEENTER = "mouseenter",
            CLICK = "click",
            PANE = "pane",
            MOUSELEAVE = "mouseleave",
            FOCUSED = "k-focus",
            KPANE = "k-" + PANE,
            PANECLASS = "." + KPANE,
            TABINDEX = "tabindex",
            ARIA_VALUEMIN = "aria-valuemin",
            ARIA_VALUEMAX = "aria-valuemax",
            ARIA_VALUENOW = "aria-valuenow",
            ARIA_CONTROLS = "aria-controls",
            ARIA_LABEL = "aria-label",
            ARIA_LABELLEDBY = "aria-labelledby",
            ARIA_ORIENTATION = "aria-orientation";

        function isPercentageSize(size) {
            return percentageUnitsRegex.test(size);
        }

        function isPixelSize(size) {
            return pxUnitsRegex.test(size) || /^\d+$/.test(size);
        }

        function isFluid(size) {
            return !isPercentageSize(size) && !isPixelSize(size);
        }

        function calculateSize(size, total) {
            var output = parseInt(size, 10);

            if (isPercentageSize(size)) {
                output = Math.floor(output * total / 100);
            }

            return output;
        }

        function panePropertyAccessor(propertyName, triggersResize) {
            return function(pane, value) {
                var paneConfig = this.element.find(pane).data(PANE);

                if (arguments.length == 1) {
                    return paneConfig[propertyName];
                }

                paneConfig[propertyName] = value;

                if (triggersResize) {
                    var splitter = this.element.data("kendo" + this.options.name);
                    splitter.resize(true);
                }
            };
        }

        var Splitter = Widget.extend({
            init: function(element, options) {
                var that = this,
                    isHorizontal;

                Widget.fn.init.call(that, element, options);

                that.wrapper = that.element;

                if (that.options.orientation) {
                    isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;
                }

                that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;
                that._dimension = isHorizontal ? "width" : "height";
                that._keys = {
                    decrease: isHorizontal ? keys.LEFT : keys.UP,
                    increase: isHorizontal ? keys.RIGHT : keys.DOWN
                };

                that._resizeStep = 10;

                that._marker = kendo.guid().substring(0, 8);

                that._initPanes();

                that.resizing = new PaneResizing(that);

                that.element.triggerHandler("init" + NS);
            },
            events: [
                EXPAND,
                COLLAPSE,
                CONTENTLOAD,
                ERROR,
                RESIZE,
                LAYOUTCHANGE
            ],

            _addOverlays: function() {
                this._panes().append("<div class='k-splitter-overlay k-overlay' />");
            },

            _removeOverlays: function() {
                this._panes().children(".k-splitter-overlay").remove();
            },

            _attachEvents: function() {
                var that = this,
                    orientation = that.options.orientation;

                // do not use delegated events to increase performance of nested elements
                that.element
                    .children(".k-splitbar-draggable-" + orientation)
                        .on("keydown" + NS, that._keydown.bind(that))
                        .on("mousedown" + NS, function(e) { e.currentTarget.focus(); })
                        .on("focus" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED); })
                        .on("blur" + NS, function(e) { $(e.currentTarget).removeClass(FOCUSED);
                            if (that.resizing) {
                                that.resizing.end();
                            }
                        })
                        .on(MOUSEENTER + NS, function() { $(this).addClass("k-splitbar-" + that.orientation + "-hover"); })
                        .on(MOUSELEAVE + NS, function() { $(this).removeClass("k-splitbar-" + that.orientation + "-hover"); })
                        .on("mousedown" + NS, that._addOverlays.bind(that))
                    .end()
                    .children(".k-splitbar")
                        .on("dblclick" + NS, that._togglePane.bind(that))
                        .children(".k-collapse-next, .k-collapse-prev").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()
                        .children(".k-expand-next, .k-expand-prev").on(CLICK + NS, that._arrowClick(EXPAND)).end()
                    .end();

                $(window).on("resize" + NS + that._marker, that.resize.bind(that, false));
                $(document).on("mouseup" + NS + that._marker, that._removeOverlays.bind(that));
            },

            _detachEvents: function() {
                var that = this;

                that.element
                    .children(".k-splitbar-draggable-" + that.orientation).off(NS).end()
                    .children(".k-splitbar").off("dblclick" + NS)
                        .children(".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev").off(NS);

                $(window).off(NS + that._marker);
                $(document).off(NS + that._marker);
            },

            options: {
                name: "Splitter",
                clickMoveClick: true,
                orientation: HORIZONTAL,
                panes: []
            },

            destroy: function() {
                Widget.fn.destroy.call(this);

                this._detachEvents();

                if (this.resizing) {
                    this.resizing.destroy();
                }

                kendo.destroy(this.element);

                this.wrapper = this.element = null;
            },

            _keydown: function(e) {
                var that = this,
                    key = e.keyCode,
                    resizing = that.resizing,
                    target = $(e.currentTarget),
                    navigationKeys = that._keys,
                    increase = key === navigationKeys.increase,
                    decrease = key === navigationKeys.decrease,
                    pane;

                if (increase || decrease) {
                    if (e.ctrlKey) {
                        pane = target[decrease ? "next" : "prev"]();

                        if (resizing && resizing.isResizing()) {
                            resizing.end();
                        }

                        if (!pane[that._dimension]()) {
                            that._triggerAction(EXPAND, pane);
                        } else {
                            that._triggerAction(COLLAPSE, target[decrease ? "prev" : "next"]());
                        }
                    } else if (resizing) {
                        resizing.move((decrease ? -1 : 1) * that._resizeStep, target);
                    }
                    e.preventDefault();
                } else if (key === keys.HOME) {
                    pane = target.prev();
                    that.collapse(pane);
                    e.preventDefault();
                } else if (key === keys.END) {
                    pane = target.prev();
                    that.expand(pane);
                    e.preventDefault();
                } else if (key === keys.ENTER && resizing) {
                    resizing.end();
                    e.preventDefault();
                }
            },

            _initPanes: function() {
                var panesConfig = this.options.panes || [];
                var that = this;

                this.element
                    .addClass("k-widget").addClass("k-splitter")
                    .children()
                        .each(function(i, pane) {
                            if (pane.nodeName.toLowerCase() != "script") {
                                that._initPane(pane, panesConfig[i]);
                            }
                        });

                this.resize();
            },

            _initPane: function(pane, config) {
                pane = $(pane)
                    .attr("role", "group")
                    .addClass(KPANE);

                pane.data(PANE, config ? config : {})
                    .toggleClass("k-scrollable", config ? config.scrollable !== false : true);

                this.ajaxRequest(pane);
            },

            ajaxRequest: function(pane, url, data) {
                var that = this,
                    paneConfig;

                pane = that.element.find(pane);
                paneConfig = pane.data(PANE);

                url = url || paneConfig.contentUrl;

                if (url) {
                    pane.append("<span class='k-icon k-i-loading k-pane-loading' />");

                    if (kendo.isLocalUrl(url)) {
                        jQuery.ajax({
                            url: url,
                            data: data || {},
                            type: "GET",
                            dataType: "html",
                            success: function(data) {
                                pane.html(data);

                                that.trigger(CONTENTLOAD, { pane: pane[0] });
                            },
                            error: function(xhr, status) {
                                that.trigger(ERROR, {
                                    pane: pane[0],
                                    status: status,
                                    xhr: xhr
                                });
                            }
                        });
                    } else {
                        pane.removeClass("k-scrollable")
                            .html("<iframe src='" + url + "' frameborder='0' class='k-content-frame'>" +
                                    "This page requires frames in order to show content" +
                                  "</iframe>");
                    }
                }
            },

            _triggerAction: function(type, pane) {
                var paneConfig = pane.data(PANE);
                var shouldExecute = (paneConfig.collapsed && type == EXPAND) || (!paneConfig.collapsed && type == COLLAPSE);

                if (!paneConfig.collapsible) {
                    return;
                }

                if (shouldExecute && !this.trigger(type, { pane: pane[0] })) {
                    this[type](pane[0]);
                }
            },

            _togglePane: function(e) {
                var that = this,
                    target = $(e.target),
                    arrow;

                if (target.closest(".k-splitter")[0] != that.element[0]) {
                    return;
                }

                arrow = target.children("span:not(.k-resize-handle)");

                if (arrow.length !== 1) {
                    return;
                }

                if (arrow.is(".k-collapse-prev")) {
                    that._triggerAction(COLLAPSE, target.prev());
                } else if (arrow.is(".k-collapse-next")) {
                    that._triggerAction(COLLAPSE, target.next());
                } else if (arrow.is(".k-expand-prev")) {
                    that._triggerAction(EXPAND, target.prev());
                } else if (arrow.is(".k-expand-next")) {
                    that._triggerAction(EXPAND, target.next());
                }
            },
            _arrowClick: function(arrowType) {
                var that = this;

                return function(e) {
                    var target = $(e.currentTarget),
                        pane;

                    if (target.closest(".k-splitter")[0] != that.element[0]) {
                        return;
                    }

                    if (target.is(".k-" + arrowType + "-prev")) {
                        pane = target.parent().prev();
                    } else {
                        pane = target.parent().next();
                    }
                    that._triggerAction(arrowType, pane);
                };
            },
            _updateSplitBar: function(splitbar, previousPane, nextPane, previousPaneEl) {
                var catIconIf = function(actionType, iconType, condition) {
                        var icon = iconType ? ui.icon({ icon: iconType, size: "xsmall" }) : "";
                        return condition ? "<span class='k-" + actionType + "'>" + icon + "</span>" : "";
                    },
                    orientation = this.orientation,
                    draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),
                    prevCollapsible = previousPane.collapsible,
                    prevCollapsed = previousPane.collapsed,
                    nextCollapsible = nextPane.collapsible,
                    nextCollapsed = nextPane.collapsed,
                    previousPaneId = previousPaneEl.attr("id");

                if (!previousPaneId) {
                    previousPaneId = kendo.guid();
                    previousPaneEl.attr("id", previousPaneId);
                }

                splitbar.addClass("k-splitbar k-splitbar-" + orientation)
                        .attr("role", "separator")
                        .attr(ARIA_VALUEMIN, "0")
                        .attr(ARIA_VALUEMAX, "100")
                        .attr(ARIA_CONTROLS, previousPaneId)
                        .removeClass("k-splitbar-" + orientation + "-hover")
                        .toggleClass("k-splitbar-draggable-" + orientation,
                            draggable && !prevCollapsed && !nextCollapsed)
                        .toggleClass("k-splitbar-static-" + orientation,
                            !draggable && !prevCollapsible && !nextCollapsible)
                        .html(
                            catIconIf("collapse-prev", "caret-alt-up", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +
                            catIconIf("collapse-prev", "caret-alt-left", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +
                            catIconIf("expand-prev", "caret-alt-down", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +
                            catIconIf("expand-prev", "caret-alt-right", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +
                            catIconIf("resize-handle", null, draggable && orientation == VERTICAL) +
                            catIconIf("resize-handle", null, draggable && orientation == HORIZONTAL) +
                            catIconIf("collapse-next", "caret-alt-down", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +
                            catIconIf("collapse-next", "caret-alt-right", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +
                            catIconIf("expand-next", "caret-alt-up", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +
                            catIconIf("expand-next", "caret-alt-left", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)
                        );

                if (previousPane.labelId) {
                    splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);
                } else if (previousPane.label) {
                    splitbar.attr(ARIA_LABEL, previousPane.label);
                }

                if (orientation == HORIZONTAL) {
                    splitbar.attr(ARIA_ORIENTATION, VERTICAL);
                }

                if (!draggable && !prevCollapsible && !nextCollapsible) {
                    splitbar.removeAttr(TABINDEX);
                }
            },
            _updateSplitBars: function() {
                var that = this;

                this.element.children(".k-splitbar").each(function() {
                    var splitbar = $(this),
                        previousPaneEl = splitbar.prevAll(PANECLASS).first(),
                        previousPane = previousPaneEl.data(PANE),
                        nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);

                    if (!nextPane) {
                        return;
                    }

                    that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);
                });
            },
            _removeSplitBars: function() {
                this.element.children(".k-splitbar").remove();
            },
            _panes: function() {
                if (!this.element) {
                    return $();
                }
                return this.element.children(PANECLASS);
            },

            _resetAriaValueNow: function(splitBars, panesSizes) {
                var i, splitbar, valueNow, joinDimension;

                for (i = 0; i < splitBars.length; i++) {
                    joinDimension = (panesSizes[i] + panesSizes[i + 1]) || 1;
                    valueNow = Math.round(panesSizes[i] / joinDimension * 100);
                    splitbar = splitBars[i];
                    splitbar.setAttribute(ARIA_VALUENOW, valueNow);
                }
            },

            _resize: function() {
                var that = this,
                    element = that.element,
                    panes = element.children(PANECLASS),
                    isHorizontal = that.orientation == HORIZONTAL,
                    splitBars = element.children(".k-splitbar"),
                    splitBarsCount = splitBars.length,
                    sizingProperty = isHorizontal ? "width" : "height",
                    totalSize = element[sizingProperty](),
                    panesSizes = [];

                that.wrapper.addClass("k-splitter-resizing");

                if (that._suppressResize) {
                    return;
                }

                if (splitBarsCount === 0) {
                    splitBarsCount = panes.length - 1;
                    panes.slice(0, splitBarsCount)
                         .after("<div tabindex='0' class='k-splitbar' data-marker='" + that._marker + "' />");

                    that._updateSplitBars();
                    splitBars = element.children(".k-splitbar");
                } else {
                    that._updateSplitBars();
                }

                // discard splitbar sizes from total size
                splitBars.each(function() {
                    totalSize -= this[isHorizontal ? "offsetWidth" : "offsetHeight"];
                });

                var sizedPanesWidth = 0,
                    sizedPanesCount = 0,
                    freeSizedPanes = $();

                panes.css({ position: "absolute", top: 0 })
                    [sizingProperty](function() {
                        var element = $(this),
                            config = element.data(PANE) || {}, size;

                        element.removeClass("k-collapsed");
                        if (config.collapsed) {
                            size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;
                            element.css("overflow", "hidden").addClass("k-collapsed");
                        } else if (isFluid(config.size)) {
                            freeSizedPanes = freeSizedPanes.add(this);
                            panesSizes.push(false);
                            return;
                        } else { // sized in px/%, not collapsed
                            size = calculateSize(config.size, totalSize);
                        }

                        sizedPanesCount++;
                        sizedPanesWidth += size;
                        panesSizes.push(size);

                        return size;
                    });

                totalSize -= sizedPanesWidth;

                var freeSizePanesCount = freeSizedPanes.length,
                    freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);

                freeSizedPanes
                    .slice(0, freeSizePanesCount - 1)
                        .css(sizingProperty, freeSizePaneWidth)
                    .end()
                    .eq(freeSizePanesCount - 1)
                        .css(sizingProperty, totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth);

                panesSizes.forEach(function(size, i) {
                    if (size === false) {
                        panesSizes[i] = freeSizePaneWidth;
                    }
                });

                that._resetAriaValueNow(splitBars, panesSizes);

                // arrange panes
                var sum = 0,
                    alternateSizingProperty = isHorizontal ? "height" : "width",
                    positioningProperty = isHorizontal ? "left" : "top",
                    sizingDomProperty = isHorizontal ? "offsetWidth" : "offsetHeight";

                if (freeSizePanesCount === 0) {
                    var lastNonCollapsedPane = panes.filter(function() {
                        return !(($(this).data(PANE) || {}).collapsed);
                    }).last();

                    lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);
                }

                element.children()
                    .css(alternateSizingProperty, element[alternateSizingProperty]())
                    .each(function(i, child) {
                        if (child.tagName.toLowerCase() != "script") {
                            child.style[positioningProperty] = Math.floor(sum) + "px";
                            sum += child[sizingDomProperty];
                        }
                    });

                that._detachEvents();
                that._attachEvents();

                that.wrapper.removeClass("k-splitter-resizing");

                kendo.resize(panes);
                that.trigger(LAYOUTCHANGE);
            },

            toggle: function(pane, expand) {
                var that = this,
                    paneConfig;

                pane = that.element.find(pane);
                paneConfig = pane.data(PANE);

                if (!expand && !paneConfig.collapsible) {
                    return;
                }

                if (arguments.length == 1) {
                    expand = paneConfig.collapsed === undefined$1 ? false : paneConfig.collapsed;
                }

                paneConfig.collapsed = !expand;

                if (paneConfig.collapsed) {
                    pane.css("overflow", "hidden");
                } else {
                    pane.css("overflow", "");
                }

                that.resize(true);
            },

            collapse: function(pane) {
                this.toggle(pane, false);
            },

            expand: function(pane) {
                this.toggle(pane, true);
            },

            _addPane: function(config, idx, paneElement) {
                var that = this;

                if (paneElement.length) {
                    that.options.panes.splice(idx, 0, config);
                    that._initPane(paneElement, config);

                    that._removeSplitBars();

                    that.resize(true);
                }

                return paneElement;
            },

            append: function(config) {
                config = config || {};

                var that = this,
                    paneElement = $("<div />").appendTo(that.element);

                return that._addPane(config, that.options.panes.length, paneElement);
            },

            insertBefore: function(config, referencePane) {
                referencePane = $(referencePane);
                config = config || {};

                var that = this,
                    idx = that.wrapper.children(".k-pane").index(referencePane),
                    paneElement = $("<div />").insertBefore($(referencePane));

                return that._addPane(config, idx, paneElement);
            },

            insertAfter: function(config, referencePane) {
                referencePane = $(referencePane);
                config = config || {};

                var that = this,
                    idx = that.wrapper.children(".k-pane").index(referencePane),
                    paneElement = $("<div />").insertAfter($(referencePane));

                return that._addPane(config, idx + 1, paneElement);
            },

            remove: function(pane) {
                var that = this;
                pane = that.wrapper.find(pane);

                if (pane.length) {
                    kendo.destroy(pane);
                    pane.each(function(idx, element) {
                        that.options.panes.splice(that.wrapper.children(".k-pane").index(element), 1);
                        $(element).remove();
                    });

                    that._removeSplitBars();

                    if (that.options.panes.length) {
                        that.resize(true);
                    }
                }

                return that;
            },

            size: panePropertyAccessor("size", true),

            min: panePropertyAccessor("min"),

            max: panePropertyAccessor("max")
        });

        ui.plugin(Splitter);

        var verticalDefaults = {
                sizingProperty: "height",
                sizingDomProperty: "offsetHeight",
                alternateSizingProperty: "width",
                positioningProperty: "top",
                mousePositioningProperty: "pageY"
            };

        var horizontalDefaults = {
                sizingProperty: "width",
                sizingDomProperty: "offsetWidth",
                alternateSizingProperty: "height",
                positioningProperty: "left",
                mousePositioningProperty: "pageX"
            };

        function PaneResizing(splitter) {
            var that = this,
                orientation = splitter.orientation,
                handle = ".k-splitbar-draggable-" + orientation + "[data-marker=" + splitter._marker + "]";

            if (splitter.options.clickMoveClick) {
                handle += ",.k-ghost-splitbar";
            }

            that.owner = splitter;
            that._element = splitter.element;
            that.orientation = orientation;

            extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);

            that._resizable = new kendo.ui.Resizable(splitter.element, {
                orientation: orientation,
                handle: handle,
                clickMoveClick: splitter.options.clickMoveClick,
                hint: that._createHint.bind(that),
                start: that._start.bind(that),
                max: that._max.bind(that),
                min: that._min.bind(that),
                invalidClass: "k-restricted-size-" + orientation,
                resizeend: that._stop.bind(that)
            });
        }

        PaneResizing.prototype = {
            press: function(target) {
                this._resizable.press(target);
            },

            move: function(delta, target) {
                if (!this.pressed) {
                    this.press(target);
                    this.pressed = true;
                }

                if (!this._resizable.target) {
                    this._resizable.press(target);
                }

                this._resizable.move(delta);
            },

            end: function() {
                this._resizable.end();
                this.pressed = false;
            },

            destroy: function() {
                this._resizable.destroy();
                this._resizable = this._element = this.owner = null;
            },

            isResizing: function() {
                return this._resizable.resizing;
            },

            _createHint: function(handle) {
                var that = this;
                return $("<div class='k-ghost-splitbar k-ghost-splitbar-" + that.orientation + "' />")
                            .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());
            },

            _start: function(e) {
                var that = this,
                    splitbar = $(e.currentTarget),
                    previousPane = splitbar.prev(),
                    nextPane = splitbar.next();

                if ($(e.initialTarget).closest(".k-expand-next, .k-expand-prev, .k-collapse-next, .k-collapse-prev").length > 0 ||
                    !nextPane.length ||
                    !previousPane.length) {
                        e.preventDefault();
                        return;
                }

                var previousPaneConfig = previousPane.data(PANE),
                    nextPaneConfig = nextPane.data(PANE),
                    prevBoundary = parseInt(previousPane[0].style[that.positioningProperty], 10),
                    nextBoundary = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],
                    totalSize = parseInt(that._element.css(that.sizingProperty), 10),
                    toPx = function(value) {
                        var val = parseInt(value, 10);
                        return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;
                    };

                if (!previousPaneConfig || !nextPaneConfig) {
                    e.preventDefault();
                    e.sender.draggable.clickMoveClick.cancel();
                    that.owner.element.find(".k-ghost-splitbar").remove();
                    return;
                }

                var prevMinSize = toPx(previousPaneConfig.min),
                    prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,
                    nextMinSize = toPx(nextPaneConfig.min),
                    nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;

                that.previousPane = previousPane;
                that.nextPane = nextPane;
                that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);
                that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);
            },
            _max: function() {
                return this._maxPosition;
            },
            _min: function() {
                return this._minPosition;
            },
            _stop: function(e) {
                var that = this,
                    splitbar = $(e.currentTarget),
                    owner = that.owner;

                owner._panes().children(".k-splitter-overlay").remove();

                if (e.keyCode !== kendo.keys.ESC) {
                    var ghostPosition = e.position,
                        previousPane = splitbar.prev(),
                        nextPane = splitbar.next();

                    if (!nextPane.length || !previousPane.length) {
                        return false;
                    }

                    var previousPaneConfig = previousPane.data(PANE),
                        nextPaneConfig = nextPane.data(PANE),
                        previousPaneNewSize = ghostPosition - parseInt(previousPane[0].style[that.positioningProperty], 10),
                        nextPaneNewSize = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - ghostPosition - splitbar[0][that.sizingDomProperty],
                        fluidPanesCount = that._element.children(PANECLASS).filter(function() { return isFluid($(this).data(PANE).size); }).length;

                    if (!isFluid(previousPaneConfig.size) || fluidPanesCount > 1) {
                        if (isFluid(previousPaneConfig.size)) {
                            fluidPanesCount--;
                        }

                        previousPaneConfig.size = previousPaneNewSize + "px";
                    }

                    if (!isFluid(nextPaneConfig.size) || fluidPanesCount > 1) {
                        nextPaneConfig.size = nextPaneNewSize + "px";
                    }

                    owner.resize(true);
                }

                return false;
            }
        };

    })(window.kendo.jQuery);
    var kendo$4 = kendo;

    var __meta__$1 = {
            id: "dialog",
            name: "Dialog",
            category: "web", // suite
            description: "The dialog widget is a modal popup that brings information to the user.",
            depends: ["core", "popup", "textbox", "icons"] // dependencies
        };

        (function($, undefined$1) {
            var kendo = window.kendo,
                Widget = kendo.ui.Widget,
                TabKeyTrap = kendo.ui.Popup.TabKeyTrap,
                template = kendo.template,
                keys = kendo.keys,
                isFunction = kendo.isFunction,
                encode = kendo.htmlEncode,
                NS = "kendoWindow",
                KDIALOG = ".k-dialog",
                KWINDOW = ".k-window",
                KICONCLOSE = ".k-dialog-close",
                KCONTENTCLASS = "k-window-content k-dialog-content",
                KCONTENTSELECTOR = ".k-window-content",
                KSCROLL = "k-scroll",
                KTITLELESS = "k-dialog-titleless",
                KDIALOGTITLE = ".k-dialog-title",
                KDIALOGTITLEBAR = ".k-dialog-titlebar",
                KBUTTONGROUP = ".k-dialog-actions",
                // KACTIONS = ".k-actions",
                KBUTTON = ".k-button",
                KALERT = "k-alert",
                KCONFIRM = "k-confirm",
                KPROMPT = "k-prompt",
                KTEXTBOX = ".k-input-inner",
                KOVERLAY = ".k-overlay",
                VISIBLE = ":visible",
                ZINDEX = "zIndex",
                BODY = "body",
                INITOPEN = "initOpen",
                TOUCHSTART = "touchstart",
                TOUCHMOVE = "touchmove",
                OPEN = "open",
                CLOSE = "close",
                SHOW = "show",
                HIDE = "hide",
                SIZE = {
                    small: "k-window-sm",
                    medium: "k-window-md",
                    large: "k-window-lg"
                },
                HIDDEN = "hidden",
                OVERFLOW = "overflow",
                DATADOCOVERFLOWRULE = "original-overflow-rule",
                DATAHTMLTAPYRULE = "tap-y",
                messages = {
                    okText: "OK",
                    cancel: "Cancel",
                    promptInput: "Input"
                },
                ceil = Math.ceil,
                templates,
                overlaySelector = ":not(link,meta,script,style)";

            function defined(x) {
                return (typeof x != "undefined");
            }

            function constrain(value, low, high) {
                return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
            }

            function buttonKeyTrigger(e) {
                return e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR;
            }

            var DialogBase = Widget.extend({
                init: function(element, options) {
                    var that = this;
                    Widget.fn.init.call(that, element, options);
                    that._init(that.element, that.options);
                    kendo.notify(that);
                    if (that._showWatermarkOverlay) {
                        that._showWatermarkOverlay(that.wrapper[0]);
                    }
                },

                _init: function(element, options) {
                    var that = this,
                        wrapper;

                    that._centerCallback = that._center.bind(that);

                    that.appendTo = $(BODY);
                    if (!defined(options.visible) || options.visible === null) {
                        options.visible = element.is(VISIBLE);
                    }

                    if (that.wrapperTemplate === undefined$1) {
                        that.wrapperTemplate = templates.wrapper;
                    }

                    that._createDialog();
                    wrapper = that.wrapper = element.closest(KDIALOG);

                    if (options._defaultFocus === undefined$1) {
                        that._defaultFocus = element[0];
                    }

                    that._tabindex(element);
                    that._dimensions();

                    this._tabKeyTrap = new TabKeyTrap(wrapper);

                    if (!that.options.visible) {
                        that.wrapper.hide();
                    } else {
                        that._triggerOpen();
                    }
                },

                setOptions: function(options) {
                    var that = this;
                    var sizeClass = that.options.size;
                    that.wrapper.removeClass(kendo.getValidCssClass("k-dialog-", "themeColor", that.options.themeColor));

                    options = $.extend(that.options, options);

                    Widget.fn.setOptions.call(that, options);

                    if (options.title !== undefined$1) {
                        that.title(options.title);
                    }

                    if (options.content) {
                        kendo.destroy(that.element.children());
                        that.element.html(options.content);
                    }

                    if (options.actions) {
                        that.wrapper.children(KBUTTONGROUP).remove();
                        that._createActionbar(that.wrapper);
                    }

                    that.wrapper.show();
                    that._closable(that.wrapper);

                    that.wrapper.removeClass(SIZE[sizeClass]);
                    that._dimensions();

                    if (!options.visible) {
                        that.wrapper.hide();
                    } else {
                        that._triggerOpen();
                    }

                    if (options.themeColor && options.themeColor !== "none") {
                        that.wrapper.addClass(kendo.getValidCssClass("k-dialog-", "themeColor", that.options.themeColor));
                    }

                    if (typeof options.modal !== "undefined") {
                        var visible = that.options.visible !== false;
                        that._enableDocumentScrolling();
                        that._overlay(options.modal && visible);
                    }
                },

                _dimensions: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        options = that.options,
                        width = options.width,
                        height = options.height,
                        sizeClass = options.size,
                        dimensions = ["minWidth", "minHeight", "maxWidth", "maxHeight"];

                    for (var i = 0; i < dimensions.length; i++) {
                        var value = options[dimensions[i]];
                        if (value && value != Infinity) {
                            wrapper.css(dimensions[i], value);
                        }
                    }

                    this._setElementMaxHeight();

                    if (width) {
                        if (width.toString().indexOf("%") > 0) {
                            wrapper.width(width);
                        } else {
                            wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));
                        }
                    }

                    if (height) {
                        if (height.toString().indexOf("%") > 0) {
                            wrapper.height(height);
                        } else {
                            wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));
                        }

                        this._setElementHeight();
                    }

                    if (sizeClass && SIZE[sizeClass]) {
                        wrapper.addClass(SIZE[sizeClass]);
                    }
                },

                _setElementMaxHeight: function() {
                    var that = this,
                        element = that.element,
                        maxHeight = that.options.maxHeight,
                        elementMaxHeight;

                    if (maxHeight != Infinity) {
                        elementMaxHeight = parseFloat(maxHeight, 10) - that._uiHeight();
                        if (elementMaxHeight > 0) {
                            element.css({
                                maxHeight: ceil(elementMaxHeight) + "px"
                            });
                        }
                    }

                },

                _setElementHeight: function() {
                    var that = this,
                        element = that.element,
                        height = that.wrapper.outerHeight(true),
                        elementHeight = parseFloat(height, 10) - that._uiHeight();

                    if (elementHeight < 0) {
                        elementHeight = 0;
                    }

                    element.css({
                        height: ceil(elementHeight) + "px"
                    });

                    this._applyScrollClassName(element);

                },

                _applyScrollClassName: function(element) {
                        var hasScroll = element.get(0).scrollHeight > element.outerHeight();

                        if (hasScroll) {
                            element.addClass(KSCROLL);
                        } else {
                            element.removeClass(KSCROLL);
                        }
                },

                _uiHeight: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        actionbar = wrapper.children(KBUTTONGROUP),
                        actionbarHeight = actionbar[0] && actionbar[0].offsetHeight || 0,
                        titlebar = wrapper.children(KDIALOGTITLEBAR),
                        titlebarHeight = titlebar[0] && titlebar[0].offsetHeight || 0;

                    return actionbarHeight + titlebarHeight;
                },

                _overlay: function(visible) {
                    var overlay = this.appendTo.children(KOVERLAY),
                        wrapper = this.wrapper;


                    if (!overlay.length) {
                        overlay = $(templates.overlay);
                    }

                    overlay
                        .insertBefore(wrapper[0])
                        .toggle(visible)
                        .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

                    if (visible) {
                        this._waiAriaOverlay();
                    }
                    else {
                        this._removeWaiAriaOverlay();
                    }

                    if (this.options.modal.preventScroll) {
                        this._stopDocumentScrolling();
                    }

                    return overlay;
                },

                _waiAriaOverlay: function() {
                    var node = this.wrapper;

                    this._overlayedNodes = node.prevAll(overlaySelector).add(node.nextAll(overlaySelector))
                        .each(function() {
                            var jthis = $(this);
                            jthis.data("ariaHidden", jthis.attr("aria-hidden"));
                            jthis.attr("aria-hidden", "true");
                        });
                },

                _removeWaiAriaOverlay: function() {
                    return this._overlayedNodes && this._overlayedNodes.each(function() {
                        var node = $(this);
                        var hiddenValue = node.data("ariaHidden");
                        if (hiddenValue) {
                            node.attr("aria-hidden", hiddenValue);
                        }
                        else {
                            node.removeAttr("aria-hidden");
                        }
                    });
                },

                _closeClick: function(e) {
                    e.preventDefault();
                    this.close(false);
                },

                _closeKeyHandler: function(e) {
                    if (buttonKeyTrigger(e) || e.keyCode == keys.ESC) {
                        this.close(false);
                    }
                },

                _keydown: function(e) {
                    var that = this,
                        options = that.options,
                        keyCode = e.keyCode;

                    if (keyCode == keys.ESC && !that._closing && options.closable) {
                        that.close(false);
                    }
                },

                _createDialog: function() {
                    var that = this,
                        content = that.element,
                        options = that.options,
                        isRtl = kendo.support.isRtl(content),
                        titlebar = $(templates.titlebar(options)),
                        titleId = (content.id || kendo.guid()) + "_title",
                        wrapper = $(that.wrapperTemplate(options));

                    wrapper.toggleClass("k-rtl", isRtl);

                    content.addClass(KCONTENTCLASS);
                    that.appendTo.append(wrapper);

                    if (options.title !== false) {
                        wrapper.append(titlebar);
                        titlebar.attr("id", titleId);
                        wrapper.attr("aria-labelledby", titleId);
                    } else {
                        wrapper.addClass(KTITLELESS);
                    }

                    that._closable(wrapper);

                    wrapper.append(content);
                    if (options.themeColor && options.themeColor !== "none") {
                        wrapper.addClass(wrapper.addClass(kendo.getValidCssClass("k-dialog-", "themeColor", options.themeColor)));
                    }

                    if (options.content) {
                        kendo.destroy(content.children());
                        content.html(options.content);
                    }

                    if (options.actions.length) {
                        that._createActionbar(wrapper);
                    }
                },

                _closable: function(wrapper) {
                    var that = this;
                    var options = that.options;
                    var titlebar = wrapper.children(KDIALOGTITLEBAR);
                    var titlebarActions = titlebar.find(".k-window-titlebar-actions");
                    var closeAction = titlebarActions.length ? titlebarActions.find(".k-dialog-close") : wrapper.find(".k-dialog-close");

                    closeAction.remove();

                    if (options.closable !== false) {
                        if (options.title !== false && titlebarActions.length) {
                            titlebarActions.append(templates.close(options));
                        }
                        else {
                            wrapper.prepend(templates.close(options));
                        }

                        wrapper.autoApplyNS(NS);
                        that.element.autoApplyNS(NS);

                        wrapper.find(KICONCLOSE)
                            .on("click", that._closeClick.bind(that))
                            .on("keydown", that._closeKeyHandler.bind(that));

                        that.element.on("keydown", that._keydown.bind(that));
                    }
                },

                _createActionbar: function(wrapper) {
                    var isStretchedLayout = (this.options.buttonLayout === "stretched");
                    var buttonLayout = isStretchedLayout ? "stretch" : "end";
                    var actionbar = $(templates.actionbar({ buttonLayout: buttonLayout }));

                    this._addButtons(actionbar);
                    wrapper.append(actionbar);
                },

                _addButtons: function(actionbar) {
                    var that = this,
                        actionClick = that._actionClick.bind(that),
                        actionKeyHandler = that._actionKeyHandler.bind(that),
                        actions = that.options.actions,
                        length = actions.length,
                        action,
                        text;

                    for (var i = 0; i < length; i++) {
                        action = actions[i];
                        text = that._mergeTextWithOptions(action);

                        $(templates.action(action))
                            .autoApplyNS(NS)
                            .html(text)
                            .appendTo(actionbar)
                            .addClass(action.cssClass)
                            .data("action", action.action)
                            .on("click", actionClick)
                            .on("keydown", actionKeyHandler);
                    }
                },

                _mergeTextWithOptions: function(action) {
                    var text = action.text;
                    return text ? template(text)(this.options) : "";
                },

                _tabindex: function(target) {
                    var that = this;
                    var wrapper = that.wrapper;
                    var closeBtn = wrapper.find(KICONCLOSE);
                    var actionButtons = wrapper.find(KBUTTONGROUP + " " + KBUTTON);

                    Widget.fn._tabindex.call(this, target);

                    var tabIndex = target.attr("tabindex");

                    closeBtn.attr("tabIndex", tabIndex);
                    actionButtons.attr("tabIndex", tabIndex);
                },

                _actionClick: function(e) {
                    if (this.wrapper.is(VISIBLE)) {
                        this._runActionBtn(e.currentTarget);
                    }
                },

                _actionKeyHandler: function(e) {
                    if (buttonKeyTrigger(e)) {
                        e.preventDefault();
                        this._runActionBtn(e.currentTarget);
                    } else if (e.keyCode == keys.ESC) {
                        this.close(false);
                    }
                },

                _runActionBtn: function(target) {
                    var that = this;
                    if (that._closing) {
                        return;
                    }

                    var action = $(target).data("action"),
                        preventClose = (isFunction(action) && action({ sender: that }) === false);

                    if (!preventClose) {
                        that.close(false);
                    }
                },

                _triggerOpen: function() {
                    var that = this;
                    var options = that.options;
                    var wrapper = that.wrapper;

                    that.toFront();
                    that._triggerInitOpen();
                    that.trigger(OPEN);
                    if (options.modal) {
                        that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
                        that._focusDialog();
                    }
                },

                open: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        showOptions = this._animationOptions(OPEN),
                        options = that.options,
                        overlay, otherModalsVisible;

                    this._triggerInitOpen();

                    if (!that.trigger(OPEN)) {
                        if (that._closing) {
                            wrapper.kendoStop(true, true);
                        }

                        that._closing = false;

                        that.toFront();
                        options.visible = true;
                        if (options.modal) {
                            otherModalsVisible = !!that._modals().length;
                            overlay = that._overlay(otherModalsVisible);

                            overlay.kendoStop(true, true);

                            if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {
                                var overlayFx = kendo.fx(overlay).fadeIn();
                                overlayFx.duration(showOptions.duration || 0);
                                overlayFx.endValue(0.5);
                                overlayFx.play();
                            } else {
                                overlay.css("opacity", 0.5);
                            }

                            overlay.show();
                        }

                        wrapper.show().kendoStop().kendoAnimate({
                            effects: showOptions.effects,
                            duration: showOptions.duration,
                            complete: that._openAnimationEnd.bind(that)
                        });
                        wrapper.show();

                    }

                    return that;
                },

                _animationOptions: function(id) {
                    var animation = this.options.animation;
                    var basicAnimation = {
                        open: { effects: {} },
                        close: { hide: true, effects: {} }
                    };

                    return animation && animation[id] || basicAnimation[id];
                },

                _openAnimationEnd: function() {
                    if (this.options.modal) {
                        this._focusDialog();
                    }
                    this.trigger(SHOW);
                },

                _triggerInitOpen: function() {
                    if (!defined(this._initOpenTriggered)) {
                        this._initOpenTriggered = true;
                        this.trigger(INITOPEN);
                    }
                },

                toFront: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        zIndex = +wrapper.css(ZINDEX),
                        originalZIndex = zIndex;

                    that.center();

                    $(KWINDOW).each(function(i, element) {
                        var windowObject = $(element),
                            zIndexNew = windowObject.css(ZINDEX);

                        if (!isNaN(zIndexNew)) {
                            zIndex = Math.max(+zIndexNew, zIndex);
                        }
                    });

                    if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
                        wrapper.css(ZINDEX, zIndex + 2);
                    }

                    that.element.find("> .k-overlay").remove();
                    wrapper = null;

                    return that;
                },

                close: function(systemTriggered) {
                    if (!arguments.length) {
                        systemTriggered = true;
                    }

                    this._close(systemTriggered);
                    this._stopCenterOnResize();
                    return this;
                },

                _close: function(systemTriggered) {
                    var that = this,
                        wrapper = that.wrapper,
                        options = that.options,
                        showOptions = this._animationOptions("open"),
                        hideOptions = this._animationOptions("close");

                    if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
                        if (that._closing) {
                            return;
                        }
                        that._closing = true;

                        options.visible = false;
                        this._removeOverlay();

                        wrapper.kendoStop().kendoAnimate({
                            effects: hideOptions.effects || showOptions.effects,
                            reverse: hideOptions.reverse === true,
                            duration: hideOptions.duration,
                            complete: this._closeAnimationEnd.bind(this)
                        });
                    }

                    return that;
                },

                center: function() {
                    this._center();
                    this._centerOnResize();
                },

                _center: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        documentWindow = $(window),
                        scrollTop = 0,
                        scrollLeft = 0,
                        newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2),
                        newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css("paddingTop"), 10)) / 2);

                    wrapper.css({
                        left: newLeft,
                        top: newTop
                    });

                    return that;
                },

                _centerOnResize: function() {
                    if (this._trackResize) {
                        return;
                    }

                    kendo.onResize(this._centerCallback);
                    this._trackResize = true;
                },

                _stopCenterOnResize: function() {
                    kendo.unbindResize(this._centerCallback);
                    this._trackResize = false;
                },

                _removeOverlay: function() {
                    var modals = this._modals();
                    var options = this.options;
                    var hideOverlay = options.modal && !modals.length;

                    if (hideOverlay) {
                        this._overlay(false).remove();

                        if (options.modal.preventScroll) {
                            this._enableDocumentScrolling();
                        }
                    } else if (modals.length) {
                        this._object(modals.last())._overlay(true);

                        if (options.modal.preventScroll) {
                            this._stopDocumentScrolling();
                        }
                    }
                },

                _stopDocumentScrolling: function() {
                    var that = this;

                    var $body = $("body");
                    that._storeOverflowRule($body);
                    $body.css(OVERFLOW, HIDDEN);

                    var $html = $("html");
                    var html = $html[0];
                    that._storeOverflowRule($html);
                    $html.css(OVERFLOW, HIDDEN);

                    // prevent touch due to bug in ios
                    if (kendo.support.mobileOS.ios) {
                        html.addEventListener(TOUCHSTART, that._touchStart, { passive: false });
                        html.addEventListener(TOUCHMOVE, that._touchMove, { passive: false });
                    }
                },

                _touchStart: function(e) {
                    $(this).data(DATAHTMLTAPYRULE, e.changedTouches[0].pageY);
                },

                _touchMove: function(e) {
                    var target = e.target;
                    var $target = $(e.target);
                    var upScroll = e.changedTouches[0].pageY - $(this).data(DATAHTMLTAPYRULE) > 0;
                    var preventYScroll = $target.is(KCONTENTSELECTOR) &&
                        (upScroll && $target.scrollTop() === 0) ||
                        (!upScroll && $target.scrollTop() === target.scrollHeight - target.clientHeight);
                    if (!$target.is(KCONTENTSELECTOR) || preventYScroll) {
                        e.preventDefault();
                    }
                },

                _enableDocumentScrolling: function() {
                    var that = this;
                    var $body = $(document.body);
                    var $html = $("html");
                    var html = $html[0];

                    that._restoreOverflowRule($body);
                    that._restoreOverflowRule($html);

                    if (kendo.support.mobileOS.ios) {
                        $html.removeData(DATAHTMLTAPYRULE);
                        html.removeEventListener(TOUCHSTART, that._touchStart, { passive: false });
                        html.removeEventListener(TOUCHMOVE, that._touchMove, { passive: false });
                    }
                },

                _storeOverflowRule: function($element) {
                    if (this._isOverflowStored($element)) {
                        return;
                    }

                    var overflowRule = $element.get(0).style.overflow;

                    if (typeof overflowRule === "string") {
                        $element.data(DATADOCOVERFLOWRULE, overflowRule);
                    }
                },

                _isOverflowStored: function($element) {
                    return typeof $element.data(DATADOCOVERFLOWRULE) === "string";
                },

                _restoreOverflowRule: function($element) {
                    var overflowRule = $element.data(DATADOCOVERFLOWRULE);

                    if (overflowRule !== null && overflowRule !== undefined$1) {
                        $element.css(OVERFLOW, overflowRule);
                        $element.removeData(DATADOCOVERFLOWRULE);
                    } else {
                        $element.css(OVERFLOW, "");
                    }
                },

                _closeAnimationEnd: function() {
                    var that = this,
                        previousFocus = that._previousFocus;

                    that._closing = false;
                    that.wrapper.hide().css("opacity", "");
                    that.trigger(HIDE);

                    if (that.options.modal) {
                        var lastModal = that._object(that._modals().last());
                        if (lastModal) {
                            lastModal.toFront();
                        } else if (previousFocus) {
                            that._previousFocus = null;

                            setTimeout(function() {
                                previousFocus.focus();
                            });
                        }
                    }
                },

                _modals: function() {
                    var that = this;

                    var zStack = $(KWINDOW).filter(function() {
                        var modal = that._object($(this));

                        return modal &&
                            modal.options &&
                            modal.options.modal &&
                            modal.options.visible &&
                            modal.options.appendTo === that.options.appendTo &&
                            !modal.containment &&
                            $(modal.element).is(VISIBLE);
                    }).sort(function(a, b) {
                        return +$(a).css("zIndex") - +$(b).css("zIndex");
                    });

                    that = null;

                    return zStack;
                },

                _object: function(element) {
                    var content = element.children(KCONTENTSELECTOR);
                    var widget = kendo.widgetInstance(content);

                    if (widget) {
                        return widget;
                    }

                    return undefined$1;
                },

                destroy: function() {
                    var that = this;
                    that._destroy();

                    Widget.fn.destroy.call(that);

                    kendo.destroy(that.wrapper);

                    that.wrapper.remove();
                    that.wrapper = that.element = $();
                },

                _destroy: function() {
                    var that = this;
                    var ns = "." + NS;

                    that.wrapper.off(ns);
                    that.element.off(ns);
                    that.wrapper.find(KICONCLOSE + "," + KBUTTONGROUP + " > " + KBUTTON).off(ns);
                    that._stopCenterOnResize();
                },

                title: function(html) {
                    var that = this,
                        wrapper = that.wrapper,
                        options = that.options,
                        titlebar = wrapper.children(KDIALOGTITLEBAR),
                        title = titlebar.children(KDIALOGTITLE),
                        encodedHtml = encode(html);

                    if (!arguments.length) {
                        return title.html();
                    }

                    if (html === false) {
                        titlebar.remove();
                        wrapper.addClass(KTITLELESS);
                    } else {
                        if (!titlebar.length) {
                            titlebar = $(templates.titlebar(options)).prependTo(wrapper);
                            title = titlebar.children(KDIALOGTITLE);
                            wrapper.removeClass(KTITLELESS);
                        }
                        title.html(encodedHtml);
                    }

                    that.options.title = encodedHtml;

                    return that;
                },

                content: function(html, data) {
                    var that = this,
                        content = that.wrapper.children(KCONTENTSELECTOR);

                    if (!defined(html)) {
                        return content.html();
                    }

                    kendo.destroy(content.children());
                    content.html(html);

                    that.options.content = html;

                    return that;
                },

                _focusDialog: function() {
                    var firstModal = this._object(this._modals().first());

                    this._previousFocus = firstModal && firstModal._previousFocus ? firstModal._previousFocus : document.activeElement;

                    if (this._defaultFocus) {
                        this._focus(this._defaultFocus);
                    }
                    this._tabKeyTrap.trap();
                },

                _focus: function(node) {
                    if (node) {
                        node.focus();
                    }
                },

                events: [
                    INITOPEN,
                    OPEN,
                    CLOSE,
                    SHOW,
                    HIDE
                ],

                options: {
                    title: "",
                    buttonLayout: "stretched",
                    themeColor: "",
                    actions: [],
                    modal: true,
                    size: "auto",
                    width: null,
                    height: null,
                    minWidth: 0,
                    minHeight: 0,
                    maxWidth: Infinity,
                    maxHeight: Infinity,
                    content: null,
                    visible: null,
                    appendTo: BODY,
                    closable: true
                }
            });

            var Dialog = DialogBase.extend({
                options: {
                    name: "Dialog",
                    messages: {
                        close: "Close"
                    }
                }
            });

            kendo.ui.plugin(Dialog);

            var PopupBox = DialogBase.extend({
                _init: function(element, options) {
                    var that = this;

                    that.wrapperTemplate = templates.alertWrapper;
                    options._defaultFocus = null;
                    that._ensureContentId(element);

                    DialogBase.fn._init.call(that, element, options);

                    that.bind(HIDE, that.destroy.bind(that));

                    that._ariaDescribedBy();
                    that._initFocus();
                },

                _ensureContentId: function(element) {
                    var node = $(element);
                    if (!node.attr("id")) {
                        node.attr("id", kendo.guid() + "_k-popup");
                    }
                },

                _ariaDescribedBy: function() {
                    this.wrapper.attr("aria-describedby", this.element.attr("id"));
                },

                _initFocus: function() {
                    var o = this.options;

                    this._defaultFocus = this._chooseEntryFocus();
                    if (this._defaultFocus && o.visible && o.modal) {
                        this._focusDialog();
                    }
                },

                _chooseEntryFocus: function() {
                    return this.wrapper.find(KBUTTONGROUP + " > " + KBUTTON)[0];
                },

                options: {
                    title: window.location.host,
                    closable: false,
                    messages: messages
                }
            });

            var Alert = PopupBox.extend({
                _init: function(element, options) {
                    var that = this;
                    PopupBox.fn._init.call(that, element, options);
                    that.wrapper.addClass(KALERT);
                },

                options: {
                    name: "Alert",
                    modal: true,
                    actions: [{
                        text: function (ref) {
                            var messages = ref.messages;

                            return ("" + (encode(messages.okText)));
            }
                    }]
                }
            });

            kendo.ui.plugin(Alert);

            var kendoAlert = function(text) {
                return $(templates.alert).kendoAlert({ content: text }).data("kendoAlert").open();
            };

            var Confirm = PopupBox.extend({
                _init: function(element, options) {
                    var that = this;
                    PopupBox.fn._init.call(that, element, options);
                    that.wrapper.addClass(KCONFIRM);
                    that.result = $.Deferred();
                },

                options: {
                    name: "Confirm",
                    modal: true,
                    actions: [{
                        text: function (ref) {
                            var messages = ref.messages;

                            return ("" + (encode(messages.okText)));
            },
                        primary: true,
                        action: function(e) {
                            e.sender.result.resolve();
                        }
                    }, {
                        text: function (ref) {
                            var messages = ref.messages;

                            return ("" + (encode(messages.cancel)));
            },
                        action: function(e) {
                            e.sender.result.reject();
                        }
                    }]
                }
            });

            kendo.ui.plugin(Confirm);

            var kendoConfirm = function(text) {
                var confirmDialog = $(templates.confirm).kendoConfirm({ content: text }).data("kendoConfirm").open();
                return confirmDialog.result;
            };

            var Prompt = PopupBox.extend({
                _init: function(element, options) {
                    var that = this;
                    PopupBox.fn._init.call(that, element, options);
                    that.wrapper.addClass(KPROMPT);
                    that._createPrompt();
                    that.result = $.Deferred();
                },

                _createPrompt: function() {
                    var value = this.options.value,
                        promptContainer = $(templates.promptInputContainer(this.options)).insertAfter(this.element);

                    this.input = new kendo.ui.TextBox(promptContainer.find("input"));

                    if (value) {
                        this.input.value(value);
                    }

                    this._defaultFocus = this._chooseEntryFocus();
                    this._focusDialog();
                },

                _chooseEntryFocus: function() {
                    return this.wrapper.find(KTEXTBOX)[0];
                },

                options: {
                    name: "Prompt",
                    modal: true,
                    value: "",
                    actions: [{
                        text: function (ref) {
                            var messages = ref.messages;

                            return ("" + (encode(messages.okText)));
            },
                        primary: true,
                        action: function(e) {
                            var sender = e.sender,
                                value = sender.input.value();

                            sender.result.resolve(value);
                        }
                    }, {
                        text: function (ref) {
                            var messages = ref.messages;

                            return ("" + (encode(messages.cancel)));
            },
                        action: function(e) {
                            var sender = e.sender,
                                value = sender.input.value();

                            e.sender.result.reject(value);
                        }
                    }]
                }
            });

            kendo.ui.plugin(Prompt);

            var kendoPrompt = function(text, value) {
                var promptDialog = $(templates.prompt).kendoPrompt({
                    content: text,
                    value: value
                }).data("kendoPrompt").open();

                return promptDialog.result;
            };

            templates = {
                wrapper: template(function () { return "<div class='k-window k-dialog' role='dialog'></div>"; }),
                action: template(function (data) { return ("<button type='button' class='k-button k-button-md k-rounded-md k-button-solid " + (data.primary ? 'k-button-solid-primary' : 'k-button-solid-base') + "'></button>"); }),
                titlebar: template(function (ref) {
                        var title = ref.title;

                        return "<div class='k-window-titlebar k-dialog-titlebar'>" +
                        "<span class='k-window-title k-dialog-title'>" + (encode(title)) + "</span>" +
                        "<div class='k-window-titlebar-actions k-dialog-titlebar-actions k-hstack'></div>" +
                    "</div>";
            }
                ),
                close: template(function (ref) {
                    var messages = ref.messages;

                    return ("<button class=\"k-window-titlebar-action k-dialog-titlebar-action k-button k-button-md k-button-flat k-button-flat-base k-rounded-md k-icon-button k-dialog-close\" title='" + (encode(messages.close)) + "' aria-label='" + (encode(messages.close)) + "' tabindex='-1'>\n                                                    " + (kendo.ui.icon({ icon: "x", iconClass: "k-button-icon" })) + "\n                                                </button>");
            }),
                actionbar: template(function (ref) {
                    var buttonLayout = ref.buttonLayout;

                    return ("<div class='k-dialog-actions k-actions k-hstack k-justify-content-" + (encode(buttonLayout)) + "'></div>");
            }),
                overlay: "<div class='k-overlay'></div>",
                alertWrapper: template(function () { return "<div class='k-window k-dialog' role='alertdialog'></div>"; }),
                alert: "<div></div>",
                confirm: "<div></div>",
                prompt: "<div></div>",
                promptInputContainer: template(function (ref) {
                    var messages = ref.messages;

                    return ("<div class='k-prompt-container'><input type='text' title='" + (encode(messages.promptInput)) + "' aria-label='" + (encode(messages.promptInput)) + "' /></div>");
            })
            };

            kendo.alert = kendoAlert;
            kendo.confirm = kendoConfirm;
            kendo.prompt = kendoPrompt;

        })(window.kendo.jQuery);
    var kendo$3 = kendo;

    var __meta__ = {
            id: "window",
            name: "Window",
            category: "web",
            description: "The Window widget displays content in a modal or non-modal HTML window.",
            depends: [ "draganddrop", "popup", "icons" ],
            features: [ {
                id: "window-fx",
                name: "Animation",
                description: "Support for animation",
                depends: [ "fx" ]
            } ]
        };

        (function($, undefined$1) {
            var kendo = window.kendo,
                Widget = kendo.ui.Widget,
                TabKeyTrap = kendo.ui.Popup.TabKeyTrap,
                Draggable = kendo.ui.Draggable,
                isPlainObject = $.isPlainObject,
                activeElement = kendo._activeElement,
                outerWidth = kendo._outerWidth,
                outerHeight = kendo._outerHeight,
                extend = $.extend,
                each = $.each,
                template = kendo.template,
                BODY = "body",
                templates,
                NS = ".kendoWindow",
                MODAL_NS = ".kendoWindowModal",
                // classNames
                KWINDOW = ".k-window",
                KWINDOWTITLE = ".k-window-title",
                KWINDOWTITLEBAR = KWINDOWTITLE + "bar",
                KWINDOWCONTENT = ".k-window-content",
                KDIALOGCONTENT = ".k-dialog-content",
                KWINDOWRESIZEHANDLES = ".k-resize-handle",
                KOVERLAY = ".k-overlay",
                KWINDOWMINIMIZED = "k-window-minimized",
                KCONTENTFRAME = "k-content-frame",
                LOADINGICONCLASS = "k-i-loading",
                KHOVERSTATE = "k-hover",
                KFOCUSEDSTATE = "k-focus",
                MAXIMIZEDSTATE = "k-window-maximized",
                INLINE_FLEX = "k-display-inline-flex",
                // constants
                VISIBLE = ":visible",
                HIDDEN = "hidden",
                CURSOR = "cursor",
                // events
                OPEN = "open",
                ACTIVATE = "activate",
                DEACTIVATE = "deactivate",
                CLOSE = "close",
                REFRESH = "refresh",
                MINIMIZE = "minimize",
                MAXIMIZE = "maximize",
                RESIZESTART = "resizeStart",
                RESIZE = "resize",
                RESIZEEND = "resizeEnd",
                DRAGSTART = "dragstart",
                DRAGEND = "dragend",
                RESTORE = "restore",
                KENDOKEYDOWN = "kendoKeydown",
                ERROR = "error",
                OVERFLOW = "overflow",
                DATADOCOVERFLOWRULE = "original-overflow-rule",
                ZINDEX = "zIndex",
                MINIMIZE_MAXIMIZEICONSELECTORS = ".k-window-titlebar-actions .k-i-window-minimize,.k-window-titlebar-actions .k-i-window,.k-window-titlebar-actions .k-svg-i-window-minimize,.k-window-titlebar-actions .k-svg-i-window",
                KPINICONCLASSSELECTOR = ".k-i-pin,.k-svg-i-pin",
                KUNPINICONCLASSSELECTOR = ".k-i-unpin,.k-svg-i-unpin",
                PIN_UNPINICONCLASSSELECTOR = KPINICONCLASSSELECTOR + "," + KUNPINICONCLASSSELECTOR,
                TITLEBAR_BUTTONSSELECTOR = ".k-window-titlebar .k-window-titlebar-action",
                REFRESHICONSELECTOR = ".k-window-titlebar .k-i-arrow-rotate-cw,.k-window-titlebar .k-svg-i-arrow-rotate-cw",
                WINDOWEVENTSHANDLED = "WindowEventsHandled",
                zero = /^0[a-z]*$/i,
                isLocalUrl = kendo.isLocalUrl,
                SIZE = {
                    small: "k-window-sm",
                    medium: "k-window-md",
                    large: "k-window-lg"
                };

            function defined(x) {
                return (typeof x != "undefined");
            }

            function toInt(element, property) {
                return parseInt(element.css(property), 10) || 0;
            }

            function constrain(value, low, high) {
                var normalizedValue;

                if (value && isNaN(value) && value.toString().indexOf("px") < 0) {
                    normalizedValue = value;
                } else {
                    normalizedValue = Math.max(
                        Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)),
                        low === -Infinity ? low : parseInt(low, 10)
                    );
                }

                return normalizedValue;
            }

            function executableScript() {
                return !this.type || this.type.toLowerCase().indexOf("script") >= 0;
            }


            function getPosition(elem) {
                var result = { top: elem.offsetTop, left: elem.offsetLeft },
                    parent = elem.offsetParent;

                while (parent) {
                    result.top += parent.offsetTop;
                    result.left += parent.offsetLeft;

                    var parentOverflowX = $(parent).css("overflowX");
                    var parentOverflowY = $(parent).css("overflowY");

                    if (parentOverflowY === "auto" || parentOverflowY === "scroll") {
                        result.top -= parent.scrollTop;
                    }

                    if (parentOverflowX === "auto" || parentOverflowX === "scroll") {
                        result.left -= parent.scrollLeft;
                    }

                    parent = parent.offsetParent;
                }

                return result;
            }

            var Window = Widget.extend({
                init: function(element, options) {
                    var that = this,
                        wrapper,
                        offset = {},
                        visibility, display, position,
                        isVisible = false,
                        content,
                        windowContent,
                        windowFrame,
                        globalWindow,
                        suppressActions = options && options.actions && !options.actions.length,
                        id;

                    Widget.fn.init.call(that, element, options);
                    options = that.options;
                    position = options.position;
                    element = that.element;
                    content = options.content;
                    globalWindow = $(window);

                    if (suppressActions) {
                        options.actions = [];
                    }

                    that.appendTo = $(options.appendTo);

                    that.containment = options.draggable.containment ? $(options.draggable.containment).first() : null;

                    if (content && !isPlainObject(content)) {
                        content = options.content = { url: content };
                    }

                    // remove script blocks to prevent double-execution
                    element.find("script").filter(executableScript).remove();

                    if (!element.parent().is(that.appendTo) && !that.containment && (position.top === undefined$1 || position.left === undefined$1)) {
                        if (element.is(VISIBLE)) {
                            offset = element.offset();
                            isVisible = true;
                        } else {
                            visibility = element.css("visibility");
                            display = element.css("display");

                            element.css({ visibility: HIDDEN, display: "" });

                            if (document.body.contains(element[0])) {
                                offset = element.offset();
                            } else {
                                offset = { top: 0, left: 0 };
                            }

                            element.css({ visibility: visibility, display: display });
                        }

                        if (position.top === undefined$1) {
                            position.top = offset.top;
                        }
                        if (position.left === undefined$1) {
                            position.left = offset.left;
                        }
                    }

                    if (!defined(options.visible) || options.visible === null) {
                        options.visible = element.is(VISIBLE);
                    }

                    wrapper = that.wrapper = element.closest(KWINDOW);

                    if (options.themeColor && options.themeColor !== "none") {
                        wrapper.addClass(kendo.getValidCssClass("k-window-", "themeColor", options.themeColor));
                    }

                    if (!element.is(".k-window-content") || !wrapper[0]) {
                        element.addClass("k-window-content");
                        element.attr("tabindex", 0);
                        that._createWindow(element, options);
                        wrapper = that.wrapper = element.closest(KWINDOW);

                        that.title(that.options.title);
                        that._dimensions();

                        if (options._footerTemplate) {
                            that.wrapper.append(kendo.template(options._footerTemplate)(options._footerMessages));
                        }
                    }

                    that.minTop = that.minLeft = -Infinity;
                    that.maxTop = that.maxLeft = Infinity;
                    that._position();

                    if (content) {
                        that.refresh(content);
                    }

                    if (options.visible) {
                        that.toFront(null, !options.modal);
                    }

                    windowContent = wrapper.children(KWINDOWCONTENT);

                    if (options.visible && options.modal) {
                        that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
                    }

                    wrapper
                        .on("mouseenter" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonEnter.bind(that))
                        .on("mouseleave" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonLeave.bind(that))
                        .on("click" + NS, "> " + TITLEBAR_BUTTONSSELECTOR, that._windowActionHandler.bind(that))
                        .on("keydown" + NS, that, that._keydown.bind(that))
                        .on("focus" + NS, that._focus.bind(that))
                        .on("blur" + NS, that._blur.bind(that));

                    windowContent
                        .on("keydown" + NS, that, that._keydownContent.bind(that));

                    windowFrame = windowContent.find("." + KCONTENTFRAME)[0];

                    if (windowFrame && !globalWindow.data(WINDOWEVENTSHANDLED)) {

                        globalWindow.on("blur" + NS, function() {
                            var element = $(document.activeElement).parent(KWINDOWCONTENT);
                            if (element.length) {
                                var windowInstance = kendo.widgetInstance(element);
                                windowInstance._focus();
                            }
                        });

                        globalWindow.on("focus" + NS, function() {
                            $(KWINDOWCONTENT).not(KDIALOGCONTENT).each(function(i, element) {
                                kendo.widgetInstance($(element))._blur();
                            });
                        });

                        globalWindow.data(WINDOWEVENTSHANDLED, true);
                    }

                    this._resizable();

                    this._draggable();

                    if (options.pinned && this.wrapper.is(":visible")) {
                        that.pin();
                    }

                    id = element.attr("id");
                    if (id) {
                        id = id + "_wnd_title";
                        wrapper.attr({
                                "role": "dialog",
                                "aria-labelledby": id
                            }).children(KWINDOWTITLEBAR)
                            .children(KWINDOWTITLE)
                            .attr("id", id);
                    }

                    wrapper.add(wrapper.children(".k-resize-handle," + KWINDOWTITLEBAR))
                        .on(kendo.support.mousedown + NS, that.toFront.bind(that));

                    that.touchScroller = kendo.touchScroller(element);

                    that._resizeHandler = that._onDocumentResize.bind(that);

                    that._marker = kendo.guid().substring(0, 8);

                    $(window).on("resize" + NS + that._marker, that._resizeHandler);

                    if (options.visible) {
                        that.trigger(OPEN);
                        that.trigger(ACTIVATE);
                    }

                    kendo.notify(that);

                    if (this.options.modal) {
                        this._tabKeyTrap = new TabKeyTrap(wrapper);
                        this._tabKeyTrap.trap();
                        this._tabKeyTrap.shouldTrap = function() {
                            return wrapper.data("isFront");
                        };
                    }

                    if (that._showWatermarkOverlay) {
                        that._showWatermarkOverlay(that.wrapper[0]);
                    }
                },

                _buttonEnter: function(e) {
                    $(e.currentTarget).addClass(KHOVERSTATE);
                },

                _buttonLeave: function(e) {
                    $(e.currentTarget).removeClass(KHOVERSTATE);
                },

                _focus: function() {
                    this.wrapper.addClass(KFOCUSEDSTATE);
                },

                _blur: function() {
                    this.wrapper.removeClass(KFOCUSEDSTATE);
                },

                _dimensions: function() {
                    var wrapper = this.wrapper;
                    var options = this.options;
                    var width = options.width;
                    var height = options.height;
                    var maxHeight = options.maxHeight;
                    var sizeClass = options.size;
                    var dimensions = ["minWidth","minHeight","maxWidth","maxHeight"];
                    var contentBoxSizing = wrapper.css("box-sizing") == "content-box";

                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, "border-left-width") + toInt(wrapper, "border-right-width") : 0;
                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, "border-top-width") + toInt(wrapper, "border-bottom-width") : 0;
                    var paddingTop = contentBoxSizing ? toInt(wrapper, "padding-top") : 0;

                    if (this.containment && !this._isPinned) {
                        this._updateBoundaries();
                        options.maxHeight = Math.min(this.containment.height - (tbBorderWidth + paddingTop), maxHeight);
                        options.maxWidth = Math.min(this.containment.width - lrBorderWidth, options.maxWidth);
                    }

                    for (var i = 0; i < dimensions.length; i++) {
                        var value = options[dimensions[i]] || "";
                        if (value != Infinity) {
                            wrapper.css(dimensions[i], value);
                        }
                    }

                    if (maxHeight != Infinity) {
                        this.element.css("maxHeight", maxHeight);
                    }

                    if (width) {
                        wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));
                    }
                    else {
                        wrapper.outerWidth("");
                    }

                    if (height) {
                        wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));
                    }
                    else {
                        wrapper.outerHeight("");
                    }

                    if (!options.visible) {
                        wrapper.removeClass(INLINE_FLEX).hide();
                    }

                    if (sizeClass && SIZE[sizeClass]) {
                        wrapper.addClass(SIZE[sizeClass]);
                    }
                },

                _position: function() {
                    var wrapper = this.wrapper,
                        position = this.options.position,
                        containmentTop, containmentLeft;

                    this._updateBoundaries();

                    if (this.containment) {
                        position.top = position.top || 0;
                        position.left = position.left || 0;

                        containmentTop = position.top.toString().indexOf("%") > 0 ?
                            parseInt(this.containment.height * (parseFloat(position.top) / 100), 10) :
                            position.top;

                        containmentLeft = position.left.toString().indexOf("%") > 0 ?
                            parseInt(this.containment.width * (parseFloat(position.left) / 100), 10) :
                            position.left;

                        position.top = constrain(containmentTop, this.minTop, this.maxTop);
                        position.left = constrain(containmentLeft, this.minLeft, this.maxLeft);
                    }

                    if (position.top && position.top.toString().indexOf("px") > 0) {
                        position.top = Number(position.top.replace("px", ""));
                    }

                    if (position.left && position.left.toString().indexOf("px") > 0) {
                        position.left = Number(position.left.replace("px", ""));
                    }

                    if (position.top === 0) {
                        position.top = position.top.toString();
                    }

                    if (position.left === 0) {
                        position.left = position.left.toString();
                    }

                    wrapper.css({
                        top: position.top || "",
                        left: position.left || ""
                    });
                },

                _updateBoundaries: function() {
                    var containment = this.containment;

                    if (!containment) {
                        return null;
                    }

                    containment.width = containment.innerWidth();
                    containment.height = containment.innerHeight();

                    if (parseInt(containment.width, 10) > containment[0].clientWidth) {
                        containment.width -= kendo.support.scrollbar();
                    }

                    if (parseInt(containment.height, 10) > containment[0].clientHeight) {
                        containment.height -= kendo.support.scrollbar();
                    }

                    containment.position = getPosition(containment[0]);

                    if (this._isPinned) {
                        this.minTop = this.minLeft = -Infinity;
                        this.maxTop = this.maxLeft = Infinity;
                    } else {
                        this.minTop = containment.scrollTop();
                        this.minLeft = containment.scrollLeft();
                        this.maxLeft = this.minLeft + containment.width - outerWidth(this.wrapper, true);
                        this.maxTop = this.minTop + containment.height - outerHeight(this.wrapper, true);
                    }
                },

                _animationOptions: function(id) {
                    var animation = this.options.animation;
                    var basicAnimation = {
                        open: { effects: {} },
                        close: { hide: true, effects: {} }
                    };

                    return animation && animation[id] || basicAnimation[id];
                },

                _resize: function() {
                    kendo.resize(this.element.children());
                },

                _resizable: function() {
                    var resizable = this.options.resizable;
                    var wrapper = this.wrapper;

                    if (this.resizing) {
                        wrapper
                            .off("dblclick" + NS)
                            .children(KWINDOWRESIZEHANDLES).remove();

                        this.resizing.destroy();
                        this.resizing = null;
                    }

                    if (resizable) {
                        wrapper.on("dblclick" + NS, KWINDOWTITLEBAR, (function(e) {
                            if (!$(e.target).closest(".k-window-titlebar-action").length) {
                                this.toggleMaximization();
                            }
                        }).bind(this));

                        each("n e s w se sw ne nw".split(" "), function(index, handler) {
                            wrapper.append(templates.resizeHandle(handler));
                        });

                        this.resizing = new WindowResizing(this);
                    }

                    wrapper = null;
                },

                _draggable: function() {
                    var draggable = this.options.draggable;

                    if (this.dragging) {
                        this.dragging.destroy();
                        this.dragging = null;
                    }
                    if (draggable) {
                        this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR, draggable.clickMoveClick);
                    }
                },

                _actions: function() {
                    var options = this.options;
                    var actions = options.actions;
                    var pinned = options.pinned;
                    var titlebar = this.wrapper.children(KWINDOWTITLEBAR);
                    var container = titlebar.find(".k-window-titlebar-actions");
                    var windowSpecificCommands = [ "minimize", "maximize" ];
                    var icons = {
                        "maximize": "window",
                        "refresh": "arrow-rotate-cw",
                        "custom": "gear"
                    };
                    var icon;

                    actions = $.map(actions, function(action) {
                        action = pinned && action.toLowerCase() === "pin" ? "unpin" : action;
                        icon = icons[action.toLowerCase()] || "";
                        return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? "window-" + action : action, icon: action.toLowerCase() == "close" ? "x" : icon };
                    });

                    container.html(kendo.render(templates.action, actions));
                },

                setOptions: function(options) {
                    var that = this;
                    var sizeClass = that.options.size;
                    var doc = this.containment && !that._isPinned ? this.containment : $(document);
                    // make a deep extend over options.position telerik/kendo-ui-core#844
                    var cachedOptions = JSON.parse(JSON.stringify(options));

                    that.wrapper.removeClass(kendo.getValidCssClass("k-window-", "themeColor", that.options.themeColor));

                    extend(options.position, that.options.position);
                    extend(options.position, cachedOptions.position);

                    that._containerScrollTop = doc.scrollTop();
                    that._containerScrollLeft = doc.scrollLeft();

                    Widget.fn.setOptions.call(that, options);
                    var scrollable = that.options.scrollable !== false;

                    that.restore();

                    if (typeof options.title !== "undefined") {
                        that.title(options.title);
                    }

                    that.wrapper.removeClass(SIZE[sizeClass]);
                    that._dimensions();

                    that._position();
                    that._resizable();
                    that._draggable();
                    that._actions();

                    if (that.options.themeColor && that.options.themeColor !== "none") {
                        that.wrapper.addClass(kendo.getValidCssClass("k-window-", "themeColor", that.options.themeColor));
                    }

                    if (typeof options.modal !== "undefined") {
                        var visible = that.options.visible !== false;
                        that._enableDocumentScrolling();
                        that._overlay(options.modal && visible);
                    }

                    that.element.css(OVERFLOW, scrollable ? "" : "hidden");
                },

                events: [
                    OPEN,
                    ACTIVATE,
                    DEACTIVATE,
                    CLOSE,
                    MINIMIZE,
                    MAXIMIZE,
                    REFRESH,
                    RESTORE,
                    RESIZESTART,
                    RESIZE,
                    RESIZEEND,
                    DRAGSTART,
                    DRAGEND,
                    KENDOKEYDOWN,
                    ERROR
                ],

                options: {
                    name: "Window",
                    animation: {
                        open: {
                            effects: { zoom: { direction: "in" }, fade: { direction: "in" } },
                            duration: 350
                        },
                        close: {
                            effects: { zoom: { direction: "out", properties: { scale: 0.7 } }, fade: { direction: "out" } },
                            duration: 350,
                            hide: true
                        }
                    },
                    title: "",
                    themeColor: "",
                    actions: ["Close"],
                    autoFocus: true,
                    modal: false,
                    size: "auto",
                    resizable: true,
                    draggable: true,
                    minWidth: 90,
                    minHeight: 50,
                    maxWidth: Infinity,
                    maxHeight: Infinity,
                    pinned: false,
                    scrollable: true,
                    position: {},
                    content: null,
                    visible: null,
                    height: null,
                    width: null,
                    appendTo: "body",
                    isMaximized: false,
                    isMinimized: false
                },

                _closable: function() {
                    return $.inArray("close", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;
                },

                _keydownContent: function(e) {
                    var that = this,
                        keys = kendo.keys,
                        keyCode = e.keyCode;

                    if (keyCode == keys.ESC && that._closable()) {
                        e.stopPropagation();
                        that._close(false);
                    }
                },

                _keydown: function(e) {
                    var that = this,
                        options = that.options,
                        keys = kendo.keys,
                        keyCode = e.keyCode,
                        wrapper = that.wrapper,
                        offset, handled,
                        distance = 10,
                        isMaximized = options.isMaximized,
                        isMinimized = options.isMinimized,
                        newWidth, newHeight, w, h;

                    if (keyCode == keys.ESC && that._closable()) {
                        e.stopPropagation();
                        that._close(false);
                    }

                    if (e.target != e.currentTarget || that._closing) {
                        return;
                    }

                     // Refresh
                    if (e.altKey && keyCode == 82) {// Alt + R
                        that.refresh();
                    }

                    // Pin/Unpin
                    if (e.altKey && keyCode == 80) {// Alt + P
                        if (that.options.pinned) {
                            that.unpin();
                        } else {
                            that.pin();
                        }
                    }

                    // Maximize/Restore/Miminimize
                    if (e.altKey && keyCode == keys.UP) {
                        if (isMinimized) {
                            that.restore();
                            that.wrapper.trigger("focus");
                        } else if (!isMaximized) {
                            that.maximize();
                            that.wrapper.trigger("focus");
                        }
                    } else if (e.altKey && keyCode == keys.DOWN) {
                        if (!isMinimized && !isMaximized) {
                            that.minimize();
                            that.wrapper.trigger("focus");
                        } else if (isMaximized) {
                            that.restore();
                            that.wrapper.trigger("focus");
                        }
                    }

                    offset = kendo.getOffset(wrapper);

                    if (that.containment && !that._isPinned) {
                        offset = that.options.position;
                    }

                    if (options.draggable && !e.ctrlKey && !e.altKey && !isMaximized) {
                        that._updateBoundaries();
                        if (keyCode == keys.UP) {
                            offset.top = constrain(offset.top - distance, that.minTop, that.maxTop);
                            handled = wrapper.css("top", offset.top);
                        } else if (keyCode == keys.DOWN) {
                            offset.top = constrain(offset.top + distance, that.minTop, that.maxTop);
                            handled = wrapper.css("top", offset.top);
                        } else if (keyCode == keys.LEFT) {
                            offset.left = constrain(offset.left - distance, that.minLeft, that.maxLeft);
                            handled = wrapper.css("left", offset.left);
                        } else if (keyCode == keys.RIGHT) {
                            offset.left = constrain(offset.left + distance, that.minLeft, that.maxLeft);
                            handled = wrapper.css("left", offset.left);
                        }
                    }

                    if (options.resizable && e.ctrlKey && !isMaximized && !isMinimized) {
                        if (keyCode == keys.UP) {
                            handled = true;
                            newHeight = wrapper.outerHeight() - distance;
                        } else if (keyCode == keys.DOWN) {
                            handled = true;
                            if (that.containment && !that._isPinned) {
                                newHeight = Math.min(wrapper.outerHeight() + distance,
                                    that.containment.height - offset.top - toInt(wrapper, "padding-top") -
                                    toInt(wrapper, "borderBottomWidth") - toInt(wrapper, "borderTopWidth"));
                            } else {
                                newHeight = wrapper.outerHeight() + distance;
                            }
                        } if (keyCode == keys.LEFT) {
                            handled = true;
                            newWidth = wrapper.outerWidth() - distance;
                        } else if (keyCode == keys.RIGHT) {
                            handled = true;
                            if (that.containment && !that._isPinned) {
                                newWidth = Math.min(wrapper.outerWidth() + distance,
                                                    that.containment.width - offset.left -
                                                    toInt(wrapper, "borderLeftWidth") - toInt(wrapper, "borderRightWidth"));
                            } else {
                                newWidth = wrapper.outerWidth() + distance;
                            }
                        }

                        if (handled) {
                            w = constrain(newWidth, options.minWidth, options.maxWidth);
                            h = constrain(newHeight, options.minHeight, options.maxHeight);

                            if (!isNaN(w)) {
                                wrapper.outerWidth(w);
                                that.options.width = w + "px";
                            }
                            if (!isNaN(h)) {
                                wrapper.outerHeight(h);
                                that.options.height = h + "px";
                            }

                            that.resize();
                        }
                    }

                    if (handled) {
                        e.preventDefault();
                    }
                },

                _overlay: function(visible) {
                    var overlay = this.containment ? this.containment.children(KOVERLAY) : this.appendTo.children(KOVERLAY),
                        wrapper = this.wrapper,
                        display = visible ? "inline-flex" : "none",
                        zIndex = parseInt(wrapper.css(ZINDEX), 10) - 1;

                    if (!overlay.length) {
                        overlay = $("<div class='k-overlay' />");
                    }

                    overlay
                        .insertBefore(wrapper[0])
                        .css({
                            zIndex: zIndex,
                            display: display
                        });

                    if (this.options.modal.preventScroll && !this.containment) {
                        this._stopDocumentScrolling();
                    }

                    return overlay;
                },

                _actionForIcon: function(icon) {
                    var iconClass = /\bk(-svg)?-i(-\w+)+\b/.exec(icon[0].className)[0];
                    return {
                        "x": "_close",
                        "window": "maximize",
                        "window-minimize": "minimize",
                        "window-restore": "restore",
                        "arrow-rotate-cw": "refresh",
                        "pin": "pin",
                        "unpin": "unpin"
                    }[iconClass.replace(/(k-i-|k-svg-i-)/, "")];
                },

                _windowActionHandler: function(e) {
                    if (this._closing) {
                        return;
                    }
                    var icon = $(e.target).closest(".k-window-titlebar-action").find(".k-icon,.k-svg-icon");
                    var action = this._actionForIcon(icon);

                    if (action) {
                        e.preventDefault();
                        this[action]();
                        return false;
                    }
                },

                _modals: function() {
                    var that = this,
                        windowElements = $(KWINDOW + VISIBLE),
                        windowInstance,
                        modals = [];

                    for (var i = 0; i < windowElements.length; i += 1) {
                        windowInstance = that._object($(windowElements[i]));

                        if (windowInstance &&
                            windowInstance.options &&
                            windowInstance.options.modal &&
                            windowInstance.options.visible &&
                            windowInstance.options.appendTo === that.options.appendTo &&
                            (!windowInstance.containment || (that.containment && windowInstance.containment[0] === that.containment[0]))) {
                                modals.push(windowInstance.wrapper[0]);
                        }
                    }

                    modals.sort(function(a, b) {
                        return a.style.zIndex - b.style.zIndex;
                    });

                    that = null;

                    return $(modals);
                },

                _object: function(element) {
                    var content = element.children(KWINDOWCONTENT);
                    var widget = kendo.widgetInstance(content);

                    if (widget) {
                        return widget;
                    }

                    return undefined$1;
                },

                center: function() {
                    var that = this,
                        position = that.options.position,
                        wrapper = that.wrapper,
                        documentWindow = $(window),
                        scrollTop = 0,
                        scrollLeft = 0,
                        newTop, newLeft;

                    if (that.options.isMaximized) {
                        return that;
                    }

                    if (that.options.pinned && !that._isPinned) {
                        that.pin();
                    }

                    if (!that.options.pinned) {
                        scrollTop = documentWindow.scrollTop();
                        scrollLeft = documentWindow.scrollLeft();
                    }

                    if (this.containment && !that.options.pinned) {
                        newTop = this.minTop + (this.maxTop - this.minTop) / 2;
                        newLeft = this.minLeft + (this.maxLeft - this.minLeft) / 2;
                    } else {
                        that._scrollIsAppended = true;
                        newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.outerWidth()) / 2);
                        newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.outerHeight() - toInt(wrapper, "paddingTop")) / 2);
                    }

                    wrapper.css({
                        left: newLeft,
                        top: newTop
                    });

                    position.top = newTop;
                    position.left = newLeft;

                    return that;
                },

                title: function(title) {
                    var that = this,
                        value,
                        encoded = true,
                        wrapper = that.wrapper,
                        titleBar = wrapper.children(KWINDOWTITLEBAR),
                        titleElement = titleBar.children(KWINDOWTITLE);

                    if (!arguments.length) {
                        return titleElement.html();
                    }

                    if ($.isPlainObject(title)) {
                        value = typeof title.text !== "undefined" ? title.text : "";
                        encoded = title.encoded !== false;
                    } else {
                        value = title;
                    }

                    if (value === false) {
                        wrapper.addClass("k-window-titleless");
                        wrapper.css("padding-top", 0);
                        titleBar.remove();
                    } else {
                        if (!titleBar.length) {
                            wrapper.prepend(templates.titlebar({
                                title: encoded ? kendo.htmlEncode(value) : value
                            }));
                            that._actions();
                            titleBar = wrapper.children(KWINDOWTITLEBAR);
                        } else {
                            titleElement.html(encoded ? kendo.htmlEncode(value) : value);
                        }
                    }

                    that.options.title = value;

                    return that;
                },

                content: function(html, data) {
                    var content = this.wrapper.children(KWINDOWCONTENT),
                        scrollContainer = content.children(".km-scroll-container");

                    content = scrollContainer[0] ? scrollContainer : content;

                    if (!defined(html)) {
                        return content.html();
                    }

                    kendo.destroy(this.element.children());

                    content.empty().html(html);

                    return this;
                },

                open: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        options = that.options,
                        showOptions = this._animationOptions("open"),
                        contentElement = wrapper.children(KWINDOWCONTENT),
                        overlay, otherModalsVisible,
                        containmentContext = this.containment && !that._isPinned,
                        doc = containmentContext ? this.containment : $(document);

                    if (!that.trigger(OPEN)) {
                        if (that._closing) {
                            wrapper.kendoStop(true, true);
                        }

                        that._closing = false;

                        that.toFront();

                        if (options.autoFocus) {
                            that.wrapper.trigger("focus");
                        }

                        options.visible = true;

                        if (options.modal) {
                            otherModalsVisible = !!that._modals().length;
                            overlay = that._overlay(otherModalsVisible);

                            overlay.kendoStop(true, true);

                            if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {
                                var overlayFx = kendo.fx(overlay).fadeIn();
                                overlayFx.duration(showOptions.duration || 0);
                                overlayFx.endValue(0.5);
                                overlayFx.play();
                            } else {
                                overlay.css("opacity", 0.5);
                            }

                            overlay.show();

                            $(window).on("focus" + MODAL_NS, function() {
                                if (wrapper.data("isFront") && !$(document.activeElement).closest(wrapper).length) {
                                   that.wrapper.trigger("focus");
                                }
                            });
                        }

                        if (!wrapper.is(VISIBLE)) {
                            contentElement.css(OVERFLOW, HIDDEN);

                            that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).addClass("k-button-flat");

                            wrapper.css({ display: "inline-flex" });
                            wrapper.kendoStop().kendoAnimate({
                                effects: showOptions.effects,
                                duration: showOptions.duration,
                                complete: this._activate.bind(this)
                            });
                        }
                    }

                    if (options.isMaximized) {
                        that._containerScrollTop = doc.scrollTop();
                        that._containerScrollLeft = doc.scrollLeft();
                        that._stopDocumentScrolling();
                    }

                    if (this.options.pinned && !this._isPinned) {
                        this.pin();
                    }

                    return that;
                },

                _activate: function() {
                    var scrollable = this.options.scrollable !== false;

                    if (this.options.autoFocus) {
                        this.wrapper.trigger("focus");
                    }

                    this.element.css(OVERFLOW, scrollable ? "" : "hidden");
                    kendo.resize(this.element.children());

                    this.trigger(ACTIVATE);
                },

                _removeOverlay: function(suppressAnimation) {
                    var modals = this._modals();
                    var options = this.options;
                    var hideOverlay = options.modal && !modals.length;
                    var hideOptions = this._animationOptions("close");

                    if (hideOverlay) {
                        if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {
                            var overlayFx = kendo.fx(options.modal ? this._overlay(true) : $(undefined$1)).fadeOut();
                            overlayFx.duration(hideOptions.duration || 0);
                            overlayFx.startValue(0.5);
                            overlayFx.play();
                        } else {
                            this._overlay(false).remove();
                        }
                        if (options.modal.preventScroll) {
                            this._enableDocumentScrolling();
                        }
                    } else if (modals.length) {
                        this._object(modals.last())._overlay(true);

                        if (options.modal.preventScroll) {
                            this._stopDocumentScrolling();
                        }
                    }
                },

                _close: function(systemTriggered) {
                    var that = this,
                        wrapper = that.wrapper,
                        options = that.options,
                        showOptions = this._animationOptions("open"),
                        hideOptions = this._animationOptions("close"),
                        containmentContext = this.containment && !that._isPinned,
                        doc = containmentContext ? this.containment : $(document),
                        defaultPrevented;

                    if (that._closing) {
                        return;
                    }

                    defaultPrevented = that.trigger(CLOSE, { userTriggered: !systemTriggered });
                    that._closing = !defaultPrevented;

                    if (wrapper.is(VISIBLE) && !defaultPrevented) {
                        options.visible = false;

                        $(KWINDOW).each(function(i, element) {
                            var contentElement = $(element).children(KWINDOWCONTENT);

                            // Remove overlay set by toFront
                            if (element != wrapper && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
                                contentElement.children(KOVERLAY).remove();
                            }
                        });

                        this._removeOverlay();

                        // Prevent close animation from stopping
                        that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).removeClass("k-button-flat");

                        wrapper.kendoStop().kendoAnimate({
                            effects: hideOptions.effects || showOptions.effects,
                            reverse: hideOptions.reverse === true,
                            duration: hideOptions.duration,
                            complete: this._deactivate.bind(this)
                        });
                        $(window).off(MODAL_NS);
                    }

                    if (that.options.isMaximized) {
                        that._enableDocumentScrolling();
                        if (that._containerScrollTop && that._containerScrollTop > 0) {
                            doc.scrollTop(that._containerScrollTop);
                        }
                        if (that._containerScrollLeft && that._containerScrollLeft > 0) {
                            doc.scrollLeft(that._containerScrollLeft);
                        }
                    }

                    if (that.options.iframe) {
                        that.wrapper.trigger("blur");
                    }
                },

                _deactivate: function() {
                    var that = this;

                    that.wrapper
                        .removeClass(INLINE_FLEX)
                        .hide()
                        .css("opacity", "");

                    that.trigger(DEACTIVATE);

                    if (that.options.modal) {
                        var lastModal = that._object(that._modals().last());
                        if (lastModal) {
                            lastModal.toFront();
                        }
                    }
                },

                close: function() {
                    this._close(true);
                    return this;
                },

                _actionable: function(element) {
                    return $(element).is((TITLEBAR_BUTTONSSELECTOR + ", :input, a, .k-input, .k-icon, .k-svg-icon, [role='gridcell'], .k-input-value-text"));
                },

                _shouldFocus: function(target) {
                    var active = activeElement(),
                        element = this.wrapper;

                    return this.options.autoFocus &&
                        !$(active).is(element) &&
                        !this._actionable(target) &&
                        (!element.find(active).length || !element.find(target).length);
                },

                toFront: function(e, avoidFocus) {
                    var that = this,
                        wrapper = that.wrapper,
                        currentWindow = wrapper[0],
                        containmentContext = that.containment && !that._isPinned,
                        openAnimation = this._animationOptions("open"),
                        zIndex = +wrapper.css(ZINDEX),
                        originalZIndex = zIndex,
                        target = (e && e.target) || null;

                    $(KWINDOW).each(function(i, element) {
                        var windowObject = $(element),
                            zIndexNew = windowObject.css(ZINDEX),
                            contentElement = windowObject.children(KWINDOWCONTENT);

                        if (!isNaN(zIndexNew)) {
                            zIndex = Math.max(+zIndexNew, zIndex);
                        }

                        wrapper.data("isFront", element == currentWindow);
                        // Add overlay to windows with iframes and lower z-index to prevent
                        // trapping of events when resizing / dragging

                        if (element != currentWindow &&
                            contentElement.find("." + KCONTENTFRAME).length &&
                            !contentElement.find(KOVERLAY).length) {
                            contentElement.append(templates.overlay);
                        }
                    });

                    if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
                        wrapper.css(ZINDEX, zIndex + 2);
                    }
                    that.element.find("> .k-overlay").remove();

                    if (that._shouldFocus(target)) {
                        if (!avoidFocus) {
                            setTimeout(function() {
                                that.wrapper.focus();
                            }, openAnimation ? openAnimation.duration : 0);
                        }

                        var scrollTop = containmentContext ? that.containment.scrollTop() : $(window).scrollTop(),
                            windowTop = parseInt(wrapper.position().top, 10);

                        if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {
                            if (scrollTop > 0) {
                                $(window).scrollTop(windowTop);
                            } else {
                                wrapper.css("top", scrollTop);
                            }
                        }
                    }

                    wrapper = null;

                    return that;
                },

                toggleMaximization: function() {
                    if (this._closing) {
                        return this;
                    }

                    return this[this.options.isMaximized ? "restore" : "maximize"]();
                },

                restore: function() {
                    var that = this;
                    var options = that.options;
                    var minHeight = options.minHeight;
                    var restoreOptions = that.restoreOptions;
                    var shouldRestrictTop;
                    var container = that.containment && !that._isPinned ? that.containment : $(document);

                    if (!options.isMaximized && !options.isMinimized) {
                        return that;
                    }

                    if (minHeight && minHeight != Infinity) {
                        that.wrapper.css("min-height", minHeight);
                    }

                    if (restoreOptions && !options.isMaximized) {
                        restoreOptions.height = constrain(restoreOptions.height, that.options.minHeight, that.options.maxHeight);

                        shouldRestrictTop = options.position.top + parseInt(restoreOptions.height, 10) > that.maxTop;

                        if (shouldRestrictTop) {
                            options.position.top = constrain(options.position.top, that.minTop, that.maxTop - parseInt(restoreOptions.height, 10));

                            extend(restoreOptions, {
                                left: options.position.left,
                                top: options.position.top
                            });
                        }
                    }

                    that.wrapper
                        .css({
                            position: options.pinned ? "fixed" : "absolute",
                            left: restoreOptions.left,
                            top: restoreOptions.top,
                            width: restoreOptions.width,
                            height: restoreOptions.height
                        })
                        .removeClass(MAXIMIZEDSTATE)
                        .removeClass(KWINDOWMINIMIZED)
                        .find(".k-window-content,.k-resize-handle").show().end()
                        .find(".k-window-titlebar .k-i-window-restore,.k-window-titlebar .k-svg-i-window-restore").parent().remove().end().end()
                        .find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().show().end().end()
                        .find(PIN_UNPINICONCLASSSELECTOR).parent().show();

                    if (options.isMaximized) {
                        that.wrapper.find(".k-i-window,.k-svg-i-window").parent().trigger("focus");
                    } else if (options.isMinimized) {
                        that.wrapper.find(".k-i-window-minimize,.k-svg-i-window-minimize").parent().trigger("focus");
                    }

                    that.options.width = restoreOptions.width;
                    that.options.height = restoreOptions.height;

                    if (!that.options.modal.preventScroll) {
                        that._enableDocumentScrolling();
                    }

                    if (that._containerScrollTop && that._containerScrollTop > 0) {
                        container.scrollTop(that._containerScrollTop);
                    }
                    if (that._containerScrollLeft && that._containerScrollLeft > 0) {
                        container.scrollLeft(that._containerScrollLeft);
                    }

                    options.isMaximized = options.isMinimized = false;

                    that.wrapper.removeAttr("aria-labelled-by");

                    that.resize();

                    that.trigger(RESTORE);

                    return that;
                },

                _sizingAction: function(actionId, callback) {
                    var that = this,
                        wrapper = that.wrapper,
                        style = wrapper[0].style,
                        options = that.options;

                    if (options.isMaximized || options.isMinimized) {
                        return that;
                    }

                    that.restoreOptions = {
                        width: style.width,
                        height: style.height
                    };

                    wrapper
                        .children(KWINDOWRESIZEHANDLES).hide().end()
                        .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().hide()
                        .eq(0).before(templates.action({ name: "window-restore" }));

                    callback.call(that);

                    that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPINICONCLASSSELECTOR).parent().toggle(actionId !== "maximize");

                    that.trigger(actionId);

                    wrapper.find(".k-i-window-restore,.k-svg-i-window-restore").parent().trigger("focus");

                    return that;
                },

                maximize: function() {
                    this._sizingAction("maximize", function() {
                        var that = this,
                            wrapper = that.wrapper,
                            containmentContext = this.containment && !that._isPinned,
                            position = wrapper.position(),
                            doc = $(document);

                        extend(that.restoreOptions, {
                            left: position.left + (containmentContext ? this.containment.scrollLeft() : 0),
                            top: position.top + (containmentContext ? this.containment.scrollTop() : 0)
                        });

                        this._containerScrollTop = containmentContext ? this.containment.scrollTop() : doc.scrollTop();
                        this._containerScrollLeft = containmentContext ? this.containment.scrollLeft() : doc.scrollLeft();

                        that._stopDocumentScrolling();

                        wrapper
                            .css({
                                top: containmentContext ? this.containment.scrollTop() : 0,
                                left: containmentContext ? this.containment.scrollLeft() : 0,
                                position: containmentContext ? "absolute" : "fixed"
                            })
                            .addClass(MAXIMIZEDSTATE);

                        that.options.isMaximized = true;

                        that._onDocumentResize();
                    });

                    return this;
                },

                _stopDocumentScrolling: function() {
                    var that = this;
                    var containment = that.containment;

                    if (containment && !that._isPinned) {
                        that._storeOverflowRule(containment);
                        containment.css(OVERFLOW, HIDDEN);
                        that.wrapper.css({
                            maxWidth: containment.innerWidth(),
                            maxHeight: containment.innerHeight()
                        });
                        return;
                    }

                    var $body = $("body");
                    that._storeOverflowRule($body);
                    $body.css(OVERFLOW, HIDDEN);

                    var $html = $("html");
                    that._storeOverflowRule($html);
                    $html.css(OVERFLOW, HIDDEN);
                },

                _enableDocumentScrolling: function() {
                    var that = this;
                    var containment = that.containment;

                    if (containment && !that._isPinned) {
                        that._restoreOverflowRule(containment);
                        that.wrapper.css({
                            maxWidth: containment.width,
                            maxHeight: containment.height
                        });
                        return;
                    }

                    that._restoreOverflowRule($(document.body));
                    that._restoreOverflowRule($("html"));
                },

                _storeOverflowRule: function($element) {
                    if (this._isOverflowStored($element)) {
                        return;
                    }

                    var overflowRule = $element.get(0).style.overflow;

                    if (typeof overflowRule === "string") {
                        $element.data(DATADOCOVERFLOWRULE, overflowRule);
                    }
                },

                _isOverflowStored: function($element) {
                    return typeof $element.data(DATADOCOVERFLOWRULE) === "string";
                },

                _restoreOverflowRule: function($element) {
                    var overflowRule = $element.data(DATADOCOVERFLOWRULE);

                    if (overflowRule !== null && overflowRule !== undefined$1) {
                        $element.css(OVERFLOW, overflowRule);
                        $element.removeData(DATADOCOVERFLOWRULE);
                    } else {
                        $element.css(OVERFLOW, "");
                    }
                },

                isMaximized: function() {
                    return this.options.isMaximized;
                },

                minimize: function() {
                    this._sizingAction("minimize", function() {
                        var that = this;

                        that.wrapper.css({
                            height: "",
                            minHeight: ""
                        });

                        that.element.hide();

                        that.options.isMinimized = true;
                    });

                    this.wrapper.attr("aria-labelled-by", this.element.attr("aria-labelled-by"));
                    this.wrapper.addClass(KWINDOWMINIMIZED);

                    this._updateBoundaries();

                    return this;
                },

                isMinimized: function() {
                    return this.options.isMinimized;
                },

                pin: function() {
                    var that = this,
                        win = $(window),
                        wrapper = that.wrapper,
                        options = that.options,
                        position = options.position,
                        top = this.containment ? getPosition(wrapper[0]).top + toInt(this.containment, "borderTopWidth") : toInt(wrapper, "top"),
                        left = this.containment ? getPosition(wrapper[0]).left + toInt(this.containment, "borderLeftWidth") : toInt(wrapper, "left");

                    if (!that.options.isMaximized) {
                        position.top = top;
                        position.left = left;

                        if (that._scrollIsAppended && (!this.containment || this.containment.css("position") !== "fixed")) {

                            position.top -= win.scrollTop();
                            position.left -= win.scrollLeft();
                            that._scrollIsAppended = false;
                        }

                        wrapper.css(extend(position, { position: "fixed" }));
                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KPINICONCLASSSELECTOR).eq(0);
                        if (pinIcon.length > 0) {
                            kendo.ui.icon(pinIcon, { icon: "unpin" });
                        }

                        that._isPinned = true;
                        that.options.pinned = true;

                        if (this.containment) {
                            options.maxWidth = options.maxHeight = Infinity;
                            wrapper.css({
                                maxWidth: "",
                                maxHeight: ""
                            });
                        }
                    }
                },

                unpin: function() {
                    var that = this,
                        win = $(window),
                        wrapper = that.wrapper,
                        options = that.options,
                        position = that.options.position,
                        containment = that.containment,
                        top = parseInt(wrapper.css("top"), 10) + win.scrollTop(),
                        left = parseInt(wrapper.css("left"), 10) + win.scrollLeft();

                    if (!that.options.isMaximized) {
                        that._isPinned = false;
                        that._scrollIsAppended = true;
                        that.options.pinned = false;

                        if (containment) {
                            that._updateBoundaries();

                            options.maxWidth = Math.min(containment.width, options.maxWidth);
                            options.maxHeight = Math.min(containment.height - toInt(wrapper, "padding-top"), options.maxHeight);

                            wrapper.css({
                                maxWidth: options.maxWidth,
                                maxHeight: options.maxHeight
                            });

                            if (top < containment.position.top) {
                                top = that.minTop;
                            } else if (top > containment.position.top + containment.height) {
                                top = that.maxTop;
                            } else {
                                top = top + containment.scrollTop() - (containment.position.top + toInt(containment, "border-top-width"));
                            }

                            if (left < containment.position.left) {
                                left = that.minLeft;
                            } else if (left > containment.position.left + containment.width) {
                                left = that.maxLeft;
                            } else {
                                left = left + containment.scrollLeft() - (containment.position.left + toInt(containment, "border-left-width"));
                            }

                        }

                        position.top = constrain(top, that.minTop, that.maxTop);
                        position.left = constrain(left, that.minLeft, that.maxLeft);

                        wrapper.css(extend(position, { position: "" }));
                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KUNPINICONCLASSSELECTOR).eq(0);
                        if (pinIcon.length > 0) {
                            kendo.ui.icon(pinIcon, { icon: "pin" });
                        }
                    }
                },

                _onDocumentResize: function() {
                    var that = this,
                        wrapper = that.wrapper,
                        wnd = $(window),
                        zoomLevel = kendo.support.zoomLevel(),
                        contentBoxSizing = wrapper.css("box-sizing") == "content-box",
                        w, h;

                    if (!that.options.isMaximized) {
                        return;
                    }

                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, "border-left-width") + toInt(wrapper, "border-right-width") : 0;
                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, "border-top-width") + toInt(wrapper, "border-bottom-width") : 0;
                    var paddingTop = contentBoxSizing ? toInt(wrapper, "padding-top") : 0;

                    if (that.containment && !that._isPinned) {
                        w = that.containment.innerWidth() - lrBorderWidth;
                        h = that.containment.innerHeight() - (tbBorderWidth + paddingTop);
                    } else {
                        w = wnd.width() / zoomLevel - lrBorderWidth;
                        h = wnd.height() / zoomLevel - (tbBorderWidth + paddingTop);
                    }

                    wrapper.css({
                        width: w,
                        height: h
                    });
                    that.options.width = w;
                    that.options.height = h;

                    that.resize();
                },

                refresh: function(options) {
                    var that = this,
                        initOptions = that.options,
                        element = $(that.element),
                        iframe,
                        showIframe,
                        url;

                    if (!isPlainObject(options)) {
                        options = { url: options };
                    }

                    options = extend(initOptions.content, options);

                    showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;

                    url = options.url;

                    if (url) {
                        if (!defined(showIframe)) {
                            showIframe = !isLocalUrl(url);
                        }

                        if (!showIframe) {
                            // perform AJAX request
                            that._ajaxRequest(options);
                        } else {
                            iframe = element.find("." + KCONTENTFRAME)[0];

                            if (iframe) {
                                // refresh existing iframe
                                iframe.src = url || iframe.src;
                            } else {
                                // render new iframe
                                element.html(templates.contentFrame(extend({}, initOptions, { content: options })));
                            }

                            element.find("." + KCONTENTFRAME)
                                .off("load" + NS)
                                .on("load" + NS, this._triggerRefresh.bind(this));
                        }
                    } else {
                        if (options.template) {
                            // refresh template
                            that.content(template(options.template)({}));
                        }

                        that.trigger(REFRESH);
                    }

                    element.toggleClass("k-window-iframecontent", !!showIframe);

                    return that;
                },

                _triggerRefresh: function() {
                    this.trigger(REFRESH);
                },

                _ajaxComplete: function() {
                    clearTimeout(this._loadingIconTimeout);
                    this.wrapper.find(REFRESHICONSELECTOR).removeClass(LOADINGICONCLASS);
                },

                _ajaxError: function(xhr, status) {
                    this.trigger(ERROR, { status: status, xhr: xhr });
                },

                _ajaxSuccess: function(contentTemplate) {
                    return function(data) {
                        var html = data;
                        if (contentTemplate) {
                            html = template(contentTemplate)(data || {});
                        }

                        this.content(html, data);
                        this.element.prop("scrollTop", 0);

                        this.trigger(REFRESH);
                    };
                },

                _showLoading: function() {
                    this.wrapper.find(REFRESHICONSELECTOR).addClass(LOADINGICONCLASS);
                },

                _ajaxRequest: function(options) {
                    this._loadingIconTimeout = setTimeout(this._showLoading.bind(this), 100);

                    $.ajax(extend({
                        type: "GET",
                        dataType: "html",
                        cache: false,
                        error: this._ajaxError.bind(this),
                        complete: this._ajaxComplete.bind(this),
                        success: this._ajaxSuccess(options.template).bind(this)
                    }, options));
                },

                _destroy: function() {
                    if (this.resizing) {
                        this.resizing.destroy();
                    }

                    if (this.dragging) {
                        this.dragging.destroy();
                    }

                    this.wrapper.off(NS)
                        .children(KWINDOWCONTENT).off(NS).end()
                        .find(".k-resize-handle,.k-window-titlebar").off(NS);

                    $(window).off("resize" + NS + this._marker);
                    $(window).off(MODAL_NS);
                    $(window).off(NS);

                    clearTimeout(this._loadingIconTimeout);

                    Widget.fn.destroy.call(this);

                    this.unbind(undefined$1);

                    kendo.destroy(this.wrapper);
                },

                destroy: function() {
                    this._destroy();

                    if (this.options.modal) {
                        this._removeOverlay(true);
                    }

                    this.wrapper.empty().remove();

                    this.wrapper = this.appendTo = this.element = $();
                },

                _createWindow: function() {
                    var contentHtml = this.element,
                        options = this.options,
                        iframeSrcAttributes,
                        wrapper,
                        isRtl = kendo.support.isRtl(contentHtml);

                    if (options.scrollable === false) {
                        contentHtml.css("overflow", "hidden");
                    }

                    wrapper = $(templates.wrapper(options));

                    // Collect the src attributes of all iframes and then set them to empty string.
                    // This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
                    iframeSrcAttributes = contentHtml.find("iframe:not(.k-content-frame)").map(function() {
                        var src = this.getAttribute("src");
                        this.src = "";
                        return src;
                    });

                    // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
                    wrapper
                        .toggleClass("k-rtl", isRtl)
                        .attr("tabindex", 0)
                        .append(contentHtml)
                        .find("iframe:not(.k-content-frame)").each(function(index) {
                        // Restore the src attribute of the iframes when they are part of the live DOM tree
                        this.src = iframeSrcAttributes[index];
                    });

                    if (this.containment) {
                        this.containment.prepend(wrapper);
                    } else if (this.appendTo) {
                        wrapper.appendTo(this.appendTo);
                    }

                    wrapper.find(".k-window-title")
                        .css(isRtl ? "left" : "right", outerWidth(wrapper.find(".k-window-titlebar-actions")) + 10);

                    contentHtml.css("visibility", "").show();

                    contentHtml.find("[data-role=editor]").each(function() {
                        var editor = $(this).data("kendoEditor");

                        if (editor) {
                            editor.refresh();
                        }
                    });

                    wrapper = contentHtml = null;
                }
            });

            templates = {
                wrapper: template(function () { return "<div class='k-window'></div>"; }),
                action: template(function (ref) {
                    var name = ref.name;
                    var icon = ref.icon;

                    var iconName = (icon || "").toLowerCase() || name.toLowerCase();
                    if (iconName == "restore") { iconName = "window-restore"; }

                    return kendo.html.renderButton(("<button role='button' class='k-window-titlebar-action' aria-label='" + name + "'></button>"), { icon: iconName, fillMode: "flat" });
                }),
                titlebar: template(function (ref) {
                        var title = ref.title;

                        return "<div class='k-window-titlebar k-hstack'>" +
                        "<span class='k-window-title'>" + title + "</span>" +
                        "<div class='k-window-titlebar-actions'></div>" +
                    "</div>";
            }
                ),
                overlay: "<div class='k-overlay'></div>",
                contentFrame: template(function (ref) {
                        var title = ref.title;
                        var content = ref.content;

                        return "<iframe frameborder='0' title='" + title + "' class='" + KCONTENTFRAME + "' " +
                    "src='" + (content.url) + "'>" +
                    "This page requires frames in order to show content" +
                    "</iframe>";
            }
                ),
                resizeHandle: template(function (data) { return ("<div aria-hidden='true' class='k-resize-handle k-resize-" + data + "'></div>"); })
            };


            function WindowResizing(wnd) {
                var that = this;
                that.owner = wnd;
                that._preventDragging = false;
                that._draggable = new Draggable(wnd.wrapper, {
                    filter: ">" + KWINDOWRESIZEHANDLES,
                    group: wnd.wrapper.id + "-resizing",
                    dragstart: that.dragstart.bind(that),
                    drag: that.drag.bind(that),
                    dragend: that.dragend.bind(that)
                });

                that._draggable.userEvents.bind("press", that.addOverlay.bind(that));
                that._draggable.userEvents.bind("release", that.removeOverlay.bind(that));
            }

            WindowResizing.prototype = {
                addOverlay: function() {
                    this.owner.wrapper.append(templates.overlay);
                },
                removeOverlay: function() {
                    this.owner.wrapper.find(KOVERLAY).remove();
                },
                dragstart: function(e) {
                    var that = this;
                    var wnd = that.owner;
                    var wrapper = wnd.wrapper;

                    that._preventDragging = wnd.trigger(RESIZESTART);
                    if (that._preventDragging) {
                        return;
                    }

                    that.elementPadding = parseInt(wrapper.css("padding-top"), 10);
                    that.initialPosition = kendo.getOffset(wrapper, "position");

                    that.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");

                    that.initialSize = {
                        width: wrapper.outerWidth(),
                        height: wrapper.outerHeight()
                    };

                    wnd._updateBoundaries();

                    that.containerOffset = wnd.containment ? wnd.containment.position : kendo.getOffset(wnd.appendTo);

                    var offsetParent = wrapper.offsetParent();

                    if (offsetParent.is("html")) {
                        that.containerOffset.top = that.containerOffset.left = 0;
                    } else {
                        var marginTop = offsetParent.css("margin-top");
                        var marginLeft = offsetParent.css("margin-left");
                        var hasMargin = !zero.test(marginTop) || !zero.test(marginLeft);
                        if (hasMargin) {
                            var wrapperPosition = getPosition(wrapper[0]);
                            var relativeElMarginLeft = wrapperPosition.left - that.containerOffset.left - that.initialPosition.left;
                            var relativeElMarginTop = wrapperPosition.top - that.containerOffset.top - that.initialPosition.top;

                            that._relativeElMarginLeft = relativeElMarginLeft > 1 ? relativeElMarginLeft : 0;
                            that._relativeElMarginTop = relativeElMarginTop > 1 ? relativeElMarginTop : 0;

                            that.initialPosition.left += that._relativeElMarginLeft;
                            that.initialPosition.top += that._relativeElMarginTop;
                        }
                    }

                    wrapper
                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();

                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
                },
                drag: function(e) {
                    if (this._preventDragging) {
                        return;
                    }
                    var that = this,
                        wnd = that.owner,
                        wrapper = wnd.wrapper,
                        options = wnd.options,
                        position = options.position,
                        direction = that.resizeDirection,
                        containerOffset = that.containerOffset,
                        initialPosition = that.initialPosition,
                        initialSize = that.initialSize,
                        containmentContext = wnd.containment && !wnd._isPinned,
                        rtl = kendo.support.isRtl(wnd.containment),
                        leftRtlOffset = containmentContext && rtl && wnd.containment.innerWidth() > wnd.containment.width ? kendo.support.scrollbar() : 0,
                        scrollOffset = containmentContext ? { top: wnd.containment.scrollTop(), left: wnd.containment.scrollLeft() } : { top: 0, left: 0 },
                        newWidth, newHeight,
                        windowBottom, windowRight,
                        x = Math.max(e.x.location, 0),
                        y = Math.max(e.y.location, 0);

                        if (direction.indexOf("e") >= 0) {

                            if (wnd.containment && x - initialSize.width >= wnd.maxLeft - scrollOffset.left + containerOffset.left + leftRtlOffset) {
                                newWidth = wnd.maxLeft + leftRtlOffset - initialPosition.left + initialSize.width - scrollOffset.left;
                            } else {
                                newWidth = x - initialPosition.left - containerOffset.left;
                            }

                            wrapper.outerWidth(constrain(newWidth, options.minWidth, options.maxWidth));
                        } else if (direction.indexOf("w") >= 0) {
                            windowRight = initialPosition.left + initialSize.width + containerOffset.left;
                            newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);
                            position.left = windowRight - newWidth - containerOffset.left - leftRtlOffset - (that._relativeElMarginLeft || 0) + scrollOffset.left;

                            if (wnd.containment && position.left <= wnd.minLeft) {
                                position.left = wnd.minLeft;
                                newWidth = constrain(windowRight - leftRtlOffset - position.left - containerOffset.left + scrollOffset.left, options.minWidth, options.maxWidth);
                            }

                            wrapper.css({
                                left: position.left,
                                width: newWidth
                            });
                        }

                        var newWindowTop = y;
                        if (wnd.options.pinned) {
                            newWindowTop -= $(window).scrollTop();
                        }
                        if (direction.indexOf("s") >= 0) {
                            newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;

                            if (newWindowTop - initialSize.height - that.elementPadding >= wnd.maxTop + containerOffset.top - scrollOffset.top) {
                                newHeight = wnd.maxTop - initialPosition.top + initialSize.height - scrollOffset.top;
                            }

                            wrapper.outerHeight(constrain(newHeight, options.minHeight, options.maxHeight));
                        } else if (direction.indexOf("n") >= 0) {
                            windowBottom = initialPosition.top + initialSize.height + containerOffset.top;
                            newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);
                            position.top = windowBottom - newHeight - containerOffset.top - (that._relativeElMarginTop || 0) + scrollOffset.top;

                            if (position.top <= wnd.minTop && wnd.containment) {
                                position.top = wnd.minTop;
                                newHeight = constrain(windowBottom - position.top - containerOffset.top + scrollOffset.top, options.minHeight, options.maxHeight);
                            }

                            wrapper.css({
                                top: position.top,
                                height: newHeight
                            });
                        }

                        if (newWidth) {
                            wnd.options.width = newWidth + "px";
                        }
                        if (newHeight) {
                            wnd.options.height = newHeight + "px";
                        }

                        wnd.resize();
                },
                dragend: function(e) {
                    if (this._preventDragging) {
                        return;
                    }

                    var that = this,
                        wnd = that.owner,
                        wrapper = wnd.wrapper;

                    wrapper
                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();

                    $(BODY).css(CURSOR, "");

                    if (wnd.touchScroller) {
                        wnd.touchScroller.reset();
                    }

                    if (e.keyCode == 27) {
                        wrapper.css(that.initialPosition)
                            .css(that.initialSize);
                    }

                    wnd.trigger(RESIZEEND);

                    return false;
                },
                destroy: function() {
                    if (this._draggable) {
                        this._draggable.destroy();
                    }

                    this._draggable = this.owner = null;
                }
            };

            function WindowDragging(wnd, dragHandle, clickMoveClick) {
                var that = this,
                    filter = dragHandle;

                if (clickMoveClick) {
                    filter += ",.k-overlay";
                }

                that.owner = wnd;
                that._preventDragging = false;
                that._draggable = new Draggable(wnd.wrapper, {
                    filter: dragHandle,
                    group: wnd.wrapper.id + "-moving",
                    clickMoveClick: clickMoveClick,
                    dragstart: that.dragstart.bind(that),
                    drag: that.drag.bind(that),
                    dragend: that.dragend.bind(that),
                    dragcancel: that.dragcancel.bind(that)
                });

                that._draggable.userEvents.stopPropagation = false;
            }

            WindowDragging.prototype = {
                dragstart: function(e) {
                    var wnd = this.owner,
                        draggable = wnd.options.draggable,
                        element = wnd.element,
                        actions = element.find(".k-window-titlebar-actions"),
                        containerOffset = kendo.getOffset(wnd.appendTo);

                    this._preventDragging = wnd.trigger(DRAGSTART) || !draggable;
                    if (this._preventDragging || wnd.isMaximized()) {
                        return;
                    }

                    wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, "position");

                    wnd.initialPointerPosition = {
                        left: wnd.options.position.left,
                        top: wnd.options.position.top
                    };

                    wnd.startPosition = {
                        left: e.x.client - wnd.initialWindowPosition.left,
                        top: e.y.client - wnd.initialWindowPosition.top
                    };

                    wnd._updateBoundaries();
                    if (!wnd.containment) {
                        if (actions.length > 0) {
                            wnd.minLeft = outerWidth(actions) + parseInt(actions.css("right"), 10) - outerWidth(element);
                        } else {
                            wnd.minLeft = 20 - outerWidth(element); // at least 20px remain visible
                        }

                        wnd.minLeft -= containerOffset.left;
                        wnd.minTop = -containerOffset.top;
                    }

                    $(templates.overlay).appendTo(wnd.wrapper).css({ opacity: 0 });

                    wnd.wrapper.children(KWINDOWRESIZEHANDLES).hide();

                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
                },

                drag: function(e) {
                    var wnd = this.owner;
                    var position = wnd.options.position;
                    var axis = wnd.options.draggable.axis;
                    var left;
                    var top;

                    if (this._preventDragging || wnd.isMaximized()) {
                        return;
                    }

                    if (!axis || axis.toLowerCase() === "x") {
                        left = e.x.client - wnd.startPosition.left;

                        if (wnd.containment && !wnd._isPinned) {
                            left += wnd.containment.scrollLeft();
                        }

                        position.left = constrain(left, wnd.minLeft, wnd.maxLeft);
                    }

                    if (!axis || axis.toLowerCase() === "y") {
                        top = e.y.client - wnd.startPosition.top;

                        if (wnd.containment && !wnd._isPinned) {
                            top += wnd.containment.scrollTop();
                        }

                        position.top = constrain(top, wnd.minTop, wnd.maxTop);
                    }

                    if (kendo.support.transforms) {
                        $(wnd.wrapper).css(
                            "transform", "translate(" +
                            (position.left - wnd.initialPointerPosition.left) + "px, " +
                            (position.top - wnd.initialPointerPosition.top) + "px)"
                        );
                    } else {
                        $(wnd.wrapper).css(position);
                    }

                },

                _finishDrag: function() {
                    var wnd = this.owner;

                    wnd.wrapper
                        .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()
                        .find(KOVERLAY).remove();

                    $(BODY).css(CURSOR, "");
                },

                dragcancel: function(e) {
                    if (this._preventDragging) {
                        return;
                    }
                    this._finishDrag();

                    e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);
                },

                dragend: function() {
                    var wnd = this.owner;

                    if (this._preventDragging || wnd.isMaximized()) {
                        return;
                    }

                    $(wnd.wrapper)
                        .css(wnd.options.position)
                        .css("transform", "");

                    this._finishDrag();

                    wnd.trigger(DRAGEND);

                    return false;
                },
                destroy: function() {
                    if (this._draggable) {
                        this._draggable.destroy();
                    }

                    this._draggable = this.owner = null;
                }
            };

            kendo.ui.plugin(Window);

        })(window.kendo.jQuery);
    var kendo$2 = kendo;

    // The current file development is no longer in active phase but the code will be kept as is.
        "bundle all";
    var kendo$1 = kendo;

    return kendo$1;

}));
