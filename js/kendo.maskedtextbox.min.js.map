{"version":3,"sources":["raw-js/kendo.maskedtextbox.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendomaskedtextbox","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","min","Math","caret","keys","ui","Widget","NS","isPlainObject","setTimeout","STATEDISABLED","STATEINVALID","FOCUSED","DISABLED","READONLY","CHANGE","MOUSEUP","DROP","KEYDOWN","PASTE","ns","name","INPUT_EVENT_NAME","support","propertyChangeEvent","MaskedTextBox","extend","init","element","DOMElement","that","fn","call","_rules","rules","_wrapper","_tokenize","_form","inputMode","attr","addClass","on","value","_togglePrompt","_old","_emptyMask","_oldValue","_timeoutId","_maskLength","val","clearTimeout","removeClass","_change","mask","length","is","parents","enable","readonly","_validationIcon","iconClass","_label","_applyCssClasses","floatingLabel","refresh","notify","clearPromptChar","unmaskOnPost","promptChar","culture","label","size","fillMode","rounded","events","L","C","A","a","setOptions","_unbindInput","_bindInput","destroy","off","_formElement","_resetHandler","_submitHandler","raw","_unmask","replace","RegExp","escapeRegExp","emptyMask","_mask","_unmaskedValue","_activeElement","show","_editable","disable","_keydown","bind","_drop","_trackChange","_inputHandler","browser","msie","version","join","_legacyIEInputHandler","toggleClass","prop","trigger","__changing","inputChange","backward","old","cursor","lengthDiff","mobile","mobileOS","__dropping","android","contentStart","str1","str2","i","stringDiffStart","content","substring","caretPos","endContent","_trimStartPromptChars","unmasked","_findCaretPosBackwards","count","indexOf","pos","caretStart","_find","__backward","e","input","type","__pasting","formId","form","closest","key","keyCode","BACKSPACE","ENTER","idx","step","charAt","tokens","start","end","valueLength","chr","current","empty","chrIdx","split","token","tokenIdx","tokensLength","result","test","isFunction","_blinkInvalidState","floating","labelText","id","_floatingLabelContainer","wrap","parent","FloatingLabel","guid","_inputLabel","style","cssText","width","className","_addInvalidState","_invalidStateTimeout","_removeInvalidState","rule","maskChars","numberFormat","getCulture","currency","symbol","l","text","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin","kendo$1","__meta__","category","description","depends","Object","defineProperty"],"mappings":"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","file":"kendo.maskedtextbox.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.floatinglabel.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.floatinglabel', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendomaskedtextbox = global.kendomaskedtextbox || {}, global.kendomaskedtextbox.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"maskedtextbox\",\n        name: \"MaskedTextBox\",\n        category: \"web\",\n        description: \"The MaskedTextBox widget allows to specify a mask type on an input field.\",\n        depends: [\"core\", \"floatinglabel\", \"icons\"]\n    };\n\n    (function($, undefined$1) {\n        var global = window;\n        var min = global.Math.min;\n        var kendo = global.kendo;\n        var caret = kendo.caret;\n        var keys = kendo.keys;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var NS = \".kendoMaskedTextBox\";\n        var isPlainObject = $.isPlainObject;\n        var setTimeout = window.setTimeout;\n\n        var LABELCLASSES = \"k-label k-input-label\";\n        var FLOATINGLABELCLASS = \"k-floating-label\";\n        var STATEDISABLED = \"k-disabled\";\n        var STATEINVALID = \"k-invalid\";\n        var FOCUSED = \"k-focus\";\n        var DISABLED = \"disabled\";\n        var READONLY = \"readonly\";\n        var CHANGE = \"change\";\n        var MOUSEUP = \"mouseup\";\n        var DROP = \"drop\";\n        var KEYDOWN = \"keydown\";\n        var PASTE = \"paste\";\n        var INPUT = \"input\";\n\n        function ns(name) { return name + NS; }\n\n        var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? \"propertychange\" : INPUT);\n\n        function stringDiffStart(str1, str2) {\n            var i = 0;\n            while (i < str2.length) {\n                if (str1[i] !== str2[i]) {\n                    break;\n                }\n                i++;\n            }\n\n            return i;\n        }\n        var MaskedTextBox = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n                var DOMElement;\n\n                Widget.fn.init.call(that, element, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                element = that.element;\n                DOMElement = element[0];\n\n                that._wrapper();\n                that._tokenize();\n                that._form();\n                that.options.inputMode = that.options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n                that.element\n                    .addClass(\"k-input-inner\")\n                    .attr(\"autocomplete\", \"off\")\n                    .attr(\"inputmode\", that.options.inputMode)\n                    .on(\"focus\" + NS, function() {\n                        var value = DOMElement.value;\n\n                        if (!value) {\n                            DOMElement.value = that._old = that._emptyMask;\n                        } else {\n                            that._togglePrompt(true);\n                        }\n\n                        that._oldValue = value;\n                        that.wrapper.addClass(FOCUSED);\n\n                        that._timeoutId = setTimeout(function() {\n                            caret(element, 0, value ? that._maskLength : 0);\n                        });\n                    })\n                    .on(\"focusout\" + NS, function() {\n                        var value = element.val();\n\n                        clearTimeout(that._timeoutId);\n                        DOMElement.value = that._old = \"\";\n\n                        if (value !== that._emptyMask) {\n                            DOMElement.value = that._old = value;\n                        }\n\n                        that.wrapper.removeClass(FOCUSED);\n                        that._change();\n                        that._togglePrompt();\n                    });\n\n                if (that.options.mask && that.options.mask.length > 0) {\n                    that.element.attr(\"aria-placeholder\", that.options.mask);\n                }\n\n                var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                } else {\n                    that.readonly(element.is(\"[readonly]\"));\n                }\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n                that.value(that.options.value || element.val());\n\n                that._label();\n                that._applyCssClasses();\n\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, suffixInsertAfter: that._validationIcon });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MaskedTextBox\",\n                clearPromptChar: false,\n                unmaskOnPost: false,\n                promptChar: \"_\",\n                culture: \"\",\n                rules: {},\n                value: \"\",\n                mask: \"\",\n                label: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                }\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            rules: {\n                \"0\": /\\d/,\n                \"9\": /\\d|\\s/,\n                \"#\": /\\d|\\s|\\+|\\-/,\n                \"L\": /[a-zA-Z]/,\n                \"?\": /[a-zA-Z]|\\s/,\n                \"&\": /\\S/,\n                \"C\": /./,\n                \"A\": /[a-zA-Z0-9]/,\n                \"a\": /[a-zA-Z0-9]|\\s/\n            },\n\n            setOptions: function(options) {\n                var that = this;\n\n                Widget.fn.setOptions.call(that, options);\n\n                that._rules = $.extend({}, that.rules, that.options.rules);\n\n                that._tokenize();\n\n                this._unbindInput();\n                this._bindInput();\n\n                that.value(that.element.val());\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.destroy();\n                }\n\n                that.element.off(NS);\n\n                if (that._formElement) {\n                    that._formElement.off(\"reset\", that._resetHandler);\n                    that._formElement.off(\"submit\", that._submitHandler);\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            raw: function() {\n                var unmasked = this._unmask(this.element.val(), 0);\n                return unmasked.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \"\");\n            },\n\n            value: function(value) {\n                var element = this.element;\n                var emptyMask = this._emptyMask;\n\n                if (value === undefined$1) {\n                    return this.element.val();\n                }\n\n                if (value === null) {\n                    value = \"\";\n                }\n\n                if (!emptyMask) {\n                    this._oldValue = value;\n                    element.val(value);\n                    return;\n                }\n\n                value = this._unmask(value + \"\");\n\n                element.val(value ? emptyMask : \"\");\n\n                this._mask(0, this._maskLength, value);\n                this._unmaskedValue = null;\n\n                value = element.val();\n                this._oldValue = value;\n\n                if (kendo._activeElement() !== element) {\n                    if (value === emptyMask) {\n                        element.val(\"\");\n                    } else {\n                        this._togglePrompt();\n                    }\n                }\n\n                if (this.floatingLabel) {\n                    this.floatingLabel.refresh();\n                }\n            },\n\n            _togglePrompt: function(show) {\n                var DOMElement = this.element[0];\n                var value = DOMElement.value;\n\n                if (this.options.clearPromptChar) {\n                    if (!show) {\n                        value = value.replace(new RegExp(escapeRegExp(this.options.promptChar), \"g\"), \" \");\n                    } else {\n                        value = this._oldValue;\n                    }\n\n                    DOMElement.value = this._old = value;\n                }\n            },\n\n            readonly: function(readonly) {\n                var that = this;\n\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                var that = this;\n\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            _bindInput: function() {\n                var that = this;\n\n                if (that._maskLength) {\n                    that.element\n                        .on(ns(KEYDOWN), that._keydown.bind(that))\n                        .on(ns(DROP), that._drop.bind(that))\n                        .on(ns(CHANGE), that._trackChange.bind(that))\n                        .on(INPUT_EVENT_NAME, that._inputHandler.bind(that));\n\n\n                    if (kendo.support.browser.msie) {\n                        var version = kendo.support.browser.version;\n                        if (version > 8 && version < 11) {\n                            var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(\" \");\n                            that.element.on(events, that._legacyIEInputHandler.bind(that));\n                        }\n                    }\n                }\n            },\n\n            _unbindInput: function() {\n                var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(\" \");\n\n                this.element.off(events);\n            },\n\n            _editable: function(options) {\n                var that = this;\n                var element = that.element;\n                var wrapper = that.wrapper;\n                var disable = options.disable;\n                var readonly = options.readonly;\n\n                that._unbindInput();\n\n                if (!readonly && !disable) {\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false);\n\n                    wrapper.removeClass(STATEDISABLED);\n\n                    that._bindInput();\n                } else {\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly);\n\n                    wrapper.toggleClass(STATEDISABLED, disable);\n                }\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that.value();\n\n                if (value !== that._oldValue) {\n                    that._oldValue = value;\n\n                    that.trigger(CHANGE);\n                    that.element.trigger(CHANGE);\n                }\n                else if (value === \"\" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update\n                    that.element.trigger(CHANGE);\n                }\n            },\n\n            inputChange: function(backward) {\n                var that = this;\n                var old = that._old;\n                var element = that.element[0];\n                var value = element.value;\n                var selection = caret(element);\n                var cursor = selection[1];\n                var lengthDiff = value.length - old.length;\n                var mobile = kendo.support.mobileOS;\n\n                if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase\n                    return;\n                }\n\n                if (lengthDiff === -1 && mobile.android && mobile.browser === \"chrome\") {\n                    backward = true;\n                }\n\n                var contentStart = min(cursor, stringDiffStart(value, old));\n                var content = value.substring(contentStart, cursor);\n\n                element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);\n\n                var caretPos = that._mask(contentStart, cursor, content);\n                var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));\n\n                var unmasked = that._unmask(endContent, old.length - endContent.length);\n                that._mask(caretPos, caretPos, unmasked);\n\n                if (backward) {\n                    caretPos = that._findCaretPosBackwards(contentStart);\n                }\n\n                caret(element, caretPos);\n\n                //clean-up flags\n                that.__dropping = false;\n            },\n\n            _trimStartPromptChars: function(content, count) {\n                var promptChar = this.options.promptChar;\n\n                while (count-- > 0 && content.indexOf(promptChar) === 0) {\n                    content = content.substring(1);\n                }\n\n                return content;\n            },\n\n            _findCaretPosBackwards: function(pos) {\n                var caretStart = this._find(pos, true);\n                if (caretStart < pos) {\n                    caretStart += 1;\n                }\n\n                return caretStart;\n            },\n\n            _inputHandler: function() {\n                if (kendo._activeElement() !== this.element[0]) {\n                    return;\n                }\n\n                this.inputChange(this.__backward);\n            },\n\n            _legacyIEInputHandler: function(e) {\n                var that = this;\n                var input = that.element[0];\n                var value = input.value;\n                var type = e.type;\n\n                that.__pasting = (type === \"paste\");\n\n                setTimeout(function() {\n                    if (type === \"mouseup\" && that.__pasting) {\n                        return;\n                    }\n                    if (input.value && input.value !== value) {\n                        that.inputChange(that.__backward);\n                    }\n                });\n            },\n\n            _trackChange: function() {\n                var that = this;\n\n                that.__changing = true;\n                setTimeout(function() { that.__changing = false; });\n            },\n\n            _form: function() {\n                var that = this;\n                var element = that.element;\n                var formId = element.attr(\"form\");\n                var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(element[0].value);\n                        });\n                    };\n\n                    that._submitHandler = function() {\n                        that.element[0].value = that._old = that.raw();\n                    };\n\n                    if (that.options.unmaskOnPost) {\n                        form.on(\"submit\", that._submitHandler);\n                    }\n\n                    that._formElement = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n\n                this.__backward = key === keys.BACKSPACE;\n\n                if (key === keys.ENTER) {\n                    this._change();\n                }\n            },\n\n            _drop: function() {\n                this.__dropping = true;\n            },\n\n            _find: function(idx, backward) {\n                var value = this.element.val() || this._emptyMask;\n                var step = 1;\n\n                if (backward === true) {\n                    step = -1;\n                }\n\n                while (idx > -1 || idx <= this._maskLength) {\n                    if (value.charAt(idx) !== this.tokens[idx]) {\n                        return idx;\n                    }\n\n                    idx += step;\n                }\n\n                return -1;\n            },\n\n            _mask: function(start, end, value, backward) {\n                var element = this.element[0];\n                var current = element.value || this._emptyMask;\n                var empty = this.options.promptChar;\n                var valueLength;\n                var chrIdx = 0;\n                var unmasked;\n                var chr;\n                var idx;\n\n                start = this._find(start, backward);\n\n                if (start > end) {\n                    end = start;\n                }\n\n                unmasked = this._unmask(current.substring(end), end);\n                value = this._unmask(value, start);\n                valueLength = value.length;\n\n                if (value) {\n                    unmasked = unmasked.replace(new RegExp(\"^_{0,\" + valueLength + \"}\"), \"\");\n                }\n\n                value += unmasked;\n                current = current.split(\"\");\n                chr = value.charAt(chrIdx);\n\n                while (start < this._maskLength) {\n                    current[start] = chr || empty;\n                    chr = value.charAt(++chrIdx);\n\n                    if (idx === undefined$1 && chrIdx > valueLength) {\n                        idx = start;\n                    }\n\n                    start = this._find(start + 1);\n                }\n\n                element.value = this._old = current.join(\"\");\n\n                if (kendo._activeElement() === element) {\n                    if (idx === undefined$1) {\n                        idx = this._maskLength;\n                    }\n\n                    caret(element, idx);\n                }\n\n                return idx;\n            },\n\n            _unmask: function(value, idx) {\n                if (!value) {\n                    return \"\";\n                }\n\n                if (this._unmaskedValue === value) {\n                    return this._unmaskedValue;\n                }\n                value = (value + \"\").split(\"\");\n\n                var chr;\n                var token;\n                var chrIdx = 0;\n                var tokenIdx = idx || 0;\n\n                var empty = this.options.promptChar;\n\n                var valueLength = value.length;\n                var tokensLength = this.tokens.length;\n\n                var result = \"\";\n\n                while (tokenIdx < tokensLength) {\n                    chr = value[chrIdx];\n                    token = this.tokens[tokenIdx];\n\n                    if (chr === token || chr === empty) {\n                        result += chr === empty ? empty : \"\";\n\n                        chrIdx += 1;\n                        tokenIdx += 1;\n                    } else if (typeof token !== \"string\") {\n                        if ((token && token.test && token.test(chr)) || (kendo.isFunction(token) && token(chr))) {\n                            result += chr;\n                            tokenIdx += 1;\n                        } else {\n                            if (valueLength === 1) {\n                                this._blinkInvalidState();\n                            }\n                        }\n\n                        chrIdx += 1;\n                    } else {\n                        tokenIdx += 1;\n                    }\n\n                    if (chrIdx >= valueLength) {\n                        break;\n                    }\n                }\n                this._unmaskedValue = result;\n                return result;\n            },\n\n            _label: function() {\n                var that = this;\n                var element = that.element;\n                var options = that.options;\n                var id = element.attr(\"id\");\n                var floating;\n                var labelText;\n\n                if (options.label !== null) {\n                    floating = isPlainObject(options.label) ? options.label.floating : false;\n                    labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                    if (floating) {\n                        that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                    }\n\n                    if (kendo.isFunction(labelText)) {\n                        labelText = labelText.call(that);\n                    }\n\n                    if (!labelText) {\n                        labelText = \"\";\n                    }\n\n                    if (!id) {\n                        id = options.name + \"_\" + kendo.guid();\n                        element.attr(\"id\", id);\n                    }\n\n                    that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n                }\n            },\n\n            _wrapper: function() {\n                var that = this;\n                var element = that.element;\n                var DOMElement = element[0];\n\n                var wrapper = element.wrap(\"<span class='k-input k-maskedtextbox'></span>\").parent();\n                wrapper[0].style.cssText = DOMElement.style.cssText;\n                DOMElement.style.width = \"100%\";\n                that.wrapper = wrapper.addClass(DOMElement.className).removeClass('input-validation-error');\n            },\n\n            _blinkInvalidState: function() {\n                var that = this;\n\n                that._addInvalidState();\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n            },\n\n            _addInvalidState: function() {\n                var that = this;\n\n                that.wrapper.addClass(STATEINVALID);\n                that._validationIcon.removeClass(\"k-hidden\");\n            },\n\n            _removeInvalidState: function() {\n                var that = this;\n\n                that.wrapper.removeClass(STATEINVALID);\n                that._validationIcon.addClass(\"k-hidden\");\n                that._invalidStateTimeout = null;\n            },\n\n            _tokenize: function() {\n                var tokens = [];\n                var tokenIdx = 0;\n\n                var mask = this.options.mask || \"\";\n                var maskChars = mask.split(\"\");\n                var length = maskChars.length;\n                var idx = 0;\n                var chr;\n                var rule;\n\n                var emptyMask = \"\";\n                var promptChar = this.options.promptChar;\n                var numberFormat = kendo.getCulture(this.options.culture).numberFormat;\n                var rules = this._rules;\n\n                while (idx < length) {\n                    chr = maskChars[idx];\n                    rule = rules[chr];\n\n                    if (rule) {\n                        tokens[tokenIdx] = rule;\n                        emptyMask += promptChar;\n                        tokenIdx += 1;\n                    } else {\n                        if (chr === \".\" || chr === \",\") {\n                            chr = numberFormat[chr];\n                        } else if (chr === \"$\") {\n                            chr = numberFormat.currency.symbol;\n                        } else if (chr === \"\\\\\") {\n                            idx += 1;\n                            chr = maskChars[idx];\n                        }\n\n                        chr = chr.split(\"\");\n\n                        for (var i = 0, l = chr.length; i < l; i++) {\n                            tokens[tokenIdx] = chr[i];\n                            emptyMask += chr[i];\n                            tokenIdx += 1;\n                        }\n                    }\n                    idx++;\n                }\n\n                this.tokens = tokens;\n\n                this._emptyMask = emptyMask;\n                this._maskLength = emptyMask.length;\n            }\n        });\n\n        function escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        }\n\n        kendo.cssProperties.registerPrefix(\"MaskedTextBox\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MaskedTextBox\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(MaskedTextBox);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}