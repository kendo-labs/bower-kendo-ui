{"version":3,"sources":["raw-js/kendo.html.icon.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendohtml","icon","js","this","$","undefined$1","kendo","window","extend","HTMLBase","html","KI_PREFFIX","KSVG_PREFFIX","FLIP_PREFIX","FLIP_HORIZONTAL","FLIP_VERTICAL","ICON_TYPES","svg","element","options","HTMLSvgIcon","font","HTMLFontIcon","FLIP_CLASSES","default","horizontal","vertical","both","HTMLBaseIcon","init","fn","call","_wrapper","name","size","themeColor","flip","iconClass","stylingOptions","_addClasses","that","previouslyAddedClasses","wrapper","data","map","option","cssProperties","getValidClass","widget","propName","value","prefix","fill","fillMode","removeClass","filter","x","_className","join","concat","addClass","currentIconClass","className","split","find","includes","startsWith","empty","svgElm","regex","iconNameMatch","match","replace","isString","toUpperCase","ui","svgIcons","attr","isPlainObject","viewBox","focusable","xmlns","content","append","outerHTML","renderIcon","isPresent","type","defaults","iconType","isFunction","getIconRenderer","registerPrefix","registerValues","prop","values","sizeValues","jQuery"],"mappings":"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","file":"kendo.html.icon.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.html.base.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.html.base'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendohtml = global.kendohtml || {}, global.kendohtml.icon = global.kendohtml.icon || {}, global.kendohtml.icon.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"html.icon\",\n        name: \"Html.Icon\",\n        category: \"web\",\n        description: \"HTML font icon rendering utility for Kendo UI for jQuery.\",\n        depends: [\"html.base\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            HTMLBase = kendo.html.HTMLBase;\n\n        var KFONTICON = 'k-icon k-font-icon';\n        var KI_PREFFIX = 'k-i-';\n        var KSVGICON = 'k-icon k-svg-icon';\n        var KSVG_PREFFIX = 'k-svg-i-';\n\n        var FLIP_PREFIX = 'k-flip-';\n        var FLIP_HORIZONTAL = `${FLIP_PREFIX}h`;\n        var FLIP_VERTICAL = `${FLIP_PREFIX}v`;\n\n        var THEME_COLOR_PREFIX = 'k-color-';\n\n        var ICON_TYPES = {\n            'svg': (element, options) => new HTMLSvgIcon(element, options),\n            'font': (element, options) => new HTMLFontIcon(element, options)\n        };\n\n        var FLIP_CLASSES = {\n            default: '',\n            horizontal: FLIP_HORIZONTAL,\n            vertical: FLIP_VERTICAL,\n            both: `${FLIP_HORIZONTAL} ${FLIP_VERTICAL}`\n        };\n\n        var renderIcon = function(element, options) {\n            if (!element || $.isPlainObject(element) || kendo.isString(element)) {\n                options = element;\n                element = $(\"<span></span>\");\n            }\n\n            if (kendo.isString(options)) {\n                options = {\n                    icon: options\n                };\n            }\n\n            if (!kendo.isPresent(options.type)) {\n                options.type = kendo.defaults.iconType ? kendo.defaults.iconType : 'svg';\n            }\n\n            if (kendo.isFunction(options.type)) {\n                return options.type(element, options);\n            }\n\n            if (!kendo.isFunction(ICON_TYPES[options.type])) {\n                return null;\n            }\n\n            return (ICON_TYPES[options.type](element, options)).html();\n        };\n\n        var HTMLBaseIcon = HTMLBase.extend({\n            init: function(element, options) {\n                var that = this;\n                HTMLBase.fn.init.call(that, element, options);\n                that._wrapper();\n            },\n            options: {\n                name: 'HTMLIcon',\n                size: 'none',\n                themeColor: 'none',\n                flip: 'default',\n                iconClass: '',\n                stylingOptions: [ 'size', 'themeColor', 'fill' ]\n            },\n            _wrapper: function() {\n                var that = this;\n\n                that._addClasses();\n            },\n            _addClasses: function() {\n                var that = this,\n                    options = that.options,\n                    stylingOptions = options.stylingOptions,\n                    previouslyAddedClasses = that.wrapper.data(\"added-classes\");\n\n                stylingOptions = stylingOptions.map(function(option) {\n                    if (option === 'themeColor') {\n                        return kendo.cssProperties.getValidClass({\n                            widget: options.name,\n                            propName: option,\n                            value: options[option],\n                            prefix: THEME_COLOR_PREFIX\n                        });\n                    }\n\n                    if (option === 'fill') {\n                        return FLIP_CLASSES[options.flip];\n                    }\n\n                    return kendo.cssProperties.getValidClass({\n                        widget: options.name,\n                        propName: option,\n                        value: options[option],\n                        fill: options.fillMode\n                    });\n                });\n\n                if (previouslyAddedClasses) {\n                    that.wrapper.removeClass(previouslyAddedClasses.filter(x => x !== that._className).join(\" \"));\n                }\n\n                that.wrapper.data(\"added-classes\", stylingOptions.concat([that._className]));\n                that.wrapper.addClass(stylingOptions.join(\" \"));\n            }\n        });\n\n        var HTMLFontIcon = HTMLBaseIcon.extend({\n            init: function(element, options) {\n                HTMLBaseIcon.fn.init.call(this, element, options);\n            },\n            options: extend({}, HTMLBaseIcon.fn.options, {\n                name: 'HTMLFontIcon',\n                icon: null\n            }),\n            _wrapper: function() {\n                var that = this,\n                    // Find if there is an existing k-i- class appended to the element.\n                    currentIconClass = that.element[0].className.split(\" \").find(x => x.includes(KI_PREFFIX)),\n                    className = that.options.icon ? `${that.options.icon.startsWith(KI_PREFFIX) ? \"\" : KI_PREFFIX}${that.options.icon}` : \"\";\n\n                that._className = className;\n                that.wrapper = that.element\n                    .addClass(KFONTICON)\n                    .removeClass(currentIconClass) // Remove any existing icons.\n                    .addClass(className)\n                    .addClass(that.options.iconClass || '');\n\n                HTMLBaseIcon.fn._wrapper.call(this);\n            }\n        });\n\n        var HTMLSvgIcon = HTMLBaseIcon.extend({\n            init: function(element, options) {\n                // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.\n                element.empty();\n                HTMLBaseIcon.fn.init.call(this, element, options);\n            },\n            options: extend({}, HTMLBaseIcon.fn.options, {\n                name: 'HTMLSVGIcon',\n                icon: null\n            }),\n            _wrapper: function() {\n                var that = this,\n                    icon = that.options.icon,\n                    iconClass = that.options.iconClass,\n                    // Find if there is an existing k-svg-i- class appended to the element.\n                    currentIconClass = that.element[0].className.split(\" \").find(x => x.includes(KSVG_PREFFIX)),\n                    svgElm = $('<svg></svg>'),\n                    className;\n\n                if (!icon && iconClass) {\n                    // match k-i-(some-icon-name)\n                    const regex = /k-i-(\\w+(?:-\\w+)*)/;\n                    let iconNameMatch = iconClass.match(regex);\n                    if (iconNameMatch) {\n                        icon = iconNameMatch[1];\n                        iconClass = iconClass.replace(iconNameMatch[0], \"\");\n                    }\n                }\n\n                if (kendo.isString(icon)) {\n                    // remove k-i- and convert kebab-case-icon to camelCaseIcon\n                    icon = icon.replace('k-i-', '').replace(/-./g, x=>x[1].toUpperCase());\n                    icon = kendo.ui.svgIcons[icon] || kendo.ui.svgIcons[`${icon}Icon`];\n                }\n\n                className = icon && icon.name ? `${KSVG_PREFFIX}${icon.name}` : '';\n                that._className = className;\n\n                that.wrapper = that.element\n                    .addClass(KSVGICON)\n                    .removeClass(currentIconClass) // Remove any existing icons.\n                    .addClass(className)\n                    .addClass(iconClass || '')\n                    .attr(\"aria-hidden\", true);\n\n                if ($.isPlainObject(icon)) {\n                    svgElm.attr('viewBox', icon.viewBox || '')\n                        .attr({\n                            'viewBox': icon.viewBox || '',\n                            'focusable': 'false',\n                            'xmlns': 'http://www.w3.org/2000/svg'\n                        })\n                        .html(icon.content || '');\n\n                    that.wrapper.append(svgElm[0].outerHTML);\n                }\n\n                HTMLBaseIcon.fn._wrapper.call(this);\n            }\n        });\n\n        $.extend(kendo.html, {\n            renderIcon: renderIcon,\n            HTMLFontIcon: HTMLFontIcon,\n            HTMLSvgIcon: HTMLSvgIcon,\n            getIconRenderer: (type) => ICON_TYPES[type]\n        });\n\n        kendo.cssProperties.registerPrefix(\"HTMLFontIcon\", \"k-icon-\");\n\n        kendo.cssProperties.registerValues(\"HTMLFontIcon\", [{\n            prop: \"size\",\n            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n        }, {\n            prop: \"themeColor\",\n            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n        }]);\n\n        kendo.cssProperties.registerPrefix(\"HTMLSVGIcon\", \"k-icon-\");\n\n        kendo.cssProperties.registerValues(\"HTMLSVGIcon\", [{\n            prop: \"size\",\n            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n        }, {\n            prop: \"themeColor\",\n            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}