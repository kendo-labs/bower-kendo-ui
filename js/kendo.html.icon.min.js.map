{"version":3,"file":"kendo.html.icon.min.js","names":["factory","define","amd","$","kendo","extend","HTMLBase","KI_PREFFIX","KSVG_PREFFIX","ICON_TYPES","FLIP_CLASSES","HTMLBaseIcon","HTMLFontIcon","HTMLSvgIcon","window","jQuery","html","svg","element","options","font","default","horizontal","FLIP_PREFIX","vertical","both","init","fn","call","this","_wrapper","name","size","themeColor","flip","iconClass","stylingOptions","_addClasses","that","previouslyAddedClasses","wrapper","data","map","option","cssProperties","getValidClass","widget","propName","value","prefix","fill","fillMode","removeClass","filter","x","_className","join","concat","addClass","icon","currentIconClass","className","split","find","includes","startsWith","empty","svgElm","iconNameMatch","match","replace","isString","toUpperCase","ui","svgIcons","isPlainObject","attr","viewBox","focusable","xmlns","content","append","outerHTML","renderIcon","isPresent","type","defaults","iconType","isFunction","getIconRenderer","registerPrefix","registerValues","prop","values","sizeValues"],"sources":["kendo.html.icon.js"],"mappings":"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","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.html.base'], factory) :\n    factory();\n})((function () {\n    var __meta__ = {\n        id: \"html.icon\",\n        name: \"Html.Icon\",\n        category: \"web\",\n        description: \"HTML font icon rendering utility for Kendo UI for jQuery.\",\n        depends: [\"html.base\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            HTMLBase = kendo.html.HTMLBase;\n\n        var KICON = 'k-icon';\n        var KI_PREFFIX = 'k-i-';\n        var KSVGICON = 'k-svg-icon';\n        var KSVG_PREFFIX = 'k-svg-i-';\n\n        var FLIP_PREFIX = 'k-flip-';\n        var FLIP_HORIZONTAL = FLIP_PREFIX + \"h\";\n        var FLIP_VERTICAL = FLIP_PREFIX + \"v\";\n\n        var THEME_COLOR_PREFIX = 'k-color-';\n\n        var ICON_TYPES = {\n            'svg': function (element, options) { return new HTMLSvgIcon(element, options); },\n            'font': function (element, options) { return new HTMLFontIcon(element, options); }\n        };\n\n        var FLIP_CLASSES = {\n            default: '',\n            horizontal: FLIP_HORIZONTAL,\n            vertical: FLIP_VERTICAL,\n            both: (FLIP_HORIZONTAL + \" \" + FLIP_VERTICAL)\n        };\n\n        var renderIcon = function(element, options) {\n            if (!element || $.isPlainObject(element) || kendo.isString(element)) {\n                options = element;\n                element = $(\"<span></span>\");\n            }\n\n            if (kendo.isString(options)) {\n                options = {\n                    icon: options\n                };\n            }\n\n            if (!kendo.isPresent(options.type)) {\n                options.type = kendo.defaults.iconType ? kendo.defaults.iconType : 'svg';\n            }\n\n            if (kendo.isFunction(options.type)) {\n                return options.type(element, options);\n            }\n\n            if (!kendo.isFunction(ICON_TYPES[options.type])) {\n                return null;\n            }\n\n            return (ICON_TYPES[options.type](element, options)).html();\n        };\n\n        var HTMLBaseIcon = HTMLBase.extend({\n            init: function(element, options) {\n                var that = this;\n                HTMLBase.fn.init.call(that, element, options);\n                that._wrapper();\n            },\n            options: {\n                name: 'HTMLIcon',\n                size: 'none',\n                themeColor: 'none',\n                flip: 'default',\n                iconClass: '',\n                stylingOptions: [ 'size', 'themeColor', 'fill' ]\n            },\n            _wrapper: function() {\n                var that = this;\n\n                that._addClasses();\n            },\n            _addClasses: function() {\n                var that = this,\n                    options = that.options,\n                    stylingOptions = options.stylingOptions,\n                    previouslyAddedClasses = that.wrapper.data(\"added-classes\");\n\n                stylingOptions = stylingOptions.map(function(option) {\n                    if (option === 'themeColor') {\n                        return kendo.cssProperties.getValidClass({\n                            widget: options.name,\n                            propName: option,\n                            value: options[option],\n                            prefix: THEME_COLOR_PREFIX\n                        });\n                    }\n\n                    if (option === 'fill') {\n                        return FLIP_CLASSES[options.flip];\n                    }\n\n                    return kendo.cssProperties.getValidClass({\n                        widget: options.name,\n                        propName: option,\n                        value: options[option],\n                        fill: options.fillMode\n                    });\n                });\n\n                if (previouslyAddedClasses) {\n                    that.wrapper.removeClass(previouslyAddedClasses.filter(function (x) { return x !== that._className; }).join(\" \"));\n                }\n\n                that.wrapper.data(\"added-classes\", stylingOptions.concat([that._className]));\n                that.wrapper.addClass(stylingOptions.join(\" \"));\n            }\n        });\n\n        var HTMLFontIcon = HTMLBaseIcon.extend({\n            init: function(element, options) {\n                HTMLBaseIcon.fn.init.call(this, element, options);\n            },\n            options: extend({}, HTMLBaseIcon.fn.options, {\n                name: 'HTMLFontIcon',\n                icon: null\n            }),\n            _wrapper: function() {\n                var that = this,\n                    // Find if there is an existing k-i- class appended to the element.\n                    currentIconClass = that.element[0].className.split(\" \").find(function (x) { return x.includes(KI_PREFFIX); }),\n                    className = that.options.icon ? (\"\" + (that.options.icon.startsWith(KI_PREFFIX) ? \"\" : KI_PREFFIX) + (that.options.icon)) : \"\";\n\n                that._className = className;\n                that.wrapper = that.element\n                    .addClass(KICON)\n                    .removeClass(currentIconClass) // Remove any existing icons.\n                    .addClass(className)\n                    .addClass(that.options.iconClass || '');\n\n                HTMLBaseIcon.fn._wrapper.call(this);\n            }\n        });\n\n        var HTMLSvgIcon = HTMLBaseIcon.extend({\n            init: function(element, options) {\n                // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.\n                element.empty();\n                HTMLBaseIcon.fn.init.call(this, element, options);\n            },\n            options: extend({}, HTMLBaseIcon.fn.options, {\n                name: 'HTMLSVGIcon',\n                icon: null\n            }),\n            _wrapper: function() {\n                var that = this,\n                    icon = that.options.icon,\n                    iconClass = that.options.iconClass,\n                    // Find if there is an existing k-svg-i- class appended to the element.\n                    currentIconClass = that.element[0].className.split(\" \").find(function (x) { return x.includes(KSVG_PREFFIX); }),\n                    svgElm = $('<svg></svg>'),\n                    className;\n\n                if (!icon && iconClass) {\n                    // match k-i-(some-icon-name)\n                    var regex = /k-i-(\\w+(?:-\\w+)*)/;\n                    var iconNameMatch = iconClass.match(regex);\n                    if (iconNameMatch) {\n                        icon = iconNameMatch[1];\n                        iconClass = iconClass.replace(iconNameMatch[0], \"\");\n                    }\n                }\n\n                if (kendo.isString(icon)) {\n                    // remove k-i- and convert kebab-case-icon to camelCaseIcon\n                    icon = icon.replace('k-i-', '').replace(/-./g, function (x){ return x[1].toUpperCase(); });\n                    icon = kendo.ui.svgIcons[icon] || kendo.ui.svgIcons[(icon + \"Icon\")];\n                }\n\n                className = icon && icon.name ? (\"\" + KSVG_PREFFIX + (icon.name)) : '';\n                that._className = className;\n\n                that.wrapper = that.element\n                    .addClass(KSVGICON)\n                    .removeClass(currentIconClass) // Remove any existing icons.\n                    .addClass(className)\n                    .addClass(iconClass || '');\n\n                if ($.isPlainObject(icon)) {\n                    svgElm.attr('viewBox', icon.viewBox || '')\n                        .attr({\n                            'viewBox': icon.viewBox || '',\n                            'aria-hidden': 'true',\n                            'focusable': 'false',\n                            'xmlns': 'http://www.w3.org/2000/svg'\n                        })\n                        .html(icon.content || '');\n\n                    that.wrapper.append(svgElm[0].outerHTML);\n                }\n\n                HTMLBaseIcon.fn._wrapper.call(this);\n            }\n        });\n\n        $.extend(kendo.html, {\n            renderIcon: renderIcon,\n            HTMLFontIcon: HTMLFontIcon,\n            HTMLSvgIcon: HTMLSvgIcon,\n            getIconRenderer: function (type) { return ICON_TYPES[type]; }\n        });\n\n        kendo.cssProperties.registerPrefix(\"HTMLFontIcon\", \"k-icon-\");\n\n        kendo.cssProperties.registerValues(\"HTMLFontIcon\", [{\n            prop: \"size\",\n            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n        }, {\n            prop: \"themeColor\",\n            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n        }]);\n\n        kendo.cssProperties.registerPrefix(\"HTMLSVGIcon\", \"k-icon-\");\n\n        kendo.cssProperties.registerValues(\"HTMLSVGIcon\", [{\n            prop: \"size\",\n            values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n        }, {\n            prop: \"themeColor\",\n            values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n        }]);\n    })(window.kendo.jQuery);\n\n}));\n"]}