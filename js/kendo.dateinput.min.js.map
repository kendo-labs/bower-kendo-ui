{"version":3,"sources":["raw-js/kendo.dateinput.js"],"names":["factory","define","amd","$","undefined$1","kendo","window","caret","ui","Widget","keys","ns","objectToString","toString","isPlainObject","INPUT_EVENT_NAME","support","propertyChangeEvent","FOCUSED","STATEDISABLED","STATEINVALID","DISABLED","READONLY","CHANGE","knownSymbols","DateInput","extend","init","element","options","that","this","fn","call","format","_extractFormat","getCulture","culture","calendars","standard","patterns","d","min","parseDate","attr","max","wrapperClass","parent","skipStyling","indexOf","wrapper","wrap","addClass","className","removeClass","style","cssText","css","height","_validationIcon","icon","iconClass","insertAfter","_form","on","_change","setAttribute","e","type","is","parents","enable","readonly","value","val","_applyCssClasses","label","_label","notify","name","Date","messages","year","month","day","weekday","hour","minute","second","dayperiod","size","fillMode","rounded","events","setOptions","_unbindInput","_bindInput","_updateElementValue","_inputLabel","_unwrapFloating","remove","destroy","off","_formElement","_resetHandler","_dateTime","getDateObject","getTime","customDateTime","_oldValue","floatingLabel","refresh","stringAndFormat","toPair","_oldText","_format","_toggleDateMask","toShow","_hasDateInput","_editable","disable","labelOptions","content","Label","widget","floatCheck","document","activeElement","_paste","bind","_keydown","_input","_mouseUp","_scroll","length","removeAttribute","oldValue","trigger","blinkInvalid","_activeElement","diff","oldText","oldFormat","newText","oldTextSeparator","substring","i","push","deletedSymbol","symbol","Math","approximateStringMatching","navigationOnly","valid","parsePart","_selectSegment","difSym","setTimeout","keyCode","preventDefault","_blinkInvalidState","_addInvalidState","clearTimeout","_invalidStateTimeout","_removeInvalidState","selection","_selectNearestSegment","newEvent","event","shiftKey","wheelDelta","detail","returnValue","stopPropagation","formId","form","closest","initialValue","key","dir","index","interval","modifyPart","browser","msie","version","keycode","which","ENTER","start","j","begin","end","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","initDate","initFormat","initCulture","initMessages","date","hours","minutes","seconds","typedMonthPart","typedDayPeriodPart","placeholders","zeros","pad","number","digits","dateFormatRegExp","months","calendar","days","returnsFormat","matcher","match","mins","sign","result","getDate","namesAbbr","getDay","names","getMonth","getFullYear","getHours","getMinutes","getSeconds","floor","getMilliseconds","AM","PM","getTimezoneOffset","abs","split","slice","formatResult","generateMatcher","retFormat","setExisting","setMonth","setValue","getValue","offset","newValue","setFullYear","newMonth","setDate","setHours","setMinutes","setSeconds","currentChar","newHours","lastDateOfMonth","newDate","parseInt","isNaN","monthNames","toLowerCase","newYear","newMinutes","newSeconds","replace","sampleFormat","jQuery"],"mappings":"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","file":"kendo.dateinput.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.label', 'kendo.icons'], factory) :\n    factory();\n})((function () {\n    // The current file development is no longer in active phase but the code will be kept as is.\n\n    var __meta__ = {\n        id: \"dateinput\",\n        name: \"DateInput\",\n        category: \"web\",\n        description: \"The DateInput widget allows to edit date by typing.\",\n        depends: [ \"core\", \"label\" ]\n    };\n\n    (function($, undefined$1) {\n        var global = window;\n        var kendo = global.kendo;\n        var caret = kendo.caret;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var keys = kendo.keys;\n        var ns = \".kendoDateInput\";\n        var objectToString = {}.toString;\n        var isPlainObject = $.isPlainObject;\n\n        var INPUT_EVENT_NAME = (kendo.support.propertyChangeEvent ? \"propertychange.kendoDateInput input\" : \"input\") + ns;\n\n        var FOCUSED = \"k-focus\";\n        var STATEDISABLED = \"k-disabled\";\n        var STATEINVALID = \"k-invalid\";\n\n        var DISABLED = \"disabled\";\n        var READONLY = \"readonly\";\n        var CHANGE = \"change\";\n\n        var knownSymbols = \"dMyHhmftsz\";\n\n        var DateInput = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n                element = that.element;\n\n                options = that.options;\n                options.format = kendo._extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.d);\n                options.min = kendo.parseDate(element.attr(\"min\")) || kendo.parseDate(options.min);\n                options.max = kendo.parseDate(element.attr(\"max\")) || kendo.parseDate(options.max);\n\n                var wrapperClass = (element.parent().attr(\"class\") || \"\");\n                var skipStyling = wrapperClass.indexOf(\"picker\") >= 0 && wrapperClass.indexOf(\"rangepicker\") < 0;\n\n                if (skipStyling) {\n                    that.wrapper = that.element.parent();\n                } else {\n                    that.wrapper = element.wrap(\"<span class='k-dateinput k-input'></span>\").parent();\n                    that.wrapper.addClass(element[0].className).removeClass('input-validation-error');\n                }\n                that.wrapper[0].style.cssText = element[0].style.cssText;\n                element.css({\n                    height: element[0].style.height\n                });\n\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n\n                that._form();\n\n                that.element\n                    .addClass(\"k-input-inner\")\n                    .attr(\"autocomplete\", \"off\")\n                    .on(\"focus\" + ns, function() {\n                        that.wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function() {\n                        that.wrapper.removeClass(FOCUSED);\n                        that._change();\n                    });\n\n                try {\n                    element[0].setAttribute(\"type\", \"text\");\n                } catch (e) {\n                    element[0].type = \"text\";\n                }\n\n                var disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                } else {\n                    that.readonly(element.is(\"[readonly]\"));\n                }\n                that.value(that.options.value || element.val());\n                if (!skipStyling) {\n                    that._applyCssClasses();\n                }\n\n                if (options.label) {\n                    that._label();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"DateInput\",\n                culture: \"\",\n                value: \"\",\n                format: \"\",\n                min: new Date(1900, 0, 1),\n                max: new Date(2099, 11, 31),\n                messages: {\n                    \"year\": \"year\",\n                    \"month\": \"month\",\n                    \"day\": \"day\",\n                    \"weekday\": \"day of the week\",\n                    \"hour\": \"hours\",\n                    \"minute\": \"minutes\",\n                    \"second\": \"seconds\",\n                    \"dayperiod\": \"AM/PM\"\n                },\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null\n            },\n\n            events: [\n                CHANGE\n            ],\n\n            min: function(value) {\n                if (value !== undefined$1) {\n                    this.options.min = value;\n                } else {\n                    return this.options.min;\n                }\n            },\n\n            max: function(value) {\n                if (value !== undefined$1) {\n                    this.options.max = value;\n                } else {\n                    return this.options.max;\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this;\n                Widget.fn.setOptions.call(that, options);\n                this._unbindInput();\n                this._bindInput();\n                this._updateElementValue();\n\n                if (options.label && that._inputLabel) {\n                    that.label.setOptions(options.label);\n                } else if (options.label === false) {\n                    that.label._unwrapFloating();\n                    that._inputLabel.remove();\n                    delete that._inputLabel;\n                } else if (options.label) {\n                    that._label();\n                }\n            },\n\n            destroy: function() {\n                var that = this;\n                that.element.off(ns);\n\n                if (that._formElement) {\n                    that._formElement.off(\"reset\", that._resetHandler);\n                }\n\n                if (that.label) {\n                    that.label.destroy();\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            value: function(value) {\n                if (value === undefined$1) {\n                    return this._dateTime.getDateObject();\n                }\n\n                if (value === null) {\n                    value = \"\";\n                }\n\n                if (objectToString.call(value) !== \"[object Date]\") {\n                    value = kendo.parseDate(value, this.options.format, this.options.culture);\n                }\n\n                if (value && !value.getTime()) {\n                    value = null;\n                }\n\n                this._dateTime = new customDateTime(value, this.options.format, this.options.culture, this.options.messages);\n\n                this._updateElementValue();\n                this._oldValue = value;\n\n                if (this.label && this.label.floatingLabel) {\n                    this.label.floatingLabel.refresh();\n                }\n            },\n\n            _updateElementValue: function() {\n                var stringAndFormat = this._dateTime.toPair(this.options.format, this.options.culture, this.options.messages);\n                this.element.val(stringAndFormat[0]);\n                this._oldText = stringAndFormat[0];\n                this._format = stringAndFormat[1];\n            },\n\n            _toggleDateMask: function(toShow) {\n                var that = this;\n\n                if (toShow) {\n                    that._updateElementValue();\n                } else {\n                    this.element.val(\"\");\n                }\n            },\n\n            _hasDateInput: function() {\n                var emptyInput = (new customDateTime(null, this.options.format, this.options.culture, this.options.messages))\n                                    .toPair(this.options.format, this.options.culture, this.options.messages)[0];\n                var currentInput = this._dateTime.toPair(this.options.format, this.options.culture, this.options.messages)[0];\n\n                return emptyInput !== currentInput;\n            },\n\n            readonly: function(readonly) {\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (this.label && this.label.floatingLabel) {\n                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (this.label && this.label.floatingLabel) {\n                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            _label: function() {\n                var that = this;\n                var options = that.options;\n                var labelOptions = isPlainObject(options.label) ? options.label : {\n                    content: options.label\n                };\n\n                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {\n                    widget: that,\n                    floatCheck: () => {\n                        that._toggleDateMask(true);\n\n                        if (!that.value() && !that._hasDateInput() && document.activeElement !== that.element[0]) {\n                            that._toggleDateMask(false);\n                            return true;\n                        }\n\n                        return false;\n                    }\n                }));\n\n                that._inputLabel = that.label.element;\n            },\n\n            _bindInput: function() {\n                var that = this;\n                that.element\n                    .on(\"focus\" + ns, function() {\n                        that.wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function() {\n                        that.wrapper.removeClass(FOCUSED);\n                        that._change();\n                    })\n                    .on(\"paste\" + ns, that._paste.bind(that))\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(INPUT_EVENT_NAME, that._input.bind(that))\n                    .on(\"mouseup\" + ns, that._mouseUp.bind(that))\n                    .on(\"DOMMouseScroll\" + ns + \" mousewheel\" + ns, that._scroll.bind(that));\n            },\n\n            _unbindInput: function() {\n                this.element\n                    .off(\"keydown\" + ns)\n                    .off(\"paste\" + ns)\n                    .off(\"focus\" + ns)\n                    .off(\"focusout\" + ns)\n                    .off(INPUT_EVENT_NAME)\n                    .off(\"mouseup\" + ns)\n                    .off(\"DOMMouseScroll\" + ns + \" mousewheel\" + ns);\n            },\n\n            _editable: function(options) {\n                var that = this;\n                var element = that.element;\n                var disable = options.disable;\n                var readonly = options.readonly;\n                var wrapper = that.wrapper;\n\n                that._unbindInput();\n\n                if (!readonly && !disable) {\n                    wrapper.removeClass(STATEDISABLED);\n                    if (element && element.length) {\n                        element[0].removeAttribute(DISABLED);\n                        element[0].removeAttribute(READONLY);\n                    }\n\n                    that._bindInput();\n                } else {\n                    if (disable) {\n                        wrapper.addClass(STATEDISABLED);\n                        element.attr(DISABLED, disable);\n                        if (element && element.length) {\n                            element[0].removeAttribute(READONLY);\n                        }\n                    }\n                    if (readonly) {\n                        element.attr(READONLY, readonly);\n                    }\n                }\n            },\n\n            _change: function() {\n                var that = this;\n                var oldValue = that._oldValue;\n                var value = that.value();\n\n                if (value && that.min() && value < that.min()) {\n                    that.value(that.min());\n                    value = that.value();\n                }\n                if (value && that.max() && value > that.max()) {\n                    that.value(that.max());\n                    value = that.value();\n                }\n\n                if (oldValue && value && value.getTime() !== oldValue.getTime() ||\n                    oldValue && !value ||\n                    !oldValue && value\n                ) {\n                    that._oldValue = value;\n                    that.trigger(CHANGE);\n                    that.element.trigger(CHANGE);\n                }\n            },\n\n            _input: function() {\n                var that = this;\n                var element = that.element[0];\n                var blinkInvalid = false;\n\n                if (kendo._activeElement() !== element) {\n                    return;\n                }\n\n                var diff = approximateStringMatching(\n                    this._oldText,\n                    this._format,\n                    this.element[0].value,\n                    caret(this.element[0])[0]);\n\n                var navigationOnly = (diff.length === 1 && diff[0][1] === \" \");\n                if (!navigationOnly) {\n                    for (var i = 0; i < diff.length; i++) {\n                        var valid = this._dateTime.parsePart(diff[i][0], diff[i][1]);\n                        blinkInvalid = blinkInvalid || !valid;\n                    }\n                }\n                this._updateElementValue();\n\n                if (diff.length && diff[0][0] !== \" \") {\n                    this._selectSegment(diff[0][0]);\n\n                    //android fix\n                    if (!navigationOnly) {\n                        var difSym = diff[0][0];\n                        setTimeout(function() { that._selectSegment(difSym); });\n                    }\n                }\n                if (navigationOnly) {\n                    var newEvent = { keyCode: 39, preventDefault: function() { } };\n                    this._keydown(newEvent);\n                }\n                if (blinkInvalid) {\n                    that._blinkInvalidState();\n                }\n            },\n\n            _blinkInvalidState: function() {\n                var that = this;\n\n                that._addInvalidState();\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n            },\n\n            _addInvalidState: function() {\n                var that = this;\n\n                that.wrapper.addClass(STATEINVALID);\n                that._validationIcon.removeClass(\"k-hidden\");\n            },\n\n            _removeInvalidState: function() {\n                var that = this;\n\n                that.wrapper.removeClass(STATEINVALID);\n                that._validationIcon.addClass(\"k-hidden\");\n                that._invalidStateTimeout = null;\n            },\n\n            _mouseUp: function() {\n                var selection = caret(this.element[0]);\n                if (selection[0] === selection[1]) {\n                    this._selectNearestSegment();\n                }\n            },\n\n            _scroll: function(e) {\n                if (kendo._activeElement() !== this.element[0] || this.element.is(\"[readonly]\")) {\n                    return;\n                }\n                e = window.event || e;\n\n                var newEvent = { keyCode: 37, preventDefault: function() { } };\n\n                if (e.shiftKey) {\n                    newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 37 : 39;\n                } else {\n                    newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 38 : 40;\n                }\n                this._keydown(newEvent);\n                e.returnValue = false;\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n                if (e.stopPropagation) {\n                    e.stopPropagation();\n                }\n            },\n\n            _form: function() {\n                var that = this;\n                var element = that.element;\n                var formId = element.attr(\"form\");\n                var form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n                var initialValue = element[0].value;\n\n                if (!initialValue && that.options.value) {\n                    initialValue = that.options.value;\n                }\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(initialValue);\n                        });\n                    };\n\n                    that._formElement = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _paste: function(e) {\n                e.preventDefault();\n            },\n\n            _keydown: function(e) {\n                var key = e.keyCode;\n                var selection;\n                if (key == 37 || key == 39) { //left/right\n                    e.preventDefault();\n                    selection = caret(this.element[0]);\n                    if (selection[0] != selection[1]) {\n                        this._selectNearestSegment();\n                    }\n                    var dir = (key == 37) ? -1 : 1;\n                    var index = (dir == -1) ? caret(this.element[0])[0] - 1 : caret(this.element[0])[1] + 1;\n                    while (index >= 0 && index < this._format.length) {\n                        if (knownSymbols.indexOf(this._format[index]) >= 0) {\n                            this._selectSegment(this._format[index]);\n                            break;\n                        }\n                        index += dir;\n                    }\n                }\n                if (key == 38 || key == 40) { //up/down\n                    e.preventDefault();\n                    selection = caret(this.element[0]);\n                    var symbol = this._format[selection[0]];\n                    if (knownSymbols.indexOf(symbol) >= 0) {\n                        var interval = 1;\n                        if (symbol == 'm') {\n                            interval = this.options.interval || 1;\n                        }\n                        this._dateTime.modifyPart(symbol, key == 38 ? interval * 1 : interval * -1);\n                        this._updateElementValue();\n                        this._selectSegment(symbol);\n                        this.element.trigger(CHANGE);\n                    }\n                }\n                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {\n                    var keycode = e.keyCode ? e.keyCode : e.which;\n                    if (keycode === 8 || keycode === 46) {\n                        var that = this;\n                        setTimeout(function() {\n                            that._input();\n                        }, 0);\n                    }\n                }\n                if (key === keys.ENTER) {\n                    this._change();\n                }\n            },\n\n            _selectNearestSegment: function() {\n                var selection = caret(this.element[0]);\n                var start = selection[0];\n                for (var i = start, j = start - 1; i < this._format.length || j >= 0; i++ , j--) {\n                    if (i < this._format.length && knownSymbols.indexOf(this._format[i]) !== -1) {\n                        this._selectSegment(this._format[i]);\n                        return;\n                    }\n                    if (j >= 0 && knownSymbols.indexOf(this._format[j]) !== -1) {\n                        this._selectSegment(this._format[j]);\n                        return;\n                    }\n                }\n            },\n\n            _selectSegment: function(symbol) {\n                var begin = -1, end = 0;\n                for (var i = 0; i < this._format.length; i++) {\n                    if (this._format[i] === symbol) {\n                        end = i + 1;\n                        if (begin === -1) {\n                            begin = i;\n                        }\n                    }\n                }\n                if (begin < 0) {\n                    begin = 0;\n                }\n                caret(this.element, begin, end);\n            }\n\n        });\n\n        kendo.cssProperties.registerPrefix(\"DateInput\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"DateInput\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(DateInput);\n\n        var customDateTime = function(initDate, initFormat, initCulture, initMessages) {\n\n            var value = null;\n            var year = true, month = true, date = true, hours = true, minutes = true, seconds = true, milliseconds = true;\n            var typedMonthPart = \"\";\n            var typedDayPeriodPart = \"\";\n            var placeholders = {};\n\n            //TODO: rewrite pad method\n            var zeros = [\"\", \"0\", \"00\", \"000\", \"0000\"];\n            function pad(number, digits, end) {\n                number = number + \"\";\n                digits = digits || 2;\n                end = digits - number.length;\n\n                if (end) {\n                    return zeros[digits].substring(0, end) + number;\n                }\n\n                return number;\n            }\n            var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|\"[^\"]*\"|'[^']*'/g;\n            var months = null, calendar = null, days = null, returnsFormat = false;\n            var matcher = function(match) {\n                var mins, sign;\n                var result;\n\n                switch (match) {\n                    case (\"d\"): result = date ? value.getDate() : placeholders.day; break;\n                    case (\"dd\"): result = date ? pad(value.getDate()) : placeholders.day; break;\n                    case (\"ddd\"): result = date && month && year ? days.namesAbbr[value.getDay()] : placeholders.weekday; break;\n                    case (\"dddd\"): result = date && month && year ? days.names[value.getDay()] : placeholders.weekday; break;\n\n                    case (\"M\"): result = month ? value.getMonth() + 1 : placeholders.month; break;\n                    case (\"MM\"): result = month ? pad(value.getMonth() + 1) : placeholders.month; break;\n                    case (\"MMM\"): result = month ? months.namesAbbr[value.getMonth()] : placeholders.month; break;\n                    case (\"MMMM\"): result = month ? months.names[value.getMonth()] : placeholders.month; break;\n\n                    case (\"yy\"): result = year ? pad(value.getFullYear() % 100) : placeholders.year; break;\n                    case (\"yyyy\"): result = year ? pad(value.getFullYear(), 4) : placeholders.year; break;\n\n                    case (\"h\"): result = hours ? value.getHours() % 12 || 12 : placeholders.hour; break;\n                    case (\"hh\"): result = hours ? pad(value.getHours() % 12 || 12) : placeholders.hour; break;\n                    case (\"H\"): result = hours ? value.getHours() : placeholders.hour; break;\n                    case (\"HH\"): result = hours ? pad(value.getHours()) : placeholders.hour; break;\n\n                    case (\"m\"): result = minutes ? value.getMinutes() : placeholders.minute; break;\n                    case (\"mm\"): result = minutes ? pad(value.getMinutes()) : placeholders.minute; break;\n                    case (\"s\"): result = seconds ? value.getSeconds() : placeholders.second; break;\n                    case (\"ss\"): result = seconds ? pad(value.getSeconds()) : placeholders.second; break;\n                    case (\"f\"): result = milliseconds ? Math.floor(value.getMilliseconds() / 100) : milliseconds; break;\n                    case (\"ff\"):\n                        result = value.getMilliseconds();\n                        if (result > 99) {\n                            result = Math.floor(result / 10);\n                        }\n                        result = milliseconds ? pad(result) : match;\n                        break;\n                    case (\"fff\"): result = milliseconds ? pad(value.getMilliseconds(), 3) : match; break;\n                    case (\"tt\"): result = hours ? (value.getHours() < 12 ? calendar.AM[0] : calendar.PM[0]) : placeholders.dayperiod; break;\n                    case (\"zzz\"):\n                        mins = value.getTimezoneOffset();\n                        sign = mins < 0;\n                        result = Math.abs(mins / 60).toString().split(\".\")[0];\n                        mins = Math.abs(mins) - (result * 60);\n                        result = (sign ? \"+\" : \"-\") + pad(result);\n                        result += \":\" + pad(mins);\n                        break;\n                    case (\"z\"):\n                    case (\"zz\"):\n                        result = value.getTimezoneOffset() / 60;\n                        sign = result < 0;\n                        result = Math.abs(result).toString().split(\".\")[0];\n                        result = (sign ? \"+\" : \"-\") + (match === \"zz\" ? pad(result) : result);\n                        break;\n                }\n                result = (result !== undefined$1 ? result : match.slice(1, match.length - 1));\n\n                if (returnsFormat) {\n                    result = \"\" + result;\n                    var formatResult = \"\";\n                    if (match == \"ddd\") { match = \"EEE\"; }\n                    if (match == \"dddd\") { match = \"EEEE\"; }\n                    for (var i = 0; i < result.length; i++) {\n                        formatResult += match[0];\n                    }\n                    return formatResult;\n                } else {\n                    return result;\n                }\n            };\n\n            function generateMatcher(retFormat) {\n                returnsFormat = retFormat;\n                return matcher;\n            }\n\n            function setExisting(symbol, val) {\n                switch (symbol) {\n                    case \"y\": year = val; break;\n                    case \"M\": month = val;\n                        if (!val) {\n                            value.setMonth(0);\n                            typedMonthPart = \"\";\n                        }\n                        break;\n                    case \"d\": date = val; break;\n                    case \"H\":\n                    case \"h\": hours = val;\n                        if (!val) {\n                            typedDayPeriodPart = \"\";\n                        }\n                        break;\n                    case \"m\": minutes = val; break;\n                    case \"s\": seconds = val; break;\n                    default: return;\n                }\n            }\n\n            this.setValue = function(val) {\n                date = val;\n            };\n\n            this.getValue = function() {\n                return date;\n            };\n\n            this.modifyPart = function(symbol, offset) {\n                var newValue = new Date((value && value.getTime) ? value.getTime() : value);\n                switch (symbol) {\n                    case \"y\": newValue.setFullYear(newValue.getFullYear() + offset); break;\n                    case \"M\":\n                        var newMonth = newValue.getMonth() + offset;\n                        newValue.setMonth(newMonth);\n                        if (newValue.getMonth() % 12 !== (newMonth + 12) % 12) {\n                            //handle case when new month does not have such date\n                            newValue.setDate(1);\n                            newValue.setMonth(newMonth);\n                        }\n                        break;\n                    case \"d\":\n                    case \"E\": newValue.setDate(newValue.getDate() + offset); break;\n                    case \"H\":\n                    case \"h\": newValue.setHours(newValue.getHours() + offset); break;\n                    case \"m\": newValue.setMinutes(newValue.getMinutes() + offset); break;\n                    case \"s\": newValue.setSeconds(newValue.getSeconds() + offset); break;\n                    case \"t\": newValue.setHours((newValue.getHours() + 12) % 24); break;\n                    default: break;\n                }\n                if (newValue.getFullYear() > 0) {\n                    setExisting(symbol, true);\n                    value = newValue;\n                }\n            };\n\n            this.parsePart = function(symbol, currentChar) {\n                if (!currentChar) {\n                    setExisting(symbol, false);\n                    return true;\n                }\n                var newValue = new Date((value && value.getTime) ? value.getTime() : value);\n                var lastDateOfMonth = new Date(newValue.getFullYear(), newValue.getMonth() + 1, 0).getDate();\n                var newHours;\n                switch (symbol) {\n                    case \"d\":\n                        var newDate = (date ? newValue.getDate() * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newDate)) { return; }\n                        while (newDate > lastDateOfMonth) {\n                            newDate = parseInt(newDate.toString().slice(1), 10);\n                        }\n                        if (newDate < 1) {\n                            date = false;\n                        } else {\n                            newValue.setDate(newDate);\n                            if (newValue.getMonth() !== value.getMonth()) {\n                                return;\n                            }\n                            date = true;\n                        }\n                        break;\n                    case \"M\":\n                        var newMonth = (month ? (newValue.getMonth() + 1) * 10 : 0) + parseInt(currentChar, 10);\n                        if (!isNaN(newMonth)) {\n                            while (newMonth > 12) {\n                                newMonth = parseInt(newMonth.toString().slice(1), 10);\n                            }\n                            if (newMonth < 1) {\n                                month = false;\n                            } else {\n                                newValue.setMonth(newMonth - 1);\n                                if (newValue.getMonth() !== newMonth - 1) {\n                                    newValue.setDate(1);\n                                    newValue.setMonth(newMonth - 1);\n                                }\n                                month = true;\n                            }\n                        }\n                        else {\n                            var monthNames = calendar.months.names;\n                            typedMonthPart += currentChar.toLowerCase();\n\n                            while (typedMonthPart.length > 0) {\n                                for (var i = 0; i < monthNames.length; i++) {\n                                    if (monthNames[i].toLowerCase().indexOf(typedMonthPart) === 0) {\n                                        newValue.setMonth(i);\n                                        month = true;\n                                        value = newValue;\n                                        return true;\n                                    }\n                                }\n                                typedMonthPart = typedMonthPart.substring(1, typedMonthPart.length);\n                            }\n                            return false;\n                        }\n                        break;\n                    case \"y\":\n                        var newYear = (year ? (newValue.getFullYear()) * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newYear)) {return;}\n                        while (newYear > 9999) {\n                            newYear = parseInt(newYear.toString().slice(1), 10);\n                        }\n                        if (newYear < 1) {\n                            year = false;\n                        } else {\n                            newValue.setFullYear(newYear);\n                            year = true;\n                        }\n                        break;\n                    case \"h\":\n                        newHours = (hours ? (newValue.getHours() % 12 || 12) * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newHours)) { return; }\n                        while (newHours > 12) {\n                            newHours = parseInt(newHours.toString().slice(1), 10);\n                        }\n                        newValue.setHours(Math.floor(newValue.getHours() / 12) * 12 + newHours % 12);\n                        hours = true;\n                        break;\n                    case \"H\":\n                        newHours = (hours ? (newValue.getHours()) * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newHours)) { return; }\n                        while (newHours > 23) {\n                            newHours = parseInt(newHours.toString().slice(1), 10);\n                        }\n                        newValue.setHours(newHours);\n                        hours = true;\n                        break;\n                    case \"m\":\n                        var newMinutes = (minutes ? (newValue.getMinutes()) * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newMinutes)) { return; }\n                        while (newMinutes > 59) {\n                            newMinutes = parseInt(newMinutes.toString().slice(1), 10);\n                        }\n                        newValue.setMinutes(newMinutes);\n                        minutes = true;\n                        break;\n                    case \"s\":\n                        var newSeconds = (seconds ? (newValue.getSeconds()) * 10 : 0) + parseInt(currentChar, 10);\n                        if (isNaN(newSeconds)) { return; }\n                        while (newSeconds > 59) {\n                            newSeconds = parseInt(newSeconds.toString().slice(1), 10);\n                        }\n                        newValue.setSeconds(newSeconds);\n                        seconds = true;\n                        break;\n                    case \"t\":\n                        if (hours) {\n                            typedDayPeriodPart += currentChar.toLowerCase();\n                            while (typedDayPeriodPart.length > 0) {\n                                if (calendar.AM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() >= 12 ||\n                                    calendar.PM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() < 12) {\n                                    newValue.setHours((newValue.getHours() + 12) % 24);\n                                    value = newValue;\n                                    return true;\n                                }\n                                typedDayPeriodPart = typedDayPeriodPart.substring(1, typedDayPeriodPart.length);\n                            }\n                            return false;\n                        }\n                        break;\n                    default: break;\n                }\n                value = newValue;\n                return true;\n            };\n\n            this.toPair = function(format, culture , messages) {\n                if (!format) {\n                    return [\"\", \"\"];\n                }\n                culture = kendo.getCulture(culture);\n                calendar = culture.calendars.standard;\n                format = calendar.patterns[format] || format;\n                days = calendar.days;\n                months = calendar.months;\n                placeholders = messages;\n                return [\n                    format.replace(dateFormatRegExp, generateMatcher(false)),\n                    format.replace(dateFormatRegExp, generateMatcher(true))\n                ];\n            };\n\n            this.getDateObject = function() {\n                return (year && month && date && hours && minutes && seconds && milliseconds) ?\n                    new Date(value.getTime()) : null;\n            };\n\n            if (!initDate) {\n                value = new Date();\n                var sampleFormat = this.toPair(initFormat, initCulture, initMessages)[1];\n                for (var i = 0; i < sampleFormat.length; i++) {\n                    setExisting(sampleFormat[i], false);\n                }\n            } else {\n                value = new Date(initDate.getTime());\n            }\n        };\n\n        function approximateStringMatching(oldText, oldFormat, newText, caret) {\n            var oldTextSeparator = oldText[caret + oldText.length - newText.length];\n            oldText = oldText.substring(0, caret + oldText.length - newText.length);\n            newText = newText.substring(0, caret);\n            var diff = [];\n            var i;\n            //handle typing single character over the same selection\n            if (oldText === newText && caret > 0) {\n                diff.push([oldFormat[caret - 1], newText[caret - 1]]);\n                return diff;\n            }\n            if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {\n                //handle delete/backspace\n                var deletedSymbol = \"\";\n                for (i = newText.length; i < oldText.length; i++) {\n                    if (oldFormat[i] !== deletedSymbol && knownSymbols.indexOf(oldFormat[i]) >= 0) {\n                        deletedSymbol = oldFormat[i];\n                        diff.push([deletedSymbol, \"\"]);\n                    }\n                }\n                return diff;\n            }\n\n            //handle entering space or separator, for nagivation to next item\n            if (newText[newText.length - 1] === \" \" || newText[newText.length - 1] === oldTextSeparator) {\n                return [[oldFormat[caret - 1], \" \"]];\n            }\n\n            //handle inserting text (new text is longer than previous)\n            //handle typing over literal as well\n            if (newText.indexOf(oldText) === 0 || knownSymbols.indexOf(oldFormat[caret - 1]) === -1) {\n                var symbol = oldFormat[0];\n                for (i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {\n                    if (knownSymbols.indexOf(oldFormat[i]) >= 0) {\n                        symbol = oldFormat[i];\n                        break;\n                    }\n                }\n                return [[symbol, newText[caret - 1]]];\n            }\n            //handle typing over correctly selected part\n            return [[oldFormat[caret - 1], newText[caret - 1]]];\n    }\n\n    })(window.kendo.jQuery);\n\n}));\n"]}