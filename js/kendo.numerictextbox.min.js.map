{"version":3,"sources":["raw-js/kendo.numerictextbox.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendonumerictextbox","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","caret","keys","ui","Widget","activeElement","_activeElement","extractFormat","_extractFormat","parse","parseFloat","placeholderSupported","support","placeholder","getCulture","CHANGE","DISABLED","READONLY","INPUT","SPIN","ns","HOVEREVENTS","FOCUSED","HOVER","FOCUS","POINT","SELECTED","STATEDISABLED","STATEINVALID","ARIA_DISABLED","INTEGER_REGEXP","NULL","isPlainObject","extend","NumericTextBox","init","element","min","max","step","value","inputType","that","isStep","fn","call","on","_focusout","bind","attr","_parse","_initialOptions","_reset","_wrapper","_arrows","_validation","_input","mobileOS","_text","browser","edge","one","_focusin","selectValue","_click","factor","format","val","enable","is","parents","readonly","_label","_ariaLabel","_applyCssClasses","_validationIcon","floatingLabel","refresh","notify","name","decimals","restrictDecimals","round","culture","spinners","selectOnFocus","upArrowText","downArrowText","label","size","fillMode","rounded","events","_editable","disable","text","add","off","_toggleText","_upArrowEventHandler","unbind","_downArrowEventHandler","_inputLabel","addClass","removeClass","_toggleHover","prop","e","preventDefault","_spin","_upArrow","_downArrow","_keydown","_keyup","_paste","_inputHandler","focus","setOptions","_placeholder","destroy","_arrowsWrap","remove","_floatingLabelContainer","unwrap","Boolean","_value","_form","_resetHandler","_option","_adjust","_update","_old","arrows","_release","clearTimeout","_spinning","siblings","buttonHtml","wrapAll","parent","toggle","eq","UserEvents","release","iconClass","_blur","_change","_focusing","setTimeout","result","groupRegExp","extractRegExp","input","target","idx","substring","_format","group","caretPosition","RegExp","exec","replace","length","indexOf","select","_getFactorValue","_typing","trigger","_culture","_removeInvalidState","numberFormat","toLowerCase","currency","percent","show","accessKey","find","first","setAttribute","type","title","tabIndex","style","cssText","className","role","autocomplete","key","keyCode","NUMPAD_DOT","_numPadDot","DOWN","UP","ENTER","TAB","_cachedCaret","_step","decimalSeparator","minInvalid","charAt","_isPasted","toString","_numericRegex","test","_oldText","_blinkInvalidState","_addInvalidState","_invalidStateTimeout","precision","fractionRule","_separator","_floatRegExp","option","timeout","originalValue","toFixed","currentTarget","toggleClass","removeAttr","_round","truncate","isNotNull","floating","labelText","id","content","wrap","FloatingLabel","isFunction","guid","DOMElement","hide","width","css","formId","form","closest","direction","dir","renderButton","shape","parts","split","join","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","plugin"],"mappings":"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","file":"kendo.numerictextbox.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.userevents.js'), require('kendo.floatinglabel.js'), require('kendo.html.button.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.userevents', 'kendo.floatinglabel', 'kendo.html.button', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendonumerictextbox = global.kendonumerictextbox || {}, global.kendonumerictextbox.js = factory()));\n})(this, (function () {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    var __meta__ = {\n        id: \"numerictextbox\",\n        name: \"NumericTextBox\",\n        category: \"web\",\n        description: \"The NumericTextBox widget can format and display numeric, percentage or currency textbox.\",\n        depends: [ \"core\", \"userevents\", \"floatinglabel\", \"html.button\", \"icons\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            caret = kendo.caret,\n            keys = kendo.keys,\n            html = kendo.html,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            activeElement = kendo._activeElement,\n            extractFormat = kendo._extractFormat,\n            parse = kendo.parseFloat,\n            placeholderSupported = kendo.support.placeholder,\n            getCulture = kendo.getCulture,\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            INPUT = \"k-input-inner\",\n            SPIN = \"spin\",\n            ns = \".kendoNumericTextBox\",\n            TOUCHEND = \"touchend\",\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = \"mouseenter\" + ns + \" \" + MOUSELEAVE,\n            FOCUSED = \"k-focus\",\n            HOVER = \"k-hover\",\n            FOCUS = \"focus\",\n            POINT = \".\",\n            SYMBOL = \"symbol\",\n            CLASS_ICON = \"k-icon\",\n            LABELCLASSES = \"k-label k-input-label\",\n            FLOATINGLABELCLASS = \"k-floating-label\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            STATEINVALID = \"k-invalid\",\n            ARIA_DISABLED = \"aria-disabled\",\n            INTEGER_REGEXP = /^(-)?(\\d*)$/,\n            NULL = null,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend;\n\n        var NumericTextBox = Widget.extend({\n             init: function(element, options) {\n                 var that = this,\n                 isStep = options && options.step !== undefined$1,\n                 min, max, step, value, disabled;\n                 var inputType;\n\n                 Widget.fn.init.call(that, element, options);\n\n                 options = that.options;\n                 element = that.element\n                               .on(\"focusout\" + ns, that._focusout.bind(that))\n                               .attr(\"role\", \"spinbutton\");\n\n                 options.placeholder = options.placeholder || element.attr(\"placeholder\");\n\n                 min = that.min(element.attr(\"min\"));\n                 max = that.max(element.attr(\"max\"));\n                 step = that._parse(element.attr(\"step\"));\n\n                 if (options.min === NULL && min !== NULL) {\n                     options.min = min;\n                 }\n\n                 if (options.max === NULL && max !== NULL) {\n                     options.max = max;\n                 }\n\n                 if (!isStep && step !== NULL) {\n                     options.step = step;\n                 }\n\n                 that._initialOptions = extend({}, options);\n\n                 inputType = element.attr(\"type\");\n\n                 that._reset();\n                 that._wrapper();\n                 that._arrows();\n                 that._validation();\n                 that._input();\n\n                 if (!kendo.support.mobileOS) {\n                     that._text.on(FOCUS + ns, that._click.bind(that));\n                 } else {\n                     that._text.on(TOUCHEND + ns + \" \" + FOCUS + ns, function() {\n                         if (kendo.support.browser.edge) {\n                             that._text.one(FOCUS + ns, function() {\n                                that._focusin();\n                             });\n                         } else {\n                            that._focusin();\n                         }\n                         that.selectValue();\n                     });\n                 }\n\n                 element.attr(\"aria-valuemin\", options.min !== NULL ? options.min * options.factor : options.min)\n                        .attr(\"aria-valuemax\", options.max !== NULL ? options.max * options.factor : options.max);\n\n                 options.format = extractFormat(options.format);\n\n                 value = options.value;\n\n                 if (value == NULL) {\n                     if (inputType == \"number\") {\n                        value = parseFloat(element.val());\n                     } else {\n                         value = element.val();\n                     }\n                 }\n\n                 that.value(value);\n\n                 disabled = !options.enable || element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n                 if (disabled) {\n                     that.enable(false);\n                 } else {\n                     that.readonly(element.is(\"[readonly]\"));\n                 }\n\n                 that._label();\n                 that._ariaLabel(that._text);\n                 that._applyCssClasses();\n\n                 addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._text, suffixInsertAfter: that._validationIcon });\n                 if (that.floatingLabel) {\n                     that.floatingLabel.refresh();\n                 }\n\n                 kendo.notify(that);\n             },\n\n            options: {\n                name: \"NumericTextBox\",\n                decimals: NULL,\n                enable: true,\n                restrictDecimals: false,\n                min: NULL,\n                max: NULL,\n                value: NULL,\n                step: 1,\n                round: true,\n                culture: \"\",\n                format: \"n\",\n                spinners: true,\n                placeholder: \"\",\n                selectOnFocus: false,\n                factor: 1,\n                upArrowText: \"Increase value\",\n                downArrowText: \"Decrease value\",\n                label: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                }\n            },\n            events: [\n                CHANGE,\n                SPIN\n            ],\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    text = that._text.add(element),\n                    wrapper = that.wrapper.off(HOVEREVENTS);\n\n                that._toggleText(true);\n\n                that._upArrowEventHandler.unbind(\"press\");\n                that._downArrowEventHandler.unbind(\"press\");\n                element\n                    .off(\"keydown\" + ns)\n                    .off(\"keyup\" + ns)\n                    .off(\"input\" + ns)\n                    .off(\"paste\" + ns);\n\n                if (that._inputLabel) {\n                    that._inputLabel.off(ns);\n                }\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    text.prop(DISABLED, false)\n                        .prop(READONLY, false)\n                        .attr(ARIA_DISABLED, false);\n\n                    that._upArrowEventHandler.bind(\"press\", function(e) {\n                        e.preventDefault();\n                        that._spin(1);\n                        that._upArrow.addClass(SELECTED);\n                    });\n\n                    that._downArrowEventHandler.bind(\"press\", function(e) {\n                        e.preventDefault();\n                        that._spin(-1);\n                        that._downArrow.addClass(SELECTED);\n                    });\n\n                    that.element\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keyup\" + ns, that._keyup.bind(that))\n                        .on(\"paste\" + ns, that._paste.bind(that))\n                        .on(\"input\" + ns, that._inputHandler.bind(that));\n\n                    if (that._inputLabel) {\n                        that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                    }\n\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    text.attr(DISABLED, disable)\n                        .attr(READONLY, readonly)\n                        .attr(ARIA_DISABLED, disable);\n                }\n            },\n\n            readonly: function(readonly) {\n                var that = this;\n\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                var that = this;\n\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this;\n                Widget.fn.setOptions.call(that, options);\n\n                that._text.prop(\"placeholder\", that.options.placeholder);\n                that._placeholder(that.options.placeholder);\n                that.element.attr({\n                    \"aria-valuemin\": that.options.min !== NULL ? that.options.min * that.options.factor : that.options.min,\n                    \"aria-valuemax\": that.options.max !== NULL ? that.options.max * that.options.factor : that.options.max\n                });\n\n                that.options.format = extractFormat(that.options.format);\n                that._upArrowEventHandler.destroy();\n                that._upArrowEventHandler = null;\n                that._downArrowEventHandler.destroy();\n                that._downArrowEventHandler = null;\n                that._arrowsWrap.remove();\n                that._arrows();\n\n                that._applyCssClasses();\n\n                if (that._inputLabel) {\n                    that._inputLabel.off(ns);\n                    that._inputLabel.remove();\n\n                    if (that.floatingLabel) {\n                        that.floatingLabel.destroy();\n                        if (that._floatingLabelContainer) {\n                            that.wrapper.unwrap();\n                        }\n                    }\n                }\n\n                that._label();\n\n                if (options.enable !== undefined$1 || options.readonly !== undefined$1) {\n                    that._editable({\n                        readonly: options.readonly,\n                        disable: !options.enable\n                    });\n                } else {\n                    that._editable({\n                        readonly: that.element.attr(\"readonly\") !== undefined$1 ? Boolean(that.element.attr(\"readonly\")) : that.options.readonly,\n                        disable: that.element.attr(\"disabled\") !== undefined$1 ? Boolean(that.element.attr(\"disabled\")) : !that.options.enable\n                    });\n                }\n\n                if (options.value !== undefined$1) {\n                    that.value(options.value);\n                } else if (that._value !== undefined$1) {\n                    that.value(that._value);\n                }\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._inputLabel) {\n                    that._inputLabel.off(ns);\n\n                    if (that.floatingLabel) {\n                        that.floatingLabel.destroy();\n                    }\n                }\n\n                that.element\n                    .add(that._text)\n                    .add(that._upArrow)\n                    .add(that._downArrow)\n                    .off(ns);\n\n                that._upArrowEventHandler.destroy();\n                that._downArrowEventHandler.destroy();\n\n                if (that._form) {\n                    that._form.off(\"reset\", that._resetHandler);\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            min: function(value) {\n                return this._option(\"min\", value);\n            },\n\n            max: function(value) {\n                return this._option(\"max\", value);\n            },\n\n            step: function(value) {\n                return this._option(\"step\", value);\n            },\n\n            value: function(value) {\n                var that = this, adjusted;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                value = that._parse(value);\n                adjusted = that._adjust(value);\n\n                if (value !== adjusted) {\n                    value = NULL;\n                }\n\n                that._update(value);\n                that._old = that._value;\n\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n            },\n\n            focus: function() {\n                this._focusin();\n            },\n\n            _adjust: function(value) {\n                var that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max;\n\n                if (value === NULL) {\n                    return value;\n                }\n\n                if (min !== NULL && value < min) {\n                    value = min;\n                } else if (max !== NULL && value > max) {\n                    value = max;\n                }\n\n                return value;\n            },\n\n            _arrows: function() {\n                var that = this,\n                arrows,\n                _release = function() {\n                    clearTimeout( that._spinning );\n                    arrows.removeClass(SELECTED);\n                },\n                options = that.options,\n                spinners = options.spinners,\n                element = that.element;\n\n                arrows = element.siblings(\".k-icon-button\");\n\n                if (!arrows[0]) {\n                    arrows = $(buttonHtml(\"increase\", options.upArrowText, options) + buttonHtml(\"decrease\", options.downArrowText, options))\n                            .appendTo(that.wrapper);\n\n                    that._arrowsWrap = arrows.wrapAll('<span class=\"k-input-spinner k-spin-button\"/>').parent();\n                }\n\n                if (!spinners) {\n                    arrows.parent().toggle(spinners);\n                }\n\n                that._upArrow = arrows.eq(0);\n                that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });\n                that._downArrow = arrows.eq(1);\n                that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });\n            },\n\n            _validation: function() {\n                var that = this;\n                var element = that.element;\n\n                that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n            },\n\n            _blur: function() {\n                var that = this;\n\n                that._toggleText(true);\n\n                that._change(that.element.val());\n            },\n\n            _click: function(e) {\n                var that = this;\n\n                clearTimeout(that._focusing);\n                that._focusing = setTimeout(function() {\n                    var input = e.target,\n                        idx = caret(input)[0],\n                        value = input.value.substring(0, idx),\n                        format = that._format(that.options.format),\n                        group = format[\",\"],\n                        result, groupRegExp, extractRegExp,\n                        caretPosition = 0;\n\n                    if (group) {\n                        groupRegExp = new RegExp(\"\\\\\" + group, \"g\");\n                        extractRegExp = new RegExp(\"(-)?(\" + format[SYMBOL] + \")?([\\\\d\\\\\" + group + \"]+)(\\\\\" + format[POINT] + \")?(\\\\d+)?\");\n                    }\n\n                    if (extractRegExp) {\n                        result = extractRegExp.exec(value);\n                    }\n\n                    if (result) {\n                        caretPosition = result[0].replace(groupRegExp, \"\").length;\n\n                        if (value.indexOf(\"(\") != -1 && that._value < 0) {\n                            caretPosition++;\n                        }\n                    }\n\n                    that._focusin();\n\n                    caret(that.element[0], caretPosition);\n                    that.selectValue();\n                });\n            },\n\n            selectValue: function() {\n                if (this.options.selectOnFocus) {\n                    this.element[0].select();\n                }\n            },\n\n            _getFactorValue: function(value) {\n                var that = this,\n                    factor = that.options.factor;\n\n                if (factor && factor !== 1) {\n                    value = kendo.parseFloat(value);\n                    if (value !== null) {\n                        value = value / factor;\n                    }\n                }\n\n                return value;\n            },\n\n            _change: function(value) {\n                var that = this;\n\n                value = that._getFactorValue(value);\n                that._update(value);\n                value = that._value;\n\n                if (that._old != value) {\n                    that._old = value;\n\n                    if (!that._typing) {\n                        // trigger the DOM change event so any subscriber gets notified\n                        that.element.trigger(CHANGE);\n                    }\n\n                    that.trigger(CHANGE);\n                }\n\n                that._typing = false;\n            },\n\n            _culture: function(culture) {\n                return culture || getCulture(this.options.culture);\n            },\n\n            _focusin: function() {\n                var that = this;\n                that.wrapper.addClass(FOCUSED);\n                that._toggleText(false);\n                that.element[0].focus();\n            },\n\n            _focusout: function() {\n                var that = this;\n\n                clearTimeout(that._focusing);\n                that.wrapper.removeClass(FOCUSED).removeClass(HOVER);\n                that._blur();\n                that._removeInvalidState();\n            },\n\n            _format: function(format, culture) {\n                var numberFormat = this._culture(culture).numberFormat;\n\n                format = format.toLowerCase();\n\n                if (format.indexOf(\"c\") > -1) {\n                    numberFormat = numberFormat.currency;\n                } else if (format.indexOf(\"p\") > -1) {\n                    numberFormat = numberFormat.percent;\n                }\n\n                return numberFormat;\n            },\n\n            _input: function() {\n                var that = this,\n                    options = that.options,\n                    element = that.element.addClass(INPUT).show()[0],\n                    accessKey = element.accessKey,\n                    wrapper = that.wrapper,\n                    inputs = wrapper.find(POINT + INPUT),\n                    text;\n\n                text = inputs.first();\n\n                if (text.length < 2) {\n                    text = $('<input type=\"text\"/>')\n                            .attr(kendo.attr(\"validate\"), false)\n                            .insertBefore(element);\n                }\n\n                try {\n                    element.setAttribute(\"type\", \"text\");\n                } catch (e) {\n                    element.type = \"text\";\n                }\n\n                text[0].title = element.title;\n                text[0].tabIndex = element.tabIndex;\n                text[0].style.cssText = element.style.cssText;\n                text.prop(\"placeholder\", options.placeholder);\n\n                if (accessKey) {\n                    text.attr(\"accesskey\", accessKey);\n                    element.accessKey = \"\";\n                }\n\n\n                that._text = text.addClass(element.className)\n                                 .attr({\n                                     \"role\": \"spinbutton\",\n                                     \"aria-valuemin\": options.min !== NULL ? options.min * options.factor : options.min,\n                                     \"aria-valuemax\": options.max !== NULL ? options.max * options.factor : options.max,\n                                     \"autocomplete\": \"off\"\n                                 });\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    key = e.keyCode;\n\n                if (key === keys.NUMPAD_DOT) {\n                    that._numPadDot = true;\n                }\n\n                if (key == keys.DOWN) {\n                    that._step(-1);\n                    return;\n                } else if (key == keys.UP) {\n                    that._step(1);\n                    return;\n                } else if (key == keys.ENTER) {\n                    that._change(that.element.val());\n                    return;\n                }\n\n                if (key != keys.TAB) {\n                    that._typing = true;\n                }\n                that._cachedCaret = caret(that.element);\n            },\n\n            _keyup: function() {\n                this._removeInvalidState();\n            },\n\n            _inputHandler: function() {\n                var element = this.element;\n                var value = element.val();\n                var min = this.options.min;\n                var numberFormat = this._format(this.options.format);\n                var decimalSeparator = numberFormat[POINT];\n                var minInvalid = (min !== null && min >= 0 && value.charAt(0) === \"-\");\n\n                if (this._numPadDot && decimalSeparator !== POINT) {\n                    value = value.replace(POINT, decimalSeparator);\n                    this.element.val(value);\n                    this._numPadDot = false;\n                }\n\n                if (this._isPasted && this._parse(value)) {\n                    value = this._parse(value)\n                        .toString()\n                        .replace(POINT, numberFormat[POINT]);\n                }\n\n                if (this._numericRegex(numberFormat).test(value) && !minInvalid) {\n                    this._oldText = value;\n                } else {\n                    this._blinkInvalidState();\n                    this.element.val(this._oldText);\n                    if (this._cachedCaret) {\n                        caret(element, this._cachedCaret[0]);\n                        this._cachedCaret = null;\n                    }\n                }\n\n                this._isPasted = false;\n            },\n\n            _blinkInvalidState: function() {\n                var that = this;\n\n                that._addInvalidState();\n                clearTimeout(that._invalidStateTimeout);\n                that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n            },\n\n            _addInvalidState: function() {\n                var that = this;\n\n                that.wrapper.addClass(STATEINVALID);\n                that._validationIcon.removeClass('k-hidden');\n            },\n\n            _removeInvalidState: function() {\n                var that = this;\n\n                that.wrapper.removeClass(STATEINVALID);\n                that._validationIcon.addClass('k-hidden');\n                that._invalidStateTimeout = null;\n            },\n\n            _numericRegex: function(numberFormat) {\n                var that = this;\n                var separator = numberFormat[POINT];\n                var precision = that.options.decimals;\n                var fractionRule = \"*\";\n\n                if (separator === POINT) {\n                    separator = \"\\\\\" + separator;\n                }\n\n                if (precision === NULL) {\n                    precision = numberFormat.decimals;\n                }\n\n                if (precision === 0 && that.options.restrictDecimals) {\n                    return INTEGER_REGEXP;\n                }\n\n                if (that.options.restrictDecimals) {\n                    fractionRule = \"{0,\" + precision + \"}\";\n                }\n\n                if (that._separator !== separator) {\n                    that._separator = separator;\n                    that._floatRegExp = new RegExp(\"^(-)?(((\\\\d+(\" + separator + \"\\\\d\" + fractionRule + \")?)|(\" + separator + \"\\\\d\" + fractionRule + \")))?$\");\n                }\n\n                return that._floatRegExp;\n            },\n\n            _paste: function(e) {\n                var that = this;\n                var element = e.target;\n                var value = element.value;\n                var numberFormat = that._format(that.options.format);\n\n                that._isPasted = true;\n\n               setTimeout(function() {\n                    var result = that._parse(element.value);\n\n                    if (result === NULL) {\n                        that._update(value);\n                    } else {\n                        element.value = result.toString().replace(POINT, numberFormat[POINT]);\n                        if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {\n                            value = that._getFactorValue(element.value);\n                            that._update(value);\n                        }\n                    }\n                });\n            },\n\n            _option: function(option, value) {\n                var that = this,\n                    element = that.element,\n                    options = that.options;\n\n                if (value === undefined$1) {\n                    return options[option];\n                }\n\n                value = that._parse(value);\n\n                if (!value && option === \"step\") {\n                    return;\n                }\n\n                options[option] = value;\n                element\n                    .add(that._text)\n                    .attr(\"aria-value\" + option, value);\n\n                element.attr(option, value);\n            },\n\n            _spin: function(step, timeout) {\n                var that = this;\n\n                timeout = timeout || 500;\n\n                clearTimeout( that._spinning );\n                that._spinning = setTimeout(function() {\n                    that._spin(step, 50);\n                }, timeout );\n\n                that._step(step);\n            },\n\n            _step: function(step) {\n                var that = this,\n                    element = that.element,\n                    originalValue = that._value,\n                    value = that._parse(element.val()) || 0,\n                    precision = that.options.decimals || 2;\n\n                if (activeElement() != element[0]) {\n                    that._focusin();\n                }\n\n                if (that.options.factor && value) {\n                    value = value / that.options.factor;\n                }\n\n                value = +(value + that.options.step * step).toFixed(precision);\n                value = that._adjust(value);\n                that._update(value);\n                that._typing = false;\n\n                if (originalValue !== value) {\n                    that.trigger(SPIN);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleText: function(toggle) {\n                var that = this;\n\n                that._text.toggle(toggle);\n                if (toggle) {\n                    that._text.removeAttr(\"aria-hidden\");\n                } else {\n                    that._text.attr(\"aria-hidden\", \"true\");\n                }\n                that.element.toggle(!toggle);\n            },\n\n            _parse: function(value, culture) {\n                return parse(value, this._culture(culture), this.options.format);\n            },\n\n            _round: function(value, precision) {\n                var rounder = this.options.round ? kendo._round : truncate;\n\n                return rounder(value, precision);\n            },\n\n            _update: function(value) {\n                var that = this,\n                    options = that.options,\n                    factor = options.factor,\n                    format = options.format,\n                    decimals = options.decimals,\n                    culture = that._culture(),\n                    numberFormat = that._format(format, culture),\n                    originalValue,\n                    isNotNull;\n\n                if (decimals === NULL) {\n                    decimals = numberFormat.decimals;\n                }\n\n                value = that._parse(value, culture);\n\n                isNotNull = value !== NULL;\n\n                if (isNotNull) {\n                    value = parseFloat(that._round(value, decimals), 10);\n                }\n\n                that._value = value = that._adjust(value);\n                that._placeholder(kendo.toString(value, format, culture));\n\n                if (isNotNull) {\n                    if (factor) {\n                        value = parseFloat(that._round(value * factor, decimals), 10);\n                    }\n                    value = value.toString();\n                    if (value.indexOf(\"e\") !== -1) {\n                        value = that._round(+value, decimals);\n                    }\n                    originalValue = value;\n                    value = value.replace(POINT, numberFormat[POINT]);\n                } else {\n                    value = null;\n                    originalValue = null;\n                }\n\n                that.element.val(value);\n                that._oldText = value;\n                that.element.add(that._text).attr(\"aria-valuenow\", originalValue);\n            },\n\n            _placeholder: function(value) {\n                var input = this._text;\n\n                input.val(value);\n                if (!placeholderSupported && !value) {\n                    input.val(this.options.placeholder);\n                }\n\n                input.attr(\"title\", this.element.attr(\"title\") || input.val());\n            },\n\n            _label: function() {\n                var that = this;\n                var element = that.element;\n                var options = that.options;\n                var id = element.attr(\"id\");\n                var floating;\n                var labelText;\n\n                if (options.label !== null) {\n                    floating = isPlainObject(options.label) ? options.label.floating : false;\n                    labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n                    if (floating) {\n                        that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                        that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, { widget: that });\n                    }\n\n                    if (kendo.isFunction(labelText)) {\n                        labelText = labelText.call(that);\n                    }\n\n                    if (!labelText) {\n                        labelText = \"\";\n                    }\n\n                    if (!id) {\n                        id = options.name + \"_\" + kendo.guid();\n                        element.attr(\"id\", id);\n                    }\n\n                    that._inputLabel = $(\"<label class='\" + (floating ? FLOATINGLABELCLASS : LABELCLASSES) + \"' for='\" + id + \"'>\" + labelText + \"</label>'\")[floating ? \"insertAfter\" : \"insertBefore\"](that.wrapper);\n\n                    if ((that.element.attr(\"disabled\") === undefined$1) && (that.element.attr(\"readonly\") === undefined$1)) {\n                        that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n                    }\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMElement = element[0],\n                    wrapper;\n\n                wrapper = element.parents(\".k-numerictextbox\");\n\n                if (!wrapper.is(\"span.k-numerictextbox\")) {\n                    wrapper = element.hide().wrap(\"<span/>\").parent();\n                }\n\n                wrapper[0].style.cssText = DOMElement.style.cssText;\n                DOMElement.style.width = \"\";\n                that.wrapper = wrapper.addClass(\"k-numerictextbox k-input\")\n                                      .addClass(DOMElement.className)\n                                      .removeClass('input-validation-error')\n                                      .css(\"display\", \"\");\n            },\n\n            _reset: function() {\n                var that = this,\n                    element = that.element,\n                    formId = element.attr(\"form\"),\n                    form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(element[0].value);\n                            that.max(that._initialOptions.max);\n                            that.min(that._initialOptions.min);\n                        });\n                    };\n\n                    that._form = form.on(\"reset\", that._resetHandler);\n                }\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"NumericTextBox\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"NumericTextBox\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        function buttonHtml(direction, text, options) {\n            var className = direction === \"increase\" ? \"caret-alt-up\" : \"caret-alt-down\";\n            var dir = direction === \"increase\" ? \"increase\" : \"decrease\";\n\n            return html.renderButton('<button role=\"button\" tabindex=\"-1\" unselectable=\"on\" class=\"k-spinner-' + dir + '\" aria-label=\"' + text + '\" title=\"' + text + '\"></button>', extend({}, options, {\n                icon: className,\n                shape: null,\n                rounded: null\n            }));\n        }\n\n        function truncate(value, precision) {\n            var parts = parseFloat(value, 10).toString().split(POINT);\n\n            if (parts[1]) {\n                parts[1] = parts[1].substring(0, precision);\n            }\n\n            return parts.join(POINT);\n\n        }\n\n        ui.plugin(NumericTextBox);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}