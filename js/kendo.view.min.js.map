{"version":3,"sources":["raw-js/kendo.view.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoview","js","this","$","undefined$1","kendo","window","attr","ui","attrValue","Observable","directiveSelector","Widget","roleSelector","INIT","TRANSITION_START","TRANSITION_END","SHOW","HIDE","sizzleErrorRegExp","bodyRegExp","SHOW_START","SAME_VIEW_REQUESTED","VIEW_SHOW","VIEW_TYPE_DETERMINED","AFTER","classNames","View","extend","init","content","options","that","id","guid","fn","call","renderOnInit","_createElement","wrapInSections","_renderSections","tagName","model","_wrap","wrap","_evalTemplate","evalTemplate","_useWithBlock","useWithBlock","_fragments","bind","name","detachOnHide","detachOnDestroy","render","container","notInitialized","element","append","trigger","_eachFragment","clone","ViewClone","triggerBeforeShow","triggerBeforeHide","showStart","css","view","showEnd","hideEnd","hide","beforeTransition","type","afterTransition","detach","destroy","unbind","remove","purge","add","wrapper","off","fragments","methodName","placeholder","document","getElementById","html","e","test","message","replace","template","contents","result","contains","replaceWith","wrapAll","parent","_wrapper","_createContent","_createHeader","_createFooter","is","ns","addClass","contentSelector","children","filter","child","contentElement","header","footer","Class","transition","noop","Layout","containers","selector","_createContainer","showIn","show","root","find","length","Error","ViewContainer","Fragment","attach","transitionRegExp","history","running","after","end","previous","locationID","current","back","theTransition","transitionData","matches","match","direction","reverse","parseTransition","effect","stop","pop","push","effects","enabled","fx","setReverse","run","then","ViewEngine","views","sandbox","_hideViews","rootView","first","layouts","viewContainer","params","events","showView","url","RegExp","remoteViewURLPrefix","_findViewElement","widgetInstance","reload","remote","_createView","urlPath","split","$1","innerHTML","wrapInner","_locate","selectors","indexOf","charAt","_findViewElementById","_createSpaView","_createMobileView","initWidget","defaultTransition","loader","getLayout","getLayoutProxy","modelScope","roles","viewOptions","jQuery"],"mappings":"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","file":"kendo.view.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.binder.js'), require('kendo.fx.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.binder', 'kendo.fx'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoview = global.kendoview || {}, global.kendoview.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"view\",\n        name: \"View\",\n        category: \"framework\",\n        description: \"The View class instantiates and handles the events of a certain screen from the application.\",\n        depends: [ \"core\", \"binder\", \"fx\" ],\n        hidden: false\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            attr = kendo.attr,\n            ui = kendo.ui,\n            attrValue = kendo.attrValue,\n            directiveSelector = kendo.directiveSelector,\n            Observable = kendo.Observable,\n            Widget = kendo.ui.Widget,\n            roleSelector = kendo.roleSelector,\n\n            SCRIPT = \"SCRIPT\",\n            INIT = \"init\",\n            TRANSITION_START = \"transitionStart\",\n            TRANSITION_END = \"transitionEnd\",\n            SHOW = \"show\",\n            HIDE = \"hide\",\n            ATTACH = \"attach\",\n            DETACH = \"detach\",\n            sizzleErrorRegExp = /unrecognized expression/;\n\n        var bodyRegExp = /<body[^>]*>(([\\u000a\\u000d\\u2028\\u2029]|.)*)<\\/body>/i;\n        var LOAD_START = \"loadStart\";\n        var LOAD_COMPLETE = \"loadComplete\";\n        var SHOW_START = \"showStart\";\n        var SAME_VIEW_REQUESTED = \"sameViewRequested\";\n        var VIEW_SHOW = \"viewShow\";\n        var VIEW_TYPE_DETERMINED = \"viewTypeDetermined\";\n        var AFTER = \"after\";\n        var classNames = {\n            content: \"k-content\",\n            view: \"k-view\",\n            stretchedView: \"k-stretched-view\",\n            widget: \"k-widget\",\n            header: \"k-header\",\n            footer: \"k-footer\"\n        };\n\n        var View = kendo.ui.Widget.extend({\n            init: function(content, options) {\n                var that = this;\n                options = options || {};\n                that.id = kendo.guid();\n\n                Observable.fn.init.call(that);\n                this.options = $.extend({}, this.options, options);\n\n                that.content = content;\n\n                if (that.options.renderOnInit) {\n                    Widget.fn.init.call(that, that._createElement(), options);\n                }\n\n                if (that.options.wrapInSections) {\n                    that._renderSections();\n                }\n\n                that.tagName = options.tagName || \"div\";\n                that.model = options.model;\n                that._wrap = options.wrap !== false;\n                this._evalTemplate = options.evalTemplate || false;\n                this._useWithBlock = options.useWithBlock;\n                that._fragments = {};\n\n                that.bind([ INIT, SHOW, HIDE, TRANSITION_START, TRANSITION_END ], options);\n            },\n\n            options: {\n                name: \"View\",\n                renderOnInit: false,\n                wrapInSections: false,\n                detachOnHide: true,\n                detachOnDestroy: true\n            },\n\n            render: function(container) {\n                var that = this,\n                    notInitialized = !that.element;\n\n                // The order below matters - kendo.bind should happen when the element is in the DOM, and show should be triggered after init.\n\n                if (notInitialized) {\n                    that.element = that._createElement();\n                }\n\n                if (container) {\n                    $(container).append(that.element);\n                }\n\n                if (notInitialized) {\n                    kendo.bind(that.element, that.model);\n                    that.trigger(INIT);\n                }\n\n                if (container) {\n                    that._eachFragment(ATTACH);\n                    that.trigger(SHOW);\n                }\n\n                return that.element;\n            },\n\n            clone: function() {\n                return new ViewClone(this);\n            },\n\n            triggerBeforeShow: function() {\n                return true;\n            },\n\n            triggerBeforeHide: function() {\n                return true;\n            },\n\n            showStart: function() {\n                var that = this;\n                var element = that.render();\n\n                if (element) {\n                    element.css(\"display\", \"\");\n                }\n\n                this.trigger(SHOW_START, { view: this });\n            },\n\n            showEnd: function() {\n            },\n\n            hideEnd: function() {\n                this.hide();\n            },\n\n            beforeTransition: function(type) {\n                this.trigger(TRANSITION_START, { type: type });\n            },\n\n            afterTransition: function(type) {\n                this.trigger(TRANSITION_END, { type: type });\n            },\n\n            hide: function() {\n                if (this.options.detachOnHide) {\n                    this._eachFragment(DETACH);\n                    $(this.element).detach();\n                }\n\n                this.trigger(HIDE);\n            },\n\n            destroy: function() {\n                var that = this;\n                var element = that.element;\n\n                if (element) {\n                    Widget.fn.destroy.call(that);\n\n                    kendo.unbind(element);\n                    kendo.destroy(element);\n\n                    if (that.options.detachOnDestroy) {\n                        element.remove();\n                    }\n                }\n            },\n\n            // ported from mobile view\n            purge: function() {\n                var that = this;\n\n                that.destroy();\n                $(that.element).add(that.content).add(that.wrapper).off().remove();\n            },\n\n            fragments: function(fragments) {\n                $.extend(this._fragments, fragments);\n            },\n\n            _eachFragment: function(methodName) {\n                for (var placeholder in this._fragments) {\n                    this._fragments[placeholder][methodName](this, placeholder);\n                }\n            },\n\n            _createElement: function() {\n                var that = this,\n                    wrapper = \"<\" + that.tagName + \">\",\n                    element,\n                    content;\n\n                try {\n                    content = $(document.getElementById(that.content) || that.content); // support passing id without #\n\n                    if (content[0].tagName === SCRIPT) {\n                        content = content.html();\n                    }\n                } catch (e) {\n                    if (sizzleErrorRegExp.test(e.message)) {\n                        content = that.content;\n                    }\n                }\n\n                if (typeof content === \"string\") {\n                    content = content.replace(/^\\s+|\\s+$/g, '');\n                    if (that._evalTemplate) {\n                        content = kendo.template(content, { useWithBlock: that._useWithBlock })(that.model || {});\n                    }\n\n                    element = $(wrapper).append(content);\n                    // drop the wrapper if asked - this seems like the easiest (although not very intuitive) way to avoid messing up templates with questionable content, like this one for instance:\n                    // <script id=\"my-template\">\n                    // foo\n                    // <span> Span </span>\n                    // </script>\n                    if (!that._wrap) {\n                       element = element.contents();\n                    }\n                } else {\n                    element = content;\n                    if (that._evalTemplate) {\n                        var result = $(kendo.template($(\"<div />\").append(element.clone(true)).html(), { useWithBlock: that._useWithBlock })(that.model || {}));\n\n                        // template uses DOM\n                        if ($.contains(document, element[0])) {\n                            element.replaceWith(result);\n                        }\n\n                        element = result;\n                    }\n                    if (that._wrap) {\n                        element = element.wrapAll(wrapper).parent();\n                    }\n                }\n\n                return element;\n            },\n\n            _renderSections: function() {\n                var that = this;\n\n                if (that.options.wrapInSections) {\n                    that._wrapper();\n                    that._createContent();\n                    that._createHeader();\n                    that._createFooter();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this;\n                var content = that.content;\n\n                if (content.is(roleSelector(\"view\"))) {\n                    that.wrapper = that.content;\n                } else {\n                    that.wrapper = content\n                        .wrap('<div data-' + kendo.ns + 'stretch=\"true\" data-' + kendo.ns + 'role=\"view\" data-' + kendo.ns + 'init-widgets=\"false\"></div>')\n                        .parent();\n                }\n\n                var wrapper = that.wrapper;\n\n                wrapper.attr(\"id\", that.id);\n\n                wrapper.addClass(classNames.view);\n                wrapper.addClass(classNames.widget);\n                wrapper.attr(\"role\", \"view\");\n            },\n\n            _createContent: function() {\n                var that = this;\n                var wrapper = $(that.wrapper);\n                var contentSelector = roleSelector(\"content\");\n\n                if (!wrapper.children(contentSelector)[0]) {\n                    var ccontentElements = wrapper.children().filter(function() {\n                        var child = $(this);\n                        if (!child.is(roleSelector(\"header\")) && !child.is(roleSelector(\"footer\"))) {\n                            return child;\n                        }\n                    });\n\n                    ccontentElements.wrap(\"<div \" + attr(\"role\") + '=\"content\"></div>');\n                }\n\n                // use contentElement instead of content as view.content can be a string\n                this.contentElement = wrapper.children(roleSelector(\"content\"));\n\n                this.contentElement\n                    .addClass(classNames.stretchedView)\n                    .addClass(classNames.content);\n            },\n\n            _createHeader: function() {\n                var that = this;\n                var wrapper = that.wrapper;\n\n                this.header = wrapper.children(roleSelector(\"header\")).addClass(classNames.header);\n            },\n\n            _createFooter: function() {\n                var that = this;\n                var wrapper = that.wrapper;\n\n                this.footer = wrapper.children(roleSelector(\"footer\")).addClass(classNames.footer);\n            }\n        });\n\n        var ViewClone = kendo.Class.extend({\n            init: function(view) {\n                $.extend(this, {\n                    element: view.element.clone(true),\n                    transition: view.transition,\n                    id: view.id\n                });\n\n                view.element.parent().append(this.element);\n            },\n\n            hideEnd: function() {\n                this.element.remove();\n            },\n\n            beforeTransition: $.noop,\n            afterTransition: $.noop\n        });\n\n        var Layout = View.extend({\n            init: function(content, options) {\n                View.fn.init.call(this, content, options);\n                this.containers = {};\n            },\n\n            container: function(selector) {\n                var container = this.containers[selector];\n\n                if (!container) {\n                    container = this._createContainer(selector);\n                    this.containers[selector] = container;\n                }\n\n                return container;\n            },\n\n            showIn: function(selector, view, transition) {\n                this.container(selector).show(view, transition);\n            },\n\n            _createContainer: function(selector) {\n                var root = this.render(),\n                    element = root.find(selector),\n                    container;\n\n                if (!element.length && root.is(selector)) {\n                    if (root.is(selector)) {\n                        element = root;\n                    } else {\n\n                        throw new Error(\"can't find a container with the specified \" + selector + \" selector\");\n                    }\n                }\n\n                container = new ViewContainer(element);\n\n                container.bind(\"accepted\", function(e) {\n                    e.view.render(element);\n                });\n\n                return container;\n            }\n        });\n\n        var Fragment = View.extend({\n            attach: function(view, placeholder) {\n                view.element.find(placeholder).replaceWith(this.render());\n            },\n\n            detach: function() {\n            }\n        });\n\n        var transitionRegExp = /^(\\w+)(:(\\w+))?( (\\w+))?$/;\n\n        function parseTransition(transition) {\n            if (!transition) {\n                return {};\n            }\n\n            var matches = transition.match(transitionRegExp) || [];\n\n            return {\n                type: matches[1],\n                direction: matches[3],\n                reverse: matches[5] === \"reverse\"\n            };\n        }\n\n        var ViewContainer = Observable.extend({\n            init: function(container) {\n                Observable.fn.init.call(this);\n                this.container = container;\n                this.history = [];\n                this.view = null;\n                this.running = false;\n            },\n\n            after: function() {\n                this.running = false;\n                this.trigger(\"complete\", { view: this.view });\n                this.trigger(\"after\");\n            },\n\n            end: function() {\n                this.view.showEnd();\n                this.previous.hideEnd();\n                this.after();\n            },\n\n            show: function(view, transition, locationID) {\n                if (!view.triggerBeforeShow() || (this.view && !this.view.triggerBeforeHide())) {\n                    this.trigger(\"after\");\n                    return false;\n                }\n\n                locationID = locationID || view.id;\n\n                var that = this,\n                    current = (view === that.view) ? view.clone() : that.view,\n                    history = that.history,\n                    previousEntry = history[history.length - 2] || {},\n                    back = previousEntry.id === locationID,\n                    // If explicit transition is set, it will be with highest priority\n                    // Next we will try using the history record transition or the view transition configuration\n                    theTransition = transition || ( back ? history[history.length - 1].transition : view.transition ),\n                    transitionData = parseTransition(theTransition);\n\n                if (that.running) {\n                    that.effect.stop();\n                }\n\n                if (theTransition === \"none\") {\n                    theTransition = null;\n                }\n\n                that.trigger(\"accepted\", { view: view });\n                that.view = view;\n                that.previous = current;\n                that.running = true;\n\n                if (!back) {\n                    history.push({ id: locationID, transition: theTransition });\n                } else {\n                    history.pop();\n                }\n\n                if (!current) {\n                    view.showStart();\n                    view.showEnd();\n                    that.after();\n                    return true;\n                }\n\n                if (!theTransition || !kendo.effects.enabled) {\n                    view.showStart();\n                    that.end();\n                } else {\n                    // hide the view element before init/show - prevents blinks on iPad\n                    // the replace effect will remove this class\n                    view.element.addClass(\"k-fx-hidden\");\n                    view.showStart();\n                    // do not reverse the explicit transition\n                    if (back && !transition) {\n                        transitionData.reverse = !transitionData.reverse;\n                    }\n\n                    that.effect = kendo.fx(view.element).replace(current.element, transitionData.type)\n                        .beforeTransition(function() {\n                            view.beforeTransition(\"show\");\n                            current.beforeTransition(\"hide\");\n                        })\n                        .afterTransition(function() {\n                            view.afterTransition(\"show\");\n                            current.afterTransition(\"hide\");\n                        })\n                        .direction(transitionData.direction)\n                        .setReverse(transitionData.reverse);\n\n                    that.effect.run().then(function() { that.end(); });\n                }\n\n                return true;\n            },\n\n            destroy: function() {\n                var that = this;\n                var view = that.view;\n\n                if (view && view.destroy) {\n                    view.destroy();\n                }\n            }\n        });\n\n        var ViewEngine = Observable.extend({\n            init: function(options) {\n                var that = this,\n                    views,\n                    container;\n\n                Observable.fn.init.call(that);\n                that.options = options;\n\n                $.extend(that, options);\n                that.sandbox = $(\"<div />\");\n                container = that.container;\n\n                views = that._hideViews(container);\n                that.rootView = views.first();\n                that.layouts = {};\n\n                that.viewContainer = new kendo.ViewContainer(that.container);\n\n                that.viewContainer.bind(\"accepted\", function(e) {\n                    e.view.params = that.params;\n                });\n\n                that.viewContainer.bind(\"complete\", function(e) {\n                    that.trigger(VIEW_SHOW, { view: e.view });\n                });\n\n                that.viewContainer.bind(AFTER, function() {\n                    that.trigger(AFTER);\n                });\n\n                this.bind(this.events, options);\n            },\n\n            events: [\n                SHOW_START,\n                AFTER,\n                VIEW_SHOW,\n                LOAD_START,\n                LOAD_COMPLETE,\n                SAME_VIEW_REQUESTED,\n                VIEW_TYPE_DETERMINED\n            ],\n\n            destroy: function() {\n                var that = this;\n                var viewContainer = that.viewContainer;\n\n                kendo.destroy(that.container);\n\n                for (var id in that.layouts) {\n                    this.layouts[id].destroy();\n                }\n\n                if (viewContainer) {\n                    viewContainer.destroy();\n                }\n            },\n\n            view: function() {\n                return this.viewContainer.view;\n            },\n\n            showView: function(url, transition, params) {\n                url = url.replace(new RegExp(\"^\" + this.remoteViewURLPrefix), \"\");\n                if (url === \"\" && this.remoteViewURLPrefix) {\n                    url = \"/\";\n                }\n\n                if (url.replace(/^#/, \"\") === this.url) {\n                    this.trigger(SAME_VIEW_REQUESTED);\n                    return false;\n                }\n\n                this.trigger(SHOW_START);\n\n                var that = this,\n                    element = that._findViewElement(url),\n                    view = kendo.widgetInstance(element);\n\n                that.url = url.replace(/^#/, \"\");\n\n                that.params = params;\n\n                if (view && view.reload) {\n                    view.purge();\n                    element = [];\n                }\n\n                this.trigger(VIEW_TYPE_DETERMINED, { remote: element.length === 0, url: url });\n\n                if (element[0]) {\n                    if (!view) {\n                        view = that._createView(element);\n                    }\n\n                    return that.viewContainer.show(view, transition, url);\n                } else {\n                    return true;\n                }\n            },\n\n            append: function(html, url) {\n                var sandbox = this.sandbox,\n                    urlPath = (url || \"\").split(\"?\")[0],\n                    container = this.container,\n                    views,\n                    view;\n\n                if (bodyRegExp.test(html)) {\n                    html = RegExp.$1;\n                }\n\n                sandbox[0].innerHTML = html;\n\n                container.append(sandbox.children(\"script, style\"));\n\n                views = this._hideViews(sandbox);\n                view = views.first();\n\n                // Generic HTML content found as remote view - no remote view markers\n                if (!view.length) {\n                    views = view = sandbox.wrapInner(\"<div data-role=view />\").children(); // one element\n                }\n\n                if (urlPath) {\n                    view.hide().attr(attr(\"url\"), urlPath);\n                }\n\n                container.append(views);\n\n                return this._createView(view);\n            },\n\n            _locate: function(selectors) {\n                return roleSelector(selectors);\n            },\n\n            _findViewElement: function(url) {\n                var element,\n                    urlPath = url.split(\"?\")[0];\n\n                if (!urlPath) {\n                    return this.rootView;\n                }\n\n                element = this.container.children(\"[\" + attr(\"url\") + \"='\" + urlPath + \"']\");\n\n                // do not try to search for \"#/foo/bar\" id, jQuery throws error\n                if (!element[0] && urlPath.indexOf(\"/\") === -1) {\n                    element = this.container.children(urlPath.charAt(0) === \"#\" ? urlPath : \"#\" + urlPath);\n                }\n\n                if (!element[0]) {\n                    element = this._findViewElementById(url);\n                }\n\n                return element;\n            },\n\n            _findViewElementById: function(id) {\n                var element = this.container.children(\"[id='\" + id + \"']\");\n                return element;\n            },\n\n            _createView: function(element) {\n                //return this._createMobileView(element);\n                return this._createSpaView(element);\n            },\n\n            _createMobileView: function(element) {\n                return kendo.initWidget(element, {\n                    defaultTransition: this.transition,\n                    loader: this.loader,\n                    container: this.container,\n                    getLayout: this.getLayoutProxy,\n                    modelScope: this.modelScope,\n                    reload: attrValue(element, \"reload\")\n                }, ui.roles);\n            },\n\n            _createSpaView: function(element) {\n                var viewOptions = (this.options || {}).viewOptions || {};\n                return new kendo.View(element, {\n                    renderOnInit: viewOptions.renderOnInit,\n                    wrap: viewOptions.wrap || false,\n                    wrapInSections: viewOptions.wrapInSections,\n                    detachOnHide: viewOptions.detachOnHide,\n                    detachOnDestroy: viewOptions.detachOnDestroy\n                });\n            },\n\n            _hideViews: function(container) {\n                return container.children(this._locate(\"view\")).hide();\n            }\n        });\n\n        kendo.ViewEngine = ViewEngine;\n\n        kendo.ViewContainer = ViewContainer;\n        kendo.Fragment = Fragment;\n        kendo.Layout = Layout;\n        kendo.View = View;\n        kendo.ViewClone = ViewClone;\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}