{"version":3,"sources":["raw-js/kendo.router.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendorouter","js","this","$","undefined$1","kendo","window","CHANGE","SAME","support","location","history","BROKEN_BACK_NAV","browser","msie","hashStrip","document","absoluteURL","path","pathPrefix","RegExp","test","protocol","host","replace","hashDelimiter","bang","locationHash","href","indexOf","split","stripRoot","root","url","substr","length","HistoryAdapter","Class","extend","back","setTimeout","forward","replaceLocation","PushStateAdapter","init","navigate","to","pushState","title","replaceState","normalize","current","pathname","search","change","callback","bind","stop","unbind","normalizeCurrent","options","fixedUrl","hash","hashBang","fixHash","fixBang","HashAdapter","_id","guid","prefix","fix","hashChange","on","_interval","setInterval","off","clearInterval","History","Observable","start","_started","adapter","createAdapter","historyLength","locations","_checkUrl","silent","_navigate","backCalled","push","decodeURIComponent","trigger","decode","call","newLength","navigatingInExisting","prev","backButtonPressed","pop","jQuery","kendo$1","INIT","ROUTE_MISSING","BACK","optionalParam","namedParam","splatParam","escapeRegExp","namedParamReplace","match","optional","stripUrl","Route","route","ignoreCase","routeToRegExp","_callback","params","idx","queryStringParams","parseQueryStringParams","_back","exec","slice","apply","worksWith","Router","fn","routes","destroy","_urlChangedProxy","_sameProxy","_backProxy","that","backProxy","e","urlChangedProxy","_urlChanged","same","_same","initEventObject","preventDefault","noop"],"mappings":"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","file":"kendo.router.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendorouter = global.kendorouter || {}, global.kendorouter.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"router\",\n        name: \"Router\",\n        category: \"framework\",\n        description: \"The Router class is responsible for tracking the application state and navigating between the application states.\",\n        depends: [ \"core\" ],\n        hidden: false\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            CHANGE = \"change\",\n            BACK = \"back\",\n            SAME = \"same\",\n            support = kendo.support,\n            location = window.location,\n            history = window.history,\n            CHECK_URL_INTERVAL = 50,\n            BROKEN_BACK_NAV = kendo.support.browser.msie,\n            hashStrip = /^#*/,\n            document = window.document;\n\n        function absoluteURL(path, pathPrefix) {\n            if (!pathPrefix) {\n                return path;\n            }\n\n            if (path + \"/\" === pathPrefix) {\n                path = pathPrefix;\n            }\n\n            var regEx = new RegExp(\"^\" + pathPrefix, \"i\");\n\n            if (!regEx.test(path)) {\n                path = pathPrefix + \"/\" + path;\n            }\n\n            return location.protocol + '//' + (location.host + \"/\" + path).replace(/\\/\\/+/g, '/');\n        }\n\n        function hashDelimiter(bang) {\n            return bang ? \"#!\" : \"#\";\n        }\n\n        function locationHash(hashDelimiter) {\n            var href = location.href;\n\n            // ignore normal anchors if in hashbang mode - however, still return \"\" if no hash present\n            if (hashDelimiter === \"#!\" && href.indexOf(\"#\") > -1 && href.indexOf(\"#!\") < 0) {\n                return null;\n            }\n\n            return href.split(hashDelimiter)[1] || \"\";\n        }\n\n        function stripRoot(root, url) {\n            if (url.indexOf(root) === 0) {\n                return (url.substr(root.length)).replace(/\\/\\//g, '/');\n            } else {\n                return url;\n            }\n        }\n\n        var HistoryAdapter = kendo.Class.extend({\n            back: function() {\n                if (BROKEN_BACK_NAV) {\n                    setTimeout(function() { history.back(); });\n                } else {\n                    history.back();\n                }\n            },\n\n            forward: function() {\n                if (BROKEN_BACK_NAV) {\n                    setTimeout(function() { history.forward(); });\n                } else {\n                    history.forward();\n                }\n            },\n\n            length: function() {\n                return history.length;\n            },\n\n            replaceLocation: function(url) {\n                location.replace(url);\n            }\n        });\n\n        var PushStateAdapter = HistoryAdapter.extend({\n            init: function(root) {\n                this.root = root;\n            },\n\n            navigate: function(to) {\n                history.pushState({}, document.title, absoluteURL(to, this.root));\n            },\n\n            replace: function(to) {\n                history.replaceState({}, document.title, absoluteURL(to, this.root));\n            },\n\n            normalize: function(url) {\n                return stripRoot(this.root, url);\n            },\n\n            current: function() {\n                var current = location.pathname;\n\n                if (location.search) {\n                    current += location.search;\n                }\n\n                return stripRoot(this.root, current);\n            },\n\n            change: function(callback) {\n                $(window).bind(\"popstate.kendo\", callback);\n            },\n\n            stop: function() {\n                $(window).unbind(\"popstate.kendo\");\n            },\n\n            normalizeCurrent: function(options) {\n                var fixedUrl,\n                    root = options.root,\n                    pathname = location.pathname,\n                    hash = locationHash(hashDelimiter(options.hashBang));\n\n                if (root === pathname + \"/\") {\n                    fixedUrl = root;\n                }\n\n                if (root === pathname && hash) {\n                    fixedUrl = absoluteURL(hash.replace(hashStrip, ''), root);\n                }\n\n                if (fixedUrl) {\n                    history.pushState({}, document.title, fixedUrl);\n                }\n            }\n        });\n\n        function fixHash(url) {\n            return url.replace(/^(#)?/, \"#\");\n        }\n\n        function fixBang(url) {\n            return url.replace(/^(#(!)?)?/, \"#!\");\n        }\n\n        var HashAdapter = HistoryAdapter.extend({\n            init: function(bang) {\n                this._id = kendo.guid();\n                this.prefix = hashDelimiter(bang);\n                this.fix = bang ? fixBang : fixHash;\n            },\n\n            navigate: function(to) {\n                location.hash = this.fix(to);\n            },\n\n            replace: function(to) {\n                this.replaceLocation(this.fix(to));\n            },\n\n            normalize: function(url) {\n                if (url.indexOf(this.prefix) < 0) {\n                   return url;\n                } else {\n                    return url.split(this.prefix)[1];\n                }\n            },\n\n            change: function(callback) {\n                if (support.hashChange) {\n                    $(window).on(\"hashchange.\" + this._id, callback);\n                } else {\n                    this._interval = setInterval(callback, CHECK_URL_INTERVAL);\n                }\n            },\n\n            stop: function() {\n                $(window).off(\"hashchange.\" + this._id);\n                clearInterval(this._interval);\n            },\n\n            current: function() {\n                return locationHash(this.prefix);\n            },\n\n            normalizeCurrent: function(options) {\n                var pathname = location.pathname,\n                    root = options.root;\n\n                if (options.pushState && root !== pathname) {\n                    this.replaceLocation(root + this.prefix + stripRoot(root, pathname));\n                    return true; // browser will reload at this point.\n                }\n\n                return false;\n            }\n        });\n\n        var History = kendo.Observable.extend({\n            start: function(options) {\n                options = options || {};\n\n                this.bind([CHANGE, BACK, SAME], options);\n\n                if (this._started) {\n                    return;\n                }\n\n                this._started = true;\n\n                options.root = options.root || \"/\";\n\n                var adapter = this.createAdapter(options),\n                    current;\n\n                // adapter may reload the document\n                if (adapter.normalizeCurrent(options)) {\n                    return;\n                }\n\n                current = adapter.current();\n\n                $.extend(this, {\n                    adapter: adapter,\n                    root: options.root,\n                    historyLength: adapter.length(),\n                    current: current,\n                    locations: [current]\n                });\n\n                adapter.change(this._checkUrl.bind(this));\n            },\n\n            createAdapter: function(options) {\n               return support.pushState && options.pushState ? new PushStateAdapter(options.root) : new HashAdapter(options.hashBang);\n            },\n\n            stop: function() {\n                if (!this._started) {\n                    return;\n                }\n                this.adapter.stop();\n                this.unbind(CHANGE);\n                this._started = false;\n            },\n\n            change: function(callback) {\n                this.bind(CHANGE, callback);\n            },\n\n            replace: function(to, silent) {\n\n                this._navigate(to, silent, function(adapter) {\n                    adapter.replace(to);\n                    this.locations[this.locations.length - 1] = this.current;\n                });\n            },\n\n            navigate: function(to, silent) {\n                if (to === \"#:back\") {\n                    this.backCalled = true;\n                    this.adapter.back();\n                    return;\n                }\n\n                this._navigate(to, silent, function(adapter) {\n                    adapter.navigate(to);\n                    this.locations.push(this.current);\n                });\n            },\n\n            _navigate: function(to, silent, callback) {\n                var adapter = this.adapter;\n\n                to = adapter.normalize(to);\n\n                if (this.current === to || this.current === decodeURIComponent(to)) {\n                    this.trigger(SAME);\n                    return;\n                }\n\n                if (!silent) {\n                    if (this.trigger(CHANGE, { url: to, decode: false })) {\n                        return;\n                    }\n                }\n\n                this.current = to;\n\n                callback.call(this, adapter);\n\n                this.historyLength = adapter.length();\n            },\n\n            _checkUrl: function() {\n                var adapter = this.adapter,\n                    current = adapter.current(),\n                    newLength = adapter.length(),\n                    navigatingInExisting = this.historyLength === newLength,\n                    back = current === this.locations[this.locations.length - 2] && navigatingInExisting,\n                    backCalled = this.backCalled,\n                    prev = this.current;\n\n                if (current === null || this.current === current || this.current === decodeURIComponent(current)) {\n                    return true;\n                }\n\n                this.historyLength = newLength;\n                this.backCalled = false;\n\n                this.current = current;\n\n                if (back && this.trigger(\"back\", { url: prev, to: current })) {\n                    adapter.forward();\n                    this.current = prev;\n                    return;\n                }\n\n                if (this.trigger(CHANGE, { url: current, backButtonPressed: !backCalled })) {\n                    if (back) {\n                        adapter.forward();\n                    } else {\n                        adapter.back();\n                        this.historyLength --;\n                    }\n                    this.current = prev;\n                    return;\n                }\n\n                if (back) {\n                    this.locations.pop();\n                } else {\n                    this.locations.push(current);\n                }\n            }\n        });\n\n        kendo.History = History;\n        kendo.History.HistoryAdapter = HistoryAdapter;\n        kendo.History.HashAdapter = HashAdapter;\n        kendo.History.PushStateAdapter = PushStateAdapter;\n        kendo.absoluteURL = absoluteURL;\n        kendo.history = new History();\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    (function() {\n        var kendo = window.kendo,\n            history = kendo.history,\n            Observable = kendo.Observable,\n            INIT = \"init\",\n            ROUTE_MISSING = \"routeMissing\",\n            CHANGE = \"change\",\n            BACK = \"back\",\n            SAME = \"same\",\n            optionalParam = /\\((.*?)\\)/g,\n            namedParam = /(\\(\\?)?:\\w+/g,\n            splatParam = /\\*\\w+/g,\n            escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n        function namedParamReplace(match, optional) {\n            return optional ? match : '([^\\/]+)';\n        }\n\n        function routeToRegExp(route, ignoreCase) {\n            return new RegExp('^' + route\n                .replace(escapeRegExp, '\\\\$&')\n                .replace(optionalParam, '(?:$1)?')\n                .replace(namedParam, namedParamReplace)\n                .replace(splatParam, '(.*?)') + '$', ignoreCase ? \"i\" : \"\");\n        }\n\n        function stripUrl(url) {\n            return url.replace(/(\\?.*)|(#.*)/g, \"\");\n        }\n\n        var Route = kendo.Class.extend({\n            init: function(route, callback, ignoreCase) {\n                if (!(route instanceof RegExp)) {\n                    route = routeToRegExp(route, ignoreCase);\n                }\n\n                this.route = route;\n                this._callback = callback;\n            },\n\n            callback: function(url, back, decode) {\n                var params,\n                    idx = 0,\n                    length,\n                    queryStringParams = kendo.parseQueryStringParams(url);\n                    queryStringParams._back = back;\n\n                url = stripUrl(url);\n                params = this.route.exec(url).slice(1);\n                length = params.length;\n\n                if (decode) {\n                    for (; idx < length; idx ++) {\n                        if (typeof params[idx] !== 'undefined') {\n                            params[idx] = decodeURIComponent(params[idx]);\n                        }\n                    }\n                }\n\n                params.push(queryStringParams);\n\n                this._callback.apply(null, params);\n            },\n\n            worksWith: function(url, back, decode) {\n                if (this.route.test(stripUrl(url))) {\n                    this.callback(url, back, decode);\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        });\n\n        var Router = Observable.extend({\n            init: function(options) {\n                if (!options) {\n                    options = {};\n                }\n\n                Observable.fn.init.call(this);\n\n                this.routes = [];\n                this.pushState = options.pushState;\n                this.hashBang = options.hashBang;\n                this.root = options.root;\n                this.ignoreCase = options.ignoreCase !== false;\n\n                this.bind([INIT, ROUTE_MISSING, CHANGE, SAME, BACK], options);\n            },\n\n            destroy: function() {\n                history.unbind(CHANGE, this._urlChangedProxy);\n                history.unbind(SAME, this._sameProxy);\n                history.unbind(BACK, this._backProxy);\n                this.unbind();\n            },\n\n            start: function() {\n                var that = this,\n                    sameProxy = function() { that._same(); },\n                    backProxy = function(e) { that._back(e); },\n                    urlChangedProxy = function(e) { that._urlChanged(e); };\n\n                history.start({\n                    same: sameProxy,\n                    change: urlChangedProxy,\n                    back: backProxy,\n                    pushState: that.pushState,\n                    hashBang: that.hashBang,\n                    root: that.root\n                });\n\n                // eslint-disable-next-line no-undef\n                var initEventObject = { url: history.current || \"/\", preventDefault: $.noop };\n\n                if (!that.trigger(INIT, initEventObject)) {\n                    that._urlChanged(initEventObject);\n                }\n\n                this._urlChangedProxy = urlChangedProxy;\n                this._backProxy = backProxy;\n            },\n\n            route: function(route, callback) {\n                this.routes.push(new Route(route, callback, this.ignoreCase));\n            },\n\n            navigate: function(url, silent) {\n                kendo.history.navigate(url, silent);\n            },\n\n            replace: function(url, silent) {\n                kendo.history.replace(url, silent);\n            },\n\n            _back: function(e) {\n                if (this.trigger(BACK, { url: e.url, to: e.to })) {\n                    e.preventDefault();\n                }\n            },\n\n            _same: function() {\n                this.trigger(SAME);\n            },\n\n            _urlChanged: function(e) {\n                var url = e.url;\n                var decode = !!e.decode;\n                var back = e.backButtonPressed;\n\n                if (!url) {\n                    url = \"/\";\n                }\n\n                if (this.trigger(CHANGE, { url: e.url, params: kendo.parseQueryStringParams(e.url), backButtonPressed: back })) {\n                    e.preventDefault();\n                    return;\n                }\n\n                var idx = 0,\n                    routes = this.routes,\n                    route,\n                    length = routes.length;\n\n                for (; idx < length; idx ++) {\n                     route = routes[idx];\n\n                     if (route.worksWith(url, back, decode)) {\n                        return;\n                     }\n                }\n\n                if (this.trigger(ROUTE_MISSING, { url: url, params: kendo.parseQueryStringParams(url), backButtonPressed: back })) {\n                    e.preventDefault();\n                }\n            }\n        });\n\n        kendo.Router = Router;\n    })();\n\n    return kendo$1;\n\n}));\n"]}