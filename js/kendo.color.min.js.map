{"version":3,"sources":["raw-js/kendo.color.js"],"names":["factory","define","amd","window","kendo","Class","support","namedColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","browser","matchNamedColor","color","colorNames","Object","keys","push","regexp","RegExp","join","exec","BaseColor","extend","init","toHSV","this","toRGB","toHex","options","toBytes","toCss","toCssRgba","rgb","parseFloat","Number","a","toFixed","toDisplay","msie","version","equals","c","parseColor","diff","other","NaN","c1","c2","Math","sqrt","pow","r","g","b","clone","Bytes","RGB","fn","call","h","s","ref","min","max","delta","v","HSV","toHSL","l","d","HSL","round","value","hex","alpha","n","width","pad","result","toString","length","i","floor","f","p","q","t","hue2rgb","alphaFromHex","parseInt","safe","m","ret","toLowerCase","match","Error","Color","this$1$1","arguments","formats","resolvedColor","resolveColor","idx","formatRegex","re","processor","process","parts","channels","normalizeByte","padDigit","charAt","substr","replace","isNaN","brightness","percBrightness","isDark","fromBytes","fromRGB","fromHSV","fromHSL","deepExtend"],"mappings":";;;;;;;;;;;;;;;CAAA,SAAAA,GACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,kBAAAD,GACAA,GACA,CAHA,EAGA,WAkBAG,OAAAC,MAAAD,OAAAC,OAAA,CAAA,EAEA,IAAAC,EAAAD,MAAAC,MACAC,EAAAF,MAAAE,QAEAC,EAAA,CACAC,UAAA,SAAAC,aAAA,SAAAC,KAAA,SACAC,WAAA,SAAAC,MAAA,SAAAC,MAAA,SACAC,OAAA,SAAAC,MAAA,SAAAC,eAAA,SACAC,KAAA,SAAAC,WAAA,SAAAC,MAAA,SACAC,UAAA,SAAAC,UAAA,SAAAC,WAAA,SACAC,UAAA,SAAAC,MAAA,SAAAC,eAAA,SACAC,SAAA,SAAAC,QAAA,SAAAC,KAAA,SACAC,SAAA,SAAAC,SAAA,SAAAC,cAAA,SACAC,SAAA,SAAAC,SAAA,SAAAC,UAAA,SACAC,UAAA,SAAAC,YAAA,SAAAC,eAAA,SACAC,WAAA,SAAAC,WAAA,SAAAC,QAAA,SACAC,WAAA,SAAAC,aAAA,SAAAC,cAAA,SACAC,cAAA,SAAAC,cAAA,SAAAC,cAAA,SACAC,WAAA,SAAAC,SAAA,SAAAC,YAAA,SACAC,QAAA,SAAAC,QAAA,SAAAC,WAAA,SACAC,UAAA,SAAAC,YAAA,SAAAC,YAAA,SACAC,QAAA,SAAAC,UAAA,SAAAC,WAAA,SACAC,KAAA,SAAAC,UAAA,SAAAC,KAAA,SACAC,KAAA,SAAAC,MAAA,SAAAC,YAAA,SACAC,SAAA,SAAAC,QAAA,SAAAC,UAAA,SACAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SACAC,SAAA,SAAAC,cAAA,SAAAC,UAAA,SACAC,aAAA,SAAAC,UAAA,SAAAC,WAAA,SACAC,UAAA,SAAAC,qBAAA,SAAAC,UAAA,SACAC,UAAA,SAAAC,WAAA,SAAAC,UAAA,SACAC,YAAA,SAAAC,cAAA,SAAAC,aAAA,SACAC,eAAA,SAAAC,eAAA,SAAAC,eAAA,SACAC,YAAA,SAAAC,KAAA,SAAAC,UAAA,SACAC,MAAA,SAAAC,QAAA,SAAAC,OAAA,SACAC,iBAAA,SAAAC,WAAA,SAAAC,aAAA,SACAC,aAAA,SAAAC,eAAA,SAAAC,gBAAA,SACAC,kBAAA,SAAAC,gBAAA,SAAAC,gBAAA,SACAC,aAAA,SAAAC,UAAA,SAAAC,UAAA,SACAC,SAAA,SAAAC,YAAA,SAAAC,KAAA,SACAC,QAAA,SAAAC,MAAA,SAAAC,UAAA,SACAC,OAAA,SAAAC,UAAA,SAAAC,OAAA,SACAC,cAAA,SAAAC,UAAA,SAAAC,cAAA,SACAC,cAAA,SAAAC,WAAA,SAAAC,UAAA,SACAC,KAAA,SAAAC,KAAA,SAAAC,KAAA,SACAC,WAAA,SAAAC,OAAA,SAAAC,IAAA,SACAC,UAAA,SAAAC,UAAA,SAAAC,YAAA,SACAC,OAAA,SAAAC,WAAA,SAAAC,SAAA,SACAC,SAAA,SAAAC,OAAA,SAAAC,OAAA,SACAC,QAAA,SAAAC,UAAA,SAAAC,UAAA,SACAC,UAAA,SAAAC,KAAA,SAAAC,YAAA,SACAC,UAAA,SAAAC,IAAA,SAAAC,KAAA,SACAC,QAAA,SAAAC,OAAA,SAAAC,UAAA,SACAC,OAAA,SAAAC,MAAA,SAAAC,MAAA,SACAC,WAAA,SAAAC,OAAA,SAAAC,YAAA,UAGAC,EAAArJ,EAAAqJ,QAEAC,EAAA,SAAAC,GACA,IAAAC,EAAAC,OAAAC,KAAAzJ,GACAuJ,EAAAG,KAAA,eAEA,IAAAC,EAAA,IAAAC,OAAA,KAAAL,EAAAM,KAAA,KAAA,WAAA,KAGA,OAFAR,EAAA,SAAAC,GAAA,OAAAK,EAAAG,KAAAR,EAAA,EAEAK,EAAAG,KAAAR,EACA,EAEAS,EAAAjK,EAAAkK,OAAA,CACAC,KAAA,WAAA,EAEAC,MAAA,WAAA,OAAAC,IAAA,EAEAC,MAAA,WAAA,OAAAD,IAAA,EAEAE,MAAA,SAAAC,GAAA,OAAAH,KAAAI,UAAAF,MAAAC,EAAA,EAEAC,QAAA,WAAA,OAAAJ,IAAA,EAEAK,MAAA,SAAAF,GAAA,MAAA,IAAAH,KAAAE,MAAAC,EAAA,EAEAG,UAAA,WACA,IAAAC,EAAAP,KAAAI,UACA,MAAA,QAAAG,EAAA,EAAA,KAAAA,EAAA,EAAA,KAAAA,EAAA,EAAA,KAAAC,WAAAC,OAAAT,KAAAU,GAAAC,QAAA,IAAA,GACA,EAEAC,UAAA,WACA,OAAA3B,EAAA4B,MAAA5B,EAAA6B,QAAA,EACAd,KAAAK,QAEAL,KAAAM,WACA,EAEAS,OAAA,SAAAC,GACA,OAAAA,IAAAhB,MAAA,MAAAgB,GAAAhB,KAAAM,cAAAW,EAAAD,GAAAV,WACA,EAEAY,KAAA,SAAAC,GACA,GAAA,OAAAA,EACA,OAAAC,IAGA,IAAAC,EAAArB,KAAAI,UACAkB,EAAAH,EAAAf,UAEA,OAAAmB,KAAAC,KAAAD,KAAAE,IAAA,IAAAJ,EAAAK,EAAAJ,EAAAI,GAAA,GACAH,KAAAE,IAAA,KAAAJ,EAAAM,EAAAL,EAAAK,GAAA,GACAJ,KAAAE,IAAA,KAAAJ,EAAAO,EAAAN,EAAAM,GAAA,GACA,EAEAC,MAAA,WACA,IAAAb,EAAAhB,KAAAI,UAKA,OAJAY,IAAAhB,OACAgB,EAAA,IAAAc,EAAAd,EAAAU,EAAAV,EAAAW,EAAAX,EAAAY,EAAAZ,EAAAN,IAGAM,CACA,IAGAe,EAAAnC,EAAAC,OAAA,CACAC,KAAA,SAAA4B,EAAAC,EAAAC,EAAAlB,GACAd,EAAAoC,GAAAlC,KAAAmC,KAAAjC,MAEAA,KAAA0B,EAAAA,EACA1B,KAAA2B,EAAAA,EACA3B,KAAA4B,EAAAA,EACA5B,KAAAU,EAAAA,CACA,EAEAX,MAAA,WACA,IAQAmC,EAAAC,EARAC,EAAApC,KACA0B,EAAAU,EAAAV,EACAC,EAAAS,EAAAT,EACAC,EAAAQ,EAAAR,EACAS,EAAAd,KAAAc,IAAAX,EAAAC,EAAAC,GACAU,EAAAf,KAAAe,IAAAZ,EAAAC,EAAAC,GACAW,EAAAD,EAAAD,EACAG,EAAAF,EAGA,OAAA,IAAAC,EACA,IAAAE,EAAA,EAAA,EAAAD,EAAAxC,KAAAU,IAGA,IAAA4B,GACAH,EAAAI,EAAAD,EAEAJ,EADAR,IAAAY,GACAX,EAAAC,GAAAW,EACAZ,IAAAW,EACA,GAAAV,EAAAF,GAAAa,EAEA,GAAAb,EAAAC,GAAAY,GAGAL,GAAA,IACA,IACAA,GAAA,OAGAC,EAAA,EACAD,GAAA,GAGA,IAAAO,EAAAP,EAAAC,EAAAK,EAAAxC,KAAAU,GACA,EAEAgC,MAAA,WACA,IAMAR,EAAAC,EANAC,EAAApC,KACA0B,EAAAU,EAAAV,EACAC,EAAAS,EAAAT,EACAC,EAAAQ,EAAAR,EACAU,EAAAf,KAAAe,IAAAZ,EAAAC,EAAAC,GACAS,EAAAd,KAAAc,IAAAX,EAAAC,EAAAC,GACAe,GAAAL,EAAAD,GAAA,EAEA,GAAAC,IAAAD,EACAH,EAAAC,EAAA,MACA,CACA,IAAAS,EAAAN,EAAAD,EAEA,OADAF,EAAAQ,EAAA,GAAAC,GAAA,EAAAN,EAAAD,GAAAO,GAAAN,EAAAD,GACAC,GACA,KAAAZ,EAAAQ,GAAAP,EAAAC,GAAAgB,GAAAjB,EAAAC,EAAA,EAAA,GAAA,MACA,KAAAD,EAAAO,GAAAN,EAAAF,GAAAkB,EAAA,EAAA,MACA,KAAAhB,EAAAM,GAAAR,EAAAC,GAAAiB,EAAA,EAGA,CAEA,OAAA,IAAAC,EAAA,GAAAX,EAAA,IAAAC,EAAA,IAAAQ,EAAA3C,KAAAU,EACA,EAEAN,QAAA,WACA,OAAA,IAAA0B,EAAA,IAAA9B,KAAA0B,EAAA,IAAA1B,KAAA2B,EAAA,IAAA3B,KAAA4B,EAAA5B,KAAAU,EACA,IAGAoB,EAAAC,EAAAlC,OAAA,CACAC,KAAA,SAAA4B,EAAAC,EAAAC,EAAAlB,GACAqB,EAAAC,GAAAlC,KAAAmC,KAAAjC,KAAAuB,KAAAuB,MAAApB,GAAAH,KAAAuB,MAAAnB,GAAAJ,KAAAuB,MAAAlB,GAAAlB,EACA,EAEAT,MAAA,WACA,OAAA,IAAA8B,EAAA/B,KAAA0B,EAAA,IAAA1B,KAAA2B,EAAA,IAAA3B,KAAA4B,EAAA,IAAA5B,KAAAU,EACA,EAEAX,MAAA,WACA,OAAAC,KAAAC,QAAAF,OACA,EAEA2C,MAAA,WACA,OAAA1C,KAAAC,QAAAyC,OACA,EAEAxC,MAAA,SAAAC,GACA,IAAA4C,EAAAC,EAAAhD,KAAA0B,EAAA,GAAAsB,EAAAhD,KAAA2B,EAAA,GAAAqB,EAAAhD,KAAA4B,EAAA,GAMA,OAJAzB,GAAAA,EAAA8C,QACAF,GAAAC,EAAAzB,KAAAuB,MAAA,IAAA9C,KAAAU,GAAA,IAGAqC,CACA,EAEA3C,QAAA,WACA,OAAAJ,IACA,IAGA,SAAAgD,EAAAE,EAAAC,EAAAC,QACA,IAAAA,IAAAA,EAAA,KAGA,IADA,IAAAC,EAAAH,EAAAI,SAAA,IACAH,EAAAE,EAAAE,QACAF,EAAAD,EAAAC,EAGA,OAAAA,CACA,CAEA,IAAAZ,EAAA7C,EAAAC,OAAA,CACAC,KAAA,SAAAoC,EAAAC,EAAAK,EAAA9B,GACAd,EAAAoC,GAAAlC,KAAAmC,KAAAjC,MAEAA,KAAAkC,EAAAA,EACAlC,KAAAmC,EAAAA,EACAnC,KAAAwC,EAAAA,EACAxC,KAAAU,EAAAA,CACA,EAEAT,MAAA,WACA,IAIAyB,EAAAC,EAAAC,EAJAQ,EAAApC,KACAkC,EAAAE,EAAAF,EACAC,EAAAC,EAAAD,EACAK,EAAAJ,EAAAI,EAGA,GAAA,IAAAL,EACAT,EAAAC,EAAAC,EAAAY,MACA,CACAN,GAAA,GAEA,IAAAsB,EAAAjC,KAAAkC,MAAAvB,GACAwB,EAAAxB,EAAAsB,EACAG,EAAAnB,GAAA,EAAAL,GACAyB,EAAApB,GAAA,EAAAL,EAAAuB,GACAG,EAAArB,GAAA,EAAAL,GAAA,EAAAuB,IAEA,OAAAF,GACA,KAAA,EAAA9B,EAAAc,EAAAb,EAAAkC,EAAAjC,EAAA+B,EAAA,MACA,KAAA,EAAAjC,EAAAkC,EAAAjC,EAAAa,EAAAZ,EAAA+B,EAAA,MACA,KAAA,EAAAjC,EAAAiC,EAAAhC,EAAAa,EAAAZ,EAAAiC,EAAA,MACA,KAAA,EAAAnC,EAAAiC,EAAAhC,EAAAiC,EAAAhC,EAAAY,EAAA,MACA,KAAA,EAAAd,EAAAmC,EAAAlC,EAAAgC,EAAA/B,EAAAY,EAAA,MACA,QAAAd,EAAAc,EAAAb,EAAAgC,EAAA/B,EAAAgC,EAEA,CAEA,OAAA,IAAA7B,EAAAL,EAAAC,EAAAC,EAAA5B,KAAAU,EACA,EAEAgC,MAAA,WACA,OAAA1C,KAAAC,QAAAyC,OACA,EAEAtC,QAAA,WACA,OAAAJ,KAAAC,QAAAG,SACA,IAGAyC,EAAAjD,EAAAC,OAAA,CACAC,KAAA,SAAAoC,EAAAC,EAAAQ,EAAAjC,GACAd,EAAAoC,GAAAlC,KAAAmC,KAAAjC,MAEAA,KAAAkC,EAAAA,EACAlC,KAAAmC,EAAAA,EACAnC,KAAA2C,EAAAA,EACA3C,KAAAU,EAAAA,CACA,EAEAT,MAAA,WACA,IAGAyB,EAAAC,EAAAC,EAHAM,EAAAlC,KAAAkC,EAAA,IACAC,EAAAnC,KAAAmC,EAAA,IACAQ,EAAA3C,KAAA2C,EAAA,IAGA,GAAA,IAAAR,EACAT,EAAAC,EAAAC,EAAAe,MACA,CACA,IAAAiB,EAAAjB,EAAA,GAAAA,GAAA,EAAAR,GAAAQ,EAAAR,EAAAQ,EAAAR,EACAwB,EAAA,EAAAhB,EAAAiB,EACAlC,EAAAoC,EAAAH,EAAAC,EAAA1B,EAAA,EAAA,GACAP,EAAAmC,EAAAH,EAAAC,EAAA1B,GACAN,EAAAkC,EAAAH,EAAAC,EAAA1B,EAAA,EAAA,EACA,CAEA,OAAA,IAAAH,EAAAL,EAAAC,EAAAC,EAAA5B,KAAAU,EACA,EAEAX,MAAA,WACA,OAAAC,KAAAC,QAAAF,OACA,EAEAK,QAAA,WACA,OAAAJ,KAAAC,QAAAG,SACA,IAGA,SAAA0D,EAAAH,EAAAC,EAAAzB,GACA,IAAA0B,EAAA1B,EAUA,OARA0B,EAAA,IACAA,GAAA,GAGAA,EAAA,IACAA,GAAA,GAGAA,EAAA,EAAA,EACAF,EAAA,GAAAC,EAAAD,GAAAE,EAGAA,EAAA,GACAD,EAGAC,EAAA,EAAA,EACAF,GAAAC,EAAAD,IAAA,EAAA,EAAAE,GAAA,EAGAF,CACA,CAEA,SAAAI,EAAArD,GACA,OAAAF,WAAAA,WAAAwD,SAAAtD,EAAA,IAAA,KAAAC,QAAA,GACA,CAEA,SAAAM,EAAA8B,EAAAkB,GACA,IAAAC,EAAAC,EAEA,GAAA,MAAApB,GAAA,SAAAA,EACA,OAAA,KAGA,GAAAA,aAAAnD,EACA,OAAAmD,EAGA,IAAA5D,EAAA4D,EAAAqB,cACA,GAAAF,EAAAhF,EAAAC,GAOA,OALAA,EADA,gBAAA+E,EAAA,GACA,IAAAnC,EAAA,EAAA,EAAA,EAAA,GAEAd,EAAApL,EAAAqO,EAAA,IAAAD,IAEAI,MAAA,CAAAH,EAAA,IACA/E,EAsCA,IApCA+E,EAAA,gDAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IAAA,IACAA,EAAA,uCAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAAA,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAAA,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAAA,EAAA,GAAA,IAAA,IACAA,EAAA,iDAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAAA,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAAA,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAAA,EAAA,GAAA,IACAH,EAAAG,EAAA,GAAAA,EAAA,MACAA,EAAA,6DAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IACAH,EAAAG,EAAA,MACAA,EAAA,uDAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IAAA,IACAA,EAAA,wEAAAvE,KAAAR,IACAgF,EAAA,IAAArC,EAAAkC,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IACAF,SAAAE,EAAA,GAAA,IAAA1D,WAAA0D,EAAA,MACAA,EAAA,qFAAAvE,KAAAR,IACAgF,EAAA,IAAApC,EAAAvB,WAAA0D,EAAA,IAAA,IACA1D,WAAA0D,EAAA,IAAA,IACA1D,WAAA0D,EAAA,IAAA,IAAA,IACAA,EAAA,sGAAAvE,KAAAR,MACAgF,EAAA,IAAApC,EAAAvB,WAAA0D,EAAA,IAAA,IACA1D,WAAA0D,EAAA,IAAA,IACA1D,WAAA0D,EAAA,IAAA,IAAA1D,WAAA0D,EAAA,MAGAC,EACAA,EAAAE,MAAAH,OACA,IAAAD,EACA,MAAA,IAAAK,MAAA,uBAAAnF,GAGA,OAAAgF,CACA,CAEA,IAEAI,EAAA5O,EAAAkK,OAAA,CACAC,KAAA,SAAAiD,GACA,IAAAyB,EAAAxE,KAEA,GAAA,IAAAyE,UAAAlB,OAIA,IAHA,IAAAmB,EAAAH,EAAAG,QACAC,EAAA3E,KAAA4E,aAAA7B,GAEA8B,EAAA,EAAAA,EAAAH,EAAAnB,OAAAsB,IAAA,CACA,IAAAC,EAAAJ,EAAAG,GAAAE,GACAC,EAAAN,EAAAG,GAAAI,QACAC,EAAAJ,EAAAnF,KAAAgF,GAEA,GAAAO,EAAA,CACA,IAAAC,EAAAH,EAAAE,GACAV,EAAA9C,EAAAyD,EAAA,GACAX,EAAA7C,EAAAwD,EAAA,GACAX,EAAA5C,EAAAuD,EAAA,EACA,CACA,MAEAnF,KAAA0B,EAAA+C,UAAA,GACAzE,KAAA2B,EAAA8C,UAAA,GACAzE,KAAA4B,EAAA6C,UAAA,GAGAzE,KAAA0B,EAAA1B,KAAAoF,cAAApF,KAAA0B,GACA1B,KAAA2B,EAAA3B,KAAAoF,cAAApF,KAAA2B,GACA3B,KAAA4B,EAAA5B,KAAAoF,cAAApF,KAAA4B,EACA,EAEA1B,MAAA,WACA,IAAAkD,EAAApD,KAAAqF,SACA3D,EAAA1B,KAAA0B,EAAA4B,SAAA,IACA3B,EAAA3B,KAAA2B,EAAA2B,SAAA,IACA1B,EAAA5B,KAAA4B,EAAA0B,SAAA,IAEA,MAAA,IAAAF,EAAA1B,GAAA0B,EAAAzB,GAAAyB,EAAAxB,EACA,EAEAgD,aAAA,SAAA7B,GACA,IAAA5D,EAAA4D,GAAA,QAUA,MARA,MAAA5D,EAAAmG,OAAA,KACAnG,EAAAA,EAAAoG,OAAA,EAAA,IAIApG,GADAA,EAAAA,EAAAqG,QAAA,KAAA,KACApB,cACAjF,EAAAoF,EAAA1O,YAAAsJ,IAAAA,CAGA,EAEAiG,cAAA,SAAArC,GACA,OAAAA,EAAA,GAAA0C,MAAA1C,GACA,EAGAA,EAAA,IAAA,IAAAA,CACA,EAEAsC,SAAA,SAAAtC,GACA,OAAA,IAAAA,EAAAQ,OAAA,IAAAR,EAAAA,CACA,EAEA2C,WAAA,SAAA3C,GACA,IAAAD,EAAAvB,KAAAuB,MAMA,OAJA9C,KAAA0B,EAAAoB,EAAA9C,KAAAoF,cAAApF,KAAA0B,EAAAqB,IACA/C,KAAA2B,EAAAmB,EAAA9C,KAAAoF,cAAApF,KAAA2B,EAAAoB,IACA/C,KAAA4B,EAAAkB,EAAA9C,KAAAoF,cAAApF,KAAA4B,EAAAmB,IAEA/C,IACA,EAEA2F,eAAA,WACA,OAAApE,KAAAC,KAAA,KAAAxB,KAAA0B,EAAA1B,KAAA0B,EAAA,KAAA1B,KAAA2B,EAAA3B,KAAA2B,EAAA,KAAA3B,KAAA4B,EAAA5B,KAAA4B,EACA,EAEAgE,OAAA,WACA,OAAA5F,KAAA2F,iBAnFA,GAoFA,IAGApB,EAAAsB,UAAA,SAAAnE,EAAAC,EAAAC,EAAAlB,GACA,OAAA,IAAAoB,EAAAJ,EAAAC,EAAAC,EAAA,MAAAlB,EAAAA,EAAA,EACA,EAEA6D,EAAAuB,QAAA,SAAApE,EAAAC,EAAAC,EAAAlB,GACA,OAAA,IAAAqB,EAAAL,EAAAC,EAAAC,EAAA,MAAAlB,EAAAA,EAAA,EACA,EAEA6D,EAAAwB,QAAA,SAAA7D,EAAAC,EAAAK,EAAA9B,GACA,OAAA,IAAA+B,EAAAP,EAAAC,EAAAK,EAAA,MAAA9B,EAAAA,EAAA,EACA,EAEA6D,EAAAyB,QAAA,SAAA9D,EAAAC,EAAAQ,EAAAjC,GACA,OAAA,IAAAmC,EAAAX,EAAAC,EAAAQ,EAAA,MAAAjC,EAAAA,EAAA,EACA,EAEA6D,EAAAG,QAAA,CAAA,CACAK,GAAA,+CACAE,QAAA,SAAAC,GACA,MAAA,CACAlB,SAAAkB,EAAA,GAAA,IAAAlB,SAAAkB,EAAA,GAAA,IAAAlB,SAAAkB,EAAA,GAAA,IAEA,GACA,CACAH,GAAA,0BACAE,QAAA,SAAAC,GACA,MAAA,CACAlB,SAAAkB,EAAA,GAAA,IAAAlB,SAAAkB,EAAA,GAAA,IAAAlB,SAAAkB,EAAA,GAAA,IAEA,GACA,CACAH,GAAA,0BACAE,QAAA,SAAAC,GACA,MAAA,CACAlB,SAAAkB,EAAA,GAAAA,EAAA,GAAA,IACAlB,SAAAkB,EAAA,GAAAA,EAAA,GAAA,IACAlB,SAAAkB,EAAA,GAAAA,EAAA,GAAA,IAEA,IAGAX,EAAA1O,YAAAA,EAEAH,MAAAuQ,WAAAvQ,MAAA,CACAuL,WAAAA,EACApL,YAAAA,EACA0O,MAAAA,GAGA","file":"kendo.color.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    factory();\n})((function () {\n    /***********************************************************************\n     * WARNING: this file is auto-generated.  If you change it directly,\n     * your modifications will eventually be lost.  The source code is in\n     * `kendo-drawing` repository, you should make your changes there and\n     * run `src-modules/sync.sh` in this repository.\n     */\n    /* eslint-disable space-before-blocks, space-before-function-paren, no-multi-spaces */\n\n        var __meta__ = {\n            id: \"color\",\n            name: \"Color utils\",\n            category: \"framework\",\n            advanced: true,\n            description: \"Color utilities used across components\",\n            depends: [ \"core\" ]\n        };\n\n    window.kendo = window.kendo || {};\n\n    var Class = kendo.Class;\n    var support = kendo.support;\n\n    var namedColors = {\n        aliceblue: \"f0f8ff\", antiquewhite: \"faebd7\", aqua: \"00ffff\",\n        aquamarine: \"7fffd4\", azure: \"f0ffff\", beige: \"f5f5dc\",\n        bisque: \"ffe4c4\", black: \"000000\", blanchedalmond: \"ffebcd\",\n        blue: \"0000ff\", blueviolet: \"8a2be2\", brown: \"a52a2a\",\n        burlywood: \"deb887\", cadetblue: \"5f9ea0\", chartreuse: \"7fff00\",\n        chocolate: \"d2691e\", coral: \"ff7f50\", cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\", crimson: \"dc143c\", cyan: \"00ffff\",\n        darkblue: \"00008b\", darkcyan: \"008b8b\", darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\", darkgrey: \"a9a9a9\", darkgreen: \"006400\",\n        darkkhaki: \"bdb76b\", darkmagenta: \"8b008b\", darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\", darkorchid: \"9932cc\", darkred: \"8b0000\",\n        darksalmon: \"e9967a\", darkseagreen: \"8fbc8f\", darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\", darkslategrey: \"2f4f4f\", darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\", deeppink: \"ff1493\", deepskyblue: \"00bfff\",\n        dimgray: \"696969\", dimgrey: \"696969\", dodgerblue: \"1e90ff\",\n        firebrick: \"b22222\", floralwhite: \"fffaf0\", forestgreen: \"228b22\",\n        fuchsia: \"ff00ff\", gainsboro: \"dcdcdc\", ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\", goldenrod: \"daa520\", gray: \"808080\",\n        grey: \"808080\", green: \"008000\", greenyellow: \"adff2f\",\n        honeydew: \"f0fff0\", hotpink: \"ff69b4\", indianred: \"cd5c5c\",\n        indigo: \"4b0082\", ivory: \"fffff0\", khaki: \"f0e68c\",\n        lavender: \"e6e6fa\", lavenderblush: \"fff0f5\", lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\", lightblue: \"add8e6\", lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\", lightgoldenrodyellow: \"fafad2\", lightgray: \"d3d3d3\",\n        lightgrey: \"d3d3d3\", lightgreen: \"90ee90\", lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\", lightseagreen: \"20b2aa\", lightskyblue: \"87cefa\",\n        lightslategray: \"778899\", lightslategrey: \"778899\", lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\", lime: \"00ff00\", limegreen: \"32cd32\",\n        linen: \"faf0e6\", magenta: \"ff00ff\", maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\", mediumblue: \"0000cd\", mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370d8\", mediumseagreen: \"3cb371\", mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\", mediumturquoise: \"48d1cc\", mediumvioletred: \"c71585\",\n        midnightblue: \"191970\", mintcream: \"f5fffa\", mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\", navajowhite: \"ffdead\", navy: \"000080\",\n        oldlace: \"fdf5e6\", olive: \"808000\", olivedrab: \"6b8e23\",\n        orange: \"ffa500\", orangered: \"ff4500\", orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\", palegreen: \"98fb98\", paleturquoise: \"afeeee\",\n        palevioletred: \"d87093\", papayawhip: \"ffefd5\", peachpuff: \"ffdab9\",\n        peru: \"cd853f\", pink: \"ffc0cb\", plum: \"dda0dd\",\n        powderblue: \"b0e0e6\", purple: \"800080\", red: \"ff0000\",\n        rosybrown: \"bc8f8f\", royalblue: \"4169e1\", saddlebrown: \"8b4513\",\n        salmon: \"fa8072\", sandybrown: \"f4a460\", seagreen: \"2e8b57\",\n        seashell: \"fff5ee\", sienna: \"a0522d\", silver: \"c0c0c0\",\n        skyblue: \"87ceeb\", slateblue: \"6a5acd\", slategray: \"708090\",\n        slategrey: \"708090\", snow: \"fffafa\", springgreen: \"00ff7f\",\n        steelblue: \"4682b4\", tan: \"d2b48c\", teal: \"008080\",\n        thistle: \"d8bfd8\", tomato: \"ff6347\", turquoise: \"40e0d0\",\n        violet: \"ee82ee\", wheat: \"f5deb3\", white: \"ffffff\",\n        whitesmoke: \"f5f5f5\", yellow: \"ffff00\", yellowgreen: \"9acd32\"\n    };\n\n    var browser = support.browser;\n\n    var matchNamedColor = function (color) {\n        var colorNames = Object.keys(namedColors);\n        colorNames.push(\"transparent\");\n\n        var regexp = new RegExp(\"^(\" + colorNames.join(\"|\") + \")(\\\\W|$)\", \"i\");\n        matchNamedColor = function (color) { return regexp.exec(color); };\n\n        return regexp.exec(color);\n    };\n\n    var BaseColor = Class.extend({\n        init: function() {  },\n\n        toHSV: function() { return this; },\n\n        toRGB: function() { return this; },\n\n        toHex: function(options) { return this.toBytes().toHex(options); },\n\n        toBytes: function() { return this; },\n\n        toCss: function(options) { return \"#\" + this.toHex(options); },\n\n        toCssRgba: function() {\n            var rgb = this.toBytes();\n            return (\"rgba(\" + (rgb.r) + \", \" + (rgb.g) + \", \" + (rgb.b) + \", \" + (parseFloat((Number(this.a)).toFixed(3))) + \")\");\n        },\n\n        toDisplay: function() {\n            if (browser.msie && browser.version < 9) {\n                return this.toCss(); // no RGBA support; does it support any opacity in colors?\n            }\n            return this.toCssRgba();\n        },\n\n        equals: function(c) {\n            return c === this || ((c !== null && c !== undefined) && this.toCssRgba() === parseColor(c).toCssRgba());\n        },\n\n        diff: function(other) {\n            if (other === null) {\n                return NaN;\n            }\n\n            var c1 = this.toBytes();\n            var c2 = other.toBytes();\n\n            return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +\n                             Math.pow((c1.g - c2.g) * 0.59, 2) +\n                             Math.pow((c1.b - c2.b) * 0.11, 2));\n        },\n\n        clone: function() {\n            var c = this.toBytes();\n            if (c === this) {\n                c = new Bytes(c.r, c.g, c.b, c.a);\n            }\n\n            return c;\n        }\n    });\n\n    var RGB = BaseColor.extend({\n        init: function(r, g, b, a) {\n            BaseColor.fn.init.call(this);\n\n            this.r = r;\n            this.g = g;\n            this.b = b;\n            this.a = a;\n        },\n\n        toHSV: function() {\n            var ref = this;\n            var r = ref.r;\n            var g = ref.g;\n            var b = ref.b;\n            var min = Math.min(r, g, b);\n            var max = Math.max(r, g, b);\n            var delta = max - min;\n            var v = max;\n            var h, s;\n\n            if (delta === 0) {\n                return new HSV(0, 0, v, this.a);\n            }\n\n            if (max !== 0) {\n                s = delta / max;\n                if (r === max) {\n                    h = (g - b) / delta;\n                } else if (g === max) {\n                    h = 2 + (b - r) / delta;\n                } else {\n                    h = 4 + (r - g) / delta;\n                }\n\n                h *= 60;\n                if (h < 0) {\n                    h += 360;\n                }\n            } else {\n                s = 0;\n                h = -1;\n            }\n\n            return new HSV(h, s, v, this.a);\n        },\n\n        toHSL: function() {\n            var ref = this;\n            var r = ref.r;\n            var g = ref.g;\n            var b = ref.b;\n            var max = Math.max(r, g, b);\n            var min = Math.min(r, g, b);\n            var h, s, l = (max + min) / 2;\n\n            if (max === min) {\n                h = s = 0;\n            } else {\n                var d = max - min;\n                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n                switch (max) {\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n                case g: h = (b - r) / d + 2; break;\n                case b: h = (r - g) / d + 4; break;\n                default: break;\n                }\n            }\n\n            return new HSL(h * 60, s * 100, l * 100, this.a);\n        },\n\n        toBytes: function() {\n            return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);\n        }\n    });\n\n    var Bytes = RGB.extend({\n        init: function(r, g, b, a) {\n            RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);\n        },\n\n        toRGB: function() {\n            return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);\n        },\n\n        toHSV: function() {\n            return this.toRGB().toHSV();\n        },\n\n        toHSL: function() {\n            return this.toRGB().toHSL();\n        },\n\n        toHex: function(options) {\n            var value = hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);\n\n            if (options && options.alpha) {\n                value += hex(Math.round(this.a * 255), 2);\n            }\n\n            return value;\n        },\n\n        toBytes: function() {\n            return this;\n        }\n    });\n\n    function hex(n, width, pad) {\n        if (pad === void 0) { pad = \"0\"; }\n\n        var result = n.toString(16);\n        while (width > result.length) {\n            result = pad + result;\n        }\n\n        return result;\n    }\n\n    var HSV = BaseColor.extend({\n        init: function(h, s, v, a) {\n            BaseColor.fn.init.call(this);\n\n            this.h = h;\n            this.s = s;\n            this.v = v;\n            this.a = a;\n        },\n\n        toRGB: function() {\n            var ref = this;\n            var h = ref.h;\n            var s = ref.s;\n            var v = ref.v;\n            var r, g, b;\n\n            if (s === 0) {\n                r = g = b = v;\n            } else {\n                h /= 60;\n\n                var i = Math.floor(h);\n                var f = h - i;\n                var p = v * (1 - s);\n                var q = v * (1 - s * f);\n                var t = v * (1 - s * (1 - f));\n\n                switch (i) {\n                case 0: r = v; g = t; b = p; break;\n                case 1: r = q; g = v; b = p; break;\n                case 2: r = p; g = v; b = t; break;\n                case 3: r = p; g = q; b = v; break;\n                case 4: r = t; g = p; b = v; break;\n                default: r = v; g = p; b = q; break;\n                }\n            }\n\n            return new RGB(r, g, b, this.a);\n        },\n\n        toHSL: function() {\n            return this.toRGB().toHSL();\n        },\n\n        toBytes: function() {\n            return this.toRGB().toBytes();\n        }\n    });\n\n    var HSL = BaseColor.extend({\n        init: function(h, s, l, a) {\n            BaseColor.fn.init.call(this);\n\n            this.h = h;\n            this.s = s;\n            this.l = l;\n            this.a = a;\n        },\n\n        toRGB: function() {\n            var h = this.h / 360;\n            var s = this.s / 100;\n            var l = this.l / 100;\n            var r, g, b;\n\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                var p = 2 * l - q;\n                r = hue2rgb(p, q, h + 1 / 3);\n                g = hue2rgb(p, q, h);\n                b = hue2rgb(p, q, h - 1 / 3);\n            }\n\n            return new RGB(r, g, b, this.a);\n        },\n\n        toHSV: function() {\n            return this.toRGB().toHSV();\n        },\n\n        toBytes: function() {\n            return this.toRGB().toBytes();\n        }\n    });\n\n    function hue2rgb(p, q, s) {\n        var t = s;\n\n        if (t < 0) {\n            t += 1;\n        }\n\n        if (t > 1) {\n            t -= 1;\n        }\n\n        if (t < 1 / 6) {\n            return p + (q - p) * 6 * t;\n        }\n\n        if (t < 1 / 2) {\n            return q;\n        }\n\n        if (t < 2 / 3) {\n            return p + (q - p) * (2 / 3 - t) * 6;\n        }\n\n        return p;\n    }\n\n    function alphaFromHex(a) {\n        return parseFloat(parseFloat(parseInt(a, 16) / 255 ).toFixed(3));\n    }\n\n    function parseColor(value, safe) {\n        var m, ret;\n\n        if (value == null || value === \"none\") {\n            return null;\n        }\n\n        if (value instanceof BaseColor) {\n            return value;\n        }\n\n        var color = value.toLowerCase();\n        if ((m = matchNamedColor(color))) {\n            if (m[1] === \"transparent\") {\n                color = new RGB(1, 1, 1, 0);\n            } else {\n                color = parseColor(namedColors[m[1]], safe);\n            }\n            color.match = [ m[1] ];\n            return color;\n        }\n        if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\\b/i.exec(color))) {\n            ret = new Bytes(parseInt(m[1], 16),\n                parseInt(m[2], 16),\n                parseInt(m[3], 16), 1);\n        } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\\b/i.exec(color))) {\n            ret = new Bytes(parseInt(m[1] + m[1], 16),\n                parseInt(m[2] + m[2], 16),\n                parseInt(m[3] + m[3], 16), 1);\n        } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])\\b/i.exec(color))) { // Parse 4 digit hex color\n            ret = new Bytes(parseInt(m[1] + m[1], 16),\n                parseInt(m[2] + m[2], 16),\n                parseInt(m[3] + m[3], 16),\n                alphaFromHex(m[4] + m[4]));\n        } else if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\\b/i.exec(color))) { // Parse 8 digit hex color\n            ret = new Bytes(parseInt(m[1], 16),\n                parseInt(m[2], 16),\n                parseInt(m[3], 16),\n                alphaFromHex(m[4]));\n        } else if ((m = /^rgb\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*\\)/.exec(color))) {\n            ret = new Bytes(parseInt(m[1], 10),\n                parseInt(m[2], 10),\n                parseInt(m[3], 10), 1);\n        } else if ((m = /^rgba\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color))) {\n            ret = new Bytes(parseInt(m[1], 10),\n                parseInt(m[2], 10),\n                parseInt(m[3], 10), parseFloat(m[4]));\n        } else if ((m = /^rgb\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*\\)/.exec(color))) {\n            ret = new RGB(parseFloat(m[1]) / 100,\n                parseFloat(m[2]) / 100,\n                parseFloat(m[3]) / 100, 1);\n        } else if ((m = /^rgba\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color))) {\n            ret = new RGB(parseFloat(m[1]) / 100,\n                parseFloat(m[2]) / 100,\n                parseFloat(m[3]) / 100, parseFloat(m[4]));\n        }\n\n        if (ret) {\n            ret.match = m;\n        } else if (!safe) {\n            throw new Error(\"Cannot parse color: \" + color);\n        }\n\n        return ret;\n    }\n\n    var DARK_TRESHOLD = 180;\n\n    var Color = Class.extend({\n        init: function(value) {\n            var this$1$1 = this;\n\n            if (arguments.length === 1) {\n                var formats = Color.formats;\n                var resolvedColor = this.resolveColor(value);\n\n                for (var idx = 0; idx < formats.length; idx++) {\n                    var formatRegex = formats[idx].re;\n                    var processor = formats[idx].process;\n                    var parts = formatRegex.exec(resolvedColor);\n\n                    if (parts) {\n                        var channels = processor(parts);\n                        this$1$1.r = channels[0];\n                        this$1$1.g = channels[1];\n                        this$1$1.b = channels[2];\n                    }\n                }\n            } else {\n                this.r = arguments[0];\n                this.g = arguments[1];\n                this.b = arguments[2];\n            }\n\n            this.r = this.normalizeByte(this.r);\n            this.g = this.normalizeByte(this.g);\n            this.b = this.normalizeByte(this.b);\n        },\n\n        toHex: function() {\n            var pad = this.padDigit;\n            var r = this.r.toString(16);\n            var g = this.g.toString(16);\n            var b = this.b.toString(16);\n\n            return \"#\" + pad(r) + pad(g) + pad(b);\n        },\n\n        resolveColor: function(value) {\n            var color = value || \"black\";\n\n            if (color.charAt(0) === \"#\") {\n                color = color.substr(1, 6);\n            }\n\n            color = color.replace(/ /g, \"\");\n            color = color.toLowerCase();\n            color = Color.namedColors[color] || color;\n\n            return color;\n        },\n\n        normalizeByte: function(value) {\n            if (value < 0 || isNaN(value)) {\n                return 0;\n            }\n\n            return value > 255 ? 255 : value;\n        },\n\n        padDigit: function(value) {\n            return (value.length === 1) ? \"0\" + value : value;\n        },\n\n        brightness: function(value) {\n            var round = Math.round;\n\n            this.r = round(this.normalizeByte(this.r * value));\n            this.g = round(this.normalizeByte(this.g * value));\n            this.b = round(this.normalizeByte(this.b * value));\n\n            return this;\n        },\n\n        percBrightness: function() {\n            return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n        },\n\n        isDark: function() {\n            return this.percBrightness() < DARK_TRESHOLD;\n        }\n    });\n\n    Color.fromBytes = function(r, g, b, a) {\n        return new Bytes(r, g, b, a != null ? a : 1);\n    };\n\n    Color.fromRGB = function(r, g, b, a) {\n        return new RGB(r, g, b, a != null ? a : 1);\n    };\n\n    Color.fromHSV = function(h, s, v, a) {\n        return new HSV(h, s, v, a != null ? a : 1);\n    };\n\n    Color.fromHSL = function(h, s, l, a) {\n        return new HSL(h, s, l, a != null ? a : 1);\n    };\n\n    Color.formats = [ {\n        re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n        process: function(parts) {\n            return [\n                parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n            ];\n        }\n    }, {\n        re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n        process: function(parts) {\n            return [\n                parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n            ];\n        }\n    }, {\n        re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n        process: function(parts) {\n            return [\n                parseInt(parts[1] + parts[1], 16),\n                parseInt(parts[2] + parts[2], 16),\n                parseInt(parts[3] + parts[3], 16)\n            ];\n        }\n    } ];\n\n    Color.namedColors = namedColors;\n\n    kendo.deepExtend(kendo, {\n        parseColor: parseColor,\n        namedColors: namedColors,\n        Color: Color\n    });\n\n}));\n"]}