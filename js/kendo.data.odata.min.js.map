{"version":3,"sources":["raw-js/kendo.data.odata.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodata","odata","js","this","$","undefined$1","kendo","window","extend","NEWLINE","DOUBLELINE","isFunction","odataFilters","eq","neq","gt","gte","lt","lte","contains","doesnotcontain","endswith","startswith","isnull","isnotnull","isnullorempty","isnotnullorempty","isempty","isnotempty","odataFiltersVersionFour","mappers","pageSize","noop","page","filter","params","useVersionFour","toOdataFilter","$filter","sort","orderby","expr","map","value","order","field","replace","dir","join","$orderby","skip","$skip","take","$top","defaultDataType","read","dataType","useOdataFour","idx","length","type","format","operator","ignoreCase","result","logic","filters","timezone","apply","push","stripMetadata","obj","name","indexOf","hex16","Math","floor","random","toString","substr","createBoundary","prefix","createDelimeter","boundary","close","createCommand","transport","item","httpVerb","command","transportUrl","options","url","commandPrefix","getOperationHeader","changeset","changeId","header","processCollection","colection","skipContent","requestBody","getBoundary","collection","content","i","stringify","getOperations","data","schemas","d","results","total","transports","cache","jsonp","update","contentType","create","destroy","parameterMap","option","$inlinecount","$format","Error","Array","isArray","batch","$count","x","substring","submit","e","colections","batchURL","headers","updated","destroyed","created","createBatchRequest","collections","ajax","success","response","current","responses","responseText","changeBody","status","code","marker","jsonModel","responseMarkers","match","markerIndex","models","passed","lastIndexOf","pop","parseFloat","JSON","parse","parseBatchResponse","index","error","jQuery"],"mappings":"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","file":"kendo.data.odata.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodata = global.kendodata || {}, global.kendodata.odata = global.kendodata.odata || {}, global.kendodata.odata.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"data.odata\",\n        name: \"OData\",\n        category: \"framework\",\n        depends: [ \"core\" ],\n        hidden: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            NEWLINE = \"\\r\\n\",\n            DOUBLELINE = \"\\r\\n\\r\\n\",\n            isFunction = kendo.isFunction,\n            odataFilters = {\n                eq: \"eq\",\n                neq: \"ne\",\n                gt: \"gt\",\n                gte: \"ge\",\n                lt: \"lt\",\n                lte: \"le\",\n                contains: \"substringof\",\n                doesnotcontain: \"substringof\",\n                endswith: \"endswith\",\n                startswith: \"startswith\",\n                isnull: \"eq\",\n                isnotnull: \"ne\",\n                isnullorempty: \"eq\",\n                isnotnullorempty: \"ne\",\n                isempty: \"eq\",\n                isnotempty: \"ne\"\n            },\n            odataFiltersVersionFour = extend({}, odataFilters, {\n                contains: \"contains\"\n            }),\n            mappers = {\n                pageSize: $.noop,\n                page: $.noop,\n                filter: function(params, filter, useVersionFour) {\n                    if (filter) {\n                        filter = toOdataFilter(filter, useVersionFour);\n                        if (filter) {\n                            params.$filter = filter;\n                        }\n                    }\n                },\n                sort: function(params, orderby) {\n                    var expr = $.map(orderby, function(value) {\n                        var order = value.field.replace(/\\./g, \"/\");\n\n                        if (value.dir === \"desc\") {\n                            order += \" desc\";\n                        }\n\n                        return order;\n                    }).join(\",\");\n\n                    if (expr) {\n                        params.$orderby = expr;\n                    }\n                },\n                skip: function(params, skip) {\n                    if (skip) {\n                        params.$skip = skip;\n                    }\n                },\n                take: function(params, take) {\n                    if (take) {\n                        params.$top = take;\n                    }\n                }\n            },\n            defaultDataType = {\n                read: {\n                    dataType: \"jsonp\"\n                }\n            };\n\n        function toOdataFilter(filter, useOdataFour) {\n            var result = [],\n                logic = filter.logic || \"and\",\n                idx,\n                length,\n                field,\n                type,\n                format,\n                operator,\n                value,\n                ignoreCase,\n                filters = filter.filters;\n\n            for (idx = 0, length = filters.length; idx < length; idx++) {\n                filter = filters[idx];\n                field = filter.field;\n                value = filter.value;\n                operator = filter.operator;\n\n                if (filter.filters) {\n                    filter = toOdataFilter(filter, useOdataFour);\n                } else {\n                    ignoreCase = filter.ignoreCase;\n                    field = field.replace(/\\./g, \"/\");\n                    filter = odataFilters[operator];\n                    if (useOdataFour) {\n                        filter = odataFiltersVersionFour[operator];\n                    }\n\n                    if (operator === \"isnullorempty\") {\n                        filter = kendo.format(\"{0} {1} null or {0} {1} ''\", field, filter);\n                    } else if (operator === \"isnotnullorempty\") {\n                        filter = kendo.format(\"{0} {1} null and {0} {1} ''\", field, filter);\n                    } else if (operator === \"isnull\" || operator === \"isnotnull\") {\n                        filter = kendo.format(\"{0} {1} null\", field, filter);\n                    } else if (operator === \"isempty\" || operator === \"isnotempty\") {\n                        filter = kendo.format(\"{0} {1} ''\", field, filter);\n                    } else if (filter && value !== undefined$1) {\n                        type = kendo.type(value);\n                        if (type === \"string\") {\n                            format = \"'{1}'\";\n                            value = value.replace(/'/g, \"''\");\n\n                            if (ignoreCase === true) {\n                                field = \"tolower(\" + field + \")\";\n                            }\n\n                        } else if (type === \"date\") {\n                            if (useOdataFour) {\n                                format = \"{1:yyyy-MM-ddTHH:mm:ss+00:00}\";\n                                value = kendo.timezone.apply(value, 'Etc/UTC');\n                            } else {\n                                format = \"datetime'{1:yyyy-MM-ddTHH:mm:ss}'\";\n                            }\n                        } else {\n                            format = \"{1}\";\n                        }\n\n                        if (filter.length > 3) {\n                            if (filter !== \"substringof\") {\n                                format = \"{0}({2},\" + format + \")\";\n                            } else {\n                                format = \"{0}(\" + format + \",{2})\";\n                                if (operator === \"doesnotcontain\") {\n                                    if (useOdataFour) {\n                                        format = \"{0}({2},'{1}') eq -1\";\n                                        filter = \"indexof\";\n                                    } else {\n                                        format += \" eq false\";\n                                    }\n                                }\n                            }\n                        } else {\n                            format = \"{2} {0} \" + format;\n                        }\n\n                        filter = kendo.format(format, filter, value, field);\n                    }\n                }\n\n                result.push(filter);\n            }\n\n            filter = result.join(\" \" + logic + \" \");\n\n            if (result.length > 1) {\n                filter = \"(\" + filter + \")\";\n            }\n\n            return filter;\n        }\n\n        function stripMetadata(obj) {\n            for (var name in obj) {\n                if (name.indexOf(\"@odata\") === 0) {\n                    delete obj[name];\n                }\n            }\n        }\n\n        function hex16() {\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substr(1);\n        }\n\n        function createBoundary(prefix) {\n            return prefix + hex16() + '-' + hex16() + '-' + hex16();\n        }\n\n        function createDelimeter(boundary, close) {\n            var result = NEWLINE + \"--\" + boundary;\n\n            if (close) {\n                result += \"--\";\n            }\n\n            return result;\n        }\n\n        function createCommand(transport, item, httpVerb, command) {\n             var transportUrl = transport.options[command].url;\n             var commandPrefix = kendo.format(\"{0} \", httpVerb);\n\n             if (isFunction(transportUrl)) {\n                 return commandPrefix + transportUrl(item);\n             } else {\n                 return commandPrefix + transportUrl;\n             }\n        }\n\n        function getOperationHeader(changeset, changeId) {\n            var header = \"\";\n\n            header += createDelimeter(changeset, false);\n            header += NEWLINE + 'Content-Type: application/http';\n            header += NEWLINE + 'Content-Transfer-Encoding: binary';\n            header += NEWLINE + 'Content-ID: ' + changeId;\n\n            return header;\n        }\n\n        function getOperationContent(item) {\n            var content = \"\";\n\n            content += NEWLINE + \"Content-Type: application/json;odata=minimalmetadata\";\n            content += NEWLINE + \"Prefer: return=representation\";\n            content += DOUBLELINE + kendo.stringify(item);\n\n            return content;\n        }\n\n        function getOperations(collection, changeset, changeId, command, transport, skipContent) {\n            var requestBody = \"\";\n\n            for (var i = 0; i < collection.length; i++) {\n                requestBody += getOperationHeader(changeset, changeId);\n                requestBody += DOUBLELINE + createCommand(transport, collection[i], transport.options[command].type, command) + ' HTTP/1.1';\n                if (!skipContent) {\n                    requestBody += getOperationContent(collection[i]);\n                }\n                requestBody += NEWLINE;\n                changeId++;\n            }\n\n            return requestBody;\n        }\n\n        function processCollection(colection, boundary, changeset, changeId, transport, command, skipContent) {\n            var requestBody = \"\";\n\n            requestBody += getBoundary(boundary, changeset);\n            requestBody += getOperations(colection, changeset, changeId, command, transport, skipContent);\n            requestBody += createDelimeter(changeset, true);\n            requestBody += NEWLINE;\n\n            return requestBody;\n        }\n\n        function getBoundary(boundary,changeset) {\n            var requestBody = \"\";\n\n            requestBody += \"--\" + boundary + NEWLINE;\n            requestBody += \"Content-Type: multipart/mixed; boundary=\" + changeset + NEWLINE;\n\n            return requestBody;\n        }\n\n        function createBatchRequest(transport, colections) {\n    \t\tvar options = extend({}, transport.options.batch);\n            var boundary = createBoundary(\"sf_batch_\");\n            var requestBody = \"\";\n            var changeId = 0;\n            var batchURL = transport.options.batch.url;\n            var changeset = createBoundary(\"sf_changeset_\");\n\n            options.type = transport.options.batch.type;\n            options.url = isFunction(batchURL) ? batchURL() : batchURL;\n    \t\toptions.headers = extend(options.headers || {}, {\n    \t\t\t\"Content-Type\": \"multipart/mixed; boundary=\" + boundary\n    \t\t});\n\n            if (colections.updated.length) {\n                requestBody += processCollection(colections.updated, boundary, changeset, changeId, transport, \"update\", false);\n                changeId += colections.updated.length;\n                changeset = createBoundary(\"sf_changeset_\");\n            }\n\n            if (colections.destroyed.length) {\n                requestBody += processCollection(colections.destroyed, boundary, changeset, changeId, transport, \"destroy\", true);\n                changeId += colections.destroyed.length;\n                changeset = createBoundary(\"sf_changeset_\");\n            }\n\n            if (colections.created.length) {\n                requestBody += processCollection(colections.created, boundary, changeset, changeId, transport, \"create\", false);\n            }\n\n            requestBody += createDelimeter(boundary, true);\n\n            options.data = requestBody;\n\n            return options;\n        }\n\n        function parseBatchResponse(responseText) {\n            var responseMarkers = responseText.match(/--changesetresponse_[a-z0-9-]+$/gm);\n            var markerIndex = 0;\n            var collections = [];\n            var changeBody;\n            var status;\n            var code;\n            var marker;\n            var jsonModel;\n\n            collections.push({ models: [], passed: true });\n\n            for (var i = 0; i < responseMarkers.length; i++) {\n                marker = responseMarkers[i];\n                if (marker.lastIndexOf('--', marker.length - 1)) {\n                    if (i < responseMarkers.length - 1) {\n                        collections.push({ models: [], passed: true });\n                    }\n                    continue;\n                }\n\n                if (!markerIndex) {\n                    markerIndex = responseText.indexOf(marker);\n                } else {\n                    markerIndex = responseText.indexOf(marker, markerIndex + marker.length);\n                }\n\n                changeBody = responseText.substring(markerIndex, responseText.indexOf(\"--\", markerIndex + 1));\n                status = changeBody.match(/^HTTP\\/1\\.\\d (\\d{3}) (.*)$/gm).pop();\n                code = kendo.parseFloat(status.match(/\\d{3}/g).pop());\n\n                if (code >= 200 && code <= 299) {\n                    jsonModel = changeBody.match(/\\{.*\\}/gm);\n                    if (jsonModel) {\n                        collections[collections.length - 1].models.push(JSON.parse(jsonModel[0]));\n                    }\n                } else {\n                    collections[collections.length - 1].passed = false;\n                }\n\n            }\n\n            return collections;\n        }\n\n        extend(true, kendo.data, {\n            schemas: {\n                odata: {\n                    type: \"json\",\n                    data: function(data) {\n                        return data.d.results || [data.d];\n                    },\n                    total: \"d.__count\"\n                }\n            },\n            transports: {\n                odata: {\n                    read: {\n                        cache: true, // to prevent jQuery from adding cache buster\n                        dataType: \"jsonp\",\n                        jsonp: \"$callback\"\n                    },\n                    update: {\n                        cache: true,\n                        dataType: \"json\",\n                        contentType: \"application/json\", // to inform the server the the request body is JSON encoded\n                        type: \"PUT\" // can be PUT or MERGE\n                    },\n                    create: {\n                        cache: true,\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        type: \"POST\" // must be POST to create new entity\n                    },\n                    destroy: {\n                        cache: true,\n                        dataType: \"json\",\n                        type: \"DELETE\"\n                    },\n                    parameterMap: function(options, type, useVersionFour) {\n                        var params,\n                            value,\n                            option,\n                            dataType;\n\n                        options = options || {};\n                        type = type || \"read\";\n                        dataType = (this.options || defaultDataType)[type];\n                        dataType = dataType ? dataType.dataType : \"json\";\n\n                        if (type === \"read\") {\n                            params = {\n                                $inlinecount: \"allpages\"\n                            };\n\n                            if (dataType != \"json\") {\n                                params.$format = \"json\";\n                            }\n\n                            for (option in options) {\n                                if (mappers[option]) {\n                                    mappers[option](params, options[option], useVersionFour);\n                                } else {\n                                    params[option] = options[option];\n                                }\n                            }\n                        } else {\n                            if (dataType !== \"json\") {\n                                throw new Error(\"Only json dataType can be used for \" + type + \" operation.\");\n                            }\n\n                            if (type !== \"destroy\") {\n                                for (option in options) {\n                                    value = options[option];\n                                    if (typeof value === \"number\") {\n                                        options[option] = value + \"\";\n                                    }\n                                }\n\n                                params = kendo.stringify(options);\n                            }\n                        }\n\n                        return params;\n                    }\n                }\n            }\n        });\n\n        extend(true, kendo.data, {\n            schemas: {\n                \"odata-v4\": {\n                    type: \"json\",\n                    data: function(data) {\n                        if (Array.isArray(data)) {\n                            for (var i = 0; i < data.length; i++) {\n                                stripMetadata(data[i]);\n                            }\n                            return data;\n                        } else {\n                            data = $.extend({}, data);\n                            stripMetadata(data);\n\n                            if (data.value) {\n                                return data.value;\n                            }\n                            return [data];\n                        }\n                    },\n                    total: function(data) {\n                        return data[\"@odata.count\"];\n                    }\n                }\n            },\n            transports: {\n                \"odata-v4\": {\n                    batch: {\n                        type: \"POST\"\n                    },\n                    read: {\n                        cache: true, // to prevent jQuery from adding cache buster\n                        dataType: \"json\"\n                    },\n                    update: {\n                        cache: true,\n                        dataType: \"json\",\n                        contentType: \"application/json;IEEE754Compatible=true\", // to inform the server the the request body is JSON encoded\n                        type: \"PUT\" // can be PUT or MERGE\n                    },\n                    create: {\n                        cache: true,\n                        dataType: \"json\",\n                        contentType: \"application/json;IEEE754Compatible=true\",\n                        type: \"POST\" // must be POST to create new entity\n                    },\n                    destroy: {\n                        cache: true,\n                        dataType: \"json\",\n                        type: \"DELETE\"\n                    },\n                    parameterMap: function(options, type) {\n                        var result = kendo.data.transports.odata.parameterMap(options, type, true);\n                        if (type == \"read\") {\n                            result.$count = true;\n                            delete result.$inlinecount;\n                        }\n\n    \t\t\t\t\tif (result && result.$filter) {\n    \t\t\t\t\t\t// Remove the single quotation marks around the GUID (OData v4).\n    \t\t\t\t\t\tresult.$filter = result.$filter.replace(/('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}')/ig, function(x) {\n    \t\t\t\t\t\t\treturn x.substring(1, x.length - 1);\n    \t\t\t\t\t\t});\n    \t\t\t\t\t}\n\n                        return result;\n                    },\n                    submit: function(e) {\n                        var that = this;\n                        var options = createBatchRequest(that, e.data);\n                        var collections = e.data;\n\n                        if (!collections.updated.length && !collections.destroyed.length && !collections.created.length) {\n                            return;\n                        }\n\n                        $.ajax(extend(true, {}, {\n                            success: function(response) {\n                                var responses = parseBatchResponse(response);\n                                var index = 0;\n                                var current;\n\n                                if (collections.updated.length) {\n                                    current = responses[index];\n                                    if (current.passed) {\n                                        // Pass either the obtained models or an empty array if only status codes are returned.\n                                        e.success(current.models.length ? current.models : [], \"update\");\n                                    }\n                                    index++;\n                                }\n                                if (collections.destroyed.length) {\n                                    current = responses[index];\n                                    if (current.passed) {\n                                        // For delete operations OData returns only status codes.\n                                        // Passing empty array to datasource will force it to correctly remove the deleted items from the pristine collection.\n                                        e.success([], \"destroy\");\n                                    }\n                                    index++;\n                                }\n                                if (collections.created.length) {\n                                    current = responses[index];\n                                    if (current.passed) {\n                                        e.success(current.models, \"create\");\n                                    }\n                                }\n                            },\n                            error: function(response, status, error) {\n                                e.error(response, status, error);\n                            }\n                        }, options));\n                    }\n                }\n            }\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}