{"version":3,"sources":["raw-js/kendo.window.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendowindow","js","this","$","undefined$1","templates","kendo","window","Widget","ui","TabKeyTrap","Popup","Draggable","isPlainObject","activeElement","_activeElement","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","each","template","BODY","NS","MODAL_NS","KWINDOW","KWINDOWTITLE","KWINDOWTITLEBAR","KWINDOWCONTENT","KWINDOWRESIZEHANDLES","KOVERLAY","KWINDOWMINIMIZED","KCONTENTFRAME","LOADINGICONCLASS","KHOVERSTATE","KFOCUSEDSTATE","MAXIMIZEDSTATE","INLINE_FLEX","VISIBLE","KHIDDEN","HIDDEN","CURSOR","OPEN","ACTIVATE","DEACTIVATE","CLOSE","REFRESH","RESIZESTART","RESIZEEND","DRAGSTART","DRAGEND","RESTORE","ERROR","OVERFLOW","DATADOCOVERFLOWRULE","ZINDEX","MINIMIZE_MAXIMIZEICONSELECTORS","KPINICONCLASSSELECTOR","KUNPINICONCLASSSELECTOR","PIN_UNPINICONCLASSSELECTOR","TITLEBAR_BUTTONSSELECTOR","REFRESHICONSELECTOR","WINDOWEVENTSHANDLED","zero","isLocalUrl","SIZE","small","medium","large","defined","x","toInt","element","property","parseInt","css","constrain","value","low","high","isNaN","toString","indexOf","Math","max","min","Infinity","executableScript","type","toLowerCase","getPosition","elem","result","top","offsetTop","left","offsetLeft","parent","offsetParent","parentOverflowX","parentOverflowY","scrollTop","scrollLeft","Window","init","options","wrapper","visibility","display","position","content","windowContent","globalWindow","id","that","offset","suppressActions","actions","length","fn","call","appendTo","containment","draggable","first","url","find","filter","remove","is","document","body","contains","visible","closest","themeColor","addClass","getValidCssClass","attr","_createWindow","title","_dimensions","_footerTemplate","append","_footerMessages","minTop","minLeft","maxTop","maxLeft","_position","refresh","toFront","modal","children","_overlay","opacity","on","_buttonEnter","bind","_buttonLeave","_windowActionHandler","_keydown","_focus","_blur","_keydownContent","data","widgetInstance","not","i","_resizable","_draggable","pinned","pin","role","add","support","mousedown","touchScroller","_resizeHandler","_onDocumentResize","_marker","guid","substring","trigger","notify","_tabKeyTrap","trap","shouldTrap","_showWatermarkOverlay","e","currentTarget","removeClass","width","height","maxHeight","sizeClass","size","dimensions","contentBoxSizing","lrBorderWidth","tbBorderWidth","paddingTop","_isPinned","_updateBoundaries","maxWidth","minWidth","minHeight","hide","containmentTop","containmentLeft","parseFloat","Number","replace","innerWidth","innerHeight","clientWidth","scrollbar","clientHeight","_animationOptions","animation","open","effects","close","_resize","resize","resizable","resizing","off","destroy","target","toggleMaximization","split","index","handler","resizeHandle","WindowResizing","dragging","WindowDragging","dragHandle","clickMoveClick","_actions","icon","container","windowSpecificCommands","icons","maximize","custom","map","action","name","html","render","setOptions","doc","cachedOptions","JSON","parse","stringify","_containerScrollTop","_containerScrollLeft","scrollable","restore","_enableDocumentScrolling","events","zoom","direction","fade","duration","properties","scale","autoFocus","isMaximized","isMinimized","_closable","inArray","keys","keyCode","ESC","stopPropagation","_close","handled","newWidth","newHeight","w","h","distance","_closing","altKey","unpin","UP","DOWN","minimize","getOffset","ctrlKey","LEFT","RIGHT","preventDefault","overlay","zIndex","insertBefore","preventScroll","_stopDocumentScrolling","_actionForIcon","exec","className","_modals","windowInstance","windowElements","modals","_object","push","sort","a","b","style","widget","center","newTop","newLeft","documentWindow","_scrollIsAppended","encoded","titleBar","titleElement","arguments","text","htmlEncode","prepend","titlebar","scrollContainer","empty","otherModalsVisible","showOptions","contentElement","kendoStop","Fade","overlayFx","fx","fadeIn","endValue","play","show","kendoAnimate","complete","_activate","_removeOverlay","suppressAnimation","hideOverlay","hideOptions","fadeOut","startValue","last","systemTriggered","defaultPrevented","userTriggered","reverse","_deactivate","iframe","lastModal","_actionable","_shouldFocus","active","avoidFocus","currentWindow","containmentContext","openAnimation","originalZIndex","windowObject","zIndexNew","setTimeout","focus","windowTop","restoreOptions","end","removeAttr","_sizingAction","actionId","callback","eq","before","toggle","_storeOverflowRule","$body","$html","_restoreOverflowRule","$element","_isOverflowStored","overflowRule","get","overflow","removeData","win","pinIcon","wnd","zoomLevel","showIframe","initOptions","src","contentFrame","_triggerRefresh","_ajaxRequest","toggleClass","_ajaxComplete","clearTimeout","_loadingIconTimeout","_ajaxError","xhr","status","_ajaxSuccess","contentTemplate","prop","_showLoading","ajax","dataType","cache","error","success","_destroy","unbind","iframeSrcAttributes","contentHtml","isRtl","getAttribute","hasClass","editor","owner","_preventDragging","group","dragstart","drag","dragend","userEvents","addOverlay","removeOverlay","dragcancel","iconName","renderButton","fillMode","prototype","elementPadding","initialPosition","resizeDirection","initialSize","containerOffset","marginTop","marginLeft","test","wrapperPosition","relativeElMarginLeft","relativeElMarginTop","_relativeElMarginLeft","_relativeElMarginTop","windowBottom","windowRight","rtl","leftRtlOffset","scrollOffset","location","y","newWindowTop","reset","initialWindowPosition","initialPointerPosition","startPosition","client","axis","transforms","_finishDrag","plugin","jQuery"],"mappings":"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","file":"kendo.window.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.draganddrop.js'), require('kendo.popup.js'), require('kendo.icons.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.draganddrop', 'kendo.popup', 'kendo.icons', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendowindow = global.kendowindow || {}, global.kendowindow.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n            id: \"window\",\n            name: \"Window\",\n            category: \"web\",\n            description: \"The Window widget displays content in a modal or non-modal HTML window.\",\n            depends: [ \"draganddrop\", \"popup\", \"icons\" ],\n            features: [ {\n                id: \"window-fx\",\n                name: \"Animation\",\n                description: \"Support for animation\",\n                depends: [ \"fx\" ]\n            } ]\n        };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Widget = kendo.ui.Widget,\n                TabKeyTrap = kendo.ui.Popup.TabKeyTrap,\n                Draggable = kendo.ui.Draggable,\n                isPlainObject = $.isPlainObject,\n                activeElement = kendo._activeElement,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                each = $.each,\n                template = kendo.template,\n                BODY = \"body\",\n                templates,\n                NS = \".kendoWindow\",\n                MODAL_NS = \".kendoWindowModal\",\n                // classNames\n                KWINDOW = \".k-window\",\n                KWINDOWTITLE = \".k-window-title\",\n                KWINDOWTITLEBAR = KWINDOWTITLE + \"bar\",\n                KWINDOWCONTENT = \".k-window-content\",\n                KDIALOGCONTENT = \".k-dialog-content\",\n                KWINDOWRESIZEHANDLES = \".k-resize-handle\",\n                KOVERLAY = \".k-overlay\",\n                KWINDOWMINIMIZED = \"k-window-minimized\",\n                KCONTENTFRAME = \"k-content-frame\",\n                LOADINGICONCLASS = \"k-i-loading\",\n                KHOVERSTATE = \"k-hover\",\n                KFOCUSEDSTATE = \"k-focus\",\n                MAXIMIZEDSTATE = \"k-window-maximized\",\n                INLINE_FLEX = \"k-display-inline-flex\",\n                // constants\n                VISIBLE = \":visible\",\n                KHIDDEN = \"k-hidden\",\n                HIDDEN = \"hidden\",\n                CURSOR = \"cursor\",\n                // events\n                OPEN = \"open\",\n                ACTIVATE = \"activate\",\n                DEACTIVATE = \"deactivate\",\n                CLOSE = \"close\",\n                REFRESH = \"refresh\",\n                MINIMIZE = \"minimize\",\n                MAXIMIZE = \"maximize\",\n                RESIZESTART = \"resizeStart\",\n                RESIZE = \"resize\",\n                RESIZEEND = \"resizeEnd\",\n                DRAGSTART = \"dragstart\",\n                DRAGEND = \"dragend\",\n                RESTORE = \"restore\",\n                KENDOKEYDOWN = \"kendoKeydown\",\n                ERROR = \"error\",\n                OVERFLOW = \"overflow\",\n                DATADOCOVERFLOWRULE = \"original-overflow-rule\",\n                ZINDEX = \"zIndex\",\n                MINIMIZE_MAXIMIZEICONSELECTORS = \".k-window-titlebar-actions .k-i-window-minimize,.k-window-titlebar-actions .k-i-window,.k-window-titlebar-actions .k-svg-i-window-minimize,.k-window-titlebar-actions .k-svg-i-window\",\n                KPINICONCLASSSELECTOR = \".k-i-pin,.k-svg-i-pin\",\n                KUNPINICONCLASSSELECTOR = \".k-i-unpin,.k-svg-i-unpin\",\n                PIN_UNPINICONCLASSSELECTOR = KPINICONCLASSSELECTOR + \",\" + KUNPINICONCLASSSELECTOR,\n                TITLEBAR_BUTTONSSELECTOR = \".k-window-titlebar .k-window-titlebar-action\",\n                REFRESHICONSELECTOR = \".k-window-titlebar .k-i-arrow-rotate-cw,.k-window-titlebar .k-svg-i-arrow-rotate-cw\",\n                WINDOWEVENTSHANDLED = \"WindowEventsHandled\",\n                zero = /^0[a-z]*$/i,\n                isLocalUrl = kendo.isLocalUrl,\n                SIZE = {\n                    small: \"k-window-sm\",\n                    medium: \"k-window-md\",\n                    large: \"k-window-lg\"\n                };\n\n            function defined(x) {\n                return (typeof x != \"undefined\");\n            }\n\n            function toInt(element, property) {\n                return parseInt(element.css(property), 10) || 0;\n            }\n\n            function constrain(value, low, high) {\n                var normalizedValue;\n\n                if (value && isNaN(value) && value.toString().indexOf(\"px\") < 0) {\n                    normalizedValue = value;\n                } else {\n                    normalizedValue = Math.max(\n                        Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)),\n                        low === -Infinity ? low : parseInt(low, 10)\n                    );\n                }\n\n                return normalizedValue;\n            }\n\n            function executableScript() {\n                return !this.type || this.type.toLowerCase().indexOf(\"script\") >= 0;\n            }\n\n\n            function getPosition(elem) {\n                var result = { top: elem.offsetTop, left: elem.offsetLeft },\n                    parent = elem.offsetParent;\n\n                while (parent) {\n                    result.top += parent.offsetTop;\n                    result.left += parent.offsetLeft;\n\n                    var parentOverflowX = $(parent).css(\"overflowX\");\n                    var parentOverflowY = $(parent).css(\"overflowY\");\n\n                    if (parentOverflowY === \"auto\" || parentOverflowY === \"scroll\") {\n                        result.top -= parent.scrollTop;\n                    }\n\n                    if (parentOverflowX === \"auto\" || parentOverflowX === \"scroll\") {\n                        result.left -= parent.scrollLeft;\n                    }\n\n                    parent = parent.offsetParent;\n                }\n\n                return result;\n            }\n\n            var Window = Widget.extend({\n                init: function(element, options) {\n                    var that = this,\n                        wrapper,\n                        offset = {},\n                        visibility, display, position,\n                        isVisible = false,\n                        content,\n                        windowContent,\n                        windowFrame,\n                        globalWindow,\n                        suppressActions = options && options.actions && !options.actions.length,\n                        id;\n\n                    Widget.fn.init.call(that, element, options);\n                    options = that.options;\n                    position = options.position;\n                    element = that.element;\n                    content = options.content;\n                    globalWindow = $(window);\n\n                    if (suppressActions) {\n                        options.actions = [];\n                    }\n\n                    that.appendTo = $(options.appendTo);\n\n                    that.containment = options.draggable.containment ? $(options.draggable.containment).first() : null;\n\n                    if (content && !isPlainObject(content)) {\n                        content = options.content = { url: content };\n                    }\n\n                    // remove script blocks to prevent double-execution\n                    element.find(\"script\").filter(executableScript).remove();\n\n                    if (!element.parent().is(that.appendTo) && !that.containment && (position.top === undefined$1 || position.left === undefined$1)) {\n                        if (element.is(VISIBLE)) {\n                            offset = element.offset();\n                            isVisible = true;\n                        } else {\n                            visibility = element.css(\"visibility\");\n                            display = element.css(\"display\");\n\n                            element.css({ visibility: HIDDEN, display: \"\" });\n\n                            if (document.body.contains(element[0])) {\n                                offset = element.offset();\n                            } else {\n                                offset = { top: 0, left: 0 };\n                            }\n\n                            element.css({ visibility: visibility, display: display });\n                        }\n\n                        if (position.top === undefined$1) {\n                            position.top = offset.top;\n                        }\n                        if (position.left === undefined$1) {\n                            position.left = offset.left;\n                        }\n                    }\n\n                    if (!defined(options.visible) || options.visible === null) {\n                        options.visible = element.is(VISIBLE);\n                    }\n\n                    wrapper = that.wrapper = element.closest(KWINDOW);\n\n                    if (options.themeColor && options.themeColor !== \"none\") {\n                        wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", options.themeColor));\n                    }\n\n                    if (!element.is(\".k-window-content\") || !wrapper[0]) {\n                        element.addClass(\"k-window-content\");\n                        element.attr(\"tabindex\", 0);\n                        that._createWindow(element, options);\n                        wrapper = that.wrapper = element.closest(KWINDOW);\n\n                        that.title(that.options.title);\n                        that._dimensions();\n\n                        if (options._footerTemplate) {\n                            that.wrapper.append(kendo.template(options._footerTemplate)(options._footerMessages));\n                        }\n                    }\n\n                    that.minTop = that.minLeft = -Infinity;\n                    that.maxTop = that.maxLeft = Infinity;\n                    that._position();\n\n                    if (content) {\n                        that.refresh(content);\n                    }\n\n                    if (options.visible) {\n                        that.toFront(null, !options.modal);\n                    }\n\n                    windowContent = wrapper.children(KWINDOWCONTENT);\n\n                    if (options.visible && options.modal) {\n                        that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });\n                    }\n\n                    wrapper\n                        .on(\"mouseenter\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonEnter.bind(that))\n                        .on(\"mouseleave\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonLeave.bind(that))\n                        .on(\"click\" + NS, \"> \" + TITLEBAR_BUTTONSSELECTOR, that._windowActionHandler.bind(that))\n                        .on(\"keydown\" + NS, that, that._keydown.bind(that))\n                        .on(\"focus\" + NS, that._focus.bind(that))\n                        .on(\"blur\" + NS, that._blur.bind(that));\n\n                    windowContent\n                        .on(\"keydown\" + NS, that, that._keydownContent.bind(that));\n\n                    windowFrame = windowContent.find(\".\" + KCONTENTFRAME)[0];\n\n                    if (windowFrame && !globalWindow.data(WINDOWEVENTSHANDLED)) {\n\n                        globalWindow.on(\"blur\" + NS, function() {\n                            var element = $(document.activeElement).parent(KWINDOWCONTENT);\n                            if (element.length) {\n                                var windowInstance = kendo.widgetInstance(element);\n                                windowInstance._focus();\n                            }\n                        });\n\n                        globalWindow.on(\"focus\" + NS, function() {\n                            $(KWINDOWCONTENT).not(KDIALOGCONTENT).each(function(i, element) {\n                                kendo.widgetInstance($(element))._blur();\n                            });\n                        });\n\n                        globalWindow.data(WINDOWEVENTSHANDLED, true);\n                    }\n\n                    this._resizable();\n\n                    this._draggable();\n\n                    if (options.pinned && this.wrapper.is(\":visible\")) {\n                        that.pin();\n                    }\n\n                    id = element.attr(\"id\");\n                    if (id) {\n                        id = id + \"_wnd_title\";\n                        wrapper.attr({\n                                \"role\": \"dialog\",\n                                \"aria-labelledby\": id\n                            }).children(KWINDOWTITLEBAR)\n                            .children(KWINDOWTITLE)\n                            .attr(\"id\", id);\n                    }\n\n                    wrapper.add(wrapper.children(\".k-resize-handle,\" + KWINDOWTITLEBAR))\n                        .on(kendo.support.mousedown + NS, that.toFront.bind(that));\n\n                    that.touchScroller = kendo.touchScroller(element);\n\n                    that._resizeHandler = that._onDocumentResize.bind(that);\n\n                    that._marker = kendo.guid().substring(0, 8);\n\n                    $(window).on(\"resize\" + NS + that._marker, that._resizeHandler);\n\n                    if (options.visible) {\n                        that.trigger(OPEN);\n                        that.trigger(ACTIVATE);\n                    }\n\n                    kendo.notify(that);\n\n                    if (this.options.modal) {\n                        this._tabKeyTrap = new TabKeyTrap(wrapper);\n                        this._tabKeyTrap.trap();\n                        this._tabKeyTrap.shouldTrap = function() {\n                            return wrapper.data(\"isFront\");\n                        };\n                    }\n\n                    if (that._showWatermarkOverlay) {\n                        that._showWatermarkOverlay(that.wrapper[0]);\n                    }\n                },\n\n                _buttonEnter: function(e) {\n                    $(e.currentTarget).addClass(KHOVERSTATE);\n                },\n\n                _buttonLeave: function(e) {\n                    $(e.currentTarget).removeClass(KHOVERSTATE);\n                },\n\n                _focus: function() {\n                    this.wrapper.addClass(KFOCUSEDSTATE);\n                },\n\n                _blur: function() {\n                    this.wrapper.removeClass(KFOCUSEDSTATE);\n                },\n\n                _dimensions: function() {\n                    var wrapper = this.wrapper;\n                    var options = this.options;\n                    var width = options.width;\n                    var height = options.height;\n                    var maxHeight = options.maxHeight;\n                    var sizeClass = options.size;\n                    var dimensions = [\"minWidth\",\"minHeight\",\"maxWidth\",\"maxHeight\"];\n                    var contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\";\n\n                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                    var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                    if (this.containment && !this._isPinned) {\n                        this._updateBoundaries();\n                        options.maxHeight = Math.min(this.containment.height - (tbBorderWidth + paddingTop), maxHeight);\n                        options.maxWidth = Math.min(this.containment.width - lrBorderWidth, options.maxWidth);\n                    }\n\n                    for (var i = 0; i < dimensions.length; i++) {\n                        var value = options[dimensions[i]] || \"\";\n                        if (value != Infinity) {\n                            wrapper.css(dimensions[i], value);\n                        }\n                    }\n\n                    if (maxHeight != Infinity) {\n                        this.element.css(\"maxHeight\", maxHeight);\n                    }\n\n                    if (width) {\n                        wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));\n                    }\n                    else {\n                        wrapper.outerWidth(\"\");\n                    }\n\n                    if (height) {\n                        wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));\n                    }\n                    else {\n                        wrapper.outerHeight(\"\");\n                    }\n\n                    if (!options.visible) {\n                        wrapper.removeClass(INLINE_FLEX).hide();\n                    }\n\n                    if (sizeClass && SIZE[sizeClass]) {\n                        wrapper.addClass(SIZE[sizeClass]);\n                    }\n                },\n\n                _position: function() {\n                    var wrapper = this.wrapper,\n                        position = this.options.position,\n                        containmentTop, containmentLeft;\n\n                    this._updateBoundaries();\n\n                    if (this.containment) {\n                        position.top = position.top || 0;\n                        position.left = position.left || 0;\n\n                        containmentTop = position.top.toString().indexOf(\"%\") > 0 ?\n                            parseInt(this.containment.height * (parseFloat(position.top) / 100), 10) :\n                            position.top;\n\n                        containmentLeft = position.left.toString().indexOf(\"%\") > 0 ?\n                            parseInt(this.containment.width * (parseFloat(position.left) / 100), 10) :\n                            position.left;\n\n                        position.top = constrain(containmentTop, this.minTop, this.maxTop);\n                        position.left = constrain(containmentLeft, this.minLeft, this.maxLeft);\n                    }\n\n                    if (position.top && position.top.toString().indexOf(\"px\") > 0) {\n                        position.top = Number(position.top.replace(\"px\", \"\"));\n                    }\n\n                    if (position.left && position.left.toString().indexOf(\"px\") > 0) {\n                        position.left = Number(position.left.replace(\"px\", \"\"));\n                    }\n\n                    if (position.top === 0) {\n                        position.top = position.top.toString();\n                    }\n\n                    if (position.left === 0) {\n                        position.left = position.left.toString();\n                    }\n\n                    wrapper.css({\n                        top: position.top || \"\",\n                        left: position.left || \"\"\n                    });\n                },\n\n                _updateBoundaries: function() {\n                    var containment = this.containment;\n\n                    if (!containment) {\n                        return null;\n                    }\n\n                    containment.width = containment.innerWidth();\n                    containment.height = containment.innerHeight();\n\n                    if (parseInt(containment.width, 10) > containment[0].clientWidth) {\n                        containment.width -= kendo.support.scrollbar();\n                    }\n\n                    if (parseInt(containment.height, 10) > containment[0].clientHeight) {\n                        containment.height -= kendo.support.scrollbar();\n                    }\n\n                    containment.position = getPosition(containment[0]);\n\n                    if (this._isPinned) {\n                        this.minTop = this.minLeft = -Infinity;\n                        this.maxTop = this.maxLeft = Infinity;\n                    } else {\n                        this.minTop = containment.scrollTop();\n                        this.minLeft = containment.scrollLeft();\n                        this.maxLeft = this.minLeft + containment.width - outerWidth(this.wrapper, true);\n                        this.maxTop = this.minTop + containment.height - outerHeight(this.wrapper, true);\n                    }\n                },\n\n                _animationOptions: function(id) {\n                    var animation = this.options.animation;\n                    var basicAnimation = {\n                        open: { effects: {} },\n                        close: { hide: true, effects: {} }\n                    };\n\n                    return animation && animation[id] || basicAnimation[id];\n                },\n\n                _resize: function() {\n                    kendo.resize(this.element.children());\n                },\n\n                _resizable: function() {\n                    var resizable = this.options.resizable;\n                    var wrapper = this.wrapper;\n\n                    if (this.resizing) {\n                        wrapper\n                            .off(\"dblclick\" + NS)\n                            .children(KWINDOWRESIZEHANDLES).remove();\n\n                        this.resizing.destroy();\n                        this.resizing = null;\n                    }\n\n                    if (resizable) {\n                        wrapper.on(\"dblclick\" + NS, KWINDOWTITLEBAR, (function(e) {\n                            if (!$(e.target).closest(\".k-window-titlebar-action\").length) {\n                                this.toggleMaximization();\n                            }\n                        }).bind(this));\n\n                        each(\"n e s w se sw ne nw\".split(\" \"), function(index, handler) {\n                            wrapper.append(templates.resizeHandle(handler));\n                        });\n\n                        this.resizing = new WindowResizing(this);\n                    }\n\n                    wrapper = null;\n                },\n\n                _draggable: function() {\n                    var draggable = this.options.draggable;\n\n                    if (this.dragging) {\n                        this.dragging.destroy();\n                        this.dragging = null;\n                    }\n                    if (draggable) {\n                        this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR, draggable.clickMoveClick);\n                    }\n                },\n\n                _actions: function() {\n                    var options = this.options;\n                    var actions = options.actions;\n                    var pinned = options.pinned;\n                    var titlebar = this.wrapper.children(KWINDOWTITLEBAR);\n                    var container = titlebar.find(\".k-window-titlebar-actions\");\n                    var windowSpecificCommands = [ \"minimize\", \"maximize\" ];\n                    var icons = {\n                        \"maximize\": \"window\",\n                        \"refresh\": \"arrow-rotate-cw\",\n                        \"custom\": \"gear\"\n                    };\n                    var icon;\n\n                    actions = $.map(actions, function(action) {\n                        action = pinned && action.toLowerCase() === \"pin\" ? \"unpin\" : action;\n                        icon = icons[action.toLowerCase()] || \"\";\n                        return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? \"window-\" + action : action, icon: action.toLowerCase() == \"close\" ? \"x\" : icon };\n                    });\n\n                    container.html(kendo.render(templates.action, actions));\n                },\n\n                setOptions: function(options) {\n                    var that = this;\n                    var sizeClass = that.options.size;\n                    var doc = this.containment && !that._isPinned ? this.containment : $(document);\n                    // make a deep extend over options.position telerik/kendo-ui-core#844\n                    var cachedOptions = JSON.parse(JSON.stringify(options));\n\n                    that.wrapper.removeClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n\n                    extend(options.position, that.options.position);\n                    extend(options.position, cachedOptions.position);\n\n                    that._containerScrollTop = doc.scrollTop();\n                    that._containerScrollLeft = doc.scrollLeft();\n\n                    Widget.fn.setOptions.call(that, options);\n                    var scrollable = that.options.scrollable !== false;\n\n                    that.restore();\n\n                    if (typeof options.title !== \"undefined\") {\n                        that.title(options.title);\n                    }\n\n                    that.wrapper.removeClass(SIZE[sizeClass]);\n                    that._dimensions();\n\n                    that._position();\n                    that._resizable();\n                    that._draggable();\n                    that._actions();\n\n                    if (that.options.themeColor && that.options.themeColor !== \"none\") {\n                        that.wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n                    }\n\n                    if (typeof options.modal !== \"undefined\") {\n                        var visible = that.options.visible !== false;\n                        that._enableDocumentScrolling();\n                        that._overlay(options.modal && visible);\n                    }\n\n                    that.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n                },\n\n                events: [\n                    OPEN,\n                    ACTIVATE,\n                    DEACTIVATE,\n                    CLOSE,\n                    MINIMIZE,\n                    MAXIMIZE,\n                    REFRESH,\n                    RESTORE,\n                    RESIZESTART,\n                    RESIZE,\n                    RESIZEEND,\n                    DRAGSTART,\n                    DRAGEND,\n                    KENDOKEYDOWN,\n                    ERROR\n                ],\n\n                options: {\n                    name: \"Window\",\n                    animation: {\n                        open: {\n                            effects: { zoom: { direction: \"in\" }, fade: { direction: \"in\" } },\n                            duration: 350\n                        },\n                        close: {\n                            effects: { zoom: { direction: \"out\", properties: { scale: 0.7 } }, fade: { direction: \"out\" } },\n                            duration: 350,\n                            hide: true\n                        }\n                    },\n                    title: \"\",\n                    themeColor: \"\",\n                    actions: [\"Close\"],\n                    autoFocus: true,\n                    modal: false,\n                    size: \"auto\",\n                    resizable: true,\n                    draggable: true,\n                    minWidth: 90,\n                    minHeight: 50,\n                    maxWidth: Infinity,\n                    maxHeight: Infinity,\n                    pinned: false,\n                    scrollable: true,\n                    position: {},\n                    content: null,\n                    visible: null,\n                    height: null,\n                    width: null,\n                    appendTo: \"body\",\n                    isMaximized: false,\n                    isMinimized: false\n                },\n\n                _closable: function() {\n                    return $.inArray(\"close\", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;\n                },\n\n                _keydownContent: function(e) {\n                    var that = this,\n                        keys = kendo.keys,\n                        keyCode = e.keyCode;\n\n                    if (keyCode == keys.ESC && that._closable()) {\n                        e.stopPropagation();\n                        that._close(false);\n                    }\n                },\n\n                _keydown: function(e) {\n                    var that = this,\n                        options = that.options,\n                        keys = kendo.keys,\n                        keyCode = e.keyCode,\n                        wrapper = that.wrapper,\n                        offset, handled,\n                        distance = 10,\n                        isMaximized = options.isMaximized,\n                        isMinimized = options.isMinimized,\n                        newWidth, newHeight, w, h;\n\n                    if (keyCode == keys.ESC && that._closable()) {\n                        e.stopPropagation();\n                        that._close(false);\n                    }\n\n                    if (e.target != e.currentTarget || that._closing) {\n                        return;\n                    }\n\n                     // Refresh\n                    if (e.altKey && keyCode == 82) {// Alt + R\n                        that.refresh();\n                    }\n\n                    // Pin/Unpin\n                    if (e.altKey && keyCode == 80) {// Alt + P\n                        if (that.options.pinned) {\n                            that.unpin();\n                        } else {\n                            that.pin();\n                        }\n                    }\n\n                    // Maximize/Restore/Miminimize\n                    if (e.altKey && keyCode == keys.UP) {\n                        if (isMinimized) {\n                            that.restore();\n                            that.wrapper.trigger(\"focus\");\n                        } else if (!isMaximized) {\n                            that.maximize();\n                            that.wrapper.trigger(\"focus\");\n                        }\n                    } else if (e.altKey && keyCode == keys.DOWN) {\n                        if (!isMinimized && !isMaximized) {\n                            that.minimize();\n                            that.wrapper.trigger(\"focus\");\n                        } else if (isMaximized) {\n                            that.restore();\n                            that.wrapper.trigger(\"focus\");\n                        }\n                    }\n\n                    offset = kendo.getOffset(wrapper);\n\n                    if (that.containment && !that._isPinned) {\n                        offset = that.options.position;\n                    }\n\n                    if (options.draggable && !e.ctrlKey && !e.altKey && !isMaximized) {\n                        that._updateBoundaries();\n                        if (keyCode == keys.UP) {\n                            offset.top = constrain(offset.top - distance, that.minTop, that.maxTop);\n                            handled = wrapper.css(\"top\", offset.top);\n                        } else if (keyCode == keys.DOWN) {\n                            offset.top = constrain(offset.top + distance, that.minTop, that.maxTop);\n                            handled = wrapper.css(\"top\", offset.top);\n                        } else if (keyCode == keys.LEFT) {\n                            offset.left = constrain(offset.left - distance, that.minLeft, that.maxLeft);\n                            handled = wrapper.css(\"left\", offset.left);\n                        } else if (keyCode == keys.RIGHT) {\n                            offset.left = constrain(offset.left + distance, that.minLeft, that.maxLeft);\n                            handled = wrapper.css(\"left\", offset.left);\n                        }\n                    }\n\n                    if (options.resizable && e.ctrlKey && !isMaximized && !isMinimized) {\n                        if (keyCode == keys.UP) {\n                            handled = true;\n                            newHeight = wrapper.outerHeight() - distance;\n                        } else if (keyCode == keys.DOWN) {\n                            handled = true;\n                            if (that.containment && !that._isPinned) {\n                                newHeight = Math.min(wrapper.outerHeight() + distance,\n                                    that.containment.height - offset.top - toInt(wrapper, \"padding-top\") -\n                                    toInt(wrapper, \"borderBottomWidth\") - toInt(wrapper, \"borderTopWidth\"));\n                            } else {\n                                newHeight = wrapper.outerHeight() + distance;\n                            }\n                        } if (keyCode == keys.LEFT) {\n                            handled = true;\n                            newWidth = wrapper.outerWidth() - distance;\n                        } else if (keyCode == keys.RIGHT) {\n                            handled = true;\n                            if (that.containment && !that._isPinned) {\n                                newWidth = Math.min(wrapper.outerWidth() + distance,\n                                                    that.containment.width - offset.left -\n                                                    toInt(wrapper, \"borderLeftWidth\") - toInt(wrapper, \"borderRightWidth\"));\n                            } else {\n                                newWidth = wrapper.outerWidth() + distance;\n                            }\n                        }\n\n                        if (handled) {\n                            w = constrain(newWidth, options.minWidth, options.maxWidth);\n                            h = constrain(newHeight, options.minHeight, options.maxHeight);\n\n                            if (!isNaN(w)) {\n                                wrapper.outerWidth(w);\n                                that.options.width = w + \"px\";\n                            }\n                            if (!isNaN(h)) {\n                                wrapper.outerHeight(h);\n                                that.options.height = h + \"px\";\n                            }\n\n                            that.resize();\n                        }\n                    }\n\n                    if (handled) {\n                        e.preventDefault();\n                    }\n                },\n\n                _overlay: function(visible) {\n                    var overlay = this.containment ? this.containment.children(KOVERLAY) : this.appendTo.children(KOVERLAY),\n                        wrapper = this.wrapper,\n                        display = visible ? \"inline-flex\" : \"none\",\n                        zIndex = parseInt(wrapper.css(ZINDEX), 10) - 1;\n\n                    if (!overlay.length) {\n                        overlay = $(\"<div class='k-overlay' />\");\n                    }\n\n                    overlay\n                        .insertBefore(wrapper[0])\n                        .css({\n                            zIndex: zIndex,\n                            display: display\n                        });\n\n                    if (this.options.modal.preventScroll && !this.containment) {\n                        this._stopDocumentScrolling();\n                    }\n\n                    return overlay;\n                },\n\n                _actionForIcon: function(icon) {\n                    var iconClass = /\\bk(-svg)?-i(-\\w+)+\\b/.exec(icon[0].className)[0];\n                    return {\n                        \"x\": \"_close\",\n                        \"window\": \"maximize\",\n                        \"window-minimize\": \"minimize\",\n                        \"window-restore\": \"restore\",\n                        \"arrow-rotate-cw\": \"refresh\",\n                        \"pin\": \"pin\",\n                        \"unpin\": \"unpin\"\n                    }[iconClass.replace(/(k-i-|k-svg-i-)/, \"\")];\n                },\n\n                _windowActionHandler: function(e) {\n                    if (this._closing) {\n                        return;\n                    }\n                    var icon = $(e.target).closest(\".k-window-titlebar-action\").find(\".k-icon,.k-svg-icon\");\n                    var action = this._actionForIcon(icon);\n\n                    if (action) {\n                        e.preventDefault();\n                        this[action]();\n                        return false;\n                    }\n                },\n\n                _modals: function() {\n                    var that = this,\n                        windowElements = $(KWINDOW + VISIBLE),\n                        windowInstance,\n                        modals = [];\n\n                    for (var i = 0; i < windowElements.length; i += 1) {\n                        windowInstance = that._object($(windowElements[i]));\n\n                        if (windowInstance &&\n                            windowInstance.options &&\n                            windowInstance.options.modal &&\n                            windowInstance.options.visible &&\n                            windowInstance.options.appendTo === that.options.appendTo &&\n                            (!windowInstance.containment || (that.containment && windowInstance.containment[0] === that.containment[0]))) {\n                                modals.push(windowInstance.wrapper[0]);\n                        }\n                    }\n\n                    modals.sort(function(a, b) {\n                        return a.style.zIndex - b.style.zIndex;\n                    });\n\n                    that = null;\n\n                    return $(modals);\n                },\n\n                _object: function(element) {\n                    var content = element.children(KWINDOWCONTENT);\n                    var widget = kendo.widgetInstance(content);\n\n                    if (widget) {\n                        return widget;\n                    }\n\n                    return undefined$1;\n                },\n\n                center: function() {\n                    var that = this,\n                        position = that.options.position,\n                        wrapper = that.wrapper,\n                        documentWindow = $(window),\n                        scrollTop = 0,\n                        scrollLeft = 0,\n                        newTop, newLeft;\n\n                    if (that.options.isMaximized) {\n                        return that;\n                    }\n\n                    if (that.options.pinned && !that._isPinned) {\n                        that.pin();\n                    }\n\n                    if (!that.options.pinned) {\n                        scrollTop = documentWindow.scrollTop();\n                        scrollLeft = documentWindow.scrollLeft();\n                    }\n\n                    if (this.containment && !that.options.pinned) {\n                        newTop = this.minTop + (this.maxTop - this.minTop) / 2;\n                        newLeft = this.minLeft + (this.maxLeft - this.minLeft) / 2;\n                    } else {\n                        that._scrollIsAppended = true;\n                        newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.outerWidth()) / 2);\n                        newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.outerHeight() - toInt(wrapper, \"paddingTop\")) / 2);\n                    }\n\n                    wrapper.css({\n                        left: newLeft,\n                        top: newTop\n                    });\n\n                    position.top = newTop;\n                    position.left = newLeft;\n\n                    return that;\n                },\n\n                title: function(title) {\n                    var that = this,\n                        value,\n                        encoded = true,\n                        wrapper = that.wrapper,\n                        titleBar = wrapper.children(KWINDOWTITLEBAR),\n                        titleElement = titleBar.children(KWINDOWTITLE);\n\n                    if (!arguments.length) {\n                        return titleElement.html();\n                    }\n\n                    if ($.isPlainObject(title)) {\n                        value = typeof title.text !== \"undefined\" ? title.text : \"\";\n                        encoded = title.encoded !== false;\n                    } else {\n                        value = title;\n                    }\n\n                    if (value === false) {\n                        wrapper.addClass(\"k-window-titleless\");\n                        wrapper.css(\"padding-top\", 0);\n                        titleBar.remove();\n                    } else {\n                        if (!titleBar.length) {\n                            wrapper.prepend(templates.titlebar({\n                                title: encoded ? kendo.htmlEncode(value) : value\n                            }));\n                            that._actions();\n                            titleBar = wrapper.children(KWINDOWTITLEBAR);\n                        } else {\n                            titleElement.html(encoded ? kendo.htmlEncode(value) : value);\n                        }\n                    }\n\n                    that.options.title = value;\n\n                    return that;\n                },\n\n                content: function(html, data) {\n                    var content = this.wrapper.children(KWINDOWCONTENT),\n                        scrollContainer = content.children(\".km-scroll-container\");\n\n                    content = scrollContainer[0] ? scrollContainer : content;\n\n                    if (!defined(html)) {\n                        return content.html();\n                    }\n\n                    kendo.destroy(this.element.children());\n\n                    content.empty().html(html);\n\n                    return this;\n                },\n\n                open: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        showOptions = this._animationOptions(\"open\"),\n                        contentElement = wrapper.children(KWINDOWCONTENT),\n                        overlay, otherModalsVisible,\n                        containmentContext = this.containment && !that._isPinned,\n                        doc = containmentContext ? this.containment : $(document);\n\n                    if (!that.trigger(OPEN)) {\n                        if (that._closing) {\n                            wrapper.kendoStop(true, true);\n                        }\n\n                        that._closing = false;\n\n                        that.toFront();\n\n                        if (options.autoFocus) {\n                            that.wrapper.trigger(\"focus\");\n                        }\n\n                        options.visible = true;\n\n                        if (options.modal) {\n                            otherModalsVisible = !!that._modals().length;\n                            overlay = that._overlay(otherModalsVisible);\n\n                            overlay.kendoStop(true, true);\n\n                            if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {\n                                var overlayFx = kendo.fx(overlay).fadeIn();\n                                overlayFx.duration(showOptions.duration || 0);\n                                overlayFx.endValue(0.5);\n                                overlayFx.play();\n                            } else {\n                                overlay.css(\"opacity\", 0.5);\n                            }\n\n                            overlay.show();\n\n                            $(window).on(\"focus\" + MODAL_NS, function() {\n                                if (wrapper.data(\"isFront\") && !$(document.activeElement).closest(wrapper).length) {\n                                   that.wrapper.trigger(\"focus\");\n                                }\n                            });\n                        }\n\n                        if (!wrapper.is(VISIBLE)) {\n                            contentElement.css(OVERFLOW, HIDDEN);\n\n                            that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).addClass(\"k-button-flat\");\n\n                            wrapper.css({ display: \"inline-flex\" });\n                            wrapper.kendoStop().kendoAnimate({\n                                effects: showOptions.effects,\n                                duration: showOptions.duration,\n                                complete: this._activate.bind(this)\n                            });\n                        }\n                    }\n\n                    if (options.isMaximized) {\n                        that._containerScrollTop = doc.scrollTop();\n                        that._containerScrollLeft = doc.scrollLeft();\n                        that._stopDocumentScrolling();\n                    }\n\n                    if (this.options.pinned && !this._isPinned) {\n                        this.pin();\n                    }\n\n                    return that;\n                },\n\n                _activate: function() {\n                    var scrollable = this.options.scrollable !== false;\n\n                    if (this.options.autoFocus) {\n                        this.wrapper.trigger(\"focus\");\n                    }\n\n                    this.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n                    kendo.resize(this.element.children());\n\n                    this.trigger(ACTIVATE);\n                },\n\n                _removeOverlay: function(suppressAnimation) {\n                    var modals = this._modals();\n                    var options = this.options;\n                    var hideOverlay = options.modal && !modals.length;\n                    var hideOptions = this._animationOptions(\"close\");\n\n                    if (hideOverlay) {\n                        if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {\n                            var overlayFx = kendo.fx(options.modal ? this._overlay(true) : $(undefined$1)).fadeOut();\n                            overlayFx.duration(hideOptions.duration || 0);\n                            overlayFx.startValue(0.5);\n                            overlayFx.play();\n                        } else {\n                            this._overlay(false).remove();\n                        }\n                        if (options.modal.preventScroll) {\n                            this._enableDocumentScrolling();\n                        }\n                    } else if (modals.length) {\n                        this._object(modals.last())._overlay(true);\n\n                        if (options.modal.preventScroll) {\n                            this._stopDocumentScrolling();\n                        }\n                    }\n                },\n\n                _close: function(systemTriggered) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        showOptions = this._animationOptions(\"open\"),\n                        hideOptions = this._animationOptions(\"close\"),\n                        containmentContext = this.containment && !that._isPinned,\n                        doc = containmentContext ? this.containment : $(document),\n                        defaultPrevented;\n\n                    if (that._closing) {\n                        return;\n                    }\n\n                    defaultPrevented = that.trigger(CLOSE, { userTriggered: !systemTriggered });\n                    that._closing = !defaultPrevented;\n\n                    if (wrapper.is(VISIBLE) && !defaultPrevented) {\n                        options.visible = false;\n\n                        $(KWINDOW).each(function(i, element) {\n                            var contentElement = $(element).children(KWINDOWCONTENT);\n\n                            // Remove overlay set by toFront\n                            if (element != wrapper && contentElement.find(\"> .\" + KCONTENTFRAME).length > 0) {\n                                contentElement.children(KOVERLAY).remove();\n                            }\n                        });\n\n                        this._removeOverlay();\n\n                        // Prevent close animation from stopping\n                        that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).removeClass(\"k-button-flat\");\n\n                        wrapper.kendoStop().kendoAnimate({\n                            effects: hideOptions.effects || showOptions.effects,\n                            reverse: hideOptions.reverse === true,\n                            duration: hideOptions.duration,\n                            complete: this._deactivate.bind(this)\n                        });\n                        $(window).off(MODAL_NS);\n                    }\n\n                    if (that.options.isMaximized) {\n                        that._enableDocumentScrolling();\n                        if (that._containerScrollTop && that._containerScrollTop > 0) {\n                            doc.scrollTop(that._containerScrollTop);\n                        }\n                        if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                            doc.scrollLeft(that._containerScrollLeft);\n                        }\n                    }\n\n                    if (that.options.iframe) {\n                        that.wrapper.trigger(\"blur\");\n                    }\n                },\n\n                _deactivate: function() {\n                    var that = this;\n\n                    that.wrapper\n                        .removeClass(INLINE_FLEX)\n                        .hide()\n                        .css(\"opacity\", \"\");\n\n                    that.trigger(DEACTIVATE);\n\n                    if (that.options.modal) {\n                        var lastModal = that._object(that._modals().last());\n                        if (lastModal) {\n                            lastModal.toFront();\n                        }\n                    }\n                },\n\n                close: function() {\n                    this._close(true);\n                    return this;\n                },\n\n                _actionable: function(element) {\n                    return $(element).is(`${TITLEBAR_BUTTONSSELECTOR}, :input, a, .k-input, .k-icon, .k-svg-icon, .k-svg-icon>svg, .k-svg-icon>svg>path, .k-icon-button, [role='gridcell'], .k-input-inner, .k-input-value-text`);\n                },\n\n                _shouldFocus: function(target) {\n                    var active = activeElement(),\n                        element = this.wrapper;\n\n                    return this.options.autoFocus &&\n                        !$(active).is(element) &&\n                        !this._actionable(target) &&\n                        (!element.find(active).length || !element.find(target).length);\n                },\n\n                toFront: function(e, avoidFocus) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        currentWindow = wrapper[0],\n                        containmentContext = that.containment && !that._isPinned,\n                        openAnimation = this._animationOptions(\"open\"),\n                        zIndex = +wrapper.css(ZINDEX),\n                        originalZIndex = zIndex,\n                        target = (e && e.target) || null;\n\n                    $(KWINDOW).each(function(i, element) {\n                        var windowObject = $(element),\n                            zIndexNew = windowObject.css(ZINDEX),\n                            contentElement = windowObject.children(KWINDOWCONTENT);\n\n                        if (!isNaN(zIndexNew)) {\n                            zIndex = Math.max(+zIndexNew, zIndex);\n                        }\n\n                        wrapper.data(\"isFront\", element == currentWindow);\n                        // Add overlay to windows with iframes and lower z-index to prevent\n                        // trapping of events when resizing / dragging\n\n                        if (element != currentWindow &&\n                            contentElement.find(\".\" + KCONTENTFRAME).length &&\n                            !contentElement.find(KOVERLAY).length) {\n                            contentElement.append(templates.overlay);\n                        }\n                    });\n\n                    if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {\n                        wrapper.css(ZINDEX, zIndex + 2);\n                    }\n                    that.element.find(\"> .k-overlay\").remove();\n\n                    if (that._shouldFocus(target)) {\n                        if (!avoidFocus) {\n                            setTimeout(function() {\n                                that.wrapper.focus();\n                            }, openAnimation ? openAnimation.duration : 0);\n                        }\n\n                        var scrollTop = containmentContext ? that.containment.scrollTop() : $(window).scrollTop(),\n                            windowTop = parseInt(wrapper.position().top, 10);\n\n                        if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {\n                            if (scrollTop > 0) {\n                                $(window).scrollTop(windowTop);\n                            } else {\n                                wrapper.css(\"top\", scrollTop);\n                            }\n                        }\n                    }\n\n                    wrapper = null;\n\n                    return that;\n                },\n\n                toggleMaximization: function() {\n                    if (this._closing) {\n                        return this;\n                    }\n\n                    return this[this.options.isMaximized ? \"restore\" : \"maximize\"]();\n                },\n\n                restore: function() {\n                    var that = this;\n                    var options = that.options;\n                    var minHeight = options.minHeight;\n                    var restoreOptions = that.restoreOptions;\n                    var shouldRestrictTop;\n                    var container = that.containment && !that._isPinned ? that.containment : $(document);\n\n                    if (!options.isMaximized && !options.isMinimized) {\n                        return that;\n                    }\n\n                    if (minHeight && minHeight != Infinity) {\n                        that.wrapper.css(\"min-height\", minHeight);\n                    }\n\n                    if (restoreOptions && !options.isMaximized) {\n                        restoreOptions.height = constrain(restoreOptions.height, that.options.minHeight, that.options.maxHeight);\n\n                        shouldRestrictTop = options.position.top + parseInt(restoreOptions.height, 10) > that.maxTop;\n\n                        if (shouldRestrictTop) {\n                            options.position.top = constrain(options.position.top, that.minTop, that.maxTop - parseInt(restoreOptions.height, 10));\n\n                            extend(restoreOptions, {\n                                left: options.position.left,\n                                top: options.position.top\n                            });\n                        }\n                    }\n\n                    that.wrapper\n                        .css({\n                            position: options.pinned ? \"fixed\" : \"absolute\",\n                            left: restoreOptions.left,\n                            top: restoreOptions.top,\n                            width: restoreOptions.width,\n                            height: restoreOptions.height\n                        })\n                        .removeClass(MAXIMIZEDSTATE)\n                        .removeClass(KWINDOWMINIMIZED)\n                        .find(\".k-window-content,.k-resize-handle\").show().end()\n                        .find(\".k-window-titlebar .k-i-window-restore,.k-window-titlebar .k-svg-i-window-restore\").parent().remove().end().end()\n                        .find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().show().end().end()\n                        .find(PIN_UNPINICONCLASSSELECTOR).parent().show();\n\n                    if (options.isMaximized) {\n                        that.wrapper.find(\".k-i-window,.k-svg-i-window\").parent().trigger(\"focus\");\n                    } else if (options.isMinimized) {\n                        that.wrapper.find(\".k-i-window-minimize,.k-svg-i-window-minimize\").parent().trigger(\"focus\");\n                    }\n\n                    that.options.width = restoreOptions.width;\n                    that.options.height = restoreOptions.height;\n\n                    if (!that.options.modal.preventScroll) {\n                        that._enableDocumentScrolling();\n                    }\n\n                    if (that._containerScrollTop && that._containerScrollTop > 0) {\n                        container.scrollTop(that._containerScrollTop);\n                    }\n                    if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                        container.scrollLeft(that._containerScrollLeft);\n                    }\n\n                    options.isMaximized = options.isMinimized = false;\n\n                    that.wrapper.removeAttr(\"aria-labelled-by\");\n\n                    that.resize();\n\n                    that.trigger(RESTORE);\n\n                    return that;\n                },\n\n                _sizingAction: function(actionId, callback) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        style = wrapper[0].style,\n                        options = that.options;\n\n                    if (options.isMaximized || options.isMinimized) {\n                        return that;\n                    }\n\n                    that.restoreOptions = {\n                        width: style.width,\n                        height: style.height\n                    };\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).hide().end()\n                        .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().hide()\n                        .eq(0).before(templates.action({ name: \"window-restore\" }));\n\n                    callback.call(that);\n\n                    that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPINICONCLASSSELECTOR).parent().toggle(actionId !== \"maximize\");\n\n                    that.trigger(actionId);\n\n                    wrapper.find(\".k-i-window-restore,.k-svg-i-window-restore\").parent().trigger(\"focus\");\n\n                    return that;\n                },\n\n                maximize: function() {\n                    this._sizingAction(\"maximize\", function() {\n                        var that = this,\n                            wrapper = that.wrapper,\n                            containmentContext = this.containment && !that._isPinned,\n                            position = wrapper.position(),\n                            doc = $(document);\n\n                        extend(that.restoreOptions, {\n                            left: position.left + (containmentContext ? this.containment.scrollLeft() : 0),\n                            top: position.top + (containmentContext ? this.containment.scrollTop() : 0)\n                        });\n\n                        this._containerScrollTop = containmentContext ? this.containment.scrollTop() : doc.scrollTop();\n                        this._containerScrollLeft = containmentContext ? this.containment.scrollLeft() : doc.scrollLeft();\n\n                        that._stopDocumentScrolling();\n\n                        wrapper\n                            .css({\n                                top: containmentContext ? this.containment.scrollTop() : 0,\n                                left: containmentContext ? this.containment.scrollLeft() : 0,\n                                position: containmentContext ? \"absolute\" : \"fixed\"\n                            })\n                            .addClass(MAXIMIZEDSTATE);\n\n                        that.options.isMaximized = true;\n\n                        that._onDocumentResize();\n                    });\n\n                    return this;\n                },\n\n                _stopDocumentScrolling: function() {\n                    var that = this;\n                    var containment = that.containment;\n\n                    if (containment && !that._isPinned) {\n                        that._storeOverflowRule(containment);\n                        containment.css(OVERFLOW, HIDDEN);\n                        that.wrapper.css({\n                            maxWidth: containment.innerWidth(),\n                            maxHeight: containment.innerHeight()\n                        });\n                        return;\n                    }\n\n                    var $body = $(\"body\");\n                    that._storeOverflowRule($body);\n                    $body.css(OVERFLOW, HIDDEN);\n\n                    var $html = $(\"html\");\n                    that._storeOverflowRule($html);\n                    $html.css(OVERFLOW, HIDDEN);\n                },\n\n                _enableDocumentScrolling: function() {\n                    var that = this;\n                    var containment = that.containment;\n\n                    if (containment && !that._isPinned) {\n                        that._restoreOverflowRule(containment);\n                        that.wrapper.css({\n                            maxWidth: containment.width,\n                            maxHeight: containment.height\n                        });\n                        return;\n                    }\n\n                    that._restoreOverflowRule($(document.body));\n                    that._restoreOverflowRule($(\"html\"));\n                },\n\n                _storeOverflowRule: function($element) {\n                    if (this._isOverflowStored($element)) {\n                        return;\n                    }\n\n                    var overflowRule = $element.get(0).style.overflow;\n\n                    if (typeof overflowRule === \"string\") {\n                        $element.data(DATADOCOVERFLOWRULE, overflowRule);\n                    }\n                },\n\n                _isOverflowStored: function($element) {\n                    return typeof $element.data(DATADOCOVERFLOWRULE) === \"string\";\n                },\n\n                _restoreOverflowRule: function($element) {\n                    var overflowRule = $element.data(DATADOCOVERFLOWRULE);\n\n                    if (overflowRule !== null && overflowRule !== undefined$1) {\n                        $element.css(OVERFLOW, overflowRule);\n                        $element.removeData(DATADOCOVERFLOWRULE);\n                    } else {\n                        $element.css(OVERFLOW, \"\");\n                    }\n                },\n\n                isMaximized: function() {\n                    return this.options.isMaximized;\n                },\n\n                minimize: function() {\n                    this._sizingAction(\"minimize\", function() {\n                        var that = this;\n\n                        that.wrapper.css({\n                            height: \"\",\n                            minHeight: \"\"\n                        });\n\n                        that.element.hide();\n\n                        that.options.isMinimized = true;\n                    });\n\n                    this.wrapper.attr(\"aria-labelled-by\", this.element.attr(\"aria-labelled-by\"));\n                    this.wrapper.addClass(KWINDOWMINIMIZED);\n\n                    this._updateBoundaries();\n\n                    return this;\n                },\n\n                isMinimized: function() {\n                    return this.options.isMinimized;\n                },\n\n                pin: function() {\n                    var that = this,\n                        win = $(window),\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        position = options.position,\n                        top = this.containment ? getPosition(wrapper[0]).top + toInt(this.containment, \"borderTopWidth\") : toInt(wrapper, \"top\"),\n                        left = this.containment ? getPosition(wrapper[0]).left + toInt(this.containment, \"borderLeftWidth\") : toInt(wrapper, \"left\");\n\n                    if (!that.options.isMaximized) {\n                        position.top = top;\n                        position.left = left;\n\n                        if (that._scrollIsAppended && (!this.containment || this.containment.css(\"position\") !== \"fixed\")) {\n\n                            position.top -= win.scrollTop();\n                            position.left -= win.scrollLeft();\n                            that._scrollIsAppended = false;\n                        }\n\n                        wrapper.css(extend(position, { position: \"fixed\" }));\n                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KPINICONCLASSSELECTOR).eq(0);\n                        if (pinIcon.length > 0) {\n                            kendo.ui.icon(pinIcon, { icon: \"unpin\" });\n                        }\n\n                        that._isPinned = true;\n                        that.options.pinned = true;\n\n                        if (this.containment) {\n                            options.maxWidth = options.maxHeight = Infinity;\n                            wrapper.css({\n                                maxWidth: \"\",\n                                maxHeight: \"\"\n                            });\n                        }\n                    }\n                },\n\n                unpin: function() {\n                    var that = this,\n                        win = $(window),\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        position = that.options.position,\n                        containment = that.containment,\n                        top = parseInt(wrapper.css(\"top\"), 10) + win.scrollTop(),\n                        left = parseInt(wrapper.css(\"left\"), 10) + win.scrollLeft();\n\n                    if (!that.options.isMaximized) {\n                        that._isPinned = false;\n                        that._scrollIsAppended = true;\n                        that.options.pinned = false;\n\n                        if (containment) {\n                            that._updateBoundaries();\n\n                            options.maxWidth = Math.min(containment.width, options.maxWidth);\n                            options.maxHeight = Math.min(containment.height - toInt(wrapper, \"padding-top\"), options.maxHeight);\n\n                            wrapper.css({\n                                maxWidth: options.maxWidth,\n                                maxHeight: options.maxHeight\n                            });\n\n                            if (top < containment.position.top) {\n                                top = that.minTop;\n                            } else if (top > containment.position.top + containment.height) {\n                                top = that.maxTop;\n                            } else {\n                                top = top + containment.scrollTop() - (containment.position.top + toInt(containment, \"border-top-width\"));\n                            }\n\n                            if (left < containment.position.left) {\n                                left = that.minLeft;\n                            } else if (left > containment.position.left + containment.width) {\n                                left = that.maxLeft;\n                            } else {\n                                left = left + containment.scrollLeft() - (containment.position.left + toInt(containment, \"border-left-width\"));\n                            }\n\n                        }\n\n                        position.top = constrain(top, that.minTop, that.maxTop);\n                        position.left = constrain(left, that.minLeft, that.maxLeft);\n\n                        wrapper.css(extend(position, { position: \"\" }));\n                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KUNPINICONCLASSSELECTOR).eq(0);\n                        if (pinIcon.length > 0) {\n                            kendo.ui.icon(pinIcon, { icon: \"pin\" });\n                        }\n                    }\n                },\n\n                _onDocumentResize: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        wnd = $(window),\n                        zoomLevel = kendo.support.zoomLevel(),\n                        contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\",\n                        w, h;\n\n                    if (!that.options.isMaximized) {\n                        return;\n                    }\n\n                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                    var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                    if (that.containment && !that._isPinned) {\n                        w = that.containment.innerWidth() - lrBorderWidth;\n                        h = that.containment.innerHeight() - (tbBorderWidth + paddingTop);\n                    } else {\n                        w = wnd.width() / zoomLevel - lrBorderWidth;\n                        h = wnd.height() / zoomLevel - (tbBorderWidth + paddingTop);\n                    }\n\n                    wrapper.css({\n                        width: w,\n                        height: h\n                    });\n                    that.options.width = w;\n                    that.options.height = h;\n\n                    that.resize();\n                },\n\n                refresh: function(options) {\n                    var that = this,\n                        initOptions = that.options,\n                        element = $(that.element),\n                        iframe,\n                        showIframe,\n                        url;\n\n                    if (!isPlainObject(options)) {\n                        options = { url: options };\n                    }\n\n                    options = extend(initOptions.content, options);\n\n                    showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;\n\n                    url = options.url;\n\n                    if (url) {\n                        if (!defined(showIframe)) {\n                            showIframe = !isLocalUrl(url);\n                        }\n\n                        if (!showIframe) {\n                            // perform AJAX request\n                            that._ajaxRequest(options);\n                        } else {\n                            iframe = element.find(\".\" + KCONTENTFRAME)[0];\n\n                            if (iframe) {\n                                // refresh existing iframe\n                                iframe.src = url || iframe.src;\n                            } else {\n                                // render new iframe\n                                element.html(templates.contentFrame(extend({}, initOptions, { content: options })));\n                            }\n\n                            element.find(\".\" + KCONTENTFRAME)\n                                .off(\"load\" + NS)\n                                .on(\"load\" + NS, this._triggerRefresh.bind(this));\n                        }\n                    } else {\n                        if (options.template) {\n                            // refresh template\n                            that.content(template(options.template)({}));\n                        }\n\n                        that.trigger(REFRESH);\n                    }\n\n                    element.toggleClass(\"k-window-iframecontent\", !!showIframe);\n\n                    return that;\n                },\n\n                _triggerRefresh: function() {\n                    this.trigger(REFRESH);\n                },\n\n                _ajaxComplete: function() {\n                    clearTimeout(this._loadingIconTimeout);\n                    this.wrapper.find(REFRESHICONSELECTOR).removeClass(LOADINGICONCLASS);\n                },\n\n                _ajaxError: function(xhr, status) {\n                    this.trigger(ERROR, { status: status, xhr: xhr });\n                },\n\n                _ajaxSuccess: function(contentTemplate) {\n                    return function(data) {\n                        var html = data;\n                        if (contentTemplate) {\n                            html = template(contentTemplate)(data || {});\n                        }\n\n                        this.content(html, data);\n                        this.element.prop(\"scrollTop\", 0);\n\n                        this.trigger(REFRESH);\n                    };\n                },\n\n                _showLoading: function() {\n                    this.wrapper.find(REFRESHICONSELECTOR).addClass(LOADINGICONCLASS);\n                },\n\n                _ajaxRequest: function(options) {\n                    this._loadingIconTimeout = setTimeout(this._showLoading.bind(this), 100);\n\n                    $.ajax(extend({\n                        type: \"GET\",\n                        dataType: \"html\",\n                        cache: false,\n                        error: this._ajaxError.bind(this),\n                        complete: this._ajaxComplete.bind(this),\n                        success: this._ajaxSuccess(options.template).bind(this)\n                    }, options));\n                },\n\n                _destroy: function() {\n                    if (this.resizing) {\n                        this.resizing.destroy();\n                    }\n\n                    if (this.dragging) {\n                        this.dragging.destroy();\n                    }\n\n                    this.wrapper.off(NS)\n                        .children(KWINDOWCONTENT).off(NS).end()\n                        .find(\".k-resize-handle,.k-window-titlebar\").off(NS);\n\n                    $(window).off(\"resize\" + NS + this._marker);\n                    $(window).off(MODAL_NS);\n                    $(window).off(NS);\n\n                    clearTimeout(this._loadingIconTimeout);\n\n                    Widget.fn.destroy.call(this);\n\n                    this.unbind(undefined$1);\n\n                    kendo.destroy(this.wrapper);\n                },\n\n                destroy: function() {\n                    this._destroy();\n\n                    if (this.options.modal) {\n                        this._removeOverlay(true);\n                    }\n\n                    this.wrapper.empty().remove();\n\n                    this.wrapper = this.appendTo = this.element = $();\n                },\n\n                _createWindow: function() {\n                    var contentHtml = this.element,\n                        options = this.options,\n                        iframeSrcAttributes,\n                        wrapper,\n                        isRtl = kendo.support.isRtl(contentHtml);\n\n                    if (options.scrollable === false) {\n                        contentHtml.css(\"overflow\", \"hidden\");\n                    }\n\n                    wrapper = $(templates.wrapper(options));\n\n                    // Collect the src attributes of all iframes and then set them to empty string.\n                    // This seems to fix this IE9 \"feature\": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4\n                    iframeSrcAttributes = contentHtml.find(\"iframe:not(.k-content-frame)\").map(function() {\n                        var src = this.getAttribute(\"src\");\n                        this.src = \"\";\n                        return src;\n                    });\n\n                    // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM\n                    wrapper\n                        .toggleClass(\"k-rtl\", isRtl)\n                        .attr(\"tabindex\", 0)\n                        .append(contentHtml)\n                        .find(\"iframe:not(.k-content-frame)\").each(function(index) {\n                        // Restore the src attribute of the iframes when they are part of the live DOM tree\n                        this.src = iframeSrcAttributes[index];\n                    });\n\n                    if (this.containment) {\n                        this.containment.prepend(wrapper);\n                    } else if (this.appendTo) {\n                        wrapper.appendTo(this.appendTo);\n                    }\n\n                    wrapper.find(\".k-window-title\")\n                        .css(isRtl ? \"left\" : \"right\", outerWidth(wrapper.find(\".k-window-titlebar-actions\")) + 10);\n\n                    contentHtml.css(\"visibility\", \"\").show();\n\n                    if ($(contentHtml).hasClass(KHIDDEN))\n                    {\n                        $(contentHtml).removeClass(KHIDDEN);\n                    }\n                    contentHtml.find(\"[data-role=editor]\").each(function() {\n                        var editor = $(this).data(\"kendoEditor\");\n\n                        if (editor) {\n                            editor.refresh();\n                        }\n                    });\n\n                    wrapper = contentHtml = null;\n                }\n            });\n\n            templates = {\n                wrapper: template(() => \"<div class='k-window'></div>\"),\n                action: template(({ name, icon }) => {\n                    let iconName = (icon || \"\").toLowerCase() || name.toLowerCase();\n                    if (iconName == \"restore\") { iconName = \"window-restore\"; }\n\n                    return kendo.html.renderButton(`<button role='button' class='k-window-titlebar-action' aria-label='${name}'></button>`, { icon: iconName, fillMode: \"flat\" });\n                }),\n                titlebar: template(({ title }) =>\n                    \"<div class='k-window-titlebar'>\" +\n                        `<span class='k-window-title'>${title}</span>` +\n                        \"<div class='k-window-titlebar-actions'></div>\" +\n                    \"</div>\"\n                ),\n                overlay: \"<div class='k-overlay'></div>\",\n                contentFrame: template(({ title, content }) =>\n                    `<iframe frameborder='0' title='${title}' class='${KCONTENTFRAME}' ` +\n                    `src='${content.url}'>` +\n                    \"This page requires frames in order to show content\" +\n                    \"</iframe>\"\n                ),\n                resizeHandle: template((data) => `<div aria-hidden='true' class='k-resize-handle k-resize-${data}'></div>`)\n            };\n\n\n            function WindowResizing(wnd) {\n                var that = this;\n                that.owner = wnd;\n                that._preventDragging = false;\n                that._draggable = new Draggable(wnd.wrapper, {\n                    filter: \">\" + KWINDOWRESIZEHANDLES,\n                    group: wnd.wrapper.id + \"-resizing\",\n                    dragstart: that.dragstart.bind(that),\n                    drag: that.drag.bind(that),\n                    dragend: that.dragend.bind(that)\n                });\n\n                that._draggable.userEvents.bind(\"press\", that.addOverlay.bind(that));\n                that._draggable.userEvents.bind(\"release\", that.removeOverlay.bind(that));\n            }\n\n            WindowResizing.prototype = {\n                addOverlay: function() {\n                    this.owner.wrapper.append(templates.overlay);\n                },\n                removeOverlay: function() {\n                    this.owner.wrapper.find(KOVERLAY).remove();\n                },\n                dragstart: function(e) {\n                    var that = this;\n                    var wnd = that.owner;\n                    var wrapper = wnd.wrapper;\n\n                    that._preventDragging = wnd.trigger(RESIZESTART);\n                    if (that._preventDragging) {\n                        return;\n                    }\n\n                    that.elementPadding = parseInt(wrapper.css(\"padding-top\"), 10);\n                    that.initialPosition = kendo.getOffset(wrapper, \"position\");\n\n                    that.resizeDirection = e.currentTarget.prop(\"className\").replace(\"k-resize-handle k-resize-\", \"\");\n\n                    that.initialSize = {\n                        width: wrapper.outerWidth(),\n                        height: wrapper.outerHeight()\n                    };\n\n                    wnd._updateBoundaries();\n\n                    that.containerOffset = wnd.containment ? wnd.containment.position : kendo.getOffset(wnd.appendTo);\n\n                    var offsetParent = wrapper.offsetParent();\n\n                    if (offsetParent.is(\"html\")) {\n                        that.containerOffset.top = that.containerOffset.left = 0;\n                    } else {\n                        var marginTop = offsetParent.css(\"margin-top\");\n                        var marginLeft = offsetParent.css(\"margin-left\");\n                        var hasMargin = !zero.test(marginTop) || !zero.test(marginLeft);\n                        if (hasMargin) {\n                            var wrapperPosition = getPosition(wrapper[0]);\n                            var relativeElMarginLeft = wrapperPosition.left - that.containerOffset.left - that.initialPosition.left;\n                            var relativeElMarginTop = wrapperPosition.top - that.containerOffset.top - that.initialPosition.top;\n\n                            that._relativeElMarginLeft = relativeElMarginLeft > 1 ? relativeElMarginLeft : 0;\n                            that._relativeElMarginTop = relativeElMarginTop > 1 ? relativeElMarginTop : 0;\n\n                            that.initialPosition.left += that._relativeElMarginLeft;\n                            that.initialPosition.top += that._relativeElMarginTop;\n                        }\n                    }\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();\n\n                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n                },\n                drag: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n                    var that = this,\n                        wnd = that.owner,\n                        wrapper = wnd.wrapper,\n                        options = wnd.options,\n                        position = options.position,\n                        direction = that.resizeDirection,\n                        containerOffset = that.containerOffset,\n                        initialPosition = that.initialPosition,\n                        initialSize = that.initialSize,\n                        containmentContext = wnd.containment && !wnd._isPinned,\n                        rtl = kendo.support.isRtl(wnd.containment),\n                        leftRtlOffset = containmentContext && rtl && wnd.containment.innerWidth() > wnd.containment.width ? kendo.support.scrollbar() : 0,\n                        scrollOffset = containmentContext ? { top: wnd.containment.scrollTop(), left: wnd.containment.scrollLeft() } : { top: 0, left: 0 },\n                        newWidth, newHeight,\n                        windowBottom, windowRight,\n                        x = Math.max(e.x.location, 0),\n                        y = Math.max(e.y.location, 0);\n\n                        if (direction.indexOf(\"e\") >= 0) {\n\n                            if (wnd.containment && x - initialSize.width >= wnd.maxLeft - scrollOffset.left + containerOffset.left + leftRtlOffset) {\n                                newWidth = wnd.maxLeft + leftRtlOffset - initialPosition.left + initialSize.width - scrollOffset.left;\n                            } else {\n                                newWidth = x - initialPosition.left - containerOffset.left;\n                            }\n\n                            wrapper.outerWidth(constrain(newWidth, options.minWidth, options.maxWidth));\n                        } else if (direction.indexOf(\"w\") >= 0) {\n                            windowRight = initialPosition.left + initialSize.width + containerOffset.left;\n                            newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);\n                            position.left = windowRight - newWidth - containerOffset.left - leftRtlOffset - (that._relativeElMarginLeft || 0) + scrollOffset.left;\n\n                            if (wnd.containment && position.left <= wnd.minLeft) {\n                                position.left = wnd.minLeft;\n                                newWidth = constrain(windowRight - leftRtlOffset - position.left - containerOffset.left + scrollOffset.left, options.minWidth, options.maxWidth);\n                            }\n\n                            wrapper.css({\n                                left: position.left,\n                                width: newWidth\n                            });\n                        }\n\n                        var newWindowTop = y;\n                        if (wnd.options.pinned) {\n                            newWindowTop -= $(window).scrollTop();\n                        }\n                        if (direction.indexOf(\"s\") >= 0) {\n                            newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;\n\n                            if (newWindowTop - initialSize.height - that.elementPadding >= wnd.maxTop + containerOffset.top - scrollOffset.top) {\n                                newHeight = wnd.maxTop - initialPosition.top + initialSize.height - scrollOffset.top;\n                            }\n\n                            wrapper.outerHeight(constrain(newHeight, options.minHeight, options.maxHeight));\n                        } else if (direction.indexOf(\"n\") >= 0) {\n                            windowBottom = initialPosition.top + initialSize.height + containerOffset.top;\n                            newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);\n                            position.top = windowBottom - newHeight - containerOffset.top - (that._relativeElMarginTop || 0) + scrollOffset.top;\n\n                            if (position.top <= wnd.minTop && wnd.containment) {\n                                position.top = wnd.minTop;\n                                newHeight = constrain(windowBottom - position.top - containerOffset.top + scrollOffset.top, options.minHeight, options.maxHeight);\n                            }\n\n                            wrapper.css({\n                                top: position.top,\n                                height: newHeight\n                            });\n                        }\n\n                        if (newWidth) {\n                            wnd.options.width = newWidth + \"px\";\n                        }\n                        if (newHeight) {\n                            wnd.options.height = newHeight + \"px\";\n                        }\n\n                        wnd.resize();\n                },\n                dragend: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n\n                    var that = this,\n                        wnd = that.owner,\n                        wrapper = wnd.wrapper;\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();\n\n                    $(BODY).css(CURSOR, \"\");\n\n                    if (wnd.touchScroller) {\n                        wnd.touchScroller.reset();\n                    }\n\n                    if (e.keyCode == 27) {\n                        wrapper.css(that.initialPosition)\n                            .css(that.initialSize);\n                    }\n\n                    wnd.trigger(RESIZEEND);\n\n                    return false;\n                },\n                destroy: function() {\n                    if (this._draggable) {\n                        this._draggable.destroy();\n                    }\n\n                    this._draggable = this.owner = null;\n                }\n            };\n\n            function WindowDragging(wnd, dragHandle, clickMoveClick) {\n                var that = this,\n                    filter = dragHandle;\n\n                if (clickMoveClick) {\n                    filter += \",.k-overlay\";\n                }\n\n                that.owner = wnd;\n                that._preventDragging = false;\n                that._draggable = new Draggable(wnd.wrapper, {\n                    filter: dragHandle,\n                    group: wnd.wrapper.id + \"-moving\",\n                    clickMoveClick: clickMoveClick,\n                    dragstart: that.dragstart.bind(that),\n                    drag: that.drag.bind(that),\n                    dragend: that.dragend.bind(that),\n                    dragcancel: that.dragcancel.bind(that)\n                });\n\n                that._draggable.userEvents.stopPropagation = false;\n            }\n\n            WindowDragging.prototype = {\n                dragstart: function(e) {\n                    var wnd = this.owner,\n                        draggable = wnd.options.draggable,\n                        element = wnd.element,\n                        actions = element.find(\".k-window-titlebar-actions\"),\n                        containerOffset = kendo.getOffset(wnd.appendTo);\n\n                    this._preventDragging = wnd.trigger(DRAGSTART) || !draggable;\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, \"position\");\n\n                    wnd.initialPointerPosition = {\n                        left: wnd.options.position.left,\n                        top: wnd.options.position.top\n                    };\n\n                    wnd.startPosition = {\n                        left: e.x.client - wnd.initialWindowPosition.left,\n                        top: e.y.client - wnd.initialWindowPosition.top\n                    };\n\n                    wnd._updateBoundaries();\n                    if (!wnd.containment) {\n                        if (actions.length > 0) {\n                            wnd.minLeft = outerWidth(actions) + parseInt(actions.css(\"right\"), 10) - outerWidth(element);\n                        } else {\n                            wnd.minLeft = 20 - outerWidth(element); // at least 20px remain visible\n                        }\n\n                        wnd.minLeft -= containerOffset.left;\n                        wnd.minTop = -containerOffset.top;\n                    }\n\n                    $(templates.overlay).appendTo(wnd.wrapper).css({ opacity: 0 });\n\n                    wnd.wrapper.children(KWINDOWRESIZEHANDLES).hide();\n\n                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n                },\n\n                drag: function(e) {\n                    var wnd = this.owner;\n                    var position = wnd.options.position;\n                    var axis = wnd.options.draggable.axis;\n                    var left;\n                    var top;\n\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    if (!axis || axis.toLowerCase() === \"x\") {\n                        left = e.x.client - wnd.startPosition.left;\n\n                        if (wnd.containment && !wnd._isPinned) {\n                            left += wnd.containment.scrollLeft();\n                        }\n\n                        position.left = constrain(left, wnd.minLeft, wnd.maxLeft);\n                    }\n\n                    if (!axis || axis.toLowerCase() === \"y\") {\n                        top = e.y.client - wnd.startPosition.top;\n\n                        if (wnd.containment && !wnd._isPinned) {\n                            top += wnd.containment.scrollTop();\n                        }\n\n                        position.top = constrain(top, wnd.minTop, wnd.maxTop);\n                    }\n\n                    if (kendo.support.transforms) {\n                        $(wnd.wrapper).css(\n                            \"transform\", \"translate(\" +\n                            (position.left - wnd.initialPointerPosition.left) + \"px, \" +\n                            (position.top - wnd.initialPointerPosition.top) + \"px)\"\n                        );\n                    } else {\n                        $(wnd.wrapper).css(position);\n                    }\n\n                },\n\n                _finishDrag: function() {\n                    var wnd = this.owner;\n\n                    wnd.wrapper\n                        .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()\n                        .find(KOVERLAY).remove();\n\n                    $(BODY).css(CURSOR, \"\");\n                },\n\n                dragcancel: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n                    this._finishDrag();\n\n                    e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);\n                },\n\n                dragend: function() {\n                    var wnd = this.owner;\n\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    $(wnd.wrapper)\n                        .css(wnd.options.position)\n                        .css(\"transform\", \"\");\n\n                    this._finishDrag();\n\n                    wnd.trigger(DRAGEND);\n\n                    return false;\n                },\n                destroy: function() {\n                    if (this._draggable) {\n                        this._draggable.destroy();\n                    }\n\n                    this._draggable = this.owner = null;\n                }\n            };\n\n            kendo.ui.plugin(Window);\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}