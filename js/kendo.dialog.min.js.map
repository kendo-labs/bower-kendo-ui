{"version":3,"sources":["raw-js/kendo.dialog.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodialog","js","this","$","undefined$1","templates","kendo","window","Widget","ui","TabKeyTrap","Popup","template","keys","isFunction","encode","htmlEncode","NS","KDIALOGWRAP","KWINDOW","KCLOSE","KCONTENTSELECTOR","KSCROLL","KDIALOGTITLE","KDIALOGTITLEBAR","KBUTTONGROUP","KBUTTON","VISIBLE","ZINDEX","BODY","INITOPEN","TOUCHSTART","TOUCHMOVE","OPEN","CLOSE","SHOW","HIDE","SIZE","small","medium","large","HIDDEN","OVERFLOW","DATADOCOVERFLOWRULE","DATAHTMLTAPYRULE","ceil","Math","defined","x","constrain","value","low","high","max","min","parseInt","Infinity","buttonKeyTrigger","e","keyCode","ENTER","SPACEBAR","DialogBase","extend","init","element","options","that","fn","call","_init","notify","_showWatermarkOverlay","wrapper","_centerCallback","_center","bind","appendTo","visible","is","wrapperTemplate","_createDialog","closest","dialogWrapper","_defaultFocus","_tabindex","_dimensions","modal","_isDialog","width","height","style","indexOf","_tabKeyTrap","_triggerOpen","hide","setOptions","sizeClass","size","removeClass","getValidCssClass","themeColor","title","content","destroy","children","html","actions","remove","_createActionbar","show","_closable","addClass","_enableDocumentScrolling","name","dimensions","i","length","css","_setElementMaxHeight","toString","outerWidth","minWidth","maxWidth","outerHeight","minHeight","maxHeight","_setElementHeight","elementMaxHeight","parseFloat","_uiHeight","elementHeight","_applyScrollClassName","get","scrollHeight","actionbar","actionbarHeight","offsetHeight","titlebar","_closeClick","preventDefault","close","_closeKeyHandler","ESC","_keydown","_closing","closable","isRtl","support","titleId","id","guid","append","find","toggleClass","attr","titlebarActions","prepend","autoApplyNS","on","buttonLayout","_addButtons","action","text","actionClick","_actionClick","actionKeyHandler","_actionKeyHandler","_mergeTextWithOptions","cssClass","data","target","closeBtn","actionButtons","tabIndex","_runActionBtn","currentTarget","sender","toFront","_triggerInitOpen","trigger","preventScroll","_stopDocumentScrolling","_focusDialog","open","overlay","showOptions","_animationOptions","kendoStop","duration","effects","Fade","overlayFx","fx","fadeIn","endValue","play","kendoAnimate","complete","_openAnimationEnd","animation","_initOpenTriggered","zIndex","originalZIndex","center","each","zIndexNew","isNaN","systemTriggered","arguments","_close","_stopCenterOnResize","hideOptions","userTriggered","_handleDocumentScrolling","reverse","_closeAnimationEnd","_centerOnResize","documentWindow","newLeft","newTop","left","top","_trackResize","onResize","unbindResize","modals","_modals","$body","_storeOverflowRule","$html","mobileOS","ios","addEventListener","_touchStart","passive","_touchMove","changedTouches","pageY","$target","upScroll","preventYScroll","scrollTop","clientHeight","document","body","_restoreOverflowRule","removeData","removeEventListener","$element","_isOverflowStored","overflowRule","overflow","previousFocus","_previousFocus","lastModal","_object","last","setTimeout","focus","zStack","filter","containment","sort","a","b","widget","widgetInstance","_destroy","ns","off","encodedHtml","prependTo","firstModal","first","activeElement","_focus","trap","node","events","Dialog","messages","plugin","PopupBox","alertWrapper","_ensureContentId","_ariaDescribedBy","_initFocus","o","_chooseEntryFocus","location","host","okText","cancel","promptInput","Alert","Confirm","result","Deferred","primary","resolve","reject","Prompt","_createPrompt","promptContainer","promptInputContainer","insertAfter","input","TextBox","icon","iconClass","alert","confirm","prompt","kendoAlert","kendoConfirm","kendoPrompt","jQuery","kendo$1","__meta__","category","description","depends","Object","defineProperty"],"mappings":"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","file":"kendo.dialog.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.popup.js'), require('kendo.textbox.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.popup', 'kendo.textbox', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendodialog = global.kendodialog || {}, global.kendodialog.js = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n            id: \"dialog\",\n            name: \"Dialog\",\n            category: \"web\", // suite\n            description: \"The dialog widget is a modal popup that brings information to the user.\",\n            depends: [\"core\", \"popup\", \"textbox\", \"icons\"] // dependencies\n        };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Widget = kendo.ui.Widget,\n                TabKeyTrap = kendo.ui.Popup.TabKeyTrap,\n                template = kendo.template,\n                keys = kendo.keys,\n                isFunction = kendo.isFunction,\n                encode = kendo.htmlEncode,\n                NS = \"kendoWindow\",\n                KDIALOG = \".k-dialog\",\n                KDIALOGWRAP = \".k-dialog-wrapper\",\n                KWINDOW = \".k-window\",\n                KCLOSE = \"[data-role='close']\",\n                KCONTENTCLASS = \"k-window-content k-dialog-content\",\n                KCONTENTSELECTOR = \".k-window-content\",\n                KSCROLL = \"k-scroll\",\n                KDIALOGTITLE = \".k-dialog-title\",\n                KDIALOGTITLEBAR = \".k-dialog-titlebar\",\n                KBUTTONGROUP = \".k-dialog-actions\",\n                // KACTIONS = \".k-actions\",\n                KBUTTON = \".k-button\",\n                KTEXTBOX = \".k-input-inner\",\n                KOVERLAY = \".k-overlay\",\n                VISIBLE = \":visible\",\n                ZINDEX = \"zIndex\",\n                BODY = \"body\",\n                INITOPEN = \"initOpen\",\n                TOUCHSTART = \"touchstart\",\n                TOUCHMOVE = \"touchmove\",\n                OPEN = \"open\",\n                CLOSE = \"close\",\n                SHOW = \"show\",\n                HIDE = \"hide\",\n                SIZE = {\n                    small: \"k-window-sm\",\n                    medium: \"k-window-md\",\n                    large: \"k-window-lg\"\n                },\n                HIDDEN = \"hidden\",\n                OVERFLOW = \"overflow\",\n                DATADOCOVERFLOWRULE = \"original-overflow-rule\",\n                DATAHTMLTAPYRULE = \"tap-y\",\n                messages = {\n                    okText: \"OK\",\n                    cancel: \"Cancel\",\n                    promptInput: \"Input\"\n                },\n                ceil = Math.ceil,\n                templates;\n\n            function defined(x) {\n                return (typeof x != \"undefined\");\n            }\n\n            function constrain(value, low, high) {\n                return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));\n            }\n\n            function buttonKeyTrigger(e) {\n                return e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR;\n            }\n\n            var DialogBase = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n                    Widget.fn.init.call(that, element, options);\n                    that._init(that.element, that.options);\n                    kendo.notify(that);\n                    if (that._showWatermarkOverlay) {\n                        that._showWatermarkOverlay(that.wrapper[0]);\n                    }\n                },\n\n                _init: function(element, options) {\n                    var that = this,\n                        wrapper;\n\n                    that._centerCallback = that._center.bind(that);\n\n                    that.appendTo = $(BODY);\n                    if (!defined(options.visible) || options.visible === null) {\n                        options.visible = element.is(VISIBLE);\n                    }\n\n                    if (that.wrapperTemplate === undefined$1) {\n                        that.wrapperTemplate = templates.wrapper;\n                    }\n\n                    that._createDialog();\n                    wrapper = that.wrapper = element.closest(KDIALOG);\n                    that.dialogWrapper = wrapper.closest(KDIALOGWRAP);\n\n                    if (options._defaultFocus === undefined$1) {\n                        that._defaultFocus = element[0];\n                    }\n\n                    that._tabindex(element);\n                    that._dimensions();\n\n                    if (!options.modal && that._isDialog()) {\n                        that.dialogWrapper.width(that.wrapper.width());\n                        that.dialogWrapper.height(that.wrapper.height());\n                        if (that.wrapper[0].style.width.indexOf(\"%\") > -1) {\n                            that.wrapper[0].style.width = \"100%\";\n                        }\n                        if (that.wrapper[0].style.height.indexOf(\"%\") > -1) {\n                            that.wrapper[0].style.height = \"100%\";\n                        }\n                    }\n\n                    this._tabKeyTrap = new TabKeyTrap(wrapper);\n\n                    if (!that.options.visible) {\n                        that.dialogWrapper.hide();\n                    } else {\n                        that._triggerOpen();\n                    }\n                },\n\n                setOptions: function(options) {\n                    var that = this;\n                    var sizeClass = that.options.size;\n                    that.wrapper.removeClass(kendo.getValidCssClass(\"k-dialog-\", \"themeColor\", that.options.themeColor));\n\n                    options = $.extend(that.options, options);\n\n                    Widget.fn.setOptions.call(that, options);\n\n                    if (options.title !== undefined$1) {\n                        that.title(options.title);\n                    }\n\n                    if (options.content) {\n                        kendo.destroy(that.element.children());\n                        that.element.html(options.content);\n                    }\n\n                    if (options.actions) {\n                        that.wrapper.children(KBUTTONGROUP).remove();\n                        that._createActionbar(that.wrapper);\n                    }\n\n                    that.dialogWrapper.show();\n                    that._closable(that.wrapper);\n\n                    that.wrapper.removeClass(SIZE[sizeClass]);\n                    that._dimensions();\n\n                    if (!options.visible) {\n                        that.dialogWrapper.hide();\n                    } else {\n                        that._triggerOpen();\n                    }\n\n                    if (options.themeColor && options.themeColor !== \"none\") {\n                        that.wrapper.addClass(kendo.getValidCssClass(\"k-dialog-\", \"themeColor\", that.options.themeColor));\n                    }\n\n                    if (typeof options.modal !== \"undefined\") {\n                        that._enableDocumentScrolling();\n                    }\n                },\n\n                _isDialog: function() {\n                    return this.options.name === \"Dialog\";\n                },\n\n                _dimensions: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        width = options.width,\n                        height = options.height,\n                        sizeClass = options.size,\n                        dimensions = [\"minWidth\", \"minHeight\", \"maxWidth\", \"maxHeight\"];\n\n                    for (var i = 0; i < dimensions.length; i++) {\n                        var value = options[dimensions[i]];\n                        if (value && value != Infinity) {\n                            wrapper.css(dimensions[i], value);\n                        }\n                    }\n\n                    this._setElementMaxHeight();\n\n                    if (width) {\n                        if (width.toString().indexOf(\"%\") > 0) {\n                            wrapper.width(width);\n                        } else {\n                            wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));\n                        }\n                    }\n\n                    if (height) {\n                        if (height.toString().indexOf(\"%\") > 0) {\n                            wrapper.height(height);\n                        } else {\n                            wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));\n                        }\n\n                        this._setElementHeight();\n                    }\n\n                    if (sizeClass && SIZE[sizeClass]) {\n                        wrapper.addClass(SIZE[sizeClass]);\n                    }\n                },\n\n                _setElementMaxHeight: function() {\n                    var that = this,\n                        element = that.element,\n                        maxHeight = that.options.maxHeight,\n                        elementMaxHeight;\n\n                    if (maxHeight != Infinity) {\n                        elementMaxHeight = parseFloat(maxHeight, 10) - that._uiHeight();\n                        if (elementMaxHeight > 0) {\n                            element.css({\n                                maxHeight: ceil(elementMaxHeight) + \"px\"\n                            });\n                        }\n                    }\n\n                },\n\n                _setElementHeight: function() {\n                    var that = this,\n                        element = that.element,\n                        height = that.wrapper.outerHeight(true),\n                        elementHeight = parseFloat(height, 10) - that._uiHeight();\n\n                    if (elementHeight < 0) {\n                        elementHeight = 0;\n                    }\n\n                    element.css({\n                        height: ceil(elementHeight) + \"px\"\n                    });\n\n                    this._applyScrollClassName(element);\n\n                },\n\n                _applyScrollClassName: function(element) {\n                        var hasScroll = element.get(0).scrollHeight > element.outerHeight();\n\n                        if (hasScroll) {\n                            element.addClass(KSCROLL);\n                        } else {\n                            element.removeClass(KSCROLL);\n                        }\n                },\n\n                _uiHeight: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        actionbar = wrapper.children(KBUTTONGROUP),\n                        actionbarHeight = actionbar[0] && actionbar[0].offsetHeight || 0,\n                        titlebar = wrapper.children(KDIALOGTITLEBAR),\n                        titlebarHeight = titlebar[0] && titlebar[0].offsetHeight || 0;\n\n                    return actionbarHeight + titlebarHeight;\n                },\n\n                _closeClick: function(e) {\n                    e.preventDefault();\n                    this.close(false);\n                },\n\n                _closeKeyHandler: function(e) {\n                    if (buttonKeyTrigger(e) || e.keyCode == keys.ESC) {\n                        this.close(false);\n                    }\n                },\n\n                _keydown: function(e) {\n                    var that = this,\n                        options = that.options,\n                        keyCode = e.keyCode;\n\n                    if (keyCode == keys.ESC && !that._closing && options.closable) {\n                        that.close(false);\n                    }\n                },\n\n                _createDialog: function() {\n                    var that = this,\n                        content = that.element,\n                        options = that.options,\n                        isRtl = kendo.support.isRtl(content),\n                        titlebar = $(templates.titlebar(options)),\n                        titleId = (content.id || kendo.guid()) + \"_title\",\n                        wrapper = $(that.wrapperTemplate(options));\n\n                    content.addClass(KCONTENTCLASS);\n                    that.appendTo.append(wrapper);\n                    wrapper = wrapper.find(\".k-dialog\");\n                    wrapper.toggleClass(\"k-rtl\", isRtl);\n\n                    if (options.title !== false) {\n                        wrapper.append(titlebar);\n                        titlebar.attr(\"id\", titleId);\n                        wrapper.attr(\"aria-labelledby\", titleId);\n                    }\n\n                    that._closable(wrapper);\n\n                    wrapper.append(content);\n                    if (options.themeColor && options.themeColor !== \"none\") {\n                        wrapper.addClass(wrapper.addClass(kendo.getValidCssClass(\"k-dialog-\", \"themeColor\", options.themeColor)));\n                    }\n\n                    if (options.content) {\n                        kendo.destroy(content.children());\n                        content.html(options.content);\n                    }\n\n                    if (options.actions.length) {\n                        that._createActionbar(wrapper);\n                    }\n                },\n\n                _closable: function(wrapper) {\n                    var that = this;\n                    var options = that.options;\n                    var titlebar = wrapper.children(KDIALOGTITLEBAR);\n                    var titlebarActions = titlebar.find(\".k-window-titlebar-actions\");\n                    var closeAction = titlebarActions.length ? titlebarActions.find(KCLOSE) : wrapper.find(KCLOSE);\n\n                    closeAction.remove();\n\n                    if (options.closable !== false) {\n                        if (options.title !== false && titlebarActions.length) {\n                            titlebarActions.append(templates.close(options));\n                        }\n                        else {\n                            wrapper.prepend(templates.close(options));\n                        }\n\n                        wrapper.autoApplyNS(NS);\n                        that.element.autoApplyNS(NS);\n\n                        wrapper.find(KCLOSE)\n                            .on(\"click\", that._closeClick.bind(that))\n                            .on(\"keydown\", that._closeKeyHandler.bind(that));\n\n                        that.element.on(\"keydown\", that._keydown.bind(that));\n                    }\n                },\n\n                _createActionbar: function(wrapper) {\n                    var isStretchedLayout = (this.options.buttonLayout === \"stretched\");\n                    var buttonLayout = isStretchedLayout ? \"stretched\" : \"end\";\n                    var actionbar = $(templates.actionbar({ buttonLayout: buttonLayout }));\n\n                    this._addButtons(actionbar);\n                    wrapper.append(actionbar);\n                },\n\n                _addButtons: function(actionbar) {\n                    var that = this,\n                        actionClick = that._actionClick.bind(that),\n                        actionKeyHandler = that._actionKeyHandler.bind(that),\n                        actions = that.options.actions,\n                        length = actions.length,\n                        action,\n                        text;\n\n                    for (var i = 0; i < length; i++) {\n                        action = actions[i];\n                        text = that._mergeTextWithOptions(action);\n\n                        $(templates.action(action, text))\n                            .autoApplyNS(NS)\n                            .appendTo(actionbar)\n                            .addClass(action.cssClass)\n                            .data(\"action\", action.action)\n                            .on(\"click\", actionClick)\n                            .on(\"keydown\", actionKeyHandler);\n                    }\n                },\n\n                _mergeTextWithOptions: function(action) {\n                    var text = action.text;\n\n                    if (isFunction(text)) {\n                        return text(this.options);\n                    }\n\n                    return text ? text : \"\";\n                },\n\n                _tabindex: function(target) {\n                    var that = this;\n                    var wrapper = that.wrapper;\n                    var closeBtn = wrapper.find(KCLOSE);\n                    var actionButtons = wrapper.find(KBUTTONGROUP + \" \" + KBUTTON);\n\n                    Widget.fn._tabindex.call(this, target);\n\n                    var tabIndex = target.attr(\"tabindex\");\n\n                    closeBtn.attr(\"tabIndex\", tabIndex);\n                    actionButtons.attr(\"tabIndex\", tabIndex);\n                },\n\n                _actionClick: function(e) {\n                    if (this.dialogWrapper.is(VISIBLE)) {\n                        this._runActionBtn(e.currentTarget);\n                    }\n                },\n\n                _actionKeyHandler: function(e) {\n                    if (buttonKeyTrigger(e)) {\n                        e.preventDefault();\n                        this._runActionBtn(e.currentTarget);\n                    } else if (e.keyCode == keys.ESC) {\n                        this.close(false);\n                    }\n                },\n\n                _runActionBtn: function(target) {\n                    var that = this;\n                    if (that._closing) {\n                        return;\n                    }\n\n                    var action = $(target).data(\"action\"),\n                        preventClose = (isFunction(action) && action({ sender: that }) === false);\n\n                    if (!preventClose) {\n                        that.close(false);\n                    }\n                },\n\n                _triggerOpen: function() {\n                    var that = this;\n                    var options = that.options;\n\n                    that.toFront();\n                    that._triggerInitOpen();\n                    that.trigger(OPEN);\n                    if (options.modal) {\n                        if (options.modal.preventScroll) {\n                            that._stopDocumentScrolling();\n                        }\n                        that._focusDialog();\n                    }\n                },\n\n                open: function() {\n                    var that = this,\n                        wrapper = that.dialogWrapper,\n                        showOptions = this._animationOptions(OPEN),\n                        options = that.options,\n                        overlay;\n\n                    this._triggerInitOpen();\n\n                    if (!that.trigger(OPEN)) {\n                        if (that._closing) {\n                            wrapper.kendoStop(true, true);\n                        }\n\n                        that._closing = false;\n\n                        that.toFront();\n                        options.visible = true;\n                        if (options.modal) {\n                            overlay = that.dialogWrapper.find(KOVERLAY);\n                            if (options.modal.preventScroll) {\n                                that._stopDocumentScrolling();\n                            }\n\n                            overlay.kendoStop(true, true);\n\n                            if (showOptions.duration && kendo.effects.Fade) {\n                                var overlayFx = kendo.fx(overlay).fadeIn();\n                                overlayFx.duration(showOptions.duration || 0);\n                                overlayFx.endValue(0.5);\n                                overlayFx.play();\n                            }\n                            that.dialogWrapper.show();\n\n                        }\n\n                        (options.modal ? that.wrapper : that.dialogWrapper).show().kendoStop().kendoAnimate({\n                            effects: showOptions.effects,\n                            duration: showOptions.duration,\n                            complete: that._openAnimationEnd.bind(that)\n                        });\n                        wrapper.show();\n\n                    }\n\n                    return that;\n                },\n\n                _animationOptions: function(id) {\n                    var animation = this.options.animation;\n                    var basicAnimation = {\n                        open: { effects: {} },\n                        close: { hide: true, effects: {} }\n                    };\n\n                    return animation && animation[id] || basicAnimation[id];\n                },\n\n                _openAnimationEnd: function() {\n                    if (this.options.modal) {\n                        this._focusDialog();\n                    }\n                    this.trigger(SHOW);\n                },\n\n                _triggerInitOpen: function() {\n                    if (!defined(this._initOpenTriggered)) {\n                        this._initOpenTriggered = true;\n                        this.trigger(INITOPEN);\n                    }\n                },\n\n                toFront: function() {\n                    var that = this,\n                        wrapper = that.dialogWrapper,\n                        zIndex = +wrapper.css(ZINDEX),\n                        originalZIndex = zIndex;\n\n                    that.center();\n\n                    $(KWINDOW + \",\" + KDIALOGWRAP).each(function(i, element) {\n                        var windowObject = $(element),\n                            zIndexNew = windowObject.css(ZINDEX);\n\n                        if (!isNaN(zIndexNew)) {\n                            zIndex = Math.max(+zIndexNew, zIndex);\n                        }\n                    });\n\n                    if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {\n                        wrapper.css(ZINDEX, zIndex + 1);\n                    }\n\n                    wrapper = null;\n\n                    return that;\n                },\n\n                close: function(systemTriggered) {\n                    if (!arguments.length) {\n                        systemTriggered = true;\n                    }\n\n                    this._close(systemTriggered);\n                    this._stopCenterOnResize();\n                    return this;\n                },\n\n                _close: function(systemTriggered) {\n                    var that = this,\n                        wrapper = that.dialogWrapper,\n                        options = that.options,\n                        showOptions = this._animationOptions(\"open\"),\n                        hideOptions = this._animationOptions(\"close\");\n\n                    if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {\n                        if (that._closing) {\n                            return;\n                        }\n                        that._closing = true;\n\n                        options.visible = false;\n                        this._handleDocumentScrolling();\n\n                        (options.modal ? that.wrapper : that.dialogWrapper).kendoStop().kendoAnimate({\n                            effects: hideOptions.effects || showOptions.effects,\n                            reverse: hideOptions.reverse === true,\n                            duration: hideOptions.duration,\n                            complete: this._closeAnimationEnd.bind(this)\n                        });\n                    }\n\n                    return that;\n                },\n\n                center: function() {\n                    this._center();\n                    this._centerOnResize();\n                },\n\n                _center: function() {\n                    var that = this,\n                        wrapper = that.dialogWrapper,\n                        documentWindow = $(window),\n                        scrollTop = 0,\n                        scrollLeft = 0,\n                        newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2),\n                        newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css(\"paddingTop\"), 10)) / 2);\n\n                    wrapper.css({\n                        left: newLeft,\n                        top: newTop\n                    });\n\n                    return that;\n                },\n\n                _centerOnResize: function() {\n                    if (this._trackResize) {\n                        return;\n                    }\n\n                    kendo.onResize(this._centerCallback);\n                    this._trackResize = true;\n                },\n\n                _stopCenterOnResize: function() {\n                    kendo.unbindResize(this._centerCallback);\n                    this._trackResize = false;\n                },\n\n                _handleDocumentScrolling: function() {\n                    var modals = this._modals();\n                    var options = this.options;\n                    var hideOverlay = options.modal && !modals.length;\n\n                    if (hideOverlay && options.modal.preventScroll) {\n                        this._enableDocumentScrolling();\n                    } else if (modals.length && options.modal.preventScroll) {\n                         this._stopDocumentScrolling();\n                    }\n                },\n\n                _stopDocumentScrolling: function() {\n                    var that = this;\n\n                    var $body = $(\"body\");\n                    that._storeOverflowRule($body);\n                    $body.css(OVERFLOW, HIDDEN);\n\n                    var $html = $(\"html\");\n                    var html = $html[0];\n                    that._storeOverflowRule($html);\n                    $html.css(OVERFLOW, HIDDEN);\n\n                    // prevent touch due to bug in ios\n                    if (kendo.support.mobileOS.ios) {\n                        html.addEventListener(TOUCHSTART, that._touchStart, { passive: false });\n                        html.addEventListener(TOUCHMOVE, that._touchMove, { passive: false });\n                    }\n                },\n\n                _touchStart: function(e) {\n                    $(this).data(DATAHTMLTAPYRULE, e.changedTouches[0].pageY);\n                },\n\n                _touchMove: function(e) {\n                    var target = e.target;\n                    var $target = $(e.target);\n                    var upScroll = e.changedTouches[0].pageY - $(this).data(DATAHTMLTAPYRULE) > 0;\n                    var preventYScroll = $target.is(KCONTENTSELECTOR) &&\n                        (upScroll && $target.scrollTop() === 0) ||\n                        (!upScroll && $target.scrollTop() === target.scrollHeight - target.clientHeight);\n                    if (!$target.is(KCONTENTSELECTOR) || preventYScroll) {\n                        e.preventDefault();\n                    }\n                },\n\n                _enableDocumentScrolling: function() {\n                    var that = this;\n                    var $body = $(document.body);\n                    var $html = $(\"html\");\n                    var html = $html[0];\n\n                    that._restoreOverflowRule($body);\n                    that._restoreOverflowRule($html);\n\n                    if (kendo.support.mobileOS.ios) {\n                        $html.removeData(DATAHTMLTAPYRULE);\n                        html.removeEventListener(TOUCHSTART, that._touchStart, { passive: false });\n                        html.removeEventListener(TOUCHMOVE, that._touchMove, { passive: false });\n                    }\n                },\n\n                _storeOverflowRule: function($element) {\n                    if (this._isOverflowStored($element)) {\n                        return;\n                    }\n\n                    var overflowRule = $element.get(0).style.overflow;\n\n                    if (typeof overflowRule === \"string\") {\n                        $element.data(DATADOCOVERFLOWRULE, overflowRule);\n                    }\n                },\n\n                _isOverflowStored: function($element) {\n                    return typeof $element.data(DATADOCOVERFLOWRULE) === \"string\";\n                },\n\n                _restoreOverflowRule: function($element) {\n                    var overflowRule = $element.data(DATADOCOVERFLOWRULE);\n\n                    if (overflowRule !== null && overflowRule !== undefined$1) {\n                        $element.css(OVERFLOW, overflowRule);\n                        $element.removeData(DATADOCOVERFLOWRULE);\n                    } else {\n                        $element.css(OVERFLOW, \"\");\n                    }\n                },\n\n                _closeAnimationEnd: function() {\n                    var that = this,\n                        previousFocus = that._previousFocus;\n\n                    that._closing = false;\n                    that.dialogWrapper.hide().css(\"opacity\", \"\");\n                    that.trigger(HIDE);\n\n                    if (that.options.modal) {\n                        var lastModal = that._object(that._modals().last());\n                        if (lastModal) {\n                            lastModal.toFront();\n                        } else if (previousFocus) {\n                            that._previousFocus = null;\n\n                            setTimeout(function() {\n                                previousFocus.focus();\n                            });\n                        }\n                    }\n                },\n\n                _modals: function() {\n                    var that = this;\n\n                    var zStack = $(KWINDOW + \",\" + KDIALOGWRAP).filter(function() {\n                        var modal = that._object($(this));\n\n                        return modal &&\n                            modal.options &&\n                            modal.options.modal &&\n                            modal.options.visible &&\n                            modal.options.appendTo === that.options.appendTo &&\n                            !modal.containment &&\n                            $(modal.element).is(VISIBLE);\n                    });\n\n                    zStack = [].sort.call(zStack, function(a, b) {\n                        return +$(a).css(\"zIndex\") - +$(b).css(\"zIndex\");\n                    });\n\n                    that = null;\n\n                    return zStack;\n                },\n\n                _object: function(element) {\n                    var content = element.find(KCONTENTSELECTOR);\n                    var widget = kendo.widgetInstance(content);\n\n                    if (widget) {\n                        return widget;\n                    }\n\n                    return undefined$1;\n                },\n\n                destroy: function() {\n                    var that = this;\n                    that._destroy();\n\n                    Widget.fn.destroy.call(that);\n\n                    kendo.destroy(that.wrapper);\n\n                    that.dialogWrapper.remove();\n                    that.dialogWrapper = that.wrapper = that.element = $();\n                },\n\n                _destroy: function() {\n                    var that = this;\n                    var ns = \".\" + NS;\n\n                    that.wrapper.off(ns);\n                    that.element.off(ns);\n                    that.wrapper.find(KCLOSE + \",\" + KBUTTONGROUP + \" > \" + KBUTTON).off(ns);\n                    that._stopCenterOnResize();\n                },\n\n                title: function(html) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        titlebar = wrapper.children(KDIALOGTITLEBAR),\n                        title = titlebar.children(KDIALOGTITLE),\n                        encodedHtml = encode(html);\n\n                    if (!arguments.length) {\n                        return title.html();\n                    }\n\n                    if (html === false) {\n                        titlebar.remove();\n                    } else {\n                        if (!titlebar.length) {\n                            titlebar = $(templates.titlebar(options)).prependTo(wrapper);\n                            title = titlebar.children(KDIALOGTITLE);\n                        }\n                        title.html(encodedHtml);\n                    }\n\n                    that.options.title = encodedHtml;\n\n                    return that;\n                },\n\n                content: function(html) {\n                    var that = this,\n                        content = that.wrapper.children(KCONTENTSELECTOR);\n\n                    if (!defined(html)) {\n                        return content.html();\n                    }\n\n                    kendo.destroy(content.children());\n                    content.html(html);\n\n                    that.options.content = html;\n\n                    return that;\n                },\n\n                _focusDialog: function() {\n                    var firstModal = this._object(this._modals().first());\n\n                    this._previousFocus = firstModal && firstModal._previousFocus ? firstModal._previousFocus : document.activeElement;\n\n                    if (this._defaultFocus) {\n                        this._focus(this._defaultFocus);\n                    }\n                    this._tabKeyTrap.trap();\n                },\n\n                _focus: function(node) {\n                    if (node) {\n                        node.focus();\n                    }\n                },\n\n                events: [\n                    INITOPEN,\n                    OPEN,\n                    CLOSE,\n                    SHOW,\n                    HIDE\n                ],\n\n                options: {\n                    title: \"\",\n                    buttonLayout: \"stretched\",\n                    themeColor: \"\",\n                    actions: [],\n                    modal: true,\n                    size: \"auto\",\n                    width: null,\n                    height: null,\n                    minWidth: 0,\n                    minHeight: 0,\n                    maxWidth: Infinity,\n                    maxHeight: Infinity,\n                    content: null,\n                    visible: null,\n                    appendTo: BODY,\n                    closable: true\n                }\n            });\n\n            var Dialog = DialogBase.extend({\n                options: {\n                    name: \"Dialog\",\n                    messages: {\n                        close: \"Close\"\n                    }\n                }\n            });\n\n            kendo.ui.plugin(Dialog);\n\n            var PopupBox = DialogBase.extend({\n                _init: function(element, options) {\n                    var that = this;\n\n                    that.wrapperTemplate = templates.alertWrapper;\n                    options._defaultFocus = null;\n                    that._ensureContentId(element);\n\n                    DialogBase.fn._init.call(that, element, options);\n\n                    that.bind(HIDE, that.destroy.bind(that));\n\n                    that._ariaDescribedBy();\n                    that._initFocus();\n                },\n\n                _ensureContentId: function(element) {\n                    var node = $(element);\n                    if (!node.attr(\"id\")) {\n                        node.attr(\"id\", kendo.guid() + \"_k-popup\");\n                    }\n                },\n\n                _ariaDescribedBy: function() {\n                    this.wrapper.attr(\"aria-describedby\", this.element.attr(\"id\"));\n                },\n\n                _initFocus: function() {\n                    var o = this.options;\n\n                    this._defaultFocus = this._chooseEntryFocus();\n                    if (this._defaultFocus && o.visible && o.modal) {\n                        this._focusDialog();\n                    }\n                },\n\n                _chooseEntryFocus: function() {\n                    return this.wrapper.find(KBUTTONGROUP + \" > \" + KBUTTON)[0];\n                },\n\n                options: {\n                    title: window.location.host,\n                    closable: false,\n                    messages: messages\n                }\n            });\n\n            var Alert = PopupBox.extend({\n                _init: function(element, options) {\n                    var that = this;\n                    PopupBox.fn._init.call(that, element, options);\n                },\n\n                options: {\n                    name: \"Alert\",\n                    modal: true,\n                    actions: [{\n                        text: ({ messages }) => `${encode(messages.okText)}`\n                    }]\n                }\n            });\n\n            kendo.ui.plugin(Alert);\n\n            var kendoAlert = function(text) {\n                return $(templates.alert).kendoAlert({ content: text }).data(\"kendoAlert\").open();\n            };\n\n            var Confirm = PopupBox.extend({\n                _init: function(element, options) {\n                    var that = this;\n                    PopupBox.fn._init.call(that, element, options);\n                    that.result = $.Deferred();\n                },\n\n                options: {\n                    name: \"Confirm\",\n                    modal: true,\n                    actions: [{\n                        text: ({ messages }) => `${encode(messages.okText)}`,\n                        primary: true,\n                        action: function(e) {\n                            e.sender.result.resolve();\n                        }\n                    }, {\n                        text: ({ messages }) => `${encode(messages.cancel)}`,\n                        action: function(e) {\n                            e.sender.result.reject();\n                        }\n                    }]\n                }\n            });\n\n            kendo.ui.plugin(Confirm);\n\n            var kendoConfirm = function(text) {\n                var confirmDialog = $(templates.confirm).kendoConfirm({ content: text }).data(\"kendoConfirm\").open();\n                return confirmDialog.result;\n            };\n\n            var Prompt = PopupBox.extend({\n                _init: function(element, options) {\n                    var that = this;\n                    PopupBox.fn._init.call(that, element, options);\n                    that._createPrompt();\n                    that.result = $.Deferred();\n                },\n\n                _createPrompt: function() {\n                    var value = this.options.value,\n                        promptContainer = $(templates.promptInputContainer(this.options)).insertAfter(this.element);\n\n                    this.input = new kendo.ui.TextBox(promptContainer.find(\"input\"));\n\n                    if (value) {\n                        this.input.value(value);\n                    }\n\n                    this._defaultFocus = this._chooseEntryFocus();\n                    this._focusDialog();\n                },\n\n                _chooseEntryFocus: function() {\n                    return this.wrapper.find(KTEXTBOX)[0];\n                },\n\n                options: {\n                    name: \"Prompt\",\n                    modal: true,\n                    value: \"\",\n                    actions: [{\n                        text: ({ messages }) => `${encode(messages.okText)}`,\n                        primary: true,\n                        action: function(e) {\n                            var sender = e.sender,\n                                value = sender.input.value();\n\n                            sender.result.resolve(value);\n                        }\n                    }, {\n                        text: ({ messages }) => `${encode(messages.cancel)}`,\n                        action: function(e) {\n                            var sender = e.sender,\n                                value = sender.input.value();\n\n                            e.sender.result.reject(value);\n                        }\n                    }]\n                }\n            });\n\n            kendo.ui.plugin(Prompt);\n\n            var kendoPrompt = function(text, value) {\n                var promptDialog = $(templates.prompt).kendoPrompt({\n                    content: text,\n                    value: value\n                }).data(\"kendoPrompt\").open();\n\n                return promptDialog.result;\n            };\n\n            templates = {\n                wrapper: template((options) => `<div class='k-dialog-wrapper'>${options.modal ? '<div class=\"k-overlay\"></div>' : ''}<div class='k-window k-dialog' role='dialog'></div></div>`),\n                action: template((data, text) => `<button type='button' class='k-button k-button-md k-rounded-md k-button-solid ${data.primary ? 'k-button-solid-primary' : 'k-button-solid-base'}'><span class=\"k-button-text\">${encode(text)}</span></button>`),\n                titlebar: template(({ title }) =>\n                    \"<div class='k-window-titlebar k-dialog-titlebar'>\" +\n                        `<span class='k-window-title k-dialog-title'>${encode(title)}</span>` +\n                        \"<div class='k-window-titlebar-actions k-dialog-titlebar-actions'></div>\" +\n                    \"</div>\"\n                ),\n                close: template(({ messages }) => `<button class=\"k-window-titlebar-action k-dialog-titlebar-action k-button k-button-md k-button-flat k-button-flat-base k-rounded-md k-icon-button\" data-role=\"close\" title='${encode(messages.close)}' aria-label='${encode(messages.close)}' tabindex='-1'>\n                                                    ${kendo.ui.icon({ icon: \"x\", iconClass: \"k-button-icon\" })}\n                                                </button>`),\n                actionbar: template(({ buttonLayout }) => `<div class='k-dialog-actions k-actions k-actions-horizontal k-window-actions k-actions-${encode(buttonLayout)}'></div>`),\n                alertWrapper: template(() => \"<div class='k-dialog-wrapper'><div class='k-overlay'></div><div class='k-window k-dialog' role='alertdialog'></div></div>\"),\n                alert: \"<div></div>\",\n                confirm: \"<div></div>\",\n                prompt: \"<div></div>\",\n                promptInputContainer: template(({ messages }) => `<div class='k-prompt-container'><input type='text' title='${encode(messages.promptInput)}' aria-label='${encode(messages.promptInput)}' /></div>`)\n            };\n\n            kendo.alert = kendoAlert;\n            kendo.confirm = kendoConfirm;\n            kendo.prompt = kendoPrompt;\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}