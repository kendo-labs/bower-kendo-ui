{"version":3,"sources":["raw-js/kendo.progressbar.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoprogressbar","js","this","$","undefined$1","kendo","window","Widget","ui","HORIZONTAL","VERTICAL","KPROGRESSBAR","KPROGRESSBARINDETERMINATE","KPROGRESSBARCOMPLETE","KPROGRESSWRAPPER","KPROGRESSSTATUS","LABEL_POSITION_END","KCOMPLETEDCHUNK","STATEDISABLED","PROGRESS_VALUE","CHUNK_ITEM","PROGRESSTYPE","VALUE","PERCENT","CHUNK","CHANGE","COMPLETE","math","Math","extend","templates","progressStatus","noProgressStatus","announceElement","ProgressBar","init","element","options","that","fn","call","_progressProperty","orientation","_fields","value","_validateValue","_validateType","type","_wrapper","ariaRole","_aria","_progressAnimation","min","_updateProgress","setOptions","wrapper","hasOwnProperty","toggleClass","reverse","enable","events","name","max","chunkCount","showStatus","animation","label","labelId","attr","role","announce","appendTo","text","_calculatePercentage","toFixed","_isStarted","progressWrapper","currentType","isValid","each","k","Error","format","container","initialValue","addClass","_addChunkProgressWrapper","prepend","find","_value","validated","_roundValue","isNaN","removeClass","removeAttr","parseFloat","power","pow","_round","percentage","_updateChunks","_onProgressUpdateAlways","_updateProgressWrapper","completedChunks","percentagesPerChunk","parseInt","percentageParsed","completedChunksCount","floor","slice","jQuery","animationDuration","_animation","duration","animationCssOptions","length","_addRegularProgressWrapper","animate","start","_onProgressAnimateStart","bind","progress","_onProgressAnimate","complete","_onProgressAnimateComplete","always","show","e","progressStatusWrapSize","progressInPercent","elem","style","css","currentValue","progressValue","progressWrapperSize","hide","trigger","destroy","remove","chunkSize","html","i","append","first","end","last","_normalizeChunkSize","lastChunk","currentSize","difference","_calculateChunkSize","chunkContainer","_onePercent","abs","plugin"],"mappings":"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","file":"kendo.progressbar.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoprogressbar = global.kendoprogressbar || {}, global.kendoprogressbar.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"progressbar\",\n        name: \"ProgressBar\",\n        category: \"web\",\n        description: \"The ProgressBar offers rich functionality for displaying and tracking progress\",\n        depends: [ \"core\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            DEFAULTMIN = 0,\n            DEFAULTMAX = 100,\n            DEFAULTVALUE = 0,\n            DEFAULTCHUNKCOUNT = 5,\n            KPROGRESSBAR = \"k-progressbar\",\n            KPROGRESSBARREVERSE = \"k-progressbar-reverse\",\n            KPROGRESSBARINDETERMINATE = \"k-progressbar-indeterminate\",\n            KPROGRESSBARCOMPLETE = \"k-complete\",\n            KPROGRESSWRAPPER = \"k-selected\",\n            KPROGRESSSTATUS = \"k-progress-status\",\n            LABEL_POSITION_END = \"k-progress-end\",\n            KCOMPLETEDCHUNK = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            PROGRESS_VALUE = \"k-progressbar-value\",\n            CHUNK_ITEM = \"k-progressbar-chunk\",\n            PROGRESSTYPE = {\n                VALUE: \"value\",\n                PERCENT: \"percent\",\n                CHUNK: \"chunk\"\n            },\n            CHANGE = \"change\",\n            COMPLETE = \"complete\",\n            BOOLEAN = \"boolean\",\n            math = Math,\n            extend = $.extend,\n            HUNDREDPERCENT = 100,\n            DEFAULTANIMATIONDURATION = 400,\n            PRECISION = 3,\n            templates = {\n                progressStatus: \"<span class='k-progress-status-wrap \" + LABEL_POSITION_END + \"'><span class='k-progress-status'></span></span>\",\n                noProgressStatus: \"<span class='k-progress-status-wrap \" + LABEL_POSITION_END + \"'></span>\",\n                announceElement: '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>'\n            };\n\n        var ProgressBar = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(this, element, options);\n\n                options = that.options;\n\n                that._progressProperty = (options.orientation === HORIZONTAL) ? \"width\" : \"height\";\n\n                that._fields();\n\n                options.value = that._validateValue(options.value);\n\n                that._validateType(options.type);\n\n                that._wrapper();\n\n                if (options.ariaRole) {\n                    that._aria();\n                }\n\n                that._progressAnimation();\n\n                if ((options.value !== options.min) && (options.value !== false)) {\n                   that._updateProgress();\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this,\n                    wrapper = that.wrapper;\n\n                Widget.fn.setOptions.call(that, options);\n\n                if (options.hasOwnProperty(\"reverse\")) {\n                    wrapper.toggleClass(\"k-progressbar-reverse\", options.reverse);\n                }\n\n                if (options.hasOwnProperty(\"enable\")) {\n                    that.enable(options.enable);\n                }\n\n                if (options.ariaRole) {\n                    that._aria();\n                }\n\n                that._progressAnimation();\n\n                that._validateValue();\n\n                that._updateProgress();\n            },\n\n            events: [\n                CHANGE,\n                COMPLETE\n            ],\n\n            options: {\n                name: \"ProgressBar\",\n                orientation: HORIZONTAL,\n                reverse: false,\n                min: DEFAULTMIN,\n                max: DEFAULTMAX,\n                value: DEFAULTVALUE,\n                enable: true,\n                type: PROGRESSTYPE.VALUE,\n                chunkCount: DEFAULTCHUNKCOUNT,\n                showStatus: true,\n                animation: { },\n                label: null,\n                labelId: null,\n                ariaRole: false\n            },\n\n            _aria: function() {\n                var that = this,\n                    options = that.options,\n                    wrapper = that.wrapper;\n\n                wrapper.attr({\n                    \"role\": \"progressbar\",\n                    \"aria-valuemin\": options.min,\n                    \"aria-valuemax\": options.max\n                });\n\n                if (!!options.labelId) {\n                    wrapper.attr(\"aria-labelledby\", options.labelId);\n                } else if (!!options.label) {\n                    wrapper.attr(\"aria-label\", options.label);\n                }\n\n                that.announce = $(templates.announceElement);\n                that.announce.appendTo($(\"body\"));\n\n                if (options.value !== false) {\n                    wrapper.attr(\"aria-valuenow\", options.value);\n\n                    that.announce.text(that._calculatePercentage().toFixed() + \"%\");\n                }\n            },\n\n            _fields: function() {\n                var that = this;\n\n                that._isStarted = false;\n\n                that.progressWrapper = that.progressStatus = $();\n            },\n\n            _validateType: function(currentType) {\n                var isValid = false;\n\n                $.each(PROGRESSTYPE, function(k, type) {\n                    if (type === currentType) {\n                        isValid = true;\n                        return false;\n                    }\n                });\n\n                if (!isValid) {\n                    throw new Error(kendo.format(\"Invalid ProgressBar type '{0}'\", currentType));\n                }\n            },\n\n            _wrapper: function() {\n                var that = this;\n                var container = that.wrapper = that.element;\n                var options = that.options;\n                var orientation = options.orientation;\n                var initialValue = (options.value !== false) ? options.value : options.min;\n\n                container.addClass(KPROGRESSBAR);\n\n                container.addClass(KPROGRESSBAR + \"-\" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));\n\n                if (options.enable === false) {\n                    container.addClass(STATEDISABLED);\n                }\n\n                if (options.reverse) {\n                    container.addClass(KPROGRESSBARREVERSE);\n                }\n\n                if (options.value === false) {\n                    container.addClass(KPROGRESSBARINDETERMINATE);\n                }\n\n                if (options.type === PROGRESSTYPE.CHUNK) {\n                    that._addChunkProgressWrapper();\n                } else {\n                    if (options.showStatus) {\n                        that.progressStatus = that.wrapper.prepend(templates.progressStatus)\n                                                  .find(\".\" + KPROGRESSSTATUS);\n\n                        if (options.type === PROGRESSTYPE.VALUE) {\n                            that.progressStatus.text(initialValue);\n                        } else {\n                            that.progressStatus.text(that._calculatePercentage(initialValue).toFixed() + \"%\");\n                        }\n                    } else {\n                        that.wrapper.prepend(templates.noProgressStatus);\n                    }\n                }\n            },\n\n            value: function(value) {\n                return this._value(value);\n            },\n\n            _value: function(value) {\n                var that = this;\n                var options = that.options;\n                var validated;\n\n                if (value === undefined$1) {\n                    return options.value;\n                } else {\n                    if (typeof value !== BOOLEAN) {\n                        value = that._roundValue(value);\n\n                        if (!isNaN(value)) {\n                            validated = that._validateValue(value);\n\n                            if (validated !== options.value) {\n                                that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);\n\n                                options.value = validated;\n\n                                that._isStarted = true;\n\n                                that._updateProgress();\n                            }\n                        }\n                    } else if (!value) {\n                        that.wrapper.addClass(KPROGRESSBARINDETERMINATE);\n                        that.wrapper.removeAttr(\"aria-valuenow\");\n                        options.value = false;\n\n                        if (that.announce) {\n                            that.announce.text(\"\");\n                        }\n                    }\n                }\n            },\n\n            _roundValue: function(value) {\n                 value = parseFloat(value);\n\n                 var power = math.pow(10, PRECISION);\n\n                 return kendo._round(value * power) / power;\n            },\n\n            _validateValue: function(value) {\n                var that = this;\n                var options = that.options;\n\n                if (value !== false) {\n                    if (value <= options.min || value === true) {\n                        return options.min;\n                    } else if (value >= options.max) {\n                        return options.max;\n                    }\n                } else if (value === false) {\n                    return false;\n                }\n\n                if (isNaN(that._roundValue(value))) {\n                    return options.min;\n                }\n\n                return value;\n            },\n\n            _updateProgress: function() {\n                var that = this;\n                var options = that.options;\n                var percentage = that._calculatePercentage();\n\n                if (options.type === PROGRESSTYPE.CHUNK) {\n                    that._updateChunks(percentage);\n                    that._onProgressUpdateAlways(options.value);\n                } else {\n                    that._updateProgressWrapper(percentage);\n                }\n\n                if (options.ariaRole) {\n                    that.wrapper.attr(\"aria-valuenow\", that.options.value);\n\n                    if (that.announce) {\n                        that.announce.text(percentage.toFixed() + \"%\");\n                    }\n                }\n            },\n\n            _updateChunks: function(percentage) {\n                var that = this;\n                var options = that.options;\n                var chunkCount = options.chunkCount;\n                var percentagesPerChunk = parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;\n                var percentageParsed = parseInt(percentage * 100, 10) / 100;\n                var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);\n                var completedChunks;\n\n                if ((options.orientation === HORIZONTAL && !(options.reverse)) ||\n                   (options.orientation === VERTICAL && options.reverse)) {\n                    completedChunks = that.wrapper.find(\"li.\" + CHUNK_ITEM).slice(0, completedChunksCount);\n                } else if (completedChunksCount === 0) {\n                    completedChunks = kendo.jQuery();\n                } else {\n                    completedChunks = that.wrapper.find(\"li.\" + CHUNK_ITEM).slice(completedChunksCount * -1);\n                }\n\n                that.wrapper.find(\".\" + KCOMPLETEDCHUNK)\n                            .removeClass(KCOMPLETEDCHUNK + \" \" + PROGRESS_VALUE);\n\n                completedChunks.addClass(KCOMPLETEDCHUNK + \" \" + PROGRESS_VALUE);\n            },\n\n            _updateProgressWrapper: function(percentage) {\n                var that = this;\n                var options = that.options;\n                var progressWrapper = that.wrapper.find(\".\" + KPROGRESSWRAPPER);\n                var animationDuration = that._isStarted ? that._animation.duration : 0;\n                var animationCssOptions = { };\n\n                if (progressWrapper.length === 0) {\n                    that._addRegularProgressWrapper();\n                }\n\n                animationCssOptions[that._progressProperty] = percentage + \"%\";\n                that.progressWrapper.animate(animationCssOptions, {\n                    duration: animationDuration,\n                    start: that._onProgressAnimateStart.bind(that),\n                    progress: that._onProgressAnimate.bind(that),\n                    complete: that._onProgressAnimateComplete.bind(that, options.value),\n                    always: that._onProgressUpdateAlways.bind(that, options.value)\n                });\n            },\n\n            _onProgressAnimateStart: function() {\n                this.progressWrapper.show();\n            },\n\n            _onProgressAnimate: function(e) {\n                var that = this;\n                var options = that.options;\n                var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);\n                var progressStatusWrapSize;\n\n                if (options.showStatus) {\n                    progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n\n                    that.progressWrapper.find(\".k-progress-status-wrap\").css(that._progressProperty, progressStatusWrapSize + \"%\");\n                }\n\n                if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {\n                    that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);\n                }\n            },\n\n            _onProgressAnimateComplete: function(currentValue) {\n                var that = this;\n                var options = that.options;\n                var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n                var progressValue;\n\n                if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {\n                    that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);\n                }\n\n                if (options.showStatus) {\n                    if (options.type === PROGRESSTYPE.VALUE) {\n                        progressValue = currentValue;\n                    } else if (options.type == PROGRESSTYPE.PERCENT) {\n                        progressValue = that._calculatePercentage(currentValue).toFixed() + \"%\";\n                    } else {\n                        progressValue = math.floor(that._calculatePercentage(currentValue)) + \"%\";\n                    }\n                    that.progressStatus.text(progressValue);\n                }\n\n                if (currentValue === options.min) {\n                    that.progressWrapper.hide();\n                }\n            },\n\n            _onProgressUpdateAlways: function(currentValue) {\n                var that = this;\n                var options = that.options;\n\n                if (that._isStarted) {\n                    that.trigger(CHANGE, { value: currentValue });\n                }\n\n                if (currentValue === options.max && that._isStarted) {\n                    that.trigger(COMPLETE, { value: options.max });\n                }\n            },\n\n            enable: function(enable) {\n                var that = this;\n                var options = that.options;\n\n                options.enable = typeof(enable) === \"undefined\" ? true : enable;\n                that.wrapper.toggleClass(STATEDISABLED, !options.enable);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that.announce) {\n                    that.announce.remove();\n                }\n\n                Widget.fn.destroy.call(that);\n            },\n\n            _addChunkProgressWrapper: function() {\n                var that = this;\n                var options = that.options;\n                var container = that.wrapper;\n                var chunkSize = HUNDREDPERCENT / options.chunkCount;\n                var html = \"\";\n\n                if (options.chunkCount <= 1) {\n                    options.chunkCount = 1;\n                }\n\n                that.element.addClass(\"k-chunk-progressbar\");\n                html += \"<ul class='k-reset k-progressbar-chunks'>\";\n                for (var i = options.chunkCount - 1; i >= 0; i--) {\n                    html += \"<li class='\" + CHUNK_ITEM + \"'></li>\";\n                }\n                html += \"</ul>\";\n\n                container.append(html).find(\".\" + CHUNK_ITEM).css(that._progressProperty, chunkSize + \"%\")\n                         .first().addClass(\"k-first\")\n                         .end()\n                         .last().addClass(\"k-last\");\n\n                that._normalizeChunkSize();\n            },\n\n            _normalizeChunkSize: function() {\n                var that = this;\n                var options = that.options;\n                var lastChunk = that.wrapper.find(\".\" + CHUNK_ITEM).last();\n                var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);\n                var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);\n\n                if (difference > 0) {\n                    lastChunk.css(that._progressProperty, (currentSize + difference) + \"%\");\n                }\n            },\n\n            _addRegularProgressWrapper: function() {\n                var that = this;\n\n                that.progressWrapper = $(\"<div class='\" + KPROGRESSWRAPPER + \" \" + PROGRESS_VALUE + \"'></div>\").appendTo(that.wrapper);\n\n                if (that.options.showStatus) {\n                    that.progressWrapper.append(templates.progressStatus);\n\n                    that.progressStatus = that.wrapper.find(\".\" + KPROGRESSSTATUS);\n                } else {\n                    that.progressWrapper.prepend(templates.noProgressStatus);\n                }\n            },\n\n            _calculateChunkSize: function() {\n                var that = this;\n                var chunkCount = that.options.chunkCount;\n                var chunkContainer = that.wrapper.find(\"ul.k-reset\");\n\n                return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;\n            },\n\n            _calculatePercentage: function(currentValue) {\n                var that = this;\n                var options = that.options;\n                var value = (currentValue !== undefined$1) ? currentValue : options.value;\n                var min = options.min;\n                var max = options.max;\n                that._onePercent = math.abs((max - min) / 100);\n\n                return math.abs((value - min) / that._onePercent);\n            },\n\n            _progressAnimation: function() {\n                var that = this;\n                var options = that.options;\n                var animation = options.animation;\n\n                if (animation === false) {\n                    that._animation = { duration: 0 };\n                } else {\n                    that._animation = extend({\n                        duration: DEFAULTANIMATIONDURATION\n                    }, options.animation);\n                }\n            }\n        });\n\n        kendo.ui.plugin(ProgressBar);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}