{"version":3,"sources":["raw-js/kendo.data.xml.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendodata","xml","js","this","$","undefined$1","kendo","window","isArray","Array","isPlainObject","map","each","extend","getter","XmlDataReader","Class","init","options","that","total","model","parse","errors","serialize","data","base","modelBase","Model","fields","field","value","isFunction","id","idField","xpathToMember","parseInt","modelInstance","result","evaluate","record","_parse","xmlParse","call","length","parseDOM","element","parsedNode","node","nodeType","nodeName","member","attribute","idx","attributes","attributeCount","nodeValue","firstChild","nextSibling","push","expression","intermediateResult","members","split","shift","join","apply","documentElement","tree","parseXML","raw","replace","indexOf","readers","jQuery"],"mappings":"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","file":"kendo.data.xml.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendodata = global.kendodata || {}, global.kendodata.xml = global.kendodata.xml || {}, global.kendodata.xml.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"data.xml\",\n        name: \"XML\",\n        category: \"framework\",\n        depends: [ \"core\" ],\n        hidden: true\n    };\n\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            isArray = Array.isArray,\n            isPlainObject = $.isPlainObject,\n            map = $.map,\n            each = $.each,\n            extend = $.extend,\n            getter = kendo.getter,\n            Class = kendo.Class;\n\n        var XmlDataReader = Class.extend({\n            init: function(options) {\n                var that = this,\n                    total = options.total,\n                    model = options.model,\n                    parse = options.parse,\n                    errors = options.errors,\n                    serialize = options.serialize,\n                    data = options.data;\n\n                if (model) {\n                    if (isPlainObject(model)) {\n                        var base = options.modelBase || kendo.data.Model;\n\n                        if (model.fields) {\n                            each(model.fields, function(field, value) {\n                                if (isPlainObject(value) && value.field) {\n                                    if (!kendo.isFunction(value.field)) {\n                                        value = extend(value, { field: that.getter(value.field) });\n                                    }\n                                } else {\n                                    value = { field: that.getter(value) };\n                                }\n                                model.fields[field] = value;\n                            });\n                        }\n\n                        var id = model.id;\n                        if (id) {\n                            var idField = {};\n\n                            idField[that.xpathToMember(id, true)] = { field: that.getter(id) };\n                            model.fields = extend(idField, model.fields);\n                            model.id = that.xpathToMember(id);\n                        }\n                        model = base.define(model);\n                    }\n\n                    that.model = model;\n                }\n\n                if (total) {\n                    if (typeof total == \"string\") {\n                        total = that.getter(total);\n                        that.total = function(data) {\n                            return parseInt(total(data), 10);\n                        };\n                    } else if (typeof total == \"function\") {\n                        that.total = total;\n                    }\n                }\n\n                if (errors) {\n                    if (typeof errors == \"string\") {\n                        errors = that.getter(errors);\n                        that.errors = function(data) {\n                            return errors(data) || null;\n                        };\n                    } else if (typeof errors == \"function\") {\n                        that.errors = errors;\n                    }\n                }\n\n                if (data) {\n                    if (typeof data == \"string\") {\n                        data = that.xpathToMember(data);\n                        that.data = function(value) {\n                            var result = that.evaluate(value, data),\n                                modelInstance;\n\n                            result = isArray(result) ? result : [result];\n\n                            if (that.model && model.fields) {\n                                modelInstance = new that.model();\n\n                                return map(result, function(value) {\n                                    if (value) {\n                                        var record = {}, field;\n\n                                        for (field in model.fields) {\n                                            record[field] = modelInstance._parse(field, model.fields[field].field(value));\n                                        }\n\n                                        return record;\n                                    }\n                                });\n                            }\n\n                            return result;\n                        };\n                    } else if (typeof data == \"function\") {\n                        that.data = data;\n                    }\n                }\n\n                if (typeof parse == \"function\") {\n                    var xmlParse = that.parse;\n\n                    that.parse = function(data) {\n                        var xml = parse.call(that, data);\n                        return xmlParse.call(that, xml);\n                    };\n                }\n\n                if (typeof serialize == \"function\") {\n                    that.serialize = serialize;\n                }\n            },\n            total: function(result) {\n                return this.data(result).length;\n            },\n            errors: function(data) {\n                return data ? data.errors : null;\n            },\n            serialize: function(data) {\n                return data;\n            },\n            parseDOM: function(element) {\n                var result = {},\n                    parsedNode,\n                    node,\n                    nodeType,\n                    nodeName,\n                    member,\n                    attribute,\n                    attributes = element.attributes,\n                    attributeCount = attributes.length,\n                    idx;\n\n                for (idx = 0; idx < attributeCount; idx++) {\n                    attribute = attributes[idx];\n                    result[\"@\" + attribute.nodeName] = attribute.nodeValue;\n                }\n\n                for (node = element.firstChild; node; node = node.nextSibling) {\n                    nodeType = node.nodeType;\n\n                    if (nodeType === 3 || nodeType === 4) {\n                        // text nodes or CDATA are stored as #text field\n                        result[\"#text\"] = node.nodeValue;\n                    } else if (nodeType === 1) {\n                        // elements are stored as fields\n                        parsedNode = this.parseDOM(node);\n\n                        nodeName = node.nodeName;\n\n                        member = result[nodeName];\n\n                        if (isArray(member)) {\n                            // elements of same nodeName are stored as array\n                            member.push(parsedNode);\n                        } else if (member !== undefined$1) {\n                            member = [member, parsedNode];\n                        } else {\n                            member = parsedNode;\n                        }\n\n                        result[nodeName] = member;\n                    }\n                }\n                return result;\n            },\n\n            evaluate: function(value, expression) {\n                var members = expression.split(\".\"),\n                    member,\n                    result,\n                    length,\n                    intermediateResult,\n                    idx;\n\n                while (member = members.shift()) {\n                    value = value[member];\n\n                    if (isArray(value)) {\n                        result = [];\n                        expression = members.join(\".\");\n\n                        for (idx = 0, length = value.length; idx < length; idx++) {\n                            intermediateResult = this.evaluate(value[idx], expression);\n\n                            intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];\n\n                            result.push.apply(result, intermediateResult);\n                        }\n\n                        return result;\n                    }\n                }\n\n                return value;\n            },\n\n            parse: function(xml) {\n                var documentElement,\n                    tree,\n                    result = {};\n\n                documentElement = xml.documentElement || $.parseXML(xml).documentElement;\n\n                tree = this.parseDOM(documentElement);\n\n                result[documentElement.nodeName] = tree;\n\n                return result;\n            },\n\n            xpathToMember: function(member, raw) {\n                if (!member) {\n                    return \"\";\n                }\n\n                member = member.replace(/^\\//, \"\") // remove the first \"/\"\n                               .replace(/\\//g, \".\"); // replace all \"/\" with \".\"\n\n                if (member.indexOf(\"@\") >= 0) {\n                    // replace @attribute with '[\"@attribute\"]'\n                    return member.replace(/\\.?(@.*)/, raw ? '$1' : '[\"$1\"]');\n                }\n\n                if (member.indexOf(\"text()\") >= 0) {\n                    // replace \".text()\" with '[\"#text\"]'\n                    return member.replace(/(\\.?text\\(\\))/, raw ? '#text' : '[\"#text\"]');\n                }\n\n                return member;\n            },\n            getter: function(member) {\n                return getter(this.xpathToMember(member), true);\n            }\n        });\n\n        $.extend(true, kendo.data, {\n            XmlDataReader: XmlDataReader,\n            readers: {\n                xml: XmlDataReader\n            }\n        });\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}