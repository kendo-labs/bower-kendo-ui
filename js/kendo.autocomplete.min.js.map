{"version":3,"sources":["raw-js/kendo.autocomplete.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoautocomplete","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","List","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","HIDDENCLASS","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","substring","split","length","AutoComplete","extend","init","element","that","Array","isArray","dataSource","fn","call","attr","_wrapper","_loader","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","e","preventDefault","_resetFocusItemHandler","_resetFocusItem","_inputValuesContainer","_loading","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","name","enabled","suggest","groupTemplate","fixedGroupTemplate","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","clearButton","autoWidth","popup","size","fillMode","rounded","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","readonly","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","_filterSource","toLocaleLowerCase","toLowerCase","operator","field","one","_unifySeparators","idx","key","_last","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","toString","push","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_defaultSeparator","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_busy","setTimeout","_hideClear","show","toggleClass","document","RegExp","candidate","preventShow","_showClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat"],"mappings":";;;;;;;;;;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,EAAAG,QAAA,iBAAAA,QAAA,4BAAAA,QAAA,yBACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,iBAAA,4BAAA,yBAAAJ,KACAD,EAAA,oBAAAO,WAAAA,WAAAP,GAAAQ,MAAAC,kBAAAT,EAAAS,mBAAA,CAAA,EAAAT,EAAAS,kBAAAC,GAAAT,IACA,CAJA,CAIAU,MAAA,WACA,IAAAC,EAAAC,MAAAC,OAEA,SAAAC,GAAAC,OAAAA,EAAAC,QAAAA,EAAAC,QAAAA,EAAAC,mBAAAA,EAAAC,kBAAAA,IACA,IASAC,EACAC,EAVAC,EAAAL,EAAAM,cACAC,EAAAP,EAAAQ,cACAC,EAAAJ,EAAAK,UAAAL,EAAAM,KACAC,EAAAL,EAAAG,UAAAH,EAAAI,KAEAE,GADAX,EAAAA,GAAAD,EACAD,EAAAa,YACAC,EAAAD,EAAA,YAAAA,EAAA,aAAA,WAAA,aAEAE,EAAA,oDADA,YAAAF,EAAA,aAAA,sBAKAR,GAAAI,KACAN,EAAAJ,EAAAiB,SAAA,oBAEA,KACAb,EAAAT,EAAA,8CAAAoB,SACAb,EACAE,EAAAc,aAAAhB,GAEAE,EAAAe,UAAAnB,IAIAM,EAAAM,MACAR,EAAAgB,KAAAxB,MAAAwB,KAAAC,WAAA,CAAAT,KAAAN,EAAAM,QAGAN,EAAAK,UACAP,EAAAgB,KAAAxB,MAAAe,SAAAL,EAAAK,SAAAf,CAAA,CAAA,IAGAU,EAAAgB,WACA3B,EAAAqB,GAAAO,YAAAnB,IAIAI,GAAAK,KACAR,EAAAL,EAAAiB,SAAA,oBAEA,KACAZ,EAAAV,EAAA,8CAAAoB,SAAAS,SAAAxB,GACAG,EACAE,EAAAkB,YAAApB,GAEAE,EAAAmB,SAAAxB,IAIAQ,EAAAI,MACAP,EAAAe,KAAAxB,MAAAwB,KAAAC,WAAA,CAAAT,KAAAJ,EAAAI,QAGAJ,EAAAG,UACAN,EAAAe,KAAAxB,MAAAe,SAAAH,EAAAG,SAAAf,CAAA,CAAA,IAGAY,EAAAc,WACA3B,EAAAqB,GAAAE,aAAAb,IAIAN,EAAA0B,iBAAArB,EACAL,EAAA2B,iBAAArB,CACA,CAi6BA,OA54BA,SAAAV,EAAAgC,GACA,IAAA/B,EAAAgC,OAAAhC,MACAiC,EAAAjC,EAAAkC,WACAC,EAAAnC,EAAAmC,QACAC,EAAApC,EAAAoC,MACAC,EAAArC,EAAAsC,eACAC,EAAAJ,EAAAK,YACAC,EAAAzC,EAAAyC,GACAC,EAAAD,EAAAC,KACAC,EAAA3C,EAAA2C,KACAC,EAAA5C,EAAA6C,KAAAD,WACAE,EAAA,gBACAC,EAAA,gBACAC,EAAA,SACAC,EAAA,WACAC,EAAA,WACAC,EAAA,UAEAC,EAAA,WACAC,EAAA,aAGAC,EAAA,qBACAC,EAAA,aAAAD,EAAA,cAAAA,EAEA,SAAAE,EAAAC,EAAAC,EAAAhC,GACA,OAAAA,EAAAgC,EAAAC,UAAA,EAAAF,GAAAG,MAAAlC,GAAAmC,OAAA,EAAA,CACA,CAkBA,IAAAC,EAAApB,EAAAqB,OAAA,CACAC,KAAA,SAAAC,EAAA5D,GACA,IAAAD,EAAA8D,EAAApE,KAEAoE,EAAAZ,GAAAA,EACAjD,EAAA8D,MAAAC,QAAA/D,GAAA,CAAAgE,WAAAhE,GAAAA,EAEAqC,EAAA4B,GAAAN,KAAAO,KAAAL,EAAAD,EAAA5D,GAEA4D,EAAAC,EAAAD,SACA5D,EAAA6D,EAAA7D,SAEAmC,YAAAnC,EAAAmC,aAAAyB,EAAAO,KAAA,eACAjC,GACA0B,EAAAO,KAAA,cAAAnE,EAAAmC,aAGA0B,EAAAO,WACAP,EAAAQ,UACAR,EAAAS,eAEAT,EAAAU,cACAV,EAAAW,cAEAZ,EAAA,GAAAa,KAAA,OACA1E,EAAA8D,EAAA9D,QAEA8D,EAAAa,SAEAd,EACAe,SAAA,iBACAC,GAAA,UAAA3B,EAAAY,EAAAgB,SAAAC,KAAAjB,IACAe,GAAA,WAAA3B,EAAAY,EAAAkB,UAAAD,KAAAjB,IACAe,GAAA,QAAA3B,EAAAY,EAAAmB,QAAAF,KAAAjB,IACAe,GAAA,QAAA3B,EAAAY,EAAAmB,QAAAF,KAAAjB,IACAe,GAAA,QAAA3B,GAAA,WACAY,EAAAoB,MAAApB,EAAAqB,YACArB,EAAAsB,SAAAtB,EAAAoB,MACApB,EAAAuB,cAAA,GACArF,EAAA4E,SAAA7B,EACA,IACA8B,GAAA,WAAA3B,GAAA,SAAAoC,GACAxB,EAAAyB,aAAAD,EAAAE,gBAAA1B,EAAAyB,YAAA,KAIAzB,EAAA2B,UACA3B,EAAAuB,eACAvB,EAAA4B,QACA1F,EAAA2F,YAAA5C,GACA,IACAqB,KAAA,CACAwB,aA7EA,MA8EAC,KAAA,WACA,iBAAA,IAGA/B,EAAAgC,OAAAjB,GAAA,QAAA3B,EAAA,YAAAA,EAAAY,EAAAiC,YAAAhB,KAAAjB,IACAA,EAAAgC,OAAAjB,GAAA,YAAA3B,EAAAY,EAAAkC,4BAAAjB,KAAAjB,IACAA,EAAAmC,UAEAnC,EAAAoC,KAAApC,EAAAqB,YAEArB,EAAAuB,eAEAvB,EAAAqC,YAEAxG,EAAAmE,EAAAD,SAAAuC,QAAA,YAAAC,GAAA,cAGAvC,EAAAwC,QAAA,GAGAxC,EAAAyC,SAAAxB,KAAA,SAAA,SAAAyB,GAAAA,EAAAC,gBAAA,IAEA3C,EAAA4C,uBAAA5C,EAAA6C,gBAAA5B,KAAAjB,GAEAhE,EAAA,CAAAC,OAAA+D,EAAA9D,QAAA8D,EAAA9D,QAAAC,QAAA6D,EAAA7D,QAAAC,mBAAA4D,EAAA8C,sBAAAzG,kBAAA2D,EAAA+C,WAEAjH,EAAAkH,OAAAhD,GACAA,EAAAiD,yBACAjD,EAAAkD,mBAEA/G,EAAAgH,OACAnD,EAAAoD,SAGApD,EAAAqD,OACA,EAEAlH,QAAA,CACAmH,KAAA,eACAC,SAAA,EACAC,SAAA,EACA3G,SAAA,GACA4G,cAAA9E,GAAAZ,EAAAY,GACA+E,mBAAA/E,GAAAZ,EAAAY,GACAlC,cAAA,CACAe,WAAA,GAEAb,cAAA,CACAa,WAAA,GAEAmG,cAAA,GACAC,UAAA,EACAC,kBAAA,EACAC,MAAA,IACAC,OAAA,IACAC,OAAA,aACAC,YAAA,EACAC,gBAAA,EACA1G,UAAA,KACAc,YAAA,GACA6F,UAAA,CAAA,EACAC,SAAA,EACAC,MAAA,KACAC,aAAA,EACAC,WAAA,EACAC,MAAA,KACAC,KAAA,SACAC,SAAA,QACAC,QAAA,SACAxB,MAAA,MAGAjB,4BAAA,SAAAV,GAGAA,GAAAA,EAAAoD,eAAApD,EAAAoD,cAAAC,UAAAC,SAAA,iBAFAlJ,KAGAmJ,oBAAA,EAHAnJ,KAKAmJ,oBAAA,CAEA,EAEAC,qBAAA,WACA,IAAAhF,EAAApE,KAEAoE,EAAAyB,cACAzB,EAAAyB,YACAV,GAAA,UAAA3B,EAAAY,EAAAgB,SAAAC,KAAAjB,IACAe,GAAA,WAAA3B,EAAAY,EAAAkB,UAAAD,KAAAjB,IACAe,GAAA,QAAA3B,EAAAY,EAAAmB,QAAAF,KAAAjB,IACAe,GAAA,QAAA3B,EAAAY,EAAAmB,QAAAF,KAAAjB,IACAM,KAAA,CACAwB,aA1KA,MA2KAC,KAAA,WACA,iBAAA,IAGA/B,EAAAwE,MAAAvD,KAAA,YAAA,KACAjB,EAAAyB,YAAAwD,IAAAjF,EAAAD,QAAAkF,OACAjF,EAAAyB,YAAAyD,QAAA,QAAA,IAGAlF,EAAAwE,MAAAvD,KAAA,cAAA,KACAjB,EAAAD,QAAAmF,QAAA,QAAA,IAGA,EAEAC,sBAAA,WACA,IAAAnF,EAAApE,KAEAoE,EAAAyB,aAAAtD,MAAA6B,EAAAyB,YAAA,IACAzB,EAAAD,QAAAkF,IAAAjF,EAAAyB,YAAAwD,MAEA,EAEApE,OAAA,WACArC,EAAA4B,GAAAS,OAAAR,KAAAzE,MACAA,KAAA4I,MAAAzE,QAAAe,SAAA,uBACA,EAEAJ,YAAA,WACA,IAAAV,EAAApE,KAEAoE,EAAAG,YAAAH,EAAAoF,gBACApF,EAAAqF,qBAEArF,EAAAsF,iBAAAtF,EAAAuF,UAAAtE,KAAAjB,GACAA,EAAAwF,cAAAxF,EAAAyF,UAAAxE,KAAAjB,IAGAA,EAAAG,WAAAzB,EAAAgH,OAAA1F,EAAA7D,QAAAgE,YACAc,KAAA,WAAAjB,EAAAsF,kBACArE,KAAA,QAAAjB,EAAAwF,cACA,EAEAG,cAAA,SAAAxF,GACAvE,KAAAO,QAAAgE,WAAAA,EACAvE,KAAA8E,cAEA9E,KAAA6G,SAAAkD,cAAA/J,KAAAuE,WACA,EAEAyF,OAAA,CACA,OACA,QACA9G,EACA,SACA,YACA,cACA,aAGA+G,WAAA,SAAA1J,GACA,IAAA2J,EAAAlK,KAAAmK,aAAA5J,GAEAqC,EAAA4B,GAAAyF,WAAAxF,KAAAzE,KAAAO,GAEAP,KAAA6G,SAAAoD,WAAAC,GACAlK,KAAAoK,aACApK,KAAAyH,QACAzH,KAAA6E,cACA,EAEAsF,aAAA,SAAA5J,GACA,IAAA2J,EAAAtH,EAAA4B,GAAA2F,aAAA1F,KAAAzE,KAAAC,EAAAgE,OAAA1D,EAAA,CACA8J,kBAAA,KAMA,OAHAH,EAAAI,eAAAJ,EAAAnC,cACAmC,EAAAK,mBAAA,KAEAL,CACA,EAEAM,UAAA,SAAAjK,GACA,IAAA6D,EAAApE,KACAmE,EAAAC,EAAAD,QACA7D,EAAA8D,EAAA9D,QAAAmK,IAAAjH,GACAkH,EAAAnK,EAAAmK,SACAC,EAAApK,EAAAoK,QAEAD,GAAAC,GAUArK,EACA4E,SAAAyF,EAAApH,EAAA,IACA0C,YAAA0E,EAAA,GAAApH,GAEAY,EAAAO,KAAAvB,EAAAwH,GACAjG,KAAAtB,EAAAsH,GACAhG,KAAA1B,EAAA2H,GACAjG,KAAAzB,EAAAyH,KAhBApK,EACA2F,YAAA1C,GACA4B,GAAA1B,EAAAW,EAAAwG,cAEAzG,EAAA0G,KAAA1H,GAAA,GACA0H,KAAAzH,GAAA,GACAsB,KAAA1B,GAAA,GACA0B,KAAAzB,GAAA,IAYAmB,EAAAiD,wBACA,EAEArB,MAAA,WACA,IAAA5B,EAAApE,KACA8K,EAAA1G,EAAAyC,SAAAkE,QAEAD,GACAA,EAAA7E,YAnSA,cAsSA7B,EAAAwE,MAAA5C,QACA5B,EAAA4G,iBACA,EAEAC,QAAA,WACA,IAAA7G,EAAApE,KAEAoE,EAAAD,QAAAsG,IAAAjH,GACAY,EAAAgC,OAAAqE,IAAAjH,GACAY,EAAA9D,QAAAmK,IAAAjH,GAEAY,EAAAyB,aACAzB,EAAAyB,YAAA4E,IAAAjH,GAGAZ,EAAA4B,GAAAyG,QAAAxG,KAAAL,EACA,EAEA8G,QAAA,WACAlL,KAAA6G,SAAAqE,SACA,EAEAC,OAAA,SAAAC,GACApL,KAAAqL,QAAAD,EACA,EAEAE,OAAA,SAAAC,GACA,IAIAxH,EAJAK,EAAApE,KACAO,EAAA6D,EAAA7D,QACA8H,EAAA9H,EAAA8H,WACAzG,EAAAwC,EAAAoH,aAEAC,EAAArH,EAAAG,WAAAhE,QAAAkL,uBACAtH,EAAAC,EAAAyB,aAAAtD,MAAA6B,EAAAyB,YAAA,GAAAzB,EAAAyB,YAAAzB,EAAAD,QAEAoH,EAAAA,GAAAnH,EAAAqB,YAEAiG,aAAAtH,EAAAuH,gBAEA/J,IACA2J,EAlUA,SAAA5H,EAAAC,EAAAhC,GACA,OAAAgC,EAAAE,MAAAlC,GAAA8B,EAAAC,EAAAC,EAAAhC,GACA,CAgUAgK,CAAAtJ,EAAA6B,GAAA,GAAAoH,EAAA3J,IAGAmC,EAAAwH,EAAAxH,SAEAxD,EAAA0H,mBAAAlE,GAAAA,GAAAxD,EAAAyH,aACA5D,EAAAyH,OAAA,EAEAzH,EAAA0H,OAAA,WACA9L,KAAA6G,SAAA4B,MAAA,GACA,IAEArE,EAAA2H,cAAA,CACAtD,MAAAJ,EAAAoD,EAAAF,EAAAS,kBAAAP,GAAAF,EAAAU,cAAAV,EACAW,SAAA3L,EAAA6H,OACA+D,MAAA5L,EAAAwH,cACAM,WAAAA,IAGAjE,EAAAgI,IAAA,QAAAhI,EAAAiI,iBAAAhH,KAAAjB,KAEAA,EAAAiD,wBACA,EAEAO,QAAA,SAAA2D,GACA,IASAe,EATAlI,EAAApE,KACAuM,EAAAnI,EAAAoI,MACA/D,EAAArE,EAAAqB,YACAtB,EAAAC,EAAAD,QAAA,GACAR,EAAArB,EAAA6B,GAAA,GACAvC,EAAAwC,EAAAoH,aACAiB,EAAAhE,EAAA3E,MAAAlC,GACA8K,EAAAhJ,EAAAC,EAAA8E,EAAA7G,GACA+K,EAAAhJ,EAEA8H,EAAArH,EAAAG,WAAAhE,QAAAkL,uBAEAc,GAAA1J,EAAA+J,WAAAL,GAAA1J,EAAAgK,QAOA,iBAFAtB,EAAAA,GAAA,MAGAA,EAAA,KACAA,EAAAnH,EAAAG,WAAAuI,OAAAlK,EAAAmK,QAAAxB,EAAA,GAAAnH,EAAA4I,GAAA,MAGAzB,EAAAA,EAAAnH,EAAA6I,MAAA1B,GAAA,IAGA5H,GAAA,IACAA,GAAA8H,EAAAhD,EAAAuD,kBAAAP,GAAAhD,EAAAwD,eAAAiB,QAAAzB,EAAAF,EAAAS,kBAAAP,GAAAF,EAAAU,eAAA,GAIAK,GADAA,EAAA7D,EAAA5E,UAAA,EAAAF,GAAAwJ,YAAAvL,KACA,EAAA+B,GAAA2I,EAAA1K,EAAAmC,QAAAJ,EACA8E,EAAAgE,EAAAC,GAAA7I,UAAA,EAAAyI,GAEAf,IACAA,EAAAA,EAAA6B,YACAd,GAAAb,EAAAF,EAAAS,kBAAAP,GAAAF,EAAAU,eAAAiB,QAAAzB,EAAAhD,EAAAuD,kBAAAP,GAAAhD,EAAAwD,iBACA,IAGAU,EAAAhJ,GAFA4H,EAAAA,EAAA1H,UAAAyI,EAAA7D,EAAA1E,SAEAA,OAEA0E,GAAA8C,GAGA3J,GAAA,KAAA6K,EAAAA,EAAA1I,OAAA,IACA0I,EAAAY,KAAA,KAKAZ,EAAAC,GAAAjE,EAEArE,EAAAqB,UAAAgH,EAAAa,KAAA1L,GAAA,KAEAuC,IAAA5B,KACAD,EAAA6B,EAAAR,EAAAgJ,IA5CAvI,EAAAoI,MAAAvK,CA8CA,EAEAwG,MAAA,SAAAA,GACA,GAAAA,IAAAxG,EAOA,OAAAjC,KAAAyF,YANAzF,KAAA6G,SAAA4B,MAAAA,GAEAzI,KAAAyF,UAAAgD,GACAzI,KAAAwG,KAAAxG,KAAAyF,YACAzF,KAAA0F,SAAA1F,KAAAyF,YAIAzF,KAAAqH,yBACArH,KAAAuN,uBACA,EAEAC,OAAA,SAAA1G,GACA,IAAA2G,EAAA3G,EAAA2G,KACArJ,EAAApE,KACAmE,EAAAC,EAAAD,QACAuJ,EAAAtJ,EAAAyC,SAAA8G,gBAAAvJ,EAAAyC,SAAA+G,gBAAAH,IAEA3G,EAAAC,iBAEA3C,EAAAyJ,SAAA,EAEAzJ,EAAAkF,QAAA,SAAA,CAAAoE,SAAAA,EAAAD,KAAAA,IACArJ,EAAA4B,SAGA5B,EAAAsB,SAAAvB,EAAAkF,MACAjF,EAAAiH,QAAAoC,GAAAK,MAAA,WACA1J,EAAA2J,QAEAzL,EAAA6B,EAAAA,EAAAkF,MAAAtF,OACA,IACA,EAEAiK,WAAA/N,EAAAgO,KAEAC,gBAAA,WACA,IAAAC,EAAAnO,KAAAO,QAAA+H,eAAA,GAAA,EAEAtI,KAAA6G,SAAAkE,MAAAoD,EACA,EAEAlH,gBAAA,WACAjH,KAAAO,QAAAiI,SACAxI,KAAA6G,SAAAuH,SAAA,GAGApO,KAAAkO,iBACA,EAEAG,WAAA,WACA,IAOAC,EAPAlK,EAAApE,KACA4I,EAAAxE,EAAAwE,MACArI,EAAA6D,EAAA7D,QACAwC,EAAAqB,EAAAG,WAAAgK,WACAxK,EAAAhB,EAAAgB,OACAyK,EAAApK,EAAAG,WAAAkK,OAAArK,EAAAG,WAAAkK,OAAA1K,OAAA,EACA2K,EAAAtK,EAAAD,QAAA,KAAA5B,KAAA6B,EAAAyB,aAAAzB,EAAAyB,YAAA,KAAAtD,IAGA6B,EAAAuK,gBACAvK,EAAAwK,gBACAxK,EAAAyK,eAAA9K,GACAK,EAAA0K,gBAAAN,KAAAzK,GAEAK,EAAA2K,eAEAnG,EAAAoG,WAEAjL,IACAxD,EAAAqH,SAAA8G,GAAAtK,EAAA6K,eACA7K,EAAAwD,QAAA7E,EAAA,IAGAqB,EAAA8J,mBAGA9J,EAAAyH,QACAzH,EAAAyH,OAAA,EACAyC,EAAAlK,EAAA8K,gBAAA,OAAA,QAEA9K,EAAAuH,iBAAA+C,IACAJ,EAAA,SAGAvK,IACAK,EAAA6C,kBAEA1G,EAAAiI,SACApE,EAAAwE,MACAuG,OAAA,WAAA/K,EAAA4C,wBACAoF,IAAA,WAAAhI,EAAA4C,yBAIA4B,EAAA0F,KACAlK,EAAAuH,eAAA1J,GAGAmC,EAAAgL,gBACAhL,EAAAgL,eAAAC,QAGAjL,EAAAyF,YAEAzF,EAAAkF,QAAA,YACA,EAEAwC,MAAA,SAAAwD,GACAtP,KAAAuP,QAAA,EACAD,EAAA7K,KAAAzE,MACAA,KAAAuP,QAAA,CACA,EAEAC,YAAA,YACAxP,KAAA6N,SAAA7N,KAAAmE,QAAA,KAAA5B,OAEAvC,KAAAuP,QACAvP,KAAAyP,aAAAzP,KAAA6G,SAAA6I,oBAAA,GAEA,EAEAD,aAAA,SAAA/B,GACA,IAAA9L,EAAA5B,KAAAwL,aACA5H,EAAA,GAEA8J,IACA9J,EAAA5D,KAAAiN,MAAAS,IAGA,OAAA9J,IACAA,EAAA,IAGAhC,IACAgC,EA7hBA,SAAAD,EAAAC,EAAA2H,EAAA3J,EAAA+N,GACA,IAAAlD,EAAA7I,EAAAE,MAAAlC,GAQA,OANA6K,EAAAmD,OAAAlM,EAAAC,EAAAC,EAAAhC,GAAA,EAAA2J,GAEA3J,GAAA,KAAA6K,EAAAA,EAAA1I,OAAA,IACA0I,EAAAY,KAAA,IAGAZ,EAAAa,KAAAqC,EACA,CAmhBAE,CAAAvN,EAAAtC,KAAAmE,SAAA,GAAAnE,KAAAyF,YAAA7B,EAAAhC,EAAA5B,KAAA8P,sBAGA9P,KAAAwF,MAAA5B,EACA5D,KAAAyF,UAAA7B,GACA5D,KAAA2F,cACA,EAEA0G,iBAAA,WAEA,OADArM,KAAAyF,UAAAzF,KAAAyI,QAAA3E,MAAA9D,KAAAwL,cAAA8B,KAAAtN,KAAA8P,sBACA9P,IACA,EAEA+P,WAAA,SAAAtH,EAAA7E,GACA5D,KAAAiP,YAAArL,GACA5D,KAAAyF,UAAAgD,GAEAzI,KAAAwG,KAAAxG,KAAAgQ,QAAAhQ,KAAAyF,YAEAzF,KAAA6G,SAAAoJ,SAAAxH,GACAzI,KAAA2F,cACA,EAEAI,QAAA,WACA,IAAA3B,EAAApE,KACAyI,EAAArE,EAAAiI,mBAAA5D,QACAa,EAAAb,IAAA7F,EAAAsN,UAAA9L,EAAAoC,YAAAiC,GAEA0H,EAAA7G,IAAAlF,EAAAgM,QACAC,EAAAjM,EAAAsB,WAAA+C,EACA6H,EAAAlM,EAAA+E,mBAEA/E,EAAAoC,KAAAiC,EACArE,EAAAsB,SAAA+C,EAEArE,EAAAyB,aAAAtD,MAAA6B,EAAAyB,YAAA,IACAzB,EAAAD,QAAAkF,IAAAjF,EAAAyB,YAAAwD,QAGA8G,IAAAE,GAAAC,GAEAlM,EAAAD,QAAAmF,QAAApG,GAGAoG,IAAAgH,GACAlM,EAAAkF,QAAApG,GAGAkB,EAAAmM,QAAA,EACAnM,EAAAiD,wBACA,EAEA5B,UAAA,SAAAgD,GACA,IAAArE,EAAApE,KACAmE,EAAAC,EAAAyB,aAAAtD,MAAA6B,EAAAyB,YAAA,GAAAzB,EAAAyB,YAAA,GAAAzB,EAAAD,QAAA,GAEA,GAAAsE,IAAAxG,EAMA,OAFAwG,EAAAtE,EAAAsE,MAEAtE,EAAAqM,UAAAtD,QAAA,eAAA,GACAzE,IAAArE,EAAA7D,QAAAmC,YACA,GAMA+F,EAbAtE,EAAAsE,MAAA,OAAAA,EAAA,GAAAA,EACArE,EAAAuB,cAcA,EAEAP,SAAA,SAAA0B,GACA,IAAA1C,EAAApE,KACAuM,EAAAzF,EAAA2J,QACA5J,EAAAzC,EAAAyC,SACA6J,EAAAtM,EAAAwE,MAAA8H,UACA5F,EAAAjE,EAAAkE,QAIA,GAFA3G,EAAAoI,MAAAD,EAEAA,IAAA1J,EAAA8N,KACAD,EACA1Q,KAAA4Q,MAAA9F,EAAA,YAAA,cACA1G,EAAAqE,SACArE,EAAA2H,cAAA,CACAtD,MAAArE,EAAAiE,WAAAjE,EAAAqE,QAAAwD,cAAA7H,EAAAqE,QACAyD,SAAA9H,EAAA7D,QAAA6H,OACA+D,MAAA/H,EAAA7D,QAAAwH,cACAM,WAAAjE,EAAAiE,aACAyF,MAAA,WACA1J,EAAA8K,kBACA9K,EAAA6C,kBACA7C,EAAAwE,MAAAiI,OAEA,IAEA/J,EAAAC,sBACA,GAAAwF,IAAA1J,EAAAiO,IACAJ,GACA5J,EAAAC,iBACA3C,EAAA4B,SAEA5B,EAAAiC,mBAEA,GAAAS,EAAAiK,QAAAxE,IAAA1J,EAAAmO,IAAAN,EACA5J,EAAAC,iBACA3C,EAAA4B,aACA,GAAAuG,IAAA1J,EAAAmO,GACAN,GACA1Q,KAAA4Q,MAAA9F,EAAA,YAAA,aAEAhE,EAAAC,sBACA,GAAAwF,IAAA1J,EAAAoO,KACAjR,KAAA4Q,MAAA,mBACA,GAAArE,IAAA1J,EAAAqO,IACAlR,KAAA4Q,MAAA,kBACA,GAAArE,IAAA1J,EAAAsO,OAAA5E,IAAA1J,EAAAuO,IAAA,CAMA,GAJA7E,IAAA1J,EAAAsO,OAAAT,GACA5J,EAAAC,iBAGA2J,GAAA5F,EAAA,CACA,IAAA4C,EAAA7G,EAAA8G,gBAAA9G,EAAA+G,gBAAA9C,IACA,GAAA1G,EAAAkF,QAAA,SAAA,CAAAoE,SAAAA,EAAAD,KAAA3C,IACA,OAGA9K,KAAAqL,QAAAP,EACA,CAEA9K,KAAA+N,OACA,MAAA,IAAA3J,EAAAwE,MAAA8H,WAAAnE,IAAA1J,EAAAwO,UAAA9E,IAAA1J,EAAAyO,OAQAlN,EAAAwE,MAAA2I,UAAA,EACAnN,EAAAmB,cATA,CACAuB,EAAAC,iBAEA,IAAAyK,EAAAjF,IAAA1J,EAAAwO,SAAA,GAAA,EACAxK,EAAA4K,WAAAD,EAAA3K,EAAA6K,eACA,CAMA,EAEApM,UAAA,WACAtF,KAAA0F,SAAA1F,KAAAmE,QAAAkF,MACArJ,KAAAoQ,SAAA,CACA,EAEAQ,MAAA,SAAAtC,GACAtO,KAAA6G,SAAAyH,KAEAtO,KAAAO,QAAAqH,SACA5H,KAAA4H,QAAA5H,KAAA6G,SAAAkE,QAEA,EAEAlB,UAAA,WACA,IAAAzF,EAAApE,KACA0L,aAAAtH,EAAAuN,OACAvN,EAAA+C,SAAAjC,SAAA5B,GACAc,EAAAD,QAAAO,KAAA,aAAA,GACAN,EAAAuN,MAAA,KACAvN,EAAAiD,wBACA,EAEAsC,UAAA,WACA,IAAAvF,EAAApE,KAEAoE,EAAAuN,QAIAvN,EAAAuN,MAAAC,YAAA,WACAxN,EAAAD,QAAAO,KAAA,aAAA,GACAN,EAAA+C,SAAAlB,YAAA3C,GACAc,EAAAyN,YACA,GAAA,KACA,EAEAlM,aAAA,SAAAmM,GACA,IAAArP,EAAA,CAIA,IAGAgG,EAHArE,EAAApE,KACAmE,EAAAC,EAAAD,QACAzB,EAAA0B,EAAA7D,QAAAmC,YAGA,GAAAA,EAAA,CAeA,GAdA+F,EAAAtE,EAAAkF,MAEAyI,IAAA7P,IACA6P,GAAArJ,GAGAqJ,IAEApP,EADA+F,IAAA/F,EACA+F,EAEA,IAIAA,IAAArE,EAAAoC,OAAAsL,EACA,OAGA3N,EAAA4N,YAAA,aAAAD,GACAzI,IAAA3G,GAEAA,GAAAyB,EAAA,KAAA6N,SAAAzP,eACAD,EAAA6B,EAAA,GAAA,EAAA,EAEA,CAhCA,CAiCA,EAEAqH,WAAA,WACA,IAAA5J,EAAA5B,KAAAO,QAAAqB,UACA,OAAAA,aAAAyC,MACA,IAAA4N,OAAArQ,EAAA0L,KAAA,KAAA,MAEA1L,CACA,EAEAkO,kBAAA,WACA,IAAAlO,EAAA5B,KAAAO,QAAAqB,UACA,OAAAA,aAAAyC,MACAzC,EAAA,GAEAA,CACA,EAEAqN,YAAA,WACA,OAAAjP,KAAAmE,QAAAkF,KACA,EAEA9D,QAAA,WACA,IAAAnB,EAAApE,KACA0L,aAAAtH,EAAAuH,gBAEAvH,EAAAuH,eAAAiG,YAAA,WACAxN,EAAAoB,QAAApB,EAAAqB,cACArB,EAAAoB,MAAApB,EAAAqB,YACArB,EAAAkH,SAEA,GAAAlH,EAAA7D,QAAA2H,MACA,EAEAmD,QAAA,SAAA6G,GACA,IAAA9N,EAAApE,KAGA,OAFAoE,EAAAyJ,SAAA,EAEAzJ,EAAAyC,SAAAsE,OAAA+G,GAAApE,MAAA,WACA1J,EAAAyJ,SAAA,CACA,GACA,EAEAjJ,QAAA,WACA5E,KAAAmH,SAAAlH,EAAA,wDAAAqD,EAAA,aAAAzB,YAAA7B,KAAAmE,QACA,EAEAU,aAAA,WACAjC,EAAA4B,GAAAK,aAAAJ,KAAAzE,MAEAA,KAAAO,QAAAmI,aACA1I,KAAAoG,OAAAvE,YAAA7B,KAAAmE,QAEA,EAEAyG,aAAA,SAAA9D,GACA7G,EAAA6G,EAAAkC,eAAA+I,YA7zBA,UA6zBA,eAAAjL,EAAA9B,KACA,EAEAqC,uBAAA,WACA,IAAA8K,EAAAnS,KAAAmE,QAAAwC,GAAA,cAAA3G,KAAAmE,QAAAwC,GAAA,cAEA3G,KAAAyI,UAAA0J,EACAnS,KAAAoS,aAEApS,KAAA6R,YAEA,EAEAlN,SAAA,WACA,IAGArE,EAHA8D,EAAApE,KACAmE,EAAAC,EAAAD,QACAkO,EAAAlO,EAAA,IAGA7D,EAAA6D,EAAAmO,UAEA3L,GAAA,yBACArG,EAAA6D,EAAAoO,KAAA,YAAAD,UAGAhS,EAAAoE,KAAA,YAAA,GAEApE,EAAA,GAAAkS,MAAAC,QAAAJ,EAAAG,MAAAC,QACAtO,EAAAuO,IAAA,CACAC,MAAA,GACAxK,OAAAkK,EAAAG,MAAArK,SAGA/D,EAAAwO,SAAAxO,EAAAD,QACAC,EAAA9D,QAAAA,EACA4E,SAAA,0BACAA,SAAAmN,EAAA7B,WACAvK,YAAA,yBACA,EAEAI,YAAA,WACArG,KAAAmJ,oBAAA,EACAvG,EAAA4B,GAAA6B,YAAA5B,KAAAzE,MACAA,KAAAmE,QAAA4G,OACA,IAGApI,EAAAkQ,OAAA7O,GAEA9D,EAAA4S,cAAAC,eAAA,eAAA,YAEA7S,EAAA4S,cAAAE,eAAA,eAAA,CAAA,CACAnI,KAAA,UACAoI,OAAA/S,EAAA4S,cAAAI,cAAAC,OAAA,CAAA,CAAA,OAAA,YAEA,CAz4BA,CAy4BAjR,OAAAhC,MAAAC,QACAD,KAIA","file":"kendo.autocomplete.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendoautocomplete = global.kendoautocomplete || {}, global.kendoautocomplete.js = factory()));\n})(this, (function () {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    var __meta__ = {\n        id: \"autocomplete\",\n        name: \"AutoComplete\",\n        category: \"web\",\n        description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n        depends: [ \"list\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            support = kendo.support,\n            caret = kendo.caret,\n            activeElement = kendo._activeElement,\n            placeholderSupported = support.placeholder,\n            ui = kendo.ui,\n            List = ui.List,\n            keys = kendo.keys,\n            DataSource = kendo.data.DataSource,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-selected\",\n            HIDDENCLASS = \"k-hidden\",\n            STATEDISABLED = \"k-disabled\",\n            AUTOCOMPLETEVALUE = \"off\",\n            HOVER = \"k-hover\",\n            ns = \".kendoAutoComplete\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n        function indexOfWordAtCaret(caretIdx, text, separator) {\n            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n        }\n\n        function wordAtCaret(caretIdx, text, separator) {\n            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n        }\n\n        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n            var words = text.split(separator);\n\n            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n            if (separator && words[words.length - 1] !== \"\") {\n                words.push(\"\");\n            }\n\n            return words.join(defaultSeparator);\n        }\n\n        var AutoComplete = List.extend({\n            init: function(element, options) {\n                var that = this, wrapper, disabled;\n\n                that.ns = ns;\n                options = Array.isArray(options) ? { dataSource: options } : options;\n\n                List.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.placeholder = options.placeholder || element.attr(\"placeholder\");\n                if (placeholderSupported) {\n                    element.attr(\"placeholder\", options.placeholder);\n                }\n\n                that._wrapper();\n                that._loader();\n                that._clearButton();\n\n                that._dataSource();\n                that._ignoreCase();\n\n                element[0].type = \"text\";\n                wrapper = that.wrapper;\n\n                that._popup();\n\n                element\n                    .addClass(\"k-input-inner\")\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, function() {\n                        that._prev = that._accessor();\n                        that._oldText = that._prev;\n                        that._placeholder(false);\n                        wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function(ev) {\n                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                            return;\n                        }\n\n                        that._change();\n                        that._placeholder();\n                        that.close();\n                        wrapper.removeClass(FOCUSED);\n                    })\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false\n                    });\n\n                that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n                that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n                that._enable();\n\n                that._old = that._accessor();\n\n                that._placeholder();\n\n                that._initList();\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n                that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: that._loading });\n\n                kendo.notify(that);\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                that._aria();\n            },\n\n            options: {\n                name: \"AutoComplete\",\n                enabled: true,\n                suggest: false,\n                template: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                dataTextField: \"\",\n                minLength: 1,\n                enforceMinLength: false,\n                delay: 200,\n                height: 200,\n                filter: \"startswith\",\n                ignoreCase: true,\n                highlightFirst: false,\n                separator: null,\n                placeholder: \"\",\n                animation: {},\n                virtual: false,\n                value: null,\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n            },\n\n            _clearValueMouseDownHandler: function(ev) {\n                var that = this;\n\n                if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                    that._clearValueTrigger = true;\n                } else {\n                    that._clearValueTrigger = false;\n                }\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                if (that.filterInput) {\n                    that.filterInput\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keypress\" + ns, that._keypress.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .attr({\n                            autocomplete: AUTOCOMPLETEVALUE,\n                            role: \"combobox\",\n                            \"aria-expanded\": false\n                        });\n\n                    that.popup.bind(\"activate\", () => {\n                        that.filterInput.val(that.element.val());\n                        that.filterInput.trigger(\"focus\");\n                    });\n\n                    that.popup.bind(\"deactivate\", () => {\n                        that.element.trigger(\"focus\");\n                    });\n                }\n            },\n\n            _onCloseButtonPressed: function() {\n                var that = this;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-autocomplete-popup\");\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy.bind(that);\n                    that._errorHandler = that._hideBusy.bind(that);\n                }\n\n                that.dataSource = DataSource.create(that.options.dataSource)\n                    .bind(\"progress\", that._progressHandler)\n                    .bind(\"error\", that._errorHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n\n                this.listView.setDataSource(this.dataSource);\n            },\n\n            events: [\n                \"open\",\n                \"close\",\n                CHANGE,\n                \"select\",\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n                this._accessors();\n                this._aria();\n                this._clearButton();\n            },\n\n            _listOptions: function(options) {\n                var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                    skipUpdateOnBind: true\n                }));\n\n                listOptions.dataValueField = listOptions.dataTextField;\n                listOptions.selectedItemChange = null;\n\n                return listOptions;\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false)\n                           .attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            close: function() {\n                var that = this;\n                var current = that.listView.focus();\n\n                if (current) {\n                    current.removeClass(SELECTED);\n                }\n\n                that.popup.close();\n                that._deactivateItem();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(ns);\n                that._clear.off(ns);\n                that.wrapper.off(ns);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                List.fn.destroy.call(that);\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            select: function(li) {\n                this._select(li);\n            },\n\n            search: function(word) {\n                var that = this,\n                options = that.options,\n                ignoreCase = options.ignoreCase,\n                separator = that._separator(),\n                length,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n                word = word || that._accessor();\n\n                clearTimeout(that._typingTimeout);\n\n                if (separator) {\n                    word = wordAtCaret(caret(element)[0], word, separator);\n                }\n\n                length = word.length;\n\n                if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                    that._open = true;\n\n                    that._mute(function() {\n                        this.listView.value([]);\n                    });\n\n                    that._filterSource({\n                        value: ignoreCase ? (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) : word,\n                        operator: options.filter,\n                        field: options.dataTextField,\n                        ignoreCase: ignoreCase\n                    });\n\n                    that.one(\"close\", that._unifySeparators.bind(that));\n                }\n                that._toggleCloseVisibility();\n            },\n\n            suggest: function(word) {\n                var that = this,\n                    key = that._last,\n                    value = that._accessor(),\n                    element = that.element[0],\n                    caretIdx = caret(element)[0],\n                    separator = that._separator(),\n                    words = value.split(separator),\n                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                    selectionEnd = caretIdx,\n                    idx,\n                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n                if (key == keys.BACKSPACE || key == keys.DELETE) {\n                    that._last = undefined$1;\n                    return;\n                }\n\n                word = word || \"\";\n\n                if (typeof word !== \"string\") {\n                    if (word[0]) {\n                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                    }\n\n                    word = word ? that._text(word) : \"\";\n                }\n\n                if (caretIdx <= 0) {\n                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n                }\n\n                idx = value.substring(0, caretIdx).lastIndexOf(separator);\n                idx = idx > -1 ? caretIdx - (idx + separator.length) : caretIdx;\n                value = words[wordIndex].substring(0, idx);\n\n                if (word) {\n                    word = word.toString();\n                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                    if (idx > -1) {\n                        word = word.substring(idx + value.length);\n\n                        selectionEnd = caretIdx + word.length;\n\n                        value += word;\n                    }\n\n                    if (separator && words[words.length - 1] !== \"\") {\n                        words.push(\"\");\n                    }\n\n                }\n\n                words[wordIndex] = value;\n\n                that._accessor(words.join(separator || \"\"));\n\n                if (element === activeElement()) {\n                    caret(element, caretIdx, selectionEnd);\n                }\n            },\n\n            value: function(value) {\n                if (value !== undefined$1) {\n                    this.listView.value(value);\n\n                    this._accessor(value);\n                    this._old = this._accessor();\n                    this._oldText = this._accessor();\n                } else {\n                    return this._accessor();\n                }\n                this._toggleCloseVisibility();\n                this._refreshFloatingLabel();\n            },\n\n            _click: function(e) {\n                var item = e.item;\n                var that = this;\n                var element = that.element;\n                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n                e.preventDefault();\n\n                that._active = true;\n\n                if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                    that.close();\n                    return;\n                }\n                that._oldText = element.val();\n                that._select(item).done(function() {\n                    that._blur();\n\n                    caret(element, element.val().length);\n                });\n            },\n\n            _clearText: $.noop,\n\n            _highlightFirst: function() {\n                var index = this.options.highlightFirst ? 0 : -1;\n\n                this.listView.focus(index);\n            },\n\n            _resetFocusItem: function() {\n                if (this.options.virtual) {\n                    this.listView.scrollTo(0);\n                }\n\n                this._highlightFirst();\n            },\n\n            _listBound: function() {\n                var that = this;\n                var popup = that.popup;\n                var options = that.options;\n                var data = that.dataSource.flatView();\n                var length = data.length;\n                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n                var action;\n\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!length);\n                that._toggleHeader(!!groupsLength && !!length);\n\n                that._resizePopup();\n\n                popup.position();\n\n                if (length) {\n                    if (options.suggest && isActive && that._inputValue()) {\n                        that.suggest(data[0]);\n                    }\n\n                    that._highlightFirst();\n                }\n\n                if (that._open) {\n                    that._open = false;\n                    action = that._allowOpening() ? \"open\" : \"close\";\n\n                    if (that._typingTimeout && !isActive) {\n                        action = \"close\";\n                    }\n\n                    if (length) {\n                        that._resetFocusItem();\n\n                        if (options.virtual) {\n                            that.popup\n                                .unbind(\"activate\", that._resetFocusItemHandler)\n                                .one(\"activate\", that._resetFocusItemHandler);\n                        }\n                    }\n\n                    popup[action]();\n                    that._typingTimeout = undefined$1;\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _mute: function(callback) {\n                this._muted = true;\n                callback.call(this);\n                this._muted = false;\n            },\n\n            _listChange: function() {\n                var isActive = this._active || this.element[0] === activeElement();\n\n                if (isActive && !this._muted) {\n                    this._selectValue(this.listView.selectedDataItems()[0]);\n                }\n            },\n\n            _selectValue: function(dataItem) {\n                var separator = this._separator();\n                var text = \"\";\n\n                if (dataItem) {\n                    text = this._text(dataItem);\n                }\n\n                if (text === null) {\n                    text = \"\";\n                }\n\n                if (separator) {\n                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n                }\n\n                this._prev = text;\n                this._accessor(text);\n                this._placeholder();\n            },\n\n            _unifySeparators: function() {\n                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n                return this;\n            },\n\n            _preselect: function(value, text) {\n                this._inputValue(text);\n                this._accessor(value);\n\n                this._old = this.oldText = this._accessor();\n\n                this.listView.setValue(value);\n                this._placeholder();\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that._unifySeparators().value();\n                var trigger = value !== List.unifyType(that._old, typeof value);\n\n                var valueUpdated = trigger && !that._typing;\n                var itemSelected = that._oldText !== value;\n                var clearValueTrigger = that._clearValueTrigger;\n\n                that._old = value;\n                that._oldText = value;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n\n                if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                if (trigger && !clearValueTrigger) {\n                    that.trigger(CHANGE);\n                }\n\n                that.typing = false;\n                that._toggleCloseVisibility();\n            },\n\n            _accessor: function(value) {\n                var that = this,\n                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n                if (value !== undefined$1) {\n                    element.value = value === null ? \"\" : value;\n                    that._placeholder();\n                } else {\n                    value = element.value;\n\n                    if (element.className.indexOf(\"k-readonly\") > -1) {\n                        if (value === that.options.placeholder) {\n                            return \"\";\n                        } else {\n                            return value;\n                        }\n                    }\n\n                    return value;\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var listView = that.listView;\n                var visible = that.popup.visible();\n                var current = listView.focus();\n\n                that._last = key;\n\n                if (key === keys.DOWN) {\n                    if (visible) {\n                        this._move(current ? \"focusNext\" : \"focusFirst\");\n                    } else if (that.value()) {\n                        that._filterSource({\n                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                            operator: that.options.filter,\n                            field: that.options.dataTextField,\n                            ignoreCase: that.ignoreCase\n                        }).done(function() {\n                            if (that._allowOpening()) {\n                                that._resetFocusItem();\n                                that.popup.open();\n                            }\n                        });\n                    }\n                    e.preventDefault();\n                } else if (key === keys.ESC ) {\n                    if (visible) {\n                        e.preventDefault();\n                        that.close();\n                    } else {\n                        that._clearValue();\n                    }\n                } else if (e.altKey && key === keys.UP && visible) {\n                    e.preventDefault();\n                    that.close();\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        this._move(current ? \"focusPrev\" : \"focusLast\");\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    this._move(\"focusFirst\");\n                } else if (key === keys.END) {\n                    this._move(\"focusLast\");\n                } else if (key === keys.ENTER || key === keys.TAB) {\n\n                    if (key === keys.ENTER && visible) {\n                        e.preventDefault();\n                    }\n\n                    if (visible && current) {\n                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                        if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                            return;\n                        }\n\n                        this._select(current);\n                    }\n\n                    this._blur();\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                } else {\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._search();\n                }\n            },\n\n            _keypress: function() {\n                this._oldText = this.element.val();\n                this._typing = true;\n            },\n\n            _move: function(action) {\n                this.listView[action]();\n\n                if (this.options.suggest) {\n                    this.suggest(this.listView.focus());\n                }\n            },\n\n            _hideBusy: function() {\n                var that = this;\n                clearTimeout(that._busy);\n                that._loading.addClass(HIDDENCLASS);\n                that.element.attr(\"aria-busy\", false);\n                that._busy = null;\n                that._toggleCloseVisibility();\n            },\n\n            _showBusy: function() {\n                var that = this;\n\n                if (that._busy) {\n                    return;\n                }\n\n                that._busy = setTimeout(function() {\n                    that.element.attr(\"aria-busy\", true);\n                    that._loading.removeClass(HIDDENCLASS);\n                    that._hideClear();\n                }, 100);\n            },\n\n            _placeholder: function(show) {\n                if (placeholderSupported) {\n                    return;\n                }\n\n                var that = this,\n                    element = that.element,\n                    placeholder = that.options.placeholder,\n                    value;\n\n                if (placeholder) {\n                    value = element.val();\n\n                    if (show === undefined$1) {\n                        show = !value;\n                    }\n\n                    if (!show) {\n                        if (value !== placeholder) {\n                            placeholder = value;\n                        } else {\n                            placeholder = \"\";\n                        }\n                    }\n\n                    if (value === that._old && !show) {\n                        return;\n                    }\n\n                    element.toggleClass(\"k-readonly\", show)\n                           .val(placeholder);\n\n                    if (!placeholder && element[0] === document.activeElement) {\n                        caret(element[0], 0, 0);\n                    }\n                }\n            },\n\n            _separator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                   return new RegExp(separator.join(\"|\"), 'gi');\n                }\n                return separator;\n            },\n\n            _defaultSeparator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                    return separator[0];\n                }\n                return separator;\n            },\n\n            _inputValue: function() {\n                return this.element.val();\n            },\n\n            _search: function() {\n                var that = this;\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    if (that._prev !== that._accessor()) {\n                        that._prev = that._accessor();\n                        that.search();\n                    }\n                }, that.options.delay);\n            },\n\n            _select: function(candidate) {\n                var that = this;\n                that._active = true;\n\n                return that.listView.select(candidate).done(function() {\n                    that._active = false;\n                });\n            },\n\n            _loader: function() {\n                this._loading = $('<span class=\"k-icon k-i-loading k-input-loading-icon ' + HIDDENCLASS + '\"></span>').insertAfter(this.element);\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this.element);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleCloseVisibility: function() {\n                var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n                if (this.value() && !preventShow) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMelement = element[0],\n                    wrapper;\n\n                wrapper = element.parent();\n\n                if (!wrapper.is(\"span.k-autocomplete\")) {\n                    wrapper = element.wrap(\"<span />\").parent();\n                }\n\n                wrapper.attr(\"tabindex\", -1);\n\n                wrapper[0].style.cssText = DOMelement.style.cssText;\n                element.css({\n                    width: \"\",\n                    height: DOMelement.style.height\n                });\n\n                that._focused = that.element;\n                that.wrapper = wrapper\n                    .addClass(\"k-autocomplete k-input\")\n                    .addClass(DOMelement.className)\n                    .removeClass('input-validation-error');\n            },\n\n            _clearValue: function() {\n                this._clearValueTrigger = false;\n                List.fn._clearValue.call(this);\n                this.element.focus();\n            }\n        });\n\n        ui.plugin(AutoComplete);\n\n        kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"AutoComplete\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}