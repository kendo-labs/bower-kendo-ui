{"version":3,"sources":["raw-js/kendo.autocomplete.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoautocomplete","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","List","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","substring","split","length","AutoComplete","extend","init","element","that","Array","isArray","dataSource","fn","call","attr","_wrapper","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","e","preventDefault","_resetFocusItemHandler","_resetFocusItem","_inputValuesContainer","clearButton","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","name","enabled","suggest","groupTemplate","fixedGroupTemplate","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","autoWidth","popup","size","fillMode","rounded","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","readonly","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","lowerCaseValue","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","toLocaleLowerCase","toLowerCase","_filterSource","operator","field","one","_unifySeparators","idx","key","_last","currentValue","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","_defaultSeparator","toString","push","lastSeparator","matchAll","source","pop","slice","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_view","show","toggleClass","document","RegExp","setTimeout","candidate","preventShow","_showClear","_hideClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","kendo$1","__meta__","id","category","description","depends","features","Object","defineProperty"],"mappings":"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","file":"kendo.autocomplete.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendoautocomplete = global.kendoautocomplete || {}, global.kendoautocomplete.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"autocomplete\",\n        name: \"AutoComplete\",\n        category: \"web\",\n        description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n        depends: [ \"list\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            support = kendo.support,\n            caret = kendo.caret,\n            activeElement = kendo._activeElement,\n            placeholderSupported = support.placeholder,\n            ui = kendo.ui,\n            List = ui.List,\n            keys = kendo.keys,\n            DataSource = kendo.data.DataSource,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            AUTOCOMPLETEVALUE = \"off\",\n            HOVER = \"k-hover\",\n            ns = \".kendoAutoComplete\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n        function indexOfWordAtCaret(caretIdx, text, separator) {\n            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n        }\n\n        function wordAtCaret(caretIdx, text, separator) {\n            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n        }\n\n        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n            var words = text.split(separator);\n\n            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n            if (separator && words[words.length - 1] !== \"\") {\n                words.push(\"\");\n            }\n\n            return words.join(defaultSeparator);\n        }\n\n        var AutoComplete = List.extend({\n            init: function(element, options) {\n                var that = this, wrapper, disabled;\n\n                that.ns = ns;\n                options = Array.isArray(options) ? { dataSource: options } : options;\n\n                List.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.placeholder = options.placeholder || element.attr(\"placeholder\");\n                if (placeholderSupported) {\n                    element.attr(\"placeholder\", options.placeholder);\n                }\n\n                that._wrapper();\n                that._clearButton();\n\n                that._dataSource();\n                that._ignoreCase();\n\n                element[0].type = \"text\";\n                wrapper = that.wrapper;\n\n                that._popup();\n\n                element\n                    .addClass(\"k-input-inner\")\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, function() {\n                        that._prev = that._accessor();\n                        that._oldText = that._prev;\n                        that._placeholder(false);\n                        wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function(ev) {\n                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                            return;\n                        }\n\n                        that._change();\n                        that._placeholder();\n                        that.close();\n                        wrapper.removeClass(FOCUSED);\n                    })\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false\n                    });\n\n                that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n                that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n                that._enable();\n\n                that._old = that._accessor();\n\n                that._placeholder();\n\n                that._initList();\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n                that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element });\n\n                kendo.notify(that);\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                that._aria();\n            },\n\n            options: {\n                name: \"AutoComplete\",\n                enabled: true,\n                suggest: false,\n                template: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                dataTextField: \"\",\n                minLength: 1,\n                enforceMinLength: false,\n                delay: 200,\n                height: 200,\n                filter: \"startswith\",\n                ignoreCase: true,\n                highlightFirst: false,\n                separator: null,\n                placeholder: \"\",\n                animation: {},\n                virtual: false,\n                value: null,\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n            },\n\n            _clearValueMouseDownHandler: function(ev) {\n                var that = this;\n\n                if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                    that._clearValueTrigger = true;\n                } else {\n                    that._clearValueTrigger = false;\n                }\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                if (that.filterInput) {\n                    that.filterInput\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keypress\" + ns, that._keypress.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .attr({\n                            autocomplete: AUTOCOMPLETEVALUE,\n                            role: \"combobox\",\n                            \"aria-expanded\": false\n                        });\n\n                    that.popup.bind(\"activate\", () => {\n                        that.filterInput.val(that.element.val());\n                        that.filterInput.trigger(\"focus\");\n                    });\n\n                    that.popup.bind(\"deactivate\", () => {\n                        that.element.trigger(\"focus\");\n                    });\n                }\n            },\n\n            _onCloseButtonPressed: function() {\n                var that = this;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-autocomplete-popup\");\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._errorHandler = that._hideBusy;\n                }\n\n                that.dataSource = DataSource.create(that.options.dataSource)\n                    .bind(\"progress\", that._progressHandler)\n                    .bind(\"error\", that._errorHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n\n                this.listView.setDataSource(this.dataSource);\n            },\n\n            events: [\n                \"open\",\n                \"close\",\n                CHANGE,\n                \"select\",\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n                this._accessors();\n                this._aria();\n                this._clearButton();\n            },\n\n            _listOptions: function(options) {\n                var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                    skipUpdateOnBind: true\n                }));\n\n                listOptions.dataValueField = listOptions.dataTextField;\n                listOptions.selectedItemChange = null;\n\n                return listOptions;\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false)\n                           .attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            close: function() {\n                var that = this;\n                var current = that.listView.focus();\n\n                if (current) {\n                    current.removeClass(SELECTED);\n                }\n\n                that.popup.close();\n                that._deactivateItem();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(ns);\n                that._clear.off(ns);\n                that.wrapper.off(ns);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                List.fn.destroy.call(that);\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            select: function(li) {\n                this._select(li);\n            },\n\n            search: function(word) {\n                let that = this,\n                options = that.options,\n                ignoreCase = options.ignoreCase,\n                separator = that._separator(),\n                length,\n                lowerCaseValue,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n                word = word || that._accessor();\n\n                clearTimeout(that._typingTimeout);\n\n                if (separator) {\n                    word = wordAtCaret(caret(element)[0], word, separator);\n                }\n\n                length = word.length;\n\n                if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                    that._open = true;\n\n                    that._mute(function() {\n                        this.listView.value([]);\n                    });\n\n                    lowerCaseValue = accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase();\n\n                    that._filterSource({\n                        value: ignoreCase ? lowerCaseValue : word,\n                        operator: options.filter,\n                        field: options.dataTextField,\n                        ignoreCase: ignoreCase\n                    });\n\n                    that.one(\"close\", that._unifySeparators.bind(that));\n                }\n                that._toggleCloseVisibility();\n            },\n\n            suggest: function(word) {\n                var that = this,\n                    key = that._last,\n                    value = that._accessor(),\n                    currentValue = that.value(),\n                    element = that.element[0],\n                    caretIdx = caret(element)[0],\n                    separator = that._separator(),\n                    words = value.split(separator),\n                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                    selectionEnd = caretIdx,\n                    idx,\n                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n                if (key == keys.BACKSPACE || key == keys.DELETE) {\n                    that._last = undefined$1;\n                    return;\n                }\n\n                word = word || \"\";\n\n                if (typeof word !== \"string\") {\n                    if (word[0]) {\n                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                    }\n\n                    word = word ? that._text(word) : \"\";\n                }\n\n                if (caretIdx <= 0) {\n                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n                }\n\n                idx = value.substring(0, caretIdx).lastIndexOf(that._defaultSeparator());\n                idx = idx > -1 ? caretIdx - (idx + that._defaultSeparator().length) : caretIdx;\n                value = words[wordIndex].substring(0, idx);\n\n                if (word) {\n                    word = word.toString();\n                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                    if (idx > -1) {\n                        word = word.substring(idx + value.length);\n\n                        selectionEnd = caretIdx + word.length;\n\n                        value += word;\n                    }\n\n                    if (separator && words[words.length - 1] !== \"\") {\n                        words.push(\"\");\n                    }\n\n                }\n\n                words[wordIndex] = value;\n\n                if (typeof that.options.separator == 'object' && that.options.separator != null) {\n                    if (currentValue.length > 1) {\n                        let lastSeparator = [...currentValue.matchAll(separator.source)].pop();\n                        if (lastSeparator) {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\") + lastSeparator + words[words.length - 1]);\n                        } else {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\"));\n                        }\n                    } else {\n                      that._accessor(words.join(this._defaultSeparator() || \"\"));\n                    }\n                } else {\n                    that._accessor(words.join(separator || \"\"));\n                }\n\n                if (element === activeElement()) {\n                    caret(element, caretIdx, selectionEnd);\n                }\n            },\n\n            value: function(value) {\n                if (value !== undefined$1) {\n                    this.listView.value(value);\n\n                    this._accessor(value);\n                    this._old = this._accessor();\n                    this._oldText = this._accessor();\n                } else {\n                    return this._accessor();\n                }\n                this._toggleCloseVisibility();\n                this._refreshFloatingLabel();\n            },\n\n            _click: function(e) {\n                var item = e.item;\n                var that = this;\n                var element = that.element;\n                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n                e.preventDefault();\n\n                that._active = true;\n\n                if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                    that.close();\n                    return;\n                }\n                that._oldText = element.val();\n                that._select(item).done(function() {\n                    that._blur();\n\n                    caret(element, element.val().length);\n                });\n            },\n\n            _clearText: $.noop,\n\n            _highlightFirst: function() {\n                var index = this.options.highlightFirst ? 0 : -1;\n\n                this.listView.focus(index);\n            },\n\n            _resetFocusItem: function() {\n                if (this.options.virtual) {\n                    this.listView.scrollTo(0);\n                }\n\n                this._highlightFirst();\n            },\n\n            _listBound: function() {\n                var that = this;\n                var popup = that.popup;\n                var options = that.options;\n                var data = that.dataSource.flatView();\n                var length = data.length;\n                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n                var action;\n\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!length);\n                that._toggleHeader(!!groupsLength && !!length);\n\n                that._resizePopup();\n\n                popup.position();\n\n                if (length) {\n                    if (options.suggest && isActive && that._inputValue()) {\n                        that.suggest(data[0]);\n                    }\n\n                    that._highlightFirst();\n                }\n\n                if (that._open) {\n                    that._open = false;\n                    action = that._allowOpening() ? \"open\" : \"close\";\n\n                    if (that._typingTimeout && !isActive) {\n                        action = \"close\";\n                    }\n\n                    if (length) {\n                        that._resetFocusItem();\n\n                        if (options.virtual) {\n                            that.popup\n                                .unbind(\"activate\", that._resetFocusItemHandler)\n                                .one(\"activate\", that._resetFocusItemHandler);\n                        }\n                    }\n\n                    popup[action]();\n                    that._typingTimeout = undefined$1;\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _mute: function(callback) {\n                this._muted = true;\n                callback.call(this);\n                this._muted = false;\n            },\n\n            _listChange: function() {\n                var isActive = this._active || this.element[0] === activeElement();\n\n                if (isActive && !this._muted) {\n                    this._selectValue(this.listView.selectedDataItems()[0]);\n                }\n            },\n\n            _selectValue: function(dataItem) {\n                var separator = this._separator();\n                var text = \"\";\n\n                if (dataItem) {\n                    text = this._text(dataItem);\n                }\n\n                if (text === null) {\n                    text = \"\";\n                }\n\n                if (separator) {\n                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n                }\n\n                this._prev = text;\n                this._accessor(text);\n                this._placeholder();\n            },\n\n            _unifySeparators: function() {\n                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n                return this;\n            },\n\n            _preselect: function(value, text) {\n                this._inputValue(text);\n                this._accessor(value);\n\n                this._old = this.oldText = this._accessor();\n\n                this.listView.setValue(value);\n                this._placeholder();\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that._unifySeparators().value();\n                var trigger = value !== List.unifyType(that._old, typeof value);\n\n                var valueUpdated = trigger && !that._typing;\n                var itemSelected = that._oldText !== value;\n                var clearValueTrigger = that._clearValueTrigger;\n\n                that._old = value;\n                that._oldText = value;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n\n                if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                if (trigger && !clearValueTrigger) {\n                    that.trigger(CHANGE);\n                }\n\n                that.typing = false;\n                that._toggleCloseVisibility();\n            },\n\n            _accessor: function(value) {\n                var that = this,\n                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n                if (value !== undefined$1) {\n                    element.value = value === null ? \"\" : value;\n                    that._placeholder();\n                } else {\n                    value = element.value;\n\n                    if (element.className.indexOf(\"k-readonly\") > -1) {\n                        if (value === that.options.placeholder) {\n                            return \"\";\n                        } else {\n                            return value;\n                        }\n                    }\n\n                    return value;\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var listView = that.listView;\n                var visible = that.popup.visible();\n                var current = listView.focus();\n\n                that._last = key;\n\n                if (key === keys.DOWN) {\n                    if (visible) {\n                        this._move(current ? \"focusNext\" : \"focusFirst\");\n                    } else if (that.value()) {\n                        that._filterSource({\n                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                            operator: that.options.filter,\n                            field: that.options.dataTextField,\n                            ignoreCase: that.ignoreCase\n                        }).done(function() {\n                            if (that._allowOpening()) {\n                                that._resetFocusItem();\n                                that.popup.open();\n                            }\n                        });\n                    }\n                    e.preventDefault();\n                } else if (key === keys.ESC ) {\n                    if (visible) {\n                        e.preventDefault();\n                        that.close();\n                    } else {\n                        that._clearValue();\n                    }\n                } else if (e.altKey && key === keys.UP && visible) {\n                    e.preventDefault();\n                    that.close();\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        this._move(current ? \"focusPrev\" : \"focusLast\");\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    this._move(\"focusFirst\");\n                } else if (key === keys.END) {\n                    this._move(\"focusLast\");\n                } else if (key === keys.ENTER || key === keys.TAB) {\n\n                    if (key === keys.ENTER && visible) {\n                        e.preventDefault();\n                    }\n\n                    if (visible && current) {\n                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                        if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                            return;\n                        }\n\n                        this._select(current);\n                    }\n\n                    this._blur();\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                } else {\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._search();\n                }\n            },\n\n            _keypress: function() {\n                this._oldText = this.element.val();\n                this._typing = true;\n            },\n\n            _move: function(action) {\n                this.listView[action]();\n\n                if (this.options.suggest && this.listView.focus() == null && action == \"focusNext\") {\n                    this.listView.focus(0);\n                    this.suggest(this.listView._view[0].item);\n                } else if (this.options.suggest && this.listView.focus() == null && action == \"focusPrev\") {\n                    let index = this.listView._view.length - 1;\n                    this.listView.focus(index);\n                    this.suggest(this.listView._view[index].item);\n                } else if (this.options.suggest && (action == \"focusFirst\" || action == \"focusLast\")) {\n                   caret(this.element);\n                } else if (this.options.suggest && this.listView.focus() != null) {\n                    this.suggest(this.listView.focus());\n                }\n            },\n\n            _placeholder: function(show) {\n                if (placeholderSupported) {\n                    return;\n                }\n\n                var that = this,\n                    element = that.element,\n                    placeholder = that.options.placeholder,\n                    value;\n\n                if (placeholder) {\n                    value = element.val();\n\n                    if (show === undefined$1) {\n                        show = !value;\n                    }\n\n                    if (!show) {\n                        if (value !== placeholder) {\n                            placeholder = value;\n                        } else {\n                            placeholder = \"\";\n                        }\n                    }\n\n                    if (value === that._old && !show) {\n                        return;\n                    }\n\n                    element.toggleClass(\"k-readonly\", show)\n                           .val(placeholder);\n\n                    if (!placeholder && element[0] === document.activeElement) {\n                        caret(element[0], 0, 0);\n                    }\n                }\n            },\n\n            _separator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                   return new RegExp(separator.join(\"|\"), 'gi');\n                }\n                return separator;\n            },\n\n            _defaultSeparator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                    return separator[0];\n                }\n                return separator;\n            },\n\n            _inputValue: function() {\n                return this.element.val();\n            },\n\n            _search: function() {\n                var that = this;\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    if (that._prev !== that._accessor()) {\n                        that._prev = that._accessor();\n                        that.search();\n                    }\n                }, that.options.delay);\n            },\n\n            _select: function(candidate) {\n                var that = this;\n                that._active = true;\n\n                return that.listView.select(candidate).done(function() {\n                    that._active = false;\n                });\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this.element);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleCloseVisibility: function() {\n                var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n                if (this.value() && !preventShow) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMelement = element[0],\n                    wrapper;\n\n                wrapper = element.parent();\n\n                if (!wrapper.is(\"span.k-autocomplete\")) {\n                    wrapper = element.wrap(\"<span />\").parent();\n                }\n\n                wrapper.attr(\"tabindex\", -1);\n\n                wrapper[0].style.cssText = DOMelement.style.cssText;\n                element.css({\n                    width: \"\",\n                    height: DOMelement.style.height\n                });\n\n                that._focused = that.element;\n                that.wrapper = wrapper\n                    .addClass(\"k-autocomplete k-input\")\n                    .addClass(DOMelement.className)\n                    .removeClass('input-validation-error');\n            },\n\n            _clearValue: function() {\n                this._clearValueTrigger = false;\n                List.fn._clearValue.call(this);\n                this.element.trigger(\"focus\");\n            }\n        });\n\n        ui.plugin(AutoComplete);\n\n        kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"AutoComplete\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}