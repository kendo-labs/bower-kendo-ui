{"version":3,"sources":["raw-js/kendo.autocomplete.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoautocomplete","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","List","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","substring","split","length","AutoComplete","extend","init","element","that","Array","isArray","dataSource","fn","call","attr","inputMode","_wrapper","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","inputmode","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","e","preventDefault","_resetFocusItemHandler","_resetFocusItem","_inputValuesContainer","clearButton","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","name","enabled","suggest","groupTemplate","fixedGroupTemplate","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","autoWidth","popup","size","fillMode","rounded","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","readonly","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","lowerCaseValue","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","toLocaleLowerCase","toLowerCase","_filterSource","operator","field","one","_unifySeparators","idx","key","_last","currentValue","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","_defaultSeparator","toString","push","lastSeparator","matchAll","source","pop","slice","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_view","show","toggleClass","document","RegExp","setTimeout","candidate","preventShow","_showClear","_hideClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","kendo$1","__meta__","id","category","description","depends","features","Object","defineProperty"],"mappings":"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","file":"kendo.autocomplete.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendoautocomplete = global.kendoautocomplete || {}, global.kendoautocomplete.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"autocomplete\",\n        name: \"AutoComplete\",\n        category: \"web\",\n        description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n        depends: [ \"list\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            support = kendo.support,\n            caret = kendo.caret,\n            activeElement = kendo._activeElement,\n            placeholderSupported = support.placeholder,\n            ui = kendo.ui,\n            List = ui.List,\n            keys = kendo.keys,\n            DataSource = kendo.data.DataSource,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            AUTOCOMPLETEVALUE = \"off\",\n            HOVER = \"k-hover\",\n            ns = \".kendoAutoComplete\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n        function indexOfWordAtCaret(caretIdx, text, separator) {\n            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n        }\n\n        function wordAtCaret(caretIdx, text, separator) {\n            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n        }\n\n        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n            var words = text.split(separator);\n\n            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n            if (separator && words[words.length - 1] !== \"\") {\n                words.push(\"\");\n            }\n\n            return words.join(defaultSeparator);\n        }\n\n        var AutoComplete = List.extend({\n            init: function(element, options) {\n                var that = this, wrapper, disabled;\n\n                that.ns = ns;\n                options = Array.isArray(options) ? { dataSource: options } : options;\n\n                List.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.placeholder = options.placeholder || element.attr(\"placeholder\");\n                options.inputMode = options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n                if (placeholderSupported) {\n                    element.attr(\"placeholder\", options.placeholder);\n                }\n\n                that._wrapper();\n                that._clearButton();\n\n                that._dataSource();\n                that._ignoreCase();\n\n                element[0].type = \"text\";\n                wrapper = that.wrapper;\n\n                that._popup();\n\n                element\n                    .addClass(\"k-input-inner\")\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, function() {\n                        that._prev = that._accessor();\n                        that._oldText = that._prev;\n                        that._placeholder(false);\n                        wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function(ev) {\n                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                            return;\n                        }\n\n                        that._change();\n                        that._placeholder();\n                        that.close();\n                        wrapper.removeClass(FOCUSED);\n                    })\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false,\n                        inputmode: options.inputMode\n                    });\n\n                that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n                that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n                that._enable();\n\n                that._old = that._accessor();\n\n                that._placeholder();\n\n                that._initList();\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n                that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element });\n\n                kendo.notify(that);\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                that._aria();\n            },\n\n            options: {\n                name: \"AutoComplete\",\n                enabled: true,\n                suggest: false,\n                template: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                dataTextField: \"\",\n                minLength: 1,\n                enforceMinLength: false,\n                delay: 200,\n                height: 200,\n                filter: \"startswith\",\n                ignoreCase: true,\n                highlightFirst: false,\n                separator: null,\n                placeholder: \"\",\n                animation: {},\n                virtual: false,\n                value: null,\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n            },\n\n            _clearValueMouseDownHandler: function(ev) {\n                var that = this;\n\n                if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                    that._clearValueTrigger = true;\n                } else {\n                    that._clearValueTrigger = false;\n                }\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                if (that.filterInput) {\n                    that.filterInput\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keypress\" + ns, that._keypress.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .attr({\n                            autocomplete: AUTOCOMPLETEVALUE,\n                            role: \"combobox\",\n                            \"aria-expanded\": false\n                        });\n\n                    that.popup.bind(\"activate\", () => {\n                        that.filterInput.val(that.element.val());\n                        that.filterInput.trigger(\"focus\");\n                    });\n\n                    that.popup.bind(\"deactivate\", () => {\n                        that.element.trigger(\"focus\");\n                    });\n                }\n            },\n\n            _onCloseButtonPressed: function() {\n                var that = this;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-autocomplete-popup\");\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._errorHandler = that._hideBusy;\n                }\n\n                that.dataSource = DataSource.create(that.options.dataSource)\n                    .bind(\"progress\", that._progressHandler)\n                    .bind(\"error\", that._errorHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n\n                this.listView.setDataSource(this.dataSource);\n            },\n\n            events: [\n                \"open\",\n                \"close\",\n                CHANGE,\n                \"select\",\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n                this._accessors();\n                this._aria();\n                this._clearButton();\n            },\n\n            _listOptions: function(options) {\n                var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                    skipUpdateOnBind: true\n                }));\n\n                listOptions.dataValueField = listOptions.dataTextField;\n                listOptions.selectedItemChange = null;\n\n                return listOptions;\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false)\n                           .attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            close: function() {\n                var that = this;\n                var current = that.listView.focus();\n\n                if (current) {\n                    current.removeClass(SELECTED);\n                }\n\n                that.popup.close();\n                that._deactivateItem();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(ns);\n                that._clear.off(ns);\n                that.wrapper.off(ns);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                List.fn.destroy.call(that);\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            select: function(li) {\n                this._select(li);\n            },\n\n            search: function(word) {\n                let that = this,\n                options = that.options,\n                ignoreCase = options.ignoreCase,\n                separator = that._separator(),\n                length,\n                lowerCaseValue,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n                word = word || that._accessor();\n\n                clearTimeout(that._typingTimeout);\n\n                if (separator) {\n                    word = wordAtCaret(caret(element)[0], word, separator);\n                }\n\n                length = word.length;\n\n                if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                    that._open = true;\n\n                    that._mute(function() {\n                        this.listView.value([]);\n                    });\n\n                    lowerCaseValue = accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase();\n\n                    that._filterSource({\n                        value: ignoreCase ? lowerCaseValue : word,\n                        operator: options.filter,\n                        field: options.dataTextField,\n                        ignoreCase: ignoreCase\n                    });\n\n                    that.one(\"close\", that._unifySeparators.bind(that));\n                }\n                that._toggleCloseVisibility();\n            },\n\n            suggest: function(word) {\n                var that = this,\n                    key = that._last,\n                    value = that._accessor(),\n                    currentValue = that.value(),\n                    element = that.element[0],\n                    caretIdx = caret(element)[0],\n                    separator = that._separator(),\n                    words = value.split(separator),\n                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                    selectionEnd = caretIdx,\n                    idx,\n                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n                if (key == keys.BACKSPACE || key == keys.DELETE) {\n                    that._last = undefined$1;\n                    return;\n                }\n\n                word = word || \"\";\n\n                if (typeof word !== \"string\") {\n                    if (word[0]) {\n                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                    }\n\n                    word = word ? that._text(word) : \"\";\n                }\n\n                if (caretIdx <= 0) {\n                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n                }\n\n                idx = value.substring(0, caretIdx).lastIndexOf(that._defaultSeparator());\n                idx = idx > -1 ? caretIdx - (idx + that._defaultSeparator().length) : caretIdx;\n                value = words[wordIndex].substring(0, idx);\n\n                if (word) {\n                    word = word.toString();\n                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                    if (idx > -1) {\n                        word = word.substring(idx + value.length);\n\n                        selectionEnd = caretIdx + word.length;\n\n                        value += word;\n                    }\n\n                    if (separator && words[words.length - 1] !== \"\") {\n                        words.push(\"\");\n                    }\n\n                }\n\n                words[wordIndex] = value;\n\n                if (typeof that.options.separator == 'object' && that.options.separator != null) {\n                    if (currentValue.length > 1) {\n                        let lastSeparator = [...currentValue.matchAll(separator.source)].pop();\n                        if (lastSeparator) {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\") + lastSeparator + words[words.length - 1]);\n                        } else {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\"));\n                        }\n                    } else {\n                      that._accessor(words.join(this._defaultSeparator() || \"\"));\n                    }\n                } else {\n                    that._accessor(words.join(separator || \"\"));\n                }\n\n                if (element === activeElement()) {\n                    caret(element, caretIdx, selectionEnd);\n                }\n            },\n\n            value: function(value) {\n                if (value !== undefined$1) {\n                    this.listView.value(value);\n\n                    this._accessor(value);\n                    this._old = this._accessor();\n                    this._oldText = this._accessor();\n                } else {\n                    return this._accessor();\n                }\n                this._toggleCloseVisibility();\n                this._refreshFloatingLabel();\n            },\n\n            _click: function(e) {\n                var item = e.item;\n                var that = this;\n                var element = that.element;\n                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n                e.preventDefault();\n\n                that._active = true;\n\n                if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                    that.close();\n                    return;\n                }\n                that._oldText = element.val();\n                that._select(item).done(function() {\n                    that._blur();\n\n                    caret(element, element.val().length);\n                });\n            },\n\n            _clearText: $.noop,\n\n            _highlightFirst: function() {\n                var index = this.options.highlightFirst ? 0 : -1;\n\n                this.listView.focus(index);\n            },\n\n            _resetFocusItem: function() {\n                if (this.options.virtual) {\n                    this.listView.scrollTo(0);\n                }\n\n                this._highlightFirst();\n            },\n\n            _listBound: function() {\n                var that = this;\n                var popup = that.popup;\n                var options = that.options;\n                var data = that.dataSource.flatView();\n                var length = data.length;\n                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n                var action;\n\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!length);\n                that._toggleHeader(!!groupsLength && !!length);\n\n                that._resizePopup();\n\n                popup.position();\n\n                if (length) {\n                    if (options.suggest && isActive && that._inputValue()) {\n                        that.suggest(data[0]);\n                    }\n\n                    that._highlightFirst();\n                }\n\n                if (that._open) {\n                    that._open = false;\n                    action = that._allowOpening() ? \"open\" : \"close\";\n\n                    if (that._typingTimeout && !isActive) {\n                        action = \"close\";\n                    }\n\n                    if (length) {\n                        that._resetFocusItem();\n\n                        if (options.virtual) {\n                            that.popup\n                                .unbind(\"activate\", that._resetFocusItemHandler)\n                                .one(\"activate\", that._resetFocusItemHandler);\n                        }\n                    }\n\n                    popup[action]();\n                    that._typingTimeout = undefined$1;\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _mute: function(callback) {\n                this._muted = true;\n                callback.call(this);\n                this._muted = false;\n            },\n\n            _listChange: function() {\n                var isActive = this._active || this.element[0] === activeElement();\n\n                if (isActive && !this._muted) {\n                    this._selectValue(this.listView.selectedDataItems()[0]);\n                }\n            },\n\n            _selectValue: function(dataItem) {\n                var separator = this._separator();\n                var text = \"\";\n\n                if (dataItem) {\n                    text = this._text(dataItem);\n                }\n\n                if (text === null) {\n                    text = \"\";\n                }\n\n                if (separator) {\n                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n                }\n\n                this._prev = text;\n                this._accessor(text);\n                this._placeholder();\n            },\n\n            _unifySeparators: function() {\n                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n                return this;\n            },\n\n            _preselect: function(value, text) {\n                this._inputValue(text);\n                this._accessor(value);\n\n                this._old = this.oldText = this._accessor();\n\n                this.listView.setValue(value);\n                this._placeholder();\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that._unifySeparators().value();\n                var trigger = value !== List.unifyType(that._old, typeof value);\n\n                var valueUpdated = trigger && !that._typing;\n                var itemSelected = that._oldText !== value;\n                var clearValueTrigger = that._clearValueTrigger;\n\n                that._old = value;\n                that._oldText = value;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n\n                if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                if (trigger && !clearValueTrigger) {\n                    that.trigger(CHANGE);\n                }\n\n                that.typing = false;\n                that._toggleCloseVisibility();\n            },\n\n            _accessor: function(value) {\n                var that = this,\n                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n                if (value !== undefined$1) {\n                    element.value = value === null ? \"\" : value;\n                    that._placeholder();\n                } else {\n                    value = element.value;\n\n                    if (element.className.indexOf(\"k-readonly\") > -1) {\n                        if (value === that.options.placeholder) {\n                            return \"\";\n                        } else {\n                            return value;\n                        }\n                    }\n\n                    return value;\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var listView = that.listView;\n                var visible = that.popup.visible();\n                var current = listView.focus();\n\n                that._last = key;\n\n                if (key === keys.DOWN) {\n                    if (visible) {\n                        this._move(current ? \"focusNext\" : \"focusFirst\");\n                    } else if (that.value()) {\n                        that._filterSource({\n                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                            operator: that.options.filter,\n                            field: that.options.dataTextField,\n                            ignoreCase: that.ignoreCase\n                        }).done(function() {\n                            if (that._allowOpening()) {\n                                that._resetFocusItem();\n                                that.popup.open();\n                            }\n                        });\n                    }\n                    e.preventDefault();\n                } else if (key === keys.ESC ) {\n                    if (visible) {\n                        e.preventDefault();\n                        that.close();\n                    } else {\n                        that._clearValue();\n                    }\n                } else if (e.altKey && key === keys.UP && visible) {\n                    e.preventDefault();\n                    that.close();\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        this._move(current ? \"focusPrev\" : \"focusLast\");\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    this._move(\"focusFirst\");\n                } else if (key === keys.END) {\n                    this._move(\"focusLast\");\n                } else if (key === keys.ENTER || key === keys.TAB) {\n\n                    if (key === keys.ENTER && visible) {\n                        e.preventDefault();\n                    }\n\n                    if (visible && current) {\n                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                        if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                            return;\n                        }\n\n                        this._select(current);\n                    }\n\n                    this._blur();\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                } else {\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._search();\n                }\n            },\n\n            _keypress: function() {\n                this._oldText = this.element.val();\n                this._typing = true;\n            },\n\n            _move: function(action) {\n                this.listView[action]();\n\n                if (this.options.suggest && this.listView.focus() == null && action == \"focusNext\") {\n                    this.listView.focus(0);\n                    this.suggest(this.listView._view[0].item);\n                } else if (this.options.suggest && this.listView.focus() == null && action == \"focusPrev\") {\n                    let index = this.listView._view.length - 1;\n                    this.listView.focus(index);\n                    this.suggest(this.listView._view[index].item);\n                } else if (this.options.suggest && (action == \"focusFirst\" || action == \"focusLast\")) {\n                   caret(this.element);\n                } else if (this.options.suggest && this.listView.focus() != null) {\n                    this.suggest(this.listView.focus());\n                }\n            },\n\n            _placeholder: function(show) {\n                if (placeholderSupported) {\n                    return;\n                }\n\n                var that = this,\n                    element = that.element,\n                    placeholder = that.options.placeholder,\n                    value;\n\n                if (placeholder) {\n                    value = element.val();\n\n                    if (show === undefined$1) {\n                        show = !value;\n                    }\n\n                    if (!show) {\n                        if (value !== placeholder) {\n                            placeholder = value;\n                        } else {\n                            placeholder = \"\";\n                        }\n                    }\n\n                    if (value === that._old && !show) {\n                        return;\n                    }\n\n                    element.toggleClass(\"k-readonly\", show)\n                           .val(placeholder);\n\n                    if (!placeholder && element[0] === document.activeElement) {\n                        caret(element[0], 0, 0);\n                    }\n                }\n            },\n\n            _separator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                   return new RegExp(separator.join(\"|\"), 'gi');\n                }\n                return separator;\n            },\n\n            _defaultSeparator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                    return separator[0];\n                }\n                return separator;\n            },\n\n            _inputValue: function() {\n                return this.element.val();\n            },\n\n            _search: function() {\n                var that = this;\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    if (that._prev !== that._accessor()) {\n                        that._prev = that._accessor();\n                        that.search();\n                    }\n                }, that.options.delay);\n            },\n\n            _select: function(candidate) {\n                var that = this;\n                that._active = true;\n\n                return that.listView.select(candidate).done(function() {\n                    that._active = false;\n                });\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this.element);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleCloseVisibility: function() {\n                var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n                if (this.value() && !preventShow) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMelement = element[0],\n                    wrapper;\n\n                wrapper = element.parent();\n\n                if (!wrapper.is(\"span.k-autocomplete\")) {\n                    wrapper = element.wrap(\"<span />\").parent();\n                }\n\n                wrapper.attr(\"tabindex\", -1);\n\n                wrapper[0].style.cssText = DOMelement.style.cssText;\n                element.css({\n                    width: \"\",\n                    height: DOMelement.style.height\n                });\n\n                that._focused = that.element;\n                that.wrapper = wrapper\n                    .addClass(\"k-autocomplete k-input\")\n                    .addClass(DOMelement.className)\n                    .removeClass('input-validation-error');\n            },\n\n            _clearValue: function() {\n                this._clearValueTrigger = false;\n                List.fn._clearValue.call(this);\n                this.element.trigger(\"focus\");\n            }\n        });\n\n        ui.plugin(AutoComplete);\n\n        kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"AutoComplete\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}