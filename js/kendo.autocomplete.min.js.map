{"version":3,"sources":["raw-js/kendo.autocomplete.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendoautocomplete","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","encode","htmlEncode","support","caret","activeElement","_activeElement","placeholderSupported","placeholder","ui","List","keys","DataSource","data","ARIA_DISABLED","ARIA_READONLY","CHANGE","DISABLED","READONLY","FOCUSED","STATEDISABLED","ns","HOVEREVENTS","indexOfWordAtCaret","caretIdx","text","substring","split","length","AutoComplete","extend","init","element","that","Array","isArray","dataSource","fn","call","attr","inputMode","_wrapper","_clearButton","_dataSource","_ignoreCase","type","_popup","addClass","on","_keydown","bind","_keypress","_search","e","_hasActionSheet","readonly","removeAttr","_prev","_accessor","_oldText","_placeholder","ev","filterInput","relatedTarget","_change","close","removeClass","autocomplete","role","inputmode","_clear","_clearValue","_clearValueMouseDownHandler","_enable","_old","_initList","parents","is","enable","listView","preventDefault","_resetFocusItemHandler","_resetFocusItem","_inputValuesContainer","clearButton","notify","_toggleCloseVisibility","_applyCssClasses","label","_label","_aria","name","enabled","suggest","groupTemplate","fixedGroupTemplate","dataTextField","minLength","enforceMinLength","delay","height","filter","ignoreCase","highlightFirst","animation","virtual","value","autoWidth","popup","size","fillMode","rounded","adaptiveTitle","adaptiveTitleSubtitle","currentTarget","classList","contains","_clearValueTrigger","_onActionSheetCreate","_unboundClick","toggle","val","trigger","_onCloseButtonPressed","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_errorHandler","_hideBusy","create","setDataSource","events","setOptions","listOptions","_listOptions","_accessors","skipUpdateOnBind","dataValueField","selectedItemChange","_editable","off","disable","_toggleHover","prop","current","focus","_deactivateItem","destroy","refresh","select","li","_select","search","word","lowerCaseValue","_separator","accentFoldingFiltering","clearTimeout","_typingTimeout","wordAtCaret","_open","_mute","toLocaleLowerCase","toLowerCase","_filterSource","operator","field","one","_unifySeparators","idx","key","_last","currentValue","words","wordIndex","selectionEnd","BACKSPACE","DELETE","view","inArray","ul","_text","indexOf","lastIndexOf","_defaultSeparator","toString","push","lastSeparator","matchAll","source","pop","slice","join","_refreshFloatingLabel","_click","item","dataItem","dataItemByIndex","getElementIndex","_active","done","_blur","_clearText","noop","_highlightFirst","index","scrollTo","_listBound","action","flatView","groupsLength","_group","isActive","_renderFooter","_renderNoData","_toggleNoData","_toggleHeader","_resizePopup","position","_inputValue","_allowOpening","unbind","_touchScroller","reset","callback","_muted","_listChange","_selectValue","selectedDataItems","defaultSeparator","splice","replaceWordAtCaret","_preselect","oldText","setValue","unifyType","valueUpdated","_typing","itemSelected","clearValueTrigger","typing","className","keyCode","visible","DOWN","_move","open","ESC","altKey","UP","HOME","END","ENTER","TAB","PAGEDOWN","PAGEUP","_hovered","direction","scrollWith","screenHeight","_view","show","toggleClass","document","RegExp","setTimeout","candidate","preventShow","_showClear","_hideClear","DOMelement","parent","wrap","style","cssText","css","width","_focused","plugin","cssProperties","registerPrefix","registerValues","values","roundedValues","concat","kendo$1","__meta__","id","category","description","depends","features","Object","defineProperty"],"mappings":"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","file":"kendo.autocomplete.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendoautocomplete = global.kendoautocomplete || {}, global.kendoautocomplete.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"autocomplete\",\n        name: \"AutoComplete\",\n        category: \"web\",\n        description: \"The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.\",\n        depends: [ \"list\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            support = kendo.support,\n            caret = kendo.caret,\n            activeElement = kendo._activeElement,\n            placeholderSupported = support.placeholder,\n            ui = kendo.ui,\n            List = ui.List,\n            keys = kendo.keys,\n            DataSource = kendo.data.DataSource,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            AUTOCOMPLETEVALUE = \"off\",\n            HOVER = \"k-hover\",\n            ns = \".kendoAutoComplete\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns;\n\n        function indexOfWordAtCaret(caretIdx, text, separator) {\n            return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;\n        }\n\n        function wordAtCaret(caretIdx, text, separator) {\n            return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];\n        }\n\n        function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {\n            var words = text.split(separator);\n\n            words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);\n\n            if (separator && words[words.length - 1] !== \"\") {\n                words.push(\"\");\n            }\n\n            return words.join(defaultSeparator);\n        }\n\n        var AutoComplete = List.extend({\n            init: function(element, options) {\n                var that = this, wrapper, disabled;\n\n                that.ns = ns;\n                options = Array.isArray(options) ? { dataSource: options } : options;\n\n                List.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.placeholder = options.placeholder || element.attr(\"placeholder\");\n                options.inputMode = options.inputMode || element.attr(\"inputmode\") || \"text\";\n\n                if (placeholderSupported) {\n                    element.attr(\"placeholder\", options.placeholder);\n                }\n\n                that._wrapper();\n                that._clearButton();\n\n                that._dataSource();\n                that._ignoreCase();\n\n                element[0].type = \"text\";\n                wrapper = that.wrapper;\n\n                that._popup();\n\n                element\n                    .addClass(\"k-input-inner\")\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"keypress\" + ns, that._keypress.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .on(\"focus\" + ns, function(e) {\n                        if (that._hasActionSheet()) {\n                            that.element.attr(\"readonly\", true);\n                        } else if (!that.options.readonly) {\n                            that.element.removeAttr(\"readonly\");\n                        }\n                        that._prev = that._accessor();\n                        that._oldText = that._prev;\n                        that._placeholder(false);\n                        wrapper.addClass(FOCUSED);\n                    })\n                    .on(\"focusout\" + ns, function(ev) {\n                        if (that.filterInput && ev.relatedTarget === that.filterInput[0]) {\n                            return;\n                        }\n\n                        that._change();\n                        that._placeholder();\n                        that.close();\n                        wrapper.removeClass(FOCUSED);\n                    })\n                    .attr({\n                        autocomplete: AUTOCOMPLETEVALUE,\n                        role: \"combobox\",\n                        \"aria-expanded\": false,\n                        inputmode: options.inputMode\n                    });\n\n                that._clear.on(\"click\" + ns + \" touchend\" + ns, that._clearValue.bind(that));\n                that._clear.on(\"mousedown\" + ns, that._clearValueMouseDownHandler.bind(that));\n                that._enable();\n\n                that._old = that._accessor();\n\n                that._placeholder();\n\n                that._initList();\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that.listView.bind(\"click\", function(e) { e.preventDefault(); });\n\n                that._resetFocusItemHandler = that._resetFocusItem.bind(that);\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element });\n\n                kendo.notify(that);\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                that._aria();\n            },\n\n            options: {\n                name: \"AutoComplete\",\n                enabled: true,\n                suggest: false,\n                template: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                dataTextField: \"\",\n                minLength: 1,\n                enforceMinLength: false,\n                delay: 200,\n                height: 200,\n                filter: \"startswith\",\n                ignoreCase: true,\n                highlightFirst: false,\n                separator: null,\n                placeholder: \"\",\n                animation: {},\n                virtual: false,\n                value: null,\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n                adaptiveTitle: null,\n                adaptiveTitleSubtitle: null,\n            },\n\n            _clearValueMouseDownHandler: function(ev) {\n                var that = this;\n\n                if (ev && ev.currentTarget && ev.currentTarget.classList.contains('k-clear-value')) {\n                    that._clearValueTrigger = true;\n                } else {\n                    that._clearValueTrigger = false;\n                }\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                that._unboundClick = true;\n                that.element\n                    .on(\"click\", function() { that.popup.toggle(); });\n\n                if (that.filterInput) {\n                    that.filterInput\n                        .on(\"keydown\" + ns, that._keydown.bind(that))\n                        .on(\"keypress\" + ns, that._keypress.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .attr({\n                            autocomplete: AUTOCOMPLETEVALUE,\n                            role: \"combobox\",\n                            \"aria-expanded\": false\n                        });\n\n                    that.popup.bind(\"activate\", () => {\n                        // that.wrapper.off(\"focusout\");\n                        that.filterInput.val(that.element.val());\n                        that.filterInput.trigger(\"focus\");\n                    });\n                    that.popup.bind(\"deactivate\", () => {\n                        // that.wrapper.on(\"focusout\", function(ev) {\n                        //     if ((that.filterInput && ev.relatedTarget === that.filterInput[0]) || !that.wrapper.hasClass(FOCUSED)) {\n                        //         return;\n                        //     }\n\n                        //     that._change();\n                        //     that._placeholder();\n                        //     that.close();\n                        //     that.wrapper.removeClass(FOCUSED);\n                        // });\n\n                        // that.wrapper.focus();\n                        that.element.trigger(\"focus\");\n                    });\n                }\n            },\n\n            _onCloseButtonPressed: function() {\n                var that = this;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-autocomplete-popup\");\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._errorHandler = that._hideBusy;\n                }\n\n                that.dataSource = DataSource.create(that.options.dataSource)\n                    .bind(\"progress\", that._progressHandler)\n                    .bind(\"error\", that._errorHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n                this._dataSource();\n\n                this.listView.setDataSource(this.dataSource);\n            },\n\n            events: [\n                \"open\",\n                \"close\",\n                CHANGE,\n                \"select\",\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n                this._accessors();\n                this._aria();\n                this._clearButton();\n            },\n\n            _listOptions: function(options) {\n                var listOptions = List.fn._listOptions.call(this, $.extend(options, {\n                    skipUpdateOnBind: true\n                }));\n\n                listOptions.dataValueField = listOptions.dataTextField;\n                listOptions.selectedItemChange = null;\n\n                return listOptions;\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element,\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n\n                    element.prop(DISABLED, false)\n                           .prop(READONLY, false)\n                           .attr(ARIA_DISABLED, false)\n                           .attr(ARIA_READONLY, false);\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            close: function() {\n                var that = this;\n                var current = that.listView.focus();\n\n                if (current) {\n                    current.removeClass(SELECTED);\n                }\n\n                that.popup.close();\n                that._deactivateItem();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(ns);\n                that._clear.off(ns);\n                that.wrapper.off(ns);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                List.fn.destroy.call(that);\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            select: function(li) {\n                this._select(li);\n            },\n\n            search: function(word) {\n                let that = this,\n                options = that.options,\n                ignoreCase = options.ignoreCase,\n                separator = that._separator(),\n                length,\n                lowerCaseValue,\n                accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering,\n                element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput : that.element;\n\n                word = word || that._accessor();\n\n                clearTimeout(that._typingTimeout);\n\n                if (separator) {\n                    word = wordAtCaret(caret(element)[0], word, separator);\n                }\n\n                length = word.length;\n\n                if ((!options.enforceMinLength && !length) || length >= options.minLength) {\n                    that._open = true;\n\n                    that._mute(function() {\n                        this.listView.value([]);\n                    });\n\n                    lowerCaseValue = accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase();\n\n                    that._filterSource({\n                        value: ignoreCase ? lowerCaseValue : word,\n                        operator: options.filter,\n                        field: options.dataTextField,\n                        ignoreCase: ignoreCase\n                    });\n\n                    that.one(\"close\", that._unifySeparators.bind(that));\n                }\n                that._toggleCloseVisibility();\n            },\n\n            suggest: function(word) {\n                var that = this,\n                    key = that._last,\n                    value = that._accessor(),\n                    currentValue = that.value(),\n                    element = that.element[0],\n                    caretIdx = caret(element)[0],\n                    separator = that._separator(),\n                    words = value.split(separator),\n                    wordIndex = indexOfWordAtCaret(caretIdx, value, separator),\n                    selectionEnd = caretIdx,\n                    idx,\n                    accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n                if (key == keys.BACKSPACE || key == keys.DELETE) {\n                    that._last = undefined$1;\n                    return;\n                }\n\n                word = word || \"\";\n\n                if (typeof word !== \"string\") {\n                    if (word[0]) {\n                        word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n                    }\n\n                    word = word ? that._text(word) : \"\";\n                }\n\n                if (caretIdx <= 0) {\n                    caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n                }\n\n                idx = value.substring(0, caretIdx).lastIndexOf(that._defaultSeparator());\n                idx = idx > -1 ? caretIdx - (idx + that._defaultSeparator().length) : caretIdx;\n                value = words[wordIndex].substring(0, idx);\n\n                if (word) {\n                    word = word.toString();\n                    idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n                    if (idx > -1) {\n                        word = word.substring(idx + value.length);\n\n                        selectionEnd = caretIdx + word.length;\n\n                        value += word;\n                    }\n\n                    if (separator && words[words.length - 1] !== \"\") {\n                        words.push(\"\");\n                    }\n\n                }\n\n                words[wordIndex] = value;\n\n                if (typeof that.options.separator == 'object' && that.options.separator != null) {\n                    if (currentValue.length > 1) {\n                        let lastSeparator = [...currentValue.matchAll(separator.source)].pop();\n                        if (lastSeparator) {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\") + lastSeparator + words[words.length - 1]);\n                        } else {\n                            that._accessor(words.slice(0, -1).join(that._defaultSeparator() || \"\"));\n                        }\n                    } else {\n                      that._accessor(words.join(this._defaultSeparator() || \"\"));\n                    }\n                } else {\n                    that._accessor(words.join(separator || \"\"));\n                }\n\n                if (element === activeElement()) {\n                    caret(element, caretIdx, selectionEnd);\n                }\n            },\n\n            value: function(value) {\n                if (value !== undefined$1) {\n                    this.listView.value(value);\n\n                    this._accessor(value);\n                    this._old = this._accessor();\n                    this._oldText = this._accessor();\n                } else {\n                    return this._accessor();\n                }\n                this._toggleCloseVisibility();\n                this._refreshFloatingLabel();\n            },\n\n            _click: function(e) {\n                var item = e.item;\n                var that = this;\n                var element = that.element;\n                var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n\n                e.preventDefault();\n\n                that._active = true;\n\n                if (that.trigger(\"select\", { dataItem: dataItem, item: item })) {\n                    that.close();\n                    return;\n                }\n                that._oldText = element.val();\n                that._select(item).done(function() {\n                    that._blur();\n\n                    caret(element, element.val().length);\n                });\n            },\n\n            _clearText: $.noop,\n\n            _highlightFirst: function() {\n                var index = this.options.highlightFirst ? 0 : -1;\n\n                this.listView.focus(index);\n            },\n\n            _resetFocusItem: function() {\n                if (this.options.virtual) {\n                    this.listView.scrollTo(0);\n                }\n\n                this._highlightFirst();\n            },\n\n            _listBound: function() {\n                var that = this;\n                var popup = that.popup;\n                var options = that.options;\n                var data = that.dataSource.flatView();\n                var length = data.length;\n                var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n                var isActive = that.element[0] === activeElement() || that.filterInput && that.filterInput[0] === activeElement();\n                var action;\n\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!length);\n                that._toggleHeader(!!groupsLength && !!length);\n\n                that._resizePopup();\n\n                popup.position();\n\n                if (length) {\n                    if (options.suggest && isActive && that._inputValue()) {\n                        that.suggest(data[0]);\n                    }\n\n                    that._highlightFirst();\n                }\n\n                if (that._open) {\n                    that._open = false;\n                    action = that._allowOpening() ? \"open\" : \"close\";\n\n                    if (that._typingTimeout && !isActive) {\n                        action = \"close\";\n                    }\n\n                    if (length) {\n                        that._resetFocusItem();\n\n                        if (options.virtual) {\n                            that.popup\n                                .unbind(\"activate\", that._resetFocusItemHandler)\n                                .one(\"activate\", that._resetFocusItemHandler);\n                        }\n                    }\n\n                    popup[action]();\n                    that._typingTimeout = undefined$1;\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _mute: function(callback) {\n                this._muted = true;\n                callback.call(this);\n                this._muted = false;\n            },\n\n            _listChange: function() {\n                var isActive = this._active || this.element[0] === activeElement();\n\n                if (isActive && !this._muted) {\n                    this._selectValue(this.listView.selectedDataItems()[0]);\n                }\n            },\n\n            _selectValue: function(dataItem) {\n                var separator = this._separator();\n                var text = \"\";\n\n                if (dataItem) {\n                    text = this._text(dataItem);\n                }\n\n                if (text === null) {\n                    text = \"\";\n                }\n\n                if (separator) {\n                    text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());\n                }\n\n                this._prev = text;\n                this._accessor(text);\n                this._placeholder();\n            },\n\n            _unifySeparators: function() {\n                this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));\n                return this;\n            },\n\n            _preselect: function(value, text) {\n                this._inputValue(text);\n                this._accessor(value);\n\n                this._old = this.oldText = this._accessor();\n\n                this.listView.setValue(value);\n                this._placeholder();\n            },\n\n            _change: function() {\n                var that = this;\n                var value = that._unifySeparators().value();\n                var trigger = value !== List.unifyType(that._old, typeof value);\n\n                var valueUpdated = trigger && !that._typing;\n                var itemSelected = that._oldText !== value;\n                var clearValueTrigger = that._clearValueTrigger;\n\n                that._old = value;\n                that._oldText = value;\n\n                if (that.filterInput && activeElement() === that.filterInput[0]) {\n                    that.element.val(that.filterInput.val());\n                }\n\n                if ((valueUpdated || itemSelected) && !clearValueTrigger) {\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n\n                if (trigger && !clearValueTrigger) {\n                    that.trigger(CHANGE);\n                }\n\n                that.typing = false;\n                that._toggleCloseVisibility();\n            },\n\n            _accessor: function(value) {\n                var that = this,\n                    element = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput[0] : that.element[0];\n\n                if (value !== undefined$1) {\n                    element.value = value === null ? \"\" : value;\n                    that._placeholder();\n                } else {\n                    value = element.value;\n\n                    if (element.className.indexOf(\"k-readonly\") > -1) {\n                        if (value === that.options.placeholder) {\n                            return \"\";\n                        } else {\n                            return value;\n                        }\n                    }\n\n                    return value;\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var listView = that.listView;\n                var visible = that.popup.visible();\n                var current = listView.focus();\n\n                that._last = key;\n\n                if (key === keys.DOWN) {\n                    if (visible) {\n                        this._move(current ? \"focusNext\" : \"focusFirst\");\n                    } else if (that.value()) {\n                        that._filterSource({\n                            value: that.ignoreCase ? that.value().toLowerCase() : that.value(),\n                            operator: that.options.filter,\n                            field: that.options.dataTextField,\n                            ignoreCase: that.ignoreCase\n                        }).done(function() {\n                            if (that._allowOpening()) {\n                                that._resetFocusItem();\n                                that.popup.open();\n                            }\n                        });\n                    }\n                    e.preventDefault();\n                } else if (key === keys.ESC ) {\n                    if (visible) {\n                        e.preventDefault();\n                        that.close();\n                    } else {\n                        that._clearValue();\n                    }\n                } else if (e.altKey && key === keys.UP && visible) {\n                    e.preventDefault();\n                    that.close();\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        this._move(current ? \"focusPrev\" : \"focusLast\");\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    this._move(\"focusFirst\");\n                } else if (key === keys.END) {\n                    this._move(\"focusLast\");\n                } else if (key === keys.ENTER || key === keys.TAB) {\n\n                    if (key === keys.ENTER && visible) {\n                        e.preventDefault();\n                    }\n\n                    if (visible && current) {\n                        var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                        if (that.trigger(\"select\", { dataItem: dataItem, item: current })) {\n                            return;\n                        }\n\n                        this._select(current);\n                    }\n\n                    this._blur();\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                } else {\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._search();\n                }\n            },\n\n            _keypress: function() {\n                this._oldText = this.element.val();\n                this._typing = true;\n            },\n\n            _move: function(action) {\n                this.listView[action]();\n\n                if (this.options.suggest && this.listView.focus() == null && action == \"focusNext\") {\n                    this.listView.focus(0);\n                    this.suggest(this.listView._view[0].item);\n                } else if (this.options.suggest && this.listView.focus() == null && action == \"focusPrev\") {\n                    let index = this.listView._view.length - 1;\n                    this.listView.focus(index);\n                    this.suggest(this.listView._view[index].item);\n                } else if (this.options.suggest && (action == \"focusFirst\" || action == \"focusLast\")) {\n                   caret(this.element);\n                } else if (this.options.suggest && this.listView.focus() != null) {\n                    this.suggest(this.listView.focus());\n                }\n            },\n\n            _placeholder: function(show) {\n                if (placeholderSupported) {\n                    return;\n                }\n\n                var that = this,\n                    element = that.element,\n                    placeholder = that.options.placeholder,\n                    value;\n\n                if (placeholder) {\n                    value = element.val();\n\n                    if (show === undefined$1) {\n                        show = !value;\n                    }\n\n                    if (!show) {\n                        if (value !== placeholder) {\n                            placeholder = value;\n                        } else {\n                            placeholder = \"\";\n                        }\n                    }\n\n                    if (value === that._old && !show) {\n                        return;\n                    }\n\n                    element.toggleClass(\"k-readonly\", show)\n                           .val(placeholder);\n\n                    if (!placeholder && element[0] === document.activeElement) {\n                        caret(element[0], 0, 0);\n                    }\n                }\n            },\n\n            _separator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                   return new RegExp(separator.join(\"|\"), 'gi');\n                }\n                return separator;\n            },\n\n            _defaultSeparator: function() {\n                var separator = this.options.separator;\n                if (separator instanceof Array) {\n                    return separator[0];\n                }\n                return separator;\n            },\n\n            _inputValue: function() {\n                return this.element.val();\n            },\n\n            _search: function() {\n                var that = this;\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    if (that._prev !== that._accessor()) {\n                        that._prev = that._accessor();\n                        that.search();\n                    }\n                }, that.options.delay);\n            },\n\n            _select: function(candidate) {\n                var that = this;\n                that._active = true;\n\n                return that.listView.select(candidate).done(function() {\n                    that._active = false;\n                });\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this.element);\n                }\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _toggleCloseVisibility: function() {\n                var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n                if (this.value() && !preventShow) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    DOMelement = element[0],\n                    wrapper;\n\n                wrapper = element.parent();\n\n                if (!wrapper.is(\"span.k-autocomplete\")) {\n                    wrapper = element.wrap(\"<span />\").parent();\n                }\n\n                wrapper.attr(\"tabindex\", -1);\n\n                wrapper[0].style.cssText = DOMelement.style.cssText;\n                element.css({\n                    width: \"\",\n                    height: DOMelement.style.height\n                });\n\n                that._focused = that.element;\n                that.wrapper = wrapper\n                    .addClass(\"k-autocomplete k-input\")\n                    .addClass(DOMelement.className)\n                    .removeClass('input-validation-error');\n            },\n\n            _clearValue: function() {\n                this._clearValueTrigger = false;\n                List.fn._clearValue.call(this);\n                this.element.trigger(\"focus\");\n            }\n        });\n\n        ui.plugin(AutoComplete);\n\n        kendo.cssProperties.registerPrefix(\"AutoComplete\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"AutoComplete\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}