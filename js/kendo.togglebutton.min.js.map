{"version":3,"sources":["raw-js/kendo.togglebutton.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendotogglebutton","js","this","$","undefined$1","kendo","window","Button","ui","CLICK","TOGGLE","ARIA_PRESSED","SELECTED","ToggleButton","extend","init","element","options","that","fn","call","wrapper","_selected","selected","toggle","group","attr","notify","destroy","off","events","name","toggleIcon","applySelectedState","applyToggleIcon","addClass","_updateIcon","removeClass","icon","iconElement","find","length","_click","e","enable","trigger","event","id","target","preventDefault","checked","cssProperties","registerPrefix","registerValues","prop","values","fillModeValues","concat","roundedValues","plugin","jQuery","kendo$1","__meta__","category","description","depends","Object","defineProperty","value"],"mappings":"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","file":"kendo.togglebutton.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendotogglebutton = global.kendotogglebutton || {}, global.kendotogglebutton.js = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n            id: \"togglebutton\",\n            name: \"ToggleButton\",\n            category: \"web\",\n            description: \"The ToggleButton widget displays styled buttons with selected state.\",\n            depends: [\"core\", \"button\"]\n        };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Button = kendo.ui.Button,\n                CLICK = \"click\",\n                TOGGLE = \"toggle\",\n                NS = \".kendoToggleButton\",\n                ARIA_PRESSED = \"aria-pressed\",\n                SELECTED = \"k-selected\",\n                DATA_GROUP = \"data-group\",\n                ID = \"id\";\n\n            var ToggleButton = Button.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Button.fn.init.call(that, element, options);\n\n                    element = that.wrapper = that.element;\n                    options = that.options;\n\n\n                    that._selected = options.selected === true ? true : false;\n                    that.toggle(that._selected);\n\n                    if (options.group) {\n                        element.attr(DATA_GROUP, options.group);\n                    }\n\n                    kendo.notify(that);\n                },\n\n                destroy: function() {\n                    var that = this;\n\n                    that.wrapper.off(NS);\n                    Button.fn.destroy.call(that);\n                },\n\n                events: [\n                    CLICK,\n                    TOGGLE\n                ],\n\n                options: {\n                    name: \"ToggleButton\",\n                    group: undefined$1,\n                    selected: false,\n                    toggleIcon: '',\n                    applySelectedState: true,\n                    applyToggleIcon: false,\n                },\n\n                toggle: function(toggle) {\n                    let that = this;\n                    if (toggle === undefined$1) {\n                        toggle = !this._selected;\n                    }\n\n                    this._selected = toggle;\n\n                    if (toggle === true) {\n                        this.element.attr(ARIA_PRESSED, true);\n                        if (this.options.applySelectedState) {\n                            this.element.addClass(SELECTED);\n                        }\n\n                        if (this.options.applyToggleIcon && this.options.toggleIcon) {\n                            that._updateIcon(that.options.toggleIcon);\n                        }\n\n                    } else if (toggle === false) {\n                        this.element.attr(ARIA_PRESSED, false);\n\n                        if (this.options.applySelectedState) {\n                            this.element.removeClass(SELECTED);\n                        }\n\n                        if (this.options.applyToggleIcon) {\n                            that._updateIcon(that.options.icon);\n                        }\n                    }\n                },\n\n                _updateIcon: function(icon) {\n                    let that = this;\n                    let iconElement = that.element.find(\".k-icon, .k-svg-icon\");\n\n                    if (iconElement.length) {\n                        kendo.ui.icon(iconElement, { icon: icon });\n                    }\n                },\n\n                _click: function(e) {\n                    if (this.options.enable) {\n                        if (this.trigger(CLICK, {\n                            event: e,\n                            id: this.element.attr(ID),\n                            target: this.element\n                        })) {\n                            e.preventDefault();\n                        } else {\n                            this.toggle();\n\n                            this.trigger(TOGGLE, {\n                                event: e,\n                                checked: this._selected,\n                                group: this.options.group,\n                                id: this.element.attr(ID),\n                                target: this.element\n                            });\n                        }\n                    }\n                }\n            });\n\n            kendo.cssProperties.registerPrefix(\"ToggleButton\", \"k-button-\");\n\n            kendo.cssProperties.registerValues(\"ToggleButton\", [{\n                prop: \"fillMode\",\n                values: kendo.cssProperties.fillModeValues.concat([\"link\"])\n            }, {\n                prop: \"rounded\",\n                values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n            }]);\n\n            kendo.ui.plugin(ToggleButton);\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}