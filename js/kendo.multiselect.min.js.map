{"version":3,"sources":["raw-js/kendo.multiselect.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendomultiselect","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","_isInInlineAIPrompt","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","ui","List","encode","htmlEncode","keys","extend","A","activeElement","_activeElement","ObservableArray","data","ID","CHIP","ACCEPT","FILTER","REBIND","OPEN","CLOSE","CHANGE","SELECT","DESELECT","ARIA_DISABLED","ARIA_READONLY","ARIA_EXPANDED","ARIA_HIDDEN","ARIA_ACTIVEDESCENDANT","FOCUSEDCLASS","SELECTEDCLASS","HOVERCLASS","STATEDISABLED","NOCLICKCLASS","DISABLED","READONLY","ns","CLICK","KEYDOWN","MOUSEENTER","MOUSELEAVE","HOVEREVENTS","quotRegExp","isArray","Array","styles","MultiSelect","init","element","id","that","fn","call","_optionsMap","_customOptions","inputMode","attr","isPresent","readonly","_wrapper","_inputValuesContainer","_tagList","_input","_textContainer","_clearButton","_arrowButton","_tabindex","input","hide","placeholder","guid","_tagID","tagList","_initialOpen","label","_label","_aria","_dataSource","_ignoreCase","_popup","_tagTemplate","requireValueMapper","_initList","_reset","_enable","_placeholder","autoBind","dataSource","fetch","value","_preselect","parents","is","enable","_toggleCloseVisibility","_applyCssClasses","clearButton","_clear","find","floatingLabel","refresh","notify","name","tagMode","enabled","autoClose","highlightFirst","dataTextField","dataValueField","filter","ignoreCase","minLength","messages","singleTag","clear","deleteTag","noData","downArrow","enforceMinLength","delay","maxSelectedItems","height","animation","virtual","itemTemplate","tagTemplate","groupTemplate","fixedGroupTemplate","autoWidth","popup","size","fillMode","rounded","adaptiveTitle","adaptiveSubtitle","events","setDataSource","_state","persistTagList","listView","setOptions","listOptions","_listOptions","_accessors","currentTag","candidate","_currentTag","removeClass","removeAttr","addClass","dataItems","selectedDataItems","destroy","clearTimeout","_busy","_typingTimeout","filterInput","off","_onActionSheetCreate","on","_keydown","bind","_search","role","val","trigger","ul","autocomplete","tagListId","_ariaLabel","_focused","_updateSelectedVirtualDataItemsIndexes","selectedIndexes","_selectedIndexes","selectedItems","_selectedDataItems","customOptions","optionsMap","forEach","_","index","field","dataItem","newIdx","_activateItem","visible","selectedItemChange","_selectedItemChange","selectable","getter","_setListValue","_initialValues","slice","_listChange","e","flatView","valueGetter","_value","i","added","length","_render","_selectValue","removed","items","context","idx","eq","first","tagTextTemplate","item","_wrapperMousedown","notInput","target","nodeName","toLowerCase","closeButton","closest","removeButton","support","mobileOS","cancelable","preventDefault","toggle","open","_inputFocus","_hasActionSheet","_inputFocusout","relatedTarget","close","skipUpdate","bound","isFiltered","_clearFilter","_removeTag","tag","shouldTrigger","state","position","customIndex","listViewChildren","option","_close","done","_change","_refreshTagListAria","select","selected","removeAt","_removedAddedIndexes","splice","classList","remove","_updateTagListHTML","_tagListClick","stopPropagation","currentTarget","_clearValue","_clearSingleTagValue","each","focus","_hideClear","tags","_focusHandler","active","_editable","disable","toggleClass","prop","_toggleHover","_filterSource","force","_retrieveData","_activeItem","filterValue","listViewFilter","listViewFilterValue","filters","toString","_request","_open","_focusItem","_allowOpening","isPlainObject","_hovered","altTarget","add","_floatCheck","_listBound","_renderFooter","_renderNoData","_toggleNoData","_resizePopup","_updateItemFocus","mapValueTo","_touchScroller","reset","_hideBusy","skip","isFirstPage","focusFirst","_inputValue","inputValue","oldValue","clearFilters","_normalizeValues","_old","_valueBeforeCascade","_fetchData","ObservableObject","_setOption","hasItems","view","_fetch","read","_isBound","fields","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_endRequestHandler","_errorHandler","DataSource","create","formId","form","_resetHandler","setTimeout","_form","_initValue","map","a","b","compare","_click","_select","_getActiveItem","_getSelectedIndices","_selectedIndices","key","keyCode","hasValue","isRtl","dir","activeItemIdx","handled","ENTER","_multipleSelection","DOWN","shiftKey","getElementIndex","focusNext","_selectRange","focusLast","UP","focusPrev","LEFT","RIGHT","prev","last","next","ctrlKey","altKey","hasClass","SPACEBAR","activeIndex","currentIndex","ESC","HOME","END","DELETE","BACKSPACE","PAGEDOWN","PAGEUP","direction","scrollWith","screenHeight","show","skipCaret","isActive","caretPos","_prev","caret","_option","dataValue","dataText","indexOf","replace","values","selectedIndex","_buildSelectedItems","custom","_selectedItemIndex","_text","valueField","textField","result","push","noDelay","_performSearch","search","_showClear","_allowSelection","max","updatePersistTagList","total","removedItem","addedItem","removeChild","append","applyStylesFromKendoAttributes","_maxTotal","_refreshFloatingLabel","renderChipList","maxTotal","currentTotal","resolved","Deferred","resolve","dataItemByIndex","isSelected","_selectIndices","indices","startIndex","endIndex","indicesToSelect","accessKey","title","inputValuesContainer","hasDataSource","isMultiple","defaultTemplate","renderChip","themeColor","text","unselectable","removable","removableAttr","iconAttr","arrowTitle","arrow","renderButton","_arrow","tabIndex","computedStyles","getComputedStyles","visibility","top","left","_span","css","parent","wrap","style","cssText","className","_closeHandler","_openHandler","_adjustListWidth","plugin","cssProperties","registerPrefix","registerValues","roundedValues","concat","kendo$1","__meta__","category","description","depends","features","Object","defineProperty"],"mappings":"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","file":"kendo.multiselect.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.html.chip.js'), require('kendo.html.chiplist.js'), require('kendo.html.button.js'), require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.html.chip', 'kendo.html.chiplist', 'kendo.html.button', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendomultiselect = global.kendomultiselect || {}, global.kendomultiselect.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                if (options._isInInlineAIPrompt) {\n                    containerOrientation = layoutFlow || \"horizontal\";\n                }\n\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"multiselect\",\n        name: \"MultiSelect\",\n        category: \"web\",\n        description: \"The MultiSelect widget allows the selection from pre-defined values.\",\n        depends: [ \"list\", \"html.chip\", \"html.chiplist\", \"html.button\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            List = ui.List,\n            encode = kendo.htmlEncode,\n            html = kendo.html,\n            keys = $.extend({ A: 65 }, kendo.keys),\n            activeElement = kendo._activeElement,\n            ObservableArray = kendo.data.ObservableArray,\n            ID = \"id\",\n            CHIP = \".k-chip\",\n            ACCEPT = \"accept\",\n            FILTER = \"filter\",\n            REBIND = \"rebind\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            SELECT = \"select\",\n            DESELECT = \"deselect\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_BUSY = \"aria-busy\",\n            FOCUSEDCLASS = \"k-focus\",\n            SELECTEDCLASS = \"k-selected\",\n            HIDDENCLASS = \"k-hidden\",\n            HOVERCLASS = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            NOCLICKCLASS = \"k-no-click\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            AUTOCOMPLETEVALUE = \"off\",\n            ns = \".kendoMultiSelect\",\n            CLICK = \"click\" + ns,\n            KEYDOWN = \"keydown\" + ns,\n            MOUSEENTER = \"mouseenter\" + ns,\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = MOUSEENTER + \" \" + MOUSELEAVE,\n            quotRegExp = /\"/g,\n            isArray = Array.isArray,\n            styles = [\"font-family\",\n                      \"font-size\",\n                      \"font-stretch\",\n                      \"font-style\",\n                      \"font-weight\",\n                      \"letter-spacing\",\n                      \"text-transform\",\n                      \"line-height\"];\n\n        var MultiSelect = List.extend({\n            init: function(element, options) {\n                var that = this, id, disabled;\n\n                that.ns = ns;\n                List.fn.init.call(that, element, options);\n\n                that._optionsMap = {};\n                that._customOptions = {};\n                that.options.inputMode = that.options.inputMode || that.element.attr(\"inputmode\") || \"text\";\n\n                if (!kendo.isPresent(that.options.readonly) && that.element.attr(\"readonly\")) {\n                     that.options.readonly = true;\n                }\n                else if (!kendo.isPresent(that.options.readonly)) {\n                     that.options.readonly = false;\n                }\n\n                that._wrapper();\n                that._inputValuesContainer();\n                that._tagList();\n                that._input();\n                that._textContainer();\n                that._clearButton();\n                that._arrowButton();\n\n                that._tabindex(that.input);\n\n                element = that.element.attr(\"multiple\", \"multiple\").hide();\n                options = that.options;\n\n                if (!options.placeholder) {\n                    options.placeholder = element.data(\"placeholder\");\n                }\n\n                id = element.attr(ID);\n\n                if (!id) {\n                    id = kendo.guid();\n                }\n\n                if (id) {\n                    that._tagID = id + \"_tag_active\";\n                    id = id + \"_taglist\";\n                    that.tagList.attr(ID, id);\n                }\n\n                that._initialOpen = true;\n\n                if (options.label) {\n                    this._label();\n                }\n\n                that._aria();\n\n                that._dataSource();\n                that._ignoreCase();\n                that._popup();\n\n                that._tagTemplate();\n                that.requireValueMapper(that.options);\n                that._initList();\n\n                that._reset();\n                that._enable();\n                that._placeholder();\n\n                if (options.autoBind) {\n                    that.dataSource.fetch();\n                } else if (options.value) {\n                    that._preselect(options.value);\n                }\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element.find(\"k-input-values\") });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MultiSelect\",\n                tagMode: \"multiple\",\n                enabled: true,\n                autoBind: true,\n                autoClose: true,\n                readonly: null,\n                highlightFirst: true,\n                dataTextField: \"\",\n                dataValueField: \"\",\n                filter: \"startswith\",\n                ignoreCase: true,\n                minLength: 1,\n                messages: {\n                    \"singleTag\": \"item(s) selected\",\n                    \"clear\": \"clear\",\n                    \"deleteTag\": \"delete\",\n                    \"noData\": \"No data found.\",\n                    \"downArrow\": \"select\"\n                },\n                enforceMinLength: false,\n                delay: 100,\n                downArrow: false,\n                value: null,\n                maxSelectedItems: null,\n                placeholder: \"\",\n                height: 200,\n                animation: {},\n                virtual: false,\n                itemTemplate: \"\",\n                tagTemplate: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n                adaptiveTitle: null,\n                adaptiveSubtitle: null,\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE,\n                SELECT,\n                DESELECT,\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._state = \"\";\n                this._dataSource();\n\n                this.persistTagList = false;\n                this.listView.setDataSource(this.dataSource);\n\n                if (this.options.autoBind) {\n                    this.dataSource.fetch();\n                }\n            },\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n\n\n                this._accessors();\n                this._aria();\n                this._tagTemplate();\n                this._placeholder();\n                this._clearButton();\n                this._arrowButton();\n            },\n\n            currentTag: function(candidate) {\n                var that = this;\n\n                if (candidate !== undefined$1) {\n                    if (that._currentTag) {\n                        that._currentTag\n                            .removeClass(FOCUSEDCLASS)\n                            .removeAttr(ID);\n\n                        that._currentTag.find(\".k-chip-action\").attr(ARIA_HIDDEN, true);\n\n                        that.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n                    }\n\n                    if (candidate) {\n                        candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n\n                        candidate.find(\".k-chip-action\").removeAttr(ARIA_HIDDEN);\n\n                        that.input.attr(ARIA_ACTIVEDESCENDANT, that._tagID);\n                    }\n\n                    that._currentTag = candidate;\n                } else {\n                    return that._currentTag;\n                }\n            },\n\n            dataItems: function() {\n                return this.listView.selectedDataItems();\n            },\n\n            destroy: function() {\n                var that = this,\n                    ns = that.ns;\n\n                clearTimeout(that._busy);\n                clearTimeout(that._typingTimeout);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                that.wrapper.off(ns);\n                that.tagList.off(ns);\n                that.input.off(ns);\n                that._clear.off(ns);\n\n                List.fn.destroy.call(that);\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                that.filterInput\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .attr({\n                        \"role\": \"combobox\",\n                        \"aria-expanded\": false,\n                        \"aria-controls\": that.input.attr(\"aria-controls\"),\n                        \"aria-autocomplete\": that.input.attr(\"aria-autocomplete\"),\n                        \"aria-describedby\": that.input.attr(\"aria-describedby\"),\n                        \"placeholder\": that.options.placeholder,\n                    });\n\n                that.popup.bind(\"activate\", () => {\n                    that.filterInput.val(that.input.val());\n                    that.filterInput.trigger(\"focus\");\n                });\n\n                that.popup.bind(\"deactivate\", () => {\n                    that.input.trigger(\"focus\");\n                });\n            },\n\n            _aria: function() {\n                var that = this,\n                    id = that.ul[0].id,\n                    autocomplete = this.options.filter === \"none\" ? \"none\" : \"list\",\n                    tagListId = that.tagList.attr(ID);\n\n                that.input.attr({\n                    \"role\": \"combobox\",\n                    \"aria-expanded\": false,\n                    \"aria-controls\": id,\n                    \"aria-autocomplete\": autocomplete,\n                    \"aria-describedby\": tagListId\n                });\n\n                that._ariaLabel(that._focused);\n            },\n\n             _updateSelectedVirtualDataItemsIndexes: function() {\n                const that = this;\n                const listView = that.listView;\n                const selectedIndexes = listView?._selectedIndexes;\n                const selectedItems = listView?._selectedDataItems;\n                const customOptions = that?._customOptions || {};\n                const optionsMap = that._optionsMap || {};\n\n                if (selectedIndexes && selectedItems) {\n                    selectedIndexes.forEach((_, index) => {\n                        const field = that.options.dataValueField;\n                        const dataItem = selectedItems[index];\n                        const newIdx = optionsMap[dataItem[field]];\n                        customOptions[dataItem[field]] = newIdx !== undefined$1 ? newIdx : customOptions[dataItem[field]];\n                    });\n                }\n            },\n\n            _activateItem: function() {\n                if (this.popup.visible()) {\n                    List.fn._activateItem.call(this);\n                }\n                this.currentTag(null);\n            },\n\n            _listOptions: function(options) {\n                var that = this;\n                var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n                    selectedItemChange: that._selectedItemChange.bind(that),\n                    selectable: \"multiple\"\n                }));\n\n                var itemTemplate = this.options.itemTemplate || this.options.template;\n                var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n                if (!template) {\n                    template = data => encode(kendo.getter(listOptions.dataTextField)(data));\n                }\n\n                listOptions.template = template;\n\n                return listOptions;\n            },\n\n            _setListValue: function() {\n                List.fn._setListValue.call(this, this._initialValues.slice(0));\n            },\n\n            _listChange: function(e) {\n                var data = this.dataSource.flatView();\n                var optionsMap = this._optionsMap;\n                var valueGetter = this._value;\n\n                if (this._state === REBIND) {\n                    this._state = \"\";\n                }\n\n                for (var i = 0; i < e.added.length; i++) {\n                    if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined$1) {\n                        this._render(data); //render select element <option> tags if the item does not persist in the current data view\n                        break;\n                    }\n                }\n\n                this._selectValue(e.added, e.removed);\n            },\n\n            _selectedItemChange: function(e) {\n                var items = e.items;\n                var context;\n                var idx;\n\n                for (idx = 0; idx < items.length; idx++) {\n                    context = items[idx];\n                    this.tagList.children(CHIP).eq(context.index).children(\"span\").first().html(this.tagTextTemplate(context.item));\n                }\n            },\n\n            _wrapperMousedown: function(e) {\n                var that = this;\n                var notInput = e.target.nodeName.toLowerCase() !== \"input\";\n                var target = $(e.target);\n                var closeButton = target.closest(\".k-input-button, .k-chip\").children(\"[class*='-i-caret-alt-down']\")[0];\n                var removeButton = target.closest(\"[class*='-i-x']\")[0];\n\n                if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {\n                    e.preventDefault();\n                }\n\n                if (!removeButton) {\n                    if (closeButton && that.popup.visible()) {\n                        that.toggle(false);\n                    } else {\n                        if (that.input[0] !== activeElement() && notInput) {\n                            that.input.trigger(\"focus\");\n                        }\n\n                        if (that.options.minLength === 1 && !that.popup.visible()) {\n                            that.open();\n                        }\n                    }\n                }\n\n            },\n\n            _inputFocus: function() {\n                const that = this;\n                if (that._hasActionSheet()) {\n                    that.input.attr(\"readonly\", true);\n                } else if (!that.options.readonly) {\n                    that.input.removeAttr(\"readonly\");\n                }\n                that._placeholder(false, true);\n                that.wrapper.addClass(FOCUSEDCLASS);\n            },\n\n            _inputFocusout: function(e) {\n                var that = this;\n\n                if (that.filterInput && e.relatedTarget === that.filterInput[0]) {\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that.wrapper.removeClass(FOCUSEDCLASS);\n                that.tagList.children(CHIP).removeClass(FOCUSEDCLASS);\n\n                that._placeholder(!that.listView.selectedDataItems()[0], true);\n                that.close();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                    that.listView.skipUpdate(true);\n                }\n\n                if (that.listView.bound() && that.listView.isFiltered()) {\n                    that.persistTagList = true;\n                    that._clearFilter();\n                }\n\n                that.element.trigger(\"blur\");\n            },\n\n            _removeTag: function(tag, shouldTrigger) {\n                var that = this;\n                var state = that._state;\n                var position = tag.index();\n                var listView = that.listView;\n                var value = listView.value()[position];\n                var dataItem = that.listView.selectedDataItems()[position];\n                var customIndex = that._customOptions[value];\n                var listViewChildren = listView.element[0].children;\n                var option;\n                var listViewChild;\n\n                if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {\n                    that._close();\n                    return;\n                }\n\n                if (customIndex === undefined$1 && (state === ACCEPT || state === FILTER)) {\n                    customIndex = that._optionsMap[value];\n                }\n\n                var done = function() {\n                    that.currentTag(null);\n                    if (shouldTrigger) {\n                        that._change();\n                    }\n\n                    that._refreshTagListAria();\n                    that._close();\n                };\n\n                if (customIndex === undefined$1 && listView.select().length) {\n                    that.persistTagList = false;\n                    listView.select(listView.select()[position]).done(done);\n                } else {\n                    option = that.element[0].children[customIndex];\n                    if (option) {\n                        option.selected = false;\n                    }\n\n                    listView.removeAt(position);\n\n                    if (listView._removedAddedIndexes) {\n                        listView._removedAddedIndexes.splice(position, 1);\n                    }\n\n                    listViewChild = listViewChildren[customIndex];\n                    if (listViewChild) {\n                        listViewChildren[customIndex].classList.remove(\"k-selected\");\n                    }\n                    if (that.options.tagMode !== \"single\") {\n                        tag.remove();\n                    } else {\n                        that._updateTagListHTML();\n                    }\n                    done();\n                }\n            },\n\n            _tagListClick: function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var target = $(e.currentTarget);\n\n                if (target.is(\"[class*='-i-x-circle']\")) {\n                    this._removeTag(target.closest(CHIP), true);\n                }\n            },\n\n            _clearValue: function() {\n                var that = this;\n\n                if (that.options.tagMode === \"single\") {\n                    that._clearSingleTagValue();\n                } else {\n                    that.tagList.children(CHIP).each(function(index, tag) {\n                        that._removeTag($(tag), false);\n                    });\n                }\n\n                that.input.val(\"\");\n                that._search(true);\n                that._change();\n                that.focus();\n                that._hideClear();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                }\n            },\n\n            _clearSingleTagValue: function() {\n                var that = this;\n                var items = that.dataItems();\n                var tags = that.tagList.children(CHIP);\n                var persistTagList = that.persistTagList;\n\n                for (var i = 0; i < items.length; i += 1) {\n                    if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {\n                        that._close();\n                        return;\n                    }\n                }\n\n                if (persistTagList) {\n                    that.persistTagList = false;\n                }\n\n                that.listView.value([]);\n                that.persistTagList = persistTagList;\n            },\n\n            _focusHandler: function() {\n                var input = this.input;\n                var active = activeElement();\n                var isActive = input[0] === active;\n\n                if (!isActive) {\n                    this.input.trigger(\"focus\");\n                }\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    wrapper = that.wrapper.off(ns),\n                    tagList = that.tagList.off(ns),\n                    input = that.input.off(ns);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .removeClass(NOCLICKCLASS)\n                        .on(HOVEREVENTS, that._toggleHover)\n                        .on(\"mousedown\" + ns + \" touchend\" + ns, that._wrapperMousedown.bind(that))\n                        .on(CLICK, that._focusHandler.bind(that));\n\n                    that.input.on(KEYDOWN, that._keydown.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"focus\" + ns, that._inputFocus.bind(that))\n                        .on(\"focusout\" + ns, that._inputFocusout.bind(that));\n\n                    that._clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n                    input.prop(DISABLED, false)\n                         .prop(READONLY, false)\n                         .attr(ARIA_DISABLED, false)\n                         .attr(ARIA_READONLY, false);\n\n                    that.element.prop(DISABLED, false);\n\n                    tagList\n                        .on(MOUSEENTER, CHIP, function() { $(this).addClass(HOVERCLASS); })\n                        .on(MOUSELEAVE, CHIP, function() { $(this).removeClass(HOVERCLASS); })\n                        .on(CLICK + \" touchend\" + ns, \".k-chip .k-icon,.k-chip .k-svg-icon\", that._tagListClick.bind(that));\n                } else {\n\n                    wrapper.toggleClass(STATEDISABLED, disable)\n                           .toggleClass(NOCLICKCLASS, readonly);\n\n                    input.attr(DISABLED, disable)\n                         .attr(READONLY, readonly)\n                         .attr(ARIA_DISABLED, disable)\n                         .attr(ARIA_READONLY, readonly);\n\n                    that.element.prop(DISABLED, disable);\n                }\n            },\n\n            _close: function() {\n                var that = this;\n                if (that.options.autoClose) {\n                    that.close();\n                } else {\n                    that.popup.position();\n                }\n            },\n\n            _filterSource: function(filter, force) {\n                if (!force) {\n                    force = this._retrieveData;\n                }\n                this._retrieveData = false;\n                List.fn._filterSource.call(this, filter, force);\n            },\n\n            close: function() {\n                this._activeItem = null;\n                this.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n\n                this.popup.close();\n            },\n\n            open: function() {\n                var that = this,\n                    filterValue = that.input.val().toLowerCase(),\n                    listViewFilter = that.listView.dataSource.filter(),\n                    listViewFilterValue = \"\";\n\n                if (listViewFilter && listViewFilter.filters.length > 0) {\n                    listViewFilterValue = (listViewFilter.filters[0].value || \"\").toString().toLowerCase();\n                }\n\n                if (that._request) {\n                    that._retrieveData = false;\n                }\n\n                if (that._retrieveData || !that.listView.bound() || (that._state === ACCEPT && filterValue !== listViewFilterValue)) {\n                    that._open = true;\n                    that._state = REBIND;\n\n                    that.listView.skipUpdate(true);\n\n                    that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n                    that._filterSource();\n                    that._focusItem();\n                } else if (that._allowOpening()) {\n\n                    //selects values in autoBind false and non virtual scenario on initial load\n                    if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {\n                        that.value(that.value() || that._initialValues);\n                    }\n\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._initialOpen = false;\n                    that.popup.open({ altTarget: that.wrapper.add(that.element).add(that.input) });\n                    that._focusItem();\n                }\n            },\n\n            toggle: function(toggle) {\n                toggle = toggle !== undefined$1 ? toggle : !this.popup.visible();\n\n                this[toggle ? OPEN : CLOSE]();\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            _floatCheck: function() {\n                if (this.listView) {\n                    var hasValue = (this.value() && this.value().length);\n                    return !hasValue && !this.popup.visible();\n                }\n\n                return true;\n            },\n\n            _listBound: function() {\n                var that = this;\n                var data = that.dataSource.flatView();\n\n                that._render(data);\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!data.length);\n                that._resizePopup();\n\n                if (that._open) {\n                    that._open = false;\n                    that.toggle(that._allowOpening());\n                }\n\n                that.popup.position();\n                that._updateItemFocus();\n\n                if (that.options?.virtual?.mapValueTo === 'dataItem') {\n                    that._updateSelectedVirtualDataItemsIndexes();\n                }\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _updateItemFocus: function() {\n                var that = this,\n                    data = that.dataSource.flatView(),\n                    skip = that.listView.skip(),\n                    isFirstPage = skip === undefined$1 || skip === 0;\n\n                if (data.length && isFirstPage) {\n                    if (!that.options.highlightFirst) {\n                        that.listView.focus(-1);\n                    } else {\n                        that.listView.focusFirst();\n                    }\n                }\n            },\n\n            _inputValue: function() {\n                var that = this;\n                var inputValue = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput.val() : that.input.val();\n\n                if (that.options.placeholder === inputValue) {\n                    inputValue = \"\";\n                }\n                return inputValue;\n            },\n\n            value: function(value) {\n                var that = this;\n                var listView = that.listView;\n                var oldValue = listView.value().slice();\n                var maxSelectedItems = that.options.maxSelectedItems;\n                var clearFilters = listView.bound() && listView.isFiltered();\n\n                if (value === undefined$1) {\n                    return oldValue;\n                }\n\n                that.persistTagList = false;\n                that.requireValueMapper(that.options, value);\n\n                value = that._normalizeValues(value);\n\n                if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n                    value = value.slice(0, maxSelectedItems);\n                }\n\n                if (clearFilters) {\n                    that._clearFilter();\n                }\n\n                listView.value(value);\n                that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n                if (!clearFilters) {\n                    that._fetchData();\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            _preselect: function(data, value) {\n                var that = this;\n\n                if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n                    data = [data];\n                }\n\n                if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n                    that.dataSource.data(data);\n                    that.value(value || that._initialValues);\n                    that._retrieveData = true;\n                }\n            },\n\n            _setOption: function(value, selected) {\n                var option = this.element[0].children[this._optionsMap[value]];\n\n                if (option) {\n                    option.selected = selected;\n                }\n            },\n\n            _fetchData: function() {\n                var that = this;\n                var hasItems = !!that.dataSource.view().length;\n                var isEmptyArray = that.listView.value().length === 0;\n\n                if (isEmptyArray || that._request) {\n                    return;\n                }\n\n                if (that._retrieveData || (!that._fetch && !hasItems)) {\n                    that._fetch = true;\n                    that._retrieveData = false;\n                    that.dataSource.read().done(function() {\n                        that._fetch = false;\n                    });\n                }\n            },\n\n            _isBound: function() {\n                return this.listView.bound() && !this._retrieveData;\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    dataSource = options.dataSource || {};\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                dataSource.select = element;\n                dataSource.fields = [{ field: options.dataTextField },\n                                     { field: options.dataValueField }];\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._endRequestHandler = that._hideBusy;\n                    that._errorHandler = function() {\n                        that._hideBusy();\n                    };\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                                       .bind(PROGRESS, that._progressHandler)\n                                       .bind(\"requestEnd\", that._endRequestHandler)\n                                       .bind(\"error\", that._errorHandler);\n            },\n\n            _reset: function() {\n                var that = this,\n                    element = that.element,\n                    formId = element.attr(\"form\"),\n                    form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(that._initialValues);\n                            that._placeholder();\n                        });\n                    };\n\n                    that._form = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _initValue: function() {\n                var value = this.options.value || this.element.val();\n\n                this._old = this._initialValues = this._normalizeValues(value);\n            },\n\n            _normalizeValues: function(value) {\n                var that = this;\n\n                if (value === null) {\n                    value = [];\n                } else if (value && $.isPlainObject(value)) {\n                    value = [that._value(value)];\n                } else if (value && $.isPlainObject(value[0])) {\n                    value = $.map(value, function(dataItem) { return that._value(dataItem); });\n                } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n                    value = [value];\n                } else if (isArray(value)) {\n                    value = value.slice();\n                }\n\n                return value;\n            },\n\n            _change: function() {\n                var that = this,\n                    value = that.value();\n\n                if (!compare(value, that._old)) {\n                    that._old = value.slice();\n\n                    that.trigger(CHANGE);\n\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n                that.popup.position();\n\n                that._toggleCloseVisibility();\n            },\n\n            _click: function(e) {\n                var that = this;\n                var item = e.item;\n\n                e.preventDefault();\n\n                that._select(item).done(function() {\n                    that._activeItem = item;\n                    that._change();\n                    that._close();\n                });\n            },\n\n            _getActiveItem: function() {\n                return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n            },\n\n            _getSelectedIndices: function() {\n                return this.listView._selectedIndices || this.listView._selectedIndexes;\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var tag = that._currentTag;\n                var listView = that.listView;\n                var hasValue = that.input.val();\n                var isRtl = kendo.support.isRtl(that.wrapper);\n                var visible = that.popup.visible();\n                var dir = 0;\n                var activeItemIdx;\n                var handled = false;\n\n                if (key !== keys.ENTER) {\n                    this._multipleSelection = false;\n                }\n\n                if (key === keys.DOWN) {\n                    e.preventDefault();\n\n                    if (!visible) {\n                        that.open();\n\n                        if (!listView.focus()) {\n                            listView.focusFirst();\n                        }\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (listView.focus()) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = -1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\n                        listView.focusNext();\n                        if (!listView.focus()) {\n                            listView.focusLast();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    } else {\n                        listView.focusFirst();\n                    }\n                    handled = true;\n\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = 1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                        listView.focusPrev();\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {\n                    if (!hasValue) {\n                        tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();\n                        if (tag[0]) {\n                            that.currentTag(tag);\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {\n                    if (!hasValue && tag) {\n                        tag = tag.next(CHIP);\n                        that.currentTag(tag[0] ? tag : null);\n                    }\n                    handled = true;\n                } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n                    this._multipleSelection = true;\n                    if (this._getSelectedIndices().length === listView.items().length) {\n                        that._activeItem = null;\n                    }\n\n                    if (listView.items().length) {\n                        that._selectRange(0, listView.items().length - 1);\n                    }\n                    handled = true;\n                } else if (key === keys.ENTER && visible) {\n                    if (!listView.focus()) {\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (this._multipleSelection) {\n                        this._multipleSelection = false;\n                         if (listView.focus().hasClass(SELECTEDCLASS)) {\n                            that._close();\n                            e.stopPropagation();\n                            return;\n                        }\n                    }\n\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                        that._close();\n                    });\n                    handled = true;\n                } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n                    if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n                        that._activeItem = null;\n                    }\n                    if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n                        that._activeItem = listView.focus();\n                    }\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                    });\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {\n                    var activeIndex = listView.getElementIndex(that._getActiveItem());\n                    var currentIndex = listView.getElementIndex(listView.focus());\n\n                    if (activeIndex !== undefined$1 && currentIndex !== undefined$1) {\n                        that._selectRange(activeIndex, currentIndex);\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.ESC) {\n                    if (visible) {\n                        e.preventDefault();\n                    } else {\n                        that.tagList.children(CHIP).each(function(index, tag) {\n                            that._removeTag($(tag), false);\n                        });\n                        that._change();\n                    }\n\n                    that.close();\n                    handled = true;\n                } else if (key === keys.HOME) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n                            }\n                            listView.focusFirst();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).first()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if (key === keys.END) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(\n                                    listView.getElementIndex(listView.focus()[0]),\n                                    listView.element.children().length - 1\n                                );\n                            }\n                            listView.focusLast();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).last()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n                    that._state = ACCEPT;\n\n                    if (that.options.tagMode === \"single\") {\n                        that._clearSingleTagValue();\n\n                        that._change();\n                        that._close();\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (key === keys.BACKSPACE && !tag) {\n                        tag = that.tagList.children(CHIP).last();\n                    }\n\n                    if (tag && tag[0]) {\n                        that._removeTag(tag, true);\n                    }\n                    handled = true;\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                    handled = true;\n                } else {\n                    clearTimeout(that._typingTimeout);\n                    that._search();\n                    handled = true;\n                }\n\n                if (handled) {\n                    e.stopPropagation();\n                }\n            },\n\n            _placeholder: function(show, skipCaret) {\n                var that = this;\n                var input = that.input;\n                var active = activeElement();\n                var placeholder = that.options.placeholder;\n                var inputValue = input.val();\n                var isActive = input[0] === active;\n                var caretPos = inputValue.length;\n\n                if (!isActive || that.options.autoClose || inputValue === placeholder) {\n                    caretPos = 0;\n                    inputValue = \"\";\n                }\n\n                if (show === undefined$1) {\n                    show = false;\n                    if (input[0] !== active) {\n                        show = !that.listView.selectedDataItems()[0];\n                    }\n                }\n\n                that._prev = inputValue;\n                input.toggleClass(\"k-readonly\", show).val(show ? placeholder : inputValue);\n\n                if (isActive && !skipCaret) {\n                    kendo.caret(input[0], caretPos, caretPos);\n                }\n            },\n\n            _option: function(dataValue, dataText, selected) {\n                var option = \"<option\";\n\n                if (dataValue !== undefined$1) {\n                    dataValue += \"\";\n\n                    if (dataValue.indexOf('\"') !== -1) {\n                        dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n                    }\n\n                    option += ' value=\"' + dataValue + '\"';\n                }\n\n                if (selected) {\n                    option += ' selected';\n                }\n\n                option += \">\";\n\n                if (dataText !== undefined$1) {\n                    option += kendo.htmlEncode(dataText);\n                }\n\n                return option += \"</option>\";\n            },\n\n            _render: function(data) {\n                var selectedItems = this.listView.selectedDataItems();\n                var values = this.listView.value();\n                var length = data.length;\n                var selectedIndex;\n                var options = \"\";\n                var dataItem;\n                var value;\n                var idx;\n\n                if (values.length !== selectedItems.length) {\n                    selectedItems = this._buildSelectedItems(values);\n                }\n\n                var custom = {};\n                var optionsMap = {};\n\n                for (idx = 0; idx < length; idx++) {\n                    dataItem = data[idx];\n                    value = this._value(dataItem);\n\n                    selectedIndex = this._selectedItemIndex(value, selectedItems);\n                    if (selectedIndex !== -1) {\n                        selectedItems.splice(selectedIndex, 1);\n                    }\n\n                    optionsMap[value] = idx;\n                    options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n                }\n\n                if (selectedItems.length) {\n                    for (idx = 0; idx < selectedItems.length; idx++) {\n                        dataItem = selectedItems[idx];\n\n                        value = this._value(dataItem);\n                        custom[value] = length;\n                        optionsMap[value] = length;\n\n                        length += 1;\n                        options += this._option(value, this._text(dataItem), true);\n                    }\n                }\n\n                this._customOptions = custom;\n                this._optionsMap = optionsMap;\n\n                this.element.html(options);\n            },\n\n            _buildSelectedItems: function(values) {\n                var valueField = this.options.dataValueField;\n                var textField = this.options.dataTextField;\n                var result = [];\n                var item;\n\n                for (var idx = 0; idx < values.length; idx++) {\n                    item = {};\n                    item[valueField] = values[idx];\n                    item[textField] = values[idx];\n\n                    result.push(item);\n                }\n\n                return result;\n            },\n\n            _selectedItemIndex: function(value, selectedItems) {\n                var valueGetter = this._value;\n                var idx = 0;\n\n                for (; idx < selectedItems.length; idx++) {\n                    if (value === valueGetter(selectedItems[idx])) {\n                        return idx;\n                    }\n                }\n\n                return -1;\n            },\n\n            _search: function(noDelay) {\n                let that = this;\n\n                // noDelay may come as an even object, that is why an explicit === true check is needed.\n                if (noDelay === true) {\n                    that._performSearch();\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    that._performSearch();\n                }, that.options.delay);\n            },\n\n            _performSearch: function() {\n                var that = this,\n                    value = that._inputValue();\n\n                if (that._prev !== value) {\n                    that._prev = value;\n                    that.search(value);\n                    that._toggleCloseVisibility();\n                }\n            },\n\n            _toggleCloseVisibility: function() {\n                if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _allowOpening: function() {\n                return this._allowSelection() && List.fn._allowOpening.call(this);\n            },\n\n            _allowSelection: function() {\n                var max = this.options.maxSelectedItems;\n                return max === null || max > this.listView.value().length;\n            },\n\n            updatePersistTagList: function(added, removed) {\n                if (this.persistTagList.added &&\n                    this.persistTagList.added.length === removed.length &&\n                    this.persistTagList.removed &&\n                    this.persistTagList.removed.length === added.length) {\n                        this.persistTagList = false;\n                 } else {\n                     this.listView._removedAddedIndexes = this._old.slice();\n                     this.persistTagList = {\n                         added: added,\n                         removed: removed\n                     };\n                 }\n            },\n\n            _selectValue: function(added, removed) {\n                var that = this;\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n                var getter = that._value;\n                var removedItem;\n                var addedItem;\n                var idx;\n\n                if (this.persistTagList) {\n                    this.updatePersistTagList(added, removed);\n                    that._refreshTagListAria();\n\n                    return;\n                }\n\n                if (that.options.tagMode === \"multiple\") {\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        removedItem = removed[idx];\n\n                        if (tagList.children(CHIP).length) {\n                            tagList[0].removeChild(tagList[0].children[removedItem.position]);\n                            that._setOption(getter(removedItem.dataItem), false);\n                        }\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        addedItem = added[idx];\n\n                        that.tagList.append(that.tagTemplate(addedItem.dataItem));\n\n                        that._setOption(getter(addedItem.dataItem), true);\n                    }\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                } else {\n                    if (!that._maxTotal || that._maxTotal < total) {\n                        that._maxTotal = total;\n                    }\n\n                    this._updateTagListHTML();\n\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        that._setOption(getter(removed[idx].dataItem), false);\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        that._setOption(getter(added[idx].dataItem), true);\n                    }\n                }\n\n                that._refreshTagListAria();\n                that._refreshFloatingLabel();\n\n                that._placeholder();\n            },\n\n            _refreshTagListAria: function() {\n                var that = this;\n                html.renderChipList(that.tagList, $.extend({ selectable: that.value().length === 0 ? \"none\" : \"multiple\" }, that.options));\n            },\n\n            _updateTagListHTML: function() {\n                var that = this;\n                var values = that.value();\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n\n                tagList.children(CHIP).each(function(index, tag) {\n                    $(tag).remove();\n                });\n\n                if (values.length) {\n                    that.tagList.append(that.tagTemplate({\n                        values: values,\n                        dataItems: that.dataItems(),\n                        maxTotal: that._maxTotal,\n                        currentTotal: total\n                    }));\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                }\n\n                that._refreshTagListAria();\n            },\n\n            _select: function(candidate) {\n                var resolved = $.Deferred().resolve();\n\n                if (!candidate) {\n                    return resolved;\n                }\n\n                var that = this;\n                var listView = that.listView;\n                var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n                var isSelected = candidate.hasClass(\"k-selected\");\n\n                if (that._state === REBIND) {\n                    that._state = \"\";\n                }\n\n                if (!that._allowSelection() && !isSelected) {\n                    return resolved;\n                }\n\n                if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {\n                    that._close();\n                    return resolved;\n                }\n\n                that.persistTagList = false;\n                return listView.select(candidate).done(function() {\n                    that._placeholder();\n\n                    if (that._state === FILTER) {\n                        that._state = ACCEPT;\n                        listView.skipUpdate(true);\n                    }\n                });\n            },\n\n            _selectIndices: function(indices) {\n                let listView = this.listView;\n                let that = this;\n\n                listView.select(indices).done(function() {\n                    indices.forEach(function(index) {\n                        var dataItem = listView.dataItemByIndex(index);\n                        var candidate = listView.element.children()[index];\n                        var isSelected = $(candidate).hasClass(\"k-selected\");\n\n                        that.trigger(isSelected ? SELECT : DESELECT, { dataItem: dataItem, item: $(candidate) });\n                    });\n                    that._change();\n                });\n            },\n\n            _selectRange: function(startIndex, endIndex) {\n                var that = this;\n                var maxSelectedItems = this.options.maxSelectedItems;\n                var indices = this._getSelectedIndices().slice();\n                var indicesToSelect = [];\n                var i;\n\n                if (indices.length - 1 === endIndex - startIndex) {\n                    return that._selectIndices(indices);\n                }\n\n                if (startIndex < endIndex) {\n                    for (i = startIndex; i <= endIndex; i++) {\n                        indicesToSelect.push(i);\n                    }\n                } else {\n                    for (i = startIndex; i >= endIndex; i--) {\n                        indicesToSelect.push(i);\n                    }\n                }\n\n                if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n                    indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n                }\n\n                for (i = 0; i < indicesToSelect.length; i++) {\n                    var index = indicesToSelect[i];\n\n                    if (this._getSelectedIndices().indexOf(index) == -1) {\n                        indices.push(index);\n                    } else {\n                        indices.splice(indices.indexOf(index), 1);\n                    }\n                }\n\n                if (!indices.length) {\n                    return;\n                }\n\n                that.persistTagList = false;\n                return that._selectIndices(indices);\n            },\n\n            _input: function() {\n                var that = this;\n                var element = that.element;\n                var accessKey = element[0].accessKey;\n                var input = that._inputValuesContainer.children(\"input.k-input-inner\");\n\n                if (!input[0]) {\n                    input = $('<input class=\"k-input-inner\" />').appendTo(that._inputValuesContainer);\n                }\n\n                element.removeAttr(\"accesskey\");\n                input.attr(\"data-validate\", \"false\");\n                input.attr(\"inputmode\", that.options.inputMode);\n\n                that._focused = that.input = input.attr({\n                    \"autocomplete\": AUTOCOMPLETEVALUE,\n                    \"title\": element[0].title\n                });\n\n                if (accessKey) {\n                    that._focused.attr(\"accesskey\", accessKey);\n                }\n            },\n\n            _inputValuesContainer: function() {\n                var that = this,\n                    inputValuesContainer = that.wrapper.children(\".k-input-values\");\n\n                if (!inputValuesContainer[0]) {\n                    inputValuesContainer = $('<div class=\"k-input-values\"></div>').appendTo(that.wrapper);\n                }\n\n                that._inputValuesContainer = inputValuesContainer;\n            },\n\n            _tagList: function() {\n                var that = this,\n                    options = that.options,\n                    tagList = that._inputValuesContainer.children(\".k-chip-list\");\n\n                if (!tagList[0]) {\n                    tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-selection-multiple\" />', $.extend({ selectable: \"none\" }, options))).appendTo(that._inputValuesContainer);\n                }\n\n                that.tagList = tagList;\n            },\n\n            _tagTemplate: function() {\n                var that = this;\n                var options = that.options;\n                var tagTemplate = options.tagTemplate;\n                var hasDataSource = options.dataSource;\n                var isMultiple = options.tagMode === \"multiple\";\n                var singleTag = options.messages.singleTag;\n                var defaultTemplate;\n                var multipleTemplateFunc;\n                var singleTemplateFunc;\n\n                if (that.element[0].length && !hasDataSource) {\n                    options.dataTextField = options.dataTextField || \"text\";\n                    options.dataValueField = options.dataValueField || \"value\";\n                }\n\n                multipleTemplateFunc = data => encode(kendo.getter(options.dataTextField)(data));\n                singleTemplateFunc = ({ values }) => `${values.length} ${encode(singleTag)}`;\n\n                defaultTemplate = isMultiple ? multipleTemplateFunc : singleTemplateFunc;\n\n                that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n                that.tagTemplate = function(data) {\n                    return html.renderChip('<span unselectable=\"on\">' +\n                    '</span>', $.extend({}, options, {\n                            fillMode: \"solid\",\n                            rounded: \"medium\",\n                            enabled: true,\n                            themeColor: \"base\",\n                            text: tagTemplate(data),\n                            attr: {\n                                unselectable: \"on\",\n                                \"aria-selected\": true,\n                                role: \"option\",\n                                \"aria-keyshortcuts\": isMultiple ? \"Enter Delete\" : \"Enter\"\n                            },\n                            removable: isMultiple,\n                            removableAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": that.options.messages.deleteTag,\n                                title: that.options.messages.deleteTag\n                            },\n                            icon: !isMultiple ? \"caret-alt-down\" : \"\",\n                            iconAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": 'open'\n                            }\n                        })\n                    );\n                };\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-multiselect-popup\");\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this._inputValuesContainer);\n                }\n            },\n\n            _arrowButton: function() {\n                var arrowTitle = encode(this.options.messages.downArrow),\n                    arrow = $(html.renderButton('<button type=\"button\" aria-label=\"' + arrowTitle + '\" class=\"k-input-button\"></button>', $.extend({}, this.options, {\n                        icon: \"caret-alt-down\",\n                        rounded: null\n                    })));\n\n                if (this._arrow) {\n                    this._arrow.remove();\n                    this._arrow = null;\n                }\n\n                if (this.options.downArrow) {\n                    this._arrow = arrow.attr({\n                        \"tabIndex\": -1\n                    });\n\n                    this._arrow.appendTo(this.wrapper);\n                }\n            },\n\n            _textContainer: function() {\n                var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n\n                computedStyles.position = \"absolute\";\n                computedStyles.visibility = \"hidden\";\n                computedStyles.top = -3333;\n                computedStyles.left = -3333;\n\n                this._span = $(\"<span/>\").css(computedStyles).appendTo(this.wrapper);\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper = element.parent(\"span.k-multiselect\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap('<span class=\"k-multiselect k-input\" unselectable=\"on\" />').parent();\n                    wrapper[0].style.cssText = element[0].style.cssText;\n                }\n\n                that.wrapper = wrapper\n                                .addClass(element[0].className)\n                                .removeClass('input-validation-error').css(\"display\", \"\");\n            },\n\n            _closeHandler: function(e) {\n                if (this.trigger(CLOSE)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, false);\n                    this.ul.attr(ARIA_HIDDEN, true);\n                }\n            },\n\n            _openHandler: function(e) {\n                this._adjustListWidth();\n\n                if (this.trigger(OPEN)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, true);\n                    this.ul.attr(ARIA_HIDDEN, false);\n                }\n            }\n        });\n\n        function compare(a, b) {\n            var length;\n\n            if ((a === null && b !== null) || (a !== null && b === null)) {\n                return false;\n            }\n\n            length = a.length;\n            if (length !== b.length) {\n                return false;\n            }\n\n            while (length--) {\n                if (a[length] !== b[length]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        ui.plugin(MultiSelect);\n\n        kendo.cssProperties.registerPrefix(\"MultiSelect\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MultiSelect\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}