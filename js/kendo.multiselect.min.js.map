{"version":3,"sources":["raw-js/kendo.multiselect.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendomultiselect","js","this","$","kendo","jQuery","addInputPrefixSuffixContainers","widget","wrapper","options","prefixInsertBefore","suffixInsertAfter","prefixContainer","suffixContainer","prefix","prefixOptions","suffix","suffixOptions","hasPrefixContent","template","icon","hasSuffixContent","layoutFlow","containerOrientation","INPUT_SEPARATOR","children","insertBefore","prependTo","html","renderIcon","separator","insertAfter","appendTo","_prefixContainer","_suffixContainer","undefined$1","window","ui","List","encode","htmlEncode","keys","extend","A","activeElement","_activeElement","ObservableArray","data","ID","CHIP","ACCEPT","FILTER","REBIND","OPEN","CLOSE","CHANGE","SELECT","DESELECT","ARIA_DISABLED","ARIA_READONLY","ARIA_EXPANDED","ARIA_HIDDEN","ARIA_ACTIVEDESCENDANT","FOCUSEDCLASS","SELECTEDCLASS","HOVERCLASS","STATEDISABLED","NOCLICKCLASS","DISABLED","READONLY","ns","CLICK","KEYDOWN","MOUSEENTER","MOUSELEAVE","HOVEREVENTS","quotRegExp","isArray","Array","styles","MultiSelect","init","element","id","that","fn","call","_optionsMap","_customOptions","inputMode","attr","_wrapper","_inputValuesContainer","_tagList","_input","_textContainer","_clearButton","_arrowButton","_tabindex","input","hide","placeholder","guid","_tagID","tagList","_initialOpen","label","_label","_aria","_dataSource","_ignoreCase","_popup","_tagTemplate","requireValueMapper","_initList","_reset","_enable","_placeholder","autoBind","dataSource","fetch","value","_preselect","parents","is","enable","_toggleCloseVisibility","_applyCssClasses","clearButton","_clear","find","floatingLabel","refresh","notify","name","tagMode","enabled","autoClose","highlightFirst","dataTextField","dataValueField","filter","ignoreCase","minLength","messages","singleTag","clear","deleteTag","noData","downArrow","enforceMinLength","delay","maxSelectedItems","height","animation","virtual","itemTemplate","tagTemplate","groupTemplate","fixedGroupTemplate","autoWidth","popup","size","fillMode","rounded","adaptiveTitle","adaptiveSubtitle","events","setDataSource","_state","persistTagList","listView","setOptions","listOptions","_listOptions","_accessors","currentTag","candidate","_currentTag","removeClass","removeAttr","addClass","dataItems","selectedDataItems","destroy","clearTimeout","_busy","_typingTimeout","filterInput","off","_onActionSheetCreate","on","_keydown","bind","_search","role","val","trigger","ul","autocomplete","tagListId","_ariaLabel","_focused","_activateItem","visible","selectedItemChange","_selectedItemChange","selectable","getter","_setListValue","_initialValues","slice","_listChange","e","flatView","optionsMap","valueGetter","_value","i","added","length","dataItem","_render","_selectValue","removed","context","idx","items","eq","index","first","tagTextTemplate","item","_wrapperMousedown","notInput","target","nodeName","toLowerCase","closeButton","closest","removeButton","support","mobileOS","cancelable","preventDefault","toggle","open","_inputFocus","_hasActionSheet","readonly","_inputFocusout","relatedTarget","close","skipUpdate","bound","isFiltered","_clearFilter","_removeTag","tag","shouldTrigger","option","state","position","customIndex","listViewChildren","_close","done","_change","_refreshTagListAria","select","selected","removeAt","_removedAddedIndexes","splice","classList","remove","_updateTagListHTML","_tagListClick","stopPropagation","currentTarget","_clearValue","_clearSingleTagValue","each","focus","_hideClear","tags","_focusHandler","active","_editable","disable","toggleClass","prop","_toggleHover","_filterSource","force","_retrieveData","_activeItem","filterValue","listViewFilter","listViewFilterValue","filters","toString","_request","_open","_focusItem","_allowOpening","isPlainObject","_hovered","altTarget","add","_floatCheck","_listBound","_renderFooter","_renderNoData","_toggleNoData","_resizePopup","_updateItemFocus","_touchScroller","reset","_hideBusy","skip","isFirstPage","focusFirst","_inputValue","inputValue","oldValue","clearFilters","_normalizeValues","_old","_valueBeforeCascade","_fetchData","ObservableObject","_setOption","hasItems","view","_fetch","read","_isBound","fields","field","_refreshHandler","_unbindDataSource","_progressHandler","_showBusy","_endRequestHandler","_errorHandler","DataSource","create","formId","form","_resetHandler","setTimeout","_form","_initValue","map","a","b","compare","_click","_select","_getActiveItem","_getSelectedIndices","_selectedIndices","_selectedIndexes","activeItemIdx","key","keyCode","hasValue","isRtl","dir","handled","ENTER","_multipleSelection","DOWN","shiftKey","getElementIndex","focusNext","_selectRange","focusLast","UP","focusPrev","LEFT","RIGHT","prev","last","next","ctrlKey","altKey","hasClass","SPACEBAR","activeIndex","currentIndex","ESC","HOME","END","DELETE","BACKSPACE","PAGEDOWN","PAGEUP","direction","scrollWith","screenHeight","show","skipCaret","isActive","caretPos","_prev","caret","_option","dataValue","dataText","indexOf","replace","selectedIndex","selectedItems","values","_buildSelectedItems","custom","_selectedItemIndex","_text","valueField","textField","result","push","noDelay","_performSearch","search","_showClear","_allowSelection","max","updatePersistTagList","removedItem","addedItem","total","removeChild","append","applyStylesFromKendoAttributes","_maxTotal","_refreshFloatingLabel","renderChipList","maxTotal","currentTotal","resolved","Deferred","resolve","dataItemByIndex","isSelected","_selectIndices","indices","forEach","startIndex","endIndex","indicesToSelect","accessKey","title","inputValuesContainer","defaultTemplate","hasDataSource","isMultiple","renderChip","themeColor","text","unselectable","removable","removableAttr","iconAttr","arrowTitle","arrow","renderButton","_arrow","tabIndex","computedStyles","getComputedStyles","visibility","top","left","_span","css","parent","wrap","style","cssText","className","_closeHandler","_openHandler","_adjustListWidth","plugin","cssProperties","registerPrefix","registerValues","roundedValues","concat","kendo$1","__meta__","category","description","depends","features","Object","defineProperty"],"mappings":"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","file":"kendo.multiselect.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.list.js'), require('kendo.mobile.scroller.js'), require('kendo.virtuallist.js'), require('kendo.html.chip.js'), require('kendo.html.chiplist.js'), require('kendo.html.button.js'), require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.list', 'kendo.mobile.scroller', 'kendo.virtuallist', 'kendo.html.chip', 'kendo.html.chiplist', 'kendo.html.button', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendomultiselect = global.kendomultiselect || {}, global.kendomultiselect.js = {})));\n})(this, (function (exports) {\n    let $ = kendo.jQuery;\n\n    function addInputPrefixSuffixContainers({ widget, wrapper, options, prefixInsertBefore, suffixInsertAfter }) {\n        var prefix = options.prefixOptions,\n            suffix = options.suffixOptions,\n            hasPrefixContent = prefix.template || prefix.icon,\n            hasSuffixContent = suffix.template || suffix.icon,\n            suffixInsertAfter = suffixInsertAfter || prefixInsertBefore,\n            layoutFlow = options.layoutFlow,\n            containerOrientation = layoutFlow ? (layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\") : \"horizontal\",\n            separatorOrientation = layoutFlow == \"vertical\" ? \"horizontal\" : \"vertical\",\n            INPUT_SEPARATOR = `<span class=\"k-input-separator k-input-separator-${separatorOrientation}\"></span>`,\n            prefixContainer,\n            suffixContainer;\n\n        if (prefix && hasPrefixContent) {\n            prefixContainer = wrapper.children(\".k-input-prefix\");\n\n            if (!prefixContainer[0]) {\n                prefixContainer = $(`<span class=\"k-input-prefix k-input-prefix-${containerOrientation}\" />`);\n                if (prefixInsertBefore) {\n                    prefixContainer.insertBefore(prefixInsertBefore);\n                } else {\n                    prefixContainer.prependTo(wrapper);\n                }\n            }\n\n            if (prefix.icon) {\n                prefixContainer.html(kendo.html.renderIcon({ icon: prefix.icon }));\n            }\n\n            if (prefix.template) {\n                prefixContainer.html(kendo.template(prefix.template)({}));\n            }\n\n            if (prefix.separator) {\n                $(INPUT_SEPARATOR).insertAfter(prefixContainer);\n            }\n        }\n\n        if (suffix && hasSuffixContent) {\n            suffixContainer = wrapper.children(\".k-input-suffix\");\n\n            if (!suffixContainer[0]) {\n                suffixContainer = $(`<span class=\"k-input-suffix k-input-suffix-${containerOrientation}\" />`).appendTo(wrapper);\n                if (suffixInsertAfter) {\n                    suffixContainer.insertAfter(suffixInsertAfter);\n                } else {\n                    suffixContainer.appendTo(wrapper);\n                }\n            }\n\n            if (suffix.icon) {\n                suffixContainer.html(kendo.html.renderIcon({ icon: suffix.icon }));\n            }\n\n            if (suffix.template) {\n                suffixContainer.html(kendo.template(suffix.template)({}));\n            }\n\n            if (suffix.separator) {\n                $(INPUT_SEPARATOR).insertBefore(suffixContainer);\n            }\n        }\n\n        widget._prefixContainer = prefixContainer;\n        widget._suffixContainer = suffixContainer;\n    }\n\n    const __meta__ = {\n        id: \"multiselect\",\n        name: \"MultiSelect\",\n        category: \"web\",\n        description: \"The MultiSelect widget allows the selection from pre-defined values.\",\n        depends: [ \"list\", \"html.chip\", \"html.chiplist\", \"html.button\" ],\n        features: [ {\n            id: \"mobile-scroller\",\n            name: \"Mobile scroller\",\n            description: \"Support for kinetic scrolling in mobile device\",\n            depends: [ \"mobile.scroller\" ]\n        }, {\n            id: \"virtualization\",\n            name: \"VirtualList\",\n            description: \"Support for virtualization\",\n            depends: [ \"virtuallist\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            List = ui.List,\n            encode = kendo.htmlEncode,\n            html = kendo.html,\n            keys = $.extend({ A: 65 }, kendo.keys),\n            activeElement = kendo._activeElement,\n            ObservableArray = kendo.data.ObservableArray,\n            ID = \"id\",\n            CHIP = \".k-chip\",\n            ACCEPT = \"accept\",\n            FILTER = \"filter\",\n            REBIND = \"rebind\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            SELECT = \"select\",\n            DESELECT = \"deselect\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_BUSY = \"aria-busy\",\n            FOCUSEDCLASS = \"k-focus\",\n            SELECTEDCLASS = \"k-selected\",\n            HIDDENCLASS = \"k-hidden\",\n            HOVERCLASS = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            NOCLICKCLASS = \"k-no-click\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            AUTOCOMPLETEVALUE = \"off\",\n            ns = \".kendoMultiSelect\",\n            CLICK = \"click\" + ns,\n            KEYDOWN = \"keydown\" + ns,\n            MOUSEENTER = \"mouseenter\" + ns,\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = MOUSEENTER + \" \" + MOUSELEAVE,\n            quotRegExp = /\"/g,\n            isArray = Array.isArray,\n            styles = [\"font-family\",\n                      \"font-size\",\n                      \"font-stretch\",\n                      \"font-style\",\n                      \"font-weight\",\n                      \"letter-spacing\",\n                      \"text-transform\",\n                      \"line-height\"];\n\n        var MultiSelect = List.extend({\n            init: function(element, options) {\n                var that = this, id, disabled;\n\n                that.ns = ns;\n                List.fn.init.call(that, element, options);\n\n                that._optionsMap = {};\n                that._customOptions = {};\n                that.options.inputMode = that.options.inputMode || that.element.attr(\"inputmode\") || \"text\";\n\n                that._wrapper();\n                that._inputValuesContainer();\n                that._tagList();\n                that._input();\n                that._textContainer();\n                that._clearButton();\n                that._arrowButton();\n\n                that._tabindex(that.input);\n\n                element = that.element.attr(\"multiple\", \"multiple\").hide();\n                options = that.options;\n\n                if (!options.placeholder) {\n                    options.placeholder = element.data(\"placeholder\");\n                }\n\n                id = element.attr(ID);\n\n                if (!id) {\n                    id = kendo.guid();\n                }\n\n                if (id) {\n                    that._tagID = id + \"_tag_active\";\n                    id = id + \"_taglist\";\n                    that.tagList.attr(ID, id);\n                }\n\n                that._initialOpen = true;\n\n                if (options.label) {\n                    this._label();\n                }\n\n                that._aria();\n\n                that._dataSource();\n                that._ignoreCase();\n                that._popup();\n\n                that._tagTemplate();\n                that.requireValueMapper(that.options);\n                that._initList();\n\n                that._reset();\n                that._enable();\n                that._placeholder();\n\n                if (options.autoBind) {\n                    that.dataSource.fetch();\n                } else if (options.value) {\n                    that._preselect(options.value);\n                }\n\n                disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n                if (disabled) {\n                    that.enable(false);\n                }\n\n                that._toggleCloseVisibility();\n                that._applyCssClasses();\n\n                addInputPrefixSuffixContainers({ widget: that, wrapper: that.wrapper, options: that.options, prefixInsertBefore: that._inputValuesContainer, suffixInsertAfter: options.clearButton ? that._clear : that.element.find(\"k-input-values\") });\n                if (that.floatingLabel) {\n                    that.floatingLabel.refresh();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"MultiSelect\",\n                tagMode: \"multiple\",\n                enabled: true,\n                autoBind: true,\n                autoClose: true,\n                highlightFirst: true,\n                dataTextField: \"\",\n                dataValueField: \"\",\n                filter: \"startswith\",\n                ignoreCase: true,\n                minLength: 1,\n                messages: {\n                    \"singleTag\": \"item(s) selected\",\n                    \"clear\": \"clear\",\n                    \"deleteTag\": \"delete\",\n                    \"noData\": \"No data found.\",\n                    \"downArrow\": \"select\"\n                },\n                enforceMinLength: false,\n                delay: 100,\n                value: null,\n                maxSelectedItems: null,\n                placeholder: \"\",\n                height: 200,\n                animation: {},\n                virtual: false,\n                itemTemplate: \"\",\n                tagTemplate: \"\",\n                groupTemplate: (data) => encode(data),\n                fixedGroupTemplate: (data) => encode(data),\n                prefixOptions: {\n                    separator: true\n                },\n                suffixOptions: {\n                    separator: true\n                },\n                clearButton: true,\n                autoWidth: false,\n                popup: null,\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null,\n                adaptiveTitle: null,\n                adaptiveSubtitle: null,\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE,\n                SELECT,\n                DESELECT,\n                \"filtering\",\n                \"dataBinding\",\n                \"dataBound\"\n            ],\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._state = \"\";\n                this._dataSource();\n\n                this.persistTagList = false;\n                this.listView.setDataSource(this.dataSource);\n\n                if (this.options.autoBind) {\n                    this.dataSource.fetch();\n                }\n            },\n\n            setOptions: function(options) {\n                var listOptions = this._listOptions(options);\n\n                List.fn.setOptions.call(this, options);\n\n                this.listView.setOptions(listOptions);\n\n\n                this._accessors();\n                this._aria();\n                this._tagTemplate();\n                this._placeholder();\n                this._clearButton();\n                this._arrowButton();\n            },\n\n            currentTag: function(candidate) {\n                var that = this;\n\n                if (candidate !== undefined$1) {\n                    if (that._currentTag) {\n                        that._currentTag\n                            .removeClass(FOCUSEDCLASS)\n                            .removeAttr(ID);\n\n                        that._currentTag.find(\".k-chip-action\").attr(ARIA_HIDDEN, true);\n\n                        that.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n                    }\n\n                    if (candidate) {\n                        candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n\n                        candidate.find(\".k-chip-action\").removeAttr(ARIA_HIDDEN);\n\n                        that.input.attr(ARIA_ACTIVEDESCENDANT, that._tagID);\n                    }\n\n                    that._currentTag = candidate;\n                } else {\n                    return that._currentTag;\n                }\n            },\n\n            dataItems: function() {\n                return this.listView.selectedDataItems();\n            },\n\n            destroy: function() {\n                var that = this,\n                    ns = that.ns;\n\n                clearTimeout(that._busy);\n                clearTimeout(that._typingTimeout);\n\n                if (that.filterInput) {\n                    that.filterInput.off(ns);\n                }\n\n                that.wrapper.off(ns);\n                that.tagList.off(ns);\n                that.input.off(ns);\n                that._clear.off(ns);\n\n                List.fn.destroy.call(that);\n            },\n\n            _onActionSheetCreate: function() {\n                var that = this;\n\n                that.filterInput\n                    .on(\"keydown\" + ns, that._keydown.bind(that))\n                    .on(\"input\" + ns, that._search.bind(that))\n                    .on(\"paste\" + ns, that._search.bind(that))\n                    .attr({\n                        \"role\": \"combobox\",\n                        \"aria-expanded\": false,\n                        \"aria-controls\": that.input.attr(\"aria-controls\"),\n                        \"aria-autocomplete\": that.input.attr(\"aria-autocomplete\"),\n                        \"aria-describedby\": that.input.attr(\"aria-describedby\"),\n                        \"placeholder\": that.options.placeholder,\n                    });\n\n                that.popup.bind(\"activate\", () => {\n                    that.filterInput.val(that.input.val());\n                    that.filterInput.trigger(\"focus\");\n                });\n\n                that.popup.bind(\"deactivate\", () => {\n                    that.input.trigger(\"focus\");\n                });\n            },\n\n            _aria: function() {\n                var that = this,\n                    id = that.ul[0].id,\n                    autocomplete = this.options.filter === \"none\" ? \"none\" : \"list\",\n                    tagListId = that.tagList.attr(ID);\n\n                that.input.attr({\n                    \"role\": \"combobox\",\n                    \"aria-expanded\": false,\n                    \"aria-controls\": id,\n                    \"aria-autocomplete\": autocomplete,\n                    \"aria-describedby\": tagListId\n                });\n\n                that._ariaLabel(that._focused);\n            },\n\n            _activateItem: function() {\n                if (this.popup.visible()) {\n                    List.fn._activateItem.call(this);\n                }\n                this.currentTag(null);\n            },\n\n            _listOptions: function(options) {\n                var that = this;\n                var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n                    selectedItemChange: that._selectedItemChange.bind(that),\n                    selectable: \"multiple\"\n                }));\n\n                var itemTemplate = this.options.itemTemplate || this.options.template;\n                var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n                if (!template) {\n                    template = data => encode(kendo.getter(listOptions.dataTextField)(data));\n                }\n\n                listOptions.template = template;\n\n                return listOptions;\n            },\n\n            _setListValue: function() {\n                List.fn._setListValue.call(this, this._initialValues.slice(0));\n            },\n\n            _listChange: function(e) {\n                var data = this.dataSource.flatView();\n                var optionsMap = this._optionsMap;\n                var valueGetter = this._value;\n\n                if (this._state === REBIND) {\n                    this._state = \"\";\n                }\n\n                for (var i = 0; i < e.added.length; i++) {\n                    if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined$1) {\n                        this._render(data); //render select element <option> tags if the item does not persist in the current data view\n                        break;\n                    }\n                }\n\n                this._selectValue(e.added, e.removed);\n            },\n\n            _selectedItemChange: function(e) {\n                var items = e.items;\n                var context;\n                var idx;\n\n                for (idx = 0; idx < items.length; idx++) {\n                    context = items[idx];\n                    this.tagList.children(CHIP).eq(context.index).children(\"span\").first().html(this.tagTextTemplate(context.item));\n                }\n            },\n\n            _wrapperMousedown: function(e) {\n                var that = this;\n                var notInput = e.target.nodeName.toLowerCase() !== \"input\";\n                var target = $(e.target);\n                var closeButton = target.closest(\".k-input-button, .k-chip\").children(\"[class*='-i-caret-alt-down']\")[0];\n                var removeButton = target.closest(\"[class*='-i-x']\")[0];\n\n                if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {\n                    e.preventDefault();\n                }\n\n                if (!removeButton) {\n                    if (closeButton && that.popup.visible()) {\n                        that.toggle(false);\n                    } else {\n                        if (that.input[0] !== activeElement() && notInput) {\n                            that.input.trigger(\"focus\");\n                        }\n\n                        if (that.options.minLength === 1 && !that.popup.visible()) {\n                            that.open();\n                        }\n                    }\n                }\n\n            },\n\n            _inputFocus: function() {\n                const that = this;\n                if (that._hasActionSheet()) {\n                    that.input.attr(\"readonly\", true);\n                } else if (!that.options.readonly) {\n                    that.input.removeAttr(\"readonly\");\n                }\n                that._placeholder(false, true);\n                that.wrapper.addClass(FOCUSEDCLASS);\n            },\n\n            _inputFocusout: function(e) {\n                var that = this;\n\n                if (that.filterInput && e.relatedTarget === that.filterInput[0]) {\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that.wrapper.removeClass(FOCUSEDCLASS);\n\n                that._placeholder(!that.listView.selectedDataItems()[0], true);\n                that.close();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                    that.listView.skipUpdate(true);\n                }\n\n                if (that.listView.bound() && that.listView.isFiltered()) {\n                    that.persistTagList = true;\n                    that._clearFilter();\n                }\n\n                that.element.trigger(\"blur\");\n            },\n\n            _removeTag: function(tag, shouldTrigger) {\n                var that = this;\n                var state = that._state;\n                var position = tag.index();\n                var listView = that.listView;\n                var value = listView.value()[position];\n                var dataItem = that.listView.selectedDataItems()[position];\n                var customIndex = that._customOptions[value];\n                var listViewChildren = listView.element[0].children;\n                var option;\n                var listViewChild;\n\n                if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {\n                    that._close();\n                    return;\n                }\n\n                if (customIndex === undefined$1 && (state === ACCEPT || state === FILTER)) {\n                    customIndex = that._optionsMap[value];\n                }\n\n                var done = function() {\n                    that.currentTag(null);\n                    if (shouldTrigger) {\n                        that._change();\n                    }\n\n                    that._refreshTagListAria();\n                    that._close();\n                };\n\n                if (customIndex === undefined$1 && listView.select().length) {\n                    that.persistTagList = false;\n                    listView.select(listView.select()[position]).done(done);\n                } else {\n                    option = that.element[0].children[customIndex];\n                    if (option) {\n                        option.selected = false;\n                    }\n\n                    listView.removeAt(position);\n\n                    if (listView._removedAddedIndexes) {\n                        listView._removedAddedIndexes.splice(position, 1);\n                    }\n\n                    listViewChild = listViewChildren[customIndex];\n                    if (listViewChild) {\n                        listViewChildren[customIndex].classList.remove(\"k-selected\");\n                    }\n                    if (that.options.tagMode !== \"single\") {\n                        tag.remove();\n                    } else {\n                        that._updateTagListHTML();\n                    }\n                    done();\n                }\n            },\n\n            _tagListClick: function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var target = $(e.currentTarget);\n\n                if (target.is(\"[class*='-i-x-circle']\")) {\n                    this._removeTag(target.closest(CHIP), true);\n                }\n            },\n\n            _clearValue: function() {\n                var that = this;\n\n                if (that.options.tagMode === \"single\") {\n                    that._clearSingleTagValue();\n                } else {\n                    that.tagList.children(CHIP).each(function(index, tag) {\n                        that._removeTag($(tag), false);\n                    });\n                }\n\n                that.input.val(\"\");\n                that._search(true);\n                that._change();\n                that.focus();\n                that._hideClear();\n\n                if (that._state === FILTER) {\n                    that._state = ACCEPT;\n                }\n            },\n\n            _clearSingleTagValue: function() {\n                var that = this;\n                var items = that.dataItems();\n                var tags = that.tagList.children(CHIP);\n                var persistTagList = that.persistTagList;\n\n                for (var i = 0; i < items.length; i += 1) {\n                    if (that.trigger(DESELECT, { dataItem: items[i], item: tags.first() })) {\n                        that._close();\n                        return;\n                    }\n                }\n\n                if (persistTagList) {\n                    that.persistTagList = false;\n                }\n\n                that.listView.value([]);\n                that.persistTagList = persistTagList;\n            },\n\n            _focusHandler: function() {\n                var input = this.input;\n                var active = activeElement();\n                var isActive = input[0] === active;\n\n                if (!isActive) {\n                    this.input.trigger(\"focus\");\n                }\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    disable = options.disable,\n                    readonly = options.readonly,\n                    wrapper = that.wrapper.off(ns),\n                    tagList = that.tagList.off(ns),\n                    input = that.input.off(ns);\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .removeClass(NOCLICKCLASS)\n                        .on(HOVEREVENTS, that._toggleHover)\n                        .on(\"mousedown\" + ns + \" touchend\" + ns, that._wrapperMousedown.bind(that))\n                        .on(CLICK, that._focusHandler.bind(that));\n\n                    that.input.on(KEYDOWN, that._keydown.bind(that))\n                        .on(\"paste\" + ns, that._search.bind(that))\n                        .on(\"input\" + ns, that._search.bind(that))\n                        .on(\"focus\" + ns, that._inputFocus.bind(that))\n                        .on(\"focusout\" + ns, that._inputFocusout.bind(that));\n\n                    that._clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n                    input.prop(DISABLED, false)\n                         .prop(READONLY, false)\n                         .attr(ARIA_DISABLED, false)\n                         .attr(ARIA_READONLY, false);\n\n                    that.element.prop(DISABLED, false);\n\n                    tagList\n                        .on(MOUSEENTER, CHIP, function() { $(this).addClass(HOVERCLASS); })\n                        .on(MOUSELEAVE, CHIP, function() { $(this).removeClass(HOVERCLASS); })\n                        .on(CLICK + \" touchend\" + ns, \".k-chip .k-icon,.k-chip .k-svg-icon\", that._tagListClick.bind(that));\n                } else {\n\n                    wrapper.toggleClass(STATEDISABLED, disable)\n                           .toggleClass(NOCLICKCLASS, readonly);\n\n                    input.attr(DISABLED, disable)\n                         .attr(READONLY, readonly)\n                         .attr(ARIA_DISABLED, disable)\n                         .attr(ARIA_READONLY, readonly);\n\n                    that.element.prop(DISABLED, disable);\n                }\n            },\n\n            _close: function() {\n                var that = this;\n                if (that.options.autoClose) {\n                    that.close();\n                } else {\n                    that.popup.position();\n                }\n            },\n\n            _filterSource: function(filter, force) {\n                if (!force) {\n                    force = this._retrieveData;\n                }\n                this._retrieveData = false;\n                List.fn._filterSource.call(this, filter, force);\n            },\n\n            close: function() {\n                this._activeItem = null;\n                this.input.removeAttr(ARIA_ACTIVEDESCENDANT);\n\n                this.popup.close();\n            },\n\n            open: function() {\n                var that = this,\n                    filterValue = that.input.val().toLowerCase(),\n                    listViewFilter = that.listView.dataSource.filter(),\n                    listViewFilterValue = \"\";\n\n                if (listViewFilter && listViewFilter.filters.length > 0) {\n                    listViewFilterValue = (listViewFilter.filters[0].value || \"\").toString().toLowerCase();\n                }\n\n                if (that._request) {\n                    that._retrieveData = false;\n                }\n\n                if (that._retrieveData || !that.listView.bound() || (that._state === ACCEPT && filterValue !== listViewFilterValue)) {\n                    that._open = true;\n                    that._state = REBIND;\n\n                    that.listView.skipUpdate(true);\n\n                    that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n                    that._filterSource();\n                    that._focusItem();\n                } else if (that._allowOpening()) {\n\n                    //selects values in autoBind false and non virtual scenario on initial load\n                    if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {\n                        that.value(that.value() || that._initialValues);\n                    }\n\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    that.popup._hovered = true;\n                    that._initialOpen = false;\n                    that.popup.open({ altTarget: that.wrapper.add(that.element).add(that.input) });\n                    that._focusItem();\n                }\n            },\n\n            toggle: function(toggle) {\n                toggle = toggle !== undefined$1 ? toggle : !this.popup.visible();\n\n                this[toggle ? OPEN : CLOSE]();\n            },\n\n            refresh: function() {\n                this.listView.refresh();\n            },\n\n            _floatCheck: function() {\n                if (this.listView) {\n                    var hasValue = (this.value() && this.value().length);\n                    return !hasValue && !this.popup.visible();\n                }\n\n                return true;\n            },\n\n            _listBound: function() {\n                var that = this;\n                var data = that.dataSource.flatView();\n\n                that._render(data);\n                that._renderFooter();\n                that._renderNoData();\n                that._toggleNoData(!data.length);\n                that._resizePopup();\n\n                if (that._open) {\n                    that._open = false;\n                    that.toggle(that._allowOpening());\n                }\n\n                that.popup.position();\n                that._updateItemFocus();\n\n                if (that._touchScroller) {\n                    that._touchScroller.reset();\n                }\n\n                that._hideBusy();\n\n                that.trigger(\"dataBound\");\n            },\n\n            _updateItemFocus: function() {\n                var that = this,\n                    data = that.dataSource.flatView(),\n                    skip = that.listView.skip(),\n                    isFirstPage = skip === undefined$1 || skip === 0;\n\n                if (data.length && isFirstPage) {\n                    if (!that.options.highlightFirst) {\n                        that.listView.focus(-1);\n                    } else {\n                        that.listView.focusFirst();\n                    }\n                }\n            },\n\n            _inputValue: function() {\n                var that = this;\n                var inputValue = that.filterInput && activeElement() === that.filterInput[0] ? that.filterInput.val() : that.input.val();\n\n                if (that.options.placeholder === inputValue) {\n                    inputValue = \"\";\n                }\n                return inputValue;\n            },\n\n            value: function(value) {\n                var that = this;\n                var listView = that.listView;\n                var oldValue = listView.value().slice();\n                var maxSelectedItems = that.options.maxSelectedItems;\n                var clearFilters = listView.bound() && listView.isFiltered();\n\n                if (value === undefined$1) {\n                    return oldValue;\n                }\n\n                that.persistTagList = false;\n                that.requireValueMapper(that.options, value);\n\n                value = that._normalizeValues(value);\n\n                if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n                    value = value.slice(0, maxSelectedItems);\n                }\n\n                if (clearFilters) {\n                    that._clearFilter();\n                }\n\n                listView.value(value);\n                that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n                if (!clearFilters) {\n                    that._fetchData();\n                }\n\n                that._toggleCloseVisibility();\n            },\n\n            _preselect: function(data, value) {\n                var that = this;\n\n                if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n                    data = [data];\n                }\n\n                if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n                    that.dataSource.data(data);\n                    that.value(value || that._initialValues);\n                    that._retrieveData = true;\n                }\n            },\n\n            _setOption: function(value, selected) {\n                var option = this.element[0].children[this._optionsMap[value]];\n\n                if (option) {\n                    option.selected = selected;\n                }\n            },\n\n            _fetchData: function() {\n                var that = this;\n                var hasItems = !!that.dataSource.view().length;\n                var isEmptyArray = that.listView.value().length === 0;\n\n                if (isEmptyArray || that._request) {\n                    return;\n                }\n\n                if (that._retrieveData || (!that._fetch && !hasItems)) {\n                    that._fetch = true;\n                    that._retrieveData = false;\n                    that.dataSource.read().done(function() {\n                        that._fetch = false;\n                    });\n                }\n            },\n\n            _isBound: function() {\n                return this.listView.bound() && !this._retrieveData;\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    dataSource = options.dataSource || {};\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                dataSource.select = element;\n                dataSource.fields = [{ field: options.dataTextField },\n                                     { field: options.dataValueField }];\n\n                if (that.dataSource && that._refreshHandler) {\n                    that._unbindDataSource();\n                } else {\n                    that._progressHandler = that._showBusy;\n                    that._endRequestHandler = that._hideBusy;\n                    that._errorHandler = function() {\n                        that._hideBusy();\n                    };\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                                       .bind(PROGRESS, that._progressHandler)\n                                       .bind(\"requestEnd\", that._endRequestHandler)\n                                       .bind(\"error\", that._errorHandler);\n            },\n\n            _reset: function() {\n                var that = this,\n                    element = that.element,\n                    formId = element.attr(\"form\"),\n                    form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        setTimeout(function() {\n                            that.value(that._initialValues);\n                            that._placeholder();\n                        });\n                    };\n\n                    that._form = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _initValue: function() {\n                var value = this.options.value || this.element.val();\n\n                this._old = this._initialValues = this._normalizeValues(value);\n            },\n\n            _normalizeValues: function(value) {\n                var that = this;\n\n                if (value === null) {\n                    value = [];\n                } else if (value && $.isPlainObject(value)) {\n                    value = [that._value(value)];\n                } else if (value && $.isPlainObject(value[0])) {\n                    value = $.map(value, function(dataItem) { return that._value(dataItem); });\n                } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n                    value = [value];\n                } else if (isArray(value)) {\n                    value = value.slice();\n                }\n\n                return value;\n            },\n\n            _change: function() {\n                var that = this,\n                    value = that.value();\n\n                if (!compare(value, that._old)) {\n                    that._old = value.slice();\n\n                    that.trigger(CHANGE);\n\n                    // trigger the DOM change event so any subscriber gets notified\n                    that.element.trigger(CHANGE);\n                }\n                that.popup.position();\n\n                that._toggleCloseVisibility();\n            },\n\n            _click: function(e) {\n                var that = this;\n                var item = e.item;\n\n                e.preventDefault();\n\n                that._select(item).done(function() {\n                    that._activeItem = item;\n                    that._change();\n                    that._close();\n                });\n            },\n\n            _getActiveItem: function() {\n                return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n            },\n\n            _getSelectedIndices: function() {\n                return this.listView._selectedIndices || this.listView._selectedIndexes;\n            },\n\n            _keydown: function(e) {\n                var that = this;\n                var key = e.keyCode;\n                var tag = that._currentTag;\n                var listView = that.listView;\n                var hasValue = that.input.val();\n                var isRtl = kendo.support.isRtl(that.wrapper);\n                var visible = that.popup.visible();\n                var dir = 0;\n                var activeItemIdx;\n                var handled = false;\n\n                if (key !== keys.ENTER) {\n                    this._multipleSelection = false;\n                }\n\n                if (key === keys.DOWN) {\n                    e.preventDefault();\n\n                    if (!visible) {\n                        that.open();\n\n                        if (!listView.focus()) {\n                            listView.focusFirst();\n                        }\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (listView.focus()) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = -1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n\n                        listView.focusNext();\n                        if (!listView.focus()) {\n                            listView.focusLast();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    } else {\n                        listView.focusFirst();\n                    }\n                    handled = true;\n\n                } else if (key === keys.UP) {\n                    if (visible) {\n                        if (!that._activeItem && e.shiftKey) {\n                            that._activeItem = listView.focus();\n                            dir = 1;\n                        }\n                        activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                        listView.focusPrev();\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.shiftKey && !that.options.virtual) {\n                                this._multipleSelection = true;\n                                that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                            }\n                        }\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {\n                    if (!hasValue) {\n                        tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();\n                        if (tag[0]) {\n                            that.currentTag(tag);\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {\n                    if (!hasValue && tag) {\n                        tag = tag.next(CHIP);\n                        that.currentTag(tag[0] ? tag : null);\n                    }\n                    handled = true;\n                } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n                    this._multipleSelection = true;\n                    if (this._getSelectedIndices().length === listView.items().length) {\n                        that._activeItem = null;\n                    }\n\n                    if (listView.items().length) {\n                        that._selectRange(0, listView.items().length - 1);\n                    }\n                    handled = true;\n                } else if (key === keys.ENTER && visible) {\n                    if (!listView.focus()) {\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (this._multipleSelection) {\n                        this._multipleSelection = false;\n                         if (listView.focus().hasClass(SELECTEDCLASS)) {\n                            that._close();\n                            e.stopPropagation();\n                            return;\n                        }\n                    }\n\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                        that._close();\n                    });\n                    handled = true;\n                } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n                    if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n                        that._activeItem = null;\n                    }\n                    if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n                        that._activeItem = listView.focus();\n                    }\n                    that._select(listView.focus()).done(function() {\n                        that._change();\n                    });\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {\n                    var activeIndex = listView.getElementIndex(that._getActiveItem());\n                    var currentIndex = listView.getElementIndex(listView.focus());\n\n                    if (activeIndex !== undefined$1 && currentIndex !== undefined$1) {\n                        that._selectRange(activeIndex, currentIndex);\n                    }\n                    handled = true;\n                    e.preventDefault();\n                } else if (key === keys.ESC) {\n                    if (visible) {\n                        e.preventDefault();\n                    } else {\n                        that.tagList.children(CHIP).each(function(index, tag) {\n                            that._removeTag($(tag), false);\n                        });\n                        that._change();\n                    }\n\n                    that.close();\n                    handled = true;\n                } else if (key === keys.HOME) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n                            }\n                            listView.focusFirst();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).first()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if (key === keys.END) {\n                    if (visible) {\n                        if (!listView.focus()) {\n                            that.close();\n                        } else {\n                            if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                                that._selectRange(\n                                    listView.getElementIndex(listView.focus()[0]),\n                                    listView.element.children().length - 1\n                                );\n                            }\n                            listView.focusLast();\n                        }\n                    } else if (!hasValue) {\n                        tag = that.tagList.children(CHIP).last()[0];\n\n                        if (tag) {\n                            that.currentTag($(tag));\n                        }\n                    }\n                    handled = true;\n                } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n                    that._state = ACCEPT;\n\n                    if (that.options.tagMode === \"single\") {\n                        that._clearSingleTagValue();\n\n                        that._change();\n                        that._close();\n                        e.stopPropagation();\n                        return;\n                    }\n\n                    if (key === keys.BACKSPACE && !tag) {\n                        tag = that.tagList.children(CHIP).last();\n                    }\n\n                    if (tag && tag[0]) {\n                        that._removeTag(tag, true);\n                    }\n                    handled = true;\n                } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n                    e.preventDefault();\n\n                    var direction = key === keys.PAGEDOWN ? 1 : -1;\n                    listView.scrollWith(direction * listView.screenHeight());\n                    handled = true;\n                } else {\n                    clearTimeout(that._typingTimeout);\n                    that._search();\n                    handled = true;\n                }\n\n                if (handled) {\n                    e.stopPropagation();\n                }\n            },\n\n            _placeholder: function(show, skipCaret) {\n                var that = this;\n                var input = that.input;\n                var active = activeElement();\n                var placeholder = that.options.placeholder;\n                var inputValue = input.val();\n                var isActive = input[0] === active;\n                var caretPos = inputValue.length;\n\n                if (!isActive || that.options.autoClose || inputValue === placeholder) {\n                    caretPos = 0;\n                    inputValue = \"\";\n                }\n\n                if (show === undefined$1) {\n                    show = false;\n                    if (input[0] !== active) {\n                        show = !that.listView.selectedDataItems()[0];\n                    }\n                }\n\n                that._prev = inputValue;\n                input.toggleClass(\"k-readonly\", show).val(show ? placeholder : inputValue);\n\n                if (isActive && !skipCaret) {\n                    kendo.caret(input[0], caretPos, caretPos);\n                }\n            },\n\n            _option: function(dataValue, dataText, selected) {\n                var option = \"<option\";\n\n                if (dataValue !== undefined$1) {\n                    dataValue += \"\";\n\n                    if (dataValue.indexOf('\"') !== -1) {\n                        dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n                    }\n\n                    option += ' value=\"' + dataValue + '\"';\n                }\n\n                if (selected) {\n                    option += ' selected';\n                }\n\n                option += \">\";\n\n                if (dataText !== undefined$1) {\n                    option += kendo.htmlEncode(dataText);\n                }\n\n                return option += \"</option>\";\n            },\n\n            _render: function(data) {\n                var selectedItems = this.listView.selectedDataItems();\n                var values = this.listView.value();\n                var length = data.length;\n                var selectedIndex;\n                var options = \"\";\n                var dataItem;\n                var value;\n                var idx;\n\n                if (values.length !== selectedItems.length) {\n                    selectedItems = this._buildSelectedItems(values);\n                }\n\n                var custom = {};\n                var optionsMap = {};\n\n                for (idx = 0; idx < length; idx++) {\n                    dataItem = data[idx];\n                    value = this._value(dataItem);\n\n                    selectedIndex = this._selectedItemIndex(value, selectedItems);\n                    if (selectedIndex !== -1) {\n                        selectedItems.splice(selectedIndex, 1);\n                    }\n\n                    optionsMap[value] = idx;\n                    options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n                }\n\n                if (selectedItems.length) {\n                    for (idx = 0; idx < selectedItems.length; idx++) {\n                        dataItem = selectedItems[idx];\n\n                        value = this._value(dataItem);\n                        custom[value] = length;\n                        optionsMap[value] = length;\n\n                        length += 1;\n                        options += this._option(value, this._text(dataItem), true);\n                    }\n                }\n\n                this._customOptions = custom;\n                this._optionsMap = optionsMap;\n\n                this.element.html(options);\n            },\n\n            _buildSelectedItems: function(values) {\n                var valueField = this.options.dataValueField;\n                var textField = this.options.dataTextField;\n                var result = [];\n                var item;\n\n                for (var idx = 0; idx < values.length; idx++) {\n                    item = {};\n                    item[valueField] = values[idx];\n                    item[textField] = values[idx];\n\n                    result.push(item);\n                }\n\n                return result;\n            },\n\n            _selectedItemIndex: function(value, selectedItems) {\n                var valueGetter = this._value;\n                var idx = 0;\n\n                for (; idx < selectedItems.length; idx++) {\n                    if (value === valueGetter(selectedItems[idx])) {\n                        return idx;\n                    }\n                }\n\n                return -1;\n            },\n\n            _search: function(noDelay) {\n                let that = this;\n\n                // noDelay may come as an even object, that is why an explicit === true check is needed.\n                if (noDelay === true) {\n                    that._performSearch();\n                    return;\n                }\n\n                clearTimeout(that._typingTimeout);\n\n                that._typingTimeout = setTimeout(function() {\n                    that._performSearch();\n                }, that.options.delay);\n            },\n\n            _performSearch: function() {\n                var that = this,\n                    value = that._inputValue();\n\n                if (that._prev !== value) {\n                    that._prev = value;\n                    that.search(value);\n                    that._toggleCloseVisibility();\n                }\n            },\n\n            _toggleCloseVisibility: function() {\n                if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {\n                    this._showClear();\n                } else {\n                    this._hideClear();\n                }\n            },\n\n            _allowOpening: function() {\n                return this._allowSelection() && List.fn._allowOpening.call(this);\n            },\n\n            _allowSelection: function() {\n                var max = this.options.maxSelectedItems;\n                return max === null || max > this.listView.value().length;\n            },\n\n            updatePersistTagList: function(added, removed) {\n                if (this.persistTagList.added &&\n                    this.persistTagList.added.length === removed.length &&\n                    this.persistTagList.removed &&\n                    this.persistTagList.removed.length === added.length) {\n                        this.persistTagList = false;\n                 } else {\n                     this.listView._removedAddedIndexes = this._old.slice();\n                     this.persistTagList = {\n                         added: added,\n                         removed: removed\n                     };\n                 }\n            },\n\n            _selectValue: function(added, removed) {\n                var that = this;\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n                var getter = that._value;\n                var removedItem;\n                var addedItem;\n                var idx;\n\n                if (this.persistTagList) {\n                    this.updatePersistTagList(added, removed);\n                    that._refreshTagListAria();\n\n                    return;\n                }\n\n                if (that.options.tagMode === \"multiple\") {\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        removedItem = removed[idx];\n\n                        if (tagList.children(CHIP).length) {\n                            tagList[0].removeChild(tagList[0].children[removedItem.position]);\n                            that._setOption(getter(removedItem.dataItem), false);\n                        }\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        addedItem = added[idx];\n\n                        that.tagList.append(that.tagTemplate(addedItem.dataItem));\n\n                        that._setOption(getter(addedItem.dataItem), true);\n                    }\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                } else {\n                    if (!that._maxTotal || that._maxTotal < total) {\n                        that._maxTotal = total;\n                    }\n\n                    this._updateTagListHTML();\n\n                    for (idx = removed.length - 1; idx > -1; idx--) {\n                        that._setOption(getter(removed[idx].dataItem), false);\n                    }\n\n                    for (idx = 0; idx < added.length; idx++) {\n                        that._setOption(getter(added[idx].dataItem), true);\n                    }\n                }\n\n                that._refreshTagListAria();\n                that._refreshFloatingLabel();\n\n                that._placeholder();\n            },\n\n            _refreshTagListAria: function() {\n                var that = this;\n                html.renderChipList(that.tagList, $.extend({ selectable: that.value().length === 0 ? \"none\" : \"multiple\" }, that.options));\n            },\n\n            _updateTagListHTML: function() {\n                var that = this;\n                var values = that.value();\n                var total = that.dataSource.total();\n                var tagList = that.tagList;\n\n                tagList.children(CHIP).each(function(index, tag) {\n                    $(tag).remove();\n                });\n\n                if (values.length) {\n                    that.tagList.append(that.tagTemplate({\n                        values: values,\n                        dataItems: that.dataItems(),\n                        maxTotal: that._maxTotal,\n                        currentTotal: total\n                    }));\n\n                    kendo.applyStylesFromKendoAttributes(that.tagList, [\"background-color\"]);\n                }\n\n                that._refreshTagListAria();\n            },\n\n            _select: function(candidate) {\n                var resolved = $.Deferred().resolve();\n\n                if (!candidate) {\n                    return resolved;\n                }\n\n                var that = this;\n                var listView = that.listView;\n                var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n                var isSelected = candidate.hasClass(\"k-selected\");\n\n                if (that._state === REBIND) {\n                    that._state = \"\";\n                }\n\n                if (!that._allowSelection() && !isSelected) {\n                    return resolved;\n                }\n\n                if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {\n                    that._close();\n                    return resolved;\n                }\n\n                that.persistTagList = false;\n                return listView.select(candidate).done(function() {\n                    that._placeholder();\n\n                    if (that._state === FILTER) {\n                        that._state = ACCEPT;\n                        listView.skipUpdate(true);\n                    }\n                });\n            },\n\n            _selectIndices: function(indices) {\n                let listView = this.listView;\n                let that = this;\n\n                listView.select(indices).done(function() {\n                    indices.forEach(function(index) {\n                        var dataItem = listView.dataItemByIndex(index);\n                        var candidate = listView.element.children()[index];\n                        var isSelected = $(candidate).hasClass(\"k-selected\");\n\n                        that.trigger(isSelected ? SELECT : DESELECT, { dataItem: dataItem, item: $(candidate) });\n                    });\n                    that._change();\n                });\n            },\n\n            _selectRange: function(startIndex, endIndex) {\n                var that = this;\n                var maxSelectedItems = this.options.maxSelectedItems;\n                var indices = this._getSelectedIndices().slice();\n                var indicesToSelect = [];\n                var i;\n\n                if (indices.length - 1 === endIndex - startIndex) {\n                    return that._selectIndices(indices);\n                }\n\n                if (startIndex < endIndex) {\n                    for (i = startIndex; i <= endIndex; i++) {\n                        indicesToSelect.push(i);\n                    }\n                } else {\n                    for (i = startIndex; i >= endIndex; i--) {\n                        indicesToSelect.push(i);\n                    }\n                }\n\n                if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n                    indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n                }\n\n                for (i = 0; i < indicesToSelect.length; i++) {\n                    var index = indicesToSelect[i];\n\n                    if (this._getSelectedIndices().indexOf(index) == -1) {\n                        indices.push(index);\n                    } else {\n                        indices.splice(indices.indexOf(index), 1);\n                    }\n                }\n\n                if (!indices.length) {\n                    return;\n                }\n\n                that.persistTagList = false;\n                return that._selectIndices(indices);\n            },\n\n            _input: function() {\n                var that = this;\n                var element = that.element;\n                var accessKey = element[0].accessKey;\n                var input = that._inputValuesContainer.children(\"input.k-input-inner\");\n\n                if (!input[0]) {\n                    input = $('<input class=\"k-input-inner\" />').appendTo(that._inputValuesContainer);\n                }\n\n                element.removeAttr(\"accesskey\");\n                input.attr(\"data-validate\", \"false\");\n                input.attr(\"inputmode\", that.options.inputMode);\n\n                that._focused = that.input = input.attr({\n                    \"autocomplete\": AUTOCOMPLETEVALUE,\n                    \"title\": element[0].title\n                });\n\n                if (accessKey) {\n                    that._focused.attr(\"accesskey\", accessKey);\n                }\n            },\n\n            _inputValuesContainer: function() {\n                var that = this,\n                    inputValuesContainer = that.wrapper.children(\".k-input-values\");\n\n                if (!inputValuesContainer[0]) {\n                    inputValuesContainer = $('<div class=\"k-input-values\"></div>').appendTo(that.wrapper);\n                }\n\n                that._inputValuesContainer = inputValuesContainer;\n            },\n\n            _tagList: function() {\n                var that = this,\n                    options = that.options,\n                    tagList = that._inputValuesContainer.children(\".k-chip-list\");\n\n                if (!tagList[0]) {\n                    tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-selection-multiple\" />', $.extend({ selectable: \"none\" }, options))).appendTo(that._inputValuesContainer);\n                }\n\n                that.tagList = tagList;\n            },\n\n            _tagTemplate: function() {\n                var that = this;\n                var options = that.options;\n                var tagTemplate = options.tagTemplate;\n                var hasDataSource = options.dataSource;\n                var isMultiple = options.tagMode === \"multiple\";\n                var singleTag = options.messages.singleTag;\n                var defaultTemplate;\n                var multipleTemplateFunc;\n                var singleTemplateFunc;\n\n                if (that.element[0].length && !hasDataSource) {\n                    options.dataTextField = options.dataTextField || \"text\";\n                    options.dataValueField = options.dataValueField || \"value\";\n                }\n\n                multipleTemplateFunc = data => encode(kendo.getter(options.dataTextField)(data));\n                singleTemplateFunc = ({ values }) => `${values.length} ${encode(singleTag)}`;\n\n                defaultTemplate = isMultiple ? multipleTemplateFunc : singleTemplateFunc;\n\n                that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n                that.tagTemplate = function(data) {\n                    return html.renderChip('<span unselectable=\"on\">' +\n                    '</span>', $.extend({}, options, {\n                            fillMode: \"solid\",\n                            rounded: \"medium\",\n                            enabled: true,\n                            themeColor: \"base\",\n                            text: tagTemplate(data),\n                            attr: {\n                                unselectable: \"on\",\n                                \"aria-selected\": true,\n                                role: \"option\",\n                                \"aria-keyshortcuts\": isMultiple ? \"Enter Delete\" : \"Enter\"\n                            },\n                            removable: isMultiple,\n                            removableAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": that.options.messages.deleteTag,\n                                title: that.options.messages.deleteTag\n                            },\n                            icon: !isMultiple ? \"caret-alt-down\" : \"\",\n                            iconAttr: {\n                                unselectable: \"on\",\n                                \"aria-hidden\": true,\n                                \"aria-label\": 'open'\n                            }\n                        })\n                    );\n                };\n            },\n\n            _popup: function() {\n                List.fn._popup.call(this);\n                this.popup.element.addClass(\"k-multiselect-popup\");\n            },\n\n            _clearButton: function() {\n                List.fn._clearButton.call(this);\n\n                if (this.options.clearButton) {\n                    this._clear.insertAfter(this._inputValuesContainer);\n                }\n            },\n\n            _arrowButton: function() {\n                var arrowTitle = encode(this.options.messages.downArrow),\n                    arrow = $(html.renderButton('<button type=\"button\" aria-label=\"' + arrowTitle + '\" class=\"k-input-button\"></button>', $.extend({}, this.options, {\n                        icon: \"caret-alt-down\",\n                        rounded: null\n                    })));\n\n                if (this._arrow) {\n                    this._arrow.remove();\n                    this._arrow = null;\n                }\n\n                if (this.options.downArrow) {\n                    this._arrow = arrow.attr({\n                        \"tabIndex\": -1\n                    });\n\n                    this._arrow.appendTo(this.wrapper);\n                }\n            },\n\n            _textContainer: function() {\n                var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n\n                computedStyles.position = \"absolute\";\n                computedStyles.visibility = \"hidden\";\n                computedStyles.top = -3333;\n                computedStyles.left = -3333;\n\n                this._span = $(\"<span/>\").css(computedStyles).appendTo(this.wrapper);\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    element = that.element,\n                    wrapper = element.parent(\"span.k-multiselect\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap('<span class=\"k-multiselect k-input\" unselectable=\"on\" />').parent();\n                    wrapper[0].style.cssText = element[0].style.cssText;\n                }\n\n                that.wrapper = wrapper\n                                .addClass(element[0].className)\n                                .removeClass('input-validation-error').css(\"display\", \"\");\n            },\n\n            _closeHandler: function(e) {\n                if (this.trigger(CLOSE)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, false);\n                    this.ul.attr(ARIA_HIDDEN, true);\n                }\n            },\n\n            _openHandler: function(e) {\n                this._adjustListWidth();\n\n                if (this.trigger(OPEN)) {\n                    e.preventDefault();\n                } else {\n                    this.input.attr(ARIA_EXPANDED, true);\n                    this.ul.attr(ARIA_HIDDEN, false);\n                }\n            }\n        });\n\n        function compare(a, b) {\n            var length;\n\n            if ((a === null && b !== null) || (a !== null && b === null)) {\n                return false;\n            }\n\n            length = a.length;\n            if (length !== b.length) {\n                return false;\n            }\n\n            while (length--) {\n                if (a[length] !== b[length]) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        ui.plugin(MultiSelect);\n\n        kendo.cssProperties.registerPrefix(\"MultiSelect\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"MultiSelect\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}