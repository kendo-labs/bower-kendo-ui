{"version":3,"sources":["raw-js/kendo.buttongroup.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendobuttongroup","js","this","$","undefined$1","kendo","window","ui","Widget","ToggleButton","Button","keys","NS","KBUTTON","SELECTED","DISABLED","SELECT","ARIA_DISABLED","DOT","NONE","SINGLE","MULTIPLE","FOCUS","ButtonGroup","extend","init","element","options","that","fn","call","wrapper","selectedIndices","_buttons","_renderItems","items","addClass","EMPTY","attr","_enable","enable","enabled","forEach","b","selection","select","index","_attachEvents","events","name","preventKeyNav","size","rounded","fillMode","themeColor","badge","item","value","badgeEl","button","isNaN","find","getKendoToggleButton","getKendoButton","validValue","_badge","text","htmlEncode","destroy","empty","remove","current","off","each","i","el","component","toggleClass","focused","hasClass","is","removeAttr","trigger","nodeType","length","idx","toggle","_toggleIndex","_resetIndexes","_addButton","selected","btn","bind","_select","on","_keyDown","e","buttonGroup","focusableItems","focusedElement","currentIndex","isRtl","support","keyCode","LEFT","RIGHT","eq","preventDefault","_decorateButtons","buttons","groupOptions","children","image","disabled","attrValue","icon","push","encoded","url","html","attributes","appendTo","indices","target","indexOf","splice","plugin","jQuery"],"mappings":"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","file":"kendo.buttongroup.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js'), require('kendo.togglebutton.js'), require('kendo.button.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core', 'kendo.togglebutton', 'kendo.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendobuttongroup = global.kendobuttongroup || {}, global.kendobuttongroup.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"buttongroup\",\n        name: \"ButtonGroup\",\n        category: \"web\",\n        description: \"The Kendo ButtonGroup widget is a linear set of grouped buttons.\",\n        depends: [ \"core\", \"togglebutton\", \"button\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var ToggleButton = ui.ToggleButton;\n        var Button = ui.Button;\n        var keys = kendo.keys;\n        var NS = \".kendoButtonGroup\";\n        var KBUTTONGROUP = \"k-button-group k-button-group-solid\";\n        var KBUTTON = \"k-button\";\n        var SELECTED = \"k-selected\";\n        var DISABLED = \"k-disabled\";\n        var KFOCUS = \"k-focus\";\n        var SELECT = \"select\";\n        var KEYDOWN = \"keydown\";\n        var ARIA_DISABLED = \"aria-disabled\";\n        var EMPTY = \" \";\n        var DOT = \".\";\n        var NONE = \"none\";\n        var SINGLE = \"single\";\n        var MULTIPLE = \"multiple\";\n        var TOGGLE = \"toggle\";\n        var FOCUS = \"focus\";\n\n        var ButtonGroup = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.wrapper = that.element;\n\n                that.selectedIndices = [];\n\n                that._buttons = that._renderItems(that.options.items);\n\n                that.element\n                    .addClass(EMPTY + KBUTTONGROUP)\n                    .attr(\"role\", \"group\");\n\n                that._enable = true;\n\n                if (!that.options.enable || !that.options.enabled) {\n                    that._enable = false;\n                    that.element\n                            .attr(ARIA_DISABLED, true)\n                            .addClass(DISABLED);\n\n                    that._buttons.forEach((b) => {\n                        b.enable(false);\n                    });\n                }\n\n                if (that.options.selection !== NONE) {\n                    that.select(that.options.index);\n                }\n\n                that._attachEvents();\n            },\n\n            events: [\n                SELECT\n            ],\n\n            options: {\n                name: \"ButtonGroup\",\n                selection: SINGLE,\n                index: -1,\n                enable: true,\n                enabled: true,\n                preventKeyNav: false,\n                size: \"medium\",\n                rounded: \"medium\",\n                fillMode: \"solid\",\n                themeColor: \"base\"\n            },\n\n            badge: function(item, value) {\n                var that = this,\n                    element = that.element,\n                    button = !isNaN(item) ? that._buttons[item] : element.find(item).getKendoToggleButton() || element.find(item).getKendoButton(),\n                    validValue = value || value === 0,\n                    badge, badgeEl;\n\n                if (!button) {\n                    return;\n                }\n\n                badge = button.badge;\n\n                if (!badge && validValue) {\n                    button._badge({ text: kendo.htmlEncode(value) });\n                    return kendo.htmlEncode(value);\n                }\n\n                if (validValue) {\n                    badge.text(kendo.htmlEncode(value));\n                } else if (value === false) {\n                    button.badge = null;\n                    badgeEl = badge.element;\n                    badge.destroy();\n                    badgeEl.empty().remove();\n                    return;\n                }\n\n                return badge ? badge.text() : null;\n            },\n\n            current: function() {\n                return this.element.find(DOT + SELECTED);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n\n                that.element.find(DOT + KBUTTON).each(function(i, el) {\n                    var component = $(el).getKendoToggleButton() || $(el).getKendoButton();\n\n                    if (component) {\n                        component.destroy();\n                    }\n                });\n\n                Widget.fn.destroy.call(that);\n            },\n\n            enable: function(enable) {\n                if (typeof enable == \"undefined\") {\n                    enable = true;\n                }\n\n                this.element\n                        .attr(ARIA_DISABLED, !enable)\n                        .toggleClass(DISABLED, !enable);\n\n                this._buttons.forEach((b) => {\n                    var focused = b.element.hasClass(KFOCUS) || b.element.is(\":focus\");\n\n                    b.enable(enable);\n\n                    if (focused) {\n                        b.element.removeAttr(\"disabled\").addClass(\"k-focus\").trigger(\"focus\");\n                    }\n                });\n\n                this._enable = this.options.enable = enable;\n            },\n\n            select: function(el) {\n                var that = this,\n                    button,\n                    index = -1;\n\n                if (this.options.selection === NONE || el === undefined$1 || el === -1) {\n                    return;\n                }\n\n                if (typeof el === \"number\") {\n                    index = el;\n                } else if (el.nodeType) {\n                    el = $(el);\n                    index = el.index();\n                } else {\n                    index = el.index();\n                }\n\n                button = that._buttons[index];\n\n                if (!button) {\n                    return;\n                }\n\n                if (that.options.selection === MULTIPLE) {\n                    if (el.length > 1) {\n                        el.each((i, element) => {\n                            var idx = $(element).index();\n\n                            that._buttons[idx].toggle();\n                            that._toggleIndex(idx);\n                        });\n                    } else {\n                        that._buttons[index].toggle();\n                        that._toggleIndex(index);\n                    }\n                } else {\n                    that._resetIndexes(index);\n                }\n            },\n\n            _addButton: function(el, options) {\n                if (this.options.selection === NONE) {\n                    delete options.selected;\n\n                    return new Button(el, options);\n                } else {\n                    var btn = new ToggleButton(el, options);\n\n                    btn.bind(TOGGLE, this._select.bind(this, el));\n\n                    return btn;\n                }\n            },\n\n            _attachEvents: function() {\n                if (!this.options.preventKeyNav) {\n                    this.element.on(KEYDOWN + NS, this._keyDown.bind(this));\n                }\n            },\n\n            _keyDown: function(e) {\n                var that = this,\n                    buttonGroup = $(that.element),\n                    focusableItems = buttonGroup.find(DOT + KBUTTON),\n                    focusedElement = buttonGroup.find(\":focus\"),\n                    currentIndex = focusableItems.index(focusedElement),\n                    isRtl = kendo.support.isRtl(that.element),\n                    itemToFocus;\n\n                if ((e.keyCode === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {\n                    itemToFocus = currentIndex === 0 ? focusableItems.eq(focusableItems.length - 1) : $(focusableItems[currentIndex - 1]);\n                    itemToFocus.trigger(FOCUS);\n                    e.preventDefault();\n                } else if ((e.keyCode === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {\n                    itemToFocus = currentIndex + 1 === focusableItems.length ? focusableItems.eq(0) : $(focusableItems[currentIndex + 1]);\n                    itemToFocus.trigger(FOCUS);\n                    e.preventDefault();\n                }\n            },\n\n            _decorateButtons: function(buttons) {\n                if (buttons.length) {\n                    $(buttons[0].element).addClass(\"k-group-start\");\n                    $(buttons[buttons.length - 1].element).addClass(\"k-group-end\");\n                }\n            },\n\n            _renderItems: function(items) {\n                var that = this,\n                    groupOptions = that.options,\n                    children = that.element.children(),\n                    buttons = [];\n\n                if (children.length > 0) {\n                    children.each(function(index) {\n                        var el = $(this),\n                            image = el.find(\"img\").addClass(\"k-image\"),\n                            disabled = el.is(\"[disabled]\") || el.hasClass(DISABLED),\n                            options = {\n                                badge: kendo.attrValue(el, \"badge\"),\n                                icon: !image[0] ? kendo.attrValue(el, \"icon\") : null,\n                                disabled: disabled,\n                                selected: !disabled ? el.is(DOT + SELECTED) : false,\n                                size: groupOptions.size,\n                                rounded: groupOptions.rounded,\n                                fillMode: groupOptions.fillMode,\n                                themeColor: groupOptions.themeColor\n                            };\n\n                        buttons.push(that._addButton(el, options));\n\n                        if (options.selected) {\n                            that.selectedIndices.push(index);\n                        }\n                    });\n                }\n\n                if (!items) {\n                    that._decorateButtons(buttons);\n                    return buttons;\n                }\n\n                items.forEach(function(item, index) {\n                    var text = item.text ? item.encoded === false ? item.text : kendo.htmlEncode(item.text) : \"\",\n                        el = item.url ? $(\"<a href=\" + item.url + \">\") : $(\"<button>\");\n\n                    el.html(text);\n\n                    if (item.attributes) {\n                        el.attr(item.attributes);\n                    }\n\n                    item = $.extend({}, item, {\n                        size: groupOptions.size,\n                        rounded: groupOptions.rounded,\n                        fillMode: groupOptions.fillMode,\n                        themeColor: groupOptions.themeColor\n                    });\n\n                    el.appendTo(that.element);\n                    buttons.push(that._addButton(el, item));\n\n                    if (item.selected) {\n                        that.selectedIndices.push(index);\n                    }\n                });\n\n                that._decorateButtons(buttons);\n\n                return buttons;\n            },\n\n            _resetIndexes: function(index) {\n                this.selectedIndices = [];\n                this._buttons.forEach((b) => {\n                    b.toggle(false);\n                });\n\n                this._buttons[index].toggle(true);\n                this.selectedIndices.push(index);\n            },\n\n            _select: function(button) {\n                var selection = this.options.selection,\n                    index = button.index();\n\n                if (!this._enable || button.is(DOT + DISABLED)) {\n                    return;\n                }\n\n                if (selection === MULTIPLE) {\n                    this._toggleIndex(index);\n                } else if (selection === SINGLE) {\n                    this._resetIndexes(index);\n                }\n\n                this.trigger(SELECT, { indices: this.selectedIndices, target: button });\n            },\n\n            _toggleIndex: function(index) {\n                if (this.selectedIndices.indexOf(index) === -1) {\n                    this.selectedIndices.push(index);\n                } else {\n                    this.selectedIndices.splice(this.selectedIndices.indexOf(index), 1);\n                }\n            }\n        });\n\n        ui.plugin(ButtonGroup);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}