{"version":3,"sources":["raw-js/kendo.datetimepicker.js"],"names":["factory","define","amd","$","undefined$1","kendo","window","TimeView","html","parse","parseDate","support","activeElement","_activeElement","extractFormat","_extractFormat","calendar","isInRange","restrictValue","isEqualDatePart","getMilliseconds","ui","Widget","OPEN","CLOSE","CHANGE","ns","CLICK","UP","mouseAndTouchPresent","applyEventMap","slice","DISABLED","READONLY","FOCUSED","STATEDISABLED","HOVEREVENTS","MOUSEDOWN","MONTH","ARIA_ACTIVEDESCENDANT","ARIA_EXPANDED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DATE","Date","MIN","MAX","dateViewParams","view","timeViewParams","extend","SINGLE_POPUP_TEMPLATE","buttonSize","messages","renderButton","date","size","time","set","themeColor","cancel","STATE_SELECTED","DateTimePicker","init","element","options","initialValue","that","this","componentType","fn","call","disableDates","disabled","min","attr","max","startTime","endTime","_specifiedRange","normalize","_initialOptions","_wrapper","singlePopup","_popup","_views","_icons","_reset","_template","setAttribute","e","type","addClass","role","dateView","_dateViewID","timeView","_timeViewID","autocomplete","_midnight","_calculateMidnight","is","parents","enable","readonly","value","val","parseFormats","culture","_createDateInput","_old","_update","_oldText","_applyCssClasses","label","_label","notify","name","format","timeFormat","dates","interval","height","footer","start","depth","animation","month","ARIATemplate","valueType","text","dateButtonText","timeButtonText","dateInput","weekNumber","hour","minute","second","millisecond","now","today","weekColumnHeader","fillMode","rounded","events","componentTypes","classic","list","modern","setOptions","currentValue","_value","_current","_dateIcon","off","remove","_timeIcon","_editable","_dateInput","toString","_updateARIA","_inputLabel","_unwrapFloating","dateIcon","timeIcon","wrapper","disable","removeClass","on","_toggleHover","length","removeAttribute","_keydown","bind","_change","current","getToday","close","preventDefault","toggle","_focusElement","labelOptions","isPlainObject","content","floatCheck","_toggleDateMask","_hasDateInput","document","Label","widget","eventType","touch","match","trigger","floatingLabel","destroy","popup","_form","_resetHandler","setTimeout","removeAttr","open","popupHovered","_calendar","ul","find","_hovered","_switchToTimeView","_switchToDateView","_option","visible","secondView","refresh","dateChanged","oldValue","valueUpdated","_typing","textFormatted","option","minDateEqual","maxDateEqual","timeViewOptions","maxSet","getTime","lastTimeOption","dataBind","currentTarget","toggleClass","rebind","old","skip","formattedValue","isSameType","String","grep","d","isDateViewVisible","stopPropagation","stopImmediatePropagation","altKey","keyCode","keys","DOWN","move","ENTER","_timeOption","arg","timeOption","dateRangeOption","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","div","msMin","timeDiv","omitPopup","id","dateDiv","DateView","anchor","change","_applyDateValue","_currentlySelected","setFullYear","setMonth","setDate","_toggleIcons","validateDate","_applyTimeValue","_timeSelected","_adjustListWidth","_updateTitle","active","_optionID","useValueToRender","specifiedRange","adjustedDate","msValue","msMax","setHours","_parse","icon","shape","insertAfter","hide","wrap","parent","style","cssText","css","className","formId","form","closest","disabledDate","optionsValue","defaultValue","_ariaTemplate","template","DateInput","_updateAria","appendTo","body","append","Popup","isRtl","activate","addTranslate","applyValue","_updateRanges","sender","_groupChangeClick","_cancelClickHandler","_setClickHandler","index","eq","_updateCurrentlySelected","setMinutes","setSeconds","patterns","getCulture","calendars","standard","g","t","unshift","inArray","push","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","jQuery"],"mappings":"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","file":"kendo.datetimepicker.min.js","sourcesContent":["(function (factory) {\n    typeof define === 'function' && define.amd ? define(['kendo.timepicker', 'kendo.html.button', 'kendo.label'], factory) :\n    factory();\n})((function () {\n    // The current file development is no longer in active phase but the code will be kept as is.\n\n    var __meta__ = {\n        id: \"datetimepicker\",\n        name: \"DateTimePicker\",\n        category: \"web\",\n        description: \"The DateTimePicker allows the end user to select a value from a calendar or a time drop-down list.\",\n        depends: [ \"datepicker\", \"timepicker\", \"label\" ]\n    };\n\n    (function($, undefined$1) {\n\n        var kendo = window.kendo,\n            TimeView = kendo.TimeView,\n            html = kendo.html,\n            parse = kendo.parseDate,\n            support = kendo.support,\n            activeElement = kendo._activeElement,\n            extractFormat = kendo._extractFormat,\n            calendar = kendo.calendar,\n            isInRange = calendar.isInRange,\n            restrictValue = calendar.restrictValue,\n            isEqualDatePart = calendar.isEqualDatePart,\n            getMilliseconds = TimeView.getMilliseconds,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            ns = \".kendoDateTimePicker\",\n            CLICK = \"click\" + ns,\n            UP = support.mouseAndTouchPresent ? kendo.applyEventMap(\"up\", ns.slice(1)) : CLICK,\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            HOVER = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            MOUSEDOWN = \"mousedown\" + ns,\n            MONTH = \"month\",\n            SPAN = \"<span/>\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            DATE = Date,\n            MIN = new DATE(1800, 0, 1),\n            MAX = new DATE(2099, 11, 31),\n            dateViewParams = { view: \"date\" },\n            timeViewParams = { view: \"time\" },\n            extend = $.extend,\n            SINGLE_POPUP_TEMPLATE = ({ buttonSize, messages }) => '<div class=\"k-date-tab k-datetime-wrap\">' +\n                                        '<div class=\"k-datetime-buttongroup\">' +\n                                            '<div class=\"k-button-group k-button-group-stretched\">' +\n                                                kendo.html.renderButton(`<button class=\"k-selected k-group-start\">${messages.date}</button>`, {\n                                                    size: buttonSize\n                                                }) +\n                                                kendo.html.renderButton(`<button class=\"k-group-end\">${messages.time}</button>`, {\n                                                    size: buttonSize\n                                                }) +\n                                            '</div>' +\n                                        '</div>' +\n                                        '<div class=\"k-datetime-selector\">' +\n                                            '<div class=\"k-datetime-calendar-wrap\">' +\n                                            '</div>' +\n                                            '<div class=\"k-datetime-time-wrap\">' +\n                                            '</div>' +\n                                        '</div>' +\n                                        '<div class=\"k-datetime-footer k-actions\">' +\n                                            kendo.html.renderButton(`<button class=\"k-time-accept\" title=\"Set\" aria-label=\"Set\">${messages.set}</button>`, {\n                                                size: buttonSize,\n                                                themeColor: \"primary\"\n                                            }) +\n                                            kendo.html.renderButton(`<button class=\"k-time-cancel\" title=\"Cancel\" aria-label=\"Cancel\">${messages.cancel}</button>`, {\n                                                size: buttonSize\n                                            }) +\n                                        '</div>' +\n                                    '</div>',\n            STATE_SELECTED = \"k-selected\";\n\n        var DateTimePicker = Widget.extend({\n            init: function(element, options) {\n                var that = this, disabled, initialValue;\n\n                options = options || {};\n                options.componentType = options.componentType || \"classic\";\n                Widget.fn.init.call(that, element, options);\n\n                element = that.element;\n                options = that.options;\n\n                options.disableDates = kendo.calendar.disabled(options.disableDates);\n                options.min = parse(element.attr(\"min\")) || parse(options.min);\n                options.max = parse(element.attr(\"max\")) || parse(options.max);\n\n                if (+options.max != +MAX || +options.min != +MIN || +options.startTime != +MIN || options.endTime != +MAX) {\n                    this._specifiedRange = true;\n                }\n\n                normalize(options);\n\n                that._initialOptions = extend({}, options);\n\n                that._wrapper();\n\n                if (options.singlePopup) {\n                    that._popup();\n                }\n\n                that._views();\n\n                that._icons();\n\n                that._reset();\n                that._template();\n\n                try {\n                    element[0].setAttribute(\"type\", \"text\");\n                } catch (e) {\n                    element[0].type = \"text\";\n                }\n\n                element.addClass(\"k-input-inner\")\n                       .attr({\n                           \"role\": \"combobox\",\n                           \"aria-expanded\": false,\n                           \"aria-haspopup\": \"grid\",\n                           \"aria-controls\": that.dateView._dateViewID + \" \" + that.timeView._timeViewID,\n                           \"autocomplete\": \"off\"\n                       });\n\n\n                that._midnight = that._calculateMidnight(options.min, options.max);\n\n                disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n                if (disabled) {\n                    that.enable(false);\n                } else {\n                    that.readonly(element.is(\"[readonly]\"));\n                }\n\n                initialValue = parse(options.value || that.element.val(), options.parseFormats, options.culture);\n\n                that._createDateInput(options);\n\n                that._old = that._update(initialValue || that.element.val());\n                that._oldText = element.val();\n                that._applyCssClasses();\n\n                if (options.label) {\n                    that._label();\n                }\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"DateTimePicker\",\n                value: null,\n                format: \"\",\n                timeFormat: \"\",\n                culture: \"\",\n                parseFormats: [],\n                dates: [],\n                disableDates: null,\n                startTime: null,\n                endTime: null,\n                min: new DATE(MIN),\n                max: new DATE(MAX),\n                interval: 30,\n                height: 200,\n                footer: \"\",\n                start: MONTH,\n                depth: MONTH,\n                animation: {},\n                month: {},\n                ARIATemplate: ({ valueType, text }) => `Current focused ${valueType} is ${text}`,\n                dateButtonText: \"Open the date view\",\n                timeButtonText: \"Open the time view\",\n                dateInput: false,\n                weekNumber: false,\n                messages: {\n                    set: \"Set\",\n                    cancel: \"Cancel\",\n                    hour: \"hour\",\n                    minute: \"minute\",\n                    second: \"second\",\n                    millisecond: \"millisecond\",\n                    now: \"Now\",\n                    date: \"Date\",\n                    time: \"Time\",\n                    today: \"Today\",\n                    weekColumnHeader: \"\"\n                },\n                componentType: \"classic\",\n                size: \"medium\",\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                label: null\n            },\n\n            events: [\n                OPEN,\n                CLOSE,\n                CHANGE\n            ],\n\n            componentTypes: {\n                \"classic\": {\n                    singlePopup: false,\n                    timeView: {\n                        list: \"list\"\n                    }\n                },\n                \"modern\": {\n                    singlePopup: true,\n                    timeView: {\n                        list: \"scroll\"\n                    }\n                }\n            },\n\n            setOptions: function(options) {\n                var that = this,\n                    value = that._value,\n                    min, max, currentValue;\n\n                Widget.fn.setOptions.call(that, options);\n\n                options = that.options;\n\n                options.min = min = parse(options.min);\n                options.max = max = parse(options.max);\n\n                normalize(options);\n\n                that._midnight = that._calculateMidnight(options.min, options.max);\n\n                currentValue = options.value || that._value || that.dateView._current;\n\n                if (min && !isEqualDatePart(min, currentValue)) {\n                    min = new DATE(MIN);\n                }\n\n                if (max && !isEqualDatePart(max, currentValue)) {\n                    max = new DATE(MAX);\n                }\n\n                that._dateIcon.off(ns);\n                that._dateIcon.remove();\n                that._timeIcon.off(ns);\n                that._timeIcon.remove();\n\n                that.dateView.setOptions(options);\n\n                that.timeView.setOptions(extend({}, options, {\n                    format: options.timeFormat,\n                    min: min,\n                    max: max\n                }));\n\n                that._icons();\n                that._editable(options);\n                that._createDateInput(options);\n\n                if (!that._dateInput) {\n                    that.element.val(kendo.toString(value, options.format, options.culture));\n                }\n\n                if (value) {\n                    that._updateARIA(value);\n                }\n\n                if (options.label && that._inputLabel) {\n                    that.label.setOptions(options.label);\n                } else if (options.label === false) {\n                    that.label._unwrapFloating();\n                    that._inputLabel.remove();\n                    delete that._inputLabel;\n                } else if (options.label) {\n                    that._label();\n                }\n            },\n\n            _editable: function(options) {\n                var that = this,\n                    element = that.element.off(ns),\n                    dateIcon = that._dateIcon.off(ns),\n                    timeIcon = that._timeIcon.off(ns),\n                    wrapper = that.wrapper.off(ns),\n                    readonly = options.readonly,\n                    disable = options.disable;\n\n                if (!readonly && !disable) {\n                    wrapper\n                        .removeClass(STATEDISABLED)\n                        .on(HOVEREVENTS, that._toggleHover);\n                    if (element && element.length) {\n                        element[0].removeAttribute(DISABLED);\n                        element[0].removeAttribute(READONLY, false);\n                        element[0].removeAttribute(ARIA_DISABLED, false);\n                        element[0].removeAttribute(ARIA_READONLY, false);\n                    }\n                    element.on(\"keydown\" + ns, that._keydown.bind(that))\n                           .on(\"focus\" + ns, function() {\n                               that.wrapper.addClass(FOCUSED);\n                           })\n                           .on(\"focusout\" + ns, function() {\n                               that.wrapper.removeClass(FOCUSED);\n                               if (element.val() !== that._oldText) {\n                                   that._change(element.val());\n                                   if (!element.val()) {\n                                       that.dateView.current(kendo.calendar.getToday());\n                                   }\n                               }\n                               if (that.options.singlePopup) {\n                                   return;\n                               }\n                               that.close(\"date\");\n                               that.close(\"time\");\n                           });\n\n                   dateIcon.on(MOUSEDOWN, preventDefault)\n                            .on(UP, function(e) {\n                                that.toggle(\"date\");\n                                that._focusElement(e.type);\n                            });\n\n                   timeIcon.on(MOUSEDOWN, preventDefault)\n                            .on(UP, function(e) {\n                                that.toggle(\"time\");\n                                that._focusElement(e.type);\n                            });\n\n                } else {\n                    wrapper\n                        .addClass(disable ? STATEDISABLED : \"\")\n                        .removeClass(disable ? \"\" : STATEDISABLED);\n\n                    element.attr(DISABLED, disable)\n                           .attr(READONLY, readonly)\n                           .attr(ARIA_DISABLED, disable)\n                           .attr(ARIA_READONLY, readonly);\n                }\n            },\n\n            _label: function() {\n                var that = this;\n                var options = that.options;\n                var labelOptions = $.isPlainObject(options.label) ? options.label : {\n                    content: options.label\n                };\n\n                if (that._dateInput) {\n                    labelOptions.floatCheck = () => {\n                        that._dateInput._toggleDateMask(true);\n\n                        if (!that.value() && !that._dateInput._hasDateInput() && document.activeElement !== that.element[0]) {\n                            that._dateInput._toggleDateMask(false);\n                            return true;\n                        }\n\n                        return false;\n                    };\n                }\n\n                that.label = new kendo.ui.Label(null, $.extend({}, labelOptions, {\n                    widget: that\n                }));\n\n                that._inputLabel = that.label.element;\n            },\n\n            _focusElement: function(eventType) {\n                var element = this.element;\n\n                if ((!support.touch || (support.mouseAndTouchPresent && !(eventType || \"\").match(/touch/i))) && element[0] !== activeElement()) {\n                    element.trigger(\"focus\");\n                }\n            },\n\n            readonly: function(readonly) {\n                this._editable({\n                    readonly: readonly === undefined$1 ? true : readonly,\n                    disable: false\n                });\n\n                if (this.label && this.label.floatingLabel) {\n                    this.label.floatingLabel.readonly(readonly === undefined$1 ? true : readonly);\n                }\n            },\n\n            enable: function(enable) {\n                this._editable({\n                    readonly: false,\n                    disable: !(enable = enable === undefined$1 ? true : enable)\n                });\n\n                if (this.label && this.label.floatingLabel) {\n                    this.label.floatingLabel.enable(enable = enable === undefined$1 ? true : enable);\n                }\n            },\n\n            destroy: function() {\n                var that = this;\n\n                Widget.fn.destroy.call(that);\n                that.dateView.destroy();\n                that.timeView.destroy();\n\n                if (that.label) {\n                    that.label.destroy();\n                }\n\n                if (that.options.singlePopup) {\n                    that.popup.element.off(ns);\n                    that.popup.destroy();\n                }\n\n                that.element.off(ns);\n                that._dateIcon.off(ns);\n                that._timeIcon.off(ns);\n                that.wrapper.off(ns);\n\n                if (that._form) {\n                    that._form.off(\"reset\", that._resetHandler);\n                }\n            },\n\n            close: function(view) {\n                var that = this;\n\n                if (that.options.singlePopup) {\n                    that.popup.close();\n                } else {\n                    if (view !== \"time\") {\n                        view = \"date\";\n                    }\n\n                    that[view + \"View\"].close();\n                }\n\n                setTimeout(function() {\n                    that.element.removeAttr(\"aria-activedescendant\");\n                });\n            },\n\n            open: function(view) {\n                var that = this;\n                var popupHovered;\n\n                if (that.options.singlePopup) {\n\n                    that.dateView._calendar();\n\n                    if (that.timeView.ul.find(\"li\").length < 1) {\n                        that.timeView.bind();\n                    }\n\n                    // In some cases when the popup is opened resize is triggered which will cause it to close\n                    // Setting the below flag will prevent this from happening\n                    // Reference: https://github.com/telerik/kendo/pull/7553\n                    popupHovered = that.popup._hovered;\n                    that.popup._hovered = true;\n\n                    that.popup.open();\n\n                    if (view === \"time\") {\n                        that._switchToTimeView();\n                    } else {\n                        that._switchToDateView();\n                    }\n\n                    this._dateIcon.toggle(view !== \"time\");\n                    this._timeIcon.toggle(view === \"time\");\n\n                    setTimeout(function() {\n                        that.popup._hovered = popupHovered;\n                    }, 1);\n\n                } else {\n                    if (view !== \"time\") {\n                        view = \"date\";\n                    }\n\n                    this[view + \"View\"].open();\n                }\n            },\n\n            min: function(value) {\n                return this._option(\"min\", value);\n            },\n\n            max: function(value) {\n                return this._option(\"max\", value);\n            },\n\n            toggle: function(view) {\n                if (this.options.singlePopup) {\n                    if (this.popup.visible()) {\n                        this.close();\n                    } else {\n                        this.open(view);\n                    }\n                } else {\n                    var secondView = \"timeView\";\n\n                    if (view !== \"time\") {\n                        view = \"date\";\n                    } else {\n                        secondView = \"dateView\";\n                    }\n\n                    this[view + \"View\"].toggle();\n                    this[secondView].close();\n                }\n\n            },\n\n            value: function(value) {\n                var that = this;\n\n                if (value === undefined$1) {\n                    return that._value;\n                }\n\n                that._old = that._update(value);\n                if (that._old === null) {\n                    if (that._dateInput) {\n                        that._dateInput.value(that._old);\n                    } else {\n                        that.element.val(\"\");\n                    }\n                }\n\n                that._oldText = that.element.val();\n\n                if (that.label && that.label.floatingLabel) {\n                    that.label.floatingLabel.refresh();\n                }\n            },\n\n            _change: function(value) {\n                var that = this,\n                oldValue = that.element.val(),\n                dateChanged;\n\n                value = that._update(value);\n                dateChanged = +that._old != +value;\n\n                var valueUpdated = dateChanged && !that._typing;\n                var textFormatted = oldValue !== that.element.val();\n\n                if (valueUpdated || textFormatted) {\n                    that.element.trigger(CHANGE);\n                }\n\n                if (dateChanged) {\n                    that._old = value;\n                    that._oldText = that.element.val();\n\n                    that.trigger(CHANGE);\n                }\n\n                that._typing = false;\n            },\n\n            _option: function(option, value) {\n                var that = this;\n                var options = that.options;\n                var timeView = that.timeView;\n                var timeViewOptions = timeView.options;\n                var current = that._value || that._old;\n                var minDateEqual;\n                var maxDateEqual;\n\n                if (value === undefined$1) {\n                    return options[option];\n                }\n\n                value = parse(value, options.parseFormats, options.culture);\n                timeViewOptions.maxSet = false;\n\n                if (!value) {\n                    return;\n                }\n\n                if (options.min.getTime() === options.max.getTime()) {\n                    timeViewOptions.dates = [];\n                }\n\n                options[option] = new DATE(value.getTime());\n                that.dateView[option](value);\n\n                that._midnight = that._calculateMidnight(options.min, options.max);\n\n                if (current) {\n                    minDateEqual = isEqualDatePart(options.min, current);\n                    maxDateEqual = isEqualDatePart(options.max, current);\n                }\n\n                if (minDateEqual || maxDateEqual) {\n                    timeViewOptions[option] = value;\n\n                    if (minDateEqual && !maxDateEqual) {\n                        timeViewOptions.max = lastTimeOption(options.interval);\n                    }\n\n                    if (maxDateEqual) {\n                        if (that._midnight) {\n                            timeView.dataBind([MAX]);\n                            return;\n                        } else if (!minDateEqual) {\n                            timeViewOptions.min = MIN;\n                            timeViewOptions.maxSet = true;\n                        }\n                    }\n                } else {\n                    timeViewOptions.max = MAX;\n                    timeViewOptions.min = MIN;\n                }\n\n                timeView.bind();\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n            },\n\n            _update: function(value) {\n                var that = this,\n                    options = that.options,\n                    min = options.min,\n                    max = options.max,\n                    startTime = options.startTime,\n                    endTime = options.endTime,\n                    dates = options.dates,\n                    timeView = that.timeView,\n                    current = that._value,\n                    date = parse(value, options.parseFormats, options.culture),\n                    isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),\n                    rebind, timeViewOptions, old, skip, formattedValue;\n\n                if (options.disableDates && options.disableDates(date)) {\n                    date = null;\n                    if (!that._old && !that.element.val()) {\n                        value = null;\n                    }\n                }\n\n                if (+date === +current && isSameType) {\n                    formattedValue = kendo.toString(date, options.format, options.culture);\n\n                    if (formattedValue !== value ) {\n                        that.element.val(date === null ? value : formattedValue);\n                        if (value instanceof String) {\n                            that.element.trigger(CHANGE);\n                        }\n                    }\n\n                    return date;\n                }\n\n                if (date !== null && isEqualDatePart(date, min)) {\n                    date = restrictValue(date, min, max);\n                } else if (!isInRange(date, min, max)) {\n                    date = null;\n                }\n\n                that._value = date;\n                timeView.value(date);\n                that.dateView.value(date);\n\n                if (date) {\n                    old = that._old;\n                    timeViewOptions = timeView.options;\n                    timeViewOptions.maxSet = false;\n\n                    if (dates[0]) {\n                        dates = $.grep(dates, function(d) { return isEqualDatePart(date, d); });\n\n                        if (dates[0]) {\n                            timeView.dataBind(dates);\n                            skip = true;\n                        }\n                    }\n\n                    if (!skip) {\n                        if (isEqualDatePart(date, min)) {\n                            timeViewOptions.min = startTime ? startTime : min;\n                            timeViewOptions.max = endTime ? endTime : lastTimeOption(options.interval);\n                            rebind = true;\n                        }\n\n                        if (isEqualDatePart(date, max)) {\n                            if (that._midnight) {\n                                timeView.dataBind([MAX]);\n                                skip = true;\n                            } else {\n                                timeViewOptions.max = endTime ? endTime : max;\n                                timeViewOptions.maxSet = true;\n                                if (!rebind) {\n                                    timeViewOptions.min = MIN;\n                                }\n                                rebind = true;\n                            }\n                        }\n                    }\n\n                    if (!skip && ((!old && rebind) || (old && !isEqualDatePart(old, date)))) {\n                        if (!rebind) {\n                            timeViewOptions.max = endTime ? endTime : MAX;\n                            timeViewOptions.min = startTime ? startTime : MIN;\n                        }\n\n                        timeView.bind();\n                    }\n                }\n                if (that._dateInput) {\n                    if (date) {\n                        that._dateInput.value(date);\n                    }\n                } else {\n                    that.element.val(kendo.toString(date || value, options.format, options.culture));\n                }\n                that._updateARIA(date);\n\n                return date;\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    dateView = that.dateView,\n                    timeView = that.timeView,\n                    value = that.element.val(),\n                    isDateViewVisible = that.options.singlePopup ? that.popup.visible() : dateView.popup.visible();\n\n                var stopPropagation = that._dateInput && e.stopImmediatePropagation;\n\n                if (e.altKey && e.keyCode === kendo.keys.DOWN) {\n                    that.toggle(isDateViewVisible ? \"time\" : \"date\");\n                } else if (isDateViewVisible) {\n                    dateView.move(e);\n                    that._updateARIA(dateView._current);\n\n                    if (e.keyCode === kendo.keys.ENTER) {\n                        that.toggle(\"time\");\n                    }\n                } else if (!that.options.singlePopup && timeView.popup.visible()) {\n                    timeView.move(e);\n                } else if (e.keyCode === kendo.keys.ENTER && value !== that._oldText) {\n                    that._change(value);\n                } else {\n                    that._typing = true;\n                    stopPropagation = false;\n                }\n                if (stopPropagation) {\n                    e.stopImmediatePropagation();\n                }\n            },\n\n            _timeOption: function(arg) {\n                var that = this,\n                options = that.options,\n                timeOption = options[arg],\n                dateRangeOption = arg == \"startTime\" ? options.min : options.max,\n                option = arg == \"startTime\" ? new DATE(MIN) : new DATE(MAX),\n                date;\n\n                if ( timeOption ) {\n                    option = new DATE(timeOption);\n                }\n\n                if (timeOption && dateRangeOption ) {\n                    date = new Date(dateRangeOption.getFullYear(), dateRangeOption.getMonth(), dateRangeOption.getDate(), timeOption.getHours(), timeOption.getMinutes(), timeOption.getSeconds());\n                    if (arg == \"startTime\" ) {\n                        that.options.min = date;\n                    } else {\n                        that.options.max = date;\n                    }\n                }\n\n                if ( options.componentType === \"modern\") {\n                    option = dateRangeOption;\n                }\n\n                return option;\n            },\n\n            _views: function() {\n                var that = this,\n                    element = that.element,\n                    options = that.options,\n                    id = element.attr(\"id\"),\n                    dateView, timeView,\n                    div, ul, msMin,\n                    date,\n                    timeDiv,\n                    omitPopup,\n                    timeViewOptions;\n\n                if (options.singlePopup) {\n                    options.dateDiv = that.popup.element.find(\".k-datetime-calendar-wrap\");\n                    timeDiv = that.popup.element.find(\".k-datetime-time-wrap\");\n                    options.omitPopup = omitPopup = true;\n                    timeViewOptions = options.timeView;\n                }\n\n                that.dateView = dateView = new kendo.DateView(extend({}, options, {\n                    id: id,\n                    anchor: that.wrapper,\n                    change: function() {\n                        var value = that._applyDateValue();\n\n                        if (options.singlePopup) {\n                            if (!that.timeView._currentlySelected) {\n                                that.timeView._currentlySelected = new Date();\n                            }\n                            that.timeView._currentlySelected.setFullYear(value.getFullYear());\n                            that.timeView._currentlySelected.setMonth(value.getMonth());\n                            that.timeView._currentlySelected.setDate(value.getDate());\n                            that._switchToTimeView();\n                            that._toggleIcons();\n                        } else {\n                            that._change(value);\n                            that.close(\"date\");\n                        }\n                    },\n                    close: function(e) {\n                        if (that.trigger(CLOSE, dateViewParams)) {\n                            e.preventDefault();\n                        } else {\n                            element.attr(ARIA_EXPANDED, false);\n                            div.attr(ARIA_HIDDEN, true);\n                        }\n                    },\n                    open: function(e) {\n                        if (that.trigger(OPEN, dateViewParams)) {\n                            e.preventDefault();\n                        } else {\n\n                            if (element.val() !== that._oldText) {\n                                date = parse(element.val(), options.parseFormats, options.culture);\n\n                                that.dateView[date ? \"current\" : \"value\"](date);\n                            }\n\n                            div.attr(ARIA_HIDDEN, false);\n                            element.attr(ARIA_EXPANDED, true);\n\n                            that._updateARIA(date);\n                        }\n                    }\n                }));\n                div = dateView.div;\n\n                msMin = options.min.getTime();\n                that.timeView = timeView = new TimeView({\n                    id: id,\n                    value: options.value,\n                    size: options.size,\n                    anchor: that.wrapper,\n                    animation: options.animation,\n                    format: options.timeFormat,\n                    culture: options.culture,\n                    height: options.componentType === \"modern\" ? null : options.height,\n                    interval: options.interval,\n                    startTime: options.startTime,\n                    endTime: options.endTime,\n                    min: that._timeOption(\"startTime\"),\n                    max: that._timeOption(\"endTime\"),\n                    dates: msMin === options.max.getTime() ? [new Date(msMin)] : [],\n                    parseFormats: options.parseFormats,\n                    validateDate: (options.startTime || options.endTime ) ? false : true,\n                    change: function(value, trigger) {\n                        value = that._applyTimeValue(value);\n\n                        if (trigger) {\n                            that._timeSelected = true;\n                            that._change(value);\n                        } else {\n                            element.val(kendo.toString(value, options.format, options.culture));\n                            dateView.value(value);\n                            that._updateARIA(value);\n                        }\n                    },\n                    close: function(e) {\n                        if (that.trigger(CLOSE, timeViewParams)) {\n                            e.preventDefault();\n                        } else {\n                            ul.attr(ARIA_HIDDEN, true);\n                            element.attr(ARIA_EXPANDED, false);\n                        }\n                    },\n                    open: function(e) {\n                        if (that.options.componentType !== \"modern\") {\n                            timeView._adjustListWidth();\n                        } else {\n                            that.timeView._updateTitle();\n                        }\n\n                        if (that.trigger(OPEN, timeViewParams)) {\n                            e.preventDefault();\n                        } else {\n                            if (element.val() !== that._oldText) {\n                                date = parse(element.val(), options.parseFormats, options.culture);\n\n                                that.timeView.value(date);\n                            }\n\n                            ul.attr(ARIA_HIDDEN, false);\n                            element.attr(ARIA_EXPANDED, true);\n\n                            timeView.options.active(timeView.current());\n                        }\n                    },\n                    active: function(current) {\n                        if (element && element.length) {\n                            element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n                        }\n                        if (current) {\n                            element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);\n                        }\n                    },\n                    popup: options.popup,\n                    useValueToRender: true,\n                    specifiedRange: that._specifiedRange,\n                    omitPopup: omitPopup,\n                    timeDiv: timeDiv,\n                    timeView: timeViewOptions,\n                    messages: that.options.messages\n                });\n                ul = timeView.ul;\n            },\n\n            _applyDateValue: function() {\n                var that = this;\n                var options = that.options;\n                var dateView = that.dateView;\n                var value = dateView.calendar.value();\n                var msValue = +value;\n                var msMin = +options.min;\n                var msMax = +options.max;\n                var current, adjustedDate;\n\n                if (msValue === msMin || msValue === msMax) {\n                    current = msValue === msMin ? msMin : msMax;\n                    current = new DATE(that._value || current);\n                    current.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());\n\n                    if (isInRange(current, msMin, msMax)) {\n                        value = current;\n                    }\n                }\n\n                if (that._value) {\n\n                    adjustedDate = kendo.date.setHours(new Date(value), that._value);\n\n                    if (isInRange(adjustedDate, msMin, msMax)) {\n                        value = adjustedDate;\n                    }\n                }\n\n                return value;\n            },\n\n            _applyTimeValue: function(value) {\n                var timeView = this.timeView;\n                var options = this.options;\n\n                value = timeView._parse(value);\n\n                if (value < options.min) {\n                    value = new DATE(+options.min);\n                    timeView.options.min = value;\n                } else if (value > options.max) {\n                    value = new DATE(+options.max);\n                    timeView.options.max = value;\n                }\n\n                return value;\n            },\n\n            _icons: function() {\n                var that = this;\n                var element = that.element;\n                var options = that.options;\n                var icons;\n\n                icons = that.wrapper.find(\"button.k-input-button\");\n\n                if (!icons[0]) {\n                    that._dateIcon = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"' + options.dateButtonText + '\"></button>', {\n                        icon: \"calendar\",\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        shape: \"none\",\n                        rounded: \"none\"\n                    })).insertAfter(element);\n                    that._timeIcon = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"' + options.timeButtonText + '\"></button>', {\n                        icon: \"clock\",\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        shape: \"none\",\n                        rounded: \"none\"\n                    })).insertAfter(element);\n                }\n\n                if (options.singlePopup) {\n                    that._timeIcon.hide();\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                element = that.element,\n                wrapper;\n\n                wrapper = element.parents(\".k-datetimepicker\");\n\n                if (!wrapper[0]) {\n                    wrapper = element.wrap(SPAN).parent();\n                }\n\n                wrapper[0].style.cssText = element[0].style.cssText;\n                element.css({\n                    height: element[0].style.height\n                });\n\n                that.wrapper = wrapper.addClass(\"k-datetimepicker k-input\")\n                    .addClass(element[0].className).removeClass('input-validation-error');\n            },\n\n            _reset: function() {\n                var that = this,\n                    element = that.element,\n                    formId = element.attr(\"form\"),\n                    form = formId ? $(\"#\" + formId) : element.closest(\"form\"),\n                    options = that.options,\n                    disabledDate = options.disableDates,\n                    parseFormats = options.parseFormats.length ? options.parseFormats : null,\n                    optionsValue = that._initialOptions.value,\n                    initialValue = element[0].defaultValue;\n\n                if (optionsValue && (disabledDate && disabledDate(optionsValue))) {\n                    optionsValue = null;\n                }\n\n                if ((!initialValue || !kendo.parseDate(initialValue, parseFormats, options.culture)) && optionsValue) {\n                    element.attr(\"value\", kendo.toString(optionsValue, options.format, options.culture));\n                }\n\n                if (form[0]) {\n                    that._resetHandler = function() {\n                        that.value(optionsValue || element[0].defaultValue);\n                        that.max(that._initialOptions.max);\n                        that.min(that._initialOptions.min);\n                    };\n\n                    that._form = form.on(\"reset\", that._resetHandler);\n                }\n            },\n\n            _template: function() {\n                this._ariaTemplate = kendo.template(this.options.ARIATemplate).bind(this);\n            },\n\n            _createDateInput: function(options) {\n                if (this._dateInput) {\n                    this._dateInput.destroy();\n                    this._dateInput = null;\n                }\n\n                if (options.dateInput ) {\n                    this._dateInput = new ui.DateInput(this.element, {\n                        culture: options.culture,\n                        format: options.format,\n                        size: options.size,\n                        fillMode: options.fillMode,\n                        rounded: options.rounded,\n                        min: options.min,\n                        max: options.max,\n                        interval: options.interval,\n                        messages: options.messages.dateInput\n                    });\n                }\n            },\n\n            _calculateMidnight: function(min, max) {\n                return getMilliseconds(min) + getMilliseconds(max) === 0;\n            },\n\n            _updateARIA: function(date) {\n                var that = this;\n                var calendar = that.dateView.calendar;\n\n                if (that.element && that.element.length) {\n                    that.element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n                }\n\n                if (calendar) {\n                    that.element.attr(ARIA_ACTIVEDESCENDANT, calendar._updateAria(that._ariaTemplate, date));\n                }\n            },\n            _popup: function() {\n                var that = this;\n                var options = that.options;\n                var div = $(\"<div></div>\").attr(ARIA_HIDDEN, \"true\")\n                    .addClass(\"k-datetime-container k-group k-reset\")\n                    .appendTo(document.body);\n\n                div.append(kendo.template(SINGLE_POPUP_TEMPLATE)(extend({}, that.options, {\n                    buttonSize: that.options.size\n                })));\n                that.popup = new ui.Popup(div, extend(options.popup, options, {\n                    name: \"Popup\",\n                    isRtl: kendo.support.isRtl(that.wrapper),\n                    anchor: that.wrapper,\n                    activate: function() {\n                        if (that.options.timeView && that.options.timeView.list === \"scroll\") {\n                            that.timeView.addTranslate();\n                            that.timeView.applyValue(that._value);\n                            that.timeView._updateRanges();\n                        }\n                    },\n                    open: function(e) {\n                        if (that.trigger(OPEN, { view: this.element.find('.k-date-tab').length ? 'date' : 'time', sender: that })) {\n                            e.preventDefault();\n                        } else {\n                            this.element.attr(ARIA_HIDDEN, false);\n                            that.element.attr(ARIA_EXPANDED, true);\n                        }\n\n                        that.timeView._updateTitle();\n                    },\n                    close: function(e) {\n                        if (that.trigger(CLOSE, { view: this.element.find('.k-date-tab').length ? 'date' : 'time', sender: that })) {\n                            e.preventDefault();\n                        } else {\n                            that.element.attr(ARIA_EXPANDED, false);\n                            this.element.attr(ARIA_HIDDEN, true);\n                        }\n                    }\n                }));\n\n                div.on(CLICK + ns, \".k-datetime-buttongroup .k-button\", that._groupChangeClick.bind(that));\n                div.on(CLICK + ns, \".k-datetime-footer button.k-time-cancel\", that._cancelClickHandler.bind(that));\n                div.on(CLICK + ns, \".k-datetime-footer button.k-time-accept\", that._setClickHandler.bind(that));\n            },\n\n            _groupChangeClick: function(e) {\n                preventDefault(e);\n                var button = $(e.currentTarget);\n                var index = button.index();\n\n                if (index) {\n                    this._switchToTimeView();\n                } else {\n                    this._switchToDateView();\n                }\n                this._toggleIcons();\n            },\n\n            _switchToDateView: function() {\n                this.popup.element.find(\".k-group-start, .k-group-end\").removeClass(STATE_SELECTED).eq(0).addClass(STATE_SELECTED);\n                this.popup.element.find(\".k-datetime-wrap\").removeClass(\"k-time-tab\").addClass(\"k-date-tab\");\n            },\n\n            _switchToTimeView: function() {\n                this.timeView.addTranslate();\n                this.timeView.applyValue(this._value);\n                this.timeView._updateRanges();\n                this.popup.element.find(\".k-group-start, .k-group-end\").removeClass(STATE_SELECTED).eq(1).addClass(STATE_SELECTED);\n                this.popup.element.find(\".k-datetime-wrap\").removeClass(\"k-date-tab\").addClass(\"k-time-tab\");\n            },\n\n            _toggleIcons: function() {\n                this._dateIcon.toggle();\n                this._timeIcon.toggle();\n            },\n\n            _cancelClickHandler: function(e) {\n                preventDefault(e);\n                if (this._value) {\n                    this.value(this._value);\n                    this.dateView.value(this._value);\n                }\n                this.popup.close();\n            },\n\n            _setClickHandler: function(e) {\n                preventDefault(e);\n                var value = this._applyDateValue();\n                var time;\n\n                value = value || new Date();\n                time = this.timeView._currentlySelected || value;\n                this.timeView._updateCurrentlySelected();\n                value.setHours(time.getHours());\n                value.setMinutes(time.getMinutes());\n                value.setSeconds(time.getSeconds());\n                value = this._applyTimeValue(value);\n\n                this._change(value);\n                this.popup.close();\n            }\n        });\n\n        function lastTimeOption(interval) {\n            var date = new Date(2100, 0, 1);\n            date.setMinutes(-interval);\n            return date;\n        }\n\n        function preventDefault(e) {\n            e.preventDefault();\n        }\n\n        function normalize(options) {\n            var patterns = kendo.getCulture(options.culture).calendars.standard.patterns,\n                parseFormats = !options.parseFormats.length,\n                timeFormat;\n\n            options.format = extractFormat(options.format || patterns.g);\n            options.timeFormat = timeFormat = extractFormat(options.timeFormat || patterns.t);\n            kendo.DateView.normalize(options);\n\n            if (parseFormats) {\n               options.parseFormats.unshift(\"yyyy-MM-ddTHH:mm:ss\");\n            }\n\n            if ($.inArray(timeFormat, options.parseFormats) === -1) {\n                options.parseFormats.push(timeFormat);\n            }\n        }\n\n        kendo.cssProperties.registerPrefix(\"DateTimePicker\", \"k-input-\");\n\n        kendo.cssProperties.registerValues(\"DateTimePicker\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        ui.plugin(DateTimePicker);\n\n    })(window.kendo.jQuery);\n\n}));\n"]}