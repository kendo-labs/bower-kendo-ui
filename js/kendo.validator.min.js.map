{"version":3,"sources":["raw-js/kendo.validator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendovalidator","js","this","$","undefined$1","kendo","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","ARIAINVALID","emailRegExp","ALLOWED_URL_PROTOCOLS","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","hasAttribute","input","name","length","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","Validator","extend","init","options","that","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","_inputSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","filter","radio","val","parseFloat","raise","decimals","split","Math","pow","floor","selector","matcher","URL","includes","protocol","parseDate","widgetInstance","isValidated","isValid","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","eq","showValidationSummary","valid","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","closest","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","inputWrap","inputLabel","_inputLabel","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","prototype","isFunction","format","rule","results","push","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","target","errorsList","summary","html","plugin","jQuery"],"mappings":"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","file":"kendo.validator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendovalidator = global.kendovalidator || {}, global.kendovalidator.js = factory()));\n})(this, (function () {\n    let __meta__ = {\n        id: \"validator\",\n        name: \"Validator\",\n        category: \"web\",\n        description: \"The Validator offers an easy way to do a client-side form validation.\",\n        depends: [ \"core\" ]\n    };\n\n\n    (function($, undefined$1) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoValidator\",\n            INVALIDMSG = \"k-invalid-msg\",\n            invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n            INVALIDINPUT = \"k-invalid\",\n            VALIDINPUT = \"k-valid\",\n            VALIDATIONSUMMARY = \"k-validation-summary\",\n            INVALIDLABEL = \"k-text-error\",\n            MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n            INPUTINNER = \".k-input-inner\",\n            INPUTWRAPPER = \".k-input\",\n            ARIAINVALID = \"aria-invalid\",\n            ARIADESCRIBEDBY = \"aria-describedby\",\n            emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n            ALLOWED_URL_PROTOCOLS = [\"http:\", \"https:\", \"ftp:\", \"ftps:\"],\n            INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n            CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n            NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n            BLUR = \"blur\",\n            NAME = \"name\",\n            FORM = \"form\",\n            NOVALIDATE = \"novalidate\",\n            //events\n            VALIDATE = \"validate\",\n            CHANGE = \"change\",\n            VALIDATE_INPUT = \"validateInput\",\n\n            patternMatcher = function(value, pattern) {\n                if (typeof pattern === \"string\") {\n                    pattern = new RegExp('^(?:' + pattern + ')$');\n                }\n                return pattern.test(value);\n            },\n            matcher = function(input, selector, pattern) {\n                var value = input.val();\n\n                if (input.filter(selector).length && value !== \"\") {\n                    return patternMatcher(value, pattern);\n                }\n                return true;\n            },\n            hasAttribute = function(input, name) {\n                if (input.length) {\n                    return input[0].attributes[name] != null;\n                }\n                return false;\n            };\n\n        if (!kendo.ui.validator) {\n            kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n        }\n\n        function resolveRules(element) {\n            var resolvers = kendo.ui.validator.ruleResolvers || {},\n                rules = {},\n                name;\n\n            for (name in resolvers) {\n                $.extend(true, rules, resolvers[name].resolve(element));\n            }\n            return rules;\n        }\n\n        function decode(value) {\n            return value.replace(/&amp/g, '&amp;')\n                .replace(/&quot;/g, '\"')\n                .replace(/&#39;/g, \"'\")\n                .replace(/&lt;/g, '<')\n                .replace(/&gt;/g, '>');\n        }\n\n        function numberOfDecimalDigits(value) {\n            value = (value + \"\").split('.');\n            if (value.length > 1) {\n                return value[1].length;\n            }\n            return 0;\n        }\n\n        function parseHtml(text) {\n            if ($.parseHTML) {\n                return $($.parseHTML(text));\n            }\n            return $(text);\n        }\n\n        function searchForMessageContainer(elements, fieldName) {\n            var containers = $(),\n                element,\n                attr;\n\n            for (var idx = 0, length = elements.length; idx < length; idx++) {\n                element = elements[idx];\n                if (invalidMsgRegExp.test(element.className)) {\n                    attr = element.getAttribute(kendo.attr(\"for\"));\n                    if (attr === fieldName) {\n                        containers = containers.add(element);\n                    }\n                }\n            }\n            return containers;\n        }\n\n        function isLabelFor(label, element) {\n            if (!label) {\n                return false;\n            }\n            if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n                return false;\n            }\n            if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n                return false;\n            }\n            if (label.getAttribute('for') !== element.getAttribute('id')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        var SUMMARYTEMPLATE = ({ errors }) => {\n            let result = '<ul>';\n            for (var i = 0; i < errors.length; i += 1) {\n                result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n            }\n\n            result += '</ul>';\n            return result;\n        };\n\n        var Validator = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    resolved = resolveRules(element),\n                    validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n                options = options || {};\n\n                options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n                options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n                Widget.fn.init.call(that, element, options);\n\n                that._errorTemplate = kendo.template(that.options.errorTemplate);\n                that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n                if (that.element.is(FORM)) {\n                    that.element.attr(NOVALIDATE, NOVALIDATE);\n                }\n\n                that._inputSelector = INPUTSELECTOR + validateAttributeSelector;\n                that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;\n\n                that._errors = {};\n                that._attachEvents();\n                that._isValidated = false;\n\n                if (that._validateOnInit()) {\n                    that.validate();\n                }\n            },\n\n            events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n            options: {\n                name: \"Validator\",\n                errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n                messages: {\n                    required: \"{0} is required\",\n                    pattern: \"{0} is not valid\",\n                    min: \"{0} should be greater than or equal to {1}\",\n                    max: \"{0} should be smaller than or equal to {1}\",\n                    step: \"{0} is not valid\",\n                    email: \"{0} is not valid email\",\n                    url: \"{0} is not valid URL\",\n                    date: \"{0} is not valid date\",\n                    dateCompare: \"End date should be greater than or equal to the start date\",\n                    captcha: \"The text you entered doesn't match the image.\"\n                },\n                rules: {\n                    required: function(input) {\n                        var noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                            name = input.attr(\"name\"),\n                            quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                            namedCheckbox = input.attr(\"name\") && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                            radio = input.filter(\"[type=radio]\").length && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            value = input.val();\n\n                        return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                    },\n                    pattern: function(input) {\n                        if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                            return patternMatcher(input.val(), input.attr(\"pattern\"));\n                        }\n                        return true;\n                    },\n                    min: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return min <= val;\n                        }\n                        return true;\n                    },\n                    max: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                            var max = parseFloat(input.attr(\"max\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return max >= val;\n                        }\n                        return true;\n                    },\n                    step: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                step = kendo.parseFloat(input.attr(\"step\")) || 1,\n                                val = parseFloat(input.val()),\n                                decimals = numberOfDecimalDigits(step),\n                                raise;\n\n                            if (decimals) {\n                                raise = Math.pow(10, decimals);\n                                return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                            }\n                            return ((val - min) % step) === 0;\n                        }\n                        return true;\n                    },\n                    email: function(input) {\n                        return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                    },\n                    url: function(input) {\n                        if (input.filter(\"[type=url],[\" + kendo.attr(\"type\") + \"=url]\").length && input.val() !== \"\") {\n                            try {\n                                const url = new URL(input.val());\n                                return ALLOWED_URL_PROTOCOLS.includes(url.protocol);\n                            } catch {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    date: function(input) {\n                        if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                            return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                        }\n                        return true;\n                    },\n                    captcha: function(input) {\n                        if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                            var that = this,\n                                captcha = kendo.widgetInstance(input),\n                                isValidated = function(isValid) {\n                                    return typeof(isValid) !== 'undefined' && isValid !== null;\n                                };\n\n                            if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                                input.data(\"captcha_validating\", true);\n                                that._validating = true;\n                                captcha.validate().done(function() {\n                                    that._validating = false;\n                                    that._checkElement(input);\n                                }).fail(function(data) {\n                                    that._validating = false;\n                                    if (data.error && data.error === \"handler_not_defined\") {\n                                        window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                    }\n                                });\n                            }\n\n                            if (isValidated(captcha.isValid())) {\n                                input.removeData(\"captcha_validating\");\n                                return captcha.isValid();\n                            }\n                        }\n                        return true;\n                    }\n                },\n                validateOnBlur: true,\n                validationSummary: false\n            },\n\n            _allowSubmit: function() {\n                return kendo.ui.validator.allowSubmit(this.element, this.errors());\n            },\n\n            _validateOnInit: function() {\n                return kendo.ui.validator.validateOnInit(this.element);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n\n                if (this.validationSummary) {\n                    this.validationSummary.off(NS);\n                    this.validationSummary = null;\n                }\n            },\n\n            value: function() {\n                if (!this._isValidated) {\n                    return false;\n                }\n\n                return this.errors().length === 0;\n            },\n\n            _submit: function(e) {\n                if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                    e.stopPropagation();\n                    e.stopImmediatePropagation();\n                    e.preventDefault();\n                    return false;\n                }\n                return true;\n            },\n\n            _checkElement: function(element) {\n                var state = this.value();\n\n                this.validateInput(element);\n\n                if (this.value() !== state) {\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _attachEvents: function() {\n                var that = this;\n\n                if (that.element.is(FORM)) {\n                    that.element.on(\"submit\" + NS, that._submit.bind(that));\n                }\n\n                if (that.options.validateOnBlur) {\n                    if (!that.element.is(INPUTSELECTOR)) {\n                        that.element.on(BLUR + NS, that._inputSelector, function() {\n                            that._checkElement($(this));\n                        });\n\n                        that.element.on(\"click\" + NS, that._checkboxSelector, function() {\n                            that._checkElement($(this));\n                        });\n                    } else {\n                        that.element.on(BLUR + NS, function() {\n                            that._checkElement(that.element);\n                        });\n\n                        if (that.element.is(CHECKBOXSELECTOR)) {\n                            that.element.on(\"click\" + NS, function() {\n                                that._checkElement(that.element);\n                            });\n                        }\n                    }\n                }\n            },\n\n            validate: function() {\n                var inputs;\n                var idx;\n                var result = false;\n                var length;\n\n                var isValid = this.value();\n\n                this._errors = {};\n\n                if (!this.element.is(INPUTSELECTOR)) {\n                    var invalid = false;\n\n                    inputs = this.element.find(this._inputSelector);\n\n                    for (idx = 0, length = inputs.length; idx < length; idx++) {\n                        if (!this.validateInput(inputs.eq(idx))) {\n                            invalid = true;\n                        }\n                    }\n\n                    result = !invalid;\n                } else {\n                    result = this.validateInput(this.element);\n                }\n\n                if (this.options.validationSummary && !isValid) {\n                    this.showValidationSummary();\n                }\n\n                this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n                if (isValid !== result) {\n                    this.trigger(CHANGE);\n                }\n\n                return result;\n            },\n\n            validateInput: function(input) {\n                input = $(input);\n\n\n                this._isValidated = true;\n\n                var that = this,\n                    template = that._errorTemplate,\n                    result = that._checkValidity(input),\n                    valid = result.valid,\n                    widgetInstance,\n                    className = \".\" + INVALIDMSG,\n                    fieldName = (input.attr(NAME) || \"\"),\n                    lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                        var element = $(this);\n                        if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                            return element.attr(kendo.attr(\"for\")) === fieldName;\n                        }\n\n                        return true;\n\n                    })).addClass(\"k-hidden\"),\n                    messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                    messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                    wasValid = !input.attr(ARIAINVALID),\n                    isInputInner = input.is(INPUTINNER),\n                    inputWrapper = input.parent(INPUTWRAPPER);\n\n                input.removeAttr(ARIAINVALID);\n\n                if (input.hasClass(\"k-hidden\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n                }\n\n                if (input.is(\"[type=radio]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                }\n\n                if (input.is(\"[type=checkbox]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                }\n\n                if (!valid && !input.data(\"captcha_validating\")) {\n                    that._errors[fieldName] = messageText;\n                    var lblId = lbl.attr('id');\n\n                    that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                    if (lblId) {\n                        messageLabel.attr('id', lblId);\n                    }\n\n                    if (lbl.length !== 0) {\n                        lbl.replaceWith(messageLabel);\n                    } else {\n                        widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                        var parentElement = input.parent().get(0);\n                        var nextElement = input.next().get(0);\n                        var prevElement = input.prev().get(0);\n\n                        // Get the instance of the RadioGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=radio]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                        }\n\n                        // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                        }\n\n                        if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                            messageLabel.insertAfter(widgetInstance.wrapper);\n                        } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                            // Input inside label\n                            messageLabel.insertAfter(parentElement);\n                        } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                            // Input before label\n                            messageLabel.insertAfter(nextElement);\n                        } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                            // Input after label\n                            messageLabel.insertAfter(input);\n                        } else if (isInputInner && inputWrapper.length) {\n                            // Input after input wrapper\n                            messageLabel.insertAfter(inputWrapper);\n                        } else {\n                            messageLabel.insertAfter(input);\n                        }\n                    }\n\n                    messageLabel.removeClass(\"k-hidden\");\n\n                    input.attr(ARIAINVALID, true);\n                } else {\n                    delete that._errors[fieldName];\n                }\n\n                if (wasValid !== valid) {\n                    this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n                }\n\n                widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n                if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    input.toggleClass(INVALIDINPUT, !valid);\n                    input.toggleClass(VALIDINPUT, valid);\n                }\n\n                if (widgetInstance) {\n                    var inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                    var inputLabel = widgetInstance._inputLabel;\n\n                    if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                        inputWrap.toggleClass(INVALIDINPUT, !valid);\n                        inputWrap.toggleClass(VALIDINPUT, valid);\n                    }\n                    if (inputLabel) {\n                        inputLabel.toggleClass(INVALIDLABEL, !valid);\n                    }\n                }\n\n                if (wasValid !== valid) {\n                    var errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n\n                    if (this.options.validationSummary && this.options.validateOnBlur) {\n                        this.showValidationSummary();\n                    }\n                }\n\n                return valid;\n            },\n\n            hideMessages: function() {\n                var that = this,\n                    className = \".\" + INVALIDMSG,\n                    element = that.element;\n\n                that._disassociateMessageContainers();\n\n                if (!element.is(INPUTSELECTOR)) {\n                    element.find(className).addClass(\"k-hidden\");\n                } else {\n                    element.next(className).addClass(\"k-hidden\");\n                }\n            },\n\n            reset: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT),\n                    labels = that.element.find(\".\" + INVALIDLABEL);\n\n                that._errors = [];\n\n                that.hideMessages();\n\n                that.hideValidationSummary();\n\n                inputs.removeAttr(ARIAINVALID);\n                inputs.removeClass(INVALIDINPUT);\n                labels.removeClass(INVALIDLABEL);\n            },\n\n            _findMessageContainer: function(fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name,\n                    containers = $();\n\n                for (var idx = 0, length = this.element.length; idx < length; idx++) {\n                    containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName(\"*\"), fieldName));\n                }\n\n                for (name in locators) {\n                    containers = containers.add(locators[name].locate(this.element, fieldName));\n                }\n\n                return containers;\n            },\n\n            _decorateMessageContainer: function(container, fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name;\n\n                container.addClass(INVALIDMSG)\n                    .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n                if (!container.attr(\"id\")) {\n                    container.attr(\"id\", fieldName + \"-error\");\n                }\n\n                for (name in locators) {\n                    locators[name].decorate(container, fieldName);\n                }\n            },\n\n            _extractMessage: function(input, ruleKey) {\n                var that = this,\n                    customMessage = that.options.messages[ruleKey],\n                    fieldName = input.attr(NAME),\n                    nonDefaultMessage;\n\n                if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                     nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n                }\n\n                customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n                return kendo.format(input.attr(kendo.attr(ruleKey + \"-msg\")) || input.attr(\"validationMessage\") || nonDefaultMessage || customMessage || input.attr(\"title\") || \"\",\n                    fieldName,\n                    input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n            },\n\n            _checkValidity: function(input) {\n                var rules = this.options.rules,\n                    rule;\n\n                for (rule in rules) {\n                    if (!rules[rule].call(this, input)) {\n                        return { valid: false, key: rule };\n                    }\n                }\n\n                return { valid: true };\n            },\n\n            errors: function() {\n                var results = [],\n                    errors = this._errors,\n                    error;\n\n                for (error in errors) {\n                    results.push(errors[error]);\n                }\n                return results;\n            },\n\n            setOptions: function(options) {\n                if (options.validationSummary) {\n                    this.hideValidationSummary();\n                }\n\n                kendo.deepExtend(this.options, options);\n\n                this.destroy();\n\n                this.init(this.element, this.options);\n\n                this._setEvents(this.options);\n            },\n\n            _getInputNames: function() {\n                var that = this,\n                    inputs = that.element.find(that._inputSelector),\n                    sorted = [];\n\n                for (var idx = 0, length = inputs.length; idx < length; idx++) {\n                    var input = $(inputs[idx]);\n\n                    if (hasAttribute(input, NAME)) {\n                        // Add current name if:\n                        // - not present so far;\n                        // - present but not part of CheckBoxGroup or RadioGroup.\n                        if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                            (input.closest(\".k-checkbox-list\").length === 0 &&\n                            input.closest(\".k-radio-list\").length === 0)) {\n                                sorted.push(input.attr(NAME));\n                        }\n                    }\n                }\n\n                return sorted;\n            },\n\n            _associateMessageContainer: function(input, errorId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !errorId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n            },\n\n            _disassociateMessageContainers: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                    input, errorId;\n\n                for (var i = 0; i < inputs.length; i += 1) {\n                    input = $(inputs[i]);\n\n                    if (input.is(\"input\")) {\n                        errorId = that._findMessageContainer(input.attr(NAME))\n                            .add(input.next(\".\" + INVALIDMSG))\n                            .attr(\"id\");\n\n                        that._associateMessageContainer(input, errorId);\n                    }\n                }\n            },\n\n            _errorsByName: function() {\n                var that = this,\n                    inputNames = that._getInputNames(),\n                    sorted = [];\n\n                for (var i = 0; i < inputNames.length; i += 1) {\n                    var name = inputNames[i];\n\n                    if (that._errors[name]) {\n                        sorted.push({\n                            field: name,\n                            message: that._errors[name]\n                        });\n                    }\n                }\n\n                return sorted;\n            },\n\n            _renderSummary: function() {\n                var that = this,\n                    options = this.options.validationSummary,\n                    element = this.element,\n                    prevElement = element.prev(),\n                    container;\n\n                if (options.container) {\n                    container = $(options.container);\n                } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                    container = prevElement;\n                } else {\n                    container = $(\"<div />\").insertBefore(that.element);\n                }\n\n                container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n                container.attr(\"role\", \"alert\");\n\n                container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n                return container;\n            },\n\n            _summaryClick: function(e) {\n                e.preventDefault();\n\n                var that = this,\n                    link = $(e.target),\n                    target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                    nextFocusable;\n\n                if (!target.length) {\n                    return;\n                }\n\n                nextFocusable = kendo.getWidgetFocusableElement(target);\n\n                if (nextFocusable) {\n                    nextFocusable.trigger(\"focus\");\n                }\n            },\n\n            showValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary,\n                    errors = that._errorsByName(),\n                    errorsList;\n\n                if (!summary) {\n                    summary = that.validationSummary = that._renderSummary();\n                }\n\n                errorsList = parseHtml(that._summaryTemplate({\n                    errors: errors\n                }));\n\n                summary.html(errorsList);\n\n                summary.toggleClass(\"k-hidden\", !errors.length);\n            },\n\n            hideValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary;\n\n                if (!summary) {\n                    return;\n                }\n\n                summary.addClass(\"k-hidden\");\n            }\n        });\n\n        kendo.ui.plugin(Validator);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}