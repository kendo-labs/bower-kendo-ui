{"version":3,"sources":["raw-js/kendo.validator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendovalidator","js","this","$","kendo","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","UPLOADBUTTONWRAPPER","ARIAINVALID","emailRegExp","ALLOWED_URL_PROTOCOLS","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","hasAttribute","input","name","length","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","Validator","extend","init","options","that","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","formId","_shouldSearchDocument","_containerElement","document","_inputSelector","_buildSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","containerElement","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","filter","file","parents","children","radio","val","isValid","each","parseFloat","raise","decimals","split","Math","pow","floor","selector","matcher","URL","includes","protocol","parseDate","widgetInstance","isValidated","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","selectorConstant","id","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","firstFileInput","first","Array","prototype","push","eq","showValidationSummary","valid","isEmpty","closest","otpContainer","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","widgetName","inputWrap","inputLabel","_inputLabel","_removeInvalidState","_addInvalidState","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","target","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","isFunction","closestParentWithFieldName","format","rule","results","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","errorsList","summary","html","plugin","jQuery","kendo$1","__meta__","category","description","depends","Object","defineProperty"],"mappings":"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","file":"kendo.validator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendovalidator = global.kendovalidator || {}, global.kendovalidator.js = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"validator\",\n        name: \"Validator\",\n        category: \"web\",\n        description: \"The Validator offers an easy way to do a client-side form validation.\",\n        depends: [ \"core\" ]\n    };\n\n\n    (function($, undefined$1) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoValidator\",\n            INVALIDMSG = \"k-invalid-msg\",\n            invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n            INVALIDINPUT = \"k-invalid\",\n            VALIDINPUT = \"k-valid\",\n            VALIDATIONSUMMARY = \"k-validation-summary\",\n            INVALIDLABEL = \"k-text-error\",\n            MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n            INPUTINNER = \".k-input-inner\",\n            UPLOADBUTTONWRAPPER = \".k-upload-button-wrap\",\n            INPUTWRAPPER = \".k-input\",\n            ARIAINVALID = \"aria-invalid\",\n            ARIADESCRIBEDBY = \"aria-describedby\",\n            emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n            ALLOWED_URL_PROTOCOLS = [\"http:\", \"https:\", \"ftp:\", \"ftps:\"],\n            INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n            CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n            NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n            BLUR = \"blur\",\n            NAME = \"name\",\n            FORM = \"form\",\n            NOVALIDATE = \"novalidate\",\n            //events\n            VALIDATE = \"validate\",\n            CHANGE = \"change\",\n            VALIDATE_INPUT = \"validateInput\",\n\n            patternMatcher = function(value, pattern) {\n                if (typeof pattern === \"string\") {\n                    pattern = new RegExp('^(?:' + pattern + ')$');\n                }\n                return pattern.test(value);\n            },\n            matcher = function(input, selector, pattern) {\n                var value = input.val();\n\n                if (input.filter(selector).length && value !== \"\") {\n                    return patternMatcher(value, pattern);\n                }\n                return true;\n            },\n            hasAttribute = function(input, name) {\n                if (input.length) {\n                    return input[0].attributes[name] != null;\n                }\n                return false;\n            };\n\n        if (!kendo.ui.validator) {\n            kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n        }\n\n        function resolveRules(element) {\n            var resolvers = kendo.ui.validator.ruleResolvers || {},\n                rules = {},\n                name;\n\n            for (name in resolvers) {\n                $.extend(true, rules, resolvers[name].resolve(element));\n            }\n            return rules;\n        }\n\n        function decode(value) {\n            return value.replace(/&amp/g, '&amp;')\n                .replace(/&quot;/g, '\"')\n                .replace(/&#39;/g, \"'\")\n                .replace(/&lt;/g, '<')\n                .replace(/&gt;/g, '>');\n        }\n\n        function numberOfDecimalDigits(value) {\n            value = (value + \"\").split('.');\n            if (value.length > 1) {\n                return value[1].length;\n            }\n            return 0;\n        }\n\n        function parseHtml(text) {\n            if ($.parseHTML) {\n                return $($.parseHTML(text));\n            }\n            return $(text);\n        }\n\n        function searchForMessageContainer(elements, fieldName) {\n            var containers = $(),\n                element,\n                attr;\n\n            for (var idx = 0, length = elements.length; idx < length; idx++) {\n                element = elements[idx];\n                if (invalidMsgRegExp.test(element.className)) {\n                    attr = element.getAttribute(kendo.attr(\"for\"));\n                    if (attr === fieldName) {\n                        containers = containers.add(element);\n                    }\n                }\n            }\n            return containers;\n        }\n\n        function isLabelFor(label, element) {\n            if (!label) {\n                return false;\n            }\n            if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n                return false;\n            }\n            if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n                return false;\n            }\n            if (label.getAttribute('for') !== element.getAttribute('id')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        var SUMMARYTEMPLATE = ({ errors }) => {\n            let result = '<ul>';\n            for (var i = 0; i < errors.length; i += 1) {\n                result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n            }\n\n            result += '</ul>';\n            return result;\n        };\n\n        var Validator = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    resolved = resolveRules(element),\n                    validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n                options = options || {};\n\n                options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n                options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n                Widget.fn.init.call(that, element, options);\n\n                that._errorTemplate = kendo.template(that.options.errorTemplate);\n                that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n                if (that.element.is(FORM)) {\n                    that.element.attr(NOVALIDATE, NOVALIDATE);\n                }\n\n                const formId = that.element.attr(\"id\");\n                that._shouldSearchDocument = that.element.is(FORM) && formId != undefined$1 && $(`:input[form='${formId}']`).length > 0;\n                that._containerElement = that._shouldSearchDocument ? $(document) : that.element;\n                that._inputSelector = that._buildSelector(INPUTSELECTOR, validateAttributeSelector);\n                that._checkboxSelector = that._buildSelector(CHECKBOXSELECTOR, validateAttributeSelector);\n\n                that._errors = {};\n                that._attachEvents();\n                that._isValidated = false;\n\n                if (that._validateOnInit()) {\n                    that.validate();\n                }\n            },\n\n            events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n            options: {\n                name: \"Validator\",\n                errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n                messages: {\n                    required: \"{0} is required\",\n                    pattern: \"{0} is not valid\",\n                    min: \"{0} should be greater than or equal to {1}\",\n                    max: \"{0} should be smaller than or equal to {1}\",\n                    step: \"{0} is not valid\",\n                    email: \"{0} is not valid email\",\n                    url: \"{0} is not valid URL\",\n                    date: \"{0} is not valid date\",\n                    dateCompare: \"End date should be greater than or equal to the start date\",\n                    captcha: \"The text you entered doesn't match the image.\"\n                },\n                rules: {\n                    required: function(input) {\n                        let containerElement = this._containerElement,\n                            noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                            name = input.attr(\"name\"),\n                            quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                            namedCheckbox = input.attr(\"name\") && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                            file = input.filter(\"[type=file]\").parents(UPLOADBUTTONWRAPPER).children(\"input\").length,\n                            radio = input.filter(\"[type=radio]\").length && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            value = input.val();\n\n                            if (file) {\n                                let isValid = false;\n\n                                input.filter(\"[type=file]\")\n                                    .parents(UPLOADBUTTONWRAPPER)\n                                    .children(\"input\")\n                                    .each(function(idx) {\n                                        if (input.val()) {\n                                            isValid = true;\n                                        }\n                                    });\n\n                                return !(hasAttribute(input, \"required\") && !isValid);\n                            }\n\n                            return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                    },\n                    pattern: function(input) {\n                        if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                            return patternMatcher(input.val(), input.attr(\"pattern\"));\n                        }\n                        return true;\n                    },\n                    min: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return min <= val;\n                        }\n                        return true;\n                    },\n                    max: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                            var max = parseFloat(input.attr(\"max\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return max >= val;\n                        }\n                        return true;\n                    },\n                    step: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                step = kendo.parseFloat(input.attr(\"step\")) || 1,\n                                val = parseFloat(input.val()),\n                                decimals = numberOfDecimalDigits(step),\n                                raise;\n\n                            if (decimals) {\n                                raise = Math.pow(10, decimals);\n                                return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                            }\n                            return ((val - min) % step) === 0;\n                        }\n                        return true;\n                    },\n                    email: function(input) {\n                        return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                    },\n                    url: function(input) {\n                        if (input.filter(\"[type=url],[\" + kendo.attr(\"type\") + \"=url]\").length && input.val() !== \"\") {\n                            try {\n                                const url = new URL(input.val());\n                                return ALLOWED_URL_PROTOCOLS.includes(url.protocol);\n                            } catch {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    date: function(input) {\n                        if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                            return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                        }\n                        return true;\n                    },\n                    captcha: function(input) {\n                        if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                            var that = this,\n                                captcha = kendo.widgetInstance(input),\n                                isValidated = function(isValid) {\n                                    return typeof(isValid) !== 'undefined' && isValid !== null;\n                                };\n\n                            if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                                input.data(\"captcha_validating\", true);\n                                that._validating = true;\n                                captcha.validate().done(function() {\n                                    that._validating = false;\n                                    that._checkElement(input);\n                                }).fail(function(data) {\n                                    that._validating = false;\n                                    if (data.error && data.error === \"handler_not_defined\") {\n                                        window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                    }\n                                });\n                            }\n\n                            if (isValidated(captcha.isValid())) {\n                                input.removeData(\"captcha_validating\");\n                                return captcha.isValid();\n                            }\n                        }\n                        return true;\n                    }\n                },\n                validateOnBlur: true,\n                validationSummary: false\n            },\n\n            _buildSelector: function(selectorConstant, validateAttributeSelector) {\n                if (!this._shouldSearchDocument) {\n                    return selectorConstant + validateAttributeSelector;\n                }\n                const id = this.element.attr(\"id\");\n\n                return `#${id} ` + selectorConstant + validateAttributeSelector + `,[form=\"${id}\"]`;\n            },\n\n            _allowSubmit: function() {\n                return kendo.ui.validator.allowSubmit(this.element, this.errors());\n            },\n\n            _validateOnInit: function() {\n                return kendo.ui.validator.validateOnInit(this.element);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n\n                if (this.validationSummary) {\n                    this.validationSummary.off(NS);\n                    this.validationSummary = null;\n                }\n            },\n\n            value: function() {\n                if (!this._isValidated) {\n                    return false;\n                }\n\n                return this.errors().length === 0;\n            },\n\n            _submit: function(e) {\n                if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                    e.stopPropagation();\n                    e.stopImmediatePropagation();\n                    e.preventDefault();\n                    return false;\n                }\n                return true;\n            },\n\n            _checkElement: function(element) {\n                var state = this.value();\n\n                this.validateInput(element);\n\n                if (this.value() !== state) {\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _attachEvents: function() {\n                const that = this,\n                element = that._containerElement;\n\n                if (that.element.is(FORM)) {\n                    that.element.on(\"submit\" + NS, that._submit.bind(that));\n                }\n\n                if (that.options.validateOnBlur) {\n                    if (!element.is(INPUTSELECTOR)) {\n                        element.on(BLUR + NS, that._inputSelector, function() {\n                            that._checkElement($(this));\n                        });\n\n                        element.on(\"click\" + NS, that._checkboxSelector, function() {\n                            that._checkElement($(this));\n                        });\n                    } else {\n                        element.on(BLUR + NS, function() {\n                            that._checkElement(that.element);\n                        });\n\n                        if (element.is(CHECKBOXSELECTOR)) {\n                            element.on(\"click\" + NS, function() {\n                                that._checkElement(that.element);\n                            });\n                        }\n                    }\n                }\n            },\n\n            validate: function() {\n                let inputs;\n                let idx;\n                let result = false;\n                let length;\n                let containerElement = this._containerElement;\n                let isValid = this.value();\n\n                this._errors = {};\n\n                if (!this.element.is(INPUTSELECTOR)) {\n                    let invalid = false;\n\n                    inputs = containerElement.find(this._inputSelector);\n\n                    containerElement.find(UPLOADBUTTONWRAPPER).each(function() {\n                        let firstFileInput = $(this).find(\"input[type='file']\").first();\n                        if (firstFileInput.length) {\n                            Array.prototype.push.call(inputs, firstFileInput[0]);\n                        }\n                    });\n\n                    for (idx = 0, length = inputs.length; idx < length; idx++) {\n                        if (!this.validateInput(inputs.eq(idx))) {\n                            invalid = true;\n                        }\n                    }\n\n                    result = !invalid;\n                } else {\n                    result = this.validateInput(this.element);\n                }\n\n                if (this.options.validationSummary && !isValid) {\n                    this.showValidationSummary();\n                }\n\n                this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n                if (isValid !== result) {\n                    this.trigger(CHANGE);\n                }\n\n                return result;\n            },\n\n            validateInput: function(input) {\n                input = $(input);\n\n                if (!kendo.isEmpty(input.closest('.k-otp'))) {\n                    let otpContainer = input.closest(\".k-otp\");\n                    input = otpContainer.find(\"input[data-role='otpinput']\");\n                }\n\n\n                this._isValidated = true;\n\n                const that = this,\n                    template = that._errorTemplate,\n                    result = that._checkValidity(input),\n                    valid = result.valid,\n                    className = \".\" + INVALIDMSG,\n                    fieldName = (input.attr(NAME) || \"\"),\n                    lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                        let element = that._shouldSearchDocument ? $(document) : $(this);\n                        if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                            return element.attr(kendo.attr(\"for\")) === fieldName;\n                        }\n\n                        return true;\n\n                    })).addClass(\"k-hidden\"),\n                    messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                    messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                    wasValid = !input.attr(ARIAINVALID),\n                    isInputInner = input.is(INPUTINNER),\n                    inputWrapper = input.parent(INPUTWRAPPER);\n                let widgetInstance;\n\n                input.removeAttr(ARIAINVALID);\n\n                if (input.hasClass(\"k-hidden\") && (input.attr(\"data-role\") == \"otpinput\" || input.attr(\"data-role\") == \"upload\")) {\n                    widgetInstance = kendo.widgetInstance(input);\n                }\n                if (input.hasClass(\"k-hidden\") && input.attr(\"data-role\") == \"signature\") {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n                }\n\n                if (input.is(\"[type=radio]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                }\n\n                if (input.is(\"[type=checkbox]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                }\n\n                if (!valid && !input.data(\"captcha_validating\")) {\n                    that._errors[fieldName] = messageText;\n                    let lblId = lbl.attr('id');\n\n                    that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                    if (lblId) {\n                        messageLabel.attr('id', lblId);\n                    }\n\n                    if (lbl.length !== 0) {\n                        lbl.replaceWith(messageLabel);\n                    } else {\n                        widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                        let parentElement = input.parent().get(0);\n                        let nextElement = input.next().get(0);\n                        let prevElement = input.prev().get(0);\n\n                        // Get the instance of the RadioGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=radio]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                        }\n\n                        // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                        }\n\n                        if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                            messageLabel.insertAfter(widgetInstance.wrapper);\n                        } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                            // Input inside label\n                            messageLabel.insertAfter(parentElement);\n                        } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                            // Input before label\n                            messageLabel.insertAfter(nextElement);\n                        } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                            // Input after label\n                            messageLabel.insertAfter(input);\n                        } else if (isInputInner && inputWrapper.length) {\n                            // Input after input wrapper\n                            messageLabel.insertAfter(inputWrapper);\n                        } else {\n                            messageLabel.insertAfter(input);\n                        }\n                    }\n\n                    messageLabel.removeClass(\"k-hidden\");\n\n                    input.attr(ARIAINVALID, true);\n                } else {\n                    delete that._errors[fieldName];\n                }\n\n                if (wasValid !== valid) {\n                    this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n                }\n\n                widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n\n                if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    input.toggleClass(INVALIDINPUT, !valid);\n                    input.toggleClass(VALIDINPUT, valid);\n                }\n\n                if (widgetInstance) {\n                    let widgetName = widgetInstance.options.name;\n                    let inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                    let inputLabel = widgetInstance._inputLabel;\n\n                    if (widgetName == \"OTPInput\") {\n                        if (!valid) {\n                            widgetInstance._addInvalidState.bind(that);\n                            widgetInstance._addInvalidState(inputWrap, true);\n                        } else {\n                            widgetInstance._removeInvalidState.bind(that);\n                            widgetInstance._removeInvalidState(inputWrap, true);\n                        }\n                    } else if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                        inputWrap.toggleClass(INVALIDINPUT, !valid);\n                        inputWrap.toggleClass(VALIDINPUT, valid);\n                    }\n                    if (inputLabel) {\n                        inputLabel.toggleClass(INVALIDLABEL, !valid);\n                    }\n                }\n\n                if (wasValid !== valid) {\n                    let errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n\n                    if (this.options.validationSummary && this.options.validateOnBlur) {\n                        this.showValidationSummary();\n                    }\n                }\n\n                return valid;\n            },\n\n            hideMessages: function() {\n                const that = this,\n                    className = \".\" + INVALIDMSG,\n                    element = that._containerElement;\n\n                that._disassociateMessageContainers();\n\n                if (!element.is(INPUTSELECTOR)) {\n                    element.find(className).addClass(\"k-hidden\");\n                } else {\n                    element.next(className).addClass(\"k-hidden\");\n                }\n            },\n\n            reset: function() {\n                const that = this,\n                    containerElement = that._containerElement,\n                    inputs = containerElement.find(\".\" + INVALIDINPUT),\n                    labels = containerElement.find(\".\" + INVALIDLABEL);\n\n                that._errors = [];\n\n                that.hideMessages();\n\n                that.hideValidationSummary();\n\n                inputs.removeAttr(ARIAINVALID);\n                inputs.removeClass(INVALIDINPUT);\n                labels.removeClass(INVALIDLABEL);\n            },\n\n            _findMessageContainer: function(fieldName) {\n                let locators = kendo.ui.validator.messageLocators,\n                    name,\n                    containers = $();\n\n                for (let idx = 0, length = this.element.length; idx < length; idx++) {\n                    let target = this._shouldSearchDocument ? document : this.element[idx];\n                    containers = containers.add(searchForMessageContainer(target.getElementsByTagName(\"*\"), fieldName));\n                }\n\n                for (name in locators) {\n                    containers = containers.add(locators[name].locate(this._containerElement, fieldName));\n                }\n\n                return containers;\n            },\n\n            _decorateMessageContainer: function(container, fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name;\n\n                container.addClass(INVALIDMSG)\n                    .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n                if (!container.attr(\"id\")) {\n                    container.attr(\"id\", fieldName + \"-error\");\n                }\n\n                for (name in locators) {\n                    locators[name].decorate(container, fieldName);\n                }\n            },\n\n            _extractMessage: function(input, ruleKey) {\n                var that = this,\n                    customMessage = that.options.messages[ruleKey],\n                    fieldName = input.attr(NAME),\n                    nonDefaultMessage;\n\n                if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                     nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n                }\n\n                customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n                const closestParentWithFieldName = input.parent().closest(\"[name='\" + fieldName + \"']\");\n                const target = closestParentWithFieldName.length ? closestParentWithFieldName : input;\n\n                return kendo.format(target.attr(kendo.attr(ruleKey + \"-msg\")) || target.attr(\"validationMessage\") || nonDefaultMessage || customMessage || target.attr(\"title\") || \"\",\n                    fieldName,\n                    target.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n            },\n\n            _checkValidity: function(input) {\n                var rules = this.options.rules,\n                    rule;\n\n                for (rule in rules) {\n                    if (!rules[rule].call(this, input)) {\n                        return { valid: false, key: rule };\n                    }\n                }\n\n                return { valid: true };\n            },\n\n            errors: function() {\n                var results = [],\n                    errors = this._errors,\n                    error;\n\n                for (error in errors) {\n                    results.push(errors[error]);\n                }\n                return results;\n            },\n\n            setOptions: function(options) {\n                if (options.validationSummary) {\n                    this.hideValidationSummary();\n                }\n\n                kendo.deepExtend(this.options, options);\n\n                this.destroy();\n\n                this.init(this.element, this.options);\n\n                this._setEvents(this.options);\n            },\n\n            _getInputNames: function() {\n                const that = this,\n                    containerElement = this._containerElement,\n                    inputs = containerElement.find(that._inputSelector);\n                let sorted = [];\n\n                for (let idx = 0, length = inputs.length; idx < length; idx++) {\n                    let input = $(inputs[idx]);\n\n                    if (hasAttribute(input, NAME)) {\n                        // Add current name if:\n                        // - not present so far;\n                        // - present but not part of CheckBoxGroup or RadioGroup.\n                        if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                            (input.closest(\".k-checkbox-list\").length === 0 &&\n                            input.closest(\".k-radio-list\").length === 0)) {\n                                sorted.push(input.attr(NAME));\n                        }\n                    }\n                }\n\n                return sorted;\n            },\n\n            _associateMessageContainer: function(input, errorId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !errorId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n            },\n\n            _disassociateMessageContainers: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                    input, errorId;\n\n                for (var i = 0; i < inputs.length; i += 1) {\n                    input = $(inputs[i]);\n\n                    if (input.is(\"input\")) {\n                        errorId = that._findMessageContainer(input.attr(NAME))\n                            .add(input.next(\".\" + INVALIDMSG))\n                            .attr(\"id\");\n\n                        that._associateMessageContainer(input, errorId);\n                    }\n                }\n            },\n\n            _errorsByName: function() {\n                var that = this,\n                    inputNames = that._getInputNames(),\n                    sorted = [];\n\n                for (var i = 0; i < inputNames.length; i += 1) {\n                    var name = inputNames[i];\n\n                    if (that._errors[name]) {\n                        sorted.push({\n                            field: name,\n                            message: that._errors[name]\n                        });\n                    }\n                }\n\n                return sorted;\n            },\n\n            _renderSummary: function() {\n                var that = this,\n                    options = this.options.validationSummary,\n                    element = this.element,\n                    prevElement = element.prev(),\n                    container;\n\n                if (options.container) {\n                    container = $(options.container);\n                } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                    container = prevElement;\n                } else {\n                    container = $(\"<div />\").insertBefore(that.element);\n                }\n\n                container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n                container.attr(\"role\", \"alert\");\n\n                container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n                return container;\n            },\n\n            _summaryClick: function(e) {\n                e.preventDefault();\n\n                var that = this,\n                    link = $(e.target),\n                    target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                    nextFocusable;\n\n                if (!target.length) {\n                    return;\n                }\n\n                nextFocusable = kendo.getWidgetFocusableElement(target);\n\n                if (nextFocusable) {\n                    nextFocusable.trigger(\"focus\");\n                }\n            },\n\n            showValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary,\n                    errors = that._errorsByName(),\n                    errorsList;\n\n                if (!summary) {\n                    summary = that.validationSummary = that._renderSummary();\n                }\n\n                errorsList = parseHtml(that._summaryTemplate({\n                    errors: errors\n                }));\n\n                summary.html(errorsList);\n\n                summary.toggleClass(\"k-hidden\", !errors.length);\n            },\n\n            hideValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary;\n\n                if (!summary) {\n                    return;\n                }\n\n                summary.addClass(\"k-hidden\");\n            }\n        });\n\n        kendo.ui.plugin(Validator);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports[\"default\"] = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}