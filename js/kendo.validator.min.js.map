{"version":3,"sources":["raw-js/kendo.validator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendovalidator","js","this","$","undefined$1","kendo","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","ARIAINVALID","emailRegExp","urlRegExp","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","matcher","input","selector","val","filter","length","hasAttribute","name","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","Validator","extend","init","options","that","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","_inputSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","radio","parseFloat","raise","decimals","split","Math","pow","floor","parseDate","widgetInstance","isValidated","isValid","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","eq","showValidationSummary","valid","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","closest","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","inputWrap","inputLabel","_inputLabel","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","prototype","isFunction","format","rule","results","push","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","target","errorsList","summary","html","plugin","jQuery"],"mappings":";;;;;;;;;;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,EAAAG,QAAA,kBACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,kBAAAJ,KACAD,EAAA,oBAAAO,WAAAA,WAAAP,GAAAQ,MAAAC,eAAAT,EAAAS,gBAAA,CAAA,EAAAT,EAAAS,eAAAC,GAAAT,IACA,CAJA,CAIAU,MAAA,WAkyBA,OAxxBA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,OAAAD,MACAE,EAAAF,EAAAG,GAAAD,OACAE,EAAA,kBACAC,EAAA,gBACAC,EAAA,IAAAC,OAAAF,EAAA,KACAG,EAAA,YACAC,EAAA,UACAC,EAAA,uBACAC,EAAA,eACAC,EAAA,kCAGAC,EAAA,eAEAC,EAAA,yIACAC,EAAA,sqCACAC,EAAA,uEACAC,EAAA,uCACAC,EAAA,6BACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACAC,EAAA,aAEAC,EAAA,WACAC,EAAA,SACAC,EAAA,gBAEAC,EAAA,SAAAC,EAAAC,GAIA,MAHA,iBAAAA,IACAA,EAAA,IAAArB,OAAA,OAAAqB,EAAA,OAEAA,EAAAC,KAAAF,EACA,EACAG,EAAA,SAAAC,EAAAC,EAAAJ,GACA,IAAAD,EAAAI,EAAAE,MAEA,OAAAF,EAAAG,OAAAF,GAAAG,QAAA,KAAAR,GACAD,EAAAC,EAAAC,EAGA,EACAQ,EAAA,SAAAL,EAAAM,GACA,QAAAN,EAAAI,QACA,MAAAJ,EAAA,GAAAO,WAAAD,EAGA,EAiCA,SAAAE,EAAAC,GACA,OAAA1C,EAAA2C,UACA3C,EAAAA,EAAA2C,UAAAD,IAEA1C,EAAA0C,EACA,CAEA,SAAAE,EAAAC,EAAAC,GAKA,IAJA,IACAC,EADAC,EAAAhD,IAIAiD,EAAA,EAAAZ,EAAAQ,EAAAR,OAAAY,EAAAZ,EAAAY,IACAF,EAAAF,EAAAI,GACAzC,EAAAuB,KAAAgB,EAAAG,YACAH,EAAAI,aAAAjD,EAAAkD,KAAA,UACAN,IACAE,EAAAA,EAAAK,IAAAN,IAIA,OAAAC,CACA,CAEA,SAAAM,EAAAC,EAAAR,GACA,QAAAQ,IAGA,iBAAAA,EAAAC,UAAA,UAAAD,EAAAC,WAGA,iBAAAD,EAAAJ,aAAA,QAAA,iBAAAJ,EAAAI,aAAA,OAGAI,EAAAJ,aAAA,SAAAJ,EAAAI,aAAA,OAKA,CAtEAjD,EAAAG,GAAAoD,YACAvD,EAAAG,GAAAoD,UAAA,CAAAC,MAAA,CAAA,EAAAC,SAAA,CAAA,EAAAC,YAAA5D,EAAA6D,KAAAC,eAAA9D,EAAA6D,OAuEA,IAAAE,EAAA,EAAAC,aACA,IAAAC,EAAA,OACA,IAAA,IAAAC,EAAA,EAAAA,EAAAF,EAAA3B,OAAA6B,GAAA,EACAD,GAAA,sBAAAD,EAAAE,GAAAC,mBAAAH,EAAAE,GAAAE,mBAIA,OADAH,GAAA,QACAA,CAAA,EAGAI,EAAAjE,EAAAkE,OAAA,CACAC,KAAA,SAAAxB,EAAAyB,GACA,IAAAC,EAAA1E,KACA2E,EAjFA,SAAA3B,GACA,IAEAR,EAFAoC,EAAAzE,EAAAG,GAAAoD,UAAAmB,eAAA,CAAA,EACAlB,EAAA,CAAA,EAGA,IAAAnB,KAAAoC,EACA3E,EAAAsE,QAAA,EAAAZ,EAAAiB,EAAApC,GAAAsC,QAAA9B,IAEA,OAAAW,CACA,CAwEAoB,CAAA/B,GACAgC,EAAA,IAAA7E,EAAAkD,KAAA,YAAA,YAEAoB,EAAAA,GAAA,CAAA,GAEAd,MAAA1D,EAAAsE,OAAA,CAAA,EAAApE,EAAAG,GAAAoD,UAAAC,MAAAgB,EAAAhB,MAAAc,EAAAd,OACAc,EAAAb,SAAA3D,EAAAsE,OAAA,CAAA,EAAApE,EAAAG,GAAAoD,UAAAE,SAAAe,EAAAf,SAAAa,EAAAb,UAEAvD,EAAA4E,GAAAT,KAAAU,KAAAR,EAAA1B,EAAAyB,GAEAC,EAAAS,eAAAhF,EAAAiF,SAAAV,EAAAD,QAAAY,eACAX,EAAAY,iBAAAnF,EAAAiF,SAAAV,EAAAD,QAAAc,kBAAAH,UAAApB,GAEAU,EAAA1B,QAAAwC,GAAAhE,IACAkD,EAAA1B,QAAAK,KAAA5B,EAAAA,GAGAiD,EAAAe,eAAAtE,EAAA6D,EACAN,EAAAgB,kBAAAtE,EAAA4D,EAEAN,EAAAiB,QAAA,CAAA,EACAjB,EAAAkB,gBACAlB,EAAAmB,cAAA,EAEAnB,EAAAoB,mBACApB,EAAAqB,UAEA,EAEAC,OAAA,CAAAtE,EAAAC,EAAAC,GAEA6C,QAAA,CACAjC,KAAA,YACA6C,cAAA,EAAAhB,aAAA,8BAAAA,WACAT,SAAA,CACAqC,SAAA,kBACAlE,QAAA,mBACAmE,IAAA,6CACAC,IAAA,6CACAC,KAAA,mBACAC,MAAA,yBACAC,IAAA,uBACAC,KAAA,wBACAC,YAAA,6DACAC,QAAA,iDAEA9C,MAAA,CACAsC,SAAA,SAAA/D,GACA,IAAAwE,GAAAxE,EAAAmB,KAAA,UAAAnB,EAAAsD,GAAA,YACAhD,EAAAN,EAAAmB,KAAA,QACAsD,EAAAnE,GAAAA,EAAAoE,QAAA,MAAA,EAAA,IAAA,IACAC,EAAA3E,EAAAmB,KAAA,UAAArD,KAAAgD,QAAA8D,KAAA,cAAAH,EAAAzE,EAAAmB,KAAA,QAAAsD,EAAA,aAAArE,OACAyE,EAAA7E,EAAAG,OAAA,mBAAAC,SAAAoE,GAAAG,GACAG,EAAA9E,EAAAG,OAAA,gBAAAC,SAAAtC,KAAAgD,QAAA8D,KAAA,cAAAH,EAAAzE,EAAAmB,KAAA,QAAAsD,EAAA,aAAArE,OACAR,EAAAI,EAAAE,MAEA,QAAAG,EAAAL,EAAA,eAAAJ,GAAA,KAAAA,GAAA,IAAAA,EAAAQ,QAAAyE,GAAAC,GACA,EACAjF,QAAA,SAAAG,GACA,OAAAA,EAAAG,OAAA,gFAAAA,OAAA,aAAAC,QAAA,KAAAJ,EAAAE,OACAP,EAAAK,EAAAE,MAAAF,EAAAmB,KAAA,WAGA,EACA6C,IAAA,SAAAhE,GACA,OAAAA,EAAAG,OAAAhB,EAAA,KAAAlB,EAAAkD,KAAA,QAAA,YAAAhB,OAAA,SAAAC,QAAA,KAAAJ,EAAAE,QACA6E,WAAA/E,EAAAmB,KAAA,SAAA,IACAlD,EAAA8G,WAAA/E,EAAAE,MAKA,EACA+D,IAAA,SAAAjE,GACA,OAAAA,EAAAG,OAAAhB,EAAA,KAAAlB,EAAAkD,KAAA,QAAA,YAAAhB,OAAA,SAAAC,QAAA,KAAAJ,EAAAE,QACA6E,WAAA/E,EAAAmB,KAAA,SAAA,IACAlD,EAAA8G,WAAA/E,EAAAE,MAKA,EACAgE,KAAA,SAAAlE,GACA,GAAAA,EAAAG,OAAAhB,EAAA,KAAAlB,EAAAkD,KAAA,QAAA,YAAAhB,OAAA,UAAAC,QAAA,KAAAJ,EAAAE,MAAA,CACA,IAIA8E,EAJAhB,EAAAe,WAAA/E,EAAAmB,KAAA,SAAA,EACA+C,EAAAa,WAAA/E,EAAAmB,KAAA,UAAA,EACAjB,EAAA6E,WAAA/E,EAAAE,OACA+E,GApJArF,IADAA,EAqJAsE,GApJA,IAAAgB,MAAA,MACA9E,OAAA,EACAR,EAAA,GAAAQ,OAEA,EAmJA,OAAA6E,GACAD,EAAAG,KAAAC,IAAA,GAAAH,GACAE,KAAAE,OAAAnF,EAAA8D,GAAAgB,IAAAd,EAAAc,GAAAG,KAAAC,IAAA,IAAAH,IAAA,IAEA/E,EAAA8D,GAAAE,GAAA,CACA,CA7JA,IAAAtE,EA8JA,OAAA,CACA,EACAuE,MAAA,SAAAnE,GACA,OAAAD,EAAAC,EAAA,iBAAA/B,EAAAkD,KAAA,QAAA,UAAApC,EACA,EACAqF,IAAA,SAAApE,GACA,OAAAD,EAAAC,EAAA,eAAA/B,EAAAkD,KAAA,QAAA,QAAAnC,EACA,EACAqF,KAAA,SAAArE,GACA,OAAAA,EAAAG,OAAA,iBAAAlC,EAAAkD,KAAA,QAAA,UAAAf,QAAA,KAAAJ,EAAAE,OACA,OAAAjC,EAAAqH,UAAAtF,EAAAE,MAAAF,EAAAmB,KAAAlD,EAAAkD,KAAA,WAGA,EACAoD,QAAA,SAAAvE,GACA,GAAAA,EAAAG,OAAA,IAAAlC,EAAAkD,KAAA,QAAA,aAAAf,OAAA,CACA,IAAAoC,EAAA1E,KACAyG,EAAAtG,EAAAsH,eAAAvF,GACAwF,EAAA,SAAAC,GACA,OAAA,MAAA,CACA,EAgBA,GAdAzF,EAAA0F,KAAA,uBAAAF,EAAAjB,EAAAkB,aAAAlB,EAAAoB,iBACA3F,EAAA0F,KAAA,sBAAA,GACAlD,EAAAoD,aAAA,EACArB,EAAAV,WAAAgC,MAAA,WACArD,EAAAoD,aAAA,EACApD,EAAAsD,cAAA9F,EACA,IAAA+F,MAAA,SAAAL,GACAlD,EAAAoD,aAAA,EACAF,EAAAM,OAAA,wBAAAN,EAAAM,OACA9H,OAAA+H,QAAAC,KAAA,oKAEA,KAGAV,EAAAjB,EAAAkB,WAEA,OADAzF,EAAAmG,WAAA,sBACA5B,EAAAkB,SAEA,CACA,OAAA,CACA,GAEAW,gBAAA,EACA/C,mBAAA,GAGAgD,aAAA,WACA,OAAApI,EAAAG,GAAAoD,UAAAG,YAAA7D,KAAAgD,QAAAhD,KAAAiE,SACA,EAEA6B,gBAAA,WACA,OAAA3F,EAAAG,GAAAoD,UAAAK,eAAA/D,KAAAgD,QACA,EAEAwF,QAAA,WACAnI,EAAA4E,GAAAuD,QAAAtD,KAAAlF,MAEAA,KAAAgD,QAAAyF,IAAAlI,GAEAP,KAAAuF,oBACAvF,KAAAuF,kBAAAkD,IAAAlI,GACAP,KAAAuF,kBAAA,KAEA,EAEAzD,MAAA,WACA,QAAA9B,KAAA6F,cAIA,IAAA7F,KAAAiE,SAAA3B,MACA,EAEAoG,QAAA,SAAAC,GACA,SAAA3I,KAAA+F,aAAA/F,KAAAuI,gBAAAvI,KAAA8H,eACAa,EAAAC,kBACAD,EAAAE,2BACAF,EAAAG,kBACA,EAGA,EAEAd,cAAA,SAAAhF,GACA,IAAA+F,EAAA/I,KAAA8B,QAEA9B,KAAAgJ,cAAAhG,GAEAhD,KAAA8B,UAAAiH,GACA/I,KAAAiJ,QAAAtH,EAEA,EAEAiE,cAAA,WACA,IAAAlB,EAAA1E,KAEA0E,EAAA1B,QAAAwC,GAAAhE,IACAkD,EAAA1B,QAAAkG,GAAA,SAAA3I,EAAAmE,EAAAgE,QAAAS,KAAAzE,IAGAA,EAAAD,QAAA6D,iBACA5D,EAAA1B,QAAAwC,GAAArE,IASAuD,EAAA1B,QAAAkG,GAAA5H,EAAAf,GAAA,WACAmE,EAAAsD,cAAAtD,EAAA1B,QACA,IAEA0B,EAAA1B,QAAAwC,GAAApE,IACAsD,EAAA1B,QAAAkG,GAAA,QAAA3I,GAAA,WACAmE,EAAAsD,cAAAtD,EAAA1B,QACA,MAfA0B,EAAA1B,QAAAkG,GAAA5H,EAAAf,EAAAmE,EAAAe,gBAAA,WACAf,EAAAsD,cAAA/H,EAAAD,MACA,IAEA0E,EAAA1B,QAAAkG,GAAA,QAAA3I,EAAAmE,EAAAgB,mBAAA,WACAhB,EAAAsD,cAAA/H,EAAAD,MACA,KAaA,EAEA+F,SAAA,WACA,IAAAqD,EACAlG,EAEAZ,EADA4B,GAAA,EAGAyD,EAAA3H,KAAA8B,QAIA,GAFA9B,KAAA2F,QAAA,CAAA,EAEA3F,KAAAgD,QAAAwC,GAAArE,GAaA+C,EAAAlE,KAAAgJ,cAAAhJ,KAAAgD,aAbA,CACA,IAAAqG,GAAA,EAIA,IAAAnG,EAAA,EAAAZ,GAFA8G,EAAApJ,KAAAgD,QAAA8D,KAAA9G,KAAAyF,iBAEAnD,OAAAY,EAAAZ,EAAAY,IACAlD,KAAAgJ,cAAAI,EAAAE,GAAApG,MACAmG,GAAA,GAIAnF,GAAAmF,CACA,CAcA,OAVArJ,KAAAyE,QAAAc,oBAAAoC,GACA3H,KAAAuJ,wBAGAvJ,KAAAiJ,QAAAvH,EAAA,CAAA8H,MAAAtF,EAAAD,OAAAjE,KAAAiE,WAEA0D,IAAAzD,GACAlE,KAAAiJ,QAAAtH,GAGAuC,CACA,EAEA8E,cAAA,SAAA9G,GACAA,EAAAjC,EAAAiC,GAGAlC,KAAA6F,cAAA,EAEA,IAIA4B,EApVA3F,EAgVA4C,EAAA1E,KACAoF,EAAAV,EAAAS,eACAjB,EAAAQ,EAAA+E,eAAAvH,GACAsH,EAAAtF,EAAAsF,MAEArG,EAAA,IAAA3C,EACAuC,EAAAb,EAAAmB,KAAA9B,IAAA,GACAmI,EAAAhF,EAAAiF,sBAAA5G,GAAAO,IAAApB,EAAA0H,KAAAzG,GAAAd,QAAA,WACA,IAAAW,EAAA/C,EAAAD,MACA,OAAAgD,EAAAX,OAAA,IAAAlC,EAAAkD,KAAA,OAAA,KAAAf,QACAU,EAAAK,KAAAlD,EAAAkD,KAAA,UAAAN,CAKA,KAAA8G,SAAA,YACAC,EAAAN,EAAA,GAAA9E,EAAAqF,gBAAA7H,EAAAgC,EAAA8F,KACAC,EAAAT,EAAA,GAAA9G,EAAA0C,EAAA,CAAAf,SAjWAvC,EAiWAgI,EAhWAhI,EAAAoI,QAAA,QAAA,SACAA,QAAA,UAAA,KACAA,QAAA,SAAA,KACAA,QAAA,QAAA,KACAA,QAAA,QAAA,MA4VA9F,MAAArB,KACAoH,GAAAjI,EAAAmB,KAAArC,GACAoJ,EAAAlI,EAAAsD,GAzZA,kBA0ZA6E,EAAAnI,EAAAoI,OAzZA,YAyaA,GAdApI,EAAAqI,WAAAvJ,GAEAkB,EAAAsI,SAAA,cACA/C,EAAAtH,EAAAsH,eAAAvF,EAAAuI,QAAA,kBAGAvI,EAAAsD,GAAA,kBACAiC,EAAAtH,EAAAsH,eAAAvF,EAAAuI,QAAA,mBAGAvI,EAAAsD,GAAA,qBACAiC,EAAAtH,EAAAsH,eAAAvF,EAAAuI,QAAA,sBAGAjB,GAAAtH,EAAA0F,KAAA,6BAoDAlD,EAAAiB,QAAA5C,OApDA,CACA2B,EAAAiB,QAAA5C,GAAA+G,EACA,IAAAY,EAAAhB,EAAArG,KAAA,MASA,GAPAqB,EAAAiG,0BAAAV,EAAAlH,GAGA2H,GACAT,EAAA5G,KAAA,KAAAqH,GAGA,IAAAhB,EAAApH,OACAoH,EAAAkB,YAAAX,OACA,CACAxC,EAAAA,GAAAtH,EAAAsH,eAAAvF,GACA,IAAA2I,EAAA3I,EAAAoI,SAAAQ,IAAA,GACAC,EAAA7I,EAAA0H,OAAAkB,IAAA,GACAE,EAAA9I,EAAA+I,OAAAH,IAAA,IAGArD,GAAAvF,EAAAsD,GAAA,kBACAiC,EAAAtH,EAAAsH,eAAAvF,EAAAuI,QAAA,oBAIAhD,GAAAvF,EAAAsD,GAAA,qBACAiC,EAAAtH,EAAAsH,eAAAvF,EAAAuI,QAAA,sBAGAhD,GAAAA,EAAAyD,UAAAzD,EAAAzE,UAAAyE,EAAAyD,SAAA,CAAA,YAAA,aAAA,iBAAAtE,QAAAa,EAAAhD,QAAAjC,OAAA,GACAyH,EAAAkB,YAAA1D,EAAAyD,SACAL,GAAA,UAAAA,EAAApH,SAEAwG,EAAAkB,YAAAN,GACAE,GAAAxH,EAAAwH,EAAA7I,EAAA,IAEA+H,EAAAkB,YAAAJ,GACAC,GAAAzH,EAAAyH,EAAA9I,EAAA,IAEA+H,EAAAkB,YAAAjJ,GACAkI,GAAAC,EAAA/H,OAEA2H,EAAAkB,YAAAd,GAEAJ,EAAAkB,YAAAjJ,EAEA,CAEA+H,EAAAmB,YAAA,YAEAlJ,EAAAmB,KAAArC,GAAA,EACA,CAcA,GAVAmJ,IAAAX,GACAxJ,KAAAiJ,QAAArH,EAAA,CAAA4H,MAAAA,EAAAtH,MAAAA,EAAAgG,MAAA4B,EAAA1F,MAAArB,OAGA0E,EAAAA,GAAA,aAAAA,EAAAhD,QAAAjC,KAAAiF,EAAAtH,EAAAsH,eAAAvF,MACAuF,EAAA4D,gBAAA5D,EAAAyD,SAAAhJ,EAAAsD,GAAA,oBAAAtD,EAAAsD,GAAA,mBACAtD,EAAAoJ,YAAA3K,GAAA6I,GACAtH,EAAAoJ,YAAA1K,EAAA4I,IAGA/B,EAAA,CACA,IAAA8D,EAAA9D,EAAA4D,eAAA5D,EAAAyD,QACAM,EAAA/D,EAAAgE,aAEAF,GAAArJ,EAAAsD,GAAA,oBAAAtD,EAAAsD,GAAA,kBACA+F,EAAAD,YAAA3K,GAAA6I,GACA+B,EAAAD,YAAA1K,EAAA4I,IAEAgC,GACAA,EAAAF,YAAAxK,GAAA0I,EAEA,CAEA,GAAAW,IAAAX,EAAA,CACA,IAAAkC,EAAAzB,EAAAA,EAAA5G,KAAA,MAAAqG,EAAArG,KAAA,MAEAqB,EAAAiH,2BAAAzJ,EAAAwJ,GAEA1L,KAAAyE,QAAAc,mBAAAvF,KAAAyE,QAAA6D,gBACAtI,KAAAuJ,uBAEA,CAEA,OAAAC,CACA,EAEAoC,aAAA,WACA,IACAzI,EAAA,IAAA3C,EACAwC,EAFAhD,KAEAgD,QAFAhD,KAIA6L,iCAEA7I,EAAAwC,GAAArE,GAGA6B,EAAA4G,KAAAzG,GAAA0G,SAAA,YAFA7G,EAAA8D,KAAA3D,GAAA0G,SAAA,WAIA,EAEAiC,MAAA,WACA,IAAApH,EAAA1E,KACAoJ,EAAA1E,EAAA1B,QAAA8D,KAAA,IAAAnG,GACAoL,EAAArH,EAAA1B,QAAA8D,KAAA,IAAAhG,GAEA4D,EAAAiB,QAAA,GAEAjB,EAAAkH,eAEAlH,EAAAsH,wBAEA5C,EAAAmB,WAAAvJ,GACAoI,EAAAgC,YAAAzK,GACAoL,EAAAX,YAAAtK,EACA,EAEA6I,sBAAA,SAAA5G,GAKA,IAJA,IACAP,EADAyJ,EAAA9L,EAAAG,GAAAoD,UAAAwI,gBAEAjJ,EAAAhD,IAEAiD,EAAA,EAAAZ,EAAAtC,KAAAgD,QAAAV,OAAAY,EAAAZ,EAAAY,IACAD,EAAAA,EAAAK,IAAAT,EAAA7C,KAAAgD,QAAAE,GAAAiJ,qBAAA,KAAApJ,IAGA,IAAAP,KAAAyJ,EACAhJ,EAAAA,EAAAK,IAAA2I,EAAAzJ,GAAA4J,OAAApM,KAAAgD,QAAAD,IAGA,OAAAE,CACA,EAEA0H,0BAAA,SAAA0B,EAAAtJ,GACA,IACAP,EADAyJ,EAAA9L,EAAAG,GAAAoD,UAAAwI,gBAUA,IAAA1J,KAPA6J,EAAAxC,SAAArJ,GACA6C,KAAAlD,EAAAkD,KAAA,OAAAN,GAAA,IAEAsJ,EAAAhJ,KAAA,OACAgJ,EAAAhJ,KAAA,KAAAN,EAAA,UAGAkJ,EACAA,EAAAzJ,GAAA8J,SAAAD,EAAAtJ,EAEA,EAEAgH,gBAAA,SAAA7H,EAAAqK,GACA,IAGAC,EAFAC,EADAzM,KACAyE,QAAAb,SAAA2I,GACAxJ,EAAAb,EAAAmB,KAAA9B,GASA,OANApB,EAAAG,GAAAgE,UAAAoI,UAAAjI,QAAAb,SAAA2I,KACAC,EAAArM,EAAAwM,WAAAF,GAAAA,EAAAvK,GAAAuK,GAGAA,EAAAtM,EAAAwM,WAAAF,GAAAA,EAAAvK,GAAAuK,EAEAtM,EAAAyM,OAAA1K,EAAAmB,KAAAlD,EAAAkD,KAAAkJ,EAAA,UAAArK,EAAAmB,KAAA,sBAAAmJ,GAAAC,GAAAvK,EAAAmB,KAAA,UAAA,GACAN,EACAb,EAAAmB,KAAAkJ,IAAArK,EAAAmB,KAAAlD,EAAAkD,KAAAkJ,IACA,EAEA9C,eAAA,SAAAvH,GACA,IACA2K,EADAlJ,EAAA3D,KAAAyE,QAAAd,MAGA,IAAAkJ,KAAAlJ,EACA,IAAAA,EAAAkJ,GAAA3H,KAAAlF,KAAAkC,GACA,MAAA,CAAAsH,OAAA,EAAAQ,IAAA6C,GAIA,MAAA,CAAArD,OAAA,EACA,EAEAvF,OAAA,WACA,IAEAiE,EAFA4E,EAAA,GACA7I,EAAAjE,KAAA2F,QAGA,IAAAuC,KAAAjE,EACA6I,EAAAC,KAAA9I,EAAAiE,IAEA,OAAA4E,CACA,EAEAE,WAAA,SAAAvI,GACAA,EAAAc,mBACAvF,KAAAgM,wBAGA7L,EAAA8M,WAAAjN,KAAAyE,QAAAA,GAEAzE,KAAAwI,UAEAxI,KAAAwE,KAAAxE,KAAAgD,QAAAhD,KAAAyE,SAEAzE,KAAAkN,WAAAlN,KAAAyE,QACA,EAEA0I,eAAA,WAKA,IAJA,IACA/D,EADApJ,KACAgD,QAAA8D,KADA9G,KACAyF,gBACA2H,EAAA,GAEAlK,EAAA,EAAAZ,EAAA8G,EAAA9G,OAAAY,EAAAZ,EAAAY,IAAA,CACA,IAAAhB,EAAAjC,EAAAmJ,EAAAlG,IAEAX,EAAAL,EAAAX,MAIA,IAAA6L,EAAAxG,QAAA1E,EAAAmB,KAAA9B,KACA,IAAAW,EAAAuI,QAAA,oBAAAnI,QACA,IAAAJ,EAAAuI,QAAA,iBAAAnI,SACA8K,EAAAL,KAAA7K,EAAAmB,KAAA9B,GAGA,CAEA,OAAA6L,CACA,EAEAzB,2BAAA,SAAAzJ,EAAAwJ,GACA,IAAA2B,EAAAlN,EAAAmN,0BAAApL,GAEAmL,GAAA3B,GAIAvL,EAAAoN,gBAAAF,EArpBA,mBAqpBA3B,EACA,EAEAG,+BAAA,WAKA,IAJA,IAEA3J,EAAAwJ,EAFAhH,EAAA1E,KACAoJ,EAAA1E,EAAA1B,QAAA8D,KAAA,IAAAnG,GAAA6M,UAGArJ,EAAA,EAAAA,EAAAiF,EAAA9G,OAAA6B,GAAA,GACAjC,EAAAjC,EAAAmJ,EAAAjF,KAEAqB,GAAA,WACAkG,EAAAhH,EAAAiF,sBAAAzH,EAAAmB,KAAA9B,IACA+B,IAAApB,EAAA0H,KAAA,IAAApJ,IACA6C,KAAA,MAEAqB,EAAAiH,2BAAAzJ,EAAAwJ,GAGA,EAEA+B,cAAA,WAKA,IAJA,IAAA/I,EAAA1E,KACA0N,EAAAhJ,EAAAyI,iBACAC,EAAA,GAEAjJ,EAAA,EAAAA,EAAAuJ,EAAApL,OAAA6B,GAAA,EAAA,CACA,IAAA3B,EAAAkL,EAAAvJ,GAEAO,EAAAiB,QAAAnD,IACA4K,EAAAL,KAAA,CACA3I,MAAA5B,EACA6B,QAAAK,EAAAiB,QAAAnD,IAGA,CAEA,OAAA4K,CACA,EAEAO,eAAA,WACA,IAIAtB,EAJA3H,EAAA1E,KACAyE,EAAAzE,KAAAyE,QAAAc,kBAEAyF,EADAhL,KAAAgD,QACAiI,OAgBA,OAZAoB,EADA5H,EAAA4H,UACApM,EAAAwE,EAAA4H,WACArB,GAAAA,EAAAR,SAAA3J,GACAmK,EAEA/K,EAAA,WAAA2N,aAAAlJ,EAAA1B,UAGA6G,SAAA,CAAAhJ,EAAAE,GAAA8M,KAAA,MACAxB,EAAAhJ,KAAA,OAAA,SAEAgJ,EAAAnD,GAAA,QAAA3I,EAAAmE,EAAAoJ,cAAA3E,KAAAzE,IAEA2H,CACA,EAEAyB,cAAA,SAAAnF,GACAA,EAAAG,iBAEA,IAGAuE,EAFAU,EAAA9N,EAAA0I,EAAAqF,QACAA,EAFAhO,KAEAgD,QAAA8D,KAAA,UAAAiH,EAAAnG,KAAA,SAAA,MAGAoG,EAAA1L,SAIA+K,EAAAlN,EAAAmN,0BAAAU,KAGAX,EAAApE,QAAA,QAEA,EAEAM,sBAAA,WACA,IAGA0E,EAHAvJ,EAAA1E,KACAkO,EAAAxJ,EAAAa,kBACAtB,EAAAS,EAAA+I,gBAGAS,IACAA,EAAAxJ,EAAAa,kBAAAb,EAAAiJ,kBAGAM,EAAAvL,EAAAgC,EAAAY,iBAAA,CACArB,OAAAA,KAGAiK,EAAAC,KAAAF,GAEAC,EAAA5C,YAAA,YAAArH,EAAA3B,OACA,EAEA0J,sBAAA,WACA,IACAkC,EADAlO,KACAuF,kBAEA2I,GAIAA,EAAArE,SAAA,WACA,IAGA1J,EAAAG,GAAA8N,OAAA9J,EACA,CArxBA,CAqxBAlE,OAAAD,MAAAkO,QACAlO,KAIA","file":"kendo.validator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.kendovalidator = global.kendovalidator || {}, global.kendovalidator.js = factory()));\n})(this, (function () {\n    var __meta__ = {\n        id: \"validator\",\n        name: \"Validator\",\n        category: \"web\",\n        description: \"The Validator offers an easy way to do a client-side form validation.\",\n        depends: [ \"core\" ]\n    };\n\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoValidator\",\n            INVALIDMSG = \"k-invalid-msg\",\n            invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n            INVALIDINPUT = \"k-invalid\",\n            VALIDINPUT = \"k-valid\",\n            VALIDATIONSUMMARY = \"k-validation-summary\",\n            INVALIDLABEL = \"k-text-error\",\n            MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n            INPUTINNER = \".k-input-inner\",\n            INPUTWRAPPER = \".k-input\",\n            ARIAINVALID = \"aria-invalid\",\n            ARIADESCRIBEDBY = \"aria-describedby\",\n            emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n            urlRegExp = /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i,\n            INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n            CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n            NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n            BLUR = \"blur\",\n            NAME = \"name\",\n            FORM = \"form\",\n            NOVALIDATE = \"novalidate\",\n            //events\n            VALIDATE = \"validate\",\n            CHANGE = \"change\",\n            VALIDATE_INPUT = \"validateInput\",\n\n            patternMatcher = function(value, pattern) {\n                if (typeof pattern === \"string\") {\n                    pattern = new RegExp('^(?:' + pattern + ')$');\n                }\n                return pattern.test(value);\n            },\n            matcher = function(input, selector, pattern) {\n                var value = input.val();\n\n                if (input.filter(selector).length && value !== \"\") {\n                    return patternMatcher(value, pattern);\n                }\n                return true;\n            },\n            hasAttribute = function(input, name) {\n                if (input.length) {\n                    return input[0].attributes[name] != null;\n                }\n                return false;\n            };\n\n        if (!kendo.ui.validator) {\n            kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n        }\n\n        function resolveRules(element) {\n            var resolvers = kendo.ui.validator.ruleResolvers || {},\n                rules = {},\n                name;\n\n            for (name in resolvers) {\n                $.extend(true, rules, resolvers[name].resolve(element));\n            }\n            return rules;\n        }\n\n        function decode(value) {\n            return value.replace(/&amp/g, '&amp;')\n                .replace(/&quot;/g, '\"')\n                .replace(/&#39;/g, \"'\")\n                .replace(/&lt;/g, '<')\n                .replace(/&gt;/g, '>');\n        }\n\n        function numberOfDecimalDigits(value) {\n            value = (value + \"\").split('.');\n            if (value.length > 1) {\n                return value[1].length;\n            }\n            return 0;\n        }\n\n        function parseHtml(text) {\n            if ($.parseHTML) {\n                return $($.parseHTML(text));\n            }\n            return $(text);\n        }\n\n        function searchForMessageContainer(elements, fieldName) {\n            var containers = $(),\n                element,\n                attr;\n\n            for (var idx = 0, length = elements.length; idx < length; idx++) {\n                element = elements[idx];\n                if (invalidMsgRegExp.test(element.className)) {\n                    attr = element.getAttribute(kendo.attr(\"for\"));\n                    if (attr === fieldName) {\n                        containers = containers.add(element);\n                    }\n                }\n            }\n            return containers;\n        }\n\n        function isLabelFor(label, element) {\n            if (!label) {\n                return false;\n            }\n            if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n                return false;\n            }\n            if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n                return false;\n            }\n            if (label.getAttribute('for') !== element.getAttribute('id')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        var SUMMARYTEMPLATE = ({ errors }) => {\n            let result = '<ul>';\n            for (var i = 0; i < errors.length; i += 1) {\n                result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n            }\n\n            result += '</ul>';\n            return result;\n        };\n\n        var Validator = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    resolved = resolveRules(element),\n                    validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n                options = options || {};\n\n                options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n                options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n                Widget.fn.init.call(that, element, options);\n\n                that._errorTemplate = kendo.template(that.options.errorTemplate);\n                that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n                if (that.element.is(FORM)) {\n                    that.element.attr(NOVALIDATE, NOVALIDATE);\n                }\n\n                that._inputSelector = INPUTSELECTOR + validateAttributeSelector;\n                that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;\n\n                that._errors = {};\n                that._attachEvents();\n                that._isValidated = false;\n\n                if (that._validateOnInit()) {\n                    that.validate();\n                }\n            },\n\n            events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n            options: {\n                name: \"Validator\",\n                errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n                messages: {\n                    required: \"{0} is required\",\n                    pattern: \"{0} is not valid\",\n                    min: \"{0} should be greater than or equal to {1}\",\n                    max: \"{0} should be smaller than or equal to {1}\",\n                    step: \"{0} is not valid\",\n                    email: \"{0} is not valid email\",\n                    url: \"{0} is not valid URL\",\n                    date: \"{0} is not valid date\",\n                    dateCompare: \"End date should be greater than or equal to the start date\",\n                    captcha: \"The text you entered doesn't match the image.\"\n                },\n                rules: {\n                    required: function(input) {\n                        var noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                            name = input.attr(\"name\"),\n                            quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                            namedCheckbox = input.attr(\"name\") && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                            radio = input.filter(\"[type=radio]\").length && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            value = input.val();\n\n                        return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                    },\n                    pattern: function(input) {\n                        if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                            return patternMatcher(input.val(), input.attr(\"pattern\"));\n                        }\n                        return true;\n                    },\n                    min: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return min <= val;\n                        }\n                        return true;\n                    },\n                    max: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                            var max = parseFloat(input.attr(\"max\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return max >= val;\n                        }\n                        return true;\n                    },\n                    step: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                step = parseFloat(input.attr(\"step\")) || 1,\n                                val = parseFloat(input.val()),\n                                decimals = numberOfDecimalDigits(step),\n                                raise;\n\n                            if (decimals) {\n                                raise = Math.pow(10, decimals);\n                                return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                            }\n                            return ((val - min) % step) === 0;\n                        }\n                        return true;\n                    },\n                    email: function(input) {\n                        return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                    },\n                    url: function(input) {\n                        return matcher(input, \"[type=url],[\" + kendo.attr(\"type\") + \"=url]\", urlRegExp);\n                    },\n                    date: function(input) {\n                        if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                            return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                        }\n                        return true;\n                    },\n                    captcha: function(input) {\n                        if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                            var that = this,\n                                captcha = kendo.widgetInstance(input),\n                                isValidated = function(isValid) {\n                                    return typeof(isValid) !== 'undefined' && isValid !== null;\n                                };\n\n                            if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                                input.data(\"captcha_validating\", true);\n                                that._validating = true;\n                                captcha.validate().done(function() {\n                                    that._validating = false;\n                                    that._checkElement(input);\n                                }).fail(function(data) {\n                                    that._validating = false;\n                                    if (data.error && data.error === \"handler_not_defined\") {\n                                        window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                    }\n                                });\n                            }\n\n                            if (isValidated(captcha.isValid())) {\n                                input.removeData(\"captcha_validating\");\n                                return captcha.isValid();\n                            }\n                        }\n                        return true;\n                    }\n                },\n                validateOnBlur: true,\n                validationSummary: false\n            },\n\n            _allowSubmit: function() {\n                return kendo.ui.validator.allowSubmit(this.element, this.errors());\n            },\n\n            _validateOnInit: function() {\n                return kendo.ui.validator.validateOnInit(this.element);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n\n                if (this.validationSummary) {\n                    this.validationSummary.off(NS);\n                    this.validationSummary = null;\n                }\n            },\n\n            value: function() {\n                if (!this._isValidated) {\n                    return false;\n                }\n\n                return this.errors().length === 0;\n            },\n\n            _submit: function(e) {\n                if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                    e.stopPropagation();\n                    e.stopImmediatePropagation();\n                    e.preventDefault();\n                    return false;\n                }\n                return true;\n            },\n\n            _checkElement: function(element) {\n                var state = this.value();\n\n                this.validateInput(element);\n\n                if (this.value() !== state) {\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _attachEvents: function() {\n                var that = this;\n\n                if (that.element.is(FORM)) {\n                    that.element.on(\"submit\" + NS, that._submit.bind(that));\n                }\n\n                if (that.options.validateOnBlur) {\n                    if (!that.element.is(INPUTSELECTOR)) {\n                        that.element.on(BLUR + NS, that._inputSelector, function() {\n                            that._checkElement($(this));\n                        });\n\n                        that.element.on(\"click\" + NS, that._checkboxSelector, function() {\n                            that._checkElement($(this));\n                        });\n                    } else {\n                        that.element.on(BLUR + NS, function() {\n                            that._checkElement(that.element);\n                        });\n\n                        if (that.element.is(CHECKBOXSELECTOR)) {\n                            that.element.on(\"click\" + NS, function() {\n                                that._checkElement(that.element);\n                            });\n                        }\n                    }\n                }\n            },\n\n            validate: function() {\n                var inputs;\n                var idx;\n                var result = false;\n                var length;\n\n                var isValid = this.value();\n\n                this._errors = {};\n\n                if (!this.element.is(INPUTSELECTOR)) {\n                    var invalid = false;\n\n                    inputs = this.element.find(this._inputSelector);\n\n                    for (idx = 0, length = inputs.length; idx < length; idx++) {\n                        if (!this.validateInput(inputs.eq(idx))) {\n                            invalid = true;\n                        }\n                    }\n\n                    result = !invalid;\n                } else {\n                    result = this.validateInput(this.element);\n                }\n\n                if (this.options.validationSummary && !isValid) {\n                    this.showValidationSummary();\n                }\n\n                this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n                if (isValid !== result) {\n                    this.trigger(CHANGE);\n                }\n\n                return result;\n            },\n\n            validateInput: function(input) {\n                input = $(input);\n\n\n                this._isValidated = true;\n\n                var that = this,\n                    template = that._errorTemplate,\n                    result = that._checkValidity(input),\n                    valid = result.valid,\n                    widgetInstance,\n                    className = \".\" + INVALIDMSG,\n                    fieldName = (input.attr(NAME) || \"\"),\n                    lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                        var element = $(this);\n                        if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                            return element.attr(kendo.attr(\"for\")) === fieldName;\n                        }\n\n                        return true;\n\n                    })).addClass(\"k-hidden\"),\n                    messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                    messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                    wasValid = !input.attr(ARIAINVALID),\n                    isInputInner = input.is(INPUTINNER),\n                    inputWrapper = input.parent(INPUTWRAPPER);\n\n                input.removeAttr(ARIAINVALID);\n\n                if (input.hasClass(\"k-hidden\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n                }\n\n                if (input.is(\"[type=radio]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                }\n\n                if (input.is(\"[type=checkbox]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                }\n\n                if (!valid && !input.data(\"captcha_validating\")) {\n                    that._errors[fieldName] = messageText;\n                    var lblId = lbl.attr('id');\n\n                    that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                    if (lblId) {\n                        messageLabel.attr('id', lblId);\n                    }\n\n                    if (lbl.length !== 0) {\n                        lbl.replaceWith(messageLabel);\n                    } else {\n                        widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                        var parentElement = input.parent().get(0);\n                        var nextElement = input.next().get(0);\n                        var prevElement = input.prev().get(0);\n\n                        // Get the instance of the RadioGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=radio]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                        }\n\n                        // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                        }\n\n                        if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                            messageLabel.insertAfter(widgetInstance.wrapper);\n                        } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                            // Input inside label\n                            messageLabel.insertAfter(parentElement);\n                        } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                            // Input before label\n                            messageLabel.insertAfter(nextElement);\n                        } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                            // Input after label\n                            messageLabel.insertAfter(input);\n                        } else if (isInputInner && inputWrapper.length) {\n                            // Input after input wrapper\n                            messageLabel.insertAfter(inputWrapper);\n                        } else {\n                            messageLabel.insertAfter(input);\n                        }\n                    }\n\n                    messageLabel.removeClass(\"k-hidden\");\n\n                    input.attr(ARIAINVALID, true);\n                } else {\n                    delete that._errors[fieldName];\n                }\n\n                if (wasValid !== valid) {\n                    this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n                }\n\n                widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n                if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    input.toggleClass(INVALIDINPUT, !valid);\n                    input.toggleClass(VALIDINPUT, valid);\n                }\n\n                if (widgetInstance) {\n                    var inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                    var inputLabel = widgetInstance._inputLabel;\n\n                    if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                        inputWrap.toggleClass(INVALIDINPUT, !valid);\n                        inputWrap.toggleClass(VALIDINPUT, valid);\n                    }\n                    if (inputLabel) {\n                        inputLabel.toggleClass(INVALIDLABEL, !valid);\n                    }\n                }\n\n                if (wasValid !== valid) {\n                    var errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n\n                    if (this.options.validationSummary && this.options.validateOnBlur) {\n                        this.showValidationSummary();\n                    }\n                }\n\n                return valid;\n            },\n\n            hideMessages: function() {\n                var that = this,\n                    className = \".\" + INVALIDMSG,\n                    element = that.element;\n\n                that._disassociateMessageContainers();\n\n                if (!element.is(INPUTSELECTOR)) {\n                    element.find(className).addClass(\"k-hidden\");\n                } else {\n                    element.next(className).addClass(\"k-hidden\");\n                }\n            },\n\n            reset: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT),\n                    labels = that.element.find(\".\" + INVALIDLABEL);\n\n                that._errors = [];\n\n                that.hideMessages();\n\n                that.hideValidationSummary();\n\n                inputs.removeAttr(ARIAINVALID);\n                inputs.removeClass(INVALIDINPUT);\n                labels.removeClass(INVALIDLABEL);\n            },\n\n            _findMessageContainer: function(fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name,\n                    containers = $();\n\n                for (var idx = 0, length = this.element.length; idx < length; idx++) {\n                    containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName(\"*\"), fieldName));\n                }\n\n                for (name in locators) {\n                    containers = containers.add(locators[name].locate(this.element, fieldName));\n                }\n\n                return containers;\n            },\n\n            _decorateMessageContainer: function(container, fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name;\n\n                container.addClass(INVALIDMSG)\n                    .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n                if (!container.attr(\"id\")) {\n                    container.attr(\"id\", fieldName + \"-error\");\n                }\n\n                for (name in locators) {\n                    locators[name].decorate(container, fieldName);\n                }\n            },\n\n            _extractMessage: function(input, ruleKey) {\n                var that = this,\n                    customMessage = that.options.messages[ruleKey],\n                    fieldName = input.attr(NAME),\n                    nonDefaultMessage;\n\n                if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                     nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n                }\n\n                customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n                return kendo.format(input.attr(kendo.attr(ruleKey + \"-msg\")) || input.attr(\"validationMessage\") || nonDefaultMessage || customMessage || input.attr(\"title\") || \"\",\n                    fieldName,\n                    input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n            },\n\n            _checkValidity: function(input) {\n                var rules = this.options.rules,\n                    rule;\n\n                for (rule in rules) {\n                    if (!rules[rule].call(this, input)) {\n                        return { valid: false, key: rule };\n                    }\n                }\n\n                return { valid: true };\n            },\n\n            errors: function() {\n                var results = [],\n                    errors = this._errors,\n                    error;\n\n                for (error in errors) {\n                    results.push(errors[error]);\n                }\n                return results;\n            },\n\n            setOptions: function(options) {\n                if (options.validationSummary) {\n                    this.hideValidationSummary();\n                }\n\n                kendo.deepExtend(this.options, options);\n\n                this.destroy();\n\n                this.init(this.element, this.options);\n\n                this._setEvents(this.options);\n            },\n\n            _getInputNames: function() {\n                var that = this,\n                    inputs = that.element.find(that._inputSelector),\n                    sorted = [];\n\n                for (var idx = 0, length = inputs.length; idx < length; idx++) {\n                    var input = $(inputs[idx]);\n\n                    if (hasAttribute(input, NAME)) {\n                        // Add current name if:\n                        // - not present so far;\n                        // - present but not part of CheckBoxGroup or RadioGroup.\n                        if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                            (input.closest(\".k-checkbox-list\").length === 0 &&\n                            input.closest(\".k-radio-list\").length === 0)) {\n                                sorted.push(input.attr(NAME));\n                        }\n                    }\n                }\n\n                return sorted;\n            },\n\n            _associateMessageContainer: function(input, errorId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !errorId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n            },\n\n            _disassociateMessageContainers: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                    input, errorId;\n\n                for (var i = 0; i < inputs.length; i += 1) {\n                    input = $(inputs[i]);\n\n                    if (input.is(\"input\")) {\n                        errorId = that._findMessageContainer(input.attr(NAME))\n                            .add(input.next(\".\" + INVALIDMSG))\n                            .attr(\"id\");\n\n                        that._associateMessageContainer(input, errorId);\n                    }\n                }\n            },\n\n            _errorsByName: function() {\n                var that = this,\n                    inputNames = that._getInputNames(),\n                    sorted = [];\n\n                for (var i = 0; i < inputNames.length; i += 1) {\n                    var name = inputNames[i];\n\n                    if (that._errors[name]) {\n                        sorted.push({\n                            field: name,\n                            message: that._errors[name]\n                        });\n                    }\n                }\n\n                return sorted;\n            },\n\n            _renderSummary: function() {\n                var that = this,\n                    options = this.options.validationSummary,\n                    element = this.element,\n                    prevElement = element.prev(),\n                    container;\n\n                if (options.container) {\n                    container = $(options.container);\n                } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                    container = prevElement;\n                } else {\n                    container = $(\"<div />\").insertBefore(that.element);\n                }\n\n                container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n                container.attr(\"role\", \"alert\");\n\n                container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n                return container;\n            },\n\n            _summaryClick: function(e) {\n                e.preventDefault();\n\n                var that = this,\n                    link = $(e.target),\n                    target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                    nextFocusable;\n\n                if (!target.length) {\n                    return;\n                }\n\n                nextFocusable = kendo.getWidgetFocusableElement(target);\n\n                if (nextFocusable) {\n                    nextFocusable.trigger(\"focus\");\n                }\n            },\n\n            showValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary,\n                    errors = that._errorsByName(),\n                    errorsList;\n\n                if (!summary) {\n                    summary = that.validationSummary = that._renderSummary();\n                }\n\n                errorsList = parseHtml(that._summaryTemplate({\n                    errors: errors\n                }));\n\n                summary.html(errorsList);\n\n                summary.toggleClass(\"k-hidden\", !errors.length);\n            },\n\n            hideValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary;\n\n                if (!summary) {\n                    return;\n                }\n\n                summary.addClass(\"k-hidden\");\n            }\n        });\n\n        kendo.ui.plugin(Validator);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    return kendo$1;\n\n}));\n"]}